// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:585
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9505

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1036,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	179, 875,
	196, 875,
	211, 244,
	288, 244,
	296, 715,
	323, 244,
	332, 715,
	369, 715,
	392, 244,
	416, 715,
	-2, 0,
	-1, 74,
	211, 248,
	-2, 0,
	-1, 75,
	106, 1036,
	185, 1036,
	402, 1036,
	403, 1036,
	-2, 0,
	-1, 87,
	119, 1010,
	134, 1010,
	193, 1010,
	222, 1010,
	253, 1010,
	263, 1010,
	397, 1010,
	-2, 997,
	-1, 117,
	124, 636,
	202, 628,
	210, 636,
	290, 622,
	341, 622,
	385, 636,
	-2, 0,
	-1, 118,
	4, 1038,
	21, 1038,
	22, 1038,
	23, 1038,
	24, 1038,
	25, 1038,
	27, 1038,
	32, 1038,
	37, 1038,
	38, 1038,
	39, 1038,
	40, 1038,
	41, 1038,
	42, 1038,
	43, 1038,
	44, 1038,
	45, 1038,
	46, 1038,
	47, 1038,
	49, 1038,
	50, 1038,
	51, 1038,
	52, 1038,
	53, 1038,
	54, 1038,
	57, 1038,
	58, 1038,
	59, 1038,
	60, 1038,
	62, 1038,
	63, 1038,
	67, 1038,
	68, 1038,
	69, 1038,
	70, 1038,
	71, 1038,
	73, 1038,
	74, 1038,
	75, 1038,
	76, 1038,
	78, 1038,
	80, 1038,
	81, 1038,
	82, 1038,
	85, 1038,
	86, 1038,
	94, 1038,
	95, 1038,
	96, 1038,
	97, 1038,
	98, 1038,
	99, 1038,
	100, 1038,
	101, 1038,
	103, 1038,
	105, 1038,
	106, 1038,
	108, 1038,
	111, 1038,
	112, 1038,
	113, 1038,
	115, 1038,
	117, 1038,
	118, 1038,
	120, 1038,
	121, 1038,
	122, 1038,
	123, 1038,
	124, 1038,
	125, 1038,
	126, 1038,
	127, 1038,
	128, 1038,
	129, 1038,
	130, 1038,
	131, 1038,
	133, 1038,
	139, 1038,
	140, 1038,
	141, 1038,
	142, 1038,
	143, 1038,
	144, 1038,
	146, 1038,
	148, 1038,
	152, 1038,
	153, 1038,
	155, 1038,
	156, 1038,
	158, 1038,
	159, 1038,
	161, 1038,
	162, 1038,
	163, 1038,
	164, 1038,
	165, 1038,
	166, 1038,
	167, 1038,
	168, 1038,
	170, 1038,
	171, 1038,
	173, 1038,
	174, 1038,
	175, 1038,
	179, 1038,
	180, 1038,
	181, 1038,
	182, 1038,
	185, 1038,
	186, 1038,
	187, 1038,
	188, 1038,
	189, 1038,
	190, 1038,
	191, 1038,
	192, 1038,
	194, 1038,
	196, 1038,
	198, 1038,
	200, 1038,
	201, 1038,
	202, 1038,
	204, 1038,
	205, 1038,
	208, 1038,
	209, 1038,
	210, 1038,
	211, 1038,
	213, 1038,
	214, 1038,
	216, 1038,
	217, 1038,
	219, 1038,
	220, 1038,
	223, 1038,
	224, 1038,
	227, 1038,
	228, 1038,
	230, 1038,
	231, 1038,
	232, 1038,
	233, 1038,
	234, 1038,
	235, 1038,
	236, 1038,
	237, 1038,
	238, 1038,
	239, 1038,
	241, 1038,
	242, 1038,
	243, 1038,
	244, 1038,
	246, 1038,
	249, 1038,
	250, 1038,
	251, 1038,
	252, 1038,
	254, 1038,
	255, 1038,
	256, 1038,
	258, 1038,
	259, 1038,
	260, 1038,
	261, 1038,
	264, 1038,
	265, 1038,
	267, 1038,
	269, 1038,
	270, 1038,
	271, 1038,
	272, 1038,
	273, 1038,
	274, 1038,
	275, 1038,
	276, 1038,
	277, 1038,
	278, 1038,
	280, 1038,
	281, 1038,
	282, 1038,
	283, 1038,
	284, 1038,
	285, 1038,
	287, 1038,
	289, 1038,
	290, 1038,
	291, 1038,
	292, 1038,
	293, 1038,
	294, 1038,
	295, 1038,
	296, 1038,
	297, 1038,
	299, 1038,
	300, 1038,
	301, 1038,
	302, 1038,
	303, 1038,
	305, 1038,
	306, 1038,
	307, 1038,
	308, 1038,
	309, 1038,
	310, 1038,
	311, 1038,
	312, 1038,
	314, 1038,
	316, 1038,
	317, 1038,
	318, 1038,
	319, 1038,
	320, 1038,
	321, 1038,
	323, 1038,
	324, 1038,
	325, 1038,
	326, 1038,
	327, 1038,
	328, 1038,
	329, 1038,
	330, 1038,
	332, 1038,
	333, 1038,
	334, 1038,
	335, 1038,
	336, 1038,
	337, 1038,
	338, 1038,
	339, 1038,
	340, 1038,
	341, 1038,
	343, 1038,
	344, 1038,
	345, 1038,
	346, 1038,
	348, 1038,
	349, 1038,
	350, 1038,
	351, 1038,
	353, 1038,
	354, 1038,
	355, 1038,
	356, 1038,
	357, 1038,
	358, 1038,
	359, 1038,
	360, 1038,
	361, 1038,
	362, 1038,
	363, 1038,
	364, 1038,
	366, 1038,
	367, 1038,
	368, 1038,
	370, 1038,
	371, 1038,
	372, 1038,
	373, 1038,
	374, 1038,
	375, 1038,
	376, 1038,
	378, 1038,
	379, 1038,
	380, 1038,
	381, 1038,
	383, 1038,
	385, 1038,
	386, 1038,
	387, 1038,
	388, 1038,
	389, 1038,
	391, 1038,
	392, 1038,
	393, 1038,
	395, 1038,
	396, 1038,
	399, 1038,
	400, 1038,
	401, 1038,
	402, 1038,
	403, 1038,
	404, 1038,
	406, 1038,
	408, 1038,
	409, 1038,
	410, 1038,
	411, 1038,
	412, 1038,
	413, 1038,
	414, 1038,
	416, 1038,
	417, 1038,
	418, 1038,
	423, 1038,
	424, 1038,
	425, 1038,
	426, 1038,
	427, 1038,
	428, 1038,
	-2, 0,
	-1, 119,
	1, 928,
	200, 928,
	287, 928,
	294, 928,
	431, 928,
	454, 928,
	-2, 0,
	-1, 121,
	1, 928,
	454, 928,
	-2, 0,
	-1, 122,
	1, 928,
	454, 928,
	-2, 0,
	-1, 123,
	1, 932,
	454, 932,
	-2, 0,
	-1, 147,
	119, 1009,
	134, 1009,
	193, 1009,
	222, 1009,
	253, 1009,
	263, 1009,
	397, 1009,
	-2, 1006,
	-1, 179,
	4, 1045,
	5, 1045,
	6, 1045,
	7, 1045,
	8, 1045,
	9, 1045,
	10, 1045,
	21, 1045,
	22, 1045,
	23, 1045,
	24, 1045,
	25, 1045,
	27, 1045,
	32, 1045,
	33, 1045,
	37, 1045,
	38, 1045,
	39, 1045,
	40, 1045,
	41, 1045,
	42, 1045,
	43, 1045,
	44, 1045,
	45, 1045,
	46, 1045,
	47, 1045,
	49, 1045,
	50, 1045,
	51, 1045,
	52, 1045,
	53, 1045,
	54, 1045,
	55, 1045,
	56, 1045,
	57, 1045,
	58, 1045,
	59, 1045,
	60, 1045,
	62, 1045,
	63, 1045,
	65, 1045,
	67, 1045,
	68, 1045,
	69, 1045,
	70, 1045,
	71, 1045,
	73, 1045,
	74, 1045,
	75, 1045,
	76, 1045,
	78, 1045,
	80, 1045,
	81, 1045,
	82, 1045,
	84, 1045,
	85, 1045,
	86, 1045,
	87, 1045,
	88, 1045,
	89, 1045,
	90, 1045,
	91, 1045,
	92, 1045,
	93, 1045,
	94, 1045,
	95, 1045,
	96, 1045,
	97, 1045,
	98, 1045,
	99, 1045,
	100, 1045,
	101, 1045,
	102, 1045,
	103, 1045,
	105, 1045,
	106, 1045,
	108, 1045,
	111, 1045,
	112, 1045,
	113, 1045,
	115, 1045,
	117, 1045,
	118, 1045,
	120, 1045,
	121, 1045,
	122, 1045,
	123, 1045,
	124, 1045,
	125, 1045,
	126, 1045,
	127, 1045,
	128, 1045,
	129, 1045,
	130, 1045,
	131, 1045,
	132, 1045,
	133, 1045,
	139, 1045,
	140, 1045,
	141, 1045,
	142, 1045,
	143, 1045,
	144, 1045,
	146, 1045,
	148, 1045,
	151, 1045,
	152, 1045,
	153, 1045,
	155, 1045,
	156, 1045,
	158, 1045,
	159, 1045,
	161, 1045,
	162, 1045,
	163, 1045,
	164, 1045,
	165, 1045,
	166, 1045,
	167, 1045,
	168, 1045,
	169, 1045,
	170, 1045,
	171, 1045,
	173, 1045,
	174, 1045,
	175, 1045,
	179, 1045,
	180, 1045,
	181, 1045,
	182, 1045,
	184, 1045,
	185, 1045,
	186, 1045,
	187, 1045,
	188, 1045,
	189, 1045,
	190, 1045,
	191, 1045,
	192, 1045,
	194, 1045,
	196, 1045,
	197, 1045,
	198, 1045,
	199, 1045,
	200, 1045,
	201, 1045,
	202, 1045,
	203, 1045,
	204, 1045,
	205, 1045,
	208, 1045,
	209, 1045,
	210, 1045,
	211, 1045,
	213, 1045,
	214, 1045,
	216, 1045,
	217, 1045,
	218, 1045,
	219, 1045,
	220, 1045,
	221, 1045,
	223, 1045,
	224, 1045,
	227, 1045,
	228, 1045,
	230, 1045,
	231, 1045,
	232, 1045,
	233, 1045,
	234, 1045,
	235, 1045,
	236, 1045,
	237, 1045,
	238, 1045,
	239, 1045,
	240, 1045,
	241, 1045,
	242, 1045,
	243, 1045,
	244, 1045,
	245, 1045,
	246, 1045,
	247, 1045,
	248, 1045,
	249, 1045,
	250, 1045,
	251, 1045,
	252, 1045,
	254, 1045,
	255, 1045,
	256, 1045,
	259, 1045,
	260, 1045,
	261, 1045,
	264, 1045,
	265, 1045,
	266, 1045,
	267, 1045,
	268, 1045,
	269, 1045,
	270, 1045,
	271, 1045,
	272, 1045,
	273, 1045,
	274, 1045,
	275, 1045,
	276, 1045,
	277, 1045,
	278, 1045,
	280, 1045,
	281, 1045,
	282, 1045,
	283, 1045,
	284, 1045,
	285, 1045,
	287, 1045,
	289, 1045,
	290, 1045,
	291, 1045,
	292, 1045,
	293, 1045,
	294, 1045,
	295, 1045,
	296, 1045,
	297, 1045,
	299, 1045,
	300, 1045,
	301, 1045,
	302, 1045,
	303, 1045,
	305, 1045,
	306, 1045,
	307, 1045,
	308, 1045,
	309, 1045,
	310, 1045,
	311, 1045,
	312, 1045,
	314, 1045,
	315, 1045,
	316, 1045,
	317, 1045,
	318, 1045,
	319, 1045,
	320, 1045,
	321, 1045,
	323, 1045,
	324, 1045,
	325, 1045,
	326, 1045,
	327, 1045,
	328, 1045,
	329, 1045,
	330, 1045,
	332, 1045,
	333, 1045,
	334, 1045,
	335, 1045,
	336, 1045,
	337, 1045,
	338, 1045,
	339, 1045,
	340, 1045,
	341, 1045,
	342, 1045,
	343, 1045,
	344, 1045,
	345, 1045,
	346, 1045,
	347, 1045,
	348, 1045,
	349, 1045,
	350, 1045,
	351, 1045,
	353, 1045,
	354, 1045,
	355, 1045,
	356, 1045,
	357, 1045,
	358, 1045,
	359, 1045,
	360, 1045,
	361, 1045,
	362, 1045,
	363, 1045,
	364, 1045,
	366, 1045,
	367, 1045,
	368, 1045,
	370, 1045,
	371, 1045,
	372, 1045,
	373, 1045,
	374, 1045,
	375, 1045,
	376, 1045,
	378, 1045,
	379, 1045,
	380, 1045,
	381, 1045,
	383, 1045,
	385, 1045,
	386, 1045,
	387, 1045,
	388, 1045,
	389, 1045,
	390, 1045,
	391, 1045,
	392, 1045,
	393, 1045,
	395, 1045,
	396, 1045,
	398, 1045,
	399, 1045,
	400, 1045,
	401, 1045,
	402, 1045,
	403, 1045,
	404, 1045,
	405, 1045,
	406, 1045,
	408, 1045,
	409, 1045,
	410, 1045,
	411, 1045,
	412, 1045,
	413, 1045,
	414, 1045,
	416, 1045,
	417, 1045,
	418, 1045,
	423, 1045,
	424, 1045,
	425, 1045,
	426, 1045,
	427, 1045,
	428, 1045,
	429, 1045,
	437, 1045,
	442, 1045,
	443, 1045,
	444, 1045,
	451, 1045,
	456, 1045,
	-2, 0,
	-1, 546,
	150, 1712,
	382, 1712,
	434, 1712,
	453, 1712,
	-2, 0,
	-1, 547,
	150, 1789,
	382, 1789,
	434, 1789,
	453, 1789,
	-2, 0,
	-1, 548,
	150, 1702,
	382, 1702,
	434, 1702,
	453, 1702,
	-2, 0,
	-1, 550,
	150, 1877,
	382, 1877,
	434, 1877,
	453, 1877,
	-2, 0,
	-1, 552,
	150, 1904,
	382, 1904,
	434, 1904,
	453, 1904,
	-2, 0,
	-1, 559,
	150, 1799,
	382, 1799,
	434, 1799,
	453, 1799,
	-2, 495,
	-1, 576,
	453, 1661,
	455, 1661,
	-2, 684,
	-1, 577,
	453, 1663,
	455, 1663,
	-2, 685,
	-1, 578,
	453, 1662,
	455, 1662,
	-2, 686,
	-1, 579,
	455, 1608,
	-2, 687,
	-1, 726,
	290, 623,
	341, 623,
	-2, 0,
	-1, 727,
	290, 622,
	341, 622,
	-2, 575,
	-1, 730,
	1, 646,
	450, 646,
	452, 646,
	454, 646,
	-2, 0,
	-1, 731,
	1, 683,
	147, 683,
	450, 683,
	452, 683,
	454, 683,
	-2, 0,
	-1, 740,
	1, 646,
	450, 646,
	452, 646,
	454, 646,
	-2, 0,
	-1, 741,
	1, 648,
	450, 648,
	452, 648,
	454, 648,
	-2, 0,
	-1, 742,
	1, 651,
	450, 651,
	452, 651,
	454, 651,
	-2, 0,
	-1, 746,
	1, 665,
	450, 665,
	452, 665,
	454, 665,
	-2, 0,
	-1, 747,
	1, 667,
	450, 667,
	452, 667,
	454, 667,
	-2, 0,
	-1, 790,
	134, 1047,
	222, 1047,
	253, 1047,
	-2, 1006,
	-1, 805,
	134, 1046,
	222, 1046,
	253, 1046,
	-2, 1006,
	-1, 829,
	453, 1660,
	-2, 503,
	-1, 858,
	451, 1652,
	-2, 1643,
	-1, 864,
	5, 1182,
	-2, 1693,
	-1, 865,
	5, 1183,
	-2, 1697,
	-1, 866,
	5, 1184,
	-2, 1696,
	-1, 867,
	5, 1185,
	-2, 1902,
	-1, 868,
	5, 1186,
	-2, 1801,
	-1, 869,
	5, 1187,
	-2, 1869,
	-1, 870,
	5, 1188,
	-2, 1871,
	-1, 871,
	5, 1189,
	-2, 1882,
	-1, 872,
	5, 1190,
	-2, 1872,
	-1, 873,
	5, 1191,
	-2, 1873,
	-1, 874,
	5, 1192,
	-2, 1692,
	-1, 875,
	5, 1193,
	-2, 1917,
	-1, 876,
	5, 1194,
	-2, 1764,
	-1, 877,
	5, 1195,
	-2, 1809,
	-1, 878,
	5, 1196,
	-2, 1811,
	-1, 879,
	5, 1197,
	-2, 1768,
	-1, 880,
	5, 1198,
	451, 1670,
	-2, 1661,
	-1, 881,
	5, 1254,
	451, 1254,
	-2, 1952,
	-1, 886,
	451, 1671,
	-2, 1662,
	-1, 888,
	5, 1202,
	-2, 1950,
	-1, 889,
	5, 1203,
	-2, 1951,
	-1, 890,
	5, 1204,
	-2, 1767,
	-1, 891,
	5, 1205,
	-2, 1963,
	-1, 892,
	5, 1206,
	-2, 1769,
	-1, 893,
	5, 1207,
	-2, 1770,
	-1, 894,
	5, 1208,
	-2, 1771,
	-1, 895,
	5, 1209,
	-2, 1932,
	-1, 896,
	5, 1210,
	-2, 1961,
	-1, 897,
	5, 1211,
	-2, 1747,
	-1, 898,
	5, 1212,
	-2, 1748,
	-1, 899,
	5, 1226,
	-2, 1944,
	-1, 901,
	5, 1201,
	-2, 1940,
	-1, 902,
	5, 1201,
	-2, 1939,
	-1, 903,
	5, 1201,
	-2, 1956,
	-1, 904,
	5, 1218,
	-2, 1934,
	-1, 905,
	5, 1219,
	-2, 1694,
	-1, 906,
	5, 1229,
	-2, 1933,
	-1, 907,
	5, 1231,
	-2, 1972,
	-1, 909,
	5, 1242,
	-2, 1722,
	-1, 910,
	5, 1253,
	-2, 1965,
	-1, 911,
	5, 1245,
	-2, 1966,
	-1, 912,
	5, 1253,
	-2, 1967,
	-1, 913,
	5, 1249,
	-2, 1968,
	-1, 914,
	5, 1169,
	-2, 1777,
	-1, 915,
	5, 1170,
	-2, 1778,
	-1, 916,
	453, 1658,
	-2, 1642,
	-1, 917,
	451, 1992,
	-2, 1659,
	-1, 937,
	5, 1237,
	-2, 1892,
	-1, 954,
	5, 1236,
	-2, 1973,
	-1, 964,
	5, 1238,
	417, 1238,
	-2, 1935,
	-1, 965,
	5, 1239,
	417, 1239,
	-2, 1936,
	-1, 1001,
	451, 1670,
	-2, 1661,
	-1, 1029,
	150, 1904,
	382, 1904,
	434, 1904,
	453, 1904,
	-2, 0,
	-1, 1030,
	1, 483,
	454, 483,
	-2, 940,
	-1, 1150,
	305, 1639,
	444, 1639,
	-2, 1638,
	-1, 1173,
	456, 1639,
	-2, 1640,
	-1, 1208,
	296, 715,
	416, 715,
	-2, 243,
	-1, 1228,
	276, 1034,
	-2, 848,
	-1, 1237,
	257, 1665,
	-2, 0,
	-1, 1301,
	1, 358,
	450, 358,
	452, 358,
	454, 358,
	-2, 1008,
	-1, 1304,
	4, 1971,
	11, 1971,
	12, 1971,
	14, 1971,
	15, 1971,
	16, 1971,
	17, 1971,
	18, 1971,
	19, 1971,
	21, 1971,
	22, 1971,
	23, 1971,
	24, 1971,
	25, 1971,
	27, 1971,
	30, 1971,
	32, 1971,
	34, 1971,
	37, 1971,
	38, 1971,
	39, 1971,
	40, 1971,
	41, 1971,
	42, 1971,
	43, 1971,
	44, 1971,
	45, 1971,
	46, 1971,
	47, 1971,
	49, 1971,
	50, 1971,
	51, 1971,
	52, 1971,
	53, 1971,
	54, 1971,
	57, 1971,
	58, 1971,
	59, 1971,
	60, 1971,
	62, 1971,
	63, 1971,
	64, 1971,
	67, 1971,
	68, 1971,
	69, 1971,
	70, 1971,
	71, 1971,
	72, 1971,
	73, 1971,
	74, 1971,
	75, 1971,
	76, 1971,
	78, 1971,
	79, 1971,
	80, 1971,
	81, 1971,
	82, 1971,
	84, 1971,
	85, 1971,
	86, 1971,
	94, 1971,
	95, 1971,
	96, 1971,
	97, 1971,
	98, 1971,
	99, 1971,
	100, 1971,
	101, 1971,
	103, 1971,
	105, 1971,
	106, 1971,
	108, 1971,
	111, 1971,
	112, 1971,
	113, 1971,
	115, 1971,
	117, 1971,
	118, 1971,
	120, 1971,
	121, 1971,
	122, 1971,
	123, 1971,
	124, 1971,
	125, 1971,
	126, 1971,
	127, 1971,
	128, 1971,
	129, 1971,
	130, 1971,
	131, 1971,
	135, 1971,
	136, 1971,
	137, 1971,
	138, 1971,
	139, 1971,
	140, 1971,
	141, 1971,
	142, 1971,
	143, 1971,
	144, 1971,
	145, 1971,
	146, 1971,
	148, 1971,
	151, 1971,
	152, 1971,
	153, 1971,
	155, 1971,
	156, 1971,
	158, 1971,
	159, 1971,
	161, 1971,
	162, 1971,
	163, 1971,
	164, 1971,
	165, 1971,
	166, 1971,
	167, 1971,
	168, 1971,
	169, 1971,
	170, 1971,
	171, 1971,
	172, 1971,
	173, 1971,
	174, 1971,
	175, 1971,
	176, 1971,
	177, 1971,
	178, 1971,
	180, 1971,
	181, 1971,
	182, 1971,
	184, 1971,
	185, 1971,
	186, 1971,
	187, 1971,
	188, 1971,
	189, 1971,
	190, 1971,
	191, 1971,
	192, 1971,
	194, 1971,
	196, 1971,
	197, 1971,
	198, 1971,
	199, 1971,
	200, 1971,
	201, 1971,
	202, 1971,
	203, 1971,
	204, 1971,
	205, 1971,
	206, 1971,
	207, 1971,
	208, 1971,
	209, 1971,
	210, 1971,
	211, 1971,
	213, 1971,
	214, 1971,
	216, 1971,
	217, 1971,
	218, 1971,
	219, 1971,
	220, 1971,
	221, 1971,
	223, 1971,
	224, 1971,
	227, 1971,
	228, 1971,
	229, 1971,
	230, 1971,
	231, 1971,
	232, 1971,
	233, 1971,
	234, 1971,
	235, 1971,
	236, 1971,
	237, 1971,
	238, 1971,
	239, 1971,
	240, 1971,
	241, 1971,
	242, 1971,
	243, 1971,
	244, 1971,
	247, 1971,
	249, 1971,
	250, 1971,
	251, 1971,
	252, 1971,
	254, 1971,
	255, 1971,
	256, 1971,
	259, 1971,
	260, 1971,
	261, 1971,
	262, 1971,
	264, 1971,
	265, 1971,
	267, 1971,
	269, 1971,
	270, 1971,
	271, 1971,
	272, 1971,
	273, 1971,
	274, 1971,
	275, 1971,
	276, 1971,
	277, 1971,
	278, 1971,
	280, 1971,
	281, 1971,
	282, 1971,
	283, 1971,
	284, 1971,
	285, 1971,
	287, 1971,
	289, 1971,
	290, 1971,
	291, 1971,
	292, 1971,
	293, 1971,
	294, 1971,
	295, 1971,
	296, 1971,
	297, 1971,
	299, 1971,
	300, 1971,
	301, 1971,
	302, 1971,
	303, 1971,
	304, 1971,
	305, 1971,
	306, 1971,
	307, 1971,
	308, 1971,
	309, 1971,
	310, 1971,
	311, 1971,
	312, 1971,
	314, 1971,
	315, 1971,
	316, 1971,
	317, 1971,
	318, 1971,
	319, 1971,
	320, 1971,
	321, 1971,
	322, 1971,
	323, 1971,
	324, 1971,
	325, 1971,
	326, 1971,
	327, 1971,
	328, 1971,
	329, 1971,
	330, 1971,
	332, 1971,
	333, 1971,
	334, 1971,
	335, 1971,
	336, 1971,
	337, 1971,
	338, 1971,
	339, 1971,
	340, 1971,
	341, 1971,
	343, 1971,
	344, 1971,
	345, 1971,
	346, 1971,
	347, 1971,
	348, 1971,
	349, 1971,
	350, 1971,
	351, 1971,
	353, 1971,
	354, 1971,
	355, 1971,
	356, 1971,
	357, 1971,
	358, 1971,
	359, 1971,
	360, 1971,
	361, 1971,
	362, 1971,
	363, 1971,
	364, 1971,
	366, 1971,
	367, 1971,
	368, 1971,
	370, 1971,
	371, 1971,
	372, 1971,
	373, 1971,
	374, 1971,
	375, 1971,
	376, 1971,
	378, 1971,
	379, 1971,
	380, 1971,
	381, 1971,
	383, 1971,
	385, 1971,
	386, 1971,
	387, 1971,
	388, 1971,
	389, 1971,
	391, 1971,
	392, 1971,
	393, 1971,
	395, 1971,
	396, 1971,
	399, 1971,
	400, 1971,
	401, 1971,
	402, 1971,
	403, 1971,
	404, 1971,
	406, 1971,
	408, 1971,
	409, 1971,
	410, 1971,
	411, 1971,
	412, 1971,
	413, 1971,
	414, 1971,
	416, 1971,
	417, 1971,
	418, 1971,
	423, 1971,
	424, 1971,
	425, 1971,
	426, 1971,
	427, 1971,
	428, 1971,
	429, 1971,
	430, 1971,
	432, 1971,
	433, 1971,
	434, 1971,
	435, 1971,
	436, 1971,
	437, 1971,
	439, 1971,
	440, 1971,
	441, 1971,
	442, 1971,
	443, 1971,
	444, 1971,
	445, 1971,
	446, 1971,
	447, 1971,
	449, 1971,
	452, 1971,
	453, 1971,
	455, 1971,
	456, 1971,
	-2, 0,
	-1, 1307,
	150, 1877,
	382, 1877,
	434, 1877,
	453, 1877,
	-2, 0,
	-1, 1335,
	290, 623,
	341, 623,
	-2, 0,
	-1, 1358,
	1, 618,
	450, 618,
	452, 618,
	454, 618,
	-2, 0,
	-1, 1359,
	1, 637,
	450, 637,
	452, 637,
	454, 637,
	-2, 0,
	-1, 1360,
	1, 625,
	450, 625,
	452, 625,
	454, 625,
	-2, 0,
	-1, 1381,
	1, 1924,
	450, 1924,
	452, 1924,
	453, 1924,
	454, 1924,
	-2, 663,
	-1, 1382,
	1, 1875,
	450, 1875,
	452, 1875,
	453, 1875,
	454, 1875,
	-2, 664,
	-1, 1395,
	1, 935,
	454, 935,
	-2, 940,
	-1, 1400,
	134, 1046,
	222, 1046,
	253, 1046,
	-2, 1006,
	-1, 1493,
	119, 1010,
	134, 1010,
	193, 1010,
	222, 1010,
	253, 1010,
	263, 1010,
	397, 1010,
	-2, 1410,
	-1, 1546,
	452, 1543,
	-2, 0,
	-1, 1588,
	119, 1010,
	134, 1010,
	193, 1010,
	222, 1010,
	253, 1010,
	263, 1010,
	397, 1010,
	-2, 1119,
	-1, 1642,
	451, 1241,
	-2, 1229,
	-1, 1681,
	1, 485,
	454, 485,
	-2, 940,
	-1, 1874,
	1, 620,
	450, 620,
	452, 620,
	454, 620,
	-2, 0,
	-1, 1875,
	1, 639,
	450, 639,
	452, 639,
	454, 639,
	-2, 0,
	-1, 1955,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1290,
	-1, 1956,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1291,
	-1, 1957,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1292,
	-1, 1958,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1293,
	-1, 1959,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1294,
	-1, 1960,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1295,
	-1, 1961,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1296,
	-1, 1962,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1297,
	-1, 1974,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1309,
	-1, 1975,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1310,
	-1, 1976,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1311,
	-1, 1979,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1316,
	-1, 1985,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1320,
	-1, 1987,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1328,
	-1, 1988,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1329,
	-1, 1989,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1330,
	-1, 1990,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1331,
	-1, 2084,
	5, 1198,
	150, 1554,
	451, 1670,
	-2, 1661,
	-1, 2085,
	150, 1555,
	-2, 1928,
	-1, 2086,
	150, 1556,
	-2, 1798,
	-1, 2087,
	150, 1557,
	-2, 1723,
	-1, 2088,
	150, 1558,
	-2, 1758,
	-1, 2089,
	150, 1559,
	-2, 1796,
	-1, 2090,
	150, 1560,
	-2, 1868,
	-1, 2166,
	1, 1120,
	84, 1120,
	119, 1120,
	134, 1120,
	147, 1120,
	151, 1120,
	157, 1120,
	160, 1120,
	184, 1120,
	193, 1120,
	203, 1120,
	218, 1120,
	222, 1120,
	240, 1120,
	253, 1120,
	257, 1120,
	263, 1120,
	313, 1120,
	315, 1120,
	397, 1120,
	407, 1120,
	420, 1120,
	421, 1120,
	422, 1120,
	431, 1120,
	450, 1120,
	452, 1120,
	454, 1120,
	455, 1120,
	-2, 1119,
	-1, 2171,
	451, 1644,
	-2, 1656,
	-1, 2192,
	451, 1240,
	-2, 1230,
	-1, 2427,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1318,
	-1, 2428,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1322,
	-1, 2434,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1324,
	-1, 2614,
	200, 940,
	287, 940,
	294, 940,
	431, 940,
	-2, 482,
	-1, 2705,
	276, 1034,
	-2, 848,
	-1, 2785,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1326,
	-1, 2792,
	197, 0,
	199, 0,
	247, 0,
	-2, 1345,
	-1, 2855,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1374,
	-1, 2856,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1375,
	-1, 2857,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1376,
	-1, 2861,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1380,
	-1, 2862,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1381,
	-1, 2863,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1382,
	-1, 2906,
	451, 1645,
	-2, 1657,
	-1, 2993,
	453, 2074,
	-2, 983,
	-1, 3039,
	197, 0,
	199, 0,
	247, 0,
	-2, 1346,
	-1, 3042,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1349,
	-1, 3043,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1351,
	-1, 3198,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1350,
	-1, 3199,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1352,
	-1, 3209,
	197, 0,
	-2, 1383,
	-1, 3312,
	197, 0,
	-2, 1384,
	-1, 3428,
	41, 0,
	169, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1931,
}

const sqlPrivate = 57344

const sqlLast = 72407

var sqlAct = [...]int{

	886, 3514, 3239, 3427, 3437, 3242, 3504, 3142, 2323, 2692,
	2115, 3406, 3394, 3397, 3264, 3438, 3228, 2332, 3439, 3271,
	3381, 1002, 2823, 3025, 3316, 3426, 2324, 3166, 209, 2926,
	815, 1293, 2631, 1942, 3189, 3276, 2984, 2979, 3101, 211,
	1036, 211, 211, 2158, 211, 211, 211, 211, 211, 2721,
	2002, 211, 2989, 1154, 2714, 1408, 2966, 2927, 1055, 578,
	2688, 1612, 2716, 557, 2420, 806, 2295, 3213, 2576, 2297,
	2221, 1583, 1851, 2364, 2154, 2320, 2300, 211, 2366, 994,
	2590, 578, 1581, 2563, 1812, 2536, 3024, 674, 2355, 2374,
	1342, 3073, 2357, 2552, 1801, 1289, 2333, 2223, 1735, 2363,
	1802, 4, 1809, 2535, 1555, 1491, 2878, 1179, 1501, 1939,
	2159, 3317, 1726, 2455, 2015, 1147, 2280, 1935, 1591, 2033,
	2416, 2053, 1166, 814, 140, 1519, 1830, 2373, 858, 1764,
	86, 2161, 1043, 2298, 1753, 882, 1711, 2133, 1760, 1556,
	1713, 3265, 2595, 1395, 2045, 1999, 2690, 2256, 986, 1156,
	1302, 1798, 1286, 843, 2326, 203, 1222, 579, 803, 2213,
	1163, 2112, 525, 2027, 1613, 2255, 205, 1032, 580, 2141,
	2367, 32, 511, 1276, 211, 211, 533, 669, 1565, 829,
	968, 989, 2123, 204, 2016, 2080, 1482, 147, 1409, 1407,
	541, 1797, 574, 551, 1818, 1252, 1300, 619, 1514, 140,
	1176, 650, 1725, 148, 842, 37, 36, 528, 536, 991,
	34, 966, 1394, 25, 23, 21, 737, 1413, 1234, 2451,
	2895, 1832, 721, 2896, 1852, 583, 2325, 3542, 3533, 1832,
	2132, 2132, 3532, 1040, 3513, 2132, 810, 1769, 2275, 2242,
	3500, 3498, 586, 3115, 3115, 2731, 3461, 583, 1832, 3462,
	2612, 1421, 1422, 2030, 1582, 3459, 3457, 2379, 2132, 2132,
	3454, 2730, 805, 3455, 586, 3451, 3448, 3424, 3452, 1769,
	1769, 3423, 3422, 684, 1769, 1844, 3419, 1424, 3418, 1844,
	811, 1844, 2329, 179, 3376, 3366, 3365, 2185, 3115, 3115,
	3359, 3353, 3351, 1769, 3115, 3115, 3314, 2780, 3297, 2185,
	983, 1769, 2508, 2509, 1423, 969, 969, 2125, 3294, 3256,
	1000, 3115, 1769, 3255, 3248, 810, 1769, 1769, 2031, 3247,
	2470, 181, 3115, 1421, 1422, 2471, 3219, 3200, 791, 1769,
	2185, 3187, 3178, 3139, 1844, 2743, 2132, 3132, 908, 3114,
	2132, 1040, 3115, 3041, 790, 3001, 2185, 2995, 2759, 1424,
	2759, 2132, 2964, 179, 179, 2965, 2901, 2891, 2884, 2902,
	2892, 2132, 3377, 2523, 180, 2881, 1019, 2816, 2804, 798,
	1769, 2132, 3300, 1197, 173, 1191, 1423, 2758, 2750, 2181,
	2759, 2751, 174, 1763, 1443, 1429, 970, 972, 973, 2032,
	2029, 181, 181, 2683, 2549, 2547, 1844, 2132, 2132, 2546,
	1844, 2500, 2132, 149, 2132, 2483, 2472, 2353, 2484, 2132,
	1848, 2881, 1769, 2124, 1421, 1422, 1451, 1452, 1453, 2198,
	2184, 2179, 2132, 2185, 2132, 3133, 2173, 1769, 2132, 1769,
	3035, 1014, 1421, 1422, 180, 180, 2514, 2751, 2131, 1847,
	1424, 2132, 1848, 2270, 173, 173, 2212, 1446, 1447, 1448,
	1449, 1684, 174, 174, 2743, 2307, 2419, 1429, 1424, 1768,
	1185, 2508, 2509, 2157, 2526, 2527, 2528, 1423, 2210, 1444,
	1551, 1175, 2732, 149, 149, 1344, 1492, 3090, 1833, 2152,
	3037, 2151, 2150, 2149, 2034, 1423, 1833, 2148, 1451, 1452,
	1453, 2733, 3052, 1421, 1422, 179, 1454, 1455, 1456, 1464,
	1465, 1466, 2508, 2509, 1015, 1833, 2400, 2454, 1704, 974,
	971, 179, 797, 885, 796, 795, 211, 794, 793, 1424,
	2524, 789, 2523, 1470, 788, 787, 786, 1421, 1422, 785,
	784, 783, 782, 181, 781, 780, 1196, 779, 1190, 2508,
	2509, 1444, 778, 719, 211, 718, 1423, 717, 1429, 181,
	2730, 211, 716, 1424, 1443, 1015, 715, 714, 713, 712,
	711, 1440, 1445, 710, 709, 708, 1429, 211, 1058, 211,
	211, 1159, 211, 1058, 211, 707, 180, 706, 705, 704,
	1423, 2028, 211, 211, 829, 703, 1042, 702, 829, 701,
	1047, 700, 180, 699, 698, 2514, 1142, 1451, 1452, 1453,
	697, 1142, 173, 696, 695, 2190, 694, 211, 2071, 693,
	174, 2899, 2124, 2525, 683, 149, 1450, 1446, 1447, 1448,
	1449, 211, 1840, 1159, 1159, 211, 211, 1429, 211, 2760,
	1831, 2328, 682, 641, 1445, 640, 2514, 599, 598, 597,
	211, 589, 588, 587, 564, 563, 562, 2529, 211, 1915,
	1444, 1461, 561, 545, 1471, 201, 813, 200, 1451, 1452,
	1453, 1429, 211, 211, 211, 211, 211, 1159, 1159, 1169,
	2593, 1015, 1159, 2514, 211, 1159, 211, 211, 199, 2524,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 1438, 1439,
	211, 198, 1451, 1452, 1453, 997, 1030, 197, 196, 1297,
	195, 194, 179, 1459, 179, 193, 1492, 192, 191, 190,
	189, 1444, 188, 187, 186, 1051, 185, 1144, 1149, 184,
	2524, 183, 182, 2477, 2466, 1150, 1159, 2313, 2285, 1173,
	2519, 2517, 2518, 2510, 2511, 2512, 2513, 2515, 2516, 1178,
	181, 2174, 181, 1445, 1027, 1444, 211, 2165, 583, 1584,
	1177, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	211, 1854, 2069, 1522, 1184, 586, 1189, 1522, 1195, 1521,
	1709, 1420, 2525, 1521, 1305, 211, 1598, 1317, 1508, 2067,
	1235, 1235, 2065, 180, 2063, 180, 1450, 1181, 1239, 179,
	1525, 1049, 3444, 173, 1520, 173, 140, 1004, 3425, 3347,
	3307, 174, 811, 174, 1445, 3303, 3179, 3238, 3094, 3174,
	1503, 3301, 3072, 2525, 3071, 3059, 3058, 3057, 3056, 3050,
	1173, 1303, 149, 2754, 149, 75, 1290, 181, 1853, 1462,
	3049, 1365, 3048, 2963, 2915, 2914, 1280, 1283, 1445, 2912,
	2905, 2875, 2874, 2873, 1236, 1425, 1426, 1427, 1428, 1430,
	1431, 2800, 1313, 2508, 2509, 1503, 1401, 2796, 2588, 1316,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 2543,
	180, 2534, 2507, 1806, 2504, 2503, 2501, 2490, 2489, 2488,
	173, 2485, 2520, 2521, 2522, 2482, 2460, 2459, 174, 2519,
	2517, 2518, 2510, 2511, 2512, 2513, 2515, 2516, 2452, 2354,
	2166, 2038, 2314, 1420, 1400, 982, 1774, 1419, 1393, 149,
	1772, 1460, 1490, 3540, 1435, 1436, 1442, 1441, 1437, 1463,
	2569, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	2519, 2517, 2518, 2510, 2511, 2512, 2513, 2515, 2516, 1504,
	3512, 1502, 1705, 2257, 1336, 1322, 3511, 3460, 1003, 1399,
	2825, 2415, 3414, 3412, 3344, 2508, 2509, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 1406, 1398, 3341, 2606, 211, 3338,
	2510, 2511, 2512, 2513, 2515, 2516, 3337, 3336, 1396, 2187,
	3332, 811, 3326, 3298, 3293, 179, 2011, 2514, 3292, 2005,
	3234, 1553, 1562, 3211, 211, 3184, 3183, 3164, 3161, 2508,
	2509, 3155, 791, 3173, 211, 1058, 211, 211, 211, 3089,
	3070, 3015, 884, 3012, 578, 211, 211, 2942, 790, 578,
	211, 1607, 1402, 181, 2941, 211, 1416, 1417, 2930, 179,
	2929, 1056, 2887, 1142, 840, 2791, 1167, 1679, 1524, 2761,
	2744, 2708, 2677, 2656, 117, 2634, 2633, 2608, 2548, 2481,
	1058, 2480, 2465, 1421, 1422, 2443, 2294, 3319, 2070, 1526,
	1523, 2312, 1515, 1592, 1512, 2194, 180, 181, 2193, 2169,
	2146, 2524, 829, 2130, 1707, 2061, 173, 1486, 1142, 1424,
	1597, 1559, 1560, 1554, 174, 841, 1550, 825, 1678, 2514,
	1549, 1572, 1421, 1422, 1548, 2634, 1547, 1421, 1422, 969,
	1546, 1516, 1517, 1545, 1544, 149, 1423, 1543, 1542, 140,
	180, 1600, 1540, 1539, 1538, 1537, 1536, 1000, 1424, 1000,
	173, 811, 1609, 1424, 1535, 1534, 1533, 1676, 174, 1855,
	1532, 1531, 1530, 2514, 1529, 1528, 1605, 1505, 1487, 1485,
	819, 1480, 1026, 1604, 1017, 1423, 1010, 3160, 3223, 149,
	1423, 3091, 3045, 2911, 2894, 2890, 2469, 1577, 2147, 3093,
	2910, 1504, 2508, 2509, 2525, 2604, 1602, 1483, 1704, 1593,
	1730, 1619, 1589, 1681, 3339, 1159, 211, 2717, 3177, 1552,
	583, 2659, 1058, 1046, 1704, 583, 1682, 1429, 1704, 1703,
	1044, 1580, 1579, 1719, 996, 1700, 1578, 586, 1586, 1576,
	1575, 1574, 586, 3134, 2897, 2746, 1608, 2745, 1037, 3277,
	1142, 1675, 2068, 1584, 1031, 2974, 998, 2524, 1451, 1452,
	1453, 211, 211, 1610, 1040, 2259, 1429, 1522, 211, 2066,
	3304, 1040, 2064, 1521, 2062, 1045, 3302, 1535, 211, 2508,
	2509, 1535, 2487, 1335, 2486, 2425, 1696, 211, 2244, 211,
	1391, 211, 1041, 1690, 2940, 211, 3237, 1040, 776, 2694,
	1366, 2693, 1343, 1510, 2030, 1852, 3272, 211, 1344, 1803,
	2955, 1444, 2944, 1695, 1694, 2766, 1750, 1704, 1701, 1752,
	2671, 1734, 1757, 2518, 2510, 2511, 2512, 2513, 2515, 2516,
	1807, 1748, 3214, 3515, 2325, 1038, 2827, 777, 2046, 2192,
	1541, 2475, 1039, 1518, 3445, 2686, 1794, 1159, 211, 1159,
	2525, 1761, 211, 1212, 3456, 1159, 3453, 2726, 1159, 211,
	2922, 211, 211, 3391, 2980, 2361, 3358, 1564, 1326, 2031,
	3487, 1159, 1159, 1178, 211, 636, 3486, 1790, 1824, 211,
	1815, 2616, 583, 3125, 1177, 1200, 772, 2098, 578, 211,
	2199, 211, 770, 211, 981, 211, 1644, 211, 1489, 586,
	3446, 768, 3537, 1363, 1445, 211, 1903, 1210, 211, 766,
	211, 1698, 1756, 2514, 763, 3263, 1767, 1793, 3258, 211,
	2957, 2953, 1901, 2952, 1037, 2919, 1822, 2918, 2512, 2513,
	2515, 2516, 2464, 2463, 1568, 2188, 2462, 1870, 211, 1857,
	2032, 2029, 2461, 2429, 211, 756, 1783, 1835, 1364, 2605,
	1837, 1784, 1037, 1839, 637, 1714, 2277, 1842, 2269, 1715,
	1727, 1691, 1046, 2266, 1058, 2247, 2618, 1571, 2517, 2518,
	2510, 2511, 2512, 2513, 2515, 2516, 1211, 811, 2180, 1040,
	2216, 1986, 1817, 1397, 1859, 1820, 1566, 1174, 1723, 1362,
	3112, 2214, 1142, 2057, 2056, 1046, 1303, 2524, 1782, 631,
	1944, 1569, 1245, 1645, 1244, 1922, 2321, 1919, 1601, 1728,
	1729, 1038, 3195, 1324, 1045, 2225, 2767, 3109, 1039, 2246,
	2658, 1862, 3357, 1567, 1425, 1426, 1427, 1428, 1430, 1431,
	809, 1913, 1243, 1699, 1242, 2034, 1724, 2017, 2018, 1038,
	2565, 1027, 997, 1849, 997, 1716, 1039, 1045, 1264, 1058,
	1861, 2216, 1206, 1710, 583, 2017, 2043, 1718, 3110, 1914,
	2206, 1866, 2214, 2235, 2172, 1427, 1428, 1430, 1431, 1730,
	630, 586, 2001, 1431, 1223, 3416, 2001, 1142, 1714, 1593,
	1886, 2932, 1715, 2234, 3244, 1821, 2769, 2768, 760, 3121,
	2525, 2079, 211, 2083, 2083, 2096, 2397, 2017, 1570, 1917,
	2116, 2118, 1997, 2228, 808, 2122, 1920, 2034, 2202, 3478,
	1221, 2417, 2418, 1720, 2009, 1619, 1619, 1736, 1404, 2007,
	2204, 1873, 2263, 1058, 211, 1995, 1940, 1941, 1916, 1376,
	1334, 1918, 2028, 211, 2178, 1740, 211, 1921, 2516, 1058,
	1874, 791, 1705, 2257, 791, 791, 2046, 1220, 2170, 1337,
	809, 1142, 2205, 2042, 1025, 1040, 811, 1931, 1705, 2257,
	1932, 1933, 1705, 2257, 1361, 2203, 3486, 1142, 1716, 811,
	1358, 639, 638, 811, 810, 2723, 2167, 1737, 804, 3527,
	1718, 1208, 2055, 1040, 2668, 1770, 2810, 2059, 2060, 1223,
	2564, 1875, 2663, 2153, 1008, 3333, 1747, 2163, 2164, 691,
	1732, 3105, 3194, 1319, 3106, 668, 1721, 2615, 2013, 2245,
	2510, 2511, 2512, 2513, 2515, 2516, 1390, 629, 211, 628,
	1344, 1359, 1344, 969, 808, 2138, 751, 565, 2724, 2040,
	1991, 1912, 3119, 1832, 1721, 1000, 1720, 2652, 1992, 2617,
	2227, 1993, 3108, 2137, 1998, 1513, 632, 1879, 802, 2602,
	1058, 1705, 1702, 2182, 3111, 211, 1741, 2954, 1007, 1000,
	2646, 811, 2309, 211, 1730, 2680, 774, 523, 1721, 2091,
	773, 2107, 2120, 1325, 211, 140, 764, 2267, 1142, 2143,
	2144, 2034, 2128, 2129, 2723, 764, 2139, 211, 1005, 1902,
	1159, 518, 1721, 765, 810, 3026, 2943, 1320, 764, 1759,
	1644, 1644, 2645, 211, 1058, 1900, 3205, 1159, 807, 211,
	211, 2933, 1589, 3493, 1911, 3402, 1742, 1743, 752, 1758,
	3343, 571, 1263, 2189, 1479, 1738, 1205, 1373, 2217, 1721,
	1880, 2479, 1142, 1524, 2648, 211, 3374, 211, 2282, 3507,
	211, 2142, 1717, 2037, 1714, 2281, 2162, 1754, 1715, 3120,
	3151, 2197, 2226, 1739, 3107, 211, 810, 2650, 3159, 3021,
	2621, 3442, 211, 2907, 211, 3245, 211, 2215, 1728, 1729,
	1020, 3029, 211, 2249, 1346, 211, 3477, 211, 2279, 211,
	2196, 211, 211, 1994, 211, 1159, 1159, 1159, 2807, 1159,
	3440, 2200, 1996, 211, 211, 1755, 211, 211, 2278, 1516,
	1517, 2431, 2264, 2649, 573, 2000, 3485, 211, 2968, 2864,
	2403, 2237, 3483, 3282, 1374, 2229, 2231, 2349, 2350, 211,
	211, 211, 2248, 590, 211, 2220, 211, 1943, 807, 211,
	1619, 211, 2336, 211, 1716, 2265, 3528, 2241, 1744, 2378,
	2008, 2250, 1150, 2281, 2304, 2281, 1718, 2258, 2260, 2261,
	2262, 211, 211, 211, 211, 761, 211, 2318, 1173, 2808,
	1403, 753, 3163, 2712, 1872, 1717, 1178, 2375, 2274, 3372,
	692, 2377, 1333, 2380, 2381, 583, 2345, 2283, 1495, 211,
	2292, 2360, 1500, 3443, 1375, 2287, 2316, 2289, 1796, 2351,
	1833, 2308, 586, 2406, 1751, 2338, 1024, 1561, 3373, 567,
	1018, 1745, 1720, 3152, 1910, 1323, 3191, 751, 2388, 1983,
	1013, 140, 2047, 3476, 510, 2331, 2391, 572, 3068, 2382,
	1878, 2383, 1412, 1411, 3027, 1731, 1692, 3505, 3250, 802,
	2327, 2392, 2327, 2393, 2346, 2401, 1173, 1173, 1303, 2352,
	2596, 996, 2362, 996, 2347, 2865, 519, 2408, 2342, 3249,
	2343, 2866, 2344, 3522, 2034, 3232, 3323, 569, 3441, 3124,
	2921, 1006, 2713, 998, 754, 998, 3123, 2578, 1689, 2629,
	1321, 2625, 2457, 2458, 2317, 2432, 1173, 1479, 211, 2299,
	2390, 2296, 1816, 1805, 1804, 1778, 2440, 2467, 2405, 2394,
	1927, 2395, 3345, 2396, 566, 1721, 3506, 2806, 520, 752,
	755, 2251, 2171, 3382, 2411, 1907, 2402, 1173, 3190, 2438,
	1411, 1410, 1685, 2409, 2414, 1644, 2134, 2412, 2985, 2293,
	997, 1568, 591, 592, 2453, 3112, 1712, 3167, 3508, 1347,
	570, 1266, 3270, 3268, 1687, 3233, 521, 1981, 522, 2579,
	1984, 568, 1412, 1616, 997, 2636, 2635, 2423, 1867, 2889,
	1688, 2562, 3109, 2561, 1571, 3102, 1360, 2177, 2176, 2175,
	3069, 2306, 1237, 3328, 808, 2545, 3240, 1058, 3100, 2430,
	3143, 2755, 2550, 2140, 3104, 688, 811, 2557, 2558, 1238,
	2577, 2559, 2136, 2404, 1814, 2468, 211, 2135, 1569, 1980,
	1928, 1251, 1249, 3110, 211, 1142, 681, 2682, 1410, 3521,
	2581, 211, 3490, 3266, 211, 211, 1058, 3192, 3074, 3122,
	690, 594, 593, 2211, 2435, 1058, 2879, 3385, 3230, 3492,
	800, 211, 751, 2583, 3103, 2436, 3329, 2051, 2441, 2474,
	3458, 1717, 1388, 3340, 1142, 2538, 211, 2573, 1370, 3346,
	2252, 2253, 753, 1142, 802, 3241, 3210, 2584, 2585, 1368,
	3231, 1357, 1355, 3067, 211, 211, 211, 2959, 1353, 2572,
	211, 595, 596, 211, 1351, 2537, 829, 2790, 2613, 2764,
	211, 211, 211, 211, 211, 2580, 2592, 1349, 2587, 829,
	801, 2619, 3386, 2597, 2554, 1570, 211, 211, 211, 2591,
	2502, 3330, 2571, 2442, 1000, 211, 2568, 2303, 2276, 2567,
	2243, 2574, 2195, 2638, 2551, 2642, 2643, 211, 1159, 1000,
	211, 2540, 2541, 2542, 752, 1982, 1599, 2566, 1058, 1596,
	1341, 1389, 1314, 804, 2622, 2623, 1058, 1339, 2600, 1247,
	2399, 211, 2582, 2626, 211, 211, 3105, 1899, 1000, 3106,
	2637, 2050, 2640, 2611, 211, 754, 1142, 1159, 211, 2398,
	1159, 1159, 1159, 2385, 1142, 2609, 2610, 211, 1909, 2598,
	2599, 1883, 2697, 211, 2662, 3436, 1564, 2437, 1677, 211,
	1527, 211, 1318, 1227, 686, 687, 2439, 3108, 211, 1619,
	1387, 755, 2661, 2614, 1250, 1248, 1369, 3138, 3379, 3111,
	2603, 3131, 2678, 2620, 1719, 679, 680, 1367, 3098, 1356,
	1354, 1159, 1159, 689, 762, 2691, 1352, 2983, 2938, 211,
	211, 2936, 1350, 211, 2651, 1619, 2920, 2657, 2701, 1719,
	1159, 2728, 2669, 1605, 2711, 1348, 2630, 2696, 2695, 2719,
	2664, 2322, 2311, 1568, 2310, 2290, 1846, 2249, 2667, 2375,
	1845, 211, 1173, 1058, 211, 211, 1058, 211, 2375, 2673,
	2653, 2654, 1761, 2679, 2655, 2715, 1843, 753, 1841, 1838,
	1761, 1836, 1793, 1834, 211, 2665, 1571, 2742, 1340, 2666,
	2672, 1142, 1825, 1775, 1142, 1338, 1773, 1246, 1762, 1749,
	1746, 1733, 1898, 2674, 2675, 1566, 1722, 2676, 2818, 3107,
	3286, 2762, 916, 1414, 2421, 2741, 2725, 2757, 1606, 811,
	1569, 978, 2727, 3487, 2774, 2734, 3408, 1058, 3186, 2736,
	2737, 2738, 2753, 2739, 2740, 3181, 3180, 140, 1058, 2376,
	211, 1708, 1567, 2718, 1202, 979, 767, 769, 3288, 2233,
	2216, 207, 2994, 513, 514, 1142, 529, 513, 529, 539,
	544, 2214, 2775, 560, 2216, 2793, 1142, 1616, 1616, 2763,
	2216, 207, 1730, 1385, 1386, 2232, 1876, 1881, 799, 3335,
	754, 2230, 2802, 2803, 1644, 2771, 2422, 3309, 3075, 678,
	2254, 2236, 1418, 207, 2776, 524, 1415, 2778, 2273, 1421,
	1422, 2240, 2271, 1421, 1422, 2238, 2601, 3378, 3348, 2272,
	2972, 2967, 2239, 1930, 2904, 2876, 755, 1570, 2330, 2121,
	1644, 1680, 1173, 1611, 2772, 1424, 2798, 2010, 980, 3503,
	3520, 2508, 2509, 211, 1421, 1422, 2208, 2207, 3350, 996,
	2817, 535, 2809, 2811, 2812, 1492, 1495, 2054, 211, 2909,
	2556, 2824, 1423, 2281, 1058, 2828, 1423, 1619, 2813, 1328,
	2208, 998, 2833, 996, 2898, 1327, 2829, 2607, 2209, 2841,
	2058, 2830, 1296, 211, 2052, 2831, 2893, 2025, 2843, 3046,
	1372, 2868, 1142, 1371, 2908, 998, 513, 513, 2805, 2586,
	1490, 1488, 3529, 2103, 207, 3320, 3224, 3222, 2594, 997,
	2869, 3154, 3092, 3018, 3011, 3000, 1619, 1619, 2978, 2962,
	2877, 2961, 2960, 2935, 997, 2735, 2709, 1940, 2834, 211,
	2707, 2387, 1619, 1619, 2882, 2883, 2386, 2945, 2340, 2880,
	2315, 2291, 140, 1940, 2844, 2012, 1897, 1896, 1895, 1828,
	2885, 2886, 1827, 997, 1826, 1808, 2099, 1786, 2956, 1785,
	1000, 1000, 1781, 1619, 1780, 211, 211, 211, 2900, 1779,
	1777, 1776, 1405, 1384, 2872, 1383, 1275, 1274, 1273, 1272,
	1271, 1270, 1058, 211, 1269, 1268, 1267, 1159, 1265, 1260,
	2916, 1259, 2949, 1258, 1257, 1256, 1219, 1218, 1217, 2924,
	2913, 211, 1216, 1215, 1214, 1213, 1207, 1201, 2996, 2975,
	1142, 1199, 1198, 1023, 211, 211, 1159, 1159, 1159, 2594,
	211, 211, 211, 1022, 2958, 211, 211, 953, 863, 211,
	211, 1683, 1159, 775, 623, 759, 2249, 2937, 211, 2939,
	2987, 3243, 2991, 2950, 2951, 2990, 1378, 73, 2986, 1209,
	610, 1058, 1644, 67, 2934, 3390, 2981, 2644, 1882, 1345,
	1884, 2570, 2145, 3019, 3371, 3053, 2478, 3315, 3204, 2049,
	2977, 2336, 1509, 69, 851, 936, 2976, 3150, 3044, 1142,
	3149, 3099, 2971, 2923, 2365, 3147, 3146, 818, 1061, 2988,
	1693, 3007, 1616, 857, 1706, 2998, 211, 2997, 2992, 2191,
	2375, 1644, 1644, 3003, 2082, 1615, 3002, 3008, 3009, 860,
	3014, 1617, 862, 861, 3031, 1619, 3016, 1644, 1644, 3017,
	2554, 3010, 1793, 3040, 1618, 3032, 2630, 3013, 1511, 859,
	1000, 3023, 3028, 1614, 2305, 2334, 1167, 1254, 738, 1056,
	739, 1697, 2006, 2044, 2473, 1506, 831, 853, 1644, 2041,
	1016, 830, 2575, 2722, 2903, 3172, 1926, 2413, 211, 1923,
	626, 2505, 2026, 1009, 2104, 2097, 2093, 1392, 1058, 1481,
	1058, 2335, 1048, 834, 2004, 1497, 2447, 2729, 2589, 2186,
	3405, 1934, 1795, 977, 976, 975, 3396, 3393, 2689, 211,
	211, 211, 1686, 2201, 1473, 2698, 1142, 3066, 1142, 847,
	2815, 211, 1172, 2555, 2756, 1224, 3020, 211, 3334, 211,
	1472, 2821, 211, 211, 211, 1619, 771, 3325, 1035, 1034,
	1033, 2628, 3526, 211, 211, 1159, 2931, 178, 1058, 3117,
	1159, 175, 177, 176, 3084, 2947, 211, 2681, 1011, 90,
	3079, 3127, 3085, 3082, 3077, 3078, 35, 16, 116, 115,
	114, 211, 2591, 3088, 1058, 113, 1142, 1159, 112, 3095,
	3096, 3141, 111, 3116, 3097, 3080, 1021, 110, 3083, 109,
	3076, 108, 107, 560, 106, 105, 104, 3126, 3081, 103,
	1000, 102, 1142, 101, 100, 99, 211, 98, 1000, 207,
	97, 207, 207, 96, 1164, 95, 207, 1058, 94, 3135,
	1644, 1000, 3140, 93, 207, 1180, 3144, 3156, 3118, 3171,
	3169, 3157, 3182, 92, 3145, 91, 556, 553, 3168, 3128,
	3129, 49, 48, 1058, 89, 1142, 88, 2906, 3165, 1204,
	15, 33, 3176, 13, 3170, 53, 54, 12, 1858, 3136,
	28, 29, 79, 1226, 78, 997, 997, 207, 207, 27,
	1164, 1142, 14, 26, 24, 3193, 3216, 2103, 2103, 1563,
	10, 1058, 207, 8, 7, 30, 1573, 3196, 11, 211,
	1262, 211, 145, 1058, 211, 144, 72, 143, 71, 1793,
	142, 141, 211, 3201, 207, 207, 207, 207, 1164, 1142,
	70, 22, 9, 3185, 137, 3275, 560, 2973, 207, 207,
	1644, 1142, 3212, 3226, 211, 66, 3227, 139, 996, 3153,
	2099, 2099, 678, 138, 3158, 3217, 3218, 63, 136, 135,
	64, 134, 211, 996, 3220, 133, 211, 65, 132, 20,
	998, 5, 52, 829, 211, 3261, 3274, 3175, 3269, 1159,
	6, 3188, 3225, 3246, 211, 998, 2765, 83, 84, 31,
	61, 60, 996, 1152, 59, 19, 51, 18, 2103, 2103,
	2103, 3279, 3221, 169, 3281, 211, 211, 3259, 207, 168,
	3278, 3267, 167, 166, 998, 161, 160, 165, 163, 162,
	164, 159, 207, 3295, 3296, 211, 3273, 131, 171, 170,
	157, 211, 3284, 153, 1619, 3285, 2691, 544, 3290, 3289,
	3283, 211, 2990, 152, 156, 1228, 1231, 158, 155, 154,
	817, 2099, 2099, 2099, 151, 997, 172, 3322, 130, 56,
	3331, 129, 3291, 3253, 3254, 128, 127, 126, 125, 55,
	3299, 17, 2, 1, 3318, 3321, 0, 0, 0, 0,
	3308, 1616, 0, 3313, 3342, 0, 0, 0, 0, 1619,
	0, 3287, 0, 211, 1159, 0, 0, 1309, 0, 211,
	3252, 3306, 0, 1159, 1159, 0, 0, 0, 0, 1159,
	3364, 0, 0, 211, 0, 211, 0, 1616, 0, 0,
	0, 3349, 0, 0, 0, 0, 3278, 0, 3352, 0,
	3375, 3360, 3356, 0, 3362, 3363, 0, 211, 0, 0,
	3367, 0, 0, 211, 211, 3368, 1058, 3355, 1329, 3361,
	0, 0, 0, 0, 211, 211, 3387, 2444, 2445, 3399,
	0, 1173, 3403, 0, 0, 3409, 0, 3411, 0, 3413,
	3395, 3398, 0, 3087, 1142, 1619, 0, 0, 829, 3392,
	3400, 3421, 3420, 0, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 3415, 0, 3417, 0, 0, 0,
	3447, 0, 0, 0, 0, 997, 0, 0, 0, 3432,
	3433, 3435, 3434, 997, 0, 0, 0, 0, 0, 1644,
	3369, 3449, 3370, 0, 0, 3407, 997, 211, 0, 3465,
	513, 3467, 0, 0, 3463, 0, 0, 0, 0, 3473,
	3464, 0, 3475, 0, 3469, 3472, 0, 211, 0, 0,
	3388, 207, 3466, 207, 3468, 0, 207, 0, 2531, 2532,
	2533, 0, 0, 3481, 0, 3484, 1180, 3482, 1164, 207,
	0, 211, 0, 211, 1644, 3489, 207, 1180, 529, 3491,
	3488, 207, 1180, 3496, 3495, 0, 3395, 560, 3501, 3398,
	3497, 0, 3499, 0, 0, 0, 0, 2336, 3502, 0,
	1056, 3470, 3471, 3510, 3509, 3474, 0, 0, 0, 0,
	0, 3517, 0, 0, 3516, 0, 3518, 3519, 0, 0,
	0, 0, 0, 3523, 0, 0, 3202, 0, 2103, 2103,
	3410, 0, 3524, 3525, 3530, 0, 3531, 0, 0, 1616,
	0, 0, 0, 3407, 0, 0, 3538, 3539, 0, 0,
	0, 0, 0, 0, 0, 3534, 3535, 3536, 0, 0,
	1644, 3541, 0, 0, 3202, 0, 0, 3543, 0, 0,
	0, 0, 0, 0, 0, 0, 1943, 0, 3494, 0,
	0, 2099, 2099, 0, 996, 996, 0, 0, 1616, 1616,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1616, 1616, 998, 998, 2103, 2103,
	2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103, 2103,
	2103, 2103, 2103, 2103, 2103, 2103, 2103, 0, 2103, 0,
	0, 0, 0, 0, 0, 1616, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 817,
	0, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099,
	2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099,
	0, 2099, 0, 207, 207, 0, 0, 0, 0, 0,
	207, 1182, 0, 1186, 0, 1192, 670, 0, 0, 0,
	1813, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 207, 0, 207, 0, 0, 0, 513, 0, 0,
	0, 57, 0, 672, 0, 0, 0, 0, 0, 1829,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	560, 0, 0, 0, 678, 0, 998, 68, 0, 1312,
	0, 207, 0, 1164, 207, 0, 1315, 1616, 2786, 2787,
	0, 0, 0, 0, 0, 0, 560, 1765, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 74, 0, 1943,
	207, 207, 0, 207, 0, 207, 85, 207, 0, 207,
	0, 75, 82, 0, 0, 0, 0, 1904, 0, 0,
	1905, 0, 1906, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 0, 0, 0, 0, 76, 560, 0, 2845, 2846,
	2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856,
	2857, 2858, 2859, 2860, 2861, 2862, 2863, 1616, 2867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	1474, 1475, 1476, 1477, 1478, 996, 998, 0, 0, 0,
	0, 1850, 0, 0, 998, 0, 0, 1765, 0, 0,
	1860, 0, 0, 0, 0, 0, 0, 998, 0, 0,
	1494, 0, 0, 1868, 1869, 0, 1507, 0, 0, 0,
	0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 77, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 80, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 513, 1423, 0, 2508, 2509, 0,
	2526, 2527, 2528, 1443, 0, 179, 0, 0, 0, 207,
	1440, 0, 0, 0, 0, 0, 3036, 673, 0, 0,
	117, 0, 0, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 207, 0, 513, 2508, 2509, 207, 2526,
	2527, 2528, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1557, 1557, 1557, 2523, 0,
	0, 0, 0, 0, 0, 118, 1446, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 1429, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 2523, 0, 0,
	1461, 0, 0, 1471, 174, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 817, 0, 671, 0, 0, 1467, 0,
	1468, 2514, 0, 0, 0, 0, 0, 1438, 1439, 0,
	0, 0, 0, 0, 0, 2103, 1616, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 2224, 0, 0,
	1444, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	2514, 0, 0, 0, 0, 0, 207, 0, 1469, 0,
	0, 0, 0, 2529, 0, 0, 0, 0, 2103, 207,
	0, 0, 0, 1458, 0, 0, 0, 2530, 2099, 0,
	0, 1616, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 207, 2284, 0, 0, 2524, 0, 0, 0, 0,
	0, 0, 2529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 207, 0, 1180,
	0, 2099, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 2524, 0, 0, 1813, 0, 0,
	0, 0, 0, 0, 2224, 0, 513, 0, 2339, 0,
	0, 0, 0, 0, 207, 0, 0, 207, 1462, 207,
	0, 207, 0, 207, 207, 0, 1164, 1616, 2103, 0,
	0, 0, 0, 0, 0, 2358, 678, 0, 2224, 2224,
	0, 0, 0, 0, 0, 0, 0, 0, 2525, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 1164, 207, 0, 0, 1180, 0, 1180, 0,
	0, 1164, 0, 1164, 0, 1164, 0, 0, 0, 0,
	0, 2099, 0, 0, 0, 0, 0, 2525, 0, 0,
	0, 0, 2268, 207, 207, 1164, 207, 0, 207, 0,
	1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 207, 0, 3062, 0, 0, 3061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2520, 2521,
	2522, 0, 0, 0, 0, 2519, 2517, 2518, 2510, 2511,
	2512, 2513, 2515, 2516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2348, 3235, 0,
	0, 0, 0, 0, 0, 0, 0, 2520, 2521, 2522,
	0, 0, 0, 0, 2519, 2517, 2518, 2510, 2511, 2512,
	2513, 2515, 2516, 0, 0, 0, 0, 0, 0, 0,
	1180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1924, 0, 1929, 0, 0, 0, 0, 0, 1936, 0,
	0, 0, 0, 0, 0, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	0, 1985, 0, 1987, 1988, 1989, 1990, 0, 3312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	0, 0, 2039, 207, 0, 0, 0, 0, 513, 0,
	0, 0, 0, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 513, 0, 0, 513, 513, 0, 0,
	0, 0, 207, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	0, 0, 0, 1180, 2095, 0, 2106, 2108, 2113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2224, 2224, 207, 0,
	0, 0, 2224, 0, 0, 2632, 0, 0, 0, 0,
	0, 0, 2224, 2632, 2224, 2632, 2632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 207, 207,
	207, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 119, 0, 0, 207,
	0, 0, 1164, 0, 1421, 1422, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2685, 39, 121, 2687, 2224, 0, 0,
	1424, 0, 0, 0, 0, 0, 207, 38, 0, 68,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 1164, 0, 1423, 0, 41,
	0, 2224, 0, 513, 42, 1443, 0, 0, 0, 74,
	2224, 0, 122, 0, 0, 0, 0, 40, 85, 0,
	0, 0, 0, 75, 82, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 207, 1813, 0, 0, 1813, 0, 0, 0, 1457,
	43, 2789, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 76, 1446, 1447,
	1448, 1449, 0, 2770, 0, 0, 1164, 207, 1429, 207,
	0, 0, 2286, 1423, 2288, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 207, 0, 1440, 0,
	2670, 0, 0, 0, 0, 0, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2702,
	0, 0, 2704, 2705, 2706, 0, 0, 0, 0, 0,
	0, 0, 2826, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 1444, 0, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1471, 0, 2748, 2749, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 47, 146, 80, 0, 81, 0,
	45, 0, 1765, 0, 123, 0, 1467, 0, 1468, 0,
	46, 0, 0, 0, 0, 1438, 1439, 179, 0, 0,
	0, 0, 0, 0, 207, 207, 0, 1450, 0, 50,
	1459, 0, 117, 0, 0, 513, 0, 0, 1444, 0,
	0, 120, 0, 0, 0, 1445, 0, 0, 0, 0,
	513, 0, 0, 0, 0, 181, 1469, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 1464, 1465,
	1466, 1458, 0, 0, 0, 1180, 0, 118, 0, 0,
	2427, 2428, 0, 0, 0, 0, 2434, 0, 1424, 0,
	150, 0, 1470, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 2448, 2449, 0, 173, 0,
	0, 2039, 0, 1450, 0, 1423, 174, 0, 0, 0,
	2456, 560, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 149, 0, 0,
	3, 0, 0, 0, 0, 0, 2476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 2969, 207, 207,
	0, 2491, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 0, 2224, 207, 0, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2358, 2358, 0, 2113,
	2113, 2113, 678, 678, 2224, 0, 0, 1813, 1813, 0,
	1461, 678, 2224, 1471, 1557, 0, 0, 1451, 1452, 1453,
	207, 0, 2560, 0, 0, 0, 0, 0, 1460, 0,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	0, 2496, 0, 0, 2497, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 917, 0, 0, 0, 0, 0, 3054, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2647, 0, 0, 0, 0,
	0, 208, 0, 0, 207, 0, 0, 0, 0, 0,
	1180, 0, 207, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 207, 0, 0, 3004, 3005,
	3006, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 2224, 2224, 2224, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 1180, 0, 0, 58, 0, 1462, 2224,
	0, 2632, 0, 0, 1180, 1180, 207, 0, 0, 0,
	62, 0, 0, 0, 0, 207, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 2720, 0, 0, 2224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 3162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 1180, 85,
	1460, 0, 0, 0, 75, 82, 0, 0, 1463, 0,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2777, 0, 0, 0, 1936,
	0, 0, 0, 0, 0, 2781, 2782, 0, 76, 2785,
	0, 0, 0, 2788, 0, 0, 0, 0, 0, 0,
	0, 0, 2792, 0, 0, 0, 0, 0, 0, 0,
	0, 2799, 0, 0, 2560, 0, 0, 0, 0, 0,
	0, 2224, 0, 2632, 0, 0, 3229, 0, 0, 0,
	0, 0, 0, 0, 207, 2819, 0, 3137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2835, 2836, 560, 2837, 2838, 2839,
	0, 0, 2840, 0, 0, 0, 2842, 0, 0, 0,
	0, 0, 0, 0, 3229, 0, 2183, 0, 2224, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 1180, 2870, 2871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 207, 0,
	0, 0, 0, 0, 0, 2888, 146, 80, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 2826, 0, 0,
	0, 0, 0, 513, 0, 0, 0, 0, 179, 0,
	57, 0, 0, 3229, 0, 0, 0, 0, 0, 0,
	673, 0, 58, 117, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 0, 0, 62, 0, 2917, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 0, 2925, 2928, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 0, 207, 68, 0, 118, 0,
	0, 2632, 0, 0, 0, 0, 0, 2946, 0, 0,
	0, 150, 0, 0, 1423, 1180, 0, 1180, 0, 180,
	0, 0, 1443, 0, 0, 0, 74, 0, 0, 173,
	0, 0, 0, 0, 0, 85, 0, 174, 0, 3383,
	75, 82, 0, 0, 0, 1180, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 2224, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2784, 0,
	0, 0, 0, 1557, 0, 0, 0, 0, 0, 0,
	0, 0, 2999, 0, 76, 1446, 1447, 1448, 1449, 0,
	2826, 0, 0, 0, 0, 1429, 0, 0, 0, 208,
	1063, 208, 208, 1063, 0, 1063, 208, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1452, 1453, 2224,
	0, 0, 0, 3033, 3034, 0, 0, 0, 0, 3038,
	3039, 0, 0, 0, 3042, 3043, 0, 0, 0, 3229,
	0, 3047, 0, 0, 0, 1063, 1063, 208, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3051, 0, 208, 1180, 0, 2224, 0, 3055, 0, 1444,
	0, 0, 0, 0, 1421, 1422, 0, 0, 0, 0,
	77, 0, 0, 0, 208, 208, 208, 208, 0, 1063,
	1063, 0, 0, 0, 1063, 0, 600, 1063, 208, 208,
	1424, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 0, 146, 80, 0, 81, 0, 0, 0, 601,
	0, 1457, 0, 0, 0, 0, 0, 1423, 1424, 0,
	0, 0, 1470, 0, 179, 1443, 2508, 2509, 0, 2526,
	2527, 2528, 0, 0, 1450, 0, 673, 0, 1063, 117,
	602, 621, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 1445, 1443, 0, 0, 0, 0, 208, 2928,
	1440, 603, 181, 0, 604, 0, 0, 0, 0, 0,
	0, 2783, 208, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 0, 118, 0, 605, 2523, 1446, 1447,
	1448, 1449, 0, 0, 0, 625, 0, 150, 1429, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 173, 1446, 1447, 1448, 1449,
	0, 0, 0, 174, 0, 0, 1429, 0, 0, 1451,
	1452, 1453, 0, 607, 0, 0, 608, 631, 0, 0,
	0, 634, 2928, 0, 149, 0, 0, 0, 0, 0,
	1461, 0, 0, 1471, 0, 0, 0, 1451, 1452, 1453,
	2514, 883, 0, 0, 0, 3197, 3198, 3199, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 1467, 0,
	1468, 0, 1444, 0, 0, 0, 0, 1438, 1439, 0,
	3207, 3208, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 1459, 0, 3215, 0, 0, 0, 630, 0,
	1444, 0, 2529, 0, 0, 611, 0, 0, 0, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 1458, 2524, 2928, 609, 0, 0, 0,
	0, 0, 0, 3251, 0, 612, 0, 1450, 0, 0,
	0, 3257, 0, 0, 817, 0, 0, 0, 3262, 0,
	0, 0, 0, 613, 0, 1445, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 2928, 0, 0, 2928, 0, 0, 0, 0, 0,
	633, 0, 0, 1445, 0, 0, 208, 0, 0, 0,
	614, 0, 0, 2928, 2928, 0, 0, 1063, 0, 208,
	208, 0, 0, 615, 0, 0, 208, 0, 1462, 0,
	0, 208, 0, 0, 0, 0, 577, 2525, 0, 0,
	620, 0, 0, 999, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 0, 0, 629, 0, 628, 577, 0,
	617, 0, 1063, 0, 3324, 0, 0, 3327, 0, 0,
	0, 0, 618, 0, 0, 0, 0, 624, 0, 0,
	0, 0, 635, 0, 632, 0, 0, 0, 0, 622,
	0, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 2035, 0, 0, 2036, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2520, 2521, 2522,
	0, 0, 0, 0, 2519, 2517, 2518, 2510, 2511, 2512,
	2513, 2515, 2516, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 208, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 3431, 3431, 3431, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3450, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 208, 0, 0, 62, 0, 0,
	208, 0, 2928, 0, 2928, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 0, 3431, 208,
	0, 208, 0, 208, 0, 1457, 0, 68, 0, 0,
	0, 0, 1424, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 1423,
	0, 0, 0, 0, 0, 0, 85, 1443, 0, 0,
	0, 75, 82, 0, 1440, 0, 0, 0, 0, 1063,
	0, 1063, 0, 0, 0, 0, 0, 1063, 0, 0,
	1063, 208, 0, 3431, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 1063, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 76, 0, 0, 0, 0,
	208, 208, 0, 208, 0, 208, 0, 208, 0, 208,
	1446, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	206, 206, 1467, 0, 1468, 206, 1063, 0, 0, 0,
	0, 1438, 1439, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 77, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 206, 206, 0, 0,
	0, 0, 0, 146, 80, 0, 81, 1458, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 2508, 2509,
	0, 2526, 2527, 2528, 0, 179, 0, 0, 0, 0,
	0, 1063, 0, 206, 206, 206, 206, 673, 0, 0,
	117, 0, 1421, 1422, 0, 0, 0, 206, 206, 1450,
	0, 0, 0, 0, 0, 1059, 0, 0, 1160, 0,
	1059, 0, 0, 181, 0, 0, 0, 1445, 1424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2523,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 1423, 0, 0, 150, 0,
	1421, 1422, 0, 1443, 0, 1063, 180, 0, 0, 0,
	1160, 1160, 0, 0, 0, 0, 173, 206, 208, 0,
	0, 1063, 0, 0, 174, 0, 1424, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1306, 0, 0, 0, 2433,
	0, 0, 2514, 1423, 1160, 1160, 0, 0, 0, 1160,
	0, 1443, 1160, 0, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 0, 0, 1460, 0, 1429, 1435, 1436, 1442,
	1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 0, 0, 0, 0,
	3060, 0, 0, 0, 992, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 1063, 0, 1429, 0, 2524, 0, 0, 0,
	0, 0, 0, 202, 0, 208, 0, 0, 0, 1421,
	1422, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	1444, 0, 0, 0, 0, 1451, 1452, 1453, 0, 208,
	0, 0, 1063, 2508, 2509, 1424, 2526, 2527, 2528, 0,
	0, 0, 0, 0, 0, 208, 1063, 0, 0, 1063,
	0, 208, 2795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 208, 1444, 0,
	0, 0, 208, 2508, 2509, 0, 2526, 2527, 2528, 2525,
	0, 0, 0, 0, 2523, 1450, 0, 0, 0, 0,
	0, 0, 2794, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 208, 0, 2426, 208, 0, 208,
	1587, 208, 999, 208, 208, 206, 0, 1063, 1063, 1063,
	0, 1063, 0, 1446, 1447, 1448, 1449, 0, 206, 1587,
	0, 0, 0, 1429, 2523, 584, 0, 0, 0, 208,
	584, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 208, 0, 0, 0, 2514, 0, 0,
	0, 1445, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 208, 0, 208, 0, 208, 2520,
	2521, 2522, 0, 0, 0, 0, 2519, 2517, 2518, 2510,
	2511, 2512, 2513, 2515, 2516, 0, 0, 2514, 0, 2529,
	0, 208, 0, 0, 0, 0, 0, 1444, 0, 0,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2524, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 577, 0, 0, 2529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1059, 0, 0,
	0, 2524, 1450, 0, 0, 0, 0, 584, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 1161, 0, 1060,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2525, 0, 0, 0, 0, 0,
	0, 0, 206, 206, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	1161, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	206, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 1161, 1161, 0, 0, 0, 1161, 0,
	0, 1161, 1160, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 0, 0, 0, 0, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 1063, 0,
	206, 0, 0, 206, 2520, 2521, 2522, 1063, 0, 0,
	0, 2519, 2517, 2518, 2510, 2511, 2512, 2513, 2515, 2516,
	206, 0, 1161, 0, 0, 0, 0, 0, 0, 584,
	206, 0, 206, 0, 206, 0, 206, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 2520, 2521, 2522, 0, 0, 0,
	206, 2519, 2517, 2518, 2510, 2511, 2512, 2513, 2515, 2516,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 208,
	208, 1053, 0, 0, 0, 0, 0, 208, 1171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	1063, 0, 0, 0, 1160, 0, 1160, 0, 0, 0,
	1063, 0, 1160, 0, 0, 1160, 0, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 1160,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 1063,
	208, 0, 1063, 1063, 1063, 577, 0, 0, 0, 208,
	0, 0, 0, 0, 1255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 1279, 1279, 1171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1310, 1311, 0, 1063, 1063, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 208, 1063, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 999, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	1377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 999, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 1060, 0, 0, 0, 0, 1059, 0, 642, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	0, 0, 0, 0, 0, 0, 1060, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 665,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 646, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 647, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 206, 0,
	0, 0, 648, 0, 0, 649, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 0, 0, 0, 0, 206, 0, 1060, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 1594, 0,
	0, 0, 0, 206, 0, 0, 206, 0, 206, 0,
	206, 1603, 206, 206, 0, 0, 0, 0, 208, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 208, 0, 1160, 206, 1063,
	0, 0, 0, 0, 651, 0, 0, 0, 0, 0,
	206, 1059, 206, 0, 1160, 0, 0, 0, 0, 0,
	0, 668, 652, 0, 0, 0, 0, 0, 1063, 1063,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 206, 1063, 206, 0, 206, 0, 667,
	208, 0, 0, 1161, 0, 1161, 653, 0, 0, 654,
	0, 1161, 0, 1063, 1161, 662, 0, 0, 0, 0,
	206, 0, 655, 0, 0, 0, 0, 1161, 1161, 0,
	0, 0, 852, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 1160, 1160, 1160, 0, 1160, 0, 0, 0,
	0, 656, 663, 0, 0, 0, 0, 0, 0, 657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 659, 0, 0, 0, 0, 658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 1063, 0, 0, 1788, 0, 0, 0, 0,
	0, 0, 1800, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1255, 0, 1819, 0, 1819, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 208, 0, 0, 0,
	0, 0, 812, 0, 0, 208, 208, 1063, 0, 0,
	1063, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 999, 0, 0,
	0, 0, 0, 0, 987, 0, 1063, 0, 0, 1063,
	0, 0, 999, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1800, 0, 0, 1864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1587, 0, 1877, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 1887, 0, 1889, 0, 1891, 0, 1893,
	0, 1894, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 1908, 0, 1060, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 1059, 0, 0, 206, 206, 206,
	0, 0, 0, 0, 0, 1063, 1587, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 208, 0, 206, 0,
	0, 1063, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 1161, 0, 1160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 206, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1160, 206, 0, 1160, 1160, 1160,
	2168, 0, 0, 0, 0, 208, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 1063, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 1161, 1161, 0, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 1160,
	0, 0, 0, 0, 0, 0, 208, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 208, 1160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 1171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 87, 0, 0, 0, 2302,
	0, 0, 0, 87, 1800, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2341, 0, 0, 1279,
	0, 1279, 0, 1279, 0, 1171, 1171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 206, 0,
	0, 2384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 2389, 206, 1171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 2407, 1171, 0, 2410, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 206,
	1457, 0, 0, 2424, 0, 0, 0, 1424, 0, 0,
	0, 1470, 1060, 0, 0, 1484, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 1423, 0, 0, 1499, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1160, 1160, 1160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 1160,
	0, 0, 0, 999, 1161, 1429, 0, 0, 0, 0,
	0, 999, 0, 0, 1060, 0, 0, 0, 1059, 0,
	0, 0, 1060, 0, 1587, 0, 0, 0, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 1161, 0, 0, 1161, 1161, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 87, 1468,
	0, 1585, 0, 1588, 0, 206, 1438, 1439, 0, 0,
	0, 0, 0, 0, 206, 206, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 1161, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 1059, 0, 1060,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	2624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1160, 0, 0, 1059, 0, 1160, 0, 0,
	2660, 1171, 2302, 1060, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2699, 0,
	0, 0, 2703, 0, 1059, 0, 0, 0, 0, 0,
	0, 2710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 1460,
	1059, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0,
	0, 0, 0, 0, 0, 2797, 206, 206, 0, 0,
	0, 0, 0, 2752, 0, 0, 0, 0, 1059, 0,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0, 2773,
	0, 1171, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 1470, 2779, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 206, 0, 1160, 0, 1443, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 1161, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 1429, 1161, 1161, 1161, 0, 792, 0, 0, 792,
	792, 0, 0, 0, 0, 0, 0, 0, 1161, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 1471, 0,
	0, 0, 1451, 1452, 1453, 0, 0, 1060, 0, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 0, 0,
	1160, 1160, 0, 1467, 0, 1468, 1160, 0, 0, 0,
	0, 0, 1438, 1439, 2003, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 1459, 812, 0,
	0, 0, 0, 0, 0, 1444, 0, 1457, 0, 0,
	0, 1493, 0, 1059, 1424, 1493, 0, 0, 1470, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 1060, 0, 0, 987,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2970, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 1588, 0, 0, 0, 2982, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 1429, 1462, 87, 0, 0, 0, 0, 0,
	0, 1161, 0, 0, 1060, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	1060, 0, 3022, 1161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 1060, 0, 1460, 1444, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 1469, 0, 0, 0, 0, 1060,
	0, 2499, 0, 0, 0, 0, 0, 0, 87, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 1450, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 87, 0, 87, 0, 0, 0, 0, 3130, 0,
	0, 0, 0, 0, 0, 1161, 0, 2302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456,
	1464, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 1470, 0, 1460, 0, 0, 1435,
	1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 1423, 0, 0,
	0, 0, 2498, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	1161, 0, 0, 0, 0, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2003, 1446, 1447,
	1448, 1449, 0, 0, 0, 0, 3236, 0, 1429, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 1471, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3280, 0,
	1467, 0, 1468, 0, 0, 0, 0, 0, 0, 1438,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 3305,
	1171, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3354, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	1462, 0, 0, 0, 1424, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3389, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3404, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 87, 87, 0, 0, 87, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 87, 0,
	0, 0, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437,
	1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 1446, 1447, 1448, 1449, 0, 0, 2495, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 1462, 0, 0, 1424, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 87, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 987, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 1435,
	1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 1446, 1447, 1448, 1449, 0,
	0, 0, 2494, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 1459, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 1457, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 1470, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 1429, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 1471, 0, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	1468, 0, 0, 0, 987, 0, 0, 1438, 1439, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 1460,
	1444, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 1469, 0,
	0, 0, 0, 0, 0, 2493, 0, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 0, 0, 0, 2036, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	2003, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 1064,
	221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071, 1072,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 1073, 229, 230, 231, 232, 233, 234, 1074, 1075,
	235, 469, 470, 471, 1076, 236, 472, 1077, 1062, 1078,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	1079, 246, 0, 247, 248, 249, 1080, 938, 250, 251,
	1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253, 254,
	255, 256, 257, 473, 474, 1088, 258, 1089, 260, 259,
	1090, 261, 1091, 1092, 262, 263, 264, 1093, 265, 1094,
	266, 267, 1095, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 1096, 213, 1097, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1098, 284, 1099, 1100, 939, 285, 286, 1101, 287, 479,
	1102, 480, 288, 1103, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1104, 295, 296, 298, 0,
	0, 87, 214, 297, 299, 306, 1105, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1106, 486, 1107, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1108, 318, 317, 1109, 319,
	488, 945, 320, 321, 946, 1110, 322, 323, 1111, 1112,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1113, 215,
	948, 1114, 489, 490, 341, 342, 1115, 343, 344, 345,
	1116, 1117, 347, 348, 349, 1118, 1119, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 1120, 360, 361, 493, 362, 494, 363, 1121,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 1122, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 1123, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 1124, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 1125, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 1126, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 1127, 429,
	430, 428, 1128, 431, 432, 433, 434, 435, 272, 436,
	1129, 499, 500, 501, 502, 1130, 443, 1131, 437, 438,
	503, 439, 504, 1132, 440, 441, 442, 0, 444, 445,
	1133, 1134, 446, 447, 448, 449, 450, 452, 1135, 453,
	1136, 451, 454, 455, 456, 505, 506, 507, 1137, 458,
	457, 508, 1138, 1139, 1140, 1141, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 2155, 0, 0, 0, 0, 0, 0, 0,
	2156, 216, 217, 218, 219, 220, 1064, 221, 1065, 1066,
	1067, 1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1073, 229,
	230, 231, 232, 233, 234, 1074, 1075, 235, 469, 470,
	471, 1076, 236, 472, 1077, 1062, 1078, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1079, 246, 0,
	247, 248, 249, 1080, 938, 250, 251, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 252, 253, 254, 255, 256, 257,
	473, 474, 1088, 258, 1089, 260, 259, 1090, 261, 1091,
	1092, 262, 263, 264, 1093, 265, 1094, 266, 267, 1095,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1096, 213, 1097, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1098, 284, 1099,
	1100, 939, 285, 286, 1101, 287, 479, 1102, 480, 288,
	1103, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1104, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1105, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1106, 486, 1107, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1108, 318, 317, 1109, 319, 488, 945, 320,
	321, 946, 1110, 322, 323, 1111, 1112, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1113, 215, 948, 1114, 489,
	490, 341, 342, 1115, 343, 344, 345, 1116, 1117, 347,
	348, 349, 1118, 1119, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1120,
	360, 361, 493, 362, 494, 363, 1121, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1122, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1123, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1124, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1125, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 1126, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1127, 429, 430, 428, 1128,
	431, 432, 433, 434, 435, 272, 436, 1129, 499, 500,
	501, 502, 1130, 443, 1131, 437, 438, 503, 439, 504,
	1132, 440, 441, 442, 0, 444, 445, 1133, 1134, 446,
	447, 448, 449, 450, 452, 1135, 453, 1136, 451, 454,
	455, 456, 505, 506, 507, 1137, 458, 457, 508, 1138,
	1139, 1140, 1141, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 1057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3086,
	216, 217, 218, 219, 220, 1064, 221, 1065, 1066, 1067,
	1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 1073, 229, 230,
	231, 232, 233, 234, 1074, 1075, 235, 469, 470, 471,
	1076, 236, 472, 1077, 1062, 1078, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 1079, 246, 0, 247,
	248, 249, 1080, 938, 250, 251, 1081, 1082, 1084, 1083,
	1085, 1086, 1087, 252, 253, 254, 255, 256, 257, 473,
	474, 1088, 258, 1089, 260, 259, 1090, 261, 1091, 1092,
	262, 263, 264, 1093, 265, 1094, 266, 267, 1095, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 1096, 213, 1097, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1098, 284, 1099, 1100,
	939, 285, 286, 1101, 287, 479, 1102, 480, 288, 1103,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1104, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 1105, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1106, 486, 1107, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1108, 318, 317, 1109, 319, 488, 945, 320, 321,
	946, 1110, 322, 323, 1111, 1112, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1113, 215, 948, 1114, 489, 490,
	341, 342, 1115, 343, 344, 345, 1116, 1117, 347, 348,
	349, 1118, 1119, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 1120, 360,
	361, 493, 362, 494, 363, 1121, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 1122, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 1123, 386, 951, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	1124, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 1125, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 1126, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 1127, 429, 430, 428, 1128, 431,
	432, 433, 434, 435, 272, 436, 1129, 499, 500, 501,
	502, 1130, 443, 1131, 437, 438, 503, 439, 504, 1132,
	440, 441, 442, 0, 444, 445, 1133, 1134, 446, 447,
	448, 449, 450, 452, 1135, 453, 1136, 451, 454, 455,
	456, 505, 506, 507, 1137, 458, 457, 508, 1138, 1139,
	1140, 1141, 459, 460, 509, 461, 462, 463, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3203, 0, 216, 217, 218, 219, 220,
	1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071,
	1072, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1073, 229, 230, 231, 232, 233, 234, 1074,
	1075, 235, 469, 470, 471, 1076, 236, 472, 1077, 1062,
	1078, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1079, 246, 0, 247, 248, 249, 1080, 938, 250,
	251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253,
	254, 255, 256, 257, 473, 474, 1088, 258, 1089, 260,
	259, 1090, 261, 1091, 1092, 262, 263, 264, 1093, 265,
	1094, 266, 267, 1095, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1096, 213, 1097, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1098, 284, 1099, 1100, 939, 285, 286, 1101, 287,
	479, 1102, 480, 288, 1103, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1104, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1105, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1106, 486, 1107,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1108, 318, 317, 1109,
	319, 488, 945, 320, 321, 946, 1110, 322, 323, 1111,
	1112, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1113,
	215, 948, 1114, 489, 490, 341, 342, 1115, 343, 344,
	345, 1116, 1117, 347, 348, 349, 1118, 1119, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1120, 360, 361, 493, 362, 494, 363,
	1121, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1122, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1123, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1124, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1125, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1126, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1127,
	429, 430, 428, 1128, 431, 432, 433, 434, 435, 272,
	436, 1129, 499, 500, 501, 502, 1130, 443, 1131, 437,
	438, 503, 439, 504, 1132, 440, 441, 442, 0, 444,
	445, 1133, 1134, 446, 447, 448, 449, 450, 452, 1135,
	453, 1136, 451, 454, 455, 456, 505, 506, 507, 1137,
	458, 457, 508, 1138, 1139, 1140, 1141, 459, 460, 509,
	461, 462, 463, 1057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2822, 0,
	216, 217, 218, 219, 220, 1064, 221, 1065, 1066, 1067,
	1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 1073, 229, 230,
	231, 232, 233, 234, 1074, 1075, 235, 469, 470, 471,
	1076, 236, 472, 1077, 1062, 1078, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 1079, 246, 0, 247,
	248, 249, 1080, 938, 250, 251, 1081, 1082, 1084, 1083,
	1085, 1086, 1087, 252, 253, 254, 255, 256, 257, 473,
	474, 1088, 258, 1089, 260, 259, 1090, 261, 1091, 1092,
	262, 263, 264, 1093, 265, 1094, 266, 267, 1095, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 1096, 213, 1097, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1098, 284, 1099, 1100,
	939, 285, 286, 1101, 287, 479, 1102, 480, 288, 1103,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1104, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 1105, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1106, 486, 1107, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1108, 318, 317, 1109, 319, 488, 945, 320, 321,
	946, 1110, 322, 323, 1111, 1112, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1113, 215, 948, 1114, 489, 490,
	341, 342, 1115, 343, 344, 345, 1116, 1117, 347, 348,
	349, 1118, 1119, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 1120, 360,
	361, 493, 362, 494, 363, 1121, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 1122, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 1123, 386, 951, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	1124, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 1125, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 1126, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 1127, 429, 430, 428, 1128, 431,
	432, 433, 434, 435, 272, 436, 1129, 499, 500, 501,
	502, 1130, 443, 1131, 437, 438, 503, 439, 504, 1132,
	440, 441, 442, 0, 444, 445, 1133, 1134, 446, 447,
	448, 449, 450, 452, 1135, 453, 1136, 451, 454, 455,
	456, 505, 506, 507, 1137, 458, 457, 508, 1138, 1139,
	1140, 1141, 459, 460, 509, 461, 462, 463, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2814, 0, 216, 217, 218, 219, 220,
	1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071,
	1072, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1073, 229, 230, 231, 232, 233, 234, 1074,
	1075, 235, 469, 470, 471, 1076, 236, 472, 1077, 1062,
	1078, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1079, 246, 0, 247, 248, 249, 1080, 938, 250,
	251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253,
	254, 255, 256, 257, 473, 474, 1088, 258, 1089, 260,
	259, 1090, 261, 1091, 1092, 262, 263, 264, 1093, 265,
	1094, 266, 267, 1095, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1096, 213, 1097, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1098, 284, 1099, 1100, 939, 285, 286, 1101, 287,
	479, 1102, 480, 288, 1103, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1104, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1105, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1106, 486, 1107,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1108, 318, 317, 1109,
	319, 488, 945, 320, 321, 946, 1110, 322, 323, 1111,
	1112, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1113,
	215, 948, 1114, 489, 490, 341, 342, 1115, 343, 344,
	345, 1116, 1117, 347, 348, 349, 1118, 1119, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1120, 360, 361, 493, 362, 494, 363,
	1121, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1122, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1123, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1124, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1125, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1126, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1127,
	429, 430, 428, 1128, 431, 432, 433, 434, 435, 272,
	436, 1129, 499, 500, 501, 502, 1130, 443, 1131, 437,
	438, 503, 439, 504, 1132, 440, 441, 442, 0, 444,
	445, 1133, 1134, 446, 447, 448, 449, 450, 452, 1135,
	453, 1136, 451, 454, 455, 456, 505, 506, 507, 1137,
	458, 457, 508, 1138, 1139, 1140, 1141, 459, 460, 509,
	461, 462, 463, 1057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2684, 0,
	216, 217, 218, 219, 220, 1064, 221, 1065, 1066, 1067,
	1068, 464, 1069, 1070, 1071, 1072, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 1073, 229, 230,
	231, 232, 233, 234, 1074, 1075, 235, 469, 470, 471,
	1076, 236, 472, 1077, 1062, 1078, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 1079, 246, 0, 247,
	248, 249, 1080, 938, 250, 251, 1081, 1082, 1084, 1083,
	1085, 1086, 1087, 252, 253, 254, 255, 256, 257, 473,
	474, 1088, 258, 1089, 260, 259, 1090, 261, 1091, 1092,
	262, 263, 264, 1093, 265, 1094, 266, 267, 1095, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 1096, 213, 1097, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1098, 284, 1099, 1100,
	939, 285, 286, 1101, 287, 479, 1102, 480, 288, 1103,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1104, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 1105, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1106, 486, 1107, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1108, 318, 317, 1109, 319, 488, 945, 320, 321,
	946, 1110, 322, 323, 1111, 1112, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1113, 215, 948, 1114, 489, 490,
	341, 342, 1115, 343, 344, 345, 1116, 1117, 347, 348,
	349, 1118, 1119, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 1120, 360,
	361, 493, 362, 494, 363, 1121, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 1122, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 1123, 386, 951, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	1124, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 1125, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 1126, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 1127, 429, 430, 428, 1128, 431,
	432, 433, 434, 435, 272, 436, 1129, 499, 500, 501,
	502, 1130, 443, 1131, 437, 438, 503, 439, 504, 1132,
	440, 441, 442, 0, 444, 445, 1133, 1134, 446, 447,
	448, 449, 450, 452, 1135, 453, 1136, 451, 454, 455,
	456, 505, 506, 507, 1137, 458, 457, 508, 1138, 1139,
	1140, 1141, 459, 460, 509, 461, 462, 463, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2048, 0, 216, 217, 218, 219, 220,
	1064, 221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071,
	1072, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1073, 229, 230, 231, 232, 233, 234, 1074,
	1075, 235, 469, 470, 471, 1076, 236, 472, 1077, 1062,
	1078, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1079, 246, 0, 247, 248, 249, 1080, 938, 250,
	251, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253,
	254, 255, 256, 257, 473, 474, 1088, 258, 1089, 260,
	259, 1090, 261, 1091, 1092, 262, 263, 264, 1093, 265,
	1094, 266, 267, 1095, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1096, 213, 1097, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1098, 284, 1099, 1100, 939, 285, 286, 1101, 287,
	479, 1102, 480, 288, 1103, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1104, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1105, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1106, 486, 1107,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1108, 318, 317, 1109,
	319, 488, 945, 320, 321, 946, 1110, 322, 323, 1111,
	1112, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1113,
	215, 948, 1114, 489, 490, 341, 342, 1115, 343, 344,
	345, 1116, 1117, 347, 348, 349, 1118, 1119, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1120, 360, 361, 493, 362, 494, 363,
	1121, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1122, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1123, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1124, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1125, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1126, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1127,
	429, 430, 428, 1128, 431, 432, 433, 434, 435, 272,
	436, 1129, 499, 500, 501, 502, 1130, 443, 1131, 437,
	438, 503, 439, 504, 1132, 440, 441, 442, 0, 444,
	445, 1133, 1134, 446, 447, 448, 449, 450, 452, 1135,
	453, 1136, 451, 454, 455, 456, 505, 506, 507, 1137,
	458, 457, 508, 1138, 1139, 1140, 1141, 459, 460, 509,
	461, 462, 463, 1165, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1771, 0,
	0, 0, 216, 217, 218, 219, 220, 1064, 221, 1065,
	1066, 1067, 1068, 464, 1069, 1070, 1071, 1072, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 1073,
	229, 230, 231, 232, 233, 234, 1074, 1075, 235, 469,
	470, 471, 1076, 236, 472, 1077, 1062, 1078, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 1079, 246,
	0, 247, 248, 249, 1080, 938, 250, 251, 1081, 1082,
	1084, 1083, 1085, 1086, 1087, 252, 253, 254, 255, 256,
	257, 473, 474, 1088, 258, 1089, 260, 259, 1090, 261,
	1091, 1092, 262, 263, 264, 1093, 265, 1094, 266, 267,
	1095, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 1096, 213, 1097, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1098, 284,
	1099, 1100, 939, 285, 286, 1101, 287, 479, 1102, 480,
	288, 1103, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1104, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 1105, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1106, 486, 1107, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1108, 318, 317, 1109, 319, 488, 945,
	320, 321, 946, 1110, 322, 323, 1111, 1112, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1113, 215, 948, 1114,
	489, 490, 341, 342, 1115, 343, 344, 345, 1116, 1117,
	347, 348, 349, 1118, 1119, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	1120, 360, 361, 493, 362, 494, 363, 1121, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 1122,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 1123, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 1124, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 1125, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 1126, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 1127, 429, 430, 428,
	1128, 431, 432, 433, 434, 435, 272, 436, 1129, 499,
	500, 501, 502, 1130, 443, 1131, 437, 438, 503, 439,
	504, 1132, 440, 441, 442, 0, 444, 445, 1133, 1134,
	446, 447, 448, 449, 450, 452, 1135, 453, 1136, 451,
	454, 455, 456, 505, 506, 507, 1137, 458, 457, 508,
	1138, 1139, 1140, 1141, 459, 460, 509, 461, 462, 463,
	1054, 0, 1057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 1064, 221, 1065, 1066, 1067, 1068,
	464, 1069, 1070, 1071, 1072, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 1073, 229, 230, 231,
	232, 233, 234, 1074, 1075, 235, 469, 470, 471, 1076,
	236, 472, 1077, 1062, 1078, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 1079, 246, 0, 247, 248,
	249, 1080, 938, 250, 251, 1081, 1082, 1084, 1083, 1085,
	1086, 1087, 252, 253, 254, 255, 256, 257, 473, 474,
	1088, 258, 1089, 260, 259, 1090, 261, 1091, 1092, 262,
	263, 264, 1093, 265, 1094, 266, 267, 1095, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	1096, 213, 1097, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 1098, 284, 1099, 1100, 939,
	285, 286, 1101, 287, 479, 1102, 480, 288, 1103, 289,
	290, 291, 292, 481, 482, 483, 340, 941, 293, 294,
	1104, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 1105, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 1106, 486, 1107, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	1108, 318, 317, 1109, 319, 488, 945, 320, 321, 946,
	1110, 322, 323, 1111, 1112, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 1113, 215, 948, 1114, 489, 490, 341,
	342, 1115, 343, 344, 345, 1116, 1117, 347, 348, 349,
	1118, 1119, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 1120, 360, 361,
	493, 362, 494, 363, 1121, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 1122, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 1123, 386, 951, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 1124,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	1125, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	1126, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 1127, 429, 430, 428, 1128, 431, 432,
	433, 434, 435, 272, 436, 1129, 499, 500, 501, 502,
	1130, 443, 1131, 437, 438, 503, 439, 504, 1132, 440,
	441, 442, 0, 444, 445, 1133, 1134, 446, 447, 448,
	449, 450, 452, 1135, 453, 1136, 451, 454, 455, 456,
	505, 506, 507, 1137, 458, 457, 508, 1138, 1139, 1140,
	1141, 459, 460, 509, 461, 462, 463, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 1064,
	221, 1065, 1066, 1067, 1068, 464, 1069, 1070, 1071, 1072,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 1073, 229, 230, 231, 232, 233, 234, 1074, 1075,
	235, 469, 470, 471, 1076, 236, 472, 1077, 1062, 1078,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	1079, 246, 0, 247, 248, 249, 1080, 938, 250, 251,
	1081, 1082, 1084, 1083, 1085, 1086, 1087, 252, 253, 254,
	255, 256, 257, 473, 474, 1088, 258, 1089, 260, 259,
	1090, 261, 1091, 1092, 262, 263, 264, 1093, 265, 1094,
	266, 267, 1095, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 1096, 213, 1097, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1098, 284, 1099, 1100, 939, 285, 286, 1101, 287, 479,
	1102, 480, 288, 1103, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1104, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 1105, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1106, 486, 1107, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1108, 318, 317, 1109, 319,
	488, 945, 320, 321, 946, 1110, 322, 323, 1111, 1112,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1113, 215,
	948, 1114, 489, 490, 341, 342, 1115, 343, 344, 345,
	1116, 1117, 347, 348, 349, 1118, 1119, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 1120, 360, 361, 493, 362, 494, 363, 1121,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 1122, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 1123, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 1124, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 1125, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 1126, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 1127, 429,
	430, 428, 1128, 431, 432, 433, 434, 435, 272, 436,
	1129, 499, 500, 501, 502, 1130, 443, 1131, 437, 438,
	503, 439, 504, 1132, 440, 441, 442, 0, 444, 445,
	1133, 1134, 446, 447, 448, 449, 450, 452, 1135, 453,
	1136, 451, 454, 455, 456, 505, 506, 507, 1137, 458,
	457, 508, 1138, 1139, 1140, 1141, 459, 460, 509, 461,
	462, 463, 2024, 0, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 2021, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 2022,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 2020, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 2023, 0, 0, 0, 0, 0,
	0, 850, 2019, 0, 0, 813, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 179, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 181, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 1304, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 173, 459, 460, 509, 461,
	462, 463, 824, 174, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 1498, 1496, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 179, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 181, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 1304, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 173, 459, 460, 509, 461,
	462, 463, 824, 174, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 1498, 2446, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 179, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 181, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 1304, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 173, 459, 460, 509, 461,
	462, 463, 824, 174, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 1498, 1496, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 2109, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 2114, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 2110, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 2111, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 816, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 828, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 3401, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 828, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 3260, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 828, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 2993, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	1558, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 2801, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 1938, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 1937, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 828, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 1558, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 2114, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 1496, 0, 0, 2119, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	2117, 848, 880, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 222, 223, 224, 225, 465,
	895, 874, 906, 864, 905, 904, 0, 229, 866, 865,
	232, 233, 234, 856, 928, 235, 964, 965, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 909, 257, 902, 901,
	826, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	900, 264, 0, 265, 0, 266, 267, 0, 832, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	845, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 215, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 896, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 833, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 869, 870, 872, 873, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 891, 871, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 937, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 2105, 848, 880, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	257, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 2094, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 2092,
	848, 2084, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 2087, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 2088, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 2089, 2086, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 2090, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 2085, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 2081, 848, 2084, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 2087,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 2088, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 2089, 2086, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	2090, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 2085, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 1504,
	0, 850, 0, 0, 0, 0, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 1925,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 1194, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 1193, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 1188, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 1187, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 1183, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 3430, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 3429, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 3428, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 3430, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 3429, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 0, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 880, 837, 838, 839, 835, 836, 849, 0, 2102,
	0, 0, 0, 0, 2100, 2101, 0, 0, 216, 217,
	218, 219, 220, 850, 221, 0, 0, 0, 848, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 0, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 3430, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 0, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 0, 932, 0, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 0, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 0, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 3429, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 813, 0, 1001, 0, 820,
	821, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 848, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 928,
	235, 469, 470, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 480, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 988, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 215,
	948, 0, 933, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 995, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 179, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 959, 0, 429,
	430, 428, 181, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	960, 439, 961, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 451, 454, 455, 456, 1304, 506, 507, 0, 458,
	457, 508, 1001, 0, 0, 173, 459, 460, 509, 461,
	462, 463, 0, 174, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	929, 0, 985, 0, 1590, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 928, 235, 469, 470, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	988, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 215, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 993, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 995,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 179,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 959, 0, 429, 430, 428, 181, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 960, 439, 961, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 451, 454, 455, 456,
	1304, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	173, 459, 460, 509, 461, 462, 463, 0, 174, 0,
	0, 2553, 0, 1001, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 1590,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 928, 235, 469, 470, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 480, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 988, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 215, 948, 0, 933, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 496,
	995, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 960, 439, 961, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 0, 984,
	0, 1001, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 985, 929,
	990, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 928, 235, 469, 470, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 480, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 988,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 215, 948, 0, 933, 490, 341, 342,
	0, 343, 344, 345, 0, 993, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 995, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 960, 439, 961, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1001, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 0, 985, 0, 990, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 928, 235,
	469, 470, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	480, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 988, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 215, 948,
	0, 933, 490, 341, 342, 0, 343, 344, 345, 0,
	993, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 995, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 960,
	439, 961, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1001, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	0, 985, 0, 990, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 928, 235, 469, 470, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 480, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 215, 948, 0, 933, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 995, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 960, 439, 961, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 813, 0, 1158, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 1485, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1062,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 1304, 506, 507, 0,
	458, 457, 508, 1301, 0, 1158, 173, 459, 460, 509,
	461, 462, 463, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 149, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 1062, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 179, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	181, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 1304, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 173, 459, 460, 509, 461, 462, 463,
	0, 174, 0, 0, 0, 0, 1158, 1157, 0, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1062, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1158, 1157, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 1766, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 1062, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1158, 1157, 0, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 2747, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1062, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1001, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	0, 0, 0, 1308, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 928, 235, 469, 470, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 480, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 215, 948, 0, 933, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 960, 439, 961, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 813, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 1304, 506, 507, 0,
	458, 457, 508, 210, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 0, 174, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 149, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 210, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	1595, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 210, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 2700, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 210, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	2337, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 210, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 2825, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 685, 0,
	576, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	1856, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 582, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 581, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 0, 575, 0, 576, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	585, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	582, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 581, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 576,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 585, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 582, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 1885, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 581, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	576, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 585,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 582, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 581, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	585, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1332, 0, 1158, 1157,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1062,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 1331, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 1330, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 1299, 0, 1158, 1157, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 1062, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1298, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	1295, 0, 1158, 1157, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1062, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1294, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 1233, 0, 1158,
	1157, 0, 0, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1062, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1232, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1230, 0, 1158, 1157, 0, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1062, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1229, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1151, 0, 1158, 1157, 0, 0, 0, 0, 1155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 1062, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1153, 482, 483, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 0, 948, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 1158, 1157,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1062,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1158, 1157, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 1062, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 0, 948, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 1158, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 1062, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 2225, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 2222, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 2372, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	2228, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	2369, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 2371, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 2368, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 2227, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 2370,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 2225, 236, 472, 0, 0, 2219, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 2222,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 2228, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 2218, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 2227, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	2226, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1379, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 1382, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 1380, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 1381, 457, 508, 1146, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1148, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 993, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1143, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1145, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1050, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1052, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 993, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 538,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 537, 220, 527, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	530, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 531, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 532, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 526, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	527, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 530, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 531, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 532, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 993, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 2301, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1865, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 1799,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1792,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1791, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1787, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1789,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1288, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1287, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1285, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1284, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1282, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1281, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1278, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1277, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1253, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1168, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1170, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 530, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 531, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 532,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 1892, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 1890, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 1888, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	677, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 676, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 675, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 2372, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 3148, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 517, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 516, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 515, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 2160, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 210, 2359, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 2948, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 210, 2359, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 2356,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 1871, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1863, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 558, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 1028, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 559, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 555,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 554, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1811, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1810, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 558,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 548,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 559, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 555, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 1307, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 554, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1292, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1291,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1241, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1240, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1225, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1162, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 558, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 1028, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 559, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 555, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	554, 500, 501, 502, 0, 443, 0, 437, 1029, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 1012,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 558, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 548, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 546, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 547, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 559,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	549, 391, 0, 392, 396, 397, 555, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	550, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 554, 500,
	501, 502, 0, 443, 0, 437, 552, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 542,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 543, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 540, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 534, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	512, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 2641, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 2639, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 2627, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 2319, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 543, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 1823,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 0, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1261, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1203, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 967, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 0, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 0, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 0, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	0, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 1454, 1455,
	1456, 1464, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 1423, 0,
	0, 0, 1429, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 1446,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 1459, 1429,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 1469, 0, 1471, 0, 0, 0,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1468, 0, 0, 0, 0, 0, 0,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 1450, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 1445, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 1462, 0, 0, 0, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 0, 3384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1446, 1447, 1448, 1449, 0, 1424, 0, 0, 0,
	1470, 1429, 0, 1460, 0, 0, 1435, 1436, 1442, 1441,
	1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 1423, 0, 1461, 3380, 0, 1471, 0,
	0, 1443, 1451, 1452, 1453, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 1469, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	1450, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 1445, 1470, 0, 0, 1460, 0, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 1423, 1462, 0, 3311, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 1423, 0, 0, 0, 1429, 0, 1460, 0,
	1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	1461, 3310, 0, 1471, 0, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	1468, 0, 0, 0, 0, 0, 0, 1438, 1439, 0,
	0, 0, 0, 1446, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 1459, 1429, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 1469, 0,
	1471, 0, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 1450, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	1445, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1423, 1462, 0, 0, 0, 0,
	1460, 0, 1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 3206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456,
	1464, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1446, 1447, 1448, 1449, 0,
	1424, 0, 0, 0, 1470, 1429, 0, 1460, 0, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 1423, 0, 1461,
	3113, 0, 1471, 0, 0, 1443, 1451, 1452, 1453, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 1469, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 1471, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 1468, 0, 1450, 0, 0, 0, 0, 1438,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 1445, 1470, 0, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1423,
	1462, 0, 3065, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 1423, 0, 0, 0,
	1429, 0, 1460, 0, 1443, 1435, 1436, 1442, 1441, 1437,
	1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 1461, 3064, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 0, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 1446, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 1459, 1429, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1469, 0, 1471, 0, 0, 0, 1451, 1452,
	1453, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 1468, 0, 0, 0, 0, 0, 0, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 1450,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 1454, 1455,
	1456, 1464, 1465, 1466, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 1445, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1462,
	0, 0, 0, 0, 1460, 0, 1443, 1435, 1436, 1442,
	1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 0, 3063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1446,
	1447, 1448, 1449, 0, 1424, 0, 0, 0, 1470, 1429,
	0, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 1423, 0, 1461, 3030, 0, 1471, 0, 0, 1443,
	1451, 1452, 1453, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1468, 0, 0, 0, 0, 0, 0,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 1469, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 1450, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 1445,
	1470, 0, 0, 1460, 0, 0, 1435, 1436, 1442, 1441,
	1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 1423, 1462, 0, 2832, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1429, 3480, 1460, 0, 0, 1435,
	1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 2450, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	1459, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	1457, 0, 0, 0, 0, 2421, 0, 1424, 0, 0,
	0, 1470, 0, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 3479, 2127, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 1450, 0, 0, 0, 2422, 0, 1457,
	0, 0, 0, 2126, 0, 0, 1424, 0, 0, 0,
	1470, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 1423, 0, 1429, 1462, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 1459, 0, 0, 1429, 0, 0, 0, 1460, 1444,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1469, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	1459, 0, 0, 0, 1450, 0, 0, 0, 1444, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 1445, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1423, 0, 0, 1462, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 1423, 0, 1429, 1462, 2538, 0, 1460,
	2537, 1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 1459, 0, 0, 1429, 0, 0, 0, 1460, 1444,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1469, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	1459, 0, 0, 0, 1450, 0, 0, 0, 1444, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 1445, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 810, 0, 1423, 0, 0, 1462, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 2539, 0, 0, 1424, 0, 0, 0,
	1470, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 1423, 0, 1429, 1462, 0, 0, 1460,
	0, 1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 1459, 0, 0, 1429, 0, 0, 0, 1460, 1444,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1469, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	1459, 0, 0, 0, 1450, 0, 0, 0, 1444, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 1445, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1423, 0, 0, 1462, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2820, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 1429, 1462, 0, 0, 1460,
	2544, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 1460, 1444,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 1462, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	1459, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	1457, 0, 0, 0, 2492, 0, 0, 1424, 0, 0,
	0, 1470, 0, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 2506, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 1423, 0, 1429, 1462, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 1459, 0, 0, 1429, 0, 0, 0, 1460, 1444,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1469, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	1459, 0, 0, 0, 1450, 0, 0, 0, 1444, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 1445, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1423, 0, 0, 1462, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 1423, 0, 1429, 1462, 0, 0, 1460,
	0, 1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1461,
	0, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 1459, 0, 0, 1429, 0, 0, 0, 1460, 1444,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1469, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 720, 0, 751, 0, 0,
	1459, 0, 0, 0, 1450, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 1445, 0, 0, 0, 1469, 0, 0, 0,
	0, 757, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 726, 1641, 0, 0, 0,
	728, 0, 0, 0, 758, 0, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 752,
	730, 0, 0, 0, 1653, 1635, 1642, 1625, 1663, 1662,
	0, 1445, 1627, 1626, 0, 0, 0, 0, 0, 0,
	1673, 1674, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 731, 0,
	1664, 0, 1660, 1659, 0, 0, 724, 0, 0, 0,
	0, 0, 0, 0, 1658, 0, 0, 0, 0, 0,
	0, 0, 732, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1657, 1655, 1656, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 1460, 0,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 756, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 1637, 0, 0,
	0, 0, 753, 0, 0, 0, 0, 0, 1646, 1640,
	1648, 1650, 1651, 1652, 1647, 0, 1645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1669, 1670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	1629, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1661, 0, 0, 0, 1638, 0, 1639, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 722, 0, 754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1654, 0, 723,
	0, 1622, 1620, 1621, 1624, 1623, 0, 0, 0, 743,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 1630, 1631, 1633, 1634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 1649, 1632, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1672, 0, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 0, 0, 1628, 0,
	1665, 1666, 1667, 1668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1636, 0, 0, 0, 0, 1643, 1671,
}
var sqlPact = [...]int{

	4676, -1000, -1000, -1000, -1000, -1000, -1000, 268, 267, 265,
	262, 260, 259, 258, 256, -1000, -1000, -1000, 255, -1000,
	-1000, 254, -1000, 253, 251, 247, 246, -1000, 244, 243,
	237, -1000, -1000, -1000, -1000, 224, 203, 201, 51467, 1717,
	62668, 54356, 1725, 46064, 62251, 45647, 61834, 61417, 199, -1000,
	61000, 198, 192, 191, -1000, -1000, 190, 1685, 37694, 189,
	188, 187, 1881, 185, 184, -1000, 183, -1000, 5944, 1229,
	-1000, 181, 179, -1000, 7723, 3684, 53528, 2154, 178, 160,
	37276, 2133, 2168, -1000, -1000, 1602, -1000, -1000, 155, 152,
	150, 149, 146, 140, 139, 137, 135, -1000, 133, 131,
	125, 124, 123, 121, 111, 110, 109, 106, 105, 104,
	103, 102, 98, 93, 91, 89, -1000, 71933, 1546, 1372,
	1367, 1359, 1350, 1344, 872, 88, 83, 81, 80, 78,
	77, -1000, -1000, 76, 75, 72, 71, -1000, 70, 67,
	164, 64, 63, 61, 60, 58, 2178, 2136, 1371, 654,
	18166, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 66778, 63079, 56, -67, 55, -1000, 2459,
	903, 31007, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 497, -1000, -1000, -1000, 344, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1652, 695, -1000, -1000, -1000, 60583, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1713, 49, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 693, -1000, 1703, 216, 1570, -1000, -1000,
	-1000, -1000, -1000, 63079, -1000, -1000, 2751, 2741, 1612, 691,
	60172, -1000, 1212, -1000, 824, 20819, -1000, 1040, -1000, 20819,
	338, -1000, -1000, -1000, -1000, -1000, 45230, 15088, 44813, 44396,
	41489, 59755, 14661, 51056, 1065, -1000, -1000, -1000, -1000, -1000,
	16, 38927, 63079, -1000, 334, -1000, -1000, -1000, -1000, -1000,
	-1000, 27122, 458, 26669, 373, 26216, 371, -1000, -1000, -1000,
	-1000, 2740, 2739, 957, 2735, 2404, 66367, 1417, 2734, 1334,
	1044, 897, 2733, 2732, 2731, 2730, 2726, 2725, 2724, 1238,
	59338, 2186, 41062, 40635, 51467, 51467, 1943, 58921, -1000, -1000,
	1121, 1091, -1000, -1000, -1000, -1000, 2287, 2150, 2149, 50639,
	-1000, -1000, 2723, 2722, 2721, 2719, 2717, 65956, 1413, 2716,
	1880, 2714, 2713, 2712, 2709, 2708, 2707, 2706, 2705, 2704,
	-1000, 50222, 49805, 49388, 48971, 58504, 40208, 39781, -1000, -1000,
	-1000, 32671, 6444, 58087, 33952, 51467, 51467, -1000, -1000, 27562,
	-48, -1000, -1000, -1000, 2132, -1000, 27562, -48, -1000, 63079,
	-1000, 2185, 1661, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1963, 1326, 2597, 39354, 1588, 1181, 2285, 2278,
	1260, 1832, 2235, 2222, 2216, 2210, 2209, 1340, 1914, 1239,
	1258, 2207, 2196, 2618, 1587, 43979, 2703, 2701, 2440, 2190,
	2131, -1000, -1000, -1000, -1000, 1248, -1000, -1000, -1000, 46475,
	-1000, -1000, 1008, -1000, -1000, 1008, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1061, 65134, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1491, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1682,
	-1000, 1576, -1000, -1000, 2700, 2136, 1849, 2427, 2427, 2427,
	2483, 455, 451, -1000, 164, -1000, -1000, 71439, -1000, -1000,
	27562, 27562, 27562, 27562, 27562, 1516, -1000, 690, -1000, -1000,
	718, -1000, 688, 626, -1000, -1000, -1000, -1000, -1000, -1000,
	687, 2626, -1000, 907, -1000, -1000, -1000, -1000, 2577, -1000,
	17273, -1000, -1000, -1000, 490, 686, 27562, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 325, 840, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 613,
	1421, 611, 611, 611, -1000, -1000, 886, -1000, -1000, -1000,
	343, 609, 339, 608, -1000, -1000, -1000, -1000, 2183, 684,
	683, -1000, 681, 680, 679, -1000, -1000, -1000, 675, 674,
	673, 665, 664, 663, 662, 661, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 883, -1000, 657, 656, 653, 652, 649,
	645, 643, 639, 635, -1000, -1000, 15, 63079, -1000, 497,
	15, -1000, -1000, 632, -1000, 21259, 21259, 21259, -1000, -1000,
	1700, 27562, -1000, 2242, -1000, 698, -202, 783, 31837, -1000,
	30158, 783, 725, 35199, -1000, 2129, -1000, -1000, 629, 323,
	-1000, -1000, 2126, 63079, 15513, 63079, 51467, 51467, -1000, 2350,
	27562, -1000, -1000, 38516, 63079, 51878, 2529, 71992, 38516, 63079,
	2181, -1000, -1000, -1000, 63079, -1000, 27562, -1000, 2527, 1184,
	-4, -1000, -1000, -1000, -1000, -1000, -1000, 1852, 1866, 995,
	1735, 1269, -1000, 20819, 2395, -1000, -1000, -1000, 317, 15513,
	-1000, 1781, 2326, 1095, -1000, 1734, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1355, 2321, -1000, 1543, 2320, 1351,
	-1000, -1000, 869, 2319, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1649, -1000, -1000, 2437, -1000, -1000, 1454,
	2318, -73, -1000, -1000, 33102, 38927, 4, -1000, -1000, -28,
	-1000, 14234, 71439, -1000, -1000, -1000, 71439, 790, -1000, -1000,
	2316, -1000, 71439, 786, -1000, -1000, 2313, -1000, -1000, -1000,
	2699, -1000, 2698, 1800, 2697, 2692, 2690, -1000, 1306, 1377,
	2687, -1000, 2685, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48554, 48137, 890, -1000, 1691, -1000, -1000, 47720, 847, 1799,
	-1000, -1000, 1798, -1000, 839, -1000, 2683, 57670, 1965, 847,
	1797, -1000, -1000, -1000, -1000, -1000, 51467, -1000, 51467, -1000,
	51467, -1000, 1202, -1000, 65545, -202, -1000, -1000, -1000, -1000,
	-1000, 2312, 2682, 2680, 2677, -1000, 63079, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 175, 2303, -1000, -1000,
	175, 2301, -1000, 175, 2299, -1000, 167, 2298, -1000, -1000,
	1639, 2296, -1000, -55, 2280, -1000, -1000, -55, 2276, -1000,
	-13, -1000, -1000, -1000, 903, -1000, 32254, 57253, 41914, 843,
	678, 36859, 71439, -1000, 33102, 71439, -1000, 41914, 47720, -1000,
	56836, 47309, -1000, -1000, 1152, 1904, -1000, -1000, -1000, -1000,
	41914, 41914, -1000, 56419, -1000, 1579, 1310, 2442, 51467, -1000,
	1611, -1000, -1000, -1000, 2449, 2174, -1000, 38105, 53111, -1000,
	52700, -1000, 52289, -1000, 51467, -1000, 51467, -1000, 2676, 2675,
	2674, 2295, 1380, 1364, 63079, -1000, -1000, 63079, -1000, 63079,
	-1000, -1000, -1000, 1845, -1000, -1000, -1000, -1000, 51467, -1000,
	-1000, -1000, -1000, -1000, -1000, 2171, -1000, 1595, -1000, 1122,
	-1000, -1000, 194, -1000, -1000, -4, -1000, 65134, -1000, -1000,
	2136, 1849, -1000, 63079, -1000, -1000, -1000, 2136, 1729, 1936,
	25763, 1909, 27562, 164, -1000, -1000, 164, 164, 20379, -1000,
	-1000, 71992, 71992, 15513, 1082, 27562, 27562, 27562, 27562, 27562,
	27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562,
	27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562,
	27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562, 27562,
	1928, 27562, 1059, 27562, 27562, 27562, 27562, 1453, -1000, -1000,
	1500, 538, 1548, -1000, 2563, 2563, 2563, 71719, 71719, 535,
	2673, 718, -1000, 27562, -1000, -48, 27562, 15940, -1000, 2609,
	1165, -1000, -1000, 451, 5941, 1769, -1000, 449, 16393, -1000,
	-1000, -1000, 17273, 626, 25310, 27562, 879, 71439, 13809, 2161,
	2030, -1000, 2606, -1000, -1000, 2579, -1000, -1000, -1000, -1000,
	2579, 1076, 1075, 2602, -1000, 2579, 2579, 624, 782, 780,
	777, 760, 606, 27562, 27562, 27562, 27562, 27562, 27562, 27562,
	27562, -1000, 24870, 24417, 23964, 28882, 23511, 27562, 17713, 23058,
	22605, 63079, 15, 2525, 27562, 157, -1000, 70119, -1000, 157,
	157, 622, -14, 71439, 1915, 1915, 31422, 1930, 1535, 1535,
	1535, -1000, 619, 708, 33, 29, 28, -1000, -1000, 27,
	25, 783, 11243, 54767, 1542, 783, 783, 294, 319, 448,
	29743, 2242, 54767, -1000, -1000, 51467, 618, 15940, 15513, 1166,
	-26, 288, 1922, 1921, 1920, -1000, 1273, -31, 1056, -43,
	-1000, 5347, -32, -1000, 946, -1000, -1000, -1000, -1000, 154,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 882, 617, 614, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 613, 1421, 611,
	611, 611, -1000, -1000, -1000, 343, 609, 339, 608, -1000,
	-1000, -1000, -1000, -1000, -1000, 2112, -28, 51878, 801, -33,
	964, -4, -1000, 1008, -1000, 1274, -1000, -1000, -1000, -1000,
	-1000, -1000, 1153, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2625, -1000, 2568, -1000, -1000, 2600, 13, -1000, -1000, 15513,
	-1000, -9, 1445, -1000, 43562, 2444, 2438, 2412, 1200, -1000,
	1167, 2482, 46475, 2508, 2515, 23, -1000, 2110, -1000, -1000,
	820, 1300, 1043, 46475, 1543, -1000, 71992, -1000, 1967, 2481,
	1180, 1176, 1180, 1180, 1160, -1000, 46475, 1041, 1461, 41914,
	-1000, 1036, -1000, -12, 2505, 2512, 22, -1000, 2108, 1034,
	-1000, -1000, 51467, 15513, 800, -1000, 41914, 4, 38927, 63079,
	275, -1000, 27562, -48, 27562, -48, -1000, -1000, 2275, -1000,
	-1000, -1000, 2669, 1353, 1868, -1000, -1000, -1000, 605, 1796,
	1543, 1794, -1000, -1000, 46892, 2107, 63079, 1926, 0, 51467,
	-1000, -1000, 1446, -1000, 2274, 2272, 610, 2668, -1000, 1689,
	1789, -1000, -1000, -1000, 64723, 1094, 2271, 874, 180, 2524,
	180, 36029, -1000, 63079, -1000, 63079, -1000, -1000, -1000, 2666,
	-1000, 51467, -1000, -1000, 51467, -1000, 51467, -1000, 51467, -1000,
	51467, 51467, -1000, 63079, 41914, 41914, 41914, 5653, 42740, -45,
	447, -1000, 56008, 63079, 918, 43151, 63079, 2384, -198, -1000,
	843, 843, 800, -1000, 800, -1000, 51467, 2166, -1000, -1000,
	-1000, -1000, -1000, -1000, 2664, 2659, -1000, 846, 51467, 63079,
	51467, -1000, -1000, 63079, -1000, 63079, -1000, -1000, 63079, -1000,
	63079, -1000, 63079, -1000, -1000, -1000, -1000, -1000, 1216, -1000,
	2162, -1000, 2143, -1000, 53, -1000, -1000, -1000, -1000, 1774,
	51467, 51467, 63079, 51467, -1000, 46475, -1000, -1000, 2136, -1000,
	-1000, -1000, -1000, -1000, 71439, -1000, 500, -1000, -1000, 71439,
	1251, 1931, -1000, 1931, 1, -1000, 70040, 1899, 51467, -1000,
	-1000, -1000, -1000, -1000, 817, 1081, 1081, 1086, 1086, 1086,
	1086, 2528, 516, 1042, 240, 5041, 5041, 5041, 5041, 5041,
	5041, 5041, 5041, 421, 403, 403, 421, 421, 421, 421,
	421, 403, 403, 403, 5041, 5041, 5041, 71719, 71640, 6988,
	27562, 27562, 1021, 1496, 538, 6781, 27562, 6839, 6839, 6839,
	6839, -1000, 1937, -1000, -1000, -1000, -1000, 2103, 604, 28882,
	28882, -1000, -1000, -1000, -1000, 16833, 27562, -1000, -1000, -1000,
	-1000, 22152, -1000, -1000, 69557, -240, 446, -104, 52, -1000,
	27562, 27562, 27562, 435, -1000, 434, -1000, -1000, 1020, -1000,
	1014, 1011, 1010, -1000, 601, 271, 27562, 63079, -1000, 10751,
	706, -130, -1000, -46, 1187, -1000, 27562, 270, -1000, 1524,
	600, 598, 433, -47, -1000, 429, 816, 814, 427, 426,
	425, 27562, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 71360, 10550, 10237, 9923, 4799, 9537, 9336, -51,
	424, -1000, 2100, -104, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 423, -1000, 422, -1000, 71159, -104, 420, 4035, -1000,
	28882, 28882, 28882, -1000, 419, -1000, 70320, -1000, 70679, 21712,
	21712, 21712, 417, 70880, 27562, -104, -53, -1000, -57, -1000,
	-1000, 597, -58, 874, 21259, 30589, 15513, -1000, 874, 874,
	27562, -1000, 27562, 1910, -1000, -1000, -1000, 1908, 1243, 1915,
	31422, -1000, -1000, -1000, -1000, 54767, 468, 783, -1000, -1000,
	-1000, -1000, -1000, 54767, -1000, 2577, 1992, -1000, -1000, -1000,
	63079, 497, -1000, 54767, 54767, 15513, 783, -1000, 406, 34367,
	52, 217, -1000, -1000, 15513, 1995, 1995, 1995, -1000, -1000,
	63079, 2522, -1000, 1429, -1000, 71992, -1000, 716, 959, -1000,
	2599, 596, -1000, 2579, 2579, 63079, 100, 20819, -1000, 1008,
	-1000, -1000, 1271, -1000, 1405, -1000, 1048, -1000, -1000, -1000,
	20819, -1000, 1515, 63079, 63079, 51467, -1000, -1000, 1786, 64312,
	1784, 71992, 63079, -1000, -1000, 595, 594, 1898, 1897, 63079,
	63079, 63901, 63490, 63079, 1468, 27562, 1571, 1392, -48, -48,
	-1000, -1000, -48, 592, 1073, 51467, 51467, 51467, 1347, -1000,
	-1000, -1000, -1000, -1000, 51467, -1000, -1000, 2592, -1000, 1180,
	-1000, -1000, -1000, 1180, 1543, 1339, 51467, 41914, 858, 63079,
	1478, -48, -48, -1000, -1000, -48, 591, 15513, 1420, -1000,
	1983, -1000, -59, -1000, -1000, 13384, 71439, -1000, 71439, -1000,
	63079, -1000, 889, 63079, 43151, 837, 2268, -1000, 1543, 2267,
	497, -1000, -1000, 35614, -28, 843, 41914, 51467, 0, 41914,
	41914, 41914, 2658, 590, 2654, -1000, 51467, 2264, 1666, 1777,
	2300, 743, 63079, 1553, -1000, 27562, 1431, -1000, 34784, 905,
	63079, 1322, 95, -1000, -1000, -1000, 38, 63079, -1000, 2653,
	-1000, -1000, 175, 175, 175, -1000, 167, 1639, -1000, -55,
	-55, -1000, -1000, 5653, 843, -1, 589, -1000, 773, 771,
	33527, 41914, -74, -1000, -1000, -1000, -1000, -1000, 51467, 63079,
	644, 1952, 63079, -75, -1000, 176, 588, -1000, 843, 33102,
	2079, -1000, -1000, 853, -1000, 1107, -1000, -1000, -1000, -1000,
	-1000, -1000, -28, -28, -1000, -1000, -1000, -1000, 1207, 1206,
	63079, -1000, 15513, 63079, 51467, 15513, 51467, -1000, -1000, -1000,
	-1000, -1000, -1000, 1251, -1000, 27562, -1000, -1000, -1000, 20379,
	-1000, -1000, -1000, 51467, -159, 27562, 27562, 5913, 5690, 27562,
	28882, 28882, -1000, 27562, 4713, -1000, -1000, -1000, -1000, -1000,
	2077, 584, 27562, 71992, 7062, 7012, -1000, 405, 8860, 421,
	-1000, 27562, -1000, 399, 19939, -1000, 70399, -27, -84, -1000,
	2623, 1821, 1684, 1411, 1237, 2590, 12959, -104, -85, -1000,
	-1000, 712, -1000, 2332, -1000, 27562, 70600, 12534, -1000, 36444,
	876, 1553, -1000, -1000, 2579, 803, -1000, -1000, -1000, 803,
	-1000, 69454, 71992, 71992, 27562, 27562, -1000, 27562, 27562, 27562,
	-1000, -1000, 27562, -1000, -1000, 2075, 27562, -1000, 71992, 71992,
	28882, 28882, 28882, 28882, 28882, 28882, 28882, 28882, 28882, 28882,
	28882, 28882, 28882, 28882, 28882, 28882, 28882, 28882, 28882, 1760,
	28882, 2560, 2560, 2560, -1000, 2048, 2075, 27562, 27562, 71992,
	391, 390, 389, -1000, 27562, -104, -1000, -1000, 5653, -1000,
	2019, -1000, -90, -1000, 2242, -1000, -1000, 2019, 2019, -94,
	71439, 31422, 31422, -1000, 581, 27562, 1906, -1000, 705, -1000,
	-95, -1000, 54767, -1000, 704, -235, -1000, 770, -1000, -1000,
	-1000, -1000, 497, -1000, -1000, -1000, 158, 54767, -1000, -96,
	-1000, 2520, 388, 15513, -1000, -1000, -1000, -1000, -1000, -1000,
	-28, 1563, 2619, -1000, 2581, 711, 703, 387, 2579, 383,
	382, -28, 63079, -1000, -4, -1000, -1000, -1000, 27562, -1000,
	-1000, 2424, 1005, 1003, -1000, 2256, -1000, 1775, -1000, 911,
	-1000, 1414, -1000, 27562, 27562, 579, 577, 1428, 2651, 2251,
	1639, 2248, 1639, -1000, -1000, 828, -1000, 71439, 573, 566,
	-1000, -9, 1374, 850, -1000, -1000, 27562, 27562, 55593, -1000,
	2437, 2437, -1000, 1001, -1000, -1000, -1000, 1543, 999, -1000,
	-1000, 1441, -1000, -1000, 848, -1000, -1000, 27562, -1000, -12,
	998, 843, 2067, -1000, -1000, 2650, 2649, 2647, 381, -100,
	-18, 71992, 2517, 1613, 63079, 51467, 51467, 2516, 793, -1000,
	2577, -1000, -1000, -1000, -1000, 847, -1000, -1000, 2646, -1000,
	917, 15513, 51467, 2247, 1864, 743, 42329, -1000, 847, 1936,
	71439, -1000, 1322, 19486, 2416, -105, -1000, -1000, -1000, 874,
	36029, 31422, 27562, 2643, -107, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 55182, 55182, 41914, 41914, 41914, 843, 63079,
	63079, 43151, 2642, 562, 63079, 63079, 560, -1000, 63079, 63079,
	2641, 41914, -1000, -1000, -48, -1000, 1558, 51467, -1000, -1000,
	846, -1000, -1000, 1481, 1733, 1481, 1573, 69172, -1000, 2419,
	15513, 2532, 6839, 27562, 27562, 312, 3996, 450, 6839, 27562,
	27562, 71992, 482, -109, 27562, 27562, -1000, 27562, 702, 71439,
	2614, 27562, 380, 378, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 367, -1000, -1000, -1000, -1000, -1000, 71439,
	27562, 39, -1000, -1000, -1000, 67189, -1000, 27562, 366, 365,
	-1000, -1000, -1000, 364, 363, 6495, 3941, 69095, 68813, 68710,
	71439, 2048, 71439, -1000, -1000, 944, 944, 1151, 1151, 1151,
	1151, 2560, 842, 1228, 988, 291, 291, 291, 491, 528,
	528, 291, 291, 291, 2063, 1869, 559, 5975, -1000, -1000,
	71439, 71439, 362, -1000, -1000, -1000, -104, 360, 2008, 2479,
	-1000, 31422, 2008, 2008, -1000, -1000, 1243, 63079, 71439, 31422,
	-202, -1000, 2577, -1000, -1000, 1992, -1000, 11680, -1000, 15513,
	-1000, -1000, 34367, -1000, 558, -1000, 24, -1000, -1000, 701,
	2640, 710, -1000, 356, -1000, -1000, -28, 71439, 63079, 63079,
	63079, 2238, -1000, 2051, -1000, 68428, -113, -1000, 70040, 27562,
	63079, -1000, 1447, 1924, 950, -1000, 63079, -1000, 63079, -1000,
	-1000, 63079, 63079, 51467, 2225, -115, 71439, -30, -1000, 769,
	-1000, -1000, 51467, 51467, 41914, 2221, -119, 15513, -1000, 41914,
	-1000, -1000, -1000, 1948, -1000, 53939, 1677, -48, -1000, 2639,
	550, 1543, -48, -1000, 1557, -1000, 697, -1000, -1000, 547,
	63079, 1665, 546, 15513, 1874, 743, 42329, -1000, 1094, 1322,
	-1000, -1000, -42, -1000, 552, -48, 1553, -1000, -44, 71439,
	-1000, 744, -1000, -120, -1000, -1000, 354, -1000, 2381, 2380,
	-1000, -1000, 27562, 545, 544, 63079, 2373, -1000, -1000, -121,
	-1000, 1889, -1000, -1000, -1000, -1000, 15513, 1293, -1000, -1000,
	-1000, -1000, 2419, 6839, 6839, 27562, 27562, 27562, 6839, 482,
	-125, -1000, 6839, 6839, -104, -1000, -1000, 70399, -1000, -1000,
	-1000, 71439, 12109, 1492, -1000, 68351, -1000, -1000, -1000, -1000,
	27562, 27562, -1000, -1000, -1000, -1000, -1000, 28882, 2056, 542,
	71992, -1000, -1000, 871, 27562, 27562, 2242, 871, 871, -1000,
	-126, -1000, 783, -1000, -1000, -1000, 2577, 24, -1000, 2635,
	15513, 699, -1000, 2634, -1000, -1000, -1000, -1000, 63079, -1000,
	63079, -1000, 15513, 63079, 2045, 1767, -1000, -1000, 1887, 539,
	28882, 51467, 805, 2022, 1462, 27562, -1000, -133, -138, 1761,
	-1000, -1000, 1740, 27562, -1000, 71992, 1639, 1639, -139, -143,
	-1000, 27562, 996, 63079, 19046, -1000, -1000, -1000, 27562, 993,
	-1000, -55, 1478, 1991, -1000, -1000, -1000, -1000, 1885, -1000,
	-1000, 63079, 1884, 844, -1000, 43151, 837, -1000, -1000, 826,
	-1000, 27562, -1000, 51467, 27562, 1616, -1000, 743, 42329, -1000,
	2300, -1000, 2340, 63079, 2411, -1000, 1936, 538, -1000, 843,
	537, 533, -144, 27562, 27562, -154, 532, 843, -83, -1000,
	785, 779, -1000, -1000, 51467, 51467, -1000, 6839, 6839, 6839,
	-1000, 348, -1000, -1000, 1553, 2478, -1000, 68069, 67966, 6757,
	28882, 71992, -156, -1000, 63079, 71439, -104, -1000, -1000, -1000,
	54767, 607, -1000, 2633, -1000, -1000, 1416, -1000, -1000, -1000,
	63079, 1771, -1000, -1000, 27562, 5975, 531, 27562, -1000, -1000,
	1940, 2081, 1948, 529, -1000, -1000, -1000, -1000, 1357, -1000,
	-1000, 71439, 2455, -1000, -1000, 526, 525, 71439, 518, 740,
	2043, -1000, 71439, 515, 837, -1000, 1508, 1677, 503, -1000,
	-1000, -1000, 1957, 347, 2514, 826, -1000, 2569, -1000, -160,
	917, -161, 51467, 42329, -1000, 1864, 1080, -162, 63079, 1322,
	-1000, -1000, 41914, 41914, 1462, -166, -167, -1000, 41914, -1000,
	1889, -1000, 63079, -1000, 63079, -1000, -1000, -1000, 1637, 27562,
	-1000, -1000, 6757, -168, -1000, -93, -1000, 2513, -1000, -1000,
	-1000, -1000, -1000, 2228, 67684, 1833, 63079, 67607, 2072, -1000,
	-1000, 1478, 63079, 51467, 916, 15513, 1481, 1481, 27562, 18606,
	1503, 27562, -1000, 51467, 63079, -1000, 2371, 1948, -48, -1000,
	-1000, 1462, 502, 1462, 501, -1000, 1874, 1192, -1000, 874,
	-1000, -1000, -174, -176, 1948, 1462, -1000, -180, -1000, -181,
	-185, 346, 28442, 28442, 28442, -104, -1000, 63079, 499, 2192,
	-1000, 1593, 1670, 340, 942, -1000, -1000, 2022, -186, 497,
	-1000, 27562, -1000, -187, -1000, 904, -192, -1000, 902, -196,
	-1000, 2040, -1000, -197, 496, -206, -1000, -1000, -1000, 1478,
	844, 1948, 27562, 1948, 27562, -1000, 36029, -1000, 843, 843,
	1478, 1948, 843, -1000, -1000, -1000, -1000, -1000, 29307, 1690,
	1249, 69839, -1000, -1000, -1000, -1000, 63079, -1000, 1615, 1609,
	1224, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1833,
	71439, -1000, 1481, 1990, -1000, 1481, 2029, -1000, 1501, -1000,
	63079, -1000, 63079, 837, -1000, 1478, -211, 1478, -212, -194,
	-1000, -1000, -1000, 1478, -1000, 2539, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2357, -1000, 934, 1745, 1745, 1593, -1000,
	495, -1000, 489, -1000, -218, -1000, -1000, 873, 1462, 873,
	1462, -1000, -1000, 28002, -1000, 2548, -1000, -1000, 1911, -1000,
	2022, 27562, 27562, 1585, -1000, 2630, 1948, -1000, 1948, -1000,
	-1000, -1000, -1000, -1000, -220, -224, -1000, -1000, -1000, -1000,
	1478, 1478, 1478, 980, 873, 873, -1000, 462, -1000, -1000,
	27562, -225, 1478, -1000,
}
var sqlPgo = [...]int{

	0, 3263, 3262, 3261, 3259, 3258, 3257, 3256, 3255, 3251,
	3249, 3248, 3246, 3244, 3239, 3238, 3237, 3234, 3233, 3223,
	3220, 3219, 3218, 3217, 3211, 3210, 3209, 3208, 3207, 3206,
	3205, 3203, 3202, 3199, 3193, 3187, 3186, 3185, 3184, 3181,
	3180, 3179, 3178, 3177, 3176, 3171, 34, 3170, 3162, 3161,
	3159, 3158, 3157, 3155, 3151, 3150, 3149, 3148, 3147, 3143,
	3137, 3135, 3127, 3125, 35, 3124, 215, 3122, 3121, 3120,
	3111, 3110, 3108, 3107, 3106, 3105, 3102, 214, 3098, 101,
	3096, 3095, 3094, 3093, 3090, 213, 3084, 3083, 3082, 3079,
	3074, 3072, 3071, 3070, 129, 3068, 3067, 171, 3066, 3065,
	3063, 3061, 3060, 3056, 3054, 3052, 3051, 3047, 193, 3046,
	210, 3045, 3043, 3033, 3028, 3025, 3023, 3020, 3017, 3015,
	3014, 3013, 3011, 3009, 3006, 3005, 3004, 3002, 3001, 2999,
	2997, 2992, 2988, 2985, 2980, 2979, 2978, 222, 142, 2977,
	2976, 206, 205, 2969, 2967, 92, 88, 72, 2965, 87,
	130, 203, 8072, 187, 2963, 2962, 2961, 2957, 2956, 64,
	140, 136, 138, 134, 126, 2952, 2951, 75, 54, 36,
	27, 94, 2950, 2949, 2948, 2452, 84, 2947, 2946, 207,
	190, 2940, 1034, 2938, 160, 74, 102, 70, 89, 2935,
	111, 16, 2934, 131, 32, 2933, 122, 58, 33, 6121,
	6954, 2932, 115, 218, 76, 155, 183, 166, 168, 157,
	135, 128, 2929, 194, 2925, 95, 152, 2924, 2923, 2922,
	60, 146, 66, 2918, 7, 14, 141, 23, 86, 12,
	2917, 13, 2916, 2915, 2914, 2913, 21, 127, 2912, 113,
	65, 2911, 29, 2910, 107, 162, 2909, 182, 93, 2908,
	2907, 200, 151, 173, 10, 184, 2906, 2905, 2904, 2903,
	2902, 104, 17, 96, 2901, 2899, 106, 189, 2897, 49,
	133, 69, 98, 217, 90, 169, 83, 178, 137, 185,
	2896, 2895, 2894, 161, 2893, 2892, 119, 163, 2891, 2890,
	216, 37, 55, 188, 52, 2889, 2887, 120, 2886, 154,
	2885, 2884, 2883, 212, 143, 167, 5, 73, 99, 26,
	8, 186, 114, 82, 68, 2882, 3089, 1347, 1140, 2881,
	103, 85, 50, 91, 108, 204, 61, 2880, 2879, 1087,
	2877, 2876, 2875, 2874, 144, 2873, 2872, 2871, 110, 43,
	71, 2870, 2868, 117, 57, 11, 118, 209, 80, 181,
	148, 195, 2867, 139, 2865, 40, 116, 2864, 150, 196,
	164, 2863, 1085, 125, 2859, 198, 2858, 2854, 2843, 2842,
	153, 2841, 2839, 338, 2835, 109, 2834, 2829, 147, 121,
	165, 105, 30, 2824, 63, 463, 2823, 149, 53, 2820,
	2612, 31, 0, 6736, 5272, 6237, 2818, 28, 2817, 170,
	97, 2816, 2815, 2814, 78, 2813, 56, 2811, 2810, 38,
	2807, 20, 4, 6, 18, 15, 1012, 513, 2805, 2804,
	79, 100, 123, 2803, 211, 180, 2802, 2799, 2798, 67,
	2797, 24, 2796, 22, 2795, 2794, 25, 3, 2792, 2791,
	192, 2790, 191, 2789, 2788, 2535, 2787, 202, 112, 2785,
	132, 159, 2784, 2783, 2780, 2779, 201, 2777, 197, 2776,
	9, 19, 2, 2771, 2765, 2764, 156, 1, 2364, 2763,
	2761, 62, 158, 2758, 2757, 145,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 34, 34, 10, 10,
	9, 9, 9, 11, 11, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 24, 24, 14, 14,
	26, 26, 15, 15, 27, 27, 447, 447, 18, 29,
	19, 30, 12, 448, 448, 448, 448, 22, 20, 20,
	31, 31, 148, 148, 148, 148, 17, 17, 25, 25,
	161, 161, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 446, 446, 163, 163, 162, 158, 158,
	449, 449, 164, 164, 164, 166, 166, 35, 35, 93,
	93, 93, 94, 94, 95, 95, 149, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 81, 81, 390, 390,
	391, 391, 144, 144, 145, 145, 145, 145, 146, 146,
	147, 147, 147, 49, 37, 37, 37, 37, 37, 37,
	37, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 47, 47, 47,
	47, 138, 138, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 454, 454, 455, 455, 456, 456, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 61, 61, 238, 238, 214, 214,
	62, 62, 62, 63, 63, 64, 64, 51, 51, 442,
	442, 252, 252, 357, 357, 66, 66, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	75, 75, 75, 76, 76, 76, 73, 73, 73, 71,
	71, 71, 70, 70, 70, 74, 74, 74, 72, 72,
	72, 253, 253, 77, 77, 77, 77, 77, 77, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 359, 359, 78, 78, 78, 327,
	327, 82, 82, 82, 284, 284, 83, 83, 83, 83,
	83, 84, 84, 84, 84, 96, 96, 96, 96, 445,
	445, 245, 245, 179, 179, 179, 179, 89, 89, 89,
	89, 90, 90, 90, 91, 91, 143, 143, 102, 102,
	102, 102, 102, 101, 101, 101, 101, 101, 101, 41,
	41, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	46, 46, 46, 46, 46, 104, 104, 450, 450, 106,
	103, 103, 103, 105, 105, 105, 105, 107, 108, 108,
	108, 108, 108, 108, 109, 109, 384, 384, 260, 260,
	382, 382, 398, 398, 383, 383, 218, 218, 218, 218,
	218, 219, 219, 219, 389, 389, 389, 389, 389, 389,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 128, 128, 128, 137, 137, 137, 137, 137, 137,
	137, 130, 130, 130, 119, 119, 111, 111, 111, 111,
	115, 115, 115, 115, 115, 112, 112, 121, 121, 121,
	121, 116, 116, 118, 118, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 113, 113, 113, 113, 123, 123,
	123, 123, 290, 290, 290, 122, 122, 342, 342, 133,
	133, 133, 133, 133, 133, 341, 341, 129, 129, 129,
	129, 132, 132, 132, 132, 274, 274, 126, 126, 126,
	127, 127, 127, 131, 131, 134, 134, 134, 134, 114,
	114, 114, 459, 459, 459, 135, 135, 125, 125, 136,
	136, 136, 136, 136, 136, 136, 136, 124, 124, 124,
	124, 117, 443, 443, 440, 440, 440, 440, 440, 440,
	440, 441, 441, 444, 444, 87, 87, 87, 56, 56,
	460, 460, 460, 57, 57, 461, 461, 461, 458, 458,
	458, 458, 458, 458, 458, 458, 220, 220, 221, 221,
	308, 308, 308, 308, 308, 224, 224, 165, 165, 165,
	227, 228, 228, 225, 225, 226, 226, 226, 230, 230,
	229, 232, 232, 231, 307, 405, 405, 407, 407, 407,
	407, 407, 407, 407, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 403, 403, 403, 404, 399, 399,
	400, 400, 400, 400, 222, 222, 223, 223, 223, 223,
	401, 402, 243, 243, 345, 406, 406, 408, 408, 410,
	462, 462, 462, 462, 462, 462, 463, 463, 306, 306,
	236, 236, 411, 411, 411, 411, 412, 412, 412, 412,
	412, 415, 414, 413, 413, 413, 413, 413, 337, 337,
	337, 60, 60, 60, 271, 271, 270, 270, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 140, 140, 58, 58, 58, 171, 171, 55,
	55, 55, 465, 465, 59, 59, 59, 466, 466, 65,
	65, 65, 65, 65, 65, 54, 54, 54, 54, 54,
	467, 467, 291, 291, 289, 289, 242, 242, 344, 183,
	183, 159, 159, 159, 21, 23, 23, 16, 16, 32,
	32, 33, 33, 28, 28, 451, 451, 452, 452, 88,
	88, 92, 92, 92, 100, 100, 139, 139, 139, 139,
	139, 139, 139, 36, 36, 36, 36, 48, 48, 48,
	48, 98, 469, 469, 469, 99, 99, 468, 468, 178,
	178, 178, 178, 180, 180, 303, 303, 304, 304, 470,
	470, 305, 305, 305, 305, 173, 172, 174, 174, 53,
	53, 53, 167, 167, 168, 168, 169, 169, 170, 170,
	471, 471, 85, 85, 85, 142, 142, 213, 213, 299,
	299, 299, 237, 237, 188, 188, 302, 302, 300, 300,
	300, 300, 269, 269, 269, 141, 141, 250, 250, 262,
	262, 263, 263, 354, 354, 264, 97, 97, 152, 152,
	150, 150, 150, 150, 150, 150, 472, 472, 151, 151,
	151, 153, 153, 153, 153, 153, 153, 153, 156, 156,
	156, 156, 157, 157, 157, 155, 155, 422, 422, 422,
	424, 424, 425, 421, 421, 423, 423, 464, 464, 273,
	273, 273, 234, 235, 233, 233, 240, 240, 239, 241,
	241, 343, 343, 343, 267, 267, 267, 267, 294, 294,
	292, 292, 293, 293, 295, 295, 296, 296, 296, 297,
	297, 298, 298, 266, 266, 323, 323, 154, 154, 154,
	247, 247, 247, 248, 248, 314, 314, 314, 314, 314,
	314, 315, 315, 313, 313, 313, 313, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 347, 347, 249, 249,
	348, 301, 301, 438, 438, 438, 439, 439, 340, 340,
	349, 349, 349, 349, 349, 349, 338, 338, 339, 339,
	355, 356, 356, 277, 277, 277, 277, 275, 275, 278,
	278, 278, 278, 276, 276, 350, 350, 350, 350, 268,
	268, 351, 351, 351, 352, 309, 310, 310, 360, 360,
	360, 360, 360, 375, 246, 246, 246, 246, 246, 473,
	473, 361, 361, 361, 361, 361, 361, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 365,
	365, 365, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	374, 374, 374, 374, 374, 366, 366, 371, 371, 372,
	372, 372, 367, 368, 373, 373, 373, 373, 474, 474,
	377, 377, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 363, 363, 363, 370, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 285, 285,
	286, 286, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 318, 318, 318,
	318, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 416, 416, 416, 416,
	416, 416, 416, 416, 419, 419, 420, 420, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 426, 426, 427,
	427, 429, 429, 430, 430, 431, 432, 432, 432, 433,
	434, 434, 428, 428, 435, 435, 435, 435, 436, 436,
	437, 437, 437, 437, 437, 329, 329, 330, 330, 336,
	336, 336, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 181, 181,
	181, 181, 181, 258, 258, 256, 256, 256, 259, 259,
	257, 257, 255, 255, 254, 254, 326, 326, 324, 324,
	328, 328, 279, 279, 376, 376, 376, 376, 376, 376,
	376, 280, 280, 280, 288, 281, 281, 282, 282, 282,
	282, 282, 320, 321, 283, 283, 283, 322, 322, 331,
	335, 335, 334, 333, 333, 332, 332, 311, 311, 312,
	312, 265, 265, 475, 475, 261, 261, 353, 353, 353,
	353, 216, 216, 251, 251, 215, 215, 208, 208, 209,
	209, 209, 209, 244, 244, 378, 378, 378, 379, 380,
	381, 325, 198, 197, 185, 186, 196, 195, 194, 184,
	187, 191, 192, 193, 189, 190, 204, 203, 202, 200,
	201, 358, 210, 210, 211, 211, 211, 212, 212, 212,
	212, 182, 182, 205, 205, 206, 207, 207, 199, 199,
	199, 175, 175, 175, 176, 176, 177, 177, 388, 388,
	386, 386, 386, 387, 387, 387, 387, 385, 385, 385,
	385, 385, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 394, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 397, 397,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 9,
	6, 9, 6, 5, 6, 5, 1, 1, 5, 5,
	6, 6, 4, 4, 4, 4, 3, 4, 4, 7,
	4, 7, 5, 3, 5, 7, 4, 12, 4, 12,
	1, 3, 5, 5, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 4, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 3, 1, 3, 1, 6, 4, 9,
	7, 12, 12, 12, 9, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 6,
	3, 1, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 3, 3, 4, 3, 4, 7, 4, 4,
	4, 3, 5, 7, 4, 3, 3, 4, 3, 3,
	3, 3, 3, 2, 0, 1, 0, 1, 0, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 1,
	1, 2, 1, 2, 7, 3, 2, 0, 1, 3,
	3, 1, 0, 1, 2, 2, 1, 6, 5, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 5, 3, 5, 5, 5,
	3, 3, 3, 4, 3, 4, 3, 5, 4, 5,
	3, 4, 5, 3, 4, 3, 4, 3, 3, 4,
	4, 5, 0, 1, 1, 3, 4, 1, 0, 5,
	4, 6, 4, 6, 4, 1, 0, 3, 4, 4,
	5, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 3,
	4, 3, 1, 1, 1, 2, 3, 2, 3, 6,
	6, 7, 9, 7, 9, 3, 4, 5, 5, 5,
	3, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 10, 13,
	0, 2, 3, 9, 12, 0, 2, 3, 1, 1,
	2, 2, 2, 2, 1, 0, 1, 0, 1, 3,
	1, 1, 1, 1, 3, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 4, 2,
	5, 5, 5, 2, 8, 9, 6, 5, 3, 1,
	5, 8, 5, 11, 3, 0, 2, 4, 3, 3,
	1, 5, 1, 3, 1, 2, 0, 1, 2, 2,
	0, 1, 3, 3, 2, 2, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 2, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 1,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 1, 0, 2, 5,
	7, 2, 1, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 4, 1,
	2, 1, 4, 1, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 2, 5, 1, 4, 2, 5, 1,
	4, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 5, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 454, -79, -49, -47, -82, -83, -67,
	-84, -78, -96, -100, -88, -102, -139, -3, -35, -37,
	-50, -66, -68, -77, -86, -85, -87, -89, -93, -92,
	-81, -41, -97, -101, -110, -140, -141, -142, 81, 68,
	121, 103, 108, 154, 285, 314, 324, 308, -105, -106,
	343, -36, -48, -99, -98, -4, -10, 27, 39, -38,
	-39, -40, 53, -58, -55, -52, -61, -453, 83, -423,
	-69, -72, -74, -457, 113, 127, 171, 277, -90, -91,
	310, 312, 128, -43, -42, 122, -150, -152, -103, -104,
	-143, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, -128, -129,
	-130, -131, -132, -133, -134, -135, -136, 346, 391, 40,
	355, 69, 116, 318, 21, -5, -6, -7, -8, -9,
	-11, -23, -51, -53, -54, -56, -57, -65, -59, -60,
	-422, -70, -71, -73, -75, -76, 309, -153, -151, 451,
	404, -13, -18, -19, -14, -15, -17, -20, -16, -24,
	-29, -30, -26, -27, -25, -28, -31, -32, -33, -34,
	-21, -22, -12, 422, 430, -156, -154, -155, -157, 331,
	412, 369, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, -200, -205, -206, -207, -199, -175, -394, -397,
	4, -392, -395, 133, 179, 246, 21, 22, 23, 24,
	25, 27, 37, 38, 39, 40, 43, 45, 46, 49,
	50, 51, 52, 53, 54, 57, 62, 67, 68, 69,
	70, 71, 76, 73, 74, 75, 78, 80, 81, 82,
	85, 86, 94, 95, 96, 97, 98, 99, 103, 106,
	105, 108, 111, 112, 113, 115, 117, 118, 121, 122,
	125, 123, 375, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 278,
	280, 281, 283, 285, 287, 289, 290, 291, 292, 293,
	294, 296, 297, 299, 300, 301, 302, 303, 308, 305,
	306, 307, 309, 310, 311, 312, 314, 316, 317, 318,
	319, 321, 323, 344, 345, 357, 324, 325, 326, 327,
	328, 329, 330, 334, 338, 335, 336, 337, 339, 332,
	333, 340, 341, 343, 346, 348, 350, 351, 354, 355,
	356, 358, 361, 362, 363, 359, 360, 353, 368, 366,
	367, 370, 371, 372, 373, 374, 376, 385, 386, 388,
	391, 392, 393, 383, 395, 396, 399, 400, 401, 402,
	403, 408, 404, 406, 409, 410, 411, 417, 416, 423,
	424, 426, 427, 428, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 282, 284, 295, 320, 349, 364, 378,
	379, 380, 381, 387, 389, 412, 413, 414, 418, 425,
	257, -193, 2, -175, -175, 285, 26, 2, 26, 281,
	333, 371, 373, 2, -445, -245, 2, 26, -179, -175,
	83, 154, 331, -193, 2, -445, -245, 24, 2, -175,
	2, -180, 2, 324, -175, 454, 78, 224, 62, 320,
	340, -108, 386, -107, 378, 326, -109, -384, 2, 239,
	-175, 454, 454, 454, 454, 2, 369, 274, 416, 332,
	405, 96, 292, 179, -440, 2, 4, -395, -392, -209,
	-208, 369, 96, -207, -199, 444, -206, 454, 454, 454,
	2, 201, 202, 291, 290, 340, 341, 454, 454, 454,
	2, 25, 56, 77, 80, 102, 129, 149, 152, 262,
	-454, 231, 271, 289, 326, 339, 368, 376, 388, -458,
	356, 57, 405, -465, 393, 111, -289, 96, 373, 371,
	224, 153, 400, 316, 157, 398, 106, 185, 403, 402,
	454, 454, 25, 56, 65, 80, 111, 129, 149, 152,
	-456, 271, 289, 323, 326, 339, 368, 376, 393, 388,
	2, 416, 332, 369, 179, 96, 405, 316, 288, -79,
	2, 451, 29, 343, -149, 369, 195, 2, -175, 201,
	202, 2, 454, 454, -440, 2, 201, 202, 2, 195,
	2, 57, 328, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	2, -137, 340, 356, 163, 39, 62, 26, 67, 275,
	97, 155, 179, 180, 209, 77, 78, -290, -342, -341,
	370, 327, 333, 366, 386, 83, 406, 317, 428, 293,
	123, 4, 96, 239, 342, 378, 224, 38, 71, -464,
	2, 369, -468, 2, 386, 386, 2, -468, 2, -468,
	2, -178, 2, 386, 382, -469, 386, 425, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	-151, -153, -152, 454, 454, 454, 454, 454, -137, 340,
	2, 62, 26, -472, 147, -239, -240, 397, 193, 119,
	263, -150, -152, 2, -422, -382, 2, -316, -398, -318,
	442, 443, 437, 245, 429, -329, 102, 398, 257, -397,
	-319, -331, 120, 320, -259, 8, 9, 5, 6, 7,
	-182, -362, -325, -370, 390, 132, 248, -212, 456, 10,
	451, -419, -152, -330, 33, 158, 55, -386, -211, -364,
	-372, -368, -369, -473, 45, 51, 50, 376, 238, 334,
	335, 350, 336, 337, 43, 408, 175, 254, 256, 187,
	4, 194, -210, -199, -416, -417, -392, -393, 186, 192,
	188, 349, 189, 190, 191, 42, 295, 143, 144, 142,
	112, 101, 100, 250, 47, 46, 44, 413, -373, 98,
	378, 379, 380, 381, 204, 205, -175, -394, 65, 88,
	89, 87, 92, 91, 93, 90, 342, 405, 56, 32,
	165, 166, 198, 249, 167, 63, -418, 360, 84, 151,
	184, 169, 197, 199, 203, 218, 221, 240, 247, 266,
	268, 315, 347, -474, 414, 130, 131, 269, 282, 364,
	387, 389, 156, 217, 58, 59, -424, 296, -425, -193,
	-424, 454, 454, 455, 454, -233, -234, -235, 2, 26,
	109, 451, 2, -346, 2, 449, -350, -152, 212, -349,
	451, -347, -200, 258, -420, 321, -416, -417, -182, -199,
	-211, 4, -236, 451, 453, 96, 369, 66, 2, -284,
	451, -175, 26, 257, 382, 455, -327, 451, 257, 150,
	260, -175, 2, 2, 344, 2, 451, -108, 60, 386,
	-304, 2, -305, -172, -173, -174, -355, 200, 287, 294,
	431, 428, -382, -450, 150, 434, 382, -382, -260, 453,
	2, -350, 165, -200, 2, -197, -385, 4, -392, -395,
	-393, -396, 65, -394, 26, 28, 29, 30, 31, 33,
	34, 35, 36, 48, 55, 56, 61, 64, 66, 77,
	83, 87, 88, 90, 89, 91, 92, 93, 102, 104,
	107, 109, 110, 114, 116, 119, 132, 134, 147, 149,
	150, 154, 157, 160, 172, 183, 193, 195, 212, 215,
	222, 225, 226, 245, 248, 253, 257, 258, 262, 263,
	279, 286, 298, 313, 331, 342, 352, 365, 369, 377,
	382, 384, 390, 397, 398, 405, 407, 415, 419, 420,
	421, 422, -397, 2, -350, 165, 2, -202, 165, -350,
	-205, 2, -390, 165, -388, 10, -387, 5, 4, -392,
	-395, -393, 2, -184, -175, 2, -196, -385, 2, -215,
	165, -200, -201, -205, 382, 455, -251, -208, -209, -244,
	-175, 453, -316, 2, -97, 2, -316, 165, 2, -97,
	165, 2, -316, 165, 2, -97, 165, 2, 2, 2,
	388, 2, 80, 165, -175, 369, 95, 2, 307, -455,
	323, 392, 416, 2, 2, 2, 2, 2, 2, 2,
	369, 332, -466, 296, -189, 2, -175, 147, -390, 165,
	2, -390, 165, 2, -203, -205, -203, 179, 196, -184,
	165, 2, 373, 371, 373, 371, 150, 2, 195, 2,
	195, 2, -351, 2, -352, -200, 2, 2, 2, 2,
	2, 165, -175, 369, 95, 2, 211, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -253, 165, 2, -200,
	-253, 165, 2, -253, 165, 2, -216, 165, 2, -215,
	-184, 165, 2, -391, 165, 2, -390, -391, 165, 2,
	-359, 2, -358, -387, 412, -79, 451, 340, 451, -390,
	-200, -200, -316, -97, 150, -316, -97, -149, 147, 2,
	96, 369, -137, 2, 147, 407, 2, 8, 2, -390,
	293, 139, 2, 344, 2, 62, -290, 428, 150, 2,
	150, 2, -274, 2, 422, -443, 2, 257, 150, 2,
	150, 2, 150, 2, 150, 2, 150, 2, 290, 341,
	202, 385, 210, 124, 150, -274, 2, 150, 2, 150,
	2, 5, 2, 200, 287, 357, 2, -200, -459, 2,
	369, 416, 332, 2, 2, 73, 74, 150, 2, 150,
	428, 2, -268, -350, -303, -304, -303, 382, -180, -472,
	-239, -240, -137, 344, 2, 2, -472, -267, -292, -293,
	222, 134, 253, -273, 26, 109, -273, -273, 49, 452,
	452, 11, 12, 64, 37, 442, 443, 444, 445, 145,
	446, 447, 440, 441, 439, 432, 433, 436, 206, 207,
	79, 435, 434, 72, 229, 322, 135, 136, 137, 138,
	304, 176, 177, 178, 14, 15, 16, 30, 262, 221,
	429, 169, 347, 437, 17, 18, 19, 197, 199, 247,
	41, 172, -181, -217, -316, -316, -316, -316, -316, 268,
	451, -265, -311, 449, -152, 451, 451, 451, 5, 451,
	5, -381, 8, -152, -316, -329, 452, -257, 451, -152,
	-329, -324, 451, 320, 449, 451, -332, -316, 453, -426,
	423, -366, 451, 284, -365, 451, -365, -365, 417, -363,
	451, 430, 424, 451, -363, 451, 451, 147, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 417, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 455, -424, -236, 451, -261, -353, -316, 444, -261,
	-261, 257, -254, -316, 84, -277, 203, 240, 151, 218,
	315, 184, -381, -80, -66, -77, -85, -97, -110, -141,
	-142, -313, 456, -340, 430, -152, -347, -199, -152, -349,
	451, -346, -340, 444, -200, 451, 150, 451, 453, 150,
	-244, -385, -184, -200, -210, -211, 108, -254, -440, -244,
	-179, 34, -326, -360, -361, -374, -362, -371, -367, -370,
	300, 301, 299, 303, 302, 45, 51, 50, 376, 238,
	334, 335, 350, 336, 337, 43, 408, 175, 254, 256,
	187, 4, 44, 413, -373, 194, 186, 192, 188, 349,
	189, 190, 191, 42, 295, 143, 144, 142, 112, 101,
	100, 250, 47, 46, 98, 378, 379, 380, 381, 204,
	205, 414, 360, 58, 59, -440, -244, 147, -384, -254,
	34, -304, 2, -470, 455, 220, -219, 228, 244, 162,
	258, 426, 251, -389, 5, 4, -325, -337, 102, 224,
	-370, 9, 443, -378, 8, 442, -383, -382, 86, 453,
	-385, -161, 305, -160, 23, 27, 113, 410, 125, -226,
	181, 274, 120, 353, 401, -447, -448, 325, 374, 375,
	75, 251, 305, 120, -270, -272, 34, 94, 242, 270,
	52, 173, 233, 234, 355, 418, 120, 305, 422, 120,
	-448, 305, -448, -163, 353, 401, -447, -448, 325, 305,
	-162, -226, 120, 456, -94, -390, 451, -251, 455, 455,
	-385, 444, 120, 120, 120, 120, 2, 2, 245, 2,
	2, 2, 152, -458, -456, 2, 2, 2, -200, 165,
	-202, 165, 2, -205, 416, -238, 257, -442, -252, 369,
	-200, -171, -421, 422, 245, 245, 34, 451, 2, -186,
	165, 2, -176, -175, 179, -421, 245, -351, -213, -200,
	-213, 343, -193, 34, -313, 120, 2, 2, 2, -175,
	-164, 455, 54, 311, 120, -164, 120, -164, 120, -164,
	455, 120, -164, 120, 455, 120, 120, 452, 455, -359,
	-390, -147, 422, 150, 83, 451, 451, -149, -95, -94,
	-390, -442, -184, 2, -200, 2, 369, 204, -390, -390,
	-384, 26, 345, 2, 290, 341, 74, -200, 369, 96,
	179, 68, -444, 147, -441, 316, -440, -200, 96, -200,
	96, -200, 96, -200, -200, 2, 2, 2, 147, 2,
	385, 2, 385, 2, -175, -175, -175, 220, -200, 147,
	369, 179, 96, 369, -164, 455, -180, -472, -267, -384,
	-472, -293, -292, -295, -316, 26, -298, 141, 241, -316,
	-318, -151, -151, -151, -241, -343, -316, 286, 179, -375,
	-360, -360, -198, -385, 378, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	221, 169, 347, 41, 172, -316, 382, -316, -316, -316,
	-316, 237, 245, 248, 390, 132, 399, 109, 251, -475,
	365, 36, -322, -152, -258, 451, -336, 31, 352, 26,
	-329, 451, 2, -311, -316, -312, -255, -254, -254, 452,
	415, 26, 109, 444, 2, 8, -285, -287, 427, 236,
	99, 164, 235, -286, 330, 452, 455, 34, 452, -316,
	-255, -328, -324, -254, -335, -334, 419, -385, 444, -427,
	140, 157, 8, -379, 8, -379, 378, 378, 8, -379,
	-379, 451, 452, 2, 452, 2, 452, 2, 452, 2,
	452, 2, -316, -316, -316, -316, -316, -316, -316, -254,
	-279, 2, -376, -254, 4, 427, 236, 99, 164, 235,
	330, -279, 2, -280, 2, -316, -254, -281, -317, -318,
	442, 443, 437, -329, -282, 2, -316, -255, -316, 48,
	215, 384, -283, -316, 150, -254, -254, 2, -254, 2,
	-425, 34, -254, -247, 455, 150, 34, 4, -247, -247,
	451, 452, 455, -278, 161, 232, 227, -278, -346, -277,
	203, -275, 266, -275, -275, -438, 451, 450, 454, 454,
	454, 454, 454, -340, -185, 449, 457, -385, -339, -338,
	34, -193, 264, -340, -340, 453, 452, -339, -200, 451,
	-254, -385, 358, 452, 453, 197, 197, 197, 321, 452,
	382, 422, -79, 259, 452, 455, -246, 33, 449, -287,
	451, -377, 417, 451, 451, 150, -245, -450, 452, 386,
	-305, -218, 294, 351, 306, 338, 367, 9, 8, 8,
	455, -385, 455, -451, 77, 382, 66, -307, 165, 66,
	-399, -187, 77, -400, -175, 61, 398, 286, 149, -451,
	77, -451, 77, 77, 343, 356, 49, -350, 37, 37,
	26, -97, 216, 150, 428, 369, 179, 382, -350, -272,
	-360, 94, 233, 234, 49, -380, -378, 443, -380, 49,
	-380, -380, -380, 422, -202, -350, 382, 276, -390, 382,
	455, 37, 37, 26, -97, 216, 150, 382, -215, -185,
	-356, -355, -391, -208, -175, 453, -316, -97, -316, -97,
	120, 2, -466, 211, 451, -222, 245, -271, -270, 245,
	-204, 2, -200, 150, -244, -357, 195, 455, -252, 276,
	120, 120, 451, 117, 292, 2, 257, 245, -186, 165,
	-167, 372, 120, -310, -309, 420, -299, -97, 451, 102,
	34, -299, -262, -263, -354, -264, -187, 451, -193, -175,
	2, -200, -253, -253, -253, -215, -216, -184, -390, -391,
	-391, -79, -358, 452, 452, -146, 261, -145, -175, 5,
	-149, 407, -221, -308, -307, -403, -404, -399, 221, 179,
	398, 196, 133, -237, -188, -187, 95, -147, -355, 455,
	-147, -147, -356, -356, -200, 147, 2, 2, -274, -200,
	-184, -215, -244, -244, -184, -184, -184, 340, 147, 147,
	453, -274, 292, 96, 369, 274, 179, -200, -215, -184,
	-200, -350, -472, -296, -378, 451, -297, 320, 321, 455,
	-159, 35, 107, 208, -200, 428, 118, -316, -316, 382,
	-475, 365, -322, 118, -316, 237, 248, 390, 132, 399,
	109, 251, 150, 451, -317, -317, 452, -256, -316, -316,
	450, 459, 452, -240, 455, -239, -316, -254, -254, 452,
	452, 382, 382, 382, 382, 451, 453, -254, -244, 450,
	450, 455, 452, -333, -334, 114, -316, 453, -432, 267,
	451, 451, 452, 452, 455, 452, 428, 428, 452, 452,
	452, -316, 34, 455, 455, 455, 452, 455, 455, 455,
	452, 452, 150, 452, 452, -288, 279, 452, 11, 12,
	442, 443, 444, 445, 145, 446, 447, 440, 441, 439,
	432, 433, 434, 72, 229, 322, 14, 15, 16, 197,
	172, -317, -317, -317, 452, -320, -321, 150, 147, 34,
	-283, -283, -283, 452, 150, -254, 452, 452, 451, 452,
	-310, -353, -248, 2, -346, -195, -385, -310, -310, -254,
	-316, 203, 203, -276, 407, 257, -278, -346, -338, 452,
	-439, -381, -340, -339, -381, -315, -314, 148, 35, 107,
	243, 168, -193, -236, -339, -339, -385, -340, 452, -249,
	-348, -420, -240, 453, -385, -138, 5, 248, -138, -138,
	-244, 24, 280, -360, 449, 450, 8, 8, 451, -379,
	-379, -244, 150, -382, -304, 396, 70, 294, 378, -382,
	-160, 305, -187, -187, -200, 245, -307, 165, -166, 245,
	-360, -194, -175, 451, 451, 208, 208, -187, -194, 165,
	-187, 165, -194, -194, -446, 294, 252, -316, 223, 292,
	246, -161, 305, -97, -97, -97, 451, -450, 407, 108,
	-200, -215, -204, 305, -210, -380, -380, -270, 305, -202,
	-390, 422, -184, -162, -97, -97, -97, 451, -185, -163,
	305, -144, 174, 452, 444, -175, 416, -175, -220, -223,
	-221, -187, -460, 424, 422, 120, 120, -236, -214, -200,
	449, -147, -390, -200, -390, -390, -390, 2, 451, 2,
	-200, 120, 257, 245, -168, 115, -471, 434, -184, -240,
	-316, -269, -302, 313, 257, -237, 412, -193, -269, -250,
	455, 150, 434, 453, -237, 2, -164, -164, -164, -164,
	-164, -79, -147, 455, 451, 434, 434, 451, -390, -390,
	452, 455, -200, -186, 179, 179, -192, -176, 452, 455,
	453, 451, -147, -94, 150, -44, 422, 369, 340, 340,
	-175, -196, -184, -200, -197, -215, -297, -316, -343, -200,
	456, -316, -316, 118, 118, -316, -317, -317, -316, 118,
	150, 451, -316, -326, 30, 30, 452, 455, -312, -316,
	452, 415, -240, -240, 452, 5, 236, 164, 235, -286,
	235, -286, -286, 8, 444, -385, 452, -324, 116, -316,
	377, -385, 444, -433, -190, 451, -175, 420, -239, -379,
	-363, -363, 452, -375, -360, -316, -316, -316, -316, -316,
	-316, -320, -316, -375, -360, -317, -317, -317, -317, -317,
	-317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
	-317, -317, -317, -317, 109, 245, 251, -317, -321, -320,
	-316, -316, -360, 452, 452, 452, -254, -79, -266, 157,
	-356, 455, -266, -266, 452, -346, -346, 451, -316, 203,
	450, 452, 455, -339, 450, 455, 458, 434, -236, 453,
	-338, 452, 455, -301, 34, 452, -385, 260, 5, 8,
	449, 450, 452, -379, 452, 452, -244, -316, 382, 382,
	120, 245, 409, -405, -400, -316, -242, -344, -316, 451,
	451, -158, 113, 343, -452, 2, 120, -164, 120, -164,
	426, 451, 451, 382, 422, -254, -316, -148, 102, -384,
	-448, -448, 382, 382, 276, 422, -254, 382, -147, 150,
	2, 2, 2, 452, 452, 455, -406, 34, 255, -175,
	-200, -202, 34, -62, 422, -355, -381, -171, 2, -291,
	407, -185, -200, 120, -169, 214, -471, -388, -421, -294,
	-292, -269, -261, 246, 76, 452, -310, -263, -248, -316,
	2, 452, -145, -146, -390, -390, -390, -147, -149, -149,
	-308, 2, 451, -186, -176, 451, -149, -188, 2, -391,
	-97, 261, -200, -274, -228, -227, 274, 251, -228, 258,
	452, -159, -185, -316, -316, 118, 30, 30, -316, -316,
	-326, 452, -316, -316, -254, 450, 5, -316, 452, 452,
	452, -316, 453, -434, -175, -316, 452, 452, 452, 452,
	455, 455, 452, 452, 452, 452, -321, 150, 109, 251,
	451, 452, 452, -323, 160, 49, -346, -323, -323, -276,
	-244, -346, -313, -381, -314, -185, 449, -385, -348, 451,
	453, 450, 2, 449, 452, -187, -187, -307, 120, -407,
	77, -409, 64, 133, 83, 245, 248, 398, 286, 61,
	102, 298, 34, 452, 452, 455, -159, -242, -244, 245,
	362, 102, 245, 102, 95, 393, -187, -194, -244, -244,
	-200, 126, 452, 455, 434, -204, -202, -390, 126, 452,
	-185, -391, -224, 182, -187, -404, -401, -402, 286, -408,
	-410, 133, 286, -97, 2, 451, -222, -271, -97, 261,
	450, 451, -175, 257, 451, -185, -170, 213, -471, -388,
	-167, -269, -300, 451, 257, -97, -240, 434, 452, 452,
	95, 95, -242, 451, 451, -244, 95, 452, -45, -46,
	179, 77, 278, -197, 369, 179, -159, -316, -316, -316,
	452, -240, -385, 444, -428, 274, 452, -316, -316, -317,
	150, 451, -326, -429, 421, -316, -254, -429, -429, 452,
	-340, -381, 2, 449, 2, -307, -194, -198, -191, -175,
	133, 165, 248, 208, 451, -317, -200, 451, 2, -462,
	104, 183, -306, -463, 82, 363, -344, 452, 452, 248,
	248, -316, -360, -164, -164, 452, 452, -316, 382, -384,
	81, -382, -316, 382, -225, -226, 172, -406, 208, -191,
	208, -461, 422, -220, -460, -63, -64, 383, -355, -242,
	-200, -242, 257, -471, -388, -168, 110, -244, 77, -294,
	-322, -147, 451, 451, 452, -242, -242, 452, 451, -147,
	455, 26, 451, 26, 451, -200, -215, 452, -240, 49,
	452, 452, -317, -326, 452, -430, -431, -190, -339, 450,
	2, -409, -191, 245, -316, -177, 451, -316, 183, 105,
	170, -224, 451, 298, -183, 64, 451, 451, 451, 434,
	150, 451, -460, 272, 451, 95, 242, 452, 34, -64,
	9, 452, -291, 452, -200, -388, -169, 402, 246, 452,
	-194, -269, -391, -391, -306, 452, 452, -391, -46, -244,
	-244, -435, 292, 321, 159, -254, 452, 455, 34, 120,
	452, -411, 230, -175, 452, 105, 170, -225, -244, -200,
	-449, 407, -198, -230, -229, -227, -232, -231, -227, -254,
	-382, 81, 272, -254, -200, -243, -345, -187, 95, -224,
	-97, -306, 451, -306, 451, -170, 343, -309, 452, 452,
	-224, -306, 452, 452, 452, 452, -436, -437, 41, 395,
	86, -316, -436, -436, -431, -433, 133, -412, -415, -414,
	257, 348, 151, 273, 452, 362, 418, -462, 452, -236,
	-316, 452, 455, 412, 452, 455, 412, 452, 150, 452,
	451, 452, 455, -225, -461, -224, -242, -224, -242, -262,
	-147, -147, -225, -224, -147, -437, 283, 146, 320, 283,
	146, -191, -414, 257, -415, 257, 402, 106, -411, -229,
	172, -231, 150, 272, -244, -345, -460, -225, 452, -225,
	452, -310, -225, 30, -413, 242, 311, 54, 343, -413,
	-412, 451, 451, 452, -467, 420, -306, -467, -306, -437,
	22, 248, 102, -462, -254, -254, -165, 54, 311, 2,
	-224, -224, 452, 452, -225, -225, -225, 382, -467, -467,
	451, -254, 452, -225,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 359, 360, 362,
	363, 364, 366, 367, 369, 371, 373, 375, 376, 378,
	380, 382, 383, 384, 385, 386, 388, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 450,
	0, 906, 908, 910, 912, 25, 26, 0, 0, 184,
	186, 188, 0, 213, 215, 217, 218, 220, -2, 0,
	313, 314, 316, 318, -2, -2, 0, 0, 437, 439,
	0, 0, 0, 459, 460, 0, 996, -2, 453, 455,
	457, 520, 522, 524, 526, 528, 530, 532, 533, 535,
	537, 539, 541, 543, 545, 547, 549, 551, 553, 555,
	557, 559, 561, 563, 565, 567, 569, -2, -2, -2,
	0, -2, -2, -2, 924, 29, 31, 33, 35, 37,
	39, 58, 269, 270, 272, 274, 276, 279, 280, 282,
	1035, 320, 322, 324, 326, 328, 0, -2, 1047, 0,
	0, 41, 42, 43, 44, 45, 46, 47, 48, 65,
	66, 67, 68, 69, 70, 71, 72, 51, 53, 54,
	60, 61, 63, 0, 0, 1011, 1013, 1015, 1017, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	361, 365, 368, 370, 372, 374, 377, 379, 381, 387,
	389, 391, 801, 1639, 1653, 1654, 1655, 1658, 1659, 1660,
	1661, 1662, 1663, 1993, 2073, 2074, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	0, 415, 413, 1633, 416, 1829, 418, 420, 307, 308,
	309, 310, 311, 312, 0, 430, 424, 429, 431, 433,
	434, 435, 436, 410, 408, 0, 430, 1685, 428, 904,
	905, 899, 900, 1862, 934, 449, -2, -2, -2, 1962,
	-2, 481, -2, 488, 1965, 1864, 491, 0, 493, -2,
	496, 907, 909, 911, 27, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, -2, -2, -2, -2,
	0, 0, 1720, 1609, 1655, 1612, 1607, 185, 187, 189,
	190, 0, 0, 0, 0, 0, 0, 214, 216, 219,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 708, 709,
	0, 0, 714, 852, 853, 874, 0, 0, 0, 0,
	315, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 0, 0, 0, 247, 353,
	354, 0, 1036, 0, 0, 0, 0, 165, 156, 0,
	0, 697, 438, 440, 0, 151, 0, 0, 903, 0,
	167, 0, 0, 454, 456, 458, 521, 523, 525, 527,
	529, 531, 534, 536, 538, 540, 542, 544, 546, 548,
	550, 552, 554, 556, 558, 560, 562, 564, 566, 568,
	570, 571, 0, 0, 0, 0, -2, -2, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 574, 576, 577, 578, 0, 624, 627, 635, 0,
	843, 1037, 936, 914, 927, 936, 916, 917, 918, 919,
	920, 925, 926, 929, 0, 921, 922, 923, 30, 32,
	34, 36, 38, 40, 271, 273, 275, 277, 281, 283,
	-2, 1009, 1010, 321, 323, 325, 327, 329, 441, 0,
	443, 0, 575, 1000, 0, -2, 0, 1041, 1041, 1041,
	0, 0, 1010, 1008, 0, 446, 447, 500, 501, 1272,
	0, 0, 0, 0, 0, 1507, 1356, 0, 502, -2,
	1387, 1389, 1941, 1962, 1506, 1391, 1392, 1393, 1394, 1395,
	0, 0, 1398, 0, 1400, 1401, 1402, 1403, 0, 1405,
	0, 1409, 1410, 1411, 0, 1946, 1586, 1651, -2, 1177,
	1178, 1179, 1180, 1181, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1647, 0, 1478, 1425, -2, 1672, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1729, -2, -2, -2, -2, -2, -2, -2, 1233, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1976, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 0, 1930,
	1947, 1948, 1953, 1955, 1949, 1938, 1448, -2, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1234, -2, 1942, 1943, 1958, 1959, 1964,
	1969, 1970, 1945, 1954, -2, -2, 1027, 1837, 1030, 801,
	1028, 1012, 1014, 0, 1016, 0, 0, 0, 1021, 1044,
	1042, 0, 1078, 1025, 1026, 1036, 1096, 1119, 0, 1101,
	0, 1119, 1145, 0, 1106, 1857, 1426, 1427, 0, 1655,
	1652, -2, 0, 0, 0, 0, 0, 0, 210, 411,
	0, 417, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 933, 451, 452, 0, 476, 0, 480, 1937, -2,
	-2, 484, 937, 941, 942, 943, 944, 0, 0, 0,
	0, 0, 490, 0, 0, 477, 478, 494, 497, 0,
	49, 0, 1947, 1145, 50, 0, 1623, 1677, 1678, 1679,
	1680, 1681, 1976, 1992, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 52, 0, 1947, 55, 0, 1947, 0,
	-2, 59, 0, 1947, 168, 169, 1668, 1669, 1673, 1674,
	1675, 1676, 62, 0, 1629, 64, 0, 1626, 73, 0,
	1947, 0, 1606, -2, 0, 0, 689, 1603, 1608, 690,
	1613, 0, 191, 192, 193, 194, 195, 1947, 197, 198,
	0, 200, 201, 1947, 203, 204, 0, 206, 222, 223,
	0, 225, 0, 1947, 0, 0, 0, 231, -2, 248,
	0, 245, 0, 235, 236, 238, 239, 240, 241, 242,
	0, 0, 0, 858, 287, 285, 1634, 0, -2, 1947,
	846, 849, 1947, 851, 863, 1637, 0, -2, 0, 1034,
	1947, 951, 710, 711, 712, 713, 0, 306, 0, 964,
	0, 966, 0, 986, 1151, 1096, 249, 250, 251, 252,
	253, 1947, 0, 0, 0, 258, 0, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 144, 1947, 332, 351,
	144, 1947, 335, 144, 1947, 338, 144, 1947, 341, 1601,
	144, 1947, 344, 345, 1947, 347, 170, 348, 1947, 350,
	0, -2, 404, 1641, -2, 356, 0, -2, 0, 182,
	0, 0, 695, 696, 0, 901, 902, 0, 0, 461,
	0, 0, 572, 573, 0, 0, 583, 584, 585, 586,
	1835, 1744, 589, 0, 592, -2, 0, 0, 0, 596,
	0, 600, 601, 602, 0, 694, 604, 0, 0, 606,
	0, 610, 0, 613, 0, 615, 0, 617, -2, -2,
	-2, 0, 0, 0, 0, 643, 644, 0, 649, 0,
	652, 653, 654, 0, 656, 657, 658, 659, 0, 661,
	662, -2, -2, 666, 668, 0, 675, 0, 680, 0,
	579, 580, 144, 1149, 913, -2, 915, 0, 931, 1003,
	-2, 0, 442, 0, 445, 1007, 1001, 1006, 1056, 1057,
	0, 0, 0, 0, 1039, 1040, 0, 0, 0, 998,
	999, 0, 0, 0, 0, 1512, 1513, 1514, 1515, 1516,
	1517, 1520, 1521, 1518, 1519, 1522, 1523, 0, 0, 0,
	0, 0, 1524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1525, 1526, 1527, 0, 0, 1529,
	0, 1531, 0, 0, 0, 0, 0, 0, 1335, 1337,
	1594, 0, 0, 1528, 1277, 1278, 1279, 1314, 1315, 0,
	0, 1388, 1591, 1590, 1390, 0, 1543, 0, 1397, 0,
	1269, 1404, 1620, -2, 0, 1507, 1538, 0, 0, 1412,
	1413, 1414, 0, 0, 1543, 0, 0, 1585, 0, 1480,
	0, 1213, 0, 1214, 1215, 0, 1216, 1217, 1230, 1243,
	0, 0, 0, 0, 1247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1235, 0, 0, 0, 1566, -2, 0, 0, 0,
	0, 0, 1029, 0, 0, 1082, 1595, 1599, 1600, 1082,
	1082, 0, 0, 1544, 1142, 1142, 0, 0, 1138, 1138,
	1138, 1136, 1113, 0, 392, 394, 396, 398, 399, 400,
	402, 1119, 0, 1129, 0, 1119, 1119, 0, -2, 1101,
	0, 0, 1129, 1146, 1147, 0, 0, 0, 0, 0,
	0, 1656, 0, 0, 0, 1643, 0, 0, 0, 422,
	432, 1036, 0, 1546, 1168, 1162, 1171, 1172, 1173, 1174,
	1220, 1221, 1222, 1223, 1224, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, -2, 1231, 1233, 1254, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1226, 0, 1201,
	1201, 1201, 1218, 1219, 1242, 1253, 1245, 1253, 1249, 1169,
	1170, 1236, 1237, 1238, 1239, 0, 426, 0, 0, 0,
	0, -2, 486, 0, 939, 0, 945, 511, 512, 513,
	947, 948, 0, 489, 514, 515, 516, 517, 518, 519,
	0, 818, 0, 820, 1615, 0, 487, 504, 492, 0,
	498, 74, 896, 110, 0, 896, 896, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 98, 106, 86, 87,
	0, 0, 0, 0, 56, 826, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	97, 0, 92, 76, 0, 0, 0, 100, 108, 0,
	135, 137, 0, 0, 1132, 152, 0, 688, 0, 0,
	1656, 1611, 0, 0, 0, 0, 224, 226, 0, 228,
	229, 230, 0, 857, 0, 237, 234, 278, 775, 1947,
	825, 1947, 823, 1638, 0, 0, 0, 304, 299, 0,
	301, 844, 0, 1033, 0, 0, 0, 0, 864, 0,
	1947, 869, 1625, 1664, 1665, 953, 0, 1157, 0, 967,
	0, 0, 1152, 0, 1154, 0, 255, 256, 257, 0,
	330, 0, 142, 143, 0, 333, 0, 336, 0, 339,
	0, 0, 342, 0, 0, 0, 0, 1036, 0, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 182, 154,
	182, 182, 1132, 463, 1132, 465, 0, 0, 587, 588,
	590, 591, 593, 594, -2, -2, 676, 646, 0, 0,
	0, 645, 603, 0, 682, 1853, 692, 605, 1720, 608,
	1720, 611, 1720, 614, 616, 619, 638, 626, 0, 630,
	0, 632, 0, 634, 646, 647, 650, 655, 660, 0,
	0, 0, 0, 0, 842, 0, 930, 1004, 1006, 444,
	1002, 1054, 1055, 1060, 1064, 1065, 1068, 1071, 1072, 1062,
	1272, 1022, 1023, 1024, 1048, 1049, 883, 0, 2073, 1273,
	1163, 1274, 1275, 1622, 0, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, -2, -2, -2, -2, -2,
	-2, -2, -2, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, -2, -2, -2, 1312, 1313, -2,
	1530, 1532, 0, 1594, 0, -2, 0, -2, -2, -2,
	-2, 1332, 0, 1334, 1339, 1341, 1343, 0, 0, 0,
	0, 1593, 1353, 1577, 1578, 0, 0, 1509, 1510, 1511,
	1338, 0, 1357, 1592, 1589, 0, 0, 1542, 1047, 1416,
	0, 0, 0, 0, 1423, 0, 1621, 1268, 1255, 1256,
	1257, 1258, 1259, 1260, 1270, 1408, 1540, 0, 1539, 0,
	0, 0, 1550, 0, 1584, 1580, 0, 1644, 1650, 1488,
	0, 0, 0, 0, 1618, 0, 0, 0, 0, 0,
	0, 0, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1553, -2, -2, -2, -2, -2, -2,
	-2, 0, 1462, 0, 1464, 1544, 1563, 0, 0, 1358,
	0, 0, 0, 1507, 0, 1467, 1544, 1571, 0, 0,
	0, 0, 0, 1544, 0, 1576, 0, 1474, 0, 1476,
	1031, 0, 0, 1157, 0, 0, 0, 1598, 1157, 1157,
	0, 1077, 0, 0, 1139, 1140, 1141, 0, 0, 1142,
	0, 1133, 1137, 1134, 1135, 0, 0, 1119, 393, 395,
	397, 401, 403, 1129, 1093, 0, 0, 1624, 1099, 1128,
	0, 801, 1118, 1129, 1129, 0, -2, 1103, 0, 0,
	1047, -2, 183, 800, 0, 0, 0, 0, 412, 414,
	0, 0, 406, 0, 409, 0, 1158, 1161, 0, 1175,
	0, 0, -2, 0, 0, 0, 0, 0, 479, 0,
	938, 946, 0, 508, 0, 510, 0, 819, 1617, 1616,
	0, 499, 0, 0, 0, 0, 895, 114, 1947, 0,
	146, 0, 0, 769, 1630, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 88, 0, 0, 0, 0, 0, 0, 0, 827,
	828, 830, 836, 838, 0, 832, 1619, 0, 833, 0,
	835, 837, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 89, 0, 0, 0, 0, 1605,
	173, 1131, 0, 1604, 1614, 0, 196, 199, 202, 205,
	0, 232, 0, 0, 717, 700, 0, 821, 824, 0,
	801, 856, 1636, 0, 286, 182, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 862, 0, 0, 0, 1947,
	955, 961, 0, 1047, 1156, 0, 984, 969, 0, 0,
	0, 984, 988, 989, 991, 992, 0, 0, 1153, 0,
	259, 352, 144, 144, 144, 1602, 144, 144, 171, 346,
	349, 355, 405, 1036, 182, 180, 1815, 178, 175, 177,
	0, 0, 0, 718, 720, 721, 722, 723, 0, 1665,
	0, 1773, 1665, 0, 972, 974, 0, 149, 182, 0,
	0, 298, 462, 467, 581, 0, 621, 640, 595, 597,
	598, 599, 693, 691, 607, 609, 612, 629, 0, 0,
	0, 642, 0, 0, 0, 0, 0, 677, 678, 679,
	681, 1150, 1005, 0, 1066, 0, 1063, 1069, 1070, 0,
	1051, 881, 882, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 1354, 0, -2, 1333, 1336, 1340, 1342, 1344,
	0, 0, 0, 0, 0, 0, 1533, 0, 1535, 1355,
	1587, 1590, 1505, 0, 0, 1046, 1047, 1047, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 1541, 0, 1548,
	1549, 0, 1415, 0, 1581, 0, 0, 0, 1424, 0,
	0, 0, 1225, 1199, 0, 1253, 1251, 1252, 1246, 1253,
	1250, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	1447, 1459, 0, 1461, 1463, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1361, 1362, 1363, 1466, 1569, 1570, 0, 0, 0,
	0, 0, 0, 1472, 0, 1575, 1473, 1475, 1036, 1079,
	1074, 1596, 1132, 1081, 1083, 1597, 1627, 1074, 1074, 0,
	1545, 0, 0, 1123, 0, 0, 0, 1125, 0, 1114,
	0, 1116, 1129, 1098, 0, 0, 1091, 0, 1087, 1088,
	1089, 1090, 801, 1127, 1100, 1104, 1644, 0, 1148, 0,
	1108, 1111, 0, 0, 1657, 207, 211, 212, 208, 209,
	421, 0, 0, 1547, 0, 1164, 0, 0, 0, 0,
	0, 425, 0, 475, -2, 506, 507, 509, 0, 505,
	111, 896, 0, 0, 887, 0, 116, 1947, 125, 0,
	746, 0, 1628, 0, 0, 0, 0, 898, 0, 1947,
	144, 1947, 144, 127, 130, 0, 134, 132, 0, 0,
	737, 75, 896, 78, 82, 90, 0, 0, 0, 96,
	0, 0, 889, 0, 831, 834, 840, 57, 0, 891,
	885, 0, 884, 136, 80, 84, 91, 0, 893, 77,
	0, 182, 0, 153, 1610, 0, 0, 0, 0, 0,
	716, 786, 0, 0, 0, 0, 0, 0, 292, 288,
	0, 297, 303, 302, 847, -2, 850, 859, 0, 861,
	873, 0, 0, 0, 957, 961, 0, 960, 1034, 1059,
	1155, 962, 984, 0, 0, 0, 971, 968, 965, 1157,
	0, 0, 0, 0, 0, 254, 331, 334, 337, 340,
	343, 357, 157, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 1665, 1665, 0, 1632, 0, 0,
	0, 0, 150, 155, 0, 464, 0, 0, 631, 633,
	646, 669, 670, 732, 0, 732, 0, 0, 1050, 883,
	0, 1276, 1317, 0, 0, -2, 0, 0, 1321, 0,
	0, 0, -2, 0, 0, 0, 1534, 1536, 0, 1589,
	1417, 0, 0, 0, 1421, 1399, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 0, 1406, 1407, 1508, 1551, 1579, 1583,
	0, 1645, 1649, 1486, 1487, 1491, 1635, 0, 0, 0,
	1244, 1248, 1428, 0, 0, 0, 0, 0, 0, 0,
	1552, 1562, 1564, 1359, 1360, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, -2, -2, -2, 1377, 1378,
	1379, -2, -2, -2, 0, 0, 0, 1565, 1567, 1568,
	1572, 1573, 0, 1469, 1470, 1471, 1574, 0, 1076, 0,
	1080, 0, 1076, 1076, 1043, 1121, 0, 0, 1144, 0,
	1096, 1115, 0, 1105, 1094, 0, 1095, 0, 1126, 0,
	1102, 1107, 0, 1110, 0, 1417, -2, 423, 407, 0,
	0, 1166, 1176, 0, 1228, 1232, 427, 1130, 0, 0,
	0, 0, 145, 744, 768, 0, 0, 876, 883, 0,
	0, 118, 0, 0, 0, 126, 0, 123, 0, 129,
	133, 0, 0, 0, 0, 0, 93, 94, 95, 0,
	99, 101, 0, 0, 0, 0, 0, 0, 147, 0,
	227, 855, 233, 726, 774, 0, 776, 0, 701, 0,
	775, 825, 0, 284, 0, 291, 0, 845, 860, 0,
	0, 0, 0, 0, 959, 961, 0, 952, 953, 984,
	1058, 963, 982, -2, 981, 0, 1047, 990, 987, 993,
	994, 0, 179, 0, 174, 176, 0, 160, 0, 0,
	719, 724, 0, 0, 0, 0, 0, 973, 975, 0,
	166, 0, 582, 641, 671, 731, 0, 0, 673, 1061,
	1067, 1052, 883, 1319, 1323, 0, 0, 0, 1325, -2,
	0, 1347, -2, -2, 1537, 1588, 1396, 1047, 1418, 1420,
	1271, 1582, 0, 1493, 1490, 0, 1477, 1200, 1438, 1439,
	0, 0, 1442, 1444, 1445, 1446, 1561, 0, 0, 0,
	0, 1468, 1032, 1482, 0, 0, 1084, 1482, 1482, 1122,
	0, 1124, 1119, 1117, 1092, 1085, 0, 1645, 1109, 0,
	0, 1159, 1165, 0, 1227, 112, 113, 115, 0, 745,
	0, 748, 0, 0, 0, 0, 755, 756, 0, 0,
	0, 0, 0, 790, 799, 0, 878, 0, 0, 0,
	120, 139, 0, 0, 897, 0, 144, 144, 0, 0,
	888, 0, 0, 0, 0, 890, 892, 886, 0, 0,
	894, 172, 734, 0, 786, 778, 779, 780, 0, 785,
	787, 0, 0, 705, 702, 717, 700, 822, 854, 0,
	289, 0, 872, 0, 0, 0, 949, 961, 0, 954,
	955, 305, 0, 0, 0, 970, 1059, 0, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 182, 466, 468,
	0, 0, 474, 730, 0, 0, 1053, 1327, -2, -2,
	1348, 0, 1646, 1648, 1047, 0, 1479, 0, 0, -2,
	0, 0, 0, 1018, 0, 1075, 1073, 1019, 1020, 1143,
	1129, 0, 1112, 0, 1167, 117, 0, 749, 750, 1631,
	752, 0, 754, 757, 0, 759, 1667, 0, 763, 770,
	791, 0, 726, 0, 796, 797, 877, 772, 0, 119,
	121, 138, 880, 122, 128, 0, 0, 79, 0, 0,
	1714, 103, 81, 0, 700, 733, 0, 777, 0, 788,
	789, 703, 0, 0, 0, 290, 293, 0, 296, 0,
	873, 0, 0, 0, 956, 957, 0, 0, 0, 984,
	995, 159, 0, 0, 799, 0, 0, 767, 0, 164,
	0, 470, 0, 472, 0, 672, 674, 1419, 1497, 0,
	1440, 1441, -2, 0, 1385, 1481, 1483, 0, 1097, 1086,
	1160, 747, 751, 0, 0, 805, 0, 0, 0, 794,
	795, 734, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 706, 0, 726, 0, 294,
	295, 799, 0, 799, 0, 958, 959, 0, 977, 978,
	980, 985, 0, 0, 726, 799, 766, 0, 469, 0,
	0, 0, 0, 0, 0, 1492, 1386, 0, 0, 0,
	758, 810, 0, 0, 0, 792, 793, 790, 0, 801,
	124, 0, 879, 0, 738, 0, 0, 741, 0, 0,
	104, 1714, 102, 0, 0, 0, 782, 784, 707, 734,
	705, 726, 0, 726, 0, 950, 0, 979, 182, 182,
	734, 726, 182, 471, 473, 1489, 1494, 1498, -2, 1910,
	1717, 0, 1495, 1496, 1484, 1485, 0, 760, 806, 807,
	0, 802, 803, 804, 1666, 761, 762, 771, 798, 805,
	140, 735, 0, 0, 736, 0, 0, 107, 0, 109,
	0, 781, 0, 700, 704, 734, 0, 734, 0, 1157,
	161, 162, 764, 734, 163, 0, 1500, 1501, 1502, 1503,
	1504, 753, 808, 0, 809, 0, 0, 0, 810, 739,
	0, 742, 0, 105, 0, 783, 699, 870, 799, 870,
	799, 976, 765, 0, 811, 0, 814, 815, 0, 812,
	790, 0, 0, 729, 865, 0, 726, 867, 726, 1499,
	813, 816, 817, 773, 0, 0, 725, 727, 728, 871,
	734, 734, 734, 0, 870, 870, 740, 0, 866, 868,
	0, 0, 734, 743,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 440, 3, 446, 441, 3,
	451, 452, 444, 442, 455, 443, 453, 445, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 459, 3,
	432, 434, 433, 436, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 449, 3, 450, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 457, 439, 458, 437,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 435,
	57775, 438, 57776, 448, 57777, 454, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1062
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1076
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1077
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1082
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1098
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1181
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1185
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1189
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1231
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1264
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1288
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1297
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1312
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1326
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1340
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1350
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1361
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1368
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1380
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1395
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1404
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1423
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1432
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1452
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1481
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1486
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1533
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1548
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1553
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1558
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1563
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1606
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1639
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1646
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1745
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1775
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1836
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1845
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1851
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1856
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1861
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1866
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1871
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1875
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1894
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1902
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1948
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1972
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1985
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1986
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1987
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1988
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2006
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2011
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2087
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2091
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2095
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2116
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2121
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2137
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2141
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2142
		{
			return unimplemented(sqllex, "create cast")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2143
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2146
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2147
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "create operator")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "create publication")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "create rule")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplemented(sqllex, "create server")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2164
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2165
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2168
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2173
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2176
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2177
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2178
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2181
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2182
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2183
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "drop server")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2199
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2200
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2204
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2205
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2217
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2314
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2324
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2349
		{

			sqlVAL.union.val = nil
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2363
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2373
		{
			return helpWith(sqllex, "DELETE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2383
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2385
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2386
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2387
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2399
		{
			return helpWith(sqllex, "DROP")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2402
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2404
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2405
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2406
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2421
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2429
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2444
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2451
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2505
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2531
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2536
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2586
		{
			return helpWith(sqllex, "DELETE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "INSERT")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2591
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2598
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2603
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2610
		{
			return helpWith(sqllex, "DELETE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2612
		{
			return helpWith(sqllex, "INSERT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2645
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2661
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2678
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2716
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2790
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2818
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2819
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2845
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2859
		{
			return helpWith(sqllex, "USE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2864
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2865
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2866
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2871
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "USE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2906
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3012
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3021
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3069
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3082
		{
			return unimplemented(sqllex, "set from current")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3091
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3096
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3103
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3107
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3113
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3124
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3155
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3177
		{
			sqlVAL.union.val = tree.Low
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = tree.Normal
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = tree.High
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3213
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3227
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3228
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3229
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3234
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3236
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3246
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3250
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3261
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.str = "client_encoding"
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.str = "timezone"
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3294
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3309
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3332
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3340
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3347
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3357
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3361
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3364
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3380
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3410
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3423
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3431
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3444
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3455
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3457
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3461
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3464
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3472
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3475
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3477
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3491
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3493
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3496
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = true
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3502
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = false
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3515
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3518
		{
			sqlVAL.union.val = true
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.union.val = false
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3531
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3536
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3538
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3542
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = true
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3546
		{
			sqlVAL.union.val = false
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3557
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3562
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3596
		{
			sqlVAL.union.val = true
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3597
		{
			sqlVAL.union.val = false
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3604
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3608
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3611
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3632
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3644
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3649
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3654
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3658
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3666
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3670
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3674
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3690
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3698
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3701
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3705
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3713
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3721
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3736
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3758
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3763
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3767
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3770
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3774
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3781
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3786
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3906
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3910
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3914
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3953
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3957
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3962
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3966
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3975
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3982
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3986
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3998
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4010
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4046
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4058
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4071
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4072
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4073
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4077
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4088
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4100
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4101
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4102
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4116
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4117
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4118
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4119
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4120
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4121
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4122
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4123
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4144
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4153
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4157
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4166
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4173
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4178
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4183
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4189
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4196
		{
			sqlVAL.str = ""
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4203
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4216
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4223
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4239
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4249
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4259
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4273
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4288
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4344
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4360
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4370
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4374
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 764:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4446
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4457
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4467
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4481
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4491
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4501
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4516
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4529
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4540
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4556
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4560
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4566
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4570
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4576
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4581
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4582
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4583
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4584
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4585
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4586
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4603
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4607
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4645
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4658
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4670
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4674
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4680
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4686
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4694
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4698
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4702
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4706
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4710
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4720
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4745
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4750
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4754
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4758
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4765
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4766
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4769
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4770
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4775
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4780
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4782
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4783
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4785
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4798
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4810
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4813
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = nil
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4831
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4835
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4838
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4843
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4844
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4852
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4860
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4861
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4864
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4865
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4871
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4873
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4875
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4877
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4879
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4881
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4897
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4911
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4926
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4940
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4954
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4957
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4958
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4962
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = false
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = true
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = false
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4993
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5006
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5017
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5018
		{
			sqlVAL.str = ""
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.union.val = tree.Descending
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5036
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5043
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5047
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5053
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5059
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5067
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5073
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5081
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5087
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5095
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5099
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5104
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5105
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5108
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5109
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5117
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5120
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5130
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5142
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5150
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5153
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5157
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5158
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5159
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5175
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5178
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5183
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5196
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5198
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5201
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5205
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5210
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5211
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5212
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5220
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5227
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5230
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5231
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5235
		{
			sqlVAL.str = ""
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.str = ""
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5253
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5263
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5267
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5277
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5290
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5292
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5296
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5327
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5331
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 949:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5361
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5365
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.str = ""
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5375
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5379
		{
			sqlVAL.str = ""
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.str = ""
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5395
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5399
		{
			sqlVAL.str = ""
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5404
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5405
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5431
		{
			return helpWith(sqllex, "INSERT")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5442
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5449
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5453
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5462
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5483
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5507
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5511
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5515
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5521
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5524
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5525
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5533
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 985:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5571
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5574
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5577
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5583
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5600
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5603
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5607
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5650
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5656
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5660
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5675
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5679
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5683
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5700
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5701
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5706
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5741
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5742
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5743
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5778
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5792
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5804
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5841
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5848
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5860
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5864
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5868
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5890
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5891
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5895
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = nil
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5904
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5905
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5909
		{
			sqlVAL.union.val = true
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5913
		{
			sqlVAL.union.val = false
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.union.val = false
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = true
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5929
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5934
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5935
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5939
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5943
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5949
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5955
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5969
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5974
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5989
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6013
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6022
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6028
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6042
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6065
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6066
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6069
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6070
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6087
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6097
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6123
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6125
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6137
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6140
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6158
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6162
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6167
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6172
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6183
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6195
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6206
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6210
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6214
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6222
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6253
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6267
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6294
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6302
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6313
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6365
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6367
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = nil
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6371
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6386
		{
			sqlVAL.union.val = true
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6390
		{
			sqlVAL.union.val = false
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6436
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6447
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.str = tree.AstFull
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.str = tree.AstRight
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.str = tree.AstInner
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6484
		{
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6485
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6506
		{
			sqlVAL.str = tree.AstHash
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6510
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6518
		{
			sqlVAL.str = ""
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6535
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6547
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6552
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6570
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6576
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6584
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6601
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6613
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6626
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6634
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6635
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6656
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6657
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6659
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6667
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6668
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6679
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6680
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6697
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6701
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6705
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = types.String
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = types.Name
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6742
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = types.INet
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = types.Oid
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6770
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6801
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6809
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = nil
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6828
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = types.Int2
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = types.Int2
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = types.Int4
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = types.Int
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = types.Int
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.union.val = types.Int
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = types.Float4
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.union.val = types.Float4
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = types.Float
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = types.Float
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6876
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6884
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6892
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = types.Bool
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.union.val = types.Bool
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6915
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6919
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = types.RegType
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6933
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = types.Float
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6952
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6958
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6980
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7002
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = types.String
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7019
		{
			sqlVAL.union.val = true
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = false
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = types.Date
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7029
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7034
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7041
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7042
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7044
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7052
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7068
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = true
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = false
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = false
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = types.Interval
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = tree.Year
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = tree.Month
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = tree.Day
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = tree.Month
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7146
		{
			sqlVAL.union.val = nil
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = tree.Second
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7155
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7202
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7446
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7512
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7534
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7728
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7733
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7742
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7744
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7760
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7769
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7797
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7805
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7808
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7819
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7820
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7835
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7846
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7882
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7890
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7958
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7960
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7963
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7968
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7970
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7973
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7978
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7983
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7988
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7993
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7995
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8002
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8003
		{
			return unimplemented(sqllex, "treat")
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8024
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8029
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8034
		{
			return unimplemented(sqllex, "within group")
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8035
		{
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8070
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.str = ""
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8161
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8174
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8248
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = tree.Any
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = tree.Some
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = tree.All
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8275
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = tree.Div
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = tree.LT
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = tree.GT
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = tree.LE
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = tree.GE
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = tree.NE
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = tree.Like
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8328
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8394
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8440
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8465
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8504
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8516
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8520
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8582
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8593
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8608
		{
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8609
		{
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8613
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8617
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8632
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8636
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8681
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8689
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8712
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8725
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8729
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8733
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8739
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8751
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8755
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8764
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8775
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8784
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8792
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8889
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8896
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8900
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8904
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8918
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8922
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8926
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8939
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8957
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8970
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8977
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.str = ""
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9008
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9012
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
