// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:557
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PGCOPY = lex.PGCOPY
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PGCOPY",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8300

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	426, 57,
	-2, 896,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	167, 733,
	-2, 0,
	-1, 60,
	101, 896,
	173, 896,
	374, 896,
	375, 896,
	-2, 0,
	-1, 74,
	113, 870,
	127, 870,
	181, 870,
	207, 870,
	238, 870,
	246, 870,
	371, 870,
	-2, 859,
	-1, 110,
	197, 550,
	361, 550,
	-2, 0,
	-1, 115,
	4, 898,
	20, 898,
	21, 898,
	22, 898,
	23, 898,
	25, 898,
	30, 898,
	35, 898,
	36, 898,
	37, 898,
	38, 898,
	39, 898,
	40, 898,
	41, 898,
	42, 898,
	43, 898,
	44, 898,
	46, 898,
	47, 898,
	48, 898,
	49, 898,
	50, 898,
	51, 898,
	54, 898,
	55, 898,
	56, 898,
	58, 898,
	59, 898,
	63, 898,
	64, 898,
	65, 898,
	66, 898,
	67, 898,
	69, 898,
	70, 898,
	71, 898,
	72, 898,
	74, 898,
	76, 898,
	77, 898,
	80, 898,
	81, 898,
	82, 898,
	90, 898,
	91, 898,
	92, 898,
	93, 898,
	94, 898,
	95, 898,
	96, 898,
	97, 898,
	99, 898,
	101, 898,
	103, 898,
	106, 898,
	107, 898,
	109, 898,
	110, 898,
	114, 898,
	115, 898,
	116, 898,
	117, 898,
	118, 898,
	119, 898,
	120, 898,
	121, 898,
	122, 898,
	123, 898,
	124, 898,
	132, 898,
	133, 898,
	134, 898,
	135, 898,
	136, 898,
	138, 898,
	140, 898,
	144, 898,
	146, 898,
	147, 898,
	149, 898,
	151, 898,
	152, 898,
	153, 898,
	154, 898,
	155, 898,
	156, 898,
	157, 898,
	158, 898,
	159, 898,
	162, 898,
	163, 898,
	168, 898,
	169, 898,
	170, 898,
	173, 898,
	174, 898,
	175, 898,
	176, 898,
	177, 898,
	178, 898,
	179, 898,
	180, 898,
	182, 898,
	184, 898,
	187, 898,
	188, 898,
	189, 898,
	191, 898,
	192, 898,
	195, 898,
	196, 898,
	197, 898,
	199, 898,
	200, 898,
	202, 898,
	204, 898,
	205, 898,
	208, 898,
	209, 898,
	212, 898,
	214, 898,
	217, 898,
	218, 898,
	219, 898,
	220, 898,
	221, 898,
	222, 898,
	223, 898,
	225, 898,
	226, 898,
	227, 898,
	228, 898,
	233, 898,
	234, 898,
	235, 898,
	236, 898,
	237, 898,
	239, 898,
	240, 898,
	242, 898,
	243, 898,
	244, 898,
	247, 898,
	248, 898,
	250, 898,
	252, 898,
	253, 898,
	254, 898,
	255, 898,
	256, 898,
	257, 898,
	258, 898,
	259, 898,
	260, 898,
	262, 898,
	263, 898,
	264, 898,
	265, 898,
	266, 898,
	268, 898,
	269, 898,
	270, 898,
	271, 898,
	272, 898,
	273, 898,
	274, 898,
	275, 898,
	277, 898,
	278, 898,
	279, 898,
	280, 898,
	281, 898,
	283, 898,
	284, 898,
	285, 898,
	286, 898,
	287, 898,
	288, 898,
	289, 898,
	291, 898,
	293, 898,
	294, 898,
	295, 898,
	296, 898,
	297, 898,
	298, 898,
	300, 898,
	301, 898,
	302, 898,
	303, 898,
	304, 898,
	305, 898,
	306, 898,
	308, 898,
	309, 898,
	310, 898,
	311, 898,
	312, 898,
	313, 898,
	314, 898,
	315, 898,
	316, 898,
	318, 898,
	319, 898,
	320, 898,
	321, 898,
	323, 898,
	324, 898,
	325, 898,
	326, 898,
	328, 898,
	329, 898,
	330, 898,
	331, 898,
	332, 898,
	333, 898,
	334, 898,
	335, 898,
	336, 898,
	337, 898,
	338, 898,
	339, 898,
	341, 898,
	342, 898,
	344, 898,
	345, 898,
	346, 898,
	347, 898,
	348, 898,
	349, 898,
	350, 898,
	351, 898,
	352, 898,
	353, 898,
	355, 898,
	356, 898,
	357, 898,
	358, 898,
	361, 898,
	362, 898,
	363, 898,
	364, 898,
	366, 898,
	367, 898,
	369, 898,
	370, 898,
	373, 898,
	374, 898,
	375, 898,
	376, 898,
	378, 898,
	380, 898,
	381, 898,
	382, 898,
	383, 898,
	384, 898,
	385, 898,
	388, 898,
	389, 898,
	394, 898,
	395, 898,
	396, 898,
	397, 898,
	398, 898,
	399, 898,
	-2, 0,
	-1, 136,
	113, 869,
	127, 869,
	181, 869,
	207, 869,
	238, 869,
	246, 869,
	371, 869,
	-2, 862,
	-1, 141,
	1, 792,
	187, 792,
	268, 792,
	272, 792,
	425, 792,
	426, 792,
	-2, 0,
	-1, 143,
	1, 792,
	425, 792,
	426, 792,
	-2, 0,
	-1, 144,
	1, 792,
	425, 792,
	426, 792,
	-2, 0,
	-1, 145,
	1, 796,
	425, 796,
	426, 796,
	-2, 0,
	-1, 171,
	4, 905,
	5, 905,
	6, 905,
	7, 905,
	8, 905,
	9, 905,
	20, 905,
	21, 905,
	22, 905,
	23, 905,
	25, 905,
	30, 905,
	31, 905,
	35, 905,
	36, 905,
	37, 905,
	38, 905,
	39, 905,
	40, 905,
	41, 905,
	42, 905,
	43, 905,
	44, 905,
	46, 905,
	47, 905,
	48, 905,
	49, 905,
	50, 905,
	51, 905,
	52, 905,
	53, 905,
	54, 905,
	55, 905,
	56, 905,
	58, 905,
	59, 905,
	61, 905,
	63, 905,
	64, 905,
	65, 905,
	66, 905,
	67, 905,
	69, 905,
	70, 905,
	71, 905,
	72, 905,
	74, 905,
	76, 905,
	77, 905,
	79, 905,
	80, 905,
	81, 905,
	82, 905,
	83, 905,
	84, 905,
	85, 905,
	86, 905,
	87, 905,
	88, 905,
	89, 905,
	90, 905,
	91, 905,
	92, 905,
	93, 905,
	94, 905,
	95, 905,
	96, 905,
	97, 905,
	98, 905,
	99, 905,
	101, 905,
	103, 905,
	106, 905,
	107, 905,
	109, 905,
	110, 905,
	114, 905,
	115, 905,
	116, 905,
	117, 905,
	118, 905,
	119, 905,
	120, 905,
	121, 905,
	122, 905,
	123, 905,
	124, 905,
	125, 905,
	126, 905,
	132, 905,
	133, 905,
	134, 905,
	135, 905,
	136, 905,
	138, 905,
	140, 905,
	143, 905,
	144, 905,
	146, 905,
	147, 905,
	149, 905,
	151, 905,
	152, 905,
	153, 905,
	154, 905,
	155, 905,
	156, 905,
	157, 905,
	158, 905,
	159, 905,
	160, 905,
	162, 905,
	163, 905,
	168, 905,
	169, 905,
	170, 905,
	172, 905,
	173, 905,
	174, 905,
	175, 905,
	176, 905,
	177, 905,
	178, 905,
	179, 905,
	180, 905,
	182, 905,
	184, 905,
	185, 905,
	186, 905,
	187, 905,
	188, 905,
	189, 905,
	190, 905,
	191, 905,
	192, 905,
	195, 905,
	196, 905,
	197, 905,
	199, 905,
	200, 905,
	202, 905,
	203, 905,
	204, 905,
	205, 905,
	206, 905,
	208, 905,
	209, 905,
	212, 905,
	214, 905,
	215, 905,
	216, 905,
	217, 905,
	218, 905,
	219, 905,
	220, 905,
	221, 905,
	222, 905,
	223, 905,
	224, 905,
	225, 905,
	226, 905,
	227, 905,
	228, 905,
	229, 905,
	231, 905,
	232, 905,
	233, 905,
	234, 905,
	235, 905,
	236, 905,
	237, 905,
	239, 905,
	240, 905,
	243, 905,
	244, 905,
	247, 905,
	248, 905,
	249, 905,
	250, 905,
	251, 905,
	252, 905,
	253, 905,
	254, 905,
	255, 905,
	256, 905,
	257, 905,
	258, 905,
	259, 905,
	260, 905,
	262, 905,
	263, 905,
	264, 905,
	265, 905,
	266, 905,
	268, 905,
	269, 905,
	270, 905,
	271, 905,
	272, 905,
	273, 905,
	274, 905,
	275, 905,
	277, 905,
	278, 905,
	279, 905,
	280, 905,
	281, 905,
	283, 905,
	284, 905,
	285, 905,
	286, 905,
	287, 905,
	288, 905,
	289, 905,
	291, 905,
	292, 905,
	293, 905,
	294, 905,
	295, 905,
	296, 905,
	297, 905,
	298, 905,
	300, 905,
	301, 905,
	302, 905,
	303, 905,
	304, 905,
	305, 905,
	306, 905,
	308, 905,
	309, 905,
	310, 905,
	311, 905,
	312, 905,
	313, 905,
	314, 905,
	315, 905,
	316, 905,
	317, 905,
	318, 905,
	319, 905,
	320, 905,
	321, 905,
	322, 905,
	323, 905,
	324, 905,
	325, 905,
	326, 905,
	328, 905,
	329, 905,
	330, 905,
	331, 905,
	332, 905,
	333, 905,
	334, 905,
	335, 905,
	336, 905,
	337, 905,
	338, 905,
	339, 905,
	341, 905,
	342, 905,
	344, 905,
	345, 905,
	346, 905,
	347, 905,
	348, 905,
	349, 905,
	350, 905,
	351, 905,
	352, 905,
	353, 905,
	355, 905,
	356, 905,
	357, 905,
	358, 905,
	361, 905,
	362, 905,
	363, 905,
	364, 905,
	365, 905,
	366, 905,
	367, 905,
	369, 905,
	370, 905,
	373, 905,
	374, 905,
	375, 905,
	376, 905,
	377, 905,
	378, 905,
	380, 905,
	381, 905,
	382, 905,
	383, 905,
	384, 905,
	385, 905,
	388, 905,
	389, 905,
	394, 905,
	395, 905,
	396, 905,
	397, 905,
	398, 905,
	399, 905,
	400, 905,
	408, 905,
	413, 905,
	414, 905,
	415, 905,
	422, 905,
	428, 905,
	-2, 0,
	-1, 174,
	1, 57,
	426, 57,
	-2, 896,
	-1, 207,
	424, 1477,
	427, 1477,
	-2, 593,
	-1, 208,
	424, 1479,
	427, 1479,
	-2, 594,
	-1, 209,
	424, 1478,
	427, 1478,
	-2, 595,
	-1, 210,
	427, 1419,
	-2, 596,
	-1, 619,
	142, 1592,
	359, 1592,
	405, 1592,
	424, 1592,
	-2, 0,
	-1, 620,
	142, 1515,
	359, 1515,
	405, 1515,
	424, 1515,
	-2, 0,
	-1, 622,
	142, 1668,
	359, 1668,
	405, 1668,
	424, 1668,
	-2, 0,
	-1, 624,
	142, 1697,
	359, 1697,
	405, 1697,
	424, 1697,
	-2, 0,
	-1, 631,
	142, 1599,
	359, 1599,
	405, 1599,
	424, 1599,
	-2, 424,
	-1, 666,
	1, 522,
	421, 522,
	423, 522,
	425, 522,
	426, 522,
	-2, 0,
	-1, 667,
	1, 592,
	139, 592,
	421, 592,
	423, 592,
	425, 592,
	426, 592,
	-2, 0,
	-1, 673,
	1, 536,
	421, 536,
	423, 536,
	425, 536,
	426, 536,
	-2, 0,
	-1, 675,
	1, 540,
	421, 540,
	423, 540,
	425, 540,
	426, 540,
	-2, 0,
	-1, 678,
	1, 551,
	421, 551,
	423, 551,
	425, 551,
	426, 551,
	-2, 0,
	-1, 679,
	1, 557,
	421, 557,
	423, 557,
	425, 557,
	426, 557,
	-2, 0,
	-1, 680,
	1, 560,
	421, 560,
	423, 560,
	425, 560,
	426, 560,
	-2, 0,
	-1, 684,
	1, 574,
	421, 574,
	423, 574,
	425, 574,
	426, 574,
	-2, 0,
	-1, 685,
	1, 576,
	421, 576,
	423, 576,
	425, 576,
	426, 576,
	-2, 0,
	-1, 713,
	127, 909,
	207, 909,
	238, 909,
	-2, 865,
	-1, 721,
	127, 908,
	207, 908,
	238, 908,
	-2, 863,
	-1, 748,
	422, 1772,
	-2, 1191,
	-1, 749,
	422, 1773,
	-2, 1192,
	-1, 778,
	422, 1471,
	-2, 1462,
	-1, 779,
	5, 1047,
	422, 1486,
	-2, 1477,
	-1, 780,
	422, 1487,
	-2, 1478,
	-1, 787,
	5, 1031,
	-2, 1507,
	-1, 788,
	5, 1032,
	-2, 1511,
	-1, 789,
	5, 1033,
	-2, 1510,
	-1, 790,
	5, 1034,
	-2, 1693,
	-1, 791,
	5, 1035,
	-2, 1601,
	-1, 792,
	5, 1036,
	-2, 1661,
	-1, 793,
	5, 1037,
	-2, 1663,
	-1, 794,
	5, 1038,
	-2, 1664,
	-1, 795,
	5, 1039,
	-2, 1665,
	-1, 796,
	5, 1040,
	-2, 1673,
	-1, 797,
	5, 1041,
	-2, 1705,
	-1, 798,
	5, 1042,
	-2, 1569,
	-1, 799,
	5, 1043,
	-2, 1506,
	-1, 800,
	5, 1044,
	-2, 1609,
	-1, 801,
	5, 1045,
	-2, 1610,
	-1, 802,
	5, 1046,
	-2, 1573,
	-1, 803,
	5, 1095,
	422, 1095,
	-2, 1739,
	-1, 823,
	5, 1068,
	-2, 1508,
	-1, 824,
	5, 1086,
	-2, 1535,
	-1, 826,
	5, 1060,
	-2, 1556,
	-1, 827,
	5, 1061,
	-2, 1557,
	-1, 828,
	5, 1052,
	-2, 1572,
	-1, 829,
	5, 1053,
	-2, 1574,
	-1, 830,
	5, 1054,
	-2, 1575,
	-1, 831,
	5, 1055,
	-2, 1576,
	-1, 832,
	5, 1019,
	-2, 1582,
	-1, 833,
	5, 1020,
	-2, 1583,
	-1, 834,
	5, 1083,
	-2, 1683,
	-1, 835,
	5, 1093,
	-2, 1695,
	-1, 836,
	5, 1058,
	-2, 1719,
	-1, 837,
	5, 1085,
	-2, 1720,
	-1, 838,
	5, 1067,
	-2, 1721,
	-1, 839,
	5, 1085,
	-2, 1722,
	-1, 840,
	5, 1085,
	-2, 1723,
	-1, 841,
	5, 1050,
	-2, 1726,
	-1, 842,
	5, 1050,
	-2, 1727,
	-1, 845,
	5, 1075,
	-2, 1731,
	-1, 847,
	5, 1051,
	-2, 1737,
	-1, 848,
	5, 1056,
	-2, 1738,
	-1, 850,
	5, 1050,
	-2, 1743,
	-1, 853,
	5, 1059,
	-2, 1748,
	-1, 854,
	5, 1057,
	-2, 1750,
	-1, 856,
	5, 1087,
	-2, 1752,
	-1, 857,
	5, 1089,
	-2, 1753,
	-1, 858,
	5, 1091,
	-2, 1754,
	-1, 861,
	5, 1082,
	-2, 1758,
	-1, 931,
	422, 1486,
	-2, 1477,
	-1, 946,
	283, 1459,
	415, 1459,
	-2, 1458,
	-1, 1096,
	257, 894,
	-2, 719,
	-1, 1105,
	241, 1481,
	-2, 0,
	-1, 1148,
	1, 291,
	421, 291,
	423, 291,
	425, 291,
	426, 291,
	-2, 868,
	-1, 1151,
	4, 1757,
	10, 1757,
	11, 1757,
	13, 1757,
	14, 1757,
	15, 1757,
	16, 1757,
	17, 1757,
	18, 1757,
	20, 1757,
	21, 1757,
	22, 1757,
	23, 1757,
	25, 1757,
	28, 1757,
	30, 1757,
	32, 1757,
	35, 1757,
	36, 1757,
	37, 1757,
	38, 1757,
	39, 1757,
	40, 1757,
	41, 1757,
	42, 1757,
	43, 1757,
	44, 1757,
	46, 1757,
	47, 1757,
	48, 1757,
	49, 1757,
	50, 1757,
	51, 1757,
	54, 1757,
	55, 1757,
	56, 1757,
	58, 1757,
	59, 1757,
	60, 1757,
	63, 1757,
	64, 1757,
	65, 1757,
	66, 1757,
	67, 1757,
	68, 1757,
	69, 1757,
	70, 1757,
	71, 1757,
	72, 1757,
	74, 1757,
	75, 1757,
	76, 1757,
	77, 1757,
	79, 1757,
	80, 1757,
	81, 1757,
	82, 1757,
	90, 1757,
	91, 1757,
	92, 1757,
	93, 1757,
	94, 1757,
	95, 1757,
	96, 1757,
	97, 1757,
	99, 1757,
	101, 1757,
	103, 1757,
	106, 1757,
	107, 1757,
	109, 1757,
	110, 1757,
	114, 1757,
	115, 1757,
	116, 1757,
	117, 1757,
	118, 1757,
	119, 1757,
	120, 1757,
	121, 1757,
	122, 1757,
	123, 1757,
	124, 1757,
	128, 1757,
	129, 1757,
	130, 1757,
	131, 1757,
	132, 1757,
	133, 1757,
	134, 1757,
	135, 1757,
	136, 1757,
	137, 1757,
	138, 1757,
	140, 1757,
	143, 1757,
	144, 1757,
	146, 1757,
	147, 1757,
	149, 1757,
	151, 1757,
	152, 1757,
	153, 1757,
	154, 1757,
	155, 1757,
	156, 1757,
	157, 1757,
	158, 1757,
	159, 1757,
	160, 1757,
	161, 1757,
	162, 1757,
	163, 1757,
	164, 1757,
	165, 1757,
	166, 1757,
	168, 1757,
	169, 1757,
	170, 1757,
	172, 1757,
	173, 1757,
	174, 1757,
	175, 1757,
	176, 1757,
	177, 1757,
	178, 1757,
	179, 1757,
	180, 1757,
	182, 1757,
	184, 1757,
	185, 1757,
	186, 1757,
	187, 1757,
	188, 1757,
	189, 1757,
	190, 1757,
	191, 1757,
	192, 1757,
	193, 1757,
	194, 1757,
	195, 1757,
	196, 1757,
	197, 1757,
	199, 1757,
	200, 1757,
	202, 1757,
	203, 1757,
	204, 1757,
	205, 1757,
	206, 1757,
	208, 1757,
	209, 1757,
	212, 1757,
	213, 1757,
	214, 1757,
	217, 1757,
	218, 1757,
	219, 1757,
	220, 1757,
	221, 1757,
	222, 1757,
	223, 1757,
	224, 1757,
	225, 1757,
	226, 1757,
	227, 1757,
	228, 1757,
	231, 1757,
	233, 1757,
	234, 1757,
	235, 1757,
	236, 1757,
	237, 1757,
	239, 1757,
	240, 1757,
	243, 1757,
	244, 1757,
	245, 1757,
	247, 1757,
	248, 1757,
	250, 1757,
	252, 1757,
	253, 1757,
	254, 1757,
	255, 1757,
	256, 1757,
	257, 1757,
	258, 1757,
	259, 1757,
	260, 1757,
	262, 1757,
	263, 1757,
	264, 1757,
	265, 1757,
	266, 1757,
	268, 1757,
	269, 1757,
	270, 1757,
	271, 1757,
	272, 1757,
	273, 1757,
	274, 1757,
	275, 1757,
	277, 1757,
	278, 1757,
	279, 1757,
	280, 1757,
	281, 1757,
	282, 1757,
	283, 1757,
	284, 1757,
	285, 1757,
	286, 1757,
	287, 1757,
	288, 1757,
	289, 1757,
	291, 1757,
	292, 1757,
	293, 1757,
	294, 1757,
	295, 1757,
	296, 1757,
	297, 1757,
	298, 1757,
	299, 1757,
	300, 1757,
	301, 1757,
	302, 1757,
	303, 1757,
	304, 1757,
	305, 1757,
	306, 1757,
	308, 1757,
	309, 1757,
	310, 1757,
	311, 1757,
	312, 1757,
	313, 1757,
	314, 1757,
	315, 1757,
	316, 1757,
	318, 1757,
	319, 1757,
	320, 1757,
	321, 1757,
	322, 1757,
	323, 1757,
	324, 1757,
	325, 1757,
	326, 1757,
	328, 1757,
	329, 1757,
	330, 1757,
	331, 1757,
	332, 1757,
	333, 1757,
	334, 1757,
	335, 1757,
	336, 1757,
	337, 1757,
	338, 1757,
	339, 1757,
	341, 1757,
	342, 1757,
	344, 1757,
	345, 1757,
	346, 1757,
	347, 1757,
	348, 1757,
	349, 1757,
	350, 1757,
	351, 1757,
	352, 1757,
	353, 1757,
	355, 1757,
	356, 1757,
	357, 1757,
	358, 1757,
	361, 1757,
	362, 1757,
	363, 1757,
	364, 1757,
	366, 1757,
	367, 1757,
	369, 1757,
	370, 1757,
	373, 1757,
	374, 1757,
	375, 1757,
	376, 1757,
	378, 1757,
	380, 1757,
	381, 1757,
	382, 1757,
	383, 1757,
	384, 1757,
	385, 1757,
	388, 1757,
	389, 1757,
	394, 1757,
	395, 1757,
	396, 1757,
	397, 1757,
	398, 1757,
	399, 1757,
	400, 1757,
	401, 1757,
	403, 1757,
	404, 1757,
	405, 1757,
	406, 1757,
	407, 1757,
	408, 1757,
	410, 1757,
	411, 1757,
	412, 1757,
	413, 1757,
	414, 1757,
	415, 1757,
	416, 1757,
	417, 1757,
	418, 1757,
	420, 1757,
	423, 1757,
	424, 1757,
	427, 1757,
	428, 1757,
	-2, 0,
	-1, 1170,
	142, 1668,
	359, 1668,
	405, 1668,
	424, 1668,
	-2, 0,
	-1, 1202,
	142, 1697,
	359, 1697,
	405, 1697,
	424, 1697,
	-2, 0,
	-1, 1203,
	187, 804,
	268, 804,
	272, 804,
	-2, 411,
	-1, 1280,
	127, 908,
	207, 908,
	238, 908,
	-2, 866,
	-1, 1364,
	113, 870,
	127, 870,
	181, 870,
	207, 870,
	238, 870,
	246, 870,
	371, 870,
	-2, 1234,
	-1, 1414,
	423, 1354,
	-2, 0,
	-1, 1422,
	187, 804,
	268, 804,
	272, 804,
	-2, 799,
	-1, 1456,
	113, 870,
	127, 870,
	181, 870,
	207, 870,
	238, 870,
	246, 870,
	371, 870,
	-2, 978,
	-1, 1661,
	187, 804,
	268, 804,
	272, 804,
	-2, 413,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1130,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1131,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1132,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1133,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1134,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1135,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1136,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1137,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1149,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1150,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1151,
	-1, 1793,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1156,
	-1, 1799,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1158,
	-1, 1801,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1162,
	-1, 1802,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1163,
	-1, 1803,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1164,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1165,
	-1, 1885,
	5, 1047,
	142, 1365,
	422, 1486,
	-2, 1477,
	-1, 1886,
	142, 1366,
	-2, 1715,
	-1, 1887,
	142, 1367,
	-2, 1596,
	-1, 1888,
	142, 1368,
	-2, 1536,
	-1, 1889,
	142, 1369,
	-2, 1564,
	-1, 1890,
	142, 1370,
	-2, 1595,
	-1, 1891,
	142, 1371,
	-2, 1660,
	-1, 1965,
	1, 979,
	79, 979,
	113, 979,
	127, 979,
	143, 979,
	148, 979,
	150, 979,
	172, 979,
	181, 979,
	190, 979,
	203, 979,
	207, 979,
	224, 979,
	238, 979,
	241, 979,
	246, 979,
	290, 979,
	292, 979,
	371, 979,
	379, 979,
	391, 979,
	392, 979,
	402, 979,
	421, 979,
	423, 979,
	425, 979,
	426, 979,
	427, 979,
	-2, 978,
	-1, 1970,
	422, 1463,
	-2, 1475,
	-1, 2052,
	423, 1424,
	427, 1424,
	-2, 1451,
	-1, 2175,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1157,
	-1, 2176,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1159,
	-1, 2181,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1160,
	-1, 2411,
	257, 894,
	-2, 719,
	-1, 2477,
	187, 804,
	268, 804,
	272, 804,
	-2, 410,
	-1, 2492,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1161,
	-1, 2497,
	185, 0,
	186, 0,
	231, 0,
	-2, 1179,
	-1, 2558,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1209,
	-1, 2559,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1210,
	-1, 2560,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1211,
	-1, 2564,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1215,
	-1, 2565,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1216,
	-1, 2566,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1217,
	-1, 2608,
	422, 1464,
	-2, 1476,
	-1, 2719,
	185, 0,
	186, 0,
	231, 0,
	-2, 1180,
	-1, 2722,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1183,
	-1, 2723,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1185,
	-1, 2867,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1184,
	-1, 2868,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1186,
	-1, 2878,
	185, 0,
	-2, 1218,
	-1, 2966,
	185, 0,
	-2, 1219,
	-1, 3062,
	38, 0,
	160, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1718,
}

const sqlPrivate = 57344

const sqlLast = 59803

var sqlAct = [...]int{

	780, 3061, 1925, 3070, 3038, 3124, 2820, 2654, 2906, 3040,
	2078, 3037, 3025, 3071, 2895, 3072, 2107, 1080, 2528, 3060,
	2086, 2970, 2835, 1138, 1756, 2672, 2667, 2617, 2775, 2858,
	950, 2790, 2426, 1957, 1054, 2169, 2209, 1591, 772, 1283,
	1816, 209, 2418, 2677, 756, 2882, 496, 2449, 2431, 2420,
	2618, 2211, 2451, 496, 2075, 2329, 2276, 2050, 2318, 2054,
	496, 2753, 722, 496, 1527, 1449, 496, 209, 1451, 496,
	496, 966, 1953, 1102, 1134, 2294, 496, 2087, 1430, 1488,
	2035, 1541, 778, 1542, 496, 491, 1538, 1171, 1982, 2305,
	960, 1550, 567, 28, 1547, 2053, 2581, 730, 130, 1958,
	2971, 1372, 546, 2275, 1828, 2619, 1592, 1742, 1747, 2165,
	1422, 2394, 1510, 1960, 542, 2430, 943, 1467, 1431, 1973,
	1686, 1469, 763, 73, 1856, 1922, 1539, 1813, 1504, 1838,
	1205, 2010, 2036, 1400, 952, 916, 1402, 581, 1850, 924,
	2051, 1121, 210, 1149, 1131, 2080, 211, 919, 2009, 2057,
	1440, 1829, 493, 1881, 898, 1284, 1359, 1685, 130, 1945,
	609, 629, 1930, 1282, 136, 771, 496, 496, 1147, 584,
	623, 1557, 1118, 539, 205, 1058, 1480, 137, 921, 594,
	896, 1421, 658, 2597, 1288, 2196, 2598, 2821, 3151, 721,
	1565, 726, 1939, 476, 1459, 1565, 1565, 492, 496, 496,
	496, 955, 496, 496, 969, 969, 602, 3145, 2108, 1450,
	2079, 1939, 3144, 496, 496, 2490, 1939, 2037, 3121, 476,
	3118, 1563, 2789, 726, 1519, 3096, 1369, 2248, 2249, 2789,
	3090, 3089, 3086, 3083, 1939, 1939, 3087, 3084, 479, 3080,
	3058, 596, 1577, 1519, 1519, 777, 2437, 3057, 3056, 2336,
	3055, 1519, 1577, 3020, 1577, 3007, 930, 2118, 2467, 1519,
	1939, 736, 727, 2438, 479, 3000, 2998, 28, 2407, 2789,
	2789, 2996, 130, 1853, 1513, 2789, 1932, 963, 1061, 899,
	899, 3021, 2968, 2951, 2954, 946, 2118, 2693, 863, 2941,
	2936, 1577, 1519, 2789, 1519, 714, 1079, 2934, 2924, 2923,
	2916, 2789, 1519, 1519, 1519, 2915, 2888, 1188, 713, 2789,
	1519, 770, 2869, 2815, 2811, 2037, 2118, 1939, 1939, 2248,
	2249, 2788, 731, 2721, 2691, 2789, 2683, 2118, 2684, 1177,
	2684, 1854, 2603, 936, 940, 945, 2604, 2593, 2587, 2506,
	2584, 2594, 1939, 1519, 2501, 2457, 2291, 900, 1939, 2399,
	1939, 2110, 2243, 2584, 2254, 1060, 1939, 769, 2242, 1059,
	2236, 1931, 1939, 2235, 2237, 476, 2136, 1939, 913, 2202,
	1939, 1664, 1939, 146, 2693, 2203, 2117, 2106, 39, 2103,
	2118, 1582, 2046, 1939, 1938, 1519, 1519, 1581, 1939, 40,
	141, 1582, 902, 2025, 903, 1855, 1852, 1178, 1971, 2399,
	1299, 1300, 2168, 44, 2210, 2147, 1342, 1343, 1344, 776,
	479, 1518, 2083, 2248, 2249, 1426, 1833, 46, 143, 927,
	1057, 174, 2439, 1169, 1168, 1302, 1683, 1566, 1348, 45,
	2264, 51, 1566, 1566, 1167, 1166, 1165, 1164, 1163, 1162,
	1073, 2440, 1370, 1161, 1160, 1159, 2254, 1158, 1157, 1156,
	1301, 1078, 52, 1155, 543, 1067, 54, 1154, 1321, 1153,
	58, 2248, 2249, 904, 144, 901, 720, 719, 718, 59,
	72, 2263, 717, 716, 60, 61, 712, 574, 711, 545,
	710, 709, 708, 707, 1857, 706, 705, 704, 40, 703,
	702, 698, 697, 696, 656, 655, 654, 653, 62, 1299,
	1300, 652, 44, 651, 650, 496, 496, 63, 496, 955,
	955, 496, 649, 648, 496, 647, 2265, 496, 1324, 1325,
	1326, 1327, 2264, 496, 1302, 646, 645, 1307, 171, 729,
	573, 928, 644, 496, 496, 496, 496, 496, 955, 955,
	2254, 3077, 643, 1178, 642, 955, 1871, 641, 2437, 1301,
	1339, 1349, 640, 1519, 1329, 1330, 1331, 639, 638, 575,
	637, 1931, 1142, 636, 173, 635, 1573, 634, 59, 577,
	2768, 1564, 1726, 60, 633, 618, 1851, 496, 1066, 171,
	1071, 617, 1077, 926, 616, 615, 614, 613, 2254, 530,
	496, 529, 1178, 1095, 502, 1072, 1337, 501, 500, 482,
	2123, 171, 481, 1322, 1107, 172, 63, 480, 2265, 195,
	194, 64, 496, 193, 165, 173, 2264, 2248, 2249, 65,
	192, 171, 166, 496, 1092, 191, 1307, 1135, 2257, 2258,
	2250, 2251, 2252, 2253, 2255, 2256, 190, 173, 75, 139,
	66, 189, 67, 138, 68, 188, 1869, 187, 145, 186,
	185, 184, 183, 69, 182, 181, 172, 173, 1120, 180,
	171, 179, 178, 955, 2264, 177, 176, 175, 727, 1964,
	2726, 83, 1328, 2685, 110, 1125, 1128, 2601, 172, 1150,
	2114, 2332, 2208, 142, 2198, 1181, 2157, 165, 2047, 1323,
	2040, 40, 1186, 1867, 138, 166, 173, 1865, 172, 1689,
	496, 1863, 2265, 1299, 1300, 44, 1466, 165, 1376, 1219,
	64, 1082, 1340, 1063, 3059, 166, 138, 2402, 1452, 115,
	3042, 2258, 2250, 2251, 2252, 2253, 2255, 2256, 1302, 140,
	1299, 1300, 2905, 2115, 2961, 1203, 2082, 172, 139, 66,
	1295, 67, 2937, 2957, 2254, 171, 165, 2955, 1213, 2856,
	2265, 2843, 1217, 1301, 166, 1302, 2752, 1367, 2751, 171,
	171, 2745, 2116, 2738, 2737, 1280, 2736, 2732, 2731, 2730,
	576, 2729, 577, 110, 2704, 138, 1281, 2702, 4, 2607,
	1301, 173, 2578, 2577, 2576, 2514, 2398, 2327, 1321, 2287,
	1338, 2274, 2247, 1200, 2244, 173, 173, 2241, 1341, 2240,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 63,
	2238, 2248, 2249, 2259, 2257, 2258, 2250, 2251, 2252, 2253,
	2255, 2256, 172, 2216, 2215, 2197, 1824, 1141, 1965, 1295,
	1307, 165, 1684, 2011, 171, 1279, 172, 172, 1588, 166,
	912, 2164, 1220, 1294, 3149, 165, 165, 1524, 1324, 1325,
	1326, 1327, 1522, 166, 166, 1380, 3132, 1307, 2311, 3131,
	138, 2259, 2257, 2258, 2250, 2251, 2252, 2253, 2255, 2256,
	173, 1081, 2530, 2120, 544, 138, 3050, 1373, 727, 1362,
	3045, 3002, 2993, 2992, 1329, 1330, 1331, 1299, 1300, 2988,
	2987, 2982, 2979, 496, 2953, 714, 2952, 1818, 496, 2901,
	2880, 2830, 1303, 1304, 1305, 1306, 1308, 1309, 713, 1291,
	1292, 172, 1302, 64, 1437, 1296, 2825, 1428, 2823, 2810,
	165, 2767, 2750, 2694, 496, 2670, 2661, 2660, 166, 2658,
	2635, 2634, 2842, 1322, 2624, 2623, 2589, 1301, 2254, 2496,
	2463, 139, 66, 2383, 67, 2367, 2461, 2346, 2345, 138,
	2290, 1825, 2225, 2224, 2221, 1363, 2190, 1299, 1300, 1403,
	1408, 2125, 171, 1968, 1950, 1937, 2973, 1870, 1861, 1956,
	1533, 1398, 2346, 576, 1401, 1465, 110, 1429, 1420, 1404,
	1419, 1414, 1302, 1413, 1412, 1434, 1435, 1411, 1410, 1409,
	1460, 1406, 1674, 1673, 1405, 1683, 1680, 1396, 173, 1395,
	1394, 930, 1328, 930, 1393, 1392, 1391, 1301, 1390, 1389,
	1388, 899, 1387, 130, 1307, 1386, 1385, 1384, 1377, 1323,
	2250, 2251, 2252, 2253, 2255, 2256, 1362, 1199, 948, 2855,
	1448, 1183, 1152, 1146, 2724, 2701, 2596, 2592, 2201, 172,
	1951, 1329, 1330, 1331, 727, 1373, 2248, 2249, 165, 2459,
	1360, 1461, 2421, 1425, 2848, 2135, 166, 955, 496, 2696,
	1452, 2695, 1216, 2599, 969, 1423, 1481, 1868, 1457, 2037,
	1487, 1683, 1194, 1417, 1683, 1415, 1277, 138, 1427, 1418,
	2930, 1416, 496, 969, 496, 496, 1677, 2387, 2382, 2378,
	1322, 2366, 209, 2282, 894, 2633, 2281, 1454, 2108, 2280,
	1683, 2134, 2279, 2174, 1534, 1657, 496, 496, 1305, 1306,
	1308, 1309, 1212, 496, 1866, 496, 1382, 496, 1864, 1543,
	1546, 496, 1862, 2883, 1475, 1670, 2079, 2469, 895, 2377,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 2013,
	1506, 2958, 1447, 1500, 2532, 2956, 2206, 3078, 1839, 1580,
	1399, 1511, 2904, 955, 3088, 1391, 3085, 2433, 2613, 1224,
	1391, 3034, 2668, 2111, 927, 200, 927, 1532, 3006, 2187,
	1617, 496, 955, 967, 1055, 2802, 1323, 209, 496, 496,
	538, 3111, 1589, 509, 2479, 955, 1270, 890, 209, 496,
	2185, 1554, 496, 496, 1853, 888, 886, 1678, 496, 3079,
	1060, 1552, 1659, 3112, 1059, 2137, 1255, 1530, 1647, 1256,
	476, 519, 1711, 1975, 1975, 3148, 2252, 2253, 2255, 2256,
	969, 1268, 1597, 2929, 2638, 1974, 2928, 2926, 2925, 2648,
	496, 2643, 2642, 1517, 1561, 496, 2819, 1917, 2610, 2609,
	209, 496, 1586, 496, 476, 496, 1916, 496, 1120, 496,
	1482, 1679, 1854, 1649, 2220, 479, 2219, 2218, 2217, 496,
	911, 496, 2121, 884, 537, 1269, 1537, 508, 2177, 496,
	496, 496, 1379, 2109, 2065, 881, 928, 1479, 928, 1214,
	1671, 2030, 1651, 520, 2024, 1556, 2182, 1150, 1559, 479,
	1303, 1304, 1305, 1306, 1308, 1309, 1222, 2183, 496, 1483,
	1484, 2188, 969, 2020, 2001, 1800, 1984, 1424, 1915, 1056,
	1914, 1758, 3005, 1661, 2076, 1723, 1855, 1852, 2960, 1084,
	2482, 1583, 700, 2034, 1729, 1215, 1724, 1691, 926, 476,
	926, 1190, 590, 2653, 1815, 1815, 1096, 1099, 1597, 1597,
	476, 1200, 1994, 1718, 1682, 2045, 3074, 1568, 1587, 608,
	1570, 1585, 2908, 1572, 2524, 607, 1095, 1575, 1298, 1658,
	2460, 1198, 1648, 1696, 1461, 1309, 1830, 528, 725, 1251,
	1254, 1367, 608, 1687, 479, 3053, 1830, 969, 1675, 1822,
	1843, 1993, 1857, 2626, 1820, 479, 1560, 1720, 3103, 523,
	1987, 1693, 476, 3017, 2166, 2167, 2428, 1477, 2374, 1879,
	2429, 1684, 1681, 2369, 1499, 1857, 1748, 1755, 1884, 1884,
	1485, 2984, 1895, 1897, 1702, 1902, 1252, 1830, 3134, 1565,
	3018, 1191, 2480, 740, 2386, 496, 3102, 496, 1839, 1397,
	2184, 2798, 1929, 2360, 2644, 2067, 724, 479, 2186, 1728,
	2021, 2932, 1477, 1857, 2864, 1727, 536, 1193, 746, 2428,
	1832, 969, 496, 714, 2256, 2362, 714, 714, 3075, 1746,
	2017, 496, 1230, 1502, 496, 2874, 1738, 969, 1969, 1739,
	1740, 496, 1616, 1276, 2358, 1836, 3111, 1684, 2011, 496,
	1684, 2011, 2248, 2249, 522, 521, 727, 496, 2478, 2471,
	1227, 1722, 727, 1357, 1966, 1594, 2361, 1851, 2223, 496,
	1725, 726, 955, 1946, 1299, 1300, 1684, 2011, 726, 2357,
	2636, 1972, 1961, 496, 969, 1826, 1986, 2697, 1952, 496,
	496, 535, 1962, 1963, 930, 1834, 3076, 2706, 1597, 1302,
	1976, 2521, 1189, 2713, 496, 201, 1223, 496, 531, 1470,
	899, 930, 1471, 1267, 892, 1238, 513, 891, 3073, 3110,
	3108, 2834, 3101, 2832, 1301, 882, 882, 483, 2073, 2071,
	1892, 496, 2796, 496, 2474, 496, 1913, 2003, 496, 506,
	496, 1710, 496, 1998, 496, 496, 1980, 496, 955, 955,
	955, 1927, 727, 955, 946, 1926, 2032, 2031, 1616, 1616,
	496, 1988, 1990, 1943, 2627, 2522, 2004, 1935, 1936, 2027,
	1083, 2064, 2101, 2102, 1947, 1948, 1457, 1904, 3127, 2254,
	202, 1594, 1594, 2909, 1996, 2018, 2042, 2786, 2044, 2003,
	1979, 1985, 2002, 883, 1472, 503, 723, 524, 536, 1503,
	1880, 1307, 1536, 1811, 2019, 882, 1942, 1474, 512, 1980,
	2179, 1814, 2783, 2012, 2014, 2015, 2016, 538, 2097, 1662,
	2081, 496, 2081, 2473, 1809, 3135, 1566, 1436, 1329, 1330,
	1331, 1060, 533, 701, 2126, 2038, 2090, 2099, 2470, 1357,
	2797, 476, 1192, 589, 525, 1297, 2092, 1187, 1197, 130,
	1176, 1695, 1821, 2784, 1857, 2264, 1476, 927, 130, 499,
	969, 1287, 496, 2113, 1286, 1980, 2104, 534, 2865, 204,
	496, 196, 496, 535, 927, 2085, 2140, 1322, 2748, 2094,
	526, 2095, 527, 2096, 203, 513, 479, 1150, 2142, 2098,
	1172, 2567, 2391, 496, 496, 496, 2105, 496, 1264, 1231,
	2112, 537, 2130, 1797, 2131, 1204, 2122, 1515, 506, 2918,
	2472, 532, 2860, 484, 485, 2917, 496, 509, 2143, 2124,
	1805, 199, 2899, 2395, 2976, 1489, 2612, 1209, 1806, 3140,
	2141, 1807, 507, 2342, 2151, 1812, 2152, 1221, 1404, 688,
	1411, 2265, 1493, 1477, 1285, 1443, 1232, 1401, 1616, 1229,
	2127, 2338, 2074, 3125, 1239, 505, 197, 2072, 2129, 735,
	1555, 201, 1545, 1323, 2138, 2801, 2520, 504, 2159, 928,
	2364, 1594, 2800, 1669, 1446, 1287, 130, 512, 1544, 1265,
	130, 1540, 1535, 1490, 2779, 3026, 928, 2780, 2005, 1715,
	200, 2193, 1944, 2154, 487, 486, 514, 2156, 1367, 538,
	198, 508, 1665, 496, 1209, 1444, 2859, 1286, 1210, 2180,
	2749, 510, 1211, 2319, 533, 3126, 2568, 2836, 2213, 2214,
	2673, 926, 2782, 2569, 2900, 1795, 1798, 689, 2348, 1174,
	1173, 2785, 2161, 2347, 1667, 2163, 202, 1734, 926, 2172,
	488, 489, 1692, 1266, 2308, 3128, 1941, 1940, 1494, 534,
	1668, 733, 2049, 688, 1516, 2250, 2251, 2252, 2253, 2255,
	2256, 2048, 1439, 3139, 1808, 724, 1117, 2199, 2400, 1473,
	1175, 1794, 1810, 735, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 537, 1115, 1210, 509, 1285, 579, 1211,
	1209, 2655, 1106, 532, 1445, 2178, 3, 2289, 2861, 1105,
	2320, 507, 3115, 2799, 969, 2822, 600, 734, 1495, 1496,
	2301, 2292, 727, 2006, 2007, 2390, 2299, 2300, 2754, 1491,
	496, 2582, 688, 496, 505, 204, 1443, 2781, 1860, 1735,
	496, 2831, 3117, 496, 496, 969, 504, 2205, 2879, 2747,
	203, 689, 735, 496, 496, 496, 1492, 2897, 2322, 496,
	2396, 2652, 496, 593, 1274, 1446, 2315, 2277, 690, 496,
	496, 496, 496, 496, 1261, 514, 2323, 2324, 2495, 1584,
	508, 1210, 496, 1441, 2448, 1211, 2331, 199, 2898, 496,
	510, 1259, 2239, 2189, 2128, 930, 1444, 1796, 2029, 1597,
	2314, 496, 955, 930, 930, 496, 2000, 930, 1526, 1464,
	1275, 969, 1249, 1520, 2326, 496, 1859, 1442, 2339, 1184,
	689, 969, 197, 572, 36, 2284, 2285, 2286, 969, 2310,
	2293, 930, 1528, 1497, 2307, 571, 35, 570, 32, 2278,
	496, 2155, 496, 1709, 496, 1247, 955, 496, 955, 955,
	955, 880, 496, 2321, 496, 2368, 200, 1116, 496, 2335,
	764, 2150, 691, 496, 1980, 496, 198, 2343, 569, 79,
	2365, 1532, 496, 2333, 2349, 1114, 2352, 1470, 1245, 578,
	1471, 934, 690, 2384, 2132, 1445, 1095, 1712, 2330, 496,
	496, 1699, 955, 1650, 2363, 2379, 1383, 1243, 2435, 2381,
	692, 477, 598, 599, 1273, 3069, 494, 2296, 2650, 496,
	2424, 2370, 1514, 515, 1260, 2303, 2304, 2375, 2380, 2309,
	541, 2423, 3023, 585, 2465, 2373, 541, 477, 2772, 585,
	605, 1258, 1095, 2404, 2401, 2405, 612, 1597, 496, 1475,
	2385, 2397, 2371, 2413, 632, 2631, 2372, 2629, 2422, 591,
	592, 690, 1248, 496, 2454, 2509, 1470, 2313, 927, 1471,
	2611, 2316, 1472, 2409, 1475, 1241, 927, 927, 2432, 1690,
	927, 2417, 2306, 2466, 732, 1474, 691, 2432, 2434, 969,
	1708, 1507, 2415, 1366, 130, 1246, 727, 2441, 2077, 969,
	2419, 2069, 2068, 1511, 927, 885, 887, 2066, 36, 1511,
	1235, 2447, 1113, 2063, 496, 2458, 1579, 1578, 2498, 1597,
	35, 2344, 32, 1576, 692, 1574, 1571, 1569, 1244, 2350,
	1567, 2354, 2355, 1525, 1476, 1523, 541, 541, 2477, 2516,
	2517, 2518, 1512, 130, 929, 2475, 2476, 1242, 1501, 1498,
	1486, 1472, 1478, 79, 1091, 691, 1597, 1597, 2481, 1616,
	2484, 1757, 2486, 2946, 1474, 3112, 2488, 2533, 494, 494,
	494, 1289, 961, 494, 568, 78, 2854, 1597, 1597, 2853,
	928, 2579, 1594, 477, 1062, 2170, 1688, 1975, 928, 928,
	2948, 2502, 928, 692, 1992, 2508, 565, 23, 1991, 2682,
	566, 24, 564, 30, 2817, 496, 2442, 2443, 2444, 2033,
	2445, 2446, 1597, 1476, 2529, 1240, 928, 496, 2133, 2022,
	1975, 1477, 2571, 969, 1748, 2536, 2535, 563, 21, 2600,
	1477, 1989, 926, 2523, 2525, 2526, 1840, 2028, 2595, 2544,
	926, 926, 2464, 2023, 926, 1748, 2547, 2546, 1468, 1999,
	1234, 1290, 1112, 2986, 2171, 1655, 1656, 1509, 580, 2791,
	2641, 561, 20, 562, 19, 2583, 551, 15, 926, 1233,
	2572, 552, 16, 560, 57, 1508, 2647, 2963, 130, 2755,
	2575, 930, 2008, 2580, 2588, 1995, 2585, 2586, 559, 56,
	496, 496, 1293, 496, 2026, 2100, 2651, 1616, 496, 908,
	1477, 2639, 1505, 1997, 550, 55, 969, 3022, 969, 2828,
	2606, 955, 2084, 2645, 2662, 2070, 2602, 2646, 2062, 930,
	1594, 909, 2649, 2615, 1483, 1484, 1970, 601, 496, 3123,
	1928, 1660, 1590, 558, 12, 549, 50, 2686, 2455, 930,
	3138, 2675, 1370, 2003, 556, 47, 2700, 1473, 2527, 78,
	2679, 930, 2462, 2678, 2542, 930, 557, 48, 496, 2674,
	930, 969, 496, 496, 969, 496, 2248, 2249, 2145, 1616,
	2146, 23, 1894, 496, 2637, 24, 2620, 30, 2669, 2664,
	2671, 969, 2657, 2666, 1849, 2656, 2665, 2659, 548, 49,
	1299, 1300, 1594, 2591, 2891, 1980, 2676, 2680, 2710, 1299,
	1300, 910, 21, 2727, 2688, 2687, 1616, 1616, 555, 7,
	1663, 930, 2145, 2144, 2519, 2715, 554, 6, 1299, 1300,
	1263, 496, 2705, 1262, 2720, 1597, 1473, 1616, 1616, 1594,
	1594, 2692, 2707, 2090, 2698, 2699, 20, 1226, 19, 2711,
	1301, 15, 1225, 1302, 927, 1380, 16, 1378, 57, 2846,
	1594, 1594, 2708, 2716, 553, 38, 2690, 1272, 1271, 1257,
	1253, 1250, 1616, 56, 2630, 1236, 2632, 1196, 1301, 547,
	37, 893, 699, 2907, 3033, 494, 1090, 2985, 494, 55,
	496, 494, 927, 686, 961, 1594, 2356, 1110, 1698, 1237,
	969, 2746, 969, 494, 1700, 2312, 1949, 3016, 2733, 2222,
	496, 496, 496, 494, 494, 494, 494, 961, 12, 2969,
	50, 2873, 1858, 1381, 53, 496, 759, 822, 2773, 47,
	496, 2614, 496, 2296, 2056, 496, 496, 496, 496, 496,
	2055, 48, 972, 496, 496, 955, 1672, 2757, 2758, 969,
	781, 2794, 2792, 955, 2759, 1883, 2762, 632, 2760, 2148,
	2766, 496, 496, 1749, 783, 1595, 928, 930, 786, 785,
	494, 2771, 2763, 49, 784, 955, 2818, 1596, 1407, 782,
	1593, 2829, 2088, 676, 927, 496, 2824, 930, 1676, 2795,
	2703, 1819, 1195, 7, 496, 496, 955, 955, 2833, 2805,
	2806, 6, 1837, 632, 928, 2838, 930, 1439, 2204, 1374,
	2840, 1737, 751, 1835, 2863, 2769, 2812, 1980, 926, 2827,
	1182, 2816, 750, 2837, 2640, 2826, 2317, 969, 2427, 1095,
	2605, 2839, 2841, 2845, 1733, 2803, 2640, 2162, 2424, 38,
	2640, 930, 2850, 2808, 2330, 2640, 2849, 1730, 2628, 2847,
	511, 2245, 2866, 930, 37, 1145, 926, 1910, 2885, 1903,
	2813, 1899, 1278, 2620, 1358, 2872, 2089, 1980, 1218, 969,
	2328, 1443, 2436, 496, 2119, 496, 2844, 969, 496, 2756,
	494, 1741, 907, 906, 905, 1616, 496, 3039, 2881, 1597,
	2432, 3036, 969, 2862, 1666, 2139, 928, 1351, 2620, 755,
	1446, 2894, 2297, 2886, 2887, 2403, 1823, 1088, 1594, 1350,
	2620, 889, 2978, 2927, 1208, 1207, 2912, 1366, 1441, 1206,
	2341, 2761, 3133, 2625, 170, 167, 2911, 169, 2913, 2889,
	927, 1444, 2892, 496, 168, 496, 2389, 1905, 955, 82,
	2910, 1597, 34, 496, 33, 109, 108, 107, 926, 2376,
	927, 2933, 1442, 2935, 106, 105, 104, 103, 2939, 102,
	2770, 101, 1909, 100, 2931, 969, 99, 98, 2944, 927,
	97, 96, 930, 95, 94, 93, 92, 91, 1980, 90,
	89, 2804, 2945, 88, 496, 87, 2943, 2678, 2809, 2950,
	496, 2949, 86, 2408, 85, 2410, 2411, 2412, 496, 2959,
	84, 628, 930, 2298, 927, 625, 930, 2947, 930, 2920,
	81, 80, 2975, 930, 2981, 31, 927, 26, 2967, 1597,
	1445, 2938, 2974, 2972, 113, 2424, 496, 496, 114, 2620,
	25, 77, 76, 496, 2325, 29, 2962, 18, 11, 2456,
	17, 22, 928, 2997, 955, 2999, 2983, 135, 134, 496,
	133, 132, 131, 955, 955, 14, 13, 496, 128, 496,
	129, 496, 928, 2620, 2991, 2620, 3019, 3001, 127, 126,
	2620, 3004, 125, 612, 3003, 2994, 3010, 3011, 541, 124,
	496, 928, 3009, 496, 3012, 496, 123, 969, 3029, 10,
	8, 2890, 112, 3041, 926, 3043, 3044, 9, 2857, 1455,
	2468, 929, 70, 71, 494, 3046, 3048, 3047, 27, 3049,
	2393, 3035, 43, 930, 926, 42, 928, 2393, 3054, 3031,
	41, 3013, 496, 3014, 2893, 2921, 2922, 3052, 928, 111,
	3051, 2989, 161, 926, 160, 927, 159, 158, 3066, 1616,
	154, 3068, 157, 3067, 155, 156, 496, 3030, 153, 122,
	3081, 163, 162, 3092, 496, 3093, 151, 3094, 148, 150,
	152, 149, 1594, 147, 3100, 164, 121, 120, 926, 927,
	496, 927, 3098, 3099, 3097, 119, 927, 118, 3095, 117,
	926, 116, 5, 2, 3106, 930, 3109, 3107, 1, 0,
	0, 1616, 3041, 0, 3113, 0, 3114, 3116, 0, 0,
	3119, 3120, 0, 0, 0, 0, 0, 0, 3122, 0,
	3091, 0, 0, 0, 1594, 0, 0, 3130, 3129, 0,
	0, 0, 0, 0, 0, 3137, 0, 0, 0, 0,
	3136, 0, 0, 930, 3141, 3142, 0, 0, 477, 0,
	0, 0, 2620, 0, 3143, 0, 0, 928, 0, 0,
	3146, 3147, 3150, 0, 0, 0, 0, 0, 3152, 2090,
	0, 0, 1062, 0, 494, 1531, 2786, 0, 2505, 1616,
	0, 0, 477, 0, 0, 0, 2990, 2640, 2512, 0,
	0, 928, 0, 928, 0, 0, 1551, 1551, 928, 0,
	2620, 2783, 1594, 494, 2776, 494, 0, 494, 3008, 926,
	0, 541, 0, 0, 0, 0, 0, 2774, 0, 0,
	0, 0, 2778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2784, 926, 0, 926, 0, 1905, 1905, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 927, 0,
	0, 632, 0, 0, 0, 0, 574, 477, 1062, 585,
	2777, 0, 1909, 1909, 0, 0, 0, 40, 477, 1062,
	0, 0, 961, 494, 0, 0, 0, 0, 632, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 2640, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 2608, 0, 0, 0, 0, 0, 0, 573,
	632, 0, 0, 0, 0, 494, 0, 0, 0, 0,
	477, 494, 0, 494, 0, 494, 0, 494, 0, 494,
	1905, 1905, 1905, 0, 0, 0, 0, 0, 575, 1713,
	0, 1714, 0, 0, 0, 0, 0, 59, 577, 494,
	494, 494, 60, 0, 0, 1909, 1909, 1909, 0, 0,
	928, 0, 0, 2779, 0, 0, 2780, 0, 0, 0,
	0, 0, 497, 0, 0, 0, 0, 0, 632, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2782, 0, 0, 0, 0, 0, 0, 928, 0,
	2785, 0, 926, 208, 0, 0, 0, 0, 0, 0,
	0, 2191, 2192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 1300, 0, 0, 0, 208,
	967, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2814, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1301, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 2781, 541, 0, 0,
	0, 0, 0, 0, 2271, 2272, 2273, 139, 66, 0,
	67, 0, 929, 2851, 2852, 0, 0, 0, 0, 574,
	0, 0, 541, 0, 0, 0, 0, 0, 171, 929,
	40, 541, 0, 0, 494, 0, 2483, 0, 0, 576,
	0, 1983, 110, 0, 44, 0, 0, 0, 0, 494,
	0, 1307, 0, 0, 0, 0, 0, 494, 0, 0,
	0, 2765, 0, 956, 173, 0, 970, 970, 0, 494,
	0, 0, 573, 0, 0, 0, 0, 0, 1329, 1330,
	1331, 0, 0, 494, 1299, 1300, 0, 0, 0, 477,
	2039, 0, 1905, 1905, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 2052, 172, 0, 1062, 0, 1302,
	59, 577, 0, 0, 165, 60, 0, 1909, 1909, 0,
	0, 0, 166, 0, 0, 0, 0, 1322, 0, 0,
	0, 1983, 0, 541, 1301, 494, 0, 0, 494, 0,
	494, 0, 494, 138, 494, 494, 0, 961, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1983, 0, 0, 0, 1905, 1905, 1905, 1905, 1905, 1905,
	1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,
	1905, 1905, 1905, 0, 1905, 0, 2870, 0, 0, 1909,
	1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909,
	1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 0, 1909,
	0, 1307, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 0, 0, 2870, 0,
	0, 0, 0, 0, 0, 0, 1757, 0, 1329, 1330,
	1331, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 1757, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 0, 2248, 2249, 0, 2266, 2267, 2268,
	1062, 0, 1062, 0, 0, 0, 2493, 2494, 0, 0,
	139, 66, 2718, 67, 0, 0, 0, 1322, 490, 0,
	0, 0, 0, 494, 494, 494, 0, 494, 0, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 2153,
	0, 0, 576, 0, 0, 110, 494, 0, 0, 0,
	0, 0, 2263, 0, 1055, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 173, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 2548, 2549,
	2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559,
	2560, 2561, 2562, 2563, 2564, 2565, 2566, 0, 2570, 0,
	0, 956, 956, 1323, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 2254, 0, 0, 0, 166, 0, 0, 0, 0,
	956, 956, 0, 1062, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1370, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2269,
	938, 0, 0, 0, 574, 965, 1757, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2264, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 573, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 929, 929, 0, 0, 929, 0, 0, 0, 0,
	541, 0, 0, 541, 0, 956, 575, 0, 0, 0,
	541, 0, 0, 541, 541, 59, 577, 0, 0, 1455,
	60, 0, 0, 494, 1983, 2337, 0, 0, 0, 1983,
	0, 0, 2337, 2265, 0, 0, 0, 0, 0, 1983,
	2337, 1983, 2337, 2337, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 63, 0, 0, 0, 0, 0, 1531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 494, 0, 574, 0, 961, 0, 0, 2248, 2249,
	0, 2266, 2267, 2268, 40, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2717, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1551, 0, 1551, 0, 494, 0, 0, 494, 0, 862,
	0, 0, 494, 0, 494, 0, 573, 0, 961, 0,
	0, 0, 0, 1983, 0, 541, 2263, 2260, 2261, 2262,
	0, 1905, 1983, 0, 2259, 2257, 2258, 2250, 2251, 2252,
	2253, 2255, 2256, 0, 0, 575, 0, 64, 0, 2452,
	1062, 0, 0, 0, 59, 577, 1909, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 1905, 1062,
	0, 0, 0, 0, 0, 139, 66, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 1909, 0, 2254, 171, 0, 2485, 0,
	0, 2248, 2249, 0, 2266, 2267, 2268, 576, 0, 0,
	110, 0, 0, 494, 0, 0, 0, 1086, 0, 2500,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2269, 0, 1124, 1124, 1124, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2263,
	0, 0, 0, 1905, 2531, 0, 0, 0, 0, 0,
	0, 2264, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 1909, 0,
	166, 0, 0, 0, 0, 0, 64, 0, 0, 1064,
	0, 1068, 1179, 1074, 0, 0, 0, 0, 0, 0,
	957, 138, 0, 971, 971, 2878, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 66, 0, 67, 2254, 0,
	0, 0, 0, 0, 0, 0, 0, 2248, 2249, 0,
	2266, 2267, 2268, 0, 0, 171, 0, 0, 0, 929,
	0, 0, 2902, 0, 0, 541, 576, 2265, 0, 110,
	2248, 2249, 0, 2266, 2267, 2268, 0, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 2269, 0, 2499, 0,
	0, 173, 0, 0, 0, 0, 0, 2622, 0, 956,
	0, 0, 0, 0, 0, 2263, 970, 0, 0, 0,
	0, 0, 0, 0, 2264, 0, 1180, 1455, 0, 0,
	0, 0, 0, 1185, 0, 970, 0, 0, 2263, 1455,
	0, 0, 172, 1455, 208, 0, 0, 0, 1455, 0,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 166,
	1983, 1551, 738, 1551, 0, 0, 738, 2966, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 2260, 2261, 2262, 2254, 0, 0, 0, 2259, 2257,
	2258, 2250, 2251, 2252, 2253, 2255, 2256, 0, 1983, 929,
	0, 0, 0, 0, 0, 956, 0, 2254, 0, 0,
	2265, 0, 0, 2248, 2249, 0, 2266, 2267, 2268, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 1062, 208,
	0, 0, 961, 494, 0, 494, 0, 956, 0, 0,
	208, 0, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2269, 0, 0, 0, 0,
	2264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2263, 970, 0, 0, 0, 1352, 1353, 1354, 1355,
	1356, 0, 0, 2264, 0, 0, 0, 0, 0, 1365,
	0, 2734, 208, 0, 0, 0, 0, 1375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2260, 2261, 2262, 0, 0, 0,
	0, 2259, 2257, 2258, 2250, 2251, 2252, 2253, 2255, 2256,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 957,
	2254, 0, 0, 0, 0, 929, 2265, 0, 0, 0,
	1062, 0, 0, 0, 970, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 2270, 1455, 0, 957, 957, 2265,
	1983, 2337, 1983, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2622, 1062, 0, 0, 2269, 0,
	1983, 0, 2337, 0, 0, 1062, 1062, 494, 1983, 2337,
	0, 0, 0, 494, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2264, 0, 0, 2622,
	0, 1062, 2052, 0, 0, 0, 0, 0, 0, 970,
	0, 2622, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 1432, 1432, 0, 0, 1983, 0, 0, 0, 0,
	2260, 2261, 2262, 0, 2452, 2452, 0, 2259, 2257, 2258,
	2250, 2251, 2252, 2253, 2255, 2256, 0, 0, 0, 0,
	0, 0, 0, 2260, 2261, 2262, 0, 0, 0, 0,
	2259, 2257, 2258, 2250, 2251, 2252, 2253, 2255, 2256, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2265, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1529, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1983, 0, 2337, 0, 0, 2896, 0,
	0, 0, 0, 0, 0, 0, 494, 1558, 0, 1558,
	2622, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 2622, 0, 2622, 0, 0, 0,
	0, 2622, 0, 494, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 2260, 2261, 2262, 0,
	0, 0, 0, 2259, 2257, 2258, 2250, 2251, 2252, 2253,
	2255, 2256, 0, 0, 0, 1653, 0, 0, 0, 0,
	956, 956, 956, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 2531, 0, 0, 0, 0, 0,
	541, 0, 0, 0, 0, 0, 0, 0, 2896, 0,
	0, 0, 0, 0, 0, 0, 0, 1697, 0, 0,
	0, 0, 0, 1703, 0, 1704, 0, 1705, 0, 1706,
	0, 1707, 0, 0, 0, 0, 1983, 2337, 0, 0,
	0, 1455, 0, 494, 0, 0, 0, 0, 0, 0,
	0, 1716, 1104, 0, 0, 0, 0, 0, 0, 2337,
	0, 0, 0, 0, 0, 0, 0, 1062, 0, 1062,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3027, 0, 970, 1062, 0, 494, 0, 0, 0, 738,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 2622, 0, 0, 1983, 0, 0, 0, 0, 0,
	1731, 0, 1736, 0, 0, 0, 0, 0, 1743, 0,
	2896, 0, 0, 0, 0, 0, 760, 74, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 0, 1799, 0, 1801, 1802, 1803, 1804,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 971, 0, 1827, 1967, 74, 0, 0,
	0, 0, 0, 1365, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 2248, 2249, 0, 2266, 2267, 2268, 0,
	0, 0, 0, 0, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 1901, 0, 1912,
	0, 0, 0, 0, 1918, 1923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 715, 0, 0,
	0, 2263, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2093, 0, 0,
	1124, 957, 1124, 0, 1124, 0, 965, 965, 0, 0,
	917, 74, 0, 0, 957, 0, 0, 970, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	2254, 0, 0, 0, 0, 1302, 0, 0, 1348, 971,
	0, 0, 0, 0, 0, 0, 0, 2041, 0, 2043,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 0, 956, 0, 0, 0, 1321, 0,
	0, 0, 0, 970, 0, 1318, 0, 0, 2269, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2264, 0, 956, 0,
	956, 956, 956, 0, 2149, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 1324, 1325,
	1326, 1327, 0, 0, 0, 0, 0, 1307, 0, 0,
	0, 0, 0, 0, 0, 2158, 965, 2160, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 2173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 2265, 1316, 1317, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2260, 2261, 2262, 1323,
	0, 0, 0, 2259, 2257, 2258, 2250, 2251, 2252, 2253,
	2255, 2256, 74, 0, 74, 0, 74, 0, 0, 2175,
	2176, 957, 1340, 0, 0, 2181, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2200, 0,
	0, 0, 0, 0, 2207, 0, 0, 0, 0, 2212,
	0, 728, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2226, 0, 0, 0,
	0, 0, 0, 0, 0, 2334, 0, 957, 957, 957,
	1338, 0, 957, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 74,
	0, 0, 0, 2741, 1104, 0, 74, 2740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1923, 1923, 1923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 2388, 970, 0,
	970, 0, 0, 956, 2302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2406, 0, 0, 0,
	0, 0, 1614, 0, 2414, 0, 2416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 970, 0, 0, 970, 0, 0, 2359,
	0, 0, 0, 0, 0, 0, 0, 1625, 1610, 1615,
	1598, 1635, 1634, 970, 0, 1600, 1599, 0, 0, 0,
	0, 0, 1644, 1643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1361,
	0, 1364, 1636, 0, 1632, 1631, 0, 0, 1371, 0,
	0, 0, 0, 0, 1630, 2489, 0, 0, 0, 0,
	0, 0, 0, 0, 2425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1629, 1627, 1628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 970, 0, 0, 0, 0, 0,
	0, 1609, 0, 0, 0, 0, 0, 0, 0, 738,
	738, 0, 1618, 1613, 1619, 1620, 1621, 1622, 1623, 0,
	1617, 0, 738, 0, 0, 0, 0, 0, 0, 1641,
	1642, 0, 0, 0, 0, 0, 0, 956, 0, 2487,
	0, 970, 0, 1743, 0, 956, 0, 0, 0, 2491,
	0, 0, 2492, 0, 0, 0, 0, 0, 0, 0,
	1602, 0, 0, 0, 2497, 0, 0, 956, 0, 0,
	0, 2503, 0, 1633, 0, 0, 0, 1611, 1612, 0,
	0, 2510, 0, 0, 0, 2302, 0, 0, 956, 956,
	0, 0, 74, 0, 0, 1453, 0, 1456, 0, 0,
	0, 0, 0, 971, 2537, 2538, 0, 2539, 2540, 2541,
	0, 1626, 0, 0, 2543, 0, 0, 0, 0, 970,
	0, 2545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1603, 1604,
	1605, 1606, 2573, 2574, 0, 0, 0, 0, 0, 0,
	0, 970, 1624, 1607, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 1646, 0, 0, 0, 0, 0, 0,
	2663, 0, 2590, 0, 970, 0, 0, 0, 0, 0,
	1601, 957, 0, 1637, 1638, 1639, 1640, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 971, 1608, 0,
	2616, 0, 0, 1645, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 957, 0, 957, 957, 957,
	0, 0, 0, 0, 0, 2709, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 2712, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2689, 0, 0, 0, 0, 0,
	0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	1335, 0, 0, 0, 0, 956, 956, 1302, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	2719, 0, 1301, 0, 2722, 2723, 0, 0, 971, 970,
	1321, 0, 0, 0, 0, 0, 2725, 1318, 0, 0,
	2728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2735, 0, 2807,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 1325, 1326, 1327, 0, 0, 0, 0, 0, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 0, 0, 715, 715,
	0, 0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2793, 1345, 1346, 0,
	0, 0, 971, 0, 0, 1316, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 1322, 1817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 1347, 0, 1364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 2903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 971, 0, 0,
	957, 0, 2867, 2868, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2940, 0, 2942, 0, 0,
	0, 1323, 0, 0, 2876, 2877, 0, 0, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2884,
	0, 0, 0, 0, 1340, 1456, 0, 0, 0, 0,
	971, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2919, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 74, 0, 0, 2995, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 3015, 74, 2231, 74, 0, 0, 2232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3032, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 971,
	0, 971, 0, 0, 0, 0, 2977, 0, 0, 2980,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 971, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 957, 0, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 1335, 74,
	0, 0, 3065, 3065, 0, 1302, 971, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 0, 0, 0, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 1318, 0, 3065, 971, 0,
	0, 0, 0, 0, 1299, 1300, 971, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 1335, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1348, 0, 0, 1817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 1325,
	1326, 1327, 0, 0, 1301, 1364, 0, 1307, 3065, 0,
	0, 0, 1321, 0, 0, 0, 0, 957, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 1324, 1325, 1326, 1327, 1337, 0, 0, 0,
	0, 1307, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 0, 0, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 1336, 0, 0, 0, 917,
	0, 0, 0, 957, 0, 0, 0, 917, 917, 1345,
	1346, 917, 957, 957, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 1328, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 1323,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 1336,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 728,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0,
	0, 0, 0, 74, 0, 0, 0, 2739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 0, 0, 0,
	0, 2234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2295, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 815, 917, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 814, 219, 220,
	221, 0, 275, 821, 0, 804, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 864, 288, 289, 290, 807, 805, 806,
	811, 809, 808, 810, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 843, 844, 0,
	865, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 866, 319, 0,
	320, 846, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 816, 817, 820, 868, 917, 818, 328, 0, 0,
	0, 0, 327, 329, 336, 74, 867, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 869,
	870, 338, 339, 340, 871, 341, 342, 0, 0, 343,
	344, 345, 918, 347, 346, 0, 849, 872, 348, 349,
	873, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 874, 361,
	362, 364, 363, 0, 0, 875, 0, 819, 365, 240,
	366, 367, 0, 368, 369, 0, 923, 370, 371, 0,
	0, 372, 241, 876, 373, 877, 851, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 852, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 878, 405, 406, 407,
	408, 246, 925, 0, 413, 414, 415, 416, 417, 418,
	419, 917, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 812, 429, 410, 411, 430, 879, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 855, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 859, 860, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 813, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 915, 0, 920, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1817, 258, 259, 260, 261,
	973, 262, 974, 975, 976, 977, 214, 978, 979, 980,
	981, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 982, 269, 270, 271, 272, 273, 274, 983, 984,
	219, 220, 221, 985, 275, 222, 986, 958, 987, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 988,
	285, 0, 286, 287, 989, 864, 288, 289, 290, 990,
	991, 993, 992, 994, 995, 996, 291, 292, 498, 293,
	294, 295, 223, 224, 997, 296, 998, 297, 999, 298,
	1000, 1001, 299, 300, 1002, 301, 302, 1003, 0, 1004,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1005, 865, 1006, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1007, 318, 1008, 1009, 866,
	319, 1010, 320, 229, 1011, 230, 1012, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 868, 1013, 237, 328,
	0, 0, 0, 1014, 327, 329, 336, 1015, 867, 330,
	234, 332, 331, 333, 334, 335, 235, 1016, 236, 1017,
	337, 869, 870, 338, 339, 340, 871, 341, 342, 0,
	0, 343, 344, 345, 1018, 347, 346, 1019, 238, 872,
	348, 349, 873, 1020, 350, 351, 1021, 1022, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	874, 361, 362, 364, 363, 1023, 1024, 875, 1025, 239,
	365, 240, 366, 367, 1026, 368, 369, 1027, 1028, 370,
	371, 1029, 1030, 372, 241, 876, 373, 877, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 1031, 382, 243,
	383, 244, 384, 1032, 385, 386, 387, 388, 389, 245,
	390, 391, 1033, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 1034, 404, 878, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 1035, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 1036, 429, 410, 411, 430, 879, 431,
	247, 432, 433, 1037, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 1038, 444, 445, 1039,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	1040, 249, 250, 251, 454, 1041, 1042, 455, 456, 252,
	253, 1043, 457, 458, 0, 459, 460, 1044, 1045, 461,
	462, 463, 465, 1046, 466, 1047, 464, 467, 468, 469,
	254, 255, 1048, 1049, 470, 256, 1050, 1051, 1052, 1053,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 1954, 0, 0, 0,
	0, 0, 0, 0, 0, 1955, 258, 259, 260, 261,
	973, 262, 974, 975, 976, 977, 214, 978, 979, 980,
	981, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 982, 269, 270, 271, 272, 273, 274, 983, 984,
	219, 220, 221, 985, 275, 222, 986, 958, 987, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 988,
	285, 0, 286, 287, 989, 864, 288, 289, 290, 990,
	991, 993, 992, 994, 995, 996, 291, 292, 498, 293,
	294, 295, 223, 224, 997, 296, 998, 297, 999, 298,
	1000, 1001, 299, 300, 1002, 301, 302, 1003, 0, 1004,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1005, 865, 1006, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1007, 318, 1008, 1009, 866,
	319, 1010, 320, 229, 1011, 230, 1012, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 868, 1013, 237, 328,
	0, 0, 0, 1014, 327, 329, 336, 1015, 867, 330,
	234, 332, 331, 333, 334, 335, 235, 1016, 236, 1017,
	337, 869, 870, 338, 339, 340, 871, 341, 342, 0,
	0, 343, 344, 345, 1018, 347, 346, 1019, 238, 872,
	348, 349, 873, 1020, 350, 351, 1021, 1022, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	874, 361, 362, 364, 363, 1023, 1024, 875, 1025, 239,
	365, 240, 366, 367, 1026, 368, 369, 1027, 1028, 370,
	371, 1029, 1030, 372, 241, 876, 373, 877, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 1031, 382, 243,
	383, 244, 384, 1032, 385, 386, 387, 388, 389, 245,
	390, 391, 1033, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 1034, 404, 878, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 1035, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 1036, 429, 410, 411, 430, 879, 431,
	247, 432, 433, 1037, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 1038, 444, 445, 1039,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	1040, 249, 250, 251, 454, 1041, 1042, 455, 456, 252,
	253, 1043, 457, 458, 0, 459, 460, 1044, 1045, 461,
	462, 463, 465, 1046, 466, 1047, 464, 467, 468, 469,
	254, 255, 1048, 1049, 470, 256, 1050, 1051, 1052, 1053,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2764, 258, 259, 260,
	261, 973, 262, 974, 975, 976, 977, 214, 978, 979,
	980, 981, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 982, 269, 270, 271, 272, 273, 274, 983,
	984, 219, 220, 221, 985, 275, 222, 986, 958, 987,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	988, 285, 0, 286, 287, 989, 864, 288, 289, 290,
	990, 991, 993, 992, 994, 995, 996, 291, 292, 498,
	293, 294, 295, 223, 224, 997, 296, 998, 297, 999,
	298, 1000, 1001, 299, 300, 1002, 301, 302, 1003, 0,
	1004, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1005, 865, 1006, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1007, 318, 1008, 1009,
	866, 319, 1010, 320, 229, 1011, 230, 1012, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 868, 1013, 237,
	328, 0, 0, 0, 1014, 327, 329, 336, 1015, 867,
	330, 234, 332, 331, 333, 334, 335, 235, 1016, 236,
	1017, 337, 869, 870, 338, 339, 340, 871, 341, 342,
	0, 0, 343, 344, 345, 1018, 347, 346, 1019, 238,
	872, 348, 349, 873, 1020, 350, 351, 1021, 1022, 352,
	0, 353, 933, 932, 354, 355, 356, 357, 359, 360,
	358, 874, 361, 362, 364, 363, 1023, 1024, 875, 1025,
	239, 365, 240, 366, 367, 1026, 368, 369, 1027, 1028,
	370, 371, 1029, 1030, 372, 241, 876, 373, 877, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 1031, 382,
	243, 383, 244, 384, 1032, 385, 386, 387, 388, 389,
	245, 390, 391, 1033, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 1034, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 1035, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 1036, 429, 410, 411, 430, 879,
	431, 247, 432, 433, 1037, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 1038, 444, 445,
	1039, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 1040, 249, 250, 251, 454, 1041, 1042, 455, 456,
	252, 253, 1043, 457, 458, 0, 459, 460, 1044, 1045,
	461, 462, 463, 465, 1046, 466, 1047, 464, 467, 468,
	469, 254, 255, 1048, 1049, 470, 256, 1050, 1051, 1052,
	1053, 471, 472, 257, 473, 474, 475, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2871, 258, 259, 260, 261, 973, 262, 974,
	975, 976, 977, 214, 978, 979, 980, 981, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 982, 269,
	270, 271, 272, 273, 274, 983, 984, 219, 220, 221,
	985, 275, 222, 986, 958, 987, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 988, 285, 0, 286,
	287, 989, 864, 288, 289, 290, 990, 991, 993, 992,
	994, 995, 996, 291, 292, 498, 293, 294, 295, 223,
	224, 997, 296, 998, 297, 999, 298, 1000, 1001, 299,
	300, 1002, 301, 302, 1003, 0, 1004, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 1005, 865,
	1006, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 1007, 318, 1008, 1009, 866, 319, 1010, 320,
	229, 1011, 230, 1012, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 868, 1013, 237, 328, 0, 0, 0,
	1014, 327, 329, 336, 1015, 867, 330, 234, 332, 331,
	333, 334, 335, 235, 1016, 236, 1017, 337, 869, 870,
	338, 339, 340, 871, 341, 342, 0, 0, 343, 344,
	345, 1018, 347, 346, 1019, 238, 872, 348, 349, 873,
	1020, 350, 351, 1021, 1022, 352, 0, 353, 933, 932,
	354, 355, 356, 357, 359, 360, 358, 874, 361, 362,
	364, 363, 1023, 1024, 875, 1025, 239, 365, 240, 366,
	367, 1026, 368, 369, 1027, 1028, 370, 371, 1029, 1030,
	372, 241, 876, 373, 877, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 1031, 382, 243, 383, 244, 384,
	1032, 385, 386, 387, 388, 389, 245, 390, 391, 1033,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 1034, 404, 878, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	1035, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	1036, 429, 410, 411, 430, 879, 431, 247, 432, 433,
	1037, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 1038, 444, 445, 1039, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 1040, 249, 250,
	251, 454, 1041, 1042, 455, 456, 252, 253, 1043, 457,
	458, 0, 459, 460, 1044, 1045, 461, 462, 463, 465,
	1046, 466, 1047, 464, 467, 468, 469, 254, 255, 1048,
	1049, 470, 256, 1050, 1051, 1052, 1053, 471, 472, 257,
	473, 474, 475, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2513, 258,
	259, 260, 261, 973, 262, 974, 975, 976, 977, 214,
	978, 979, 980, 981, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 982, 269, 270, 271, 272, 273,
	274, 983, 984, 219, 220, 221, 985, 275, 222, 986,
	958, 987, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 988, 285, 0, 286, 287, 989, 864, 288,
	289, 290, 990, 991, 993, 992, 994, 995, 996, 291,
	292, 498, 293, 294, 295, 223, 224, 997, 296, 998,
	297, 999, 298, 1000, 1001, 299, 300, 1002, 301, 302,
	1003, 0, 1004, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 1005, 865, 1006, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 1007, 318,
	1008, 1009, 866, 319, 1010, 320, 229, 1011, 230, 1012,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 868,
	1013, 237, 328, 0, 0, 0, 1014, 327, 329, 336,
	1015, 867, 330, 234, 332, 331, 333, 334, 335, 235,
	1016, 236, 1017, 337, 869, 870, 338, 339, 340, 871,
	341, 342, 0, 0, 343, 344, 345, 1018, 347, 346,
	1019, 238, 872, 348, 349, 873, 1020, 350, 351, 1021,
	1022, 352, 0, 353, 933, 932, 354, 355, 356, 357,
	359, 360, 358, 874, 361, 362, 364, 363, 1023, 1024,
	875, 1025, 239, 365, 240, 366, 367, 1026, 368, 369,
	1027, 1028, 370, 371, 1029, 1030, 372, 241, 876, 373,
	877, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	1031, 382, 243, 383, 244, 384, 1032, 385, 386, 387,
	388, 389, 245, 390, 391, 1033, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 1034,
	404, 878, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 1035, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 1036, 429, 410, 411,
	430, 879, 431, 247, 432, 433, 1037, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 1038,
	444, 445, 1039, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 1040, 249, 250, 251, 454, 1041, 1042,
	455, 456, 252, 253, 1043, 457, 458, 0, 459, 460,
	1044, 1045, 461, 462, 463, 465, 1046, 466, 1047, 464,
	467, 468, 469, 254, 255, 1048, 1049, 470, 256, 1050,
	1051, 1052, 1053, 471, 472, 257, 473, 474, 475, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2504, 258, 259, 260, 261, 973,
	262, 974, 975, 976, 977, 214, 978, 979, 980, 981,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	982, 269, 270, 271, 272, 273, 274, 983, 984, 219,
	220, 221, 985, 275, 222, 986, 958, 987, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 988, 285,
	0, 286, 287, 989, 864, 288, 289, 290, 990, 991,
	993, 992, 994, 995, 996, 291, 292, 498, 293, 294,
	295, 223, 224, 997, 296, 998, 297, 999, 298, 1000,
	1001, 299, 300, 1002, 301, 302, 1003, 0, 1004, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1005, 865, 1006, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1007, 318, 1008, 1009, 866, 319,
	1010, 320, 229, 1011, 230, 1012, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 868, 1013, 237, 328, 0,
	0, 0, 1014, 327, 329, 336, 1015, 867, 330, 234,
	332, 331, 333, 334, 335, 235, 1016, 236, 1017, 337,
	869, 870, 338, 339, 340, 871, 341, 342, 0, 0,
	343, 344, 345, 1018, 347, 346, 1019, 238, 872, 348,
	349, 873, 1020, 350, 351, 1021, 1022, 352, 0, 353,
	933, 932, 354, 355, 356, 357, 359, 360, 358, 874,
	361, 362, 364, 363, 1023, 1024, 875, 1025, 239, 365,
	240, 366, 367, 1026, 368, 369, 1027, 1028, 370, 371,
	1029, 1030, 372, 241, 876, 373, 877, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 1031, 382, 243, 383,
	244, 384, 1032, 385, 386, 387, 388, 389, 245, 390,
	391, 1033, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 1034, 404, 878, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 1035, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 1036, 429, 410, 411, 430, 879, 431, 247,
	432, 433, 1037, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 1038, 444, 445, 1039, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 1040,
	249, 250, 251, 454, 1041, 1042, 455, 456, 252, 253,
	1043, 457, 458, 0, 459, 460, 1044, 1045, 461, 462,
	463, 465, 1046, 466, 1047, 464, 467, 468, 469, 254,
	255, 1048, 1049, 470, 256, 1050, 1051, 1052, 1053, 471,
	472, 257, 473, 474, 475, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2392, 258, 259, 260, 261, 973, 262, 974, 975, 976,
	977, 214, 978, 979, 980, 981, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 982, 269, 270, 271,
	272, 273, 274, 983, 984, 219, 220, 221, 985, 275,
	222, 986, 958, 987, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 988, 285, 0, 286, 287, 989,
	864, 288, 289, 290, 990, 991, 993, 992, 994, 995,
	996, 291, 292, 498, 293, 294, 295, 223, 224, 997,
	296, 998, 297, 999, 298, 1000, 1001, 299, 300, 1002,
	301, 302, 1003, 0, 1004, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1005, 865, 1006, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	1007, 318, 1008, 1009, 866, 319, 1010, 320, 229, 1011,
	230, 1012, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 868, 1013, 237, 328, 0, 0, 0, 1014, 327,
	329, 336, 1015, 867, 330, 234, 332, 331, 333, 334,
	335, 235, 1016, 236, 1017, 337, 869, 870, 338, 339,
	340, 871, 341, 342, 0, 0, 343, 344, 345, 1018,
	347, 346, 1019, 238, 872, 348, 349, 873, 1020, 350,
	351, 1021, 1022, 352, 0, 353, 933, 932, 354, 355,
	356, 357, 359, 360, 358, 874, 361, 362, 364, 363,
	1023, 1024, 875, 1025, 239, 365, 240, 366, 367, 1026,
	368, 369, 1027, 1028, 370, 371, 1029, 1030, 372, 241,
	876, 373, 877, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 1031, 382, 243, 383, 244, 384, 1032, 385,
	386, 387, 388, 389, 245, 390, 391, 1033, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 1034, 404, 878, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 1035, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 1036, 429,
	410, 411, 430, 879, 431, 247, 432, 433, 1037, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 1038, 444, 445, 1039, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 1040, 249, 250, 251, 454,
	1041, 1042, 455, 456, 252, 253, 1043, 457, 458, 0,
	459, 460, 1044, 1045, 461, 462, 463, 465, 1046, 466,
	1047, 464, 467, 468, 469, 254, 255, 1048, 1049, 470,
	256, 1050, 1051, 1052, 1053, 471, 472, 257, 473, 474,
	475, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1841, 258, 259, 260,
	261, 973, 262, 974, 975, 976, 977, 214, 978, 979,
	980, 981, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 982, 269, 270, 271, 272, 273, 274, 983,
	984, 219, 220, 221, 985, 275, 222, 986, 958, 987,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	988, 285, 0, 286, 287, 989, 864, 288, 289, 290,
	990, 991, 993, 992, 994, 995, 996, 291, 292, 498,
	293, 294, 295, 223, 224, 997, 296, 998, 297, 999,
	298, 1000, 1001, 299, 300, 1002, 301, 302, 1003, 0,
	1004, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1005, 865, 1006, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1007, 318, 1008, 1009,
	866, 319, 1010, 320, 229, 1011, 230, 1012, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 868, 1013, 237,
	328, 0, 0, 0, 1014, 327, 329, 336, 1015, 867,
	330, 234, 332, 331, 333, 334, 335, 235, 1016, 236,
	1017, 337, 869, 870, 338, 339, 340, 871, 341, 342,
	0, 0, 343, 344, 345, 1018, 347, 346, 1019, 238,
	872, 348, 349, 873, 1020, 350, 351, 1021, 1022, 352,
	0, 353, 933, 932, 354, 355, 356, 357, 359, 360,
	358, 874, 361, 362, 364, 363, 1023, 1024, 875, 1025,
	239, 365, 240, 366, 367, 1026, 368, 369, 1027, 1028,
	370, 371, 1029, 1030, 372, 241, 876, 373, 877, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 1031, 382,
	243, 383, 244, 384, 1032, 385, 386, 387, 388, 389,
	245, 390, 391, 1033, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 1034, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 1035, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 1036, 429, 410, 411, 430, 879,
	431, 247, 432, 433, 1037, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 1038, 444, 445,
	1039, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 1040, 249, 250, 251, 454, 1041, 1042, 455, 456,
	252, 253, 1043, 457, 458, 0, 459, 460, 1044, 1045,
	461, 462, 463, 465, 1046, 466, 1047, 464, 467, 468,
	469, 254, 255, 1048, 1049, 470, 256, 1050, 1051, 1052,
	1053, 471, 472, 257, 473, 474, 475, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1521, 258, 259, 260, 261, 973, 262, 974,
	975, 976, 977, 214, 978, 979, 980, 981, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 982, 269,
	270, 271, 272, 273, 274, 983, 984, 219, 220, 221,
	985, 275, 222, 986, 958, 987, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 988, 285, 0, 286,
	287, 989, 864, 288, 289, 290, 990, 991, 993, 992,
	994, 995, 996, 291, 292, 498, 293, 294, 295, 223,
	224, 997, 296, 998, 297, 999, 298, 1000, 1001, 299,
	300, 1002, 301, 302, 1003, 0, 1004, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 1005, 865,
	1006, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 1007, 318, 1008, 1009, 866, 319, 1010, 320,
	229, 1011, 230, 1012, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 868, 1013, 237, 328, 0, 0, 0,
	1014, 327, 329, 336, 1015, 867, 330, 234, 332, 331,
	333, 334, 335, 235, 1016, 236, 1017, 337, 869, 870,
	338, 339, 340, 871, 341, 342, 0, 0, 343, 344,
	345, 1018, 347, 346, 1019, 238, 872, 348, 349, 873,
	1020, 350, 351, 1021, 1022, 352, 0, 353, 933, 932,
	354, 355, 356, 357, 359, 360, 358, 874, 361, 362,
	364, 363, 1023, 1024, 875, 1025, 239, 365, 240, 366,
	367, 1026, 368, 369, 1027, 1028, 370, 371, 1029, 1030,
	372, 241, 876, 373, 877, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 1031, 382, 243, 383, 244, 384,
	1032, 385, 386, 387, 388, 389, 245, 390, 391, 1033,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 1034, 404, 878, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	1035, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	1036, 429, 410, 411, 430, 879, 431, 247, 432, 433,
	1037, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 1038, 444, 445, 1039, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 1040, 249, 250,
	251, 454, 1041, 1042, 455, 456, 252, 253, 1043, 457,
	458, 0, 459, 460, 1044, 1045, 461, 462, 463, 465,
	1046, 466, 1047, 464, 467, 468, 469, 254, 255, 1048,
	1049, 470, 256, 1050, 1051, 1052, 1053, 471, 472, 257,
	473, 474, 475, 1848, 0, 779, 767, 768, 765, 766,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 1845, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 1846, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 1844, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 1847, 0, 0, 0,
	0, 0, 0, 754, 1842, 0, 0, 0, 729, 757,
	779, 767, 768, 765, 766, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 171, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 173,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	1151, 861, 0, 0, 470, 256, 0, 0, 0, 165,
	471, 472, 257, 473, 474, 475, 745, 166, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 779, 767, 768, 765, 766, 758, 0, 1368, 0,
	0, 0, 0, 0, 757, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 815, 761, 0,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 0, 269, 789, 788, 272, 273, 274, 762,
	814, 839, 840, 221, 0, 275, 821, 0, 804, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	807, 805, 806, 811, 809, 808, 810, 291, 292, 498,
	293, 824, 295, 841, 842, 747, 296, 0, 297, 0,
	298, 0, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 752, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 816, 817, 820, 868, 0, 818,
	798, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 749, 748, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 744, 0, 875, 775,
	819, 365, 850, 366, 367, 0, 800, 801, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 753, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 171, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 812, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 855, 0, 444, 445,
	173, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 0, 455, 456,
	859, 860, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 813, 466, 0, 797, 467, 468,
	469, 1151, 861, 0, 0, 470, 256, 0, 0, 0,
	165, 471, 472, 257, 473, 474, 475, 745, 166, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 779, 767, 768, 765, 766, 758, 0, 1368,
	0, 0, 0, 0, 0, 757, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 815, 761,
	0, 0, 0, 263, 264, 265, 215, 836, 799, 837,
	787, 823, 838, 1919, 269, 789, 788, 272, 273, 274,
	762, 814, 839, 840, 221, 0, 275, 821, 0, 804,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 864, 288, 289,
	290, 807, 805, 806, 811, 809, 808, 810, 291, 292,
	498, 293, 824, 295, 841, 842, 747, 296, 0, 297,
	0, 298, 0, 0, 825, 300, 0, 301, 302, 0,
	0, 0, 752, 306, 303, 304, 307, 310, 305, 311,
	312, 843, 844, 774, 865, 0, 0, 0, 0, 0,
	313, 314, 845, 826, 827, 0, 317, 0, 318, 0,
	1924, 866, 319, 0, 320, 846, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 816, 817, 820, 868, 0,
	818, 798, 0, 0, 0, 0, 327, 329, 336, 0,
	867, 330, 847, 802, 828, 829, 830, 831, 848, 0,
	803, 0, 337, 869, 870, 338, 339, 340, 871, 832,
	833, 0, 0, 343, 344, 345, 0, 347, 346, 1920,
	849, 872, 348, 349, 873, 0, 350, 351, 0, 0,
	352, 0, 353, 749, 748, 354, 355, 356, 357, 359,
	791, 358, 874, 361, 362, 364, 363, 744, 0, 875,
	775, 819, 365, 850, 366, 367, 0, 800, 801, 0,
	0, 370, 371, 0, 0, 372, 241, 876, 373, 877,
	851, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 852, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 853, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	878, 405, 406, 407, 408, 753, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 792, 793,
	794, 795, 421, 427, 428, 812, 429, 410, 411, 430,
	879, 431, 854, 796, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 834, 438, 439, 440, 855, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	790, 453, 0, 856, 857, 858, 835, 0, 1921, 455,
	456, 859, 860, 773, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 813, 466, 0, 797, 467,
	468, 469, 254, 861, 0, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 745, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 741, 742, 779, 767, 768, 765, 766, 758, 0,
	754, 0, 0, 0, 0, 0, 757, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 815,
	761, 0, 0, 0, 263, 264, 265, 215, 836, 799,
	837, 787, 823, 838, 0, 269, 789, 788, 272, 273,
	274, 762, 814, 839, 840, 221, 0, 275, 821, 0,
	804, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 864, 288,
	289, 290, 807, 805, 806, 811, 809, 808, 810, 291,
	292, 498, 293, 824, 295, 841, 842, 747, 296, 0,
	297, 0, 298, 0, 0, 825, 300, 0, 301, 302,
	0, 0, 0, 752, 306, 303, 304, 307, 310, 305,
	311, 312, 843, 844, 774, 865, 0, 0, 0, 0,
	0, 313, 314, 845, 826, 827, 0, 317, 0, 318,
	0, 0, 866, 319, 0, 320, 846, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 816, 817, 820, 868,
	0, 818, 798, 0, 0, 0, 0, 327, 329, 336,
	0, 867, 330, 847, 802, 828, 829, 830, 831, 848,
	0, 803, 0, 337, 869, 870, 338, 339, 340, 871,
	832, 833, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 849, 872, 348, 349, 873, 0, 350, 351, 0,
	0, 352, 0, 353, 749, 748, 354, 355, 356, 357,
	359, 791, 358, 874, 361, 362, 364, 363, 744, 2681,
	875, 775, 819, 365, 850, 366, 367, 0, 800, 801,
	0, 0, 370, 371, 0, 0, 372, 241, 876, 373,
	877, 851, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 852, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 853, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 878, 405, 406, 407, 408, 753, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 792,
	793, 794, 795, 421, 427, 428, 812, 429, 410, 411,
	430, 879, 431, 854, 796, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 834, 438, 439, 440, 855, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 790, 453, 0, 856, 857, 858, 835, 0, 0,
	455, 456, 859, 860, 773, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 813, 466, 0, 797,
	467, 468, 469, 254, 861, 0, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 745,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 742, 1433, 779, 767, 768, 765, 766,
	758, 754, 0, 0, 0, 0, 0, 757, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 1745, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 1744, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 737, 757,
	779, 767, 768, 765, 766, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 739, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 745, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 779, 767, 768, 765, 766, 758, 0, 754, 0,
	0, 0, 0, 0, 757, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 815, 761, 0,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 0, 269, 789, 788, 272, 273, 274, 762,
	814, 839, 840, 221, 0, 275, 821, 0, 804, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	807, 805, 806, 811, 809, 808, 810, 291, 292, 498,
	293, 824, 295, 841, 842, 747, 296, 0, 297, 0,
	298, 0, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 752, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 816, 817, 820, 868, 0, 818,
	798, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 749, 748, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 744, 0, 875, 775,
	819, 365, 850, 366, 367, 0, 800, 801, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 753, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 812, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 855, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 0, 455, 456,
	859, 860, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 813, 466, 0, 797, 467, 468,
	469, 254, 861, 2515, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 745, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 779, 767, 768, 765, 766, 758, 0, 754,
	0, 0, 0, 0, 0, 757, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 815, 761,
	0, 0, 0, 263, 264, 265, 215, 836, 799, 837,
	787, 823, 838, 0, 269, 789, 788, 272, 273, 274,
	762, 814, 839, 840, 221, 0, 275, 821, 0, 804,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 864, 288, 289,
	290, 807, 805, 806, 811, 809, 808, 810, 291, 292,
	498, 293, 824, 295, 841, 842, 747, 296, 0, 297,
	0, 298, 0, 0, 825, 300, 0, 301, 302, 0,
	0, 0, 752, 306, 303, 304, 307, 310, 305, 311,
	312, 843, 844, 774, 865, 0, 0, 0, 0, 0,
	313, 314, 845, 826, 827, 0, 317, 0, 318, 0,
	0, 866, 319, 0, 320, 846, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 816, 817, 820, 868, 0,
	818, 798, 0, 0, 0, 0, 327, 329, 336, 0,
	867, 330, 847, 802, 828, 829, 830, 831, 848, 0,
	803, 0, 337, 869, 870, 338, 339, 340, 871, 832,
	833, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	849, 872, 348, 349, 873, 0, 350, 351, 0, 0,
	352, 0, 353, 749, 748, 354, 355, 356, 357, 359,
	791, 358, 874, 361, 362, 364, 363, 744, 0, 875,
	775, 819, 365, 850, 366, 367, 0, 800, 801, 739,
	0, 370, 371, 0, 0, 372, 241, 876, 373, 877,
	851, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 852, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 853, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	878, 405, 406, 407, 408, 753, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 792, 793,
	794, 795, 421, 427, 428, 812, 429, 410, 411, 430,
	879, 431, 854, 796, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 834, 438, 439, 440, 855, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	790, 453, 0, 856, 857, 858, 835, 0, 0, 455,
	456, 859, 860, 773, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 813, 466, 0, 797, 467,
	468, 469, 254, 861, 0, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 745, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 741, 742, 779, 767, 768, 765, 766, 758, 0,
	754, 0, 0, 0, 0, 0, 757, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 815,
	761, 0, 0, 0, 263, 264, 265, 215, 836, 799,
	837, 787, 823, 838, 0, 269, 789, 788, 272, 273,
	274, 762, 814, 839, 840, 221, 0, 275, 821, 0,
	804, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 864, 288,
	289, 290, 807, 805, 806, 811, 809, 808, 810, 291,
	292, 498, 293, 824, 295, 841, 842, 747, 296, 0,
	297, 0, 298, 0, 0, 825, 300, 0, 301, 302,
	0, 0, 0, 752, 306, 303, 304, 307, 310, 305,
	311, 312, 843, 844, 774, 865, 0, 0, 0, 0,
	0, 313, 314, 845, 826, 827, 0, 317, 0, 318,
	0, 0, 866, 319, 0, 320, 846, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 816, 817, 820, 868,
	0, 818, 798, 0, 0, 0, 0, 327, 329, 336,
	0, 867, 330, 847, 802, 828, 829, 830, 831, 848,
	0, 803, 0, 337, 869, 870, 338, 339, 340, 871,
	832, 833, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 849, 872, 348, 349, 873, 0, 350, 351, 0,
	0, 352, 0, 353, 749, 748, 354, 355, 356, 357,
	359, 791, 358, 874, 361, 362, 364, 363, 744, 0,
	875, 775, 819, 365, 850, 366, 367, 0, 800, 801,
	0, 0, 370, 371, 0, 0, 372, 241, 876, 373,
	877, 851, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 852, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 853, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 878, 405, 406, 407, 408, 753, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 792,
	793, 794, 795, 421, 427, 428, 812, 429, 410, 411,
	430, 879, 431, 854, 796, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 834, 438, 439, 440, 855, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 790, 453, 0, 856, 857, 858, 835, 0, 0,
	455, 456, 859, 860, 773, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 813, 466, 0, 797,
	467, 468, 469, 254, 861, 0, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 745,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 742, 1433, 779, 767, 768, 765, 766,
	758, 754, 0, 0, 0, 0, 0, 757, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 1924, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 1911, 757,
	779, 767, 768, 765, 766, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 745, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 1900, 757, 779, 767, 768, 765, 766,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 1898, 757,
	779, 767, 768, 765, 766, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 745, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 1896, 757, 779, 767, 768, 765, 766,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 1893, 757,
	1885, 767, 768, 765, 766, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 1888, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 1889,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 1890, 1887, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 1891, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 1886, 475, 745, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 1882, 757, 1885, 767, 768, 765, 766,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 1888, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 1889, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 1890, 1887,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 1891, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 1886,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 779, 767, 768, 765,
	766, 758, 0, 754, 0, 0, 0, 0, 0, 757,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 815, 761, 0, 0, 0, 263, 264, 265,
	215, 836, 799, 837, 787, 823, 838, 0, 269, 789,
	788, 272, 273, 274, 762, 814, 839, 840, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 824, 295, 841, 842,
	747, 296, 0, 297, 0, 298, 0, 0, 825, 300,
	0, 301, 302, 0, 0, 0, 752, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 774, 865, 0,
	0, 0, 0, 0, 313, 314, 845, 826, 827, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 816,
	817, 820, 868, 0, 818, 798, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 847, 802, 828, 829,
	830, 831, 848, 0, 803, 0, 337, 869, 870, 338,
	339, 340, 871, 832, 833, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 849, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 749, 748, 354,
	355, 356, 357, 359, 791, 358, 874, 361, 362, 364,
	363, 744, 0, 875, 775, 819, 365, 850, 366, 367,
	0, 800, 801, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 853, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 753,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 792, 793, 794, 795, 421, 427, 428, 812,
	429, 410, 411, 430, 879, 431, 854, 796, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 834, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 790, 453, 0, 856, 857, 858,
	835, 0, 0, 455, 456, 859, 860, 773, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 797, 467, 468, 469, 254, 861, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 745, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 0, 0, 0,
	0, 0, 1373, 0, 754, 0, 0, 0, 0, 0,
	757, 779, 767, 768, 765, 766, 758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 1732, 262, 0, 0, 0, 0, 815, 761, 0,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 0, 269, 789, 788, 272, 273, 274, 762,
	814, 839, 840, 221, 0, 275, 821, 0, 804, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	807, 805, 806, 811, 809, 808, 810, 291, 292, 498,
	293, 824, 295, 841, 842, 747, 296, 0, 297, 0,
	298, 0, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 752, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 816, 817, 820, 868, 0, 818,
	798, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 749, 748, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 744, 0, 875, 775,
	819, 365, 850, 366, 367, 0, 800, 801, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 753, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 812, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 855, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 0, 455, 456,
	859, 860, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 813, 466, 0, 797, 467, 468,
	469, 254, 861, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 745, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 0, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 0, 1076, 757, 779, 767, 768, 765,
	766, 758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 815, 761, 0, 0, 0, 263, 264, 265,
	215, 836, 799, 837, 787, 823, 838, 0, 269, 789,
	788, 272, 273, 274, 762, 814, 839, 840, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 824, 295, 841, 842,
	747, 296, 0, 297, 0, 298, 0, 0, 825, 300,
	0, 301, 302, 0, 0, 0, 752, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 774, 865, 0,
	0, 0, 0, 0, 313, 314, 845, 826, 827, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 1075,
	817, 820, 868, 0, 818, 798, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 847, 802, 828, 829,
	830, 831, 848, 0, 803, 0, 337, 869, 870, 338,
	339, 340, 871, 832, 833, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 849, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 749, 748, 354,
	355, 356, 357, 359, 791, 358, 874, 361, 362, 364,
	363, 744, 0, 875, 775, 819, 365, 850, 366, 367,
	0, 800, 801, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 853, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 753,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 792, 793, 794, 795, 421, 427, 428, 812,
	429, 410, 411, 430, 879, 431, 854, 796, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 834, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 790, 453, 0, 856, 857, 858,
	835, 0, 0, 455, 456, 859, 860, 773, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 797, 467, 468, 469, 254, 861, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 745, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 0, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 0, 0, 1070,
	757, 779, 767, 768, 765, 766, 758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 815, 761, 0,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 0, 269, 789, 788, 272, 273, 274, 762,
	814, 839, 840, 221, 0, 275, 821, 0, 804, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	807, 805, 806, 811, 809, 808, 810, 291, 292, 498,
	293, 824, 295, 841, 842, 747, 296, 0, 297, 0,
	298, 0, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 752, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1069, 817, 820, 868, 0, 818,
	798, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 749, 748, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 744, 0, 875, 775,
	819, 365, 850, 366, 367, 0, 800, 801, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 753, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 812, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 855, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 0, 455, 456,
	859, 860, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 813, 466, 0, 797, 467, 468,
	469, 254, 861, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 745, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 0, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 0, 1065, 757, 779, 767, 768, 765,
	766, 758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 815, 761, 0, 0, 0, 263, 264, 265,
	215, 836, 799, 837, 787, 823, 838, 0, 269, 789,
	788, 272, 273, 274, 762, 814, 839, 840, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 824, 295, 841, 842,
	747, 296, 0, 297, 0, 298, 0, 0, 825, 300,
	0, 301, 302, 0, 0, 0, 752, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 774, 865, 0,
	0, 0, 0, 0, 313, 314, 845, 826, 827, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 816,
	817, 820, 868, 0, 818, 798, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 847, 802, 828, 829,
	830, 831, 848, 0, 803, 0, 337, 869, 870, 338,
	339, 340, 871, 832, 833, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 849, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 749, 748, 354,
	355, 356, 357, 359, 791, 358, 874, 361, 362, 364,
	363, 744, 0, 875, 775, 819, 365, 850, 366, 367,
	0, 800, 801, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 853, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 753,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 792, 793, 794, 795, 421, 427, 428, 812,
	429, 410, 411, 430, 879, 431, 854, 796, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 834, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 790, 453, 0, 856, 857, 858,
	835, 0, 0, 455, 456, 859, 860, 773, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 797, 467, 468, 469, 254, 861, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 745, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 779, 767, 768,
	765, 766, 758, 0, 754, 0, 0, 0, 0, 0,
	757, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 815, 761, 0, 0, 0, 263, 264,
	265, 215, 836, 799, 837, 787, 823, 838, 0, 269,
	789, 788, 272, 273, 274, 762, 814, 839, 840, 221,
	0, 275, 821, 0, 804, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 864, 288, 289, 290, 807, 805, 806, 811,
	809, 808, 810, 291, 292, 498, 293, 824, 295, 841,
	842, 747, 296, 0, 297, 0, 298, 0, 0, 825,
	300, 0, 301, 302, 0, 0, 0, 752, 306, 303,
	304, 307, 310, 305, 311, 312, 843, 844, 774, 865,
	0, 0, 0, 0, 0, 313, 314, 845, 826, 827,
	0, 317, 0, 318, 0, 0, 866, 319, 0, 320,
	846, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	816, 817, 820, 868, 0, 818, 798, 0, 0, 0,
	0, 327, 329, 336, 0, 867, 330, 847, 802, 828,
	829, 830, 831, 848, 0, 803, 0, 337, 869, 870,
	338, 339, 340, 871, 832, 833, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 849, 872, 348, 349, 873,
	0, 350, 351, 0, 0, 352, 0, 353, 749, 748,
	354, 355, 356, 357, 359, 791, 358, 874, 361, 362,
	364, 363, 744, 0, 875, 775, 819, 365, 850, 366,
	367, 0, 800, 801, 0, 0, 370, 371, 0, 0,
	372, 241, 876, 373, 877, 851, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 852, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 853, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 878, 405, 406, 407, 408,
	753, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 792, 793, 794, 795, 421, 427, 428,
	812, 429, 410, 411, 430, 879, 431, 854, 796, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 834, 438,
	439, 440, 855, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 790, 453, 0, 856, 857,
	858, 835, 0, 0, 455, 456, 859, 860, 773, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	813, 466, 0, 797, 467, 468, 469, 254, 861, 0,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 745, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 741, 742, 779, 767,
	768, 765, 766, 758, 0, 754, 0, 0, 0, 0,
	0, 757, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 815, 761, 0, 0, 0, 263,
	264, 265, 215, 836, 799, 837, 787, 823, 838, 0,
	269, 789, 788, 272, 273, 274, 762, 814, 839, 840,
	221, 0, 275, 821, 0, 804, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 864, 288, 289, 3064, 807, 805, 806,
	811, 809, 808, 810, 291, 292, 498, 293, 824, 295,
	841, 842, 747, 296, 0, 297, 0, 298, 0, 0,
	825, 300, 0, 301, 302, 0, 0, 0, 752, 306,
	303, 304, 307, 310, 305, 311, 312, 843, 844, 774,
	865, 0, 0, 0, 0, 0, 313, 314, 845, 826,
	827, 0, 317, 0, 318, 0, 0, 866, 319, 0,
	320, 846, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 816, 817, 820, 868, 0, 818, 798, 0, 0,
	0, 0, 327, 329, 336, 0, 867, 330, 847, 802,
	828, 829, 830, 831, 848, 0, 803, 0, 337, 869,
	870, 338, 339, 340, 871, 832, 833, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 849, 872, 348, 349,
	873, 0, 350, 351, 0, 0, 352, 0, 353, 749,
	748, 354, 355, 356, 357, 359, 791, 358, 874, 361,
	362, 364, 363, 744, 0, 875, 775, 819, 365, 850,
	366, 367, 0, 800, 801, 0, 0, 370, 371, 0,
	0, 372, 241, 876, 373, 877, 851, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 852, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 853, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 878, 405, 406, 407,
	408, 753, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 792, 793, 794, 795, 421, 427,
	428, 812, 429, 410, 411, 430, 879, 431, 854, 796,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 834,
	438, 439, 440, 855, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 790, 453, 0, 856,
	857, 858, 835, 0, 0, 455, 456, 859, 860, 773,
	457, 458, 0, 3063, 460, 0, 0, 461, 462, 463,
	465, 813, 466, 0, 797, 467, 468, 469, 254, 861,
	0, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 745, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 741, 742, 779,
	767, 768, 765, 766, 758, 0, 754, 0, 0, 0,
	0, 0, 757, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 3062, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 3064, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	295, 841, 842, 747, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	749, 748, 354, 355, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 744, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 3063, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 254,
	861, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 745, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	779, 767, 768, 765, 766, 758, 0, 754, 0, 0,
	0, 0, 0, 757, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 0, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 0, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 779, 767, 768, 765,
	766, 758, 0, 0, 1908, 0, 0, 0, 0, 1906,
	1907, 0, 258, 259, 260, 261, 0, 262, 754, 0,
	0, 0, 815, 761, 757, 0, 0, 263, 264, 265,
	0, 836, 799, 837, 787, 823, 838, 0, 269, 789,
	788, 272, 273, 274, 762, 814, 839, 840, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 3064, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 824, 295, 841, 842,
	747, 296, 0, 297, 0, 298, 0, 0, 825, 300,
	0, 301, 302, 0, 0, 0, 752, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 774, 865, 0,
	0, 0, 0, 0, 313, 314, 845, 826, 827, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 816,
	817, 820, 0, 0, 818, 798, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 847, 802, 828, 829,
	830, 831, 848, 0, 803, 0, 337, 0, 0, 338,
	339, 340, 871, 832, 833, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 849, 872, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 749, 748, 354,
	355, 356, 357, 359, 791, 358, 874, 361, 362, 364,
	363, 744, 0, 0, 775, 819, 365, 850, 366, 367,
	0, 800, 801, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 853, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 753,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 792, 793, 794, 795, 421, 427, 428, 812,
	429, 410, 411, 430, 0, 431, 854, 796, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 834, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 790, 453, 0, 856, 857, 858,
	835, 0, 0, 455, 456, 859, 860, 773, 457, 458,
	0, 3063, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 797, 467, 468, 469, 254, 861, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 729, 0,
	931, 0, 0, 0, 0, 741, 742, 0, 0, 0,
	0, 0, 0, 0, 754, 0, 258, 259, 260, 261,
	757, 262, 0, 0, 0, 0, 815, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 814,
	219, 220, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 0, 865, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 869, 870, 338, 339, 340, 871, 341, 342, 0,
	0, 343, 344, 345, 918, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	874, 361, 362, 364, 363, 0, 0, 875, 0, 819,
	365, 240, 366, 367, 0, 368, 369, 0, 923, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 246, 925, 0, 413, 414, 415, 416,
	417, 418, 419, 171, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 855, 0, 444, 445, 173,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 859,
	860, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 464, 467, 468, 469,
	1151, 255, 0, 0, 470, 256, 0, 0, 931, 165,
	471, 472, 257, 473, 474, 475, 0, 166, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 815, 0, 915, 0, 1458, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 814, 219, 220,
	221, 0, 275, 821, 0, 804, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 864, 288, 289, 290, 807, 805, 806,
	811, 809, 808, 810, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 843, 844, 0,
	865, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 866, 319, 0,
	320, 846, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 816, 817, 820, 868, 0, 818, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 867, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 869,
	870, 338, 339, 340, 871, 341, 342, 0, 0, 343,
	344, 345, 918, 347, 346, 0, 849, 872, 348, 349,
	873, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 874, 361,
	362, 364, 363, 0, 0, 875, 0, 819, 365, 240,
	366, 367, 0, 368, 369, 0, 923, 370, 371, 0,
	0, 372, 241, 876, 373, 877, 851, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 852, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 878, 405, 406, 407,
	408, 246, 925, 0, 413, 414, 415, 416, 417, 418,
	419, 171, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 812, 429, 410, 411, 430, 879, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 855, 0, 444, 445, 173, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 859, 860, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 813, 466, 0, 464, 467, 468, 469, 1151, 255,
	0, 0, 470, 256, 914, 0, 931, 165, 471, 472,
	257, 473, 474, 475, 0, 166, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 815, 0, 915, 0, 1458, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 814, 219, 220, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 0, 865, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 816,
	817, 820, 868, 0, 818, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 869, 870, 338,
	339, 340, 871, 341, 342, 0, 0, 343, 344, 345,
	918, 347, 346, 0, 849, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 933, 932, 354,
	355, 356, 357, 359, 360, 358, 874, 361, 362, 364,
	363, 0, 0, 875, 0, 819, 365, 240, 366, 367,
	0, 368, 369, 0, 923, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 246,
	925, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 812,
	429, 410, 411, 430, 879, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 859, 860, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 0, 0, 931, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	815, 0, 915, 0, 920, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 814, 219, 220, 221, 0, 275, 821,
	0, 804, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 807, 805, 806, 811, 809, 808, 810,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 843, 844, 0, 865, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 846, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 816, 817, 820,
	868, 0, 818, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 867, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 869, 870, 338, 339, 340,
	871, 341, 342, 0, 0, 343, 344, 345, 918, 347,
	346, 0, 849, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 933, 932, 354, 355, 356,
	357, 359, 360, 358, 874, 361, 362, 364, 363, 0,
	0, 875, 0, 819, 365, 240, 366, 367, 0, 368,
	369, 0, 923, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 851, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 852, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 246, 925, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 812, 429, 410,
	411, 430, 879, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 855,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 859, 860, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 813, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	0, 0, 931, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 815, 0,
	915, 0, 920, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 814, 219, 220, 221, 0, 275, 821, 0, 804,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 864, 288, 289,
	290, 807, 805, 806, 811, 809, 808, 810, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 843, 844, 0, 865, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 866, 319, 0, 320, 846, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 816, 817, 820, 868, 0,
	818, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	867, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 869, 870, 338, 339, 340, 871, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	849, 872, 348, 349, 873, 0, 350, 351, 0, 0,
	352, 0, 353, 933, 932, 354, 355, 356, 357, 359,
	360, 358, 874, 361, 362, 364, 363, 0, 0, 875,
	0, 819, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 876, 373, 877,
	851, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 852, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	878, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 812, 429, 410, 411, 430,
	879, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 855, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 859, 860, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 813, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 0, 0,
	931, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 0, 0, 0,
	2621, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 814,
	219, 220, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 0, 865, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 869, 870, 338, 339, 340, 871, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	874, 361, 362, 364, 363, 0, 0, 875, 0, 819,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 246, 925, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 859,
	860, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1148, 0, 954, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 1362, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 958, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 864, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	865, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 866, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 868, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 867, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 869,
	870, 338, 339, 340, 871, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 872, 348, 349,
	873, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 874, 361,
	362, 364, 363, 0, 0, 875, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 876, 373, 877, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 878, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 171, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 879, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 173, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 1151, 255,
	0, 0, 470, 256, 0, 0, 931, 165, 471, 472,
	257, 473, 474, 475, 0, 166, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 815, 0, 0, 0, 138, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 814, 219, 220, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 0, 865, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 816,
	817, 820, 868, 0, 818, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 869, 870, 338,
	339, 340, 871, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 849, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 933, 932, 354,
	355, 356, 357, 359, 360, 358, 874, 361, 362, 364,
	363, 0, 0, 875, 0, 819, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 812,
	429, 410, 411, 430, 879, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 859, 860, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 729, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 171, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 173, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 1151, 255, 0, 0, 470, 256,
	0, 0, 0, 165, 471, 472, 257, 473, 474, 475,
	0, 166, 779, 767, 768, 765, 766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 138, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 836, 799, 837,
	787, 823, 838, 0, 269, 789, 788, 272, 273, 274,
	0, 0, 839, 840, 221, 0, 275, 222, 0, 958,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 864, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 824, 295, 841, 842, 0, 296, 0, 297,
	0, 298, 0, 0, 825, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 774, 865, 0, 0, 0, 0, 0,
	313, 314, 845, 826, 827, 0, 317, 0, 318, 0,
	0, 866, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 868, 0,
	237, 798, 0, 0, 0, 0, 327, 329, 336, 0,
	867, 330, 847, 802, 828, 829, 830, 831, 848, 0,
	803, 0, 337, 869, 870, 338, 339, 340, 871, 832,
	833, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 872, 348, 349, 873, 0, 350, 351, 0, 0,
	352, 0, 353, 933, 932, 354, 355, 356, 357, 359,
	791, 358, 874, 361, 362, 364, 363, 0, 0, 875,
	775, 239, 365, 850, 366, 367, 0, 800, 801, 0,
	0, 370, 371, 0, 0, 372, 241, 876, 373, 877,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 853, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	878, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 792, 793,
	794, 795, 421, 427, 428, 0, 429, 410, 411, 430,
	879, 431, 854, 796, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 834, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	790, 453, 0, 856, 857, 858, 835, 0, 0, 455,
	456, 252, 253, 773, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 797, 467,
	468, 469, 254, 861, 495, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	0, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 2091, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 0, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	2530, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 1228, 0, 954, 953,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 1463, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 958, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 864, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	865, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 866, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 868, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 867, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 869,
	870, 338, 339, 340, 871, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 872, 348, 349,
	873, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 874, 361,
	362, 364, 363, 0, 0, 875, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 876, 373, 877, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 878, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 879, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 1144, 0, 954, 953, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 958, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 865, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 1143,
	232, 233, 868, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 869, 870, 338,
	339, 340, 871, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 933, 932, 354,
	355, 356, 357, 359, 360, 358, 874, 361, 362, 364,
	363, 0, 0, 875, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 879, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 1140, 0, 954, 953, 0, 0, 0, 951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 958, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 865, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1139, 232, 233,
	868, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 867, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 869, 870, 338, 339, 340,
	871, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 933, 932, 354, 355, 356,
	357, 359, 360, 358, 874, 361, 362, 364, 363, 0,
	0, 875, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 879, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	1101, 0, 954, 953, 0, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 958,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 864, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 865, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 866, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1100, 232, 233, 868, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	867, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 869, 870, 338, 339, 340, 871, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 872, 348, 349, 873, 0, 350, 351, 0, 0,
	352, 0, 353, 933, 932, 354, 355, 356, 357, 359,
	360, 358, 874, 361, 362, 364, 363, 0, 0, 875,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 876, 373, 877,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	878, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	879, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 1098, 0,
	954, 953, 0, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 958, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 865, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1097, 232, 233, 868, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 869, 870, 338, 339, 340, 871, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	874, 361, 362, 364, 363, 0, 0, 875, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 879, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 947, 0, 954, 953,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 958, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 864, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	865, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 866, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 949, 232, 233, 868, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 867, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 869,
	870, 338, 339, 340, 871, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 872, 348, 349,
	873, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 874, 361,
	362, 364, 363, 0, 0, 875, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 876, 373, 877, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 878, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 879, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	954, 953, 470, 256, 0, 951, 0, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 958, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 865, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 868, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 869, 870, 338, 339, 340, 871, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	874, 361, 362, 364, 363, 0, 0, 875, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 879, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 954, 953, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 958,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 864, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 865, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 866, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 868, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	867, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 869, 870, 338, 339, 340, 871, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 872, 348, 349, 873, 0, 350, 351, 0, 0,
	352, 0, 353, 933, 932, 354, 355, 356, 357, 359,
	360, 358, 874, 361, 362, 364, 363, 0, 0, 875,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 876, 373, 877,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	878, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	879, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 954, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 958, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 865, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	868, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 867, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 869, 870, 338, 339, 340,
	871, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 933, 932, 354, 355, 356,
	357, 359, 360, 358, 874, 361, 362, 364, 363, 0,
	0, 875, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 879, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	597, 0, 207, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	213, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 212, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 206, 0,
	207, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 478, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 213, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 212,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 207, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 478, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	213, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 1701, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 212, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 207, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 478, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 213, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 212, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 495, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 478, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 495, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 478, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 1984, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 1981, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	2061, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 1987, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 2059, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 2058, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 1986, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 2060, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	495, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 1984, 275, 222, 0, 0, 1978, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 1981,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 1987, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1977, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 1986, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 1985, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 604, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 603, 583, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 586, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 587,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 588, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 582, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 583, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	586, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 587, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 588,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 495, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 586, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 587,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 588, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 1119, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 923, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 942, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 944, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 923, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	939, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 941, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	923, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 935, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 937, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 923, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 518, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 517, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	516, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	495, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 1959, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 495, 2453, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 495, 2453, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 2450, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 495, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 923, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 1721, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	1719, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 1717, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 495, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 1694, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 1654, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1652, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 630, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 1201, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 631, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 627, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 626, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 1549, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1548, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	630, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 1201, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 631, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	627, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 626, 250, 251, 454, 0, 0, 455,
	1202, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 630, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 620, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 631,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 627, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 1170, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 626, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1137, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 1136, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 1133, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 1132,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 1130, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1129, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	1127, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1126, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 1123, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1122, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 495, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 1111, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 1109, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1108, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1103, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 1094, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 1093,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 1089, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	1085, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1087, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 962, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 964, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 959, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 630, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	620, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 619, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 631, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 621,
	409, 0, 413, 414, 627, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 622, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 626, 250, 251,
	454, 0, 0, 455, 624, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 610, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	611, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	606, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 595, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 540, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	495, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 495, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 2353, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 495, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 2351, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 495, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 2340,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 495, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 498, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 611, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	495, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 1562, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 498, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 0, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 495, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	498, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1553, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 495, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 498, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 245, 897, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 495, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 498, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 0, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 0, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	0, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 0, 0, 0, 0, 0, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0, 1307,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 0,
	0, 0, 1324, 1325, 1326, 1327, 0, 0, 1337, 0,
	0, 1307, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 1328, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 1340, 0, 0, 0,
	1302, 0, 1338, 1348, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 0, 1301, 0, 0, 0, 2233,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 1338, 1348, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 2230, 1307, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 1349, 0, 0, 1329,
	1330, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 1346, 0, 0, 0, 0, 0, 0, 1316, 1317,
	0, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 1337, 0, 0, 1307, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1347, 1339, 1349, 0,
	0, 1329, 1330, 1331, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 1346, 0, 0, 0, 0, 0, 0,
	1316, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 1328, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1299, 1300,
	0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 1340,
	0, 0, 0, 1302, 0, 1338, 1348, 0, 1313, 1314,
	1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304,
	1305, 1306, 1308, 1309, 0, 0, 0, 0, 1301, 0,
	0, 0, 2229, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 1302, 0, 1338, 1348, 0,
	1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311,
	1303, 1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327,
	1301, 0, 0, 0, 2228, 1307, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 1324, 1325,
	1326, 1327, 0, 0, 1337, 0, 0, 1307, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 3028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 688, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 664, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 662, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 1301,
	663, 0, 0, 3024, 0, 665, 0, 1321, 0, 693,
	0, 0, 0, 0, 1318, 671, 672, 0, 0, 0,
	683, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 689, 666, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 677, 0, 0, 0, 0, 0, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 1307, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 667, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 1339,
	1349, 0, 0, 1329, 1330, 1331, 0, 0, 0, 668,
	669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 1346, 0, 0, 0, 0,
	0, 675, 1316, 1317, 0, 0, 0, 0, 670, 1324,
	1325, 1326, 1327, 0, 0, 1337, 0, 0, 1307, 0,
	0, 674, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	1347, 1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 1346, 0, 0,
	0, 0, 0, 0, 1316, 1317, 0, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 1328, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 1323, 0,
	0, 0, 1347, 0, 0, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 659, 678, 691,
	0, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 681, 0, 0, 679, 0, 0, 0,
	694, 695, 0, 1328, 0, 0, 0, 692, 0, 0,
	0, 0, 0, 0, 682, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 1338,
	0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312,
	1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0,
	0, 0, 2965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 1302, 0, 0, 1348, 0,
	0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	1301, 0, 0, 0, 2964, 0, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 1325,
	1326, 1327, 1301, 0, 0, 0, 0, 1307, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	1324, 1325, 1326, 1327, 0, 0, 1337, 0, 0, 1307,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 1328, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0,
	0, 0, 0, 2914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1348,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 1301, 0, 0, 0, 2875, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1325, 1326, 1327, 1301, 0, 0, 0, 0, 1307, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 1346, 0, 0,
	0, 0, 0, 0, 1316, 1317, 0, 0, 0, 0,
	0, 1324, 1325, 1326, 1327, 0, 0, 1337, 0, 0,
	1307, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1346,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 1328, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	0, 0, 0, 0, 2787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	1348, 0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319,
	1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 1301, 0, 0, 0, 2744, 0, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0, 1307,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 0,
	0, 0, 1324, 1325, 1326, 1327, 0, 0, 1337, 0,
	0, 1307, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 1328, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 0, 2743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 1301, 0, 0, 0, 2742, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0,
	1307, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1346,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 1327, 0, 0, 1337,
	0, 0, 1307, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 1339, 1349, 0, 0, 1329,
	1330, 1331, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 1346, 0, 0, 0, 0, 0, 0, 1316, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 1328, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 1347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319,
	1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 0, 0, 0, 0, 2714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1348, 0, 0, 1338, 0, 0, 1313, 1314,
	1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304,
	1305, 1306, 1308, 1309, 1301, 0, 0, 0, 2534, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 1299, 1300, 0, 1332,
	1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 1302, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0, 0,
	0, 1307, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 1324, 1325, 1326, 1327, 0, 0,
	1337, 0, 0, 1307, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 2507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1301, 0, 0, 0, 1831,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 1307, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 1349, 0, 0, 1329,
	1330, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 1346, 0, 0, 0, 0, 0, 0, 1316, 1317,
	0, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 1337, 0, 0, 1307, 3105, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1347, 1339, 1349, 0,
	0, 1329, 1330, 1331, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 1346, 0, 0, 0, 0, 0, 0,
	1316, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 1328, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1299, 1300,
	0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 1340,
	0, 0, 0, 1302, 0, 1338, 1348, 0, 1313, 1314,
	1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304,
	1305, 1306, 1308, 1309, 0, 0, 2195, 0, 1301, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 2170, 0, 1302, 0, 1338, 1348, 0,
	1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311,
	1303, 1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327,
	1301, 0, 0, 0, 0, 1307, 0, 2278, 1321, 0,
	2277, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 0, 2171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 1324, 1325,
	1326, 1327, 0, 0, 1337, 0, 0, 1307, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1934, 0, 0, 0, 1323,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 1340, 1933, 0, 0, 1302, 0, 1338, 1348,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	1338, 1348, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 1324,
	1325, 1326, 1327, 1301, 0, 0, 0, 0, 1307, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 1346, 0, 0,
	0, 0, 0, 0, 1316, 1317, 0, 0, 0, 0,
	0, 1324, 1325, 1326, 1327, 0, 0, 1337, 0, 0,
	1307, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1346,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 1328, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 726,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 1299, 1300, 0, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 1340, 0, 0, 0, 1302,
	0, 1338, 1348, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	0, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 1338, 0, 1348, 1313, 1314, 1320, 1319,
	1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 1324, 1325, 1326, 1327, 0, 1301, 0, 0,
	0, 1307, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 0,
	1337, 0, 0, 0, 1307, 0, 0, 1322, 0, 2288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 1339, 1349, 0,
	0, 1329, 1330, 1331, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 1346, 0, 0, 0, 0, 0, 0,
	1316, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 1328, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2511, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1299, 1300,
	0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 1340,
	2283, 0, 0, 1302, 1338, 0, 1348, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 0, 1301, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 1302, 0, 1338, 1348, 0,
	1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311,
	1303, 1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327,
	1301, 0, 0, 0, 0, 1307, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 1324, 1325,
	1326, 1327, 0, 0, 1337, 0, 0, 1307, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 1340, 2227, 0, 0, 1302, 0, 1338, 1348,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	1338, 1348, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 1324,
	1325, 1326, 1327, 1301, 0, 0, 0, 0, 1307, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 1346, 0, 0,
	0, 0, 0, 0, 1316, 1317, 0, 0, 0, 0,
	0, 1324, 1325, 1326, 1327, 0, 0, 1337, 0, 0,
	1307, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1346,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 1328, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 1299, 1300, 0, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 1340, 0, 0, 0, 1302,
	0, 1338, 1348, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	0, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 1299, 1300, 0, 1332,
	1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1302, 0, 1338, 1348, 0, 1313, 1314, 1320, 1319,
	1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 1324, 1325, 1326, 1327, 1301, 0, 0, 0,
	0, 1307, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 1324, 1325, 1326, 1327, 0, 0,
	1337, 0, 0, 1307, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 1299, 1300, 0, 1332,
	1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 1302, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 1323, 1321, 0, 0, 1347, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 1324, 1325, 1326, 1327, 0, 0,
	0, 0, 0, 1307, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 1349, 1340, 0,
	1329, 1330, 1331, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 0,
	0, 1614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 1625, 1610, 1615, 1598,
	1635, 1634, 0, 0, 1600, 1599, 0, 0, 0, 0,
	0, 1644, 1643, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1636, 0, 1632, 1631, 0, 0, 0, 0, 0,
	0, 0, 0, 1630, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1629, 1627, 1628, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 0,
	1609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1618, 1613, 1619, 1620, 1621, 1622, 1623, 0, 1617,
	0, 0, 0, 0, 0, 0, 0, 0, 1641, 1642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1602,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1633, 0, 0, 0, 1611, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1626, 0, 0, 0, 1752, 1750, 1751, 1754, 1753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1603, 1604, 1605,
	1606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1624, 1607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1601,
	0, 0, 1637, 1638, 1639, 1640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1608, 0, 0,
	0, 0, 1645,
}
var sqlPact = [...]int{

	353, -1000, -5, -1000, -1000, -1000, 242, -1000, -1000, -1000,
	-1000, 241, 240, 237, -1000, 236, 234, 230, 229, 227,
	226, 225, 224, 222, 220, 216, 211, -1000, -1000, 200,
	-1000, -1000, -1000, -1000, 195, 188, 185, -1000, 184, 1699,
	31786, 182, 177, 174, 1555, 49556, 1448, 173, 172, -1000,
	169, 1623, 36794, 1110, 1365, -1000, 166, 164, 1536, 49174,
	452, 1916, 34472, 1330, 1981, 48786, 31398, 1934, 34084, 48398,
	-1000, -1000, 1051, -1000, -1000, 48010, 162, 161, 160, 159,
	156, -1000, 150, 47622, 149, 142, 140, 138, 135, 133,
	132, 127, -1000, 122, 119, 117, 107, 101, 100, 90,
	88, 87, 79, 78, 76, 72, 71, 70, 69, -1000,
	54162, 68, 67, 66, -1000, 1320, 65, 64, 62, 61,
	60, -1000, -1000, 58, 57, 56, 55, 53, 51, -1000,
	272, 48, 47, 43, 42, 41, -1000, 1255, 527, 1879,
	14066, 1273, 1261, 1194, 1193, 1185, 732, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52230, 49556, 40, -33, 38,
	-1000, 2407, 838, 23592, 353, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36406, 36018, 35630,
	29864, 47234, 46846, 11173, 11173, 950, -1000, -1000, -1000, -1000,
	-1000, -7, 32932, 49556, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 289, -1000, -1000,
	-1000, -1000, -1000, -1000, 20372, 453, 19947, 438, 19522, 294,
	449, -1000, -1000, -1000, 287, -1000, -1000, -1000, -1000, 1257,
	-1000, -1000, -1000, -1000, 46458, 46070, 2155, 45682, 29466, 29068,
	45294, 1762, 1755, 44906, -1000, -1000, 44518, -1000, -1000, 2220,
	1912, 1894, 35242, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44136, 43748, 43360, 42972, 42584, 28670, 28272, 611,
	-1000, -1000, -1000, -1000, 25144, 610, -1000, -1000, -1000, -1000,
	-1000, 34, -1000, 32, 28, -1000, 24, 23, 22, 20,
	19, 18, 14, 13, -1000, 12, 11, -1000, 10, 9,
	-1000, -1, -2, 1454, 1443, 1354, 42196, 1028, 1640, -1000,
	1439, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49556,
	-1000, 20783, 221, -1000, 609, -1000, 1897, -1000, 20783, 221,
	-1000, 1436, 165, 1289, -1000, -1000, -1000, 1329, 1048, -1000,
	-1000, 49556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2575,
	1359, 605, 41808, -1000, 1733, -1000, 713, 14888, -1000, 920,
	-1000, 14888, 285, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1765,
	1157, 2545, 27874, 1460, 2321, 2218, 2573, 1543, 2183, 2115,
	2096, 2063, 2030, 2569, 1100, 2568, 1009, 848, 2567, 2009,
	1992, 2528, 1541, 878, 2566, 2565, 1982, 1888, -1000, -1000,
	-1000, -1000, 1074, -1000, -1000, -1000, -1000, -1000, -1000, 38322,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1255, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1567, 2257, 2257, 2257, 2356, 420, 406, -1000,
	272, -1000, 1948, -1000, 1356, -1000, -1000, -1000, 58633, -1000,
	-1000, 20783, 20783, 20783, 20783, 20783, 1242, -1000, -1000, -1000,
	630, -1000, 604, 533, 12407, -1000, -1000, 2445, -1000, -1000,
	-1000, 457, 20783, -1000, 284, -1000, -1000, -1000, -1000, 596,
	2552, -1000, 850, -1000, -1000, -1000, 722, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1977, 595, 594, -1000, 593, 590,
	588, -1000, -1000, -1000, 587, 586, 584, 583, 582, 578,
	577, 575, -1000, -1000, -1000, 1164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 762, -1000, 762,
	762, 537, 537, 572, 569, 538, 567, -1000, -1000, 566,
	537, 562, 561, -1000, -1000, 559, 680, -1000, 678, 558,
	556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1570, -1000, -1000, 1570, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 948, 51084, -1000, -1000, -1000, -12, 49556, -1000, 449,
	-12, -1000, -1000, 555, -1000, 15299, 15299, 15299, -1000, -1000,
	1416, 20783, -1000, 2628, -1000, 3929, -219, 659, 24756, -1000,
	23204, 659, 636, 27476, -1000, 1887, -1000, -1000, 553, 282,
	-1000, -1000, -1000, -1000, -1000, -1000, 2075, 2148, 949, -1000,
	1127, 2146, -1000, 1723, 2145, 1121, -1000, -1000, 750, 2144,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1346, -1000, -1000, 2084, 2138, -154, 2015, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1501, -1000, 30246, 32932, -16, -1000,
	-1000, -135, -1000, 10777, 58633, -1000, -1000, -1000, 58633, 738,
	-1000, -1000, 2131, -1000, 58633, 733, -1000, -1000, 2129, -1000,
	1886, 49556, 11173, 49556, 49556, -1000, 548, 1583, 1391, -1000,
	-1000, 32550, 1723, 1582, -1000, -1000, 726, 1579, -1000, -1000,
	1563, -1000, 449, -1000, -1000, 41420, 51848, 726, 1561, -1000,
	-1000, -1000, 38322, -1000, 49556, -1000, 49556, -1000, 1068, -1000,
	51466, 144, 2126, -1000, -1000, 144, 2123, -1000, 144, 2122,
	-1000, 139, 2121, -1000, -1000, 1368, 2119, -1000, -136, 2113,
	-1000, -1000, -136, 2112, -1000, -1000, 20783, -36, -1000, -1000,
	-1000, 838, 31010, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41032, 30246, -1000, -1000, -1000, -1000, 32550, 49556, 34854, 760,
	58633, -1000, 2410, 5818, 30246, 58633, -1000, 32550, 49556, 1974,
	-1000, 40644, 40256, 2296, 706, -1000, -1000, 49556, -1000, 20783,
	-1000, 2409, 1647, -56, -1000, -1000, -1000, -1000, -1000, 1627,
	1652, 883, 988, -1000, 14888, 14888, 2214, -1000, 275, 11173,
	-1000, -1000, 984, 1681, -1000, -1000, -1000, -1000, -1000, 39868,
	-1000, -1000, -1000, 1361, 49556, -1000, -1000, 1972, -1000, 32168,
	49556, -1000, 49556, -1000, 49556, -1000, 49556, -1000, 49556, -1000,
	-1000, -1000, -1000, -1000, 2061, 1210, 1968, -1000, 49556, -1000,
	49556, -1000, -1000, -1000, 1614, -1000, -1000, -1000, 39486, 39098,
	38710, -1000, -1000, 1148, -1000, 983, -1000, -1000, 145, -1000,
	-1000, 1567, -1000, 1453, 1710, 19097, 1734, 20783, 272, -1000,
	-1000, 272, 272, 13641, -1000, -1000, -1000, 49556, -1000, 59417,
	5818, 11173, 956, 20783, 20783, 20783, 20783, 20783, 20783, 20783,
	20783, 20783, 20783, 20783, 20783, 20783, 20783, 20783, 20783, 20783,
	20783, 20783, 20783, 20783, 20783, 20783, 20783, 20783, 20783, 20783,
	20783, 20783, 20783, 20783, 20783, 20783, 20783, 20783, 1695, 20783,
	946, 20783, 20783, 20783, 20783, 1529, -1000, -1000, 1301, 475,
	1355, -1000, 2499, 2499, 2499, 58996, 58996, 529, 630, -1000,
	20783, -1000, 221, 20783, 406, 56386, 1418, -11, 11996, -1000,
	-1000, -1000, -1000, 18672, 758, 58633, 10381, 11571, -1000, 2487,
	1099, 1904, 1810, 546, 699, 695, 691, 644, 544, 20783,
	20783, 20783, 20783, 20783, 20783, 20783, 20783, -1000, -1000, -1000,
	-1000, -1000, -1000, 2445, -1000, 18261, 17836, -1000, 2475, 17411,
	16986, -1000, 16561, 22016, 16136, 955, 953, 891, 882, 20783,
	12818, -1000, -56, -1000, 51084, -1000, 49556, -12, 2408, 20783,
	134, -1000, 57471, -1000, 134, 134, 543, -39, 58633, 1687,
	1686, 23980, 1632, 1254, 1254, 1254, -1000, 542, 619, 659,
	7986, 37176, 1265, 659, 659, 245, 317, 405, 22816, 2628,
	37176, -1000, -1000, 49556, 541, 11571, 11173, -29, 1152, -1000,
	33696, 2268, 2235, 2231, 1063, -1000, 1011, 2349, 38322, 2378,
	221, 2288, 1884, -1000, -1000, 945, 38322, 1723, -1000, 5818,
	-1000, 1728, 2346, 1064, 1093, 1064, 1064, 1067, 38322, 944,
	1183, 30246, 2282, 925, -34, 2369, 221, 2276, 1876, 922,
	-1000, -1000, 49556, 11173, 2248, 980, 667, -16, 32932, 49556,
	266, -1000, 20783, 221, 20783, 221, 1012, -41, 264, 1706,
	1697, 245, -1000, 33314, 2396, 2109, 49556, 915, -1000, 1723,
	2103, -1000, 1178, -1000, 2098, 2097, 2393, 1318, 1558, -1000,
	-1000, -1000, 1317, 1553, 968, 2094, 735, 314, 2390, 314,
	26700, -1000, 49556, -1000, 49556, -1000, -1000, 49556, -1000, 49556,
	-1000, 49556, -1000, 49556, 49556, -1000, 49556, 30246, 30246, 30246,
	-44, 4078, 31010, -46, 705, 914, -42, -1000, 784, 33314,
	655, -47, -1000, 842, -1000, -1000, -1000, 178, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 762, 539, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 538,
	1164, 537, 537, 537, -1000, -1000, -1000, 680, -1000, 678,
	-1000, -1000, -1000, 762, 762, -1000, -1000, -185, 1872, -135,
	34854, 667, -1000, 667, -1000, 1965, -1000, 2258, 696, -57,
	843, -56, -1000, 1570, -1000, 1434, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2550,
	-1000, 2515, -1000, -1000, 2473, -22, -1000, -22, -1000, 11173,
	-1000, 49556, 1942, -1000, -1000, -1000, -1000, -1000, -1000, 49556,
	-1000, 49556, -1000, -1000, -1000, -1000, -1000, -1000, 3504, -1000,
	1922, -1000, 4078, 262, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49556, 49556, 49556, -1000, 38322, -1000, -1000, -1000,
	-1000, 58633, -1000, 419, -1000, -1000, 58633, 1097, 1714, -1000,
	1714, -25, -1000, 57180, 1674, 49556, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 704, 693,
	693, 947, 947, 947, 947, 2518, 3584, 877, 3424, 390,
	390, 390, 390, 390, 390, 390, 390, 1494, 489, 489,
	1494, 1494, 1494, 1494, 1494, 489, 489, 489, 390, 390,
	390, 58996, 58924, 720, 20783, 20783, 909, 1300, 475, 720,
	20783, 720, 720, 720, 720, -1000, 1065, -1000, -1000, -1000,
	-1000, 1871, 534, 22016, 22016, -1000, -1000, -1000, 12407, 20783,
	-1000, -1000, -1000, -1000, 533, 20783, -1000, 56745, -246, 402,
	-167, 260, 49556, 20783, 617, -52, -1000, 1038, -1000, 20783,
	258, -1000, -1000, -23, 20783, 20783, 20783, 401, -1000, 400,
	-1000, 899, -1000, 898, 897, 895, -1000, 532, 1248, 531,
	530, 20783, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 58561, 53437, 53365, 53074, 6292, 53002, 6914, -60,
	-63, 387, -1000, 1870, -167, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 376, -1000, 374, -65, -1000, -71, -1000, 371,
	-1000, 58270, -167, 369, 4523, -1000, 22016, 22016, 22016, -1000,
	368, -1000, 57108, -1000, 703, 700, 697, 694, 58198, 15711,
	15711, 15711, 366, 57907, 20783, -167, -1000, -1000, 528, -77,
	735, 15299, 7434, 11173, -1000, 735, 735, 20783, -1000, 20783,
	23980, 23980, 1813, 1684, 23980, -1000, -1000, -1000, -1000, 37176,
	435, 659, 37176, -1000, 2445, 1703, -1000, -1000, -1000, 49556,
	449, -1000, 37176, 37176, 11173, 659, -1000, 364, 25532, -23,
	257, 2154, 49556, 49556, 49556, -1000, -1000, 1552, 50702, 1534,
	5818, 49556, -1000, -1000, 526, 525, 1668, 1663, 49556, 49556,
	50320, 49938, 49556, 1237, 20783, 1225, 1517, 221, -1000, 692,
	523, 49556, 1120, -1000, -1000, -1000, -1000, -1000, 49556, -1000,
	-1000, 2471, -1000, 1064, -1000, -1000, -1000, 1064, 1723, 1115,
	49556, 30246, 736, 690, 49556, 1186, 221, -1000, 689, 521,
	11173, 1141, -1000, 688, 49556, 1789, -1000, 1486, -1000, -1000,
	9985, 58633, -1000, 58633, -1000, -1000, -1000, 11173, 1748, 1748,
	363, -28, -1000, -1000, -1000, -1000, -1000, -1000, 1731, 49556,
	550, 49556, 221, 49556, 126, 30246, 49556, 30246, 30246, 30246,
	221, 49556, 2088, 49556, 2077, 2100, 647, 49556, 1262, 20783,
	1159, -1000, 25920, 773, 49556, 1106, 121, -1000, -1000, -1000,
	17, 49556, -1000, -1000, 144, 144, 144, -1000, 139, 1368,
	-1000, -136, -136, -1000, -1000, -1000, 4078, 1862, 37940, 49556,
	2425, 30246, -78, -1000, 788, 890, 887, -1000, 5818, -1000,
	629, 939, -1000, 2455, 518, 2445, -1000, 705, 49556, 116,
	-1000, 734, 1397, -1000, 14888, 14888, -1000, 1570, -1000, -1000,
	1118, -1000, 1150, -1000, -1000, -1000, -1000, 14888, -1000, -1000,
	977, -135, -135, -1000, -1000, 3231, -1000, 49556, -1000, -1000,
	-1000, -1000, 1097, -1000, 20783, -1000, -1000, -1000, 13641, -1000,
	-1000, -1000, 49556, -213, 20783, 720, 720, 20783, 22016, 22016,
	-1000, 720, -1000, -1000, -1000, -1000, -1000, 1856, 517, 20783,
	5818, 4390, 4231, -79, 1494, -1000, 20783, -1000, 9589, -84,
	56314, -1000, -1000, 625, 2064, -1000, 20783, 57834, 9193, 362,
	14477, -1000, 57543, -55, -55, -1000, 2519, 1578, 1378, 1137,
	1076, 2451, -1000, 27088, 753, 1262, 55955, 59417, 5818, 20783,
	20783, -1000, 20783, 20783, 20783, -1000, -1000, 2445, -1000, 20783,
	-1000, -1000, -1000, -1000, -1000, 1845, 20783, -1000, 59417, 5818,
	22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016,
	22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 22016, 1617,
	22016, 2466, 2466, 2466, -1000, 1920, 1845, 20783, 20783, -1000,
	-1000, -1000, -1000, 5818, 361, 360, 359, -1000, 20783, -167,
	655, -1000, 1803, -1000, -87, -1000, 2628, -1000, -1000, 1803,
	1803, -85, 58633, -1000, 1813, -1000, 514, 20783, 23980, -1000,
	616, -1000, -86, -1000, 37176, -1000, 615, -244, -1000, 658,
	-1000, 449, -1000, -1000, -1000, 253, 37176, -1000, -91, -1000,
	2388, 356, 11173, -1000, -1000, 880, 879, -1000, 2066, -1000,
	1527, -1000, 777, -1000, 1249, 20783, 24368, 513, 512, 1276,
	-1000, 2053, 1368, 2051, 1368, -1000, -1000, 698, -1000, 58633,
	509, 508, -1000, -29, 1151, -1000, 26318, 20783, -1000, 873,
	-1000, -1000, -1000, 1723, 872, -1000, -1000, 1177, 26318, -1000,
	-1000, -1000, 26318, 20783, -1000, -34, 870, 26318, 2011, 705,
	1839, 991, -1000, -1000, -1000, -1000, -1000, -1000, 1751, 33314,
	49556, 507, 49556, 505, -1000, -1000, 504, 49556, 667, 1723,
	-1000, 726, -1000, -1000, 783, 11173, 503, 11173, 1650, 647,
	30628, -1000, 726, 1710, -1000, 58633, -1000, 1106, 13229, 2237,
	-97, -1000, 249, -1000, -1000, -1000, 735, 26700, 23980, 20783,
	2564, -99, -1000, -1000, -1000, -1000, -1000, -1000, 221, -53,
	501, -1000, 656, 654, -135, 1274, 1640, 1640, -1000, 2449,
	-1000, 614, 354, 2445, 351, -1000, -135, 49556, -1000, 1283,
	11173, 49556, 49556, 11173, 49556, -1000, -1000, -56, -1000, -1000,
	-1000, -1000, 49556, -1000, -1000, -1000, 1291, 55883, -1000, 2262,
	11173, 2490, 720, 4098, 3764, 20783, 5818, 59156, -100, 20783,
	20783, -1000, 613, 58633, -1000, -1000, -1000, -1000, -1000, -1000,
	58633, 20783, 246, -1000, 2508, 20783, 348, 346, 345, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 344, -1000, -1000,
	52612, -1000, 20783, 343, -1000, 341, 340, 6840, 5330, 55524,
	55452, 55093, 338, 58633, 1920, 58633, -1000, -1000, 801, 801,
	1036, 1036, 1036, 1036, 2466, 309, 1472, 217, 403, 403,
	403, 451, 607, 607, 403, 403, 403, 1827, 1604, 500,
	5223, -1000, -1000, 58633, 58633, 335, -1000, -1000, -1000, -167,
	333, 1798, 2343, -1000, 23980, 1798, 1798, -1000, -1000, 49556,
	58633, -1000, -219, -1000, 2445, -1000, -1000, 1703, -1000, 8396,
	-1000, 11173, -1000, -1000, 25532, -1000, 499, -1000, 146, 49556,
	49556, 49556, 2034, -1000, 3134, -1000, 55021, -102, -1000, 2309,
	2309, 20783, 245, 24368, 49556, -1000, 1333, 1704, 808, 49556,
	-1000, 49556, -1000, -1000, 49556, 49556, 49556, 49556, 49556, -1000,
	497, -109, 49556, 49556, 30246, -1000, -1000, -110, 11173, -1000,
	2243, -1000, 30246, 881, 1186, 1774, -1000, 496, 24368, 494,
	49556, 33314, 2387, -1000, 705, -1000, -1000, 479, 1817, 1312,
	24368, 1310, 1648, 647, 30628, -1000, 968, 1106, -1000, -1000,
	-66, -1000, 510, 221, 49556, 2557, 1262, -1000, -74, 58633,
	-1000, 649, -1000, 37558, 37558, 30246, 30246, -1000, 2198, 2195,
	608, -1000, -1000, 326, -1000, -135, 1669, -1000, -1000, 1188,
	1462, -1000, -1000, -1000, -1000, -1000, 2262, 20783, 20783, 59156,
	-111, -1000, 720, 720, -1000, 58633, 8797, -1000, 57543, -1000,
	-1000, -1000, -1000, 1209, -1000, 54662, -1000, -1000, -1000, 20783,
	20783, -1000, -1000, -1000, -1000, -1000, -1000, 22016, 1826, 478,
	5818, -1000, -1000, 731, 20783, 20783, 2628, 731, 731, -117,
	659, -1000, -1000, -1000, 2445, 146, -1000, 2502, 11173, -1000,
	-1000, -1000, 49556, -1000, 49556, -1000, 11173, 49556, 1851, 1520,
	-1000, -1000, 1659, 477, 22016, 49556, 730, -1000, 1275, 24368,
	2262, 11173, 2262, 54590, -118, -123, 1513, -1000, -1000, 1507,
	20783, -1000, 5818, 1368, 1368, -124, -125, -1000, 869, 868,
	20783, 867, -1000, -1000, -1000, 864, -1000, 681, -136, 26318,
	-1000, -1000, 1187, 24368, -126, 24368, -133, 319, 221, -1000,
	24368, -1000, 49556, -134, 49556, -1000, 647, 30628, -1000, 2100,
	-1000, 2168, 49556, 2227, -1000, -1000, -1000, 1710, 475, -1000,
	-140, -1000, -1000, 474, 472, -1000, -1000, -143, -1000, 723,
	719, -1000, -1000, -1000, 11173, 975, -1000, 720, 720, -1000,
	-1000, -1000, 311, 1262, 2341, -1000, 54231, 54159, 4367, 22016,
	5818, -141, -1000, 49556, 58633, -167, -1000, -1000, -1000, 37176,
	545, -1000, -1000, 1585, -1000, -1000, -1000, 49556, 1525, -1000,
	-1000, 20783, 5223, 470, 20783, -1000, 1751, 469, -1000, -1000,
	-1000, -1000, -1000, -1000, 2309, -1000, 1135, -1000, -1000, 58633,
	2303, -1000, -1000, 468, 467, 49556, 49556, -55, 461, 460,
	26318, -1000, 49556, -152, 1275, -157, -1000, 1751, -1000, -158,
	783, -1000, 459, 30628, -1000, 1650, 938, -168, 49556, 1106,
	-1000, -1000, 30246, 30246, 1669, -1000, 49556, -1000, 49556, -1000,
	49556, -1000, 1122, 20783, -1000, -1000, 4367, -170, -1000, -146,
	-1000, 2385, -1000, -1000, -1000, -1000, 2028, 53800, 1601, 49556,
	53728, 1186, 49556, 2262, 49556, 782, 11173, 1188, 1188, -1000,
	-1000, 297, 20783, 20783, -1000, 458, -1000, 1751, 1275, 1186,
	1275, 454, 24368, -1000, 1648, 1057, -1000, 735, -1000, -1000,
	-173, -175, -1000, -176, -183, -1000, 291, 21605, 21605, -167,
	-1000, 49556, 450, 1999, -1000, 1307, 1203, 118, 810, -1000,
	-184, -1000, 449, -1000, 20783, -1000, -190, -1000, 772, -191,
	-1000, 770, 2508, -192, -193, 49556, 1186, 1751, -1000, 1751,
	24368, -198, -1000, 26700, -1000, 705, 705, -1000, -1000, -1000,
	-1000, -1000, 22412, 1288, 1091, 56817, -1000, -1000, -1000, 49556,
	-1000, 1309, 1308, 1102, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1601, 58633, -1000, 1188, 1771, -1000, 1188, 1820, -1000,
	-1000, -203, -1000, 1186, 1186, -205, -1000, -181, -1000, -1000,
	2411, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2174, -1000,
	807, 1557, 1557, 1307, -1000, 437, -1000, 434, 1367, -1000,
	-1000, 1275, -1000, 21194, -1000, 2429, -1000, -1000, 1661, -1000,
	-1000, 20783, 20783, -1000, -1000, -1000, 1751, -1000, -1000, -1000,
	-1000, -211, -216, 1186, 1186, 856, -1000, -1000, 422, 20783,
	-235, 1186, -1000,
}
var sqlPgo = [...]int{

	0, 3088, 3083, 1926, 3082, 2579, 3081, 3079, 3077, 3075,
	3067, 2564, 3066, 3065, 3063, 3061, 3060, 3059, 3058, 3056,
	3052, 3051, 3049, 3048, 3045, 3044, 3042, 3040, 3037, 3036,
	3034, 3032, 2526, 3029, 2518, 3020, 3015, 3012, 3008, 3003,
	3002, 3000, 2998, 29, 2997, 2992, 2990, 2989, 2498, 2986,
	2979, 2466, 2972, 2969, 2454, 2968, 2960, 2958, 2445, 2443,
	2956, 2955, 2414, 2952, 2951, 2398, 2950, 2383, 2948, 2947,
	2381, 2941, 102, 114, 2940, 2376, 2938, 2937, 2373, 2371,
	2337, 2935, 2312, 2932, 2931, 2310, 2306, 2930, 92, 2928,
	2924, 2917, 2915, 2284, 2088, 2911, 2910, 2905, 170, 2901,
	2057, 2900, 2894, 2892, 2885, 2883, 2880, 2879, 2877, 2876,
	2875, 2874, 2873, 2871, 2870, 2867, 2866, 2863, 2861, 2859,
	2857, 2856, 2855, 2854, 2847, 2846, 2845, 182, 111, 2844,
	2842, 2055, 2043, 2839, 2836, 52, 47, 16, 87, 123,
	177, 5156, 164, 2834, 2827, 2825, 2824, 2823, 35, 121,
	117, 112, 128, 2823, 221, 2822, 2820, 54, 42, 25,
	22, 81, 2819, 2815, 2814, 2080, 91, 2812, 2811, 169,
	160, 2809, 357, 31, 90, 72, 94, 105, 48, 2807,
	100, 14, 2805, 113, 249, 2802, 71, 34, 24, 3752,
	116, 73, 85, 197, 152, 146, 142, 122, 82, 2799,
	171, 74, 144, 2797, 2795, 2794, 57, 140, 7, 6,
	187, 4, 2793, 11, 2791, 9, 2787, 2784, 2783, 2782,
	17, 115, 51, 62, 2781, 27, 64, 137, 2774, 162,
	2772, 75, 2770, 175, 141, 2, 151, 2768, 78, 20,
	77, 2766, 2764, 96, 163, 2762, 32, 126, 86, 79,
	184, 159, 89, 150, 153, 2761, 2759, 2757, 125, 2755,
	138, 124, 2751, 2750, 119, 26, 2748, 39, 155, 43,
	2747, 2737, 109, 2734, 145, 2732, 2730, 2728, 181, 110,
	130, 8, 59, 95, 10, 156, 104, 65, 58, 2726,
	3854, 1607, 1423, 44, 2722, 103, 56, 40, 61, 101,
	165, 37, 2720, 2713, 1448, 2712, 2709, 2708, 129, 2702,
	2691, 2688, 99, 33, 68, 2683, 107, 50, 194, 178,
	55, 147, 135, 172, 118, 2682, 132, 80, 143, 168,
	106, 2680, 311, 2679, 136, 2678, 2677, 2674, 2669, 38,
	2668, 2665, 2664, 288, 2663, 108, 2655, 133, 131, 148,
	226, 120, 157, 161, 969, 2650, 134, 30, 2646, 827,
	23, 0, 4149, 3372, 2642, 149, 88, 2640, 2634, 2631,
	2628, 28, 12, 3, 5, 15, 13, 409, 245, 2627,
	2626, 139, 83, 97, 2624, 180, 154, 2623, 2622, 2621,
	45, 2619, 21, 2609, 18, 2608, 2607, 19, 1, 2606,
	2605, 174, 2604, 2599, 2598, 2368, 2596, 176, 2593, 2587,
	2584, 2583, 2582, 2071, 2581, 2520, 49, 36, 127,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 407, 407, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	406, 406, 152, 152, 151, 147, 147, 409, 409, 410,
	410, 154, 154, 154, 156, 156, 153, 153, 32, 32,
	86, 86, 86, 138, 138, 138, 138, 79, 79, 79,
	74, 74, 359, 359, 360, 360, 134, 134, 135, 135,
	135, 135, 136, 136, 137, 137, 137, 46, 34, 34,
	34, 34, 34, 34, 34, 35, 35, 35, 35, 36,
	36, 36, 36, 36, 36, 37, 37, 37, 37, 37,
	37, 44, 44, 128, 128, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 58, 58, 56,
	59, 59, 60, 60, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 68, 68, 68, 69, 69, 69,
	66, 66, 66, 64, 64, 64, 63, 63, 63, 67,
	67, 67, 65, 65, 65, 234, 234, 70, 70, 70,
	70, 70, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 73, 73,
	73, 73, 73, 73, 73, 73, 329, 329, 71, 71,
	302, 302, 75, 75, 259, 259, 76, 76, 76, 76,
	76, 77, 77, 77, 77, 87, 87, 87, 87, 405,
	405, 227, 227, 169, 169, 169, 169, 82, 82, 82,
	82, 83, 83, 83, 84, 84, 133, 133, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 38, 38,
	38, 39, 39, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 43, 94, 94, 94, 96, 93, 93,
	93, 95, 95, 95, 95, 97, 97, 98, 98, 98,
	98, 98, 98, 99, 99, 353, 353, 237, 237, 351,
	351, 352, 352, 204, 204, 204, 204, 204, 205, 205,
	205, 358, 358, 358, 358, 358, 358, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 118, 118,
	118, 127, 127, 127, 127, 127, 127, 127, 120, 120,
	120, 111, 111, 101, 101, 107, 107, 107, 107, 107,
	102, 102, 108, 108, 110, 110, 112, 112, 112, 112,
	112, 112, 103, 103, 103, 103, 114, 114, 114, 114,
	113, 113, 123, 123, 123, 123, 123, 123, 123, 315,
	315, 119, 119, 119, 119, 122, 122, 122, 122, 117,
	117, 117, 121, 121, 124, 124, 124, 124, 104, 104,
	105, 105, 106, 106, 125, 125, 116, 116, 126, 126,
	126, 126, 126, 126, 126, 115, 115, 115, 408, 408,
	109, 403, 403, 401, 401, 401, 401, 401, 401, 401,
	402, 402, 404, 404, 80, 80, 80, 52, 52, 53,
	53, 206, 206, 207, 207, 283, 283, 283, 283, 208,
	208, 155, 155, 155, 211, 212, 212, 209, 209, 210,
	210, 210, 214, 214, 213, 216, 216, 215, 282, 369,
	369, 370, 370, 370, 370, 370, 370, 370, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 367, 367,
	367, 368, 365, 365, 366, 366, 366, 366, 411, 411,
	281, 281, 220, 220, 372, 372, 372, 372, 373, 373,
	373, 373, 373, 376, 375, 374, 374, 374, 374, 374,
	311, 311, 311, 57, 57, 57, 248, 248, 247, 247,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 130, 130, 54, 54, 54, 161, 161,
	51, 51, 51, 55, 55, 50, 50, 50, 50, 50,
	265, 265, 263, 263, 225, 225, 317, 317, 317, 173,
	173, 148, 148, 148, 20, 22, 22, 16, 16, 16,
	16, 16, 16, 29, 29, 30, 30, 26, 26, 264,
	264, 266, 266, 81, 81, 85, 85, 85, 91, 91,
	129, 129, 129, 129, 129, 129, 129, 33, 33, 33,
	33, 45, 45, 45, 45, 89, 414, 414, 414, 90,
	90, 413, 413, 168, 168, 168, 168, 170, 170, 278,
	278, 279, 279, 415, 415, 280, 280, 280, 163, 162,
	164, 164, 49, 49, 49, 157, 157, 158, 158, 159,
	159, 160, 160, 416, 416, 78, 78, 78, 132, 132,
	200, 200, 274, 274, 274, 221, 221, 178, 178, 277,
	277, 275, 275, 275, 246, 246, 246, 131, 131, 230,
	230, 239, 239, 240, 240, 325, 325, 241, 88, 88,
	141, 141, 139, 139, 139, 139, 139, 139, 140, 140,
	140, 142, 142, 142, 142, 142, 142, 142, 145, 145,
	145, 145, 146, 146, 146, 144, 144, 383, 383, 383,
	385, 385, 386, 382, 382, 384, 384, 412, 412, 250,
	250, 250, 218, 219, 217, 217, 417, 417, 223, 223,
	222, 224, 224, 316, 316, 316, 244, 244, 244, 244,
	269, 269, 267, 267, 268, 268, 270, 270, 271, 271,
	271, 272, 272, 273, 273, 243, 243, 298, 298, 143,
	143, 143, 229, 229, 229, 231, 231, 288, 288, 288,
	289, 289, 287, 287, 287, 287, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 319, 319, 232, 232, 320,
	276, 276, 399, 399, 399, 400, 400, 314, 314, 321,
	321, 321, 321, 321, 321, 312, 312, 313, 313, 326,
	327, 327, 253, 253, 253, 253, 251, 251, 252, 252,
	322, 322, 322, 322, 245, 245, 323, 323, 323, 284,
	284, 330, 330, 330, 345, 345, 228, 228, 228, 340,
	340, 331, 331, 331, 331, 331, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 334, 334,
	334, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 344,
	344, 344, 344, 344, 335, 335, 341, 342, 336, 337,
	343, 343, 343, 343, 347, 347, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 339, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	261, 261, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 292, 292, 292, 292, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 377,
	377, 377, 377, 377, 377, 377, 377, 380, 380, 381,
	381, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	387, 387, 388, 388, 390, 390, 391, 391, 392, 393,
	393, 393, 394, 395, 395, 389, 389, 396, 396, 396,
	397, 397, 398, 398, 398, 398, 398, 304, 304, 310,
	310, 310, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 171, 171,
	171, 171, 171, 236, 236, 235, 235, 301, 301, 299,
	299, 303, 303, 254, 254, 346, 346, 346, 346, 346,
	346, 346, 255, 255, 255, 262, 256, 256, 257, 257,
	257, 257, 257, 295, 296, 258, 258, 258, 297, 297,
	305, 309, 309, 308, 307, 307, 306, 306, 285, 285,
	286, 286, 242, 242, 418, 418, 238, 238, 324, 324,
	324, 324, 202, 202, 233, 233, 201, 201, 195, 195,
	196, 196, 196, 196, 226, 226, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 348, 348, 348,
	349, 350, 300, 188, 187, 175, 176, 186, 185, 184,
	174, 177, 181, 182, 183, 179, 180, 191, 190, 189,
	328, 197, 197, 198, 198, 198, 199, 199, 199, 199,
	172, 172, 192, 192, 193, 194, 194, 165, 165, 165,
	166, 166, 167, 167, 357, 357, 355, 355, 355, 356,
	356, 356, 356, 354, 354, 354, 354, 354, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 2,
	0, 1, 1, 0, 2, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 1, 1, 1, 12, 12, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 1, 7, 3, 8,
	8, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	6, 3, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 3, 1, 1,
	3, 5, 4, 6, 4, 3, 0, 1, 3, 2,
	4, 2, 4, 1, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 2,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 5, 4, 6, 4, 5, 6, 5, 1,
	0, 2, 3, 3, 3, 6, 4, 2, 3, 4,
	2, 3, 3, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 2, 3, 2, 3, 7, 7,
	8, 10, 7, 4, 5, 5, 5, 3, 1, 1,
	5, 2, 0, 1, 1, 1, 1, 3, 2, 2,
	2, 1, 2, 0, 3, 3, 2, 8, 11, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 4, 7, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 7, 3, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 6, 3, 13, 16, 9, 12, 4,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 0, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 3, 4,
	1, 5, 3, 4, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 2, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 2, 2, 1, 5, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 8, 6, 4, 6, 6, 6,
	4, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 425, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -384, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 258, 266, 287, 289, 291, 300,
	-40, -39, 117, -139, -141, 285, -83, -84, -93, -94,
	-95, -96, -133, 318, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	321, -33, -45, -90, -89, 366, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-383, -63, -64, -66, -68, -69, -142, -140, 422, 286,
	376, 37, 330, 65, 111, 295, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 393, 401, -145, -143, -144,
	-146, 307, 384, 343, 426, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 2, 343, 387, 308,
	377, 92, 167, 271, 256, -401, 2, 4, -363, -361,
	-196, -195, 343, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 159, 174, 180, 182, 162, 202, 233,
	235, 248, 252, 263, 265, 273, 297, 324, 339, 355,
	356, 357, 363, 364, 384, 385, 389, 396, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 349, 351,
	119, 121, 122, 132, 133, 135, 136, 138, 140, 144,
	146, 151, 152, 153, 154, 155, 156, 168, 163, 169,
	173, 176, 175, 177, 178, 179, 170, 184, 187, 188,
	189, 191, 192, 195, 196, 197, 200, 199, 204, 205,
	208, 209, 212, 214, 217, 218, 219, 220, 223, 221,
	222, 225, 226, 228, 227, 234, 236, 237, 239, 240,
	243, 244, 247, 250, 253, 254, 255, 256, 257, 258,
	259, 260, 262, 264, 266, 268, 269, 270, 271, 272,
	274, 275, 277, 278, 279, 280, 281, 285, 283, 284,
	286, 287, 288, 289, 291, 293, 294, 295, 296, 298,
	319, 320, 332, 300, 301, 302, 303, 304, 305, 306,
	310, 314, 311, 312, 313, 308, 309, 315, 316, 318,
	321, 323, 325, 326, 329, 330, 331, 333, 336, 337,
	338, 334, 335, 328, 341, 342, 344, 345, 346, 347,
	348, 350, 352, 353, 358, 361, 362, 366, 367, 369,
	370, 373, 374, 375, 380, 376, 378, 381, 382, 383,
	388, 394, 395, 397, 398, 399, -194, -165, 415, -193,
	425, 425, 425, 2, 188, 189, 270, 269, 315, 316,
	-189, -192, -193, -194, -165, 4, -361, -363, 92, 241,
	425, 425, 425, 2, 343, 331, 115, 308, 377, 293,
	387, -263, 184, 92, 372, -165, 266, 24, 2, 101,
	173, 375, 374, 24, 262, 309, 345, 347, 2, 425,
	425, 2, 387, 308, 343, 167, 92, 377, 293, -183,
	2, -165, -73, 2, 422, 27, -72, -5, -48, -58,
	-62, -75, -70, -11, -32, -34, -54, -51, -59, -65,
	-67, -79, -78, -80, -82, -86, -85, -88, -93, -94,
	-100, -131, -132, 78, 25, 107, 318, 117, 183, 2,
	-405, -227, 2, 24, -169, -165, 78, 145, 307, 343,
	2, 188, 189, 2, -183, 2, -401, 2, 188, 189,
	2, -405, -227, 23, 2, -165, 2, 304, 321, -170,
	2, 300, -165, 425, 425, 425, 425, 425, 425, 209,
	58, 297, 315, -98, 362, -97, 355, 302, -99, -353,
	2, 223, -165, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 2, -127, 315,
	331, 152, 36, 58, 24, 63, 93, 146, 167, 168,
	196, 73, 74, 269, 209, 189, -315, 119, 316, 344,
	303, 341, 362, 78, 378, 294, -408, 118, 4, 92,
	223, 317, 355, 67, 348, 349, 425, 425, 425, -412,
	2, 343, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, -140, -142, -141, 425, 425, 425, 425,
	425, -222, -223, 371, 181, 113, 246, -139, -141, 2,
	-383, -127, 315, 2, 58, 24, -351, 2, -290, 241,
	-292, 413, 414, 408, 229, 400, -304, 98, 216, 215,
	-294, -305, 114, 297, 422, -199, -293, 428, 9, -380,
	-141, 31, 52, -197, -165, 7, 8, 5, 6, -172,
	-332, -300, -339, 365, 125, 232, -377, -378, -198, 4,
	-361, -355, -333, -342, -337, -338, -340, 42, 48, 47,
	352, 222, 310, 311, 312, 313, 325, 380, 163, 40,
	239, 240, 175, 182, 61, 84, 85, 83, 88, 87,
	89, 86, 317, 377, 53, 30, 157, 158, 162, 233,
	159, 59, -379, 43, 94, 106, 135, 136, 176, 177,
	178, 179, 191, 192, 335, 358, 39, 41, 44, 54,
	55, 96, 97, 123, 124, 134, 147, 174, 180, 202,
	235, 252, 263, 273, 324, 339, 355, 356, 357, 363,
	364, 385, -362, -343, 79, 126, 143, 172, 160, 185,
	186, 190, 203, 206, 224, 231, 249, 251, 292, 322,
	-413, 2, 362, 362, 2, -413, 2, -413, 2, -168,
	2, 362, 359, -414, 362, 396, -385, 274, -386, -183,
	-385, 425, 425, 427, 425, -217, -218, -219, 2, 24,
	104, 422, 2, -318, 2, 420, -322, -141, 198, -321,
	422, -319, -189, 242, -381, 298, -377, -378, -172, -165,
	-198, 4, 216, 215, -3, 2, -322, 157, -189, 2,
	-322, 157, 2, -190, 157, -322, -192, 2, -359, 157,
	-357, 9, -356, 5, 4, -361, -363, -362, 61, 2,
	-174, -165, 2, -201, 157, -189, -186, -354, 4, -361,
	-363, -362, -364, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 52, 53, 57, 60, 62, 73, 78,
	83, 84, 86, 85, 87, 88, 89, 98, 100, 102,
	104, 105, 108, 111, 113, 125, 127, 139, 141, 142,
	145, 148, 150, 161, 167, 171, 181, 183, 198, 201,
	207, 210, 211, 229, 230, 232, 238, 241, 242, 245,
	246, 261, 267, 276, 290, 307, 317, 327, 340, 343,
	354, 359, 360, 365, 371, 372, 377, 379, 386, 387,
	390, 391, 392, 393, -187, -354, 359, 427, -233, -195,
	-196, -226, -165, 424, -290, 2, -88, 2, -290, 157,
	2, -88, 157, 2, -290, 157, 2, -88, 157, 2,
	-220, 422, 424, 343, 62, 2, -189, 157, -179, 2,
	-165, 109, -190, 157, 2, -192, -359, 157, 2, -359,
	157, 2, -191, 2, -189, 167, 167, -174, 157, 2,
	-165, 24, 142, 2, 183, 2, 183, 2, -323, 2,
	-322, -234, 157, 2, -189, -234, 157, 2, -234, 157,
	2, -202, 157, 2, -201, -174, 157, 2, -360, 157,
	2, -359, -360, 157, 2, -259, 422, -329, 2, -328,
	-356, 384, 422, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	315, -138, 80, 220, 219, 260, 241, 359, 427, -189,
	-290, -88, -302, 422, 142, -290, -88, 241, 142, 243,
	2, 92, 343, 399, 24, -165, 2, 319, 2, 422,
	-98, 56, 362, -279, 2, -280, -162, -163, -164, 187,
	268, 272, 399, -351, 359, 405, 142, -351, -237, 424,
	-127, 2, 139, 379, 2, 7, 2, -359, 2, 319,
	2, 269, 316, 58, 142, 2, 2, -403, 2, 241,
	142, 2, 142, 2, 142, 2, 142, 2, 142, 2,
	2, 269, 316, 2, 361, 197, 361, 2, 142, 2,
	142, 2, 5, 2, 187, 268, 332, 2, 343, 387,
	308, 2, 2, 142, 2, 142, 399, 2, -245, -322,
	-222, -223, -244, -267, -268, 207, 127, 238, -250, 24,
	104, -250, -250, 46, 423, 423, -127, 319, 2, 10,
	11, 60, 35, 413, 414, 415, 416, 137, 417, 418,
	411, 412, 410, 403, 404, 407, 193, 194, 75, 406,
	405, 68, 213, 299, 128, 129, 130, 131, 282, 164,
	165, 166, 13, 14, 15, 28, 245, 206, 400, 160,
	322, 408, 16, 17, 18, 185, 186, 231, 38, 161,
	-171, -203, -290, -290, -290, -290, -290, 251, -242, -285,
	420, -141, 422, 422, -141, -290, -304, -235, 422, -350,
	7, -141, -299, 420, -306, -290, 424, 422, 5, 422,
	5, -387, 394, 139, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 265, -347, 388,
	-347, -347, -334, 422, -334, 422, 422, -335, 422, 422,
	422, -334, 422, 422, 422, 395, 401, 395, 401, 422,
	422, -278, -279, -278, 359, -170, 427, -385, -220, 422,
	-238, -324, -290, 415, -238, -238, 241, -235, -290, 79,
	-253, 190, 224, 143, 203, 292, 172, -350, -73, -287,
	428, -314, 401, -141, -319, -165, -141, -321, 422, -318,
	-314, 415, -189, 422, 142, 422, 424, -150, 283, -149,
	22, 25, 107, 382, 120, -210, 169, 256, 114, 328,
	-407, 117, 301, 350, 351, 283, 114, -247, -249, 32,
	90, 226, 253, 49, 155, 215, 216, 330, 114, 283,
	393, 114, 117, 283, -152, 328, -407, 117, 301, 283,
	-151, -210, 114, 428, 117, 236, -359, -233, 427, 427,
	-354, 415, 114, 114, 114, 114, 142, -226, -354, -189,
	-197, -165, -198, 422, -220, 229, 241, -401, -248, -247,
	229, -161, -382, 393, 229, 229, -220, -176, 157, 2,
	-166, -165, -176, 157, -382, 229, -323, -200, -189, -200,
	318, -183, 32, -154, 427, 51, 288, 114, -154, 114,
	-154, 114, -154, 427, 114, -154, 114, 427, 114, 114,
	-235, 423, 427, -329, -359, -401, -226, -169, 78, 422,
	32, -301, -330, -331, -332, -341, -336, -339, 42, 48,
	47, 352, 222, 310, 311, 312, 313, 325, 380, 163,
	40, 239, 240, 175, 4, 41, -343, 182, 174, 176,
	177, 178, 179, 180, 324, 39, 273, 135, 136, 134,
	106, 97, 96, 235, 44, 43, 94, 355, 356, 357,
	358, 191, 192, 55, 54, 385, 335, -360, -401, -226,
	139, -174, 2, -189, 2, 69, 70, 399, -353, -235,
	32, -279, 2, -415, 427, 205, -205, 212, 228, 151,
	242, 397, -358, 5, 4, -300, -311, 98, 209, -339,
	8, 414, -348, 7, 413, -352, -351, -352, 82, 424,
	-354, 343, 191, -353, 24, 320, 2, -189, -404, 139,
	-402, 293, -401, -189, -189, -189, -189, -189, 139, 2,
	361, 2, 139, -165, -165, 205, -189, 2, -191, 2,
	-190, 2, 343, 167, 343, -154, 427, -244, -268, -267,
	-270, -290, 24, -273, 133, 225, -290, -292, -140, -140,
	-140, -224, -316, -290, 267, 167, -353, -345, -330, -344,
	278, 279, 277, 281, 280, -330, -188, -354, 355, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, 206, 160, 322, 38, 161, -290,
	359, -290, -290, -290, -290, 221, 229, 232, 365, 125,
	373, 104, 236, -418, 340, 34, -297, -141, 422, -310,
	29, 327, 24, -304, 297, 422, -285, -290, -286, -236,
	-235, 423, 32, 427, -236, -303, -299, -309, -308, 390,
	-354, 415, 423, -235, 386, 24, 104, 415, 2, 7,
	-260, 398, 218, 95, 153, 217, -261, 306, -388, 132,
	148, 422, 423, 2, 423, 2, 423, 2, 423, 2,
	423, 2, -290, -290, -290, -290, -290, -290, -290, -235,
	-350, -254, 2, -346, -235, 4, 398, 218, 95, 153,
	217, 306, -254, 2, 7, -235, 2, -235, 2, -255,
	2, -290, -235, -256, -291, -292, 413, 414, 408, -304,
	-257, 2, -290, -236, 355, 355, 355, 355, -290, 45,
	201, 360, -258, -290, 142, -235, -170, -386, 32, -235,
	-229, 427, 142, 32, 4, -229, -229, 422, 423, 427,
	190, 190, -318, -253, 190, -251, 249, -251, -251, -399,
	422, 421, -314, -175, 420, 429, -354, -313, -312, 32,
	-183, 247, -314, -314, 424, 423, -313, -189, 422, -235,
	-354, 427, 359, -264, 73, 62, -282, 157, 62, -365,
	-177, 73, -366, -165, 57, 372, 267, 141, -264, 73,
	-264, 73, 73, 318, 331, 46, -322, 35, -88, 71,
	142, 359, -322, -249, -330, 90, 215, 216, 46, -349,
	-348, 414, -349, 46, -349, -349, -349, 393, -190, -322,
	359, 257, -359, 71, 359, 427, 35, -88, 71, 142,
	359, -201, -175, 71, 343, -327, -326, 402, -195, -165,
	424, -290, -88, -290, -88, 333, 423, 424, 185, 185,
	-206, -207, -165, -283, -282, -367, -368, -365, 184, 167,
	372, 126, 32, 114, -226, 359, 114, 257, 114, 114,
	32, 241, 229, 241, 229, -157, 346, 114, -284, 391,
	-274, -88, 422, 98, 32, -274, -239, -240, -325, -241,
	-177, 422, -183, -189, -234, -234, -234, -201, -202, -174,
	-359, -360, -360, 423, -73, -328, 423, -137, 393, 359,
	393, 379, -207, -72, 25, 78, 107, 423, 427, -228,
	31, 420, -260, 422, -347, 422, -137, -326, 142, -227,
	-327, -327, 139, 70, 405, 359, 423, 362, -280, -204,
	272, 326, 284, 314, 8, 7, 7, 427, -354, -189,
	139, -226, -226, 315, -73, 139, -73, 424, -189, -201,
	-189, -322, -271, -348, 422, -272, 297, 298, 427, -148,
	33, 102, 195, -189, 399, -290, -290, 359, -418, 340,
	-297, -290, 221, 232, 365, 125, 373, 104, 236, 142,
	422, -291, -291, -235, -290, 421, 431, 423, 424, -226,
	-290, 421, 421, 427, -307, -308, 108, -290, 424, -417,
	427, -222, -290, -235, -235, 423, 423, 359, 359, 359,
	359, 422, -393, 250, 422, 422, -290, 32, 427, 427,
	427, 423, 427, 427, 427, 423, 423, 427, 423, 142,
	423, 423, 423, 423, 423, -262, 261, 423, 10, 11,
	413, 414, 415, 416, 137, 417, 418, 411, 412, 410,
	403, 404, 405, 68, 213, 299, 13, 14, 15, 185,
	161, -291, -291, -291, 423, -295, -296, 142, 139, 399,
	399, 399, 399, 32, -258, -258, -258, 423, 142, -235,
	422, 423, -284, -324, -231, 2, -318, -185, -354, -284,
	-284, -235, -290, -318, -318, -252, 379, 241, 190, -318,
	-312, 423, -400, -350, -314, -313, -350, -289, -288, 140,
	227, -183, -220, -313, -313, -354, -314, 423, -232, -320,
	-381, -417, 424, -149, -189, -177, -184, -165, 229, -282,
	157, -156, 229, -330, -184, 422, 422, 195, 195, -177,
	-184, 157, -177, 157, -184, -184, -406, 272, 237, -290,
	208, 271, 230, -150, 283, -88, 399, 422, -191, 283,
	-197, -349, -349, -247, 283, -190, -359, 393, 399, -174,
	-151, -88, 399, 422, -175, -152, 283, 399, -189, -134,
	156, 236, 415, -354, -128, 5, 232, -128, 423, 427,
	167, -176, 167, -182, -166, -88, -189, 142, -359, -190,
	-359, -359, -359, -88, -189, 114, -189, 114, -158, 110,
	-416, 405, -174, -223, -222, -290, -246, -277, 290, 241,
	-221, -178, -177, 384, -183, -246, -230, 427, 142, 405,
	424, -221, -154, -154, -154, -154, -154, -73, 142, -136,
	244, -135, -165, 5, -226, 23, -359, 423, -330, 420,
	421, 7, 7, 422, -350, -137, -226, 142, -41, 393,
	271, 92, 343, 256, 167, -351, -351, -279, 370, 66,
	272, -351, 343, 315, -73, -165, -272, -290, -316, -189,
	428, -290, -290, -291, -291, 142, 422, -290, -301, 28,
	28, 423, -286, -290, 415, -354, 423, 423, -299, 111,
	-290, 354, -354, 415, 423, 386, -417, -417, -417, 5,
	218, 153, 217, -261, 217, -261, -261, 7, -394, -180,
	422, -165, 391, -222, 423, -345, -330, -290, -290, -290,
	-290, -290, -350, -290, -295, -290, -345, -330, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, 104, 229, 236,
	-291, -296, -295, -290, -290, -330, 423, 423, 423, -235,
	-72, -243, 148, -327, 427, -243, -243, 423, -252, 422,
	-290, -318, 421, 423, 427, -313, 421, 427, 430, 405,
	-220, 424, -312, 423, 427, -276, 32, 423, -354, 359,
	359, 114, 229, 381, -369, -366, -290, -225, -317, -177,
	-381, 422, -165, 422, 422, -147, 107, 318, -266, 114,
	-154, 114, -154, 397, 422, 422, 359, -264, 73, -293,
	-172, -235, 359, 359, 257, -293, -293, -235, 359, -293,
	117, -137, 142, 342, -208, 170, -283, -166, 422, -176,
	422, 422, -220, -189, -327, -248, -161, -265, 379, -175,
	422, -175, -159, 200, -416, -357, -382, -269, -267, -246,
	-238, 230, 72, 423, 427, 424, -284, -240, -231, -290,
	2, 423, -88, 427, 422, 405, 405, 243, -138, -138,
	7, 421, 423, -350, 423, -226, 244, -186, -174, -189,
	-187, -201, -189, 242, 423, -148, -175, 28, 28, -290,
	-301, 423, -290, -290, 421, -290, 424, 5, -290, 423,
	423, 423, 423, -395, -165, -290, 423, 423, 423, 427,
	427, 423, 423, 423, 423, 423, -296, 142, 104, 236,
	422, 423, 423, -298, 150, 46, -318, -298, -298, -226,
	-287, -350, -288, -175, 420, -354, -320, 422, 424, -177,
	-184, -282, 114, -370, 73, -371, 60, 126, 78, 229,
	232, 372, 267, 57, 98, 276, 32, 423, 423, 427,
	-173, 60, -173, -290, -225, -226, 229, 337, 98, 229,
	98, 91, 367, -177, -184, -226, -226, -189, -177, -184,
	422, 423, -191, -190, -359, 423, -175, 71, -360, 355,
	-209, -210, 161, 422, -225, 422, -226, -206, 32, -137,
	422, 144, 241, -225, 241, -160, 199, -416, -357, -157,
	-246, -275, 422, 241, -88, -178, 2, -223, 405, -135,
	-136, -359, -359, 91, 91, 421, 423, -42, -43, 167,
	73, 259, -212, -211, 256, 236, -148, -290, -290, 423,
	-354, 415, -417, -389, 256, 423, -290, -290, -291, 142,
	422, -301, -390, 392, -290, -235, -390, -390, 423, -314,
	-350, 2, -282, -184, -188, -181, -165, 126, 157, 232,
	195, 422, -291, -189, 422, 2, -281, -411, 77, 338,
	-317, -148, -188, -148, 423, 423, 423, 232, 232, -290,
	-330, -154, -154, 423, 423, 359, 359, -235, 359, 359,
	399, -293, 254, -225, 423, -225, 423, 423, -88, -225,
	-189, 423, -189, -416, -357, -158, 105, -226, 73, -269,
	-297, 423, 422, 422, 427, 24, 422, 24, 422, -187,
	343, 423, -223, 46, 423, 423, -291, -301, 423, -391,
	-392, -180, -313, 421, -371, -181, 229, -290, -167, 422,
	-290, -208, 422, -173, 276, -409, 60, 422, 422, -177,
	-184, -417, 422, 422, -293, -189, 423, -281, 423, -208,
	423, -265, 422, -357, -159, 374, 230, 423, -184, -246,
	-360, -360, -43, -226, -226, -189, -396, 271, 298, -235,
	423, 427, 32, 114, 423, -372, 214, -165, 423, -209,
	-226, -148, -189, -410, 379, -188, -214, -213, -211, -216,
	-215, -211, 423, -235, -235, 422, -208, -281, -209, -281,
	422, -225, -160, 318, -284, 423, 423, 423, 423, 423,
	-397, -398, 38, 369, 82, -290, -397, -392, -394, 126,
	-373, -376, -375, 241, 143, 255, 323, 423, 337, 389,
	423, -220, -290, 423, 427, 384, 423, 427, 384, 423,
	423, -226, -209, -208, -208, -225, 423, -239, -137, -137,
	-398, 264, 138, 297, 264, 138, -181, -375, 241, -376,
	241, 374, 101, -372, -213, 161, -215, 142, 423, -209,
	-209, 423, -284, 28, -374, 226, 288, 51, 318, -374,
	-373, 422, 422, -155, 51, 288, -281, -398, 21, 232,
	98, -235, -235, -208, 423, 423, -209, -209, 359, 422,
	-235, 423, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 188, 190, 192, 0, 0, 0, 215, 217, 219,
	220, -2, 0, 0, 0, 248, 249, 251, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	388, 389, 0, 858, -2, 0, 367, 369, 378, 380,
	382, 384, 385, 0, 447, 449, 451, 453, 455, 457,
	459, 461, 463, 464, 466, 468, 470, 472, 474, 476,
	478, 480, 482, 484, 486, 488, 490, 492, 494, 496,
	-2, 770, 772, 774, 776, -2, 62, 64, 66, 68,
	70, 72, 87, 223, 225, 227, 229, 232, 234, 236,
	895, 254, 256, 258, 260, 262, -2, 909, 0, 0,
	0, -2, 0, -2, -2, -2, 788, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 871, 873, 875,
	877, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, -2, -2, -2,
	-2, 0, 0, 1533, 1717, 1718, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1420, 1474, 1423, 1418,
	189, 191, 193, 194, 0, 0, 0, 0, 0, 0,
	673, 1459, 1472, 1473, 1474, 1477, 1478, 1479, 1533, 0,
	216, 218, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 346, 1625, 348, 350, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 250,
	252, 253, 0, 0, 0, 0, 0, 0, 0, 345,
	343, 1454, 287, 288, 0, 0, 328, 329, 330, 331,
	332, 333, 335, 292, 294, 296, 297, 299, 301, 303,
	305, 307, 309, 311, 313, 314, 316, 318, 319, 321,
	323, 324, 326, 733, 0, 0, 0, 0, 0, 171,
	0, 360, 354, 359, 361, 363, 364, 365, 366, 0,
	169, 0, 0, 606, 341, 339, 0, 162, 0, 0,
	767, 0, 360, 1501, 358, 768, 769, 0, 0, 763,
	764, 1654, 798, 368, 370, 379, 381, 383, 386, -2,
	-2, 1749, -2, 409, -2, 417, 1752, 1656, 420, 0,
	422, -2, 425, 448, 450, 452, 454, 456, 458, 460,
	462, 465, 467, 469, 471, 473, 475, 477, 479, 481,
	483, 485, 487, 489, 491, 493, 495, 497, 498, 0,
	0, 0, 0, 0, 502, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 501, 503,
	504, 505, 0, 549, 588, 589, 771, 773, 775, 0,
	714, 897, 63, 65, 67, 69, 71, 224, 226, 228,
	230, 233, 235, -2, 869, 870, 255, 257, 259, 261,
	263, -2, 0, 901, 901, 901, 0, 0, 870, 868,
	0, 371, 0, 373, 0, 502, 376, 377, 429, 430,
	1112, 0, 0, 0, 0, 0, 1237, 1190, -2, -2,
	1222, 1224, 1728, 1749, 0, 1226, 1227, 0, 1229, 1233,
	1234, 0, 1397, 1466, 1461, 1426, 1427, 1428, 1429, 0,
	0, 1432, 0, 1434, 1435, 1436, 1301, 1248, -2, -2,
	-2, 1470, 1026, 1027, 1028, 1029, 1030, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1761, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 0, 1717, 1734, 1735, 1740, 1742,
	1736, 1725, 1271, -2, -2, 1540, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1729, 1730, -2, 1732, -2, -2, 1741,
	-2, 1745, 1746, -2, -2, 1751, -2, -2, -2, 1755,
	1756, -2, 1488, 1079, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1774, 1775, 1776, 1777, 1778, 1779,
	800, 778, 791, 800, 780, 781, 782, 783, 784, 789,
	790, 793, 0, 785, 786, 787, 887, 1631, 890, 673,
	888, 872, 874, 0, 876, 0, 0, 0, 881, 904,
	902, 0, 940, 885, 886, 896, 955, 978, 0, 960,
	0, 978, 1000, 0, 965, 1650, 1249, 1250, 0, 1474,
	1471, -2, 1772, 1773, 2, 79, 0, 1734, 1000, 81,
	0, 1734, 84, 0, 1734, 0, -2, 88, 0, 1734,
	172, 173, 1484, 1485, 1489, 1490, 1491, 1492, 1761, 91,
	0, 1450, 99, 0, 1734, 1417, 0, 1447, 1493, 1494,
	1495, 1496, 1497, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 0, 1444, 0, 0, 598, 1414,
	1419, 599, 1424, 0, 195, 196, 197, 198, 199, 1734,
	201, 202, 0, 204, 205, 1734, 207, 208, 0, 210,
	0, 0, 0, 0, 0, 231, 673, 1734, 0, 238,
	1455, 0, 697, 1734, 695, 1458, -2, 1734, 717, 720,
	1734, 722, 673, 724, 1457, -2, 1481, 894, 1734, 814,
	347, 349, 0, 241, 0, 827, 0, 829, 0, 848,
	1006, 153, 1734, 266, 285, 153, 1734, 269, 153, 1734,
	272, 153, 1734, 275, 1412, 153, 1734, 278, 279, 1734,
	281, 174, 282, 1734, 284, 342, 0, 0, -2, 336,
	1460, -2, 0, 334, 293, 295, 298, 300, 302, 304,
	306, 308, 310, 312, 315, 317, 320, 322, 325, 327,
	-2, 0, 163, 164, 165, 166, 0, 0, 0, 0,
	604, 605, 0, 0, 0, 765, 766, 0, 0, 0,
	390, 0, 0, 0, 0, 797, 387, 0, 406, 0,
	408, 1724, -2, -2, 412, 801, 805, 806, 807, 0,
	0, 0, 0, 419, 0, 0, 0, 423, 426, 0,
	499, 500, 0, 0, 510, 511, 512, 513, 514, 0,
	517, 538, 553, 0, 0, 521, 523, 603, 525, 0,
	0, 527, 0, 529, 0, 531, 0, 533, 0, 535,
	537, 539, 554, 541, 0, 0, 0, 552, 0, 558,
	0, 561, 562, 563, 0, 565, 566, 567, 0, 0,
	0, 575, 577, 0, 587, 0, 506, 507, 153, 1004,
	-2, 0, 864, 918, 919, 0, 0, 0, 0, 899,
	900, 0, 0, 0, 860, 861, 372, 0, 375, 0,
	0, 0, 0, 1332, 1333, 1334, 1335, 1336, 1337, 1340,
	1341, 1338, 1339, 1342, 1343, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 1346, 1347, 0, 0, 1349, 0, 1351,
	0, 0, 0, 0, 0, 0, 1169, 1171, 1405, 0,
	0, 1348, 1117, 1118, 1119, 1154, 1155, 0, 1223, 1402,
	1401, 1225, 0, 1354, -2, 1355, 1237, 0, 0, 1228,
	1441, 1235, 1236, 1354, 0, 1396, 0, 0, 1431, 0,
	1109, 1303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 1077, 1084,
	1081, 1080, 1065, 0, 1064, 0, 0, 1062, 0, 0,
	0, 1066, 0, 1377, -2, 0, 0, 0, 0, 0,
	0, 777, -2, 779, 0, 795, 0, 889, 0, 0,
	944, 1406, 1410, 1411, 944, 944, 0, 0, 1355, 0,
	0, 0, 0, 997, 997, 997, 995, 972, 0, 978,
	0, 988, 0, 978, 978, 0, -2, 960, 0, 0,
	988, 1001, 1002, 0, 0, 0, 0, 100, 760, 119,
	0, 760, 760, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 115, 107, 108, 0, 0, 85, 698, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 117, 0,
	142, 144, 0, 0, 0, 0, 991, 597, 0, 0,
	1475, 1422, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 1461, 1462, 612, 0, 0, 0, 0, 693, 696,
	0, 715, 0, 893, 0, 0, 0, 0, 1734, 729,
	1446, 1480, 0, 1734, 816, 0, 1010, 0, 830, 0,
	0, 1007, 0, 264, 0, 151, 152, 0, 267, 0,
	270, 0, 273, 0, 0, 276, 0, 0, 0, 0,
	0, 896, 0, 0, 186, 0, 352, 362, 0, 0,
	896, 0, 1357, 1018, 1021, 1022, 1023, 1109, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1085, 1079, 1095, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1075,
	0, 1050, 1050, 1050, 1067, 1068, 1086, 1087, 1089, 1091,
	1093, 1019, 1020, 1085, 1085, 1082, 1083, 186, 0, 356,
	0, 991, 392, 991, 394, 0, 583, 0, 0, 0,
	0, -2, 414, 0, 803, 0, 808, 438, 439, 440,
	810, 811, 418, 441, 442, 443, 444, 445, 446, 0,
	690, 0, 692, 1437, 0, 415, 431, 416, 421, 0,
	427, 0, 0, 515, 516, 518, 519, 520, 524, 0,
	591, 1646, 601, 526, 528, 530, 532, 534, 896, 543,
	0, 545, 896, 556, 559, 564, 568, 569, 570, 571,
	572, 573, 0, 0, 0, 713, 0, 867, 916, 917,
	922, 926, 927, 930, 933, 934, 924, 1112, 882, 883,
	884, 910, 911, 743, 0, 0, 374, 1113, 1014, 1015,
	1069, 1070, 1071, 1072, 1073, 1114, 1115, 1443, 0, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, -2,
	-2, -2, -2, -2, -2, -2, -2, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, -2, -2,
	-2, 1152, 1153, -2, 1350, 1352, 0, 1405, 0, -2,
	0, -2, -2, -2, -2, 1166, 0, 1168, 1173, 1175,
	1177, 0, 0, 0, 0, 1404, 1187, 1388, 0, 0,
	1329, 1330, 1331, 1172, 0, 0, 1403, 1400, 0, 0,
	1353, 1232, 0, 0, 0, 0, 1361, 1395, 1391, 0,
	1463, 1469, 1239, 907, 0, 0, 0, 0, 1246, 0,
	1442, 1096, 1097, 1098, 1099, 1100, 1101, 1110, 1311, 0,
	0, 0, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1283, 0, 1364, -2, -2, -2, -2, -2,
	-2, -2, 0, 1285, 0, 0, 1297, 0, 1299, 0,
	1287, 1355, 1374, 0, 0, 1193, 0, 0, 0, 1237,
	0, 1290, 1355, 1382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 0, 1387, 794, 891, 0, 0,
	1010, 0, 0, 0, 1409, 1010, 1010, 0, 939, 0,
	0, 0, 0, 0, 0, 992, 996, 993, 994, 0,
	0, 978, 988, 952, 0, 0, 1445, 958, 987, 0,
	673, 977, 988, 988, 0, -2, 962, 0, 0, 907,
	-2, 0, 0, 0, 0, 759, 121, 1734, 0, 155,
	0, 0, 663, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 699, 700, 702, 708, 710, 0, 704,
	1440, 0, 705, 0, 707, 709, 711, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 1416, 0, 0, 177, 990, 0, 1415, 1425,
	0, 200, 203, 206, 209, 187, 672, 0, 0, 0,
	0, 611, -2, 613, 615, 616, 617, 618, 1578, 1481,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 824, 0, 909, 0,
	846, 832, 0, 0, 0, 846, 850, 851, 853, 854,
	0, 0, 1008, 286, 153, 153, 153, 1413, 153, 153,
	175, 280, 283, 344, 289, 337, 896, 0, 0, 0,
	0, 0, 0, 338, 0, 0, 0, 340, 0, 1011,
	1013, 0, 1024, 0, 1077, 0, 160, 186, 0, 0,
	391, 396, 0, 584, 0, 0, 407, 0, 802, 809,
	0, 435, 0, 437, 691, 1439, 1438, 0, 428, 508,
	0, 602, 600, 542, 546, 896, 548, 0, 585, 586,
	590, 1005, 0, 928, 0, 925, 931, 932, 0, 913,
	741, 742, 0, 0, 0, -2, -2, 0, 0, 0,
	1188, -2, 1167, 1170, 1174, 1176, 1178, 0, 0, 0,
	0, 0, 0, 0, 1189, 1398, 1401, 1327, 0, 0,
	1356, 1359, 1360, 0, 0, 1392, 0, 0, 0, 0,
	0, 906, 907, 907, 907, 1245, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 0, 0, 1270, 1048, 0, 1282, 0,
	1284, 1074, 1296, 1298, 1286, 0, 0, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1196, 1197, 1198, 1289, 1380, 1381, 0, 0, 1088,
	1090, 1092, 1094, 0, 0, 0, 0, 1295, 0, 1386,
	896, 941, 936, 1407, 991, 943, 945, 1408, 1448, 936,
	936, 0, 1356, 980, 0, 982, 0, 0, 0, 984,
	0, 973, 0, 975, 988, 957, 0, 0, 950, 0,
	949, 673, 986, 959, 963, 1463, 0, 1003, 0, 967,
	970, 0, 0, 120, 747, 0, 0, 1449, 0, 123,
	1734, 132, 0, 640, 0, 0, 0, 0, 0, 762,
	133, 1734, 153, 1734, 153, 134, 137, 0, 141, 139,
	0, 0, 631, 101, 760, 104, 0, 0, 753, 0,
	703, 706, 712, 86, 0, 755, 745, 0, 0, 744,
	143, 105, 0, 0, 757, 103, 0, 0, 0, 186,
	0, 0, 1421, 1476, 211, 213, 214, 212, 620, 0,
	1481, 0, 1481, 0, 1453, 609, 673, 0, 991, 697,
	718, -2, 721, 723, 731, 0, 0, 0, 820, 824,
	0, 823, 894, 921, 908, 1009, 825, 846, 0, 0,
	0, 835, 837, 834, 831, 828, 1010, 0, 0, 0,
	0, 0, 265, 268, 271, 274, 277, 290, 0, 184,
	1612, 182, 179, 181, 351, 0, 0, 0, 1358, 0,
	1016, 0, 0, 0, 0, 161, 355, 0, 393, 0,
	0, 0, 0, 0, 0, 404, 405, -2, 433, 434,
	436, 432, 0, 544, 547, 555, 0, 0, 912, 743,
	0, 1116, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 1389, 0, 1400, 1230, 1231, 1238, 1328, 1362, 1390,
	1394, 0, 1464, 1468, 1240, 0, 0, 0, 0, 1433,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 0, 1309, 1310,
	1314, 1456, 0, 0, 1251, 0, 0, 0, 0, 0,
	0, 0, 0, 1363, 1373, 1375, 1194, 1195, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, -2, -2,
	-2, 1212, 1213, 1214, -2, -2, -2, 0, 0, 0,
	1376, 1378, 1379, 1383, 1384, 0, 1292, 1293, 1294, 1385,
	0, 938, 0, 942, 0, 938, 938, 903, 981, 0,
	999, 983, 955, 974, 0, 964, 953, 0, 954, 0,
	985, 0, 961, 966, 0, 969, 0, 1240, -2, 0,
	0, 0, 0, 154, 638, 662, 0, 0, 734, 740,
	740, 0, 1451, 0, 0, 125, 0, 0, 0, 0,
	130, 0, 136, 140, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 111, 114, 0, 0, 110,
	0, 158, 0, 0, 628, 0, 614, 0, 0, 0,
	0, 612, 0, 237, 186, 694, 716, 0, 0, 0,
	0, 0, 822, 824, 0, 815, 816, 846, 920, 826,
	844, 845, 843, 0, 0, 0, 909, 852, 849, 855,
	856, 0, 170, 0, 0, 0, 0, 353, 0, 0,
	0, 1017, 1025, 0, 1078, 357, 0, 578, 579, 626,
	0, 582, 509, 923, 929, 914, 743, 0, 0, -2,
	0, 1181, -2, -2, 1399, 1393, 0, 1430, 907, 1241,
	1243, 1244, 1111, 1316, 1313, 0, 1300, 1261, 1262, 0,
	0, 1265, 1267, 1268, 1269, 1049, 1372, 0, 0, 0,
	0, 1291, 892, 1305, 0, 0, 946, 1305, 1305, 0,
	978, 976, 951, 947, 0, 1464, 968, 0, 0, 749,
	751, 122, 0, 639, 0, 642, 0, 0, 0, 0,
	649, 650, 0, 0, 0, 0, 0, 664, 671, 0,
	743, 0, 743, 0, 0, 0, 0, 127, 146, 0,
	0, 761, 0, 153, 153, 0, 0, 748, 0, 0,
	0, 0, 754, 756, 746, 0, 758, 0, 176, 0,
	607, 627, 0, 0, 0, 0, 0, 0, 0, 239,
	0, 730, 0, 0, 0, 812, 824, 0, 817, 818,
	240, 0, 0, 0, 833, 836, 838, 921, 0, 183,
	0, 178, 180, 0, 0, 1012, 1076, 395, 397, 0,
	0, 403, 580, 625, 0, 0, 915, -2, -2, 1182,
	1465, 1467, 0, 909, 0, 1302, 0, 0, -2, 0,
	0, 0, 878, 0, 937, 935, 879, 880, 998, 988,
	0, 971, 124, 0, 643, 644, 1452, 646, 0, 648,
	651, 0, 653, 1483, 0, 657, 620, 0, 668, 669,
	735, 736, 739, 737, 740, 666, 0, 126, 128, 145,
	148, 129, 135, 0, 0, 0, 0, 907, 0, 0,
	0, 989, 0, 0, 671, 0, 661, 620, 610, 0,
	731, 727, 0, 0, 819, 820, 0, 0, 0, 846,
	857, 185, 0, 0, 0, 399, 0, 401, 0, 624,
	0, 1242, 1319, 0, 1263, 1264, -2, 0, 1220, 1304,
	1306, 0, 956, 948, 641, 645, 0, 0, 677, 0,
	0, 628, 0, 743, 0, 150, 0, 0, 0, 750,
	752, 0, 0, 0, 113, 0, 660, 620, 671, 628,
	671, 0, 0, 821, 822, 0, 840, 1010, 842, 847,
	0, 0, 398, 0, 0, 581, 0, 0, 0, 1315,
	1221, 0, 0, 0, 652, 682, 0, 0, 0, 665,
	0, 738, 673, 131, 0, 147, 0, 632, 0, 0,
	635, 0, 0, 0, 0, 0, 628, 620, 608, 620,
	0, 0, 813, 0, 841, 186, 186, 400, 402, 1312,
	1317, 1320, -2, 1700, 1530, 0, 1318, 1307, 1308, 0,
	654, 678, 679, 0, 674, 675, 676, 1482, 655, 656,
	670, 677, 149, 629, 0, 0, 630, 0, 0, 116,
	118, 0, 658, 628, 628, 0, 728, 1010, 167, 168,
	0, 1322, 1323, 1324, 1325, 1326, 647, 680, 0, 681,
	0, 0, 0, 682, 633, 0, 636, 0, 623, 659,
	725, 671, 839, 0, 683, 0, 686, 687, 0, 684,
	667, 0, 0, 619, 621, 622, 620, 1321, 685, 688,
	689, 0, 0, 628, 628, 0, 726, 634, 0, 0,
	0, 628, 637,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 411, 3, 417, 412, 3,
	422, 423, 415, 413, 427, 414, 424, 416, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 431, 426,
	403, 405, 404, 407, 428, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 420, 3, 421, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 429, 410, 430, 408,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 406, 57746, 409, 57747, 419, 57748, 425, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1017
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1023
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1038
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1063
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1157
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1161
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1165
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1176
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1213
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1217
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1227
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1243
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1249
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1260
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1267
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1277
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1310
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1322
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1342
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1387
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1413
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1432
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1480
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1506
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1513
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1514
		{
			sqlVAL.str = ""
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1518
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1523
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1527
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1531
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1537
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1541
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1546
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1547
		{
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1571
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1574
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1604
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1608
		{
			sqlVAL.str = "CSV"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1612
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1616
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1620
		{
			sqlVAL.str = "PGCOPY"
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1655
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1658
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1675
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1678
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1686
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1712
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1720
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1730
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1744
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1747
		{
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1763
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1764
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1765
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1766
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1784
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1786
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1799
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1816
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1818
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1822
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1854
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1858
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1861
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1865
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1870
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1876
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1877
		{
			sqlVAL.str = ""
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1887
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1890
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1894
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1895
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1898
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1900
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1911
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1922
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				AsOf:    sqlDollar[7].union.asOfClause(),
				Options: sqlDollar[8].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1944
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1954
		{
			return helpWith(sqllex, "DELETE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1961
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1964
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1965
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1966
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return helpWith(sqllex, "DROP")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1982
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1983
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1984
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1985
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1994
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2009
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2013
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2016
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2024
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2028
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2031
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2039
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2047
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2054
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2062
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2070
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2077
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2089
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2092
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2104
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2107
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2111
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2136
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2139
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2141
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2145
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2152
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2155
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2156
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2159
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2160
		{
			return helpWith(sqllex, "DELETE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			return helpWith(sqllex, "INSERT")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2170
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2173
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2174
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2176
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2177
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2186
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2190
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2204
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2211
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2215
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2219
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2229
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2235
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2255
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2270
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2290
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2294
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2301
		{
			return helpWith(sqllex, "GRANT")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2321
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2329
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2332
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2337
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2341
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2352
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2370
		{
			return helpWith(sqllex, "RESET")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2371
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2379
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2383
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2386
		{
			return helpWith(sqllex, "RESET")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2394
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2397
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2408
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2411
		{
			return helpWith(sqllex, "USE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2415
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2417
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2418
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "USE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2420
		{
			return unimplemented(sqllex, "set local")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2436
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2451
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2454
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2480
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2484
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2488
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2512
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2516
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2531
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2538
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2560
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2564
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2569
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2589
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2594
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2598
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2608
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2624
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2631
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2637
		{
			return unimplemented(sqllex, "set from current")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2638
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2646
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2651
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2658
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2662
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2668
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2679
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2685
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2695
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2699
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2707
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2711
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2717
		{
			sqlVAL.union.val = tree.Low
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2721
		{
			sqlVAL.union.val = tree.Normal
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2725
		{
			sqlVAL.union.val = tree.High
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2736
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2753
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2785
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2811
		{
			sqlVAL.str = "client_encoding"
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2814
		{
			sqlVAL.str = "timezone"
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2815
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2829
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2833
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2836
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2847
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2863
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2866
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2880
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2883
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2896
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2899
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2923
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2939
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2942
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2947
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2952
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2963
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2965
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2968
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2979
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2981
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2985
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2995
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2998
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3008
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3011
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3016
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3026
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3032
		{
			sqlVAL.union.val = true
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3033
		{
			sqlVAL.union.val = false
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3060
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3069
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3078
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3088
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3092
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3095
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3102
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3114
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3119
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3124
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3136
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3147
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3157
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3160
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3168
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3171
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3179
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3186
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3191
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3196
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3211
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3218
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3223
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3235
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3239
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3250
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3257
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3262
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3382
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3386
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3390
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3429
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3433
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3438
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3442
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3451
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3458
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3462
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3474
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3483
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3486
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3548
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3573
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3579
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3595
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3609
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3616
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3621
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3626
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3632
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3639
		{
			sqlVAL.str = ""
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3646
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3652
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3659
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3692
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3702
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3713
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3728
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3734
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3738
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3742
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3746
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3750
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3754
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3776
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3780
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3784
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3788
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3796
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3800
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3808
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3812
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3816
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3823
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3833
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3845
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3867
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3872
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3884
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3905
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3929
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3933
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3939
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3943
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3948
		{
			return unimplemented(sqllex, "match full")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3949
		{
			return unimplemented(sqllex, "match partial")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3950
		{
			return unimplemented(sqllex, "match simple")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3951
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3958
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3962
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3970
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3974
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3986
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3998
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4002
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4016
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4020
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4024
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4042
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4050
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4058
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4062
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4065
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4069
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4070
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4072
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4073
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4074
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4077
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4079
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4081
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4084
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4086
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4087
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4089
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4098
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4101
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4109
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4113
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4116
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = nil
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4134
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4138
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4141
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4149
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4156
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4174
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4187
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4201
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4210
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4219
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4224
		{
			sqlVAL.union.val = true
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4228
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4234
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4238
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4244
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4257
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4260
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4261
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4264
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4265
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4269
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = tree.Descending
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4283
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4300
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4304
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4308
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4312
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4316
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4318
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4322
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4336
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4346
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = false
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4361
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4362
		{
			sqlVAL.union.val = false
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4370
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4373
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4383
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4392
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4395
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4406
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4410
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4411
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4412
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4428
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4431
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4433
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4436
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4451
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4454
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4458
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4463
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4464
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4465
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4473
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4480
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4483
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4484
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4488
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4492
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4500
		{
			sqlVAL.str = ""
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4506
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4510
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4516
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4520
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4530
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4543
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4545
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4549
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4553
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4557
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4563
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4569
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4589
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4599
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4609
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.str = ""
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4623
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4637
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4643
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4647
		{
			sqlVAL.str = ""
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4652
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4653
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4665
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4672
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4679
		{
			return helpWith(sqllex, "INSERT")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4690
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4697
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4701
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4709
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4715
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4719
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4723
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4729
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4753
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4761
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4767
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4771
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4779
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4784
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4788
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 847:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4805
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4816
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4820
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4821
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4842
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4845
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4849
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4892
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4898
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4902
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4917
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4921
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4925
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4929
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4944
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4979
		{
			return helpWith(sqllex, "SELECT")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4980
		{
			return helpWith(sqllex, "VALUES")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4981
		{
			return helpWith(sqllex, "TABLE")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5003
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5016
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5030
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5042
		{
			return helpWith(sqllex, "SELECT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5046
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5055
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5064
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5079
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5086
		{
			return helpWith(sqllex, "TABLE")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5098
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5101
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5102
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5106
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5116
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5124
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5125
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5129
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5132
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5135
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5136
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5140
		{
			sqlVAL.union.val = true
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5144
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5148
		{
			sqlVAL.union.val = false
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5154
		{
			sqlVAL.union.val = true
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5160
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5165
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5166
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5169
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5170
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5178
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5184
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5190
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5200
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5204
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5208
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5217
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5226
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5237
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5241
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5250
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5256
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5270
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5279
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5287
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5293
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5294
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5297
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5298
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5315
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5319
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5325
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5329
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5348
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5351
		{
			return helpWith(sqllex, "VALUES")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5353
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5365
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5368
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5370
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5376
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5390
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5396
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5402
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5407
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5430
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5438
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5442
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5469
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5483
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5487
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5490
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5492
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5496
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5500
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5505
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5521
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5527
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5531
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5537
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5543
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5549
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5551
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5554
		{
			sqlVAL.union.val = nil
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5555
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5556
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5560
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5570
		{
			sqlVAL.union.val = true
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = false
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5594
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5606
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5610
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5620
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5624
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5631
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5650
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5654
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5658
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5668
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5669
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5680
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5684
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5689
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5690
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5691
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5692
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5713
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5717
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5721
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5743
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5757
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5766
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5777
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5781
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5788
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5790
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5799
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5803
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5807
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5816
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5838
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5842
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5846
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5850
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5854
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5858
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5862
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5866
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5870
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5874
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5878
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5882
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5886
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5890
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5894
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5898
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5918
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5922
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5926
		{
			sqlVAL.union.val = nil
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5933
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5937
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5941
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5945
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5949
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5965
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5969
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5973
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5977
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6000
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6009
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6018
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6022
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6029
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6033
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6037
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6041
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6045
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6051
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6061
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6072
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6096
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6100
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6108
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6113
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6114
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6119
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6127
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6151
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = tree.Year
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = tree.Month
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = tree.Day
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6174
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6188
		{
			sqlVAL.union.val = tree.Month
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6192
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6204
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = nil
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = tree.Second
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6225
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6253
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6260
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6269
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6273
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6277
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6297
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6301
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6317
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6321
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6325
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6329
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6333
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6341
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6353
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6365
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6488
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6502
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6554
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6666
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6670
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6674
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6678
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6682
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6686
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6702
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6716
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6724
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6760
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6765
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6774
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6779
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6787
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6792
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6796
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6804
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6809
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6824
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6828
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6831
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6832
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6842
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6845
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6856
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6872
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6877
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6879
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6883
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6889
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6897
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6901
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6915
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6919
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6935
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6965
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6970
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6975
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6980
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6985
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6990
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6995
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7000
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7009
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7010
		{
			return unimplemented(sqllex, "treat")
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7031
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7036
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7041
		{
			return unimplemented(sqllex, "within group")
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7042
		{
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7046
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7050
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7057
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7067
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7077
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7085
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7100
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.str = ""
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7139
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7140
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7141
		{
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7144
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7145
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7151
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7152
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7153
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7154
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7155
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7176
		{
			sqlVAL.union.val = tree.Any
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7180
		{
			sqlVAL.union.val = tree.Some
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = tree.All
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7189
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7190
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7191
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = tree.Div
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7193
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7195
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7196
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7197
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7198
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = tree.LT
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7200
		{
			sqlVAL.union.val = tree.GT
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7201
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = tree.LE
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7203
		{
			sqlVAL.union.val = tree.GE
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = tree.NE
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.Like
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7209
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7223
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7229
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7239
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7259
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7295
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7299
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7303
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7309
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7316
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7337
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7341
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7353
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7359
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7365
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7371
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7375
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7407
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7417
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7423
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7434
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7451
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7457
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7466
		{
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7467
		{
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7494
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7498
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7516
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7533
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7575
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7586
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7590
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7594
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7598
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7601
		{
			return unimplemented(sqllex, "func const")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7603
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7610
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7612
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7616
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7640
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7651
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7661
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7768
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7807
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7825
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7839
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7853
		{
			sqlVAL.str = ""
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7859
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7863
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
