// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:55
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8596

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	428, 27,
	-2, 878,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 774,
	191, 774,
	269, 774,
	274, 774,
	427, 774,
	428, 774,
	-2, 0,
	-1, 63,
	1, 774,
	427, 774,
	428, 774,
	-2, 0,
	-1, 64,
	1, 774,
	427, 774,
	428, 774,
	-2, 0,
	-1, 65,
	1, 778,
	427, 778,
	428, 778,
	-2, 0,
	-1, 79,
	171, 713,
	188, 713,
	-2, 0,
	-1, 85,
	103, 878,
	177, 878,
	375, 878,
	376, 878,
	-2, 0,
	-1, 93,
	116, 852,
	129, 852,
	185, 852,
	212, 852,
	240, 852,
	248, 852,
	372, 852,
	-2, 841,
	-1, 121,
	121, 522,
	201, 522,
	362, 522,
	-2, 0,
	-1, 122,
	4, 880,
	21, 880,
	22, 880,
	23, 880,
	24, 880,
	26, 880,
	31, 880,
	36, 880,
	37, 880,
	38, 880,
	39, 880,
	40, 880,
	41, 880,
	42, 880,
	43, 880,
	44, 880,
	45, 880,
	47, 880,
	48, 880,
	49, 880,
	50, 880,
	51, 880,
	52, 880,
	53, 880,
	56, 880,
	57, 880,
	58, 880,
	59, 880,
	61, 880,
	62, 880,
	66, 880,
	67, 880,
	68, 880,
	69, 880,
	70, 880,
	72, 880,
	73, 880,
	74, 880,
	75, 880,
	77, 880,
	79, 880,
	80, 880,
	83, 880,
	84, 880,
	92, 880,
	93, 880,
	94, 880,
	95, 880,
	96, 880,
	97, 880,
	98, 880,
	99, 880,
	101, 880,
	103, 880,
	105, 880,
	108, 880,
	109, 880,
	110, 880,
	112, 880,
	114, 880,
	115, 880,
	117, 880,
	118, 880,
	119, 880,
	120, 880,
	121, 880,
	122, 880,
	123, 880,
	124, 880,
	125, 880,
	126, 880,
	134, 880,
	135, 880,
	136, 880,
	137, 880,
	138, 880,
	139, 880,
	141, 880,
	143, 880,
	147, 880,
	149, 880,
	150, 880,
	152, 880,
	153, 880,
	155, 880,
	156, 880,
	157, 880,
	158, 880,
	159, 880,
	160, 880,
	161, 880,
	162, 880,
	163, 880,
	166, 880,
	167, 880,
	172, 880,
	173, 880,
	174, 880,
	177, 880,
	178, 880,
	179, 880,
	180, 880,
	181, 880,
	182, 880,
	183, 880,
	184, 880,
	186, 880,
	188, 880,
	191, 880,
	192, 880,
	193, 880,
	195, 880,
	196, 880,
	199, 880,
	200, 880,
	201, 880,
	203, 880,
	204, 880,
	206, 880,
	207, 880,
	209, 880,
	210, 880,
	213, 880,
	214, 880,
	217, 880,
	219, 880,
	222, 880,
	223, 880,
	224, 880,
	225, 880,
	226, 880,
	228, 880,
	229, 880,
	230, 880,
	231, 880,
	236, 880,
	237, 880,
	238, 880,
	239, 880,
	241, 880,
	242, 880,
	244, 880,
	245, 880,
	246, 880,
	249, 880,
	250, 880,
	252, 880,
	254, 880,
	255, 880,
	256, 880,
	257, 880,
	258, 880,
	259, 880,
	260, 880,
	261, 880,
	263, 880,
	264, 880,
	265, 880,
	266, 880,
	267, 880,
	269, 880,
	270, 880,
	271, 880,
	272, 880,
	273, 880,
	274, 880,
	275, 880,
	276, 880,
	277, 880,
	279, 880,
	280, 880,
	281, 880,
	282, 880,
	283, 880,
	285, 880,
	286, 880,
	287, 880,
	288, 880,
	289, 880,
	290, 880,
	291, 880,
	293, 880,
	295, 880,
	296, 880,
	297, 880,
	298, 880,
	299, 880,
	300, 880,
	302, 880,
	303, 880,
	304, 880,
	305, 880,
	306, 880,
	307, 880,
	308, 880,
	310, 880,
	311, 880,
	312, 880,
	313, 880,
	314, 880,
	315, 880,
	316, 880,
	317, 880,
	318, 880,
	320, 880,
	321, 880,
	322, 880,
	323, 880,
	325, 880,
	326, 880,
	327, 880,
	328, 880,
	330, 880,
	331, 880,
	332, 880,
	333, 880,
	334, 880,
	335, 880,
	336, 880,
	337, 880,
	338, 880,
	339, 880,
	340, 880,
	341, 880,
	343, 880,
	344, 880,
	346, 880,
	347, 880,
	348, 880,
	349, 880,
	350, 880,
	351, 880,
	352, 880,
	353, 880,
	354, 880,
	356, 880,
	357, 880,
	358, 880,
	359, 880,
	362, 880,
	363, 880,
	364, 880,
	365, 880,
	367, 880,
	368, 880,
	370, 880,
	371, 880,
	374, 880,
	375, 880,
	376, 880,
	377, 880,
	379, 880,
	381, 880,
	382, 880,
	383, 880,
	384, 880,
	385, 880,
	386, 880,
	387, 880,
	389, 880,
	390, 880,
	391, 880,
	396, 880,
	397, 880,
	398, 880,
	399, 880,
	400, 880,
	401, 880,
	-2, 0,
	-1, 145,
	116, 851,
	129, 851,
	185, 851,
	212, 851,
	240, 851,
	248, 851,
	372, 851,
	-2, 844,
	-1, 175,
	4, 887,
	5, 887,
	6, 887,
	7, 887,
	8, 887,
	9, 887,
	10, 887,
	21, 887,
	22, 887,
	23, 887,
	24, 887,
	26, 887,
	31, 887,
	32, 887,
	36, 887,
	37, 887,
	38, 887,
	39, 887,
	40, 887,
	41, 887,
	42, 887,
	43, 887,
	44, 887,
	45, 887,
	47, 887,
	48, 887,
	49, 887,
	50, 887,
	51, 887,
	52, 887,
	53, 887,
	54, 887,
	55, 887,
	56, 887,
	57, 887,
	58, 887,
	59, 887,
	61, 887,
	62, 887,
	64, 887,
	66, 887,
	67, 887,
	68, 887,
	69, 887,
	70, 887,
	72, 887,
	73, 887,
	74, 887,
	75, 887,
	77, 887,
	79, 887,
	80, 887,
	82, 887,
	83, 887,
	84, 887,
	85, 887,
	86, 887,
	87, 887,
	88, 887,
	89, 887,
	90, 887,
	91, 887,
	92, 887,
	93, 887,
	94, 887,
	95, 887,
	96, 887,
	97, 887,
	98, 887,
	99, 887,
	100, 887,
	101, 887,
	103, 887,
	105, 887,
	108, 887,
	109, 887,
	110, 887,
	112, 887,
	114, 887,
	115, 887,
	117, 887,
	118, 887,
	119, 887,
	120, 887,
	121, 887,
	122, 887,
	123, 887,
	124, 887,
	125, 887,
	126, 887,
	127, 887,
	128, 887,
	134, 887,
	135, 887,
	136, 887,
	137, 887,
	138, 887,
	139, 887,
	141, 887,
	143, 887,
	146, 887,
	147, 887,
	149, 887,
	150, 887,
	152, 887,
	153, 887,
	155, 887,
	156, 887,
	157, 887,
	158, 887,
	159, 887,
	160, 887,
	161, 887,
	162, 887,
	163, 887,
	164, 887,
	166, 887,
	167, 887,
	172, 887,
	173, 887,
	174, 887,
	176, 887,
	177, 887,
	178, 887,
	179, 887,
	180, 887,
	181, 887,
	182, 887,
	183, 887,
	184, 887,
	186, 887,
	188, 887,
	189, 887,
	190, 887,
	191, 887,
	192, 887,
	193, 887,
	194, 887,
	195, 887,
	196, 887,
	199, 887,
	200, 887,
	201, 887,
	203, 887,
	204, 887,
	206, 887,
	207, 887,
	208, 887,
	209, 887,
	210, 887,
	211, 887,
	213, 887,
	214, 887,
	217, 887,
	219, 887,
	220, 887,
	221, 887,
	222, 887,
	223, 887,
	224, 887,
	225, 887,
	226, 887,
	227, 887,
	228, 887,
	229, 887,
	230, 887,
	231, 887,
	232, 887,
	234, 887,
	235, 887,
	236, 887,
	237, 887,
	238, 887,
	239, 887,
	241, 887,
	242, 887,
	245, 887,
	246, 887,
	249, 887,
	250, 887,
	251, 887,
	252, 887,
	253, 887,
	254, 887,
	255, 887,
	256, 887,
	257, 887,
	258, 887,
	259, 887,
	260, 887,
	261, 887,
	263, 887,
	264, 887,
	265, 887,
	266, 887,
	267, 887,
	269, 887,
	270, 887,
	271, 887,
	272, 887,
	273, 887,
	274, 887,
	275, 887,
	276, 887,
	277, 887,
	279, 887,
	280, 887,
	281, 887,
	282, 887,
	283, 887,
	285, 887,
	286, 887,
	287, 887,
	288, 887,
	289, 887,
	290, 887,
	291, 887,
	293, 887,
	294, 887,
	295, 887,
	296, 887,
	297, 887,
	298, 887,
	299, 887,
	300, 887,
	302, 887,
	303, 887,
	304, 887,
	305, 887,
	306, 887,
	307, 887,
	308, 887,
	310, 887,
	311, 887,
	312, 887,
	313, 887,
	314, 887,
	315, 887,
	316, 887,
	317, 887,
	318, 887,
	319, 887,
	320, 887,
	321, 887,
	322, 887,
	323, 887,
	324, 887,
	325, 887,
	326, 887,
	327, 887,
	328, 887,
	330, 887,
	331, 887,
	332, 887,
	333, 887,
	334, 887,
	335, 887,
	336, 887,
	337, 887,
	338, 887,
	339, 887,
	340, 887,
	341, 887,
	343, 887,
	344, 887,
	346, 887,
	347, 887,
	348, 887,
	349, 887,
	350, 887,
	351, 887,
	352, 887,
	353, 887,
	354, 887,
	356, 887,
	357, 887,
	358, 887,
	359, 887,
	362, 887,
	363, 887,
	364, 887,
	365, 887,
	366, 887,
	367, 887,
	368, 887,
	370, 887,
	371, 887,
	374, 887,
	375, 887,
	376, 887,
	377, 887,
	378, 887,
	379, 887,
	381, 887,
	382, 887,
	383, 887,
	384, 887,
	385, 887,
	386, 887,
	387, 887,
	389, 887,
	390, 887,
	391, 887,
	396, 887,
	397, 887,
	398, 887,
	399, 887,
	400, 887,
	401, 887,
	402, 887,
	410, 887,
	415, 887,
	416, 887,
	417, 887,
	424, 887,
	430, 887,
	-2, 0,
	-1, 178,
	1, 27,
	428, 27,
	-2, 878,
	-1, 499,
	145, 1603,
	360, 1603,
	407, 1603,
	426, 1603,
	-2, 0,
	-1, 500,
	145, 1523,
	360, 1523,
	407, 1523,
	426, 1523,
	-2, 0,
	-1, 502,
	145, 1676,
	360, 1676,
	407, 1676,
	426, 1676,
	-2, 0,
	-1, 504,
	145, 1704,
	360, 1704,
	407, 1704,
	426, 1704,
	-2, 0,
	-1, 511,
	145, 1608,
	360, 1608,
	407, 1608,
	426, 1608,
	-2, 399,
	-1, 556,
	426, 1483,
	429, 1483,
	-2, 565,
	-1, 557,
	426, 1485,
	429, 1485,
	-2, 566,
	-1, 558,
	426, 1484,
	429, 1484,
	-2, 567,
	-1, 559,
	429, 1435,
	-2, 568,
	-1, 660,
	1, 495,
	423, 495,
	425, 495,
	427, 495,
	428, 495,
	-2, 0,
	-1, 661,
	1, 564,
	142, 564,
	423, 564,
	425, 564,
	427, 564,
	428, 564,
	-2, 0,
	-1, 667,
	1, 509,
	423, 509,
	425, 509,
	427, 509,
	428, 509,
	-2, 0,
	-1, 669,
	1, 513,
	423, 513,
	425, 513,
	427, 513,
	428, 513,
	-2, 0,
	-1, 671,
	1, 523,
	423, 523,
	425, 523,
	427, 523,
	428, 523,
	-2, 0,
	-1, 672,
	1, 529,
	423, 529,
	425, 529,
	427, 529,
	428, 529,
	-2, 0,
	-1, 673,
	1, 532,
	423, 532,
	425, 532,
	427, 532,
	428, 532,
	-2, 0,
	-1, 677,
	1, 546,
	423, 546,
	425, 546,
	427, 546,
	428, 546,
	-2, 0,
	-1, 678,
	1, 548,
	423, 548,
	425, 548,
	427, 548,
	428, 548,
	-2, 0,
	-1, 705,
	129, 891,
	212, 891,
	240, 891,
	-2, 847,
	-1, 718,
	129, 890,
	212, 890,
	240, 890,
	-2, 845,
	-1, 740,
	424, 1781,
	-2, 1184,
	-1, 741,
	424, 1782,
	-2, 1185,
	-1, 769,
	424, 1477,
	-2, 1468,
	-1, 775,
	5, 1013,
	-2, 1513,
	-1, 776,
	5, 1014,
	-2, 1518,
	-1, 777,
	5, 1015,
	-2, 1517,
	-1, 778,
	5, 1016,
	-2, 1701,
	-1, 779,
	5, 1017,
	-2, 1610,
	-1, 780,
	5, 1018,
	-2, 1669,
	-1, 781,
	5, 1019,
	-2, 1671,
	-1, 782,
	5, 1020,
	-2, 1681,
	-1, 783,
	5, 1021,
	-2, 1672,
	-1, 784,
	5, 1022,
	-2, 1673,
	-1, 785,
	5, 1023,
	-2, 1512,
	-1, 786,
	5, 1024,
	-2, 1712,
	-1, 787,
	5, 1025,
	-2, 1579,
	-1, 788,
	5, 1026,
	-2, 1617,
	-1, 789,
	5, 1027,
	-2, 1618,
	-1, 790,
	5, 1028,
	-2, 1583,
	-1, 791,
	5, 1029,
	424, 1492,
	-2, 1483,
	-1, 792,
	5, 1082,
	424, 1082,
	-2, 1747,
	-1, 797,
	424, 1493,
	-2, 1484,
	-1, 799,
	5, 1033,
	-2, 1745,
	-1, 800,
	5, 1034,
	-2, 1746,
	-1, 801,
	5, 1035,
	-2, 1582,
	-1, 802,
	5, 1036,
	-2, 1758,
	-1, 803,
	5, 1037,
	-2, 1584,
	-1, 804,
	5, 1038,
	-2, 1585,
	-1, 805,
	5, 1039,
	-2, 1586,
	-1, 806,
	5, 1040,
	-2, 1727,
	-1, 807,
	5, 1041,
	-2, 1756,
	-1, 808,
	5, 1042,
	-2, 1565,
	-1, 809,
	5, 1043,
	-2, 1566,
	-1, 810,
	5, 1057,
	-2, 1739,
	-1, 812,
	5, 1032,
	-2, 1735,
	-1, 813,
	5, 1032,
	-2, 1734,
	-1, 814,
	5, 1032,
	-2, 1751,
	-1, 815,
	5, 1049,
	-2, 1729,
	-1, 816,
	5, 1050,
	-2, 1514,
	-1, 817,
	5, 1060,
	-2, 1728,
	-1, 818,
	5, 1062,
	-2, 1766,
	-1, 820,
	5, 1073,
	-2, 1542,
	-1, 821,
	5, 1074,
	-2, 1760,
	-1, 822,
	5, 1076,
	-2, 1761,
	-1, 823,
	5, 1078,
	-2, 1762,
	-1, 824,
	5, 1080,
	-2, 1702,
	-1, 825,
	5, 1001,
	-2, 1592,
	-1, 826,
	5, 1002,
	-2, 1593,
	-1, 846,
	5, 1068,
	-2, 1691,
	-1, 864,
	5, 1067,
	-2, 1767,
	-1, 865,
	5, 1069,
	390, 1069,
	-2, 1730,
	-1, 866,
	5, 1070,
	390, 1070,
	-2, 1731,
	-1, 911,
	424, 1492,
	-2, 1483,
	-1, 941,
	145, 1704,
	360, 1704,
	407, 1704,
	426, 1704,
	-2, 0,
	-1, 942,
	191, 786,
	269, 786,
	274, 786,
	-2, 387,
	-1, 963,
	191, 786,
	269, 786,
	274, 786,
	-2, 781,
	-1, 1067,
	285, 1465,
	417, 1465,
	-2, 1464,
	-1, 1124,
	259, 876,
	-2, 692,
	-1, 1136,
	243, 1487,
	-2, 0,
	-1, 1175,
	1, 278,
	423, 278,
	425, 278,
	427, 278,
	428, 278,
	-2, 850,
	-1, 1178,
	4, 1765,
	11, 1765,
	12, 1765,
	14, 1765,
	15, 1765,
	16, 1765,
	17, 1765,
	18, 1765,
	19, 1765,
	21, 1765,
	22, 1765,
	23, 1765,
	24, 1765,
	26, 1765,
	29, 1765,
	31, 1765,
	33, 1765,
	36, 1765,
	37, 1765,
	38, 1765,
	39, 1765,
	40, 1765,
	41, 1765,
	42, 1765,
	43, 1765,
	44, 1765,
	45, 1765,
	47, 1765,
	48, 1765,
	49, 1765,
	50, 1765,
	51, 1765,
	52, 1765,
	53, 1765,
	56, 1765,
	57, 1765,
	58, 1765,
	59, 1765,
	61, 1765,
	62, 1765,
	63, 1765,
	66, 1765,
	67, 1765,
	68, 1765,
	69, 1765,
	70, 1765,
	71, 1765,
	72, 1765,
	73, 1765,
	74, 1765,
	75, 1765,
	77, 1765,
	78, 1765,
	79, 1765,
	80, 1765,
	82, 1765,
	83, 1765,
	84, 1765,
	92, 1765,
	93, 1765,
	94, 1765,
	95, 1765,
	96, 1765,
	97, 1765,
	98, 1765,
	99, 1765,
	101, 1765,
	103, 1765,
	105, 1765,
	108, 1765,
	109, 1765,
	110, 1765,
	112, 1765,
	114, 1765,
	115, 1765,
	117, 1765,
	118, 1765,
	119, 1765,
	120, 1765,
	121, 1765,
	122, 1765,
	123, 1765,
	124, 1765,
	125, 1765,
	126, 1765,
	130, 1765,
	131, 1765,
	132, 1765,
	133, 1765,
	134, 1765,
	135, 1765,
	136, 1765,
	137, 1765,
	138, 1765,
	139, 1765,
	140, 1765,
	141, 1765,
	143, 1765,
	146, 1765,
	147, 1765,
	149, 1765,
	150, 1765,
	152, 1765,
	153, 1765,
	155, 1765,
	156, 1765,
	157, 1765,
	158, 1765,
	159, 1765,
	160, 1765,
	161, 1765,
	162, 1765,
	163, 1765,
	164, 1765,
	165, 1765,
	166, 1765,
	167, 1765,
	168, 1765,
	169, 1765,
	170, 1765,
	172, 1765,
	173, 1765,
	174, 1765,
	176, 1765,
	177, 1765,
	178, 1765,
	179, 1765,
	180, 1765,
	181, 1765,
	182, 1765,
	183, 1765,
	184, 1765,
	186, 1765,
	188, 1765,
	189, 1765,
	190, 1765,
	191, 1765,
	192, 1765,
	193, 1765,
	194, 1765,
	195, 1765,
	196, 1765,
	197, 1765,
	198, 1765,
	199, 1765,
	200, 1765,
	201, 1765,
	203, 1765,
	204, 1765,
	206, 1765,
	207, 1765,
	208, 1765,
	209, 1765,
	210, 1765,
	211, 1765,
	213, 1765,
	214, 1765,
	217, 1765,
	218, 1765,
	219, 1765,
	222, 1765,
	223, 1765,
	224, 1765,
	225, 1765,
	226, 1765,
	227, 1765,
	228, 1765,
	229, 1765,
	230, 1765,
	231, 1765,
	234, 1765,
	236, 1765,
	237, 1765,
	238, 1765,
	239, 1765,
	241, 1765,
	242, 1765,
	245, 1765,
	246, 1765,
	247, 1765,
	249, 1765,
	250, 1765,
	252, 1765,
	254, 1765,
	255, 1765,
	256, 1765,
	257, 1765,
	258, 1765,
	259, 1765,
	260, 1765,
	261, 1765,
	263, 1765,
	264, 1765,
	265, 1765,
	266, 1765,
	267, 1765,
	269, 1765,
	270, 1765,
	271, 1765,
	272, 1765,
	273, 1765,
	274, 1765,
	275, 1765,
	276, 1765,
	277, 1765,
	279, 1765,
	280, 1765,
	281, 1765,
	282, 1765,
	283, 1765,
	284, 1765,
	285, 1765,
	286, 1765,
	287, 1765,
	288, 1765,
	289, 1765,
	290, 1765,
	291, 1765,
	293, 1765,
	294, 1765,
	295, 1765,
	296, 1765,
	297, 1765,
	298, 1765,
	299, 1765,
	300, 1765,
	301, 1765,
	302, 1765,
	303, 1765,
	304, 1765,
	305, 1765,
	306, 1765,
	307, 1765,
	308, 1765,
	310, 1765,
	311, 1765,
	312, 1765,
	313, 1765,
	314, 1765,
	315, 1765,
	316, 1765,
	317, 1765,
	318, 1765,
	320, 1765,
	321, 1765,
	322, 1765,
	323, 1765,
	324, 1765,
	325, 1765,
	326, 1765,
	327, 1765,
	328, 1765,
	330, 1765,
	331, 1765,
	332, 1765,
	333, 1765,
	334, 1765,
	335, 1765,
	336, 1765,
	337, 1765,
	338, 1765,
	339, 1765,
	340, 1765,
	341, 1765,
	343, 1765,
	344, 1765,
	346, 1765,
	347, 1765,
	348, 1765,
	349, 1765,
	350, 1765,
	351, 1765,
	352, 1765,
	353, 1765,
	354, 1765,
	356, 1765,
	357, 1765,
	358, 1765,
	359, 1765,
	362, 1765,
	363, 1765,
	364, 1765,
	365, 1765,
	367, 1765,
	368, 1765,
	370, 1765,
	371, 1765,
	374, 1765,
	375, 1765,
	376, 1765,
	377, 1765,
	379, 1765,
	381, 1765,
	382, 1765,
	383, 1765,
	384, 1765,
	385, 1765,
	386, 1765,
	387, 1765,
	389, 1765,
	390, 1765,
	391, 1765,
	396, 1765,
	397, 1765,
	398, 1765,
	399, 1765,
	400, 1765,
	401, 1765,
	402, 1765,
	403, 1765,
	405, 1765,
	406, 1765,
	407, 1765,
	408, 1765,
	409, 1765,
	410, 1765,
	412, 1765,
	413, 1765,
	414, 1765,
	415, 1765,
	416, 1765,
	417, 1765,
	418, 1765,
	419, 1765,
	420, 1765,
	422, 1765,
	425, 1765,
	426, 1765,
	429, 1765,
	430, 1765,
	-2, 0,
	-1, 1180,
	145, 1676,
	360, 1676,
	407, 1676,
	426, 1676,
	-2, 0,
	-1, 1244,
	1, 1719,
	423, 1719,
	425, 1719,
	426, 1719,
	427, 1719,
	428, 1719,
	-2, 544,
	-1, 1245,
	1, 1674,
	423, 1674,
	425, 1674,
	426, 1674,
	427, 1674,
	428, 1674,
	-2, 545,
	-1, 1257,
	129, 890,
	212, 890,
	240, 890,
	-2, 848,
	-1, 1347,
	116, 852,
	129, 852,
	185, 852,
	212, 852,
	240, 852,
	248, 852,
	372, 852,
	-2, 1238,
	-1, 1397,
	425, 1370,
	-2, 0,
	-1, 1430,
	116, 852,
	129, 852,
	185, 852,
	212, 852,
	240, 852,
	248, 852,
	372, 852,
	-2, 960,
	-1, 1483,
	424, 1072,
	-2, 1060,
	-1, 1526,
	191, 786,
	269, 786,
	274, 786,
	-2, 389,
	-1, 1752,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1117,
	-1, 1753,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1118,
	-1, 1754,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1119,
	-1, 1755,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1120,
	-1, 1756,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1121,
	-1, 1757,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1122,
	-1, 1758,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1123,
	-1, 1759,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1124,
	-1, 1771,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1136,
	-1, 1772,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1137,
	-1, 1773,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1138,
	-1, 1776,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1143,
	-1, 1782,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1147,
	-1, 1784,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1155,
	-1, 1785,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1156,
	-1, 1786,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1157,
	-1, 1787,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1158,
	-1, 1875,
	5, 1029,
	145, 1381,
	424, 1492,
	-2, 1483,
	-1, 1876,
	145, 1382,
	-2, 1723,
	-1, 1877,
	145, 1383,
	-2, 1607,
	-1, 1878,
	145, 1384,
	-2, 1543,
	-1, 1879,
	145, 1385,
	-2, 1574,
	-1, 1880,
	145, 1386,
	-2, 1606,
	-1, 1881,
	145, 1387,
	-2, 1668,
	-1, 1949,
	1, 961,
	82, 961,
	116, 961,
	129, 961,
	146, 961,
	151, 961,
	154, 961,
	176, 961,
	185, 961,
	194, 961,
	208, 961,
	212, 961,
	227, 961,
	240, 961,
	243, 961,
	248, 961,
	292, 961,
	294, 961,
	372, 961,
	380, 961,
	393, 961,
	394, 961,
	404, 961,
	423, 961,
	425, 961,
	427, 961,
	428, 961,
	429, 961,
	-2, 960,
	-1, 1954,
	424, 1469,
	-2, 1481,
	-1, 1972,
	424, 1071,
	-2, 1061,
	-1, 2069,
	425, 1440,
	429, 1440,
	-2, 1456,
	-1, 2172,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1145,
	-1, 2173,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1149,
	-1, 2179,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1151,
	-1, 2355,
	191, 786,
	269, 786,
	274, 786,
	-2, 386,
	-1, 2435,
	259, 876,
	-2, 692,
	-1, 2503,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1153,
	-1, 2510,
	189, 0,
	190, 0,
	234, 0,
	-2, 1172,
	-1, 2571,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1202,
	-1, 2572,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1203,
	-1, 2573,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1204,
	-1, 2577,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1208,
	-1, 2578,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1209,
	-1, 2579,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1210,
	-1, 2621,
	424, 1470,
	-2, 1482,
	-1, 2737,
	189, 0,
	190, 0,
	234, 0,
	-2, 1173,
	-1, 2740,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1176,
	-1, 2741,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1178,
	-1, 2883,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1177,
	-1, 2884,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1179,
	-1, 2894,
	189, 0,
	-2, 1211,
	-1, 2981,
	189, 0,
	-2, 1212,
	-1, 3078,
	39, 0,
	164, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1726,
}

const sqlPrivate = 57344

const sqlLast = 62632

var sqlAct = [...]int{

	797, 2928, 3087, 3055, 3144, 3077, 2102, 2846, 3057, 3054,
	3042, 3088, 2676, 3089, 2110, 1674, 2917, 2541, 2165, 2861,
	2985, 1739, 194, 1071, 194, 3076, 915, 194, 194, 194,
	194, 1453, 2689, 2453, 194, 2817, 2802, 194, 1167, 2445,
	2642, 2694, 719, 2792, 1941, 2200, 1799, 2641, 2699, 728,
	1263, 972, 509, 2898, 2643, 2071, 2458, 2099, 755, 1423,
	2067, 194, 1130, 2329, 2447, 2280, 1454, 1345, 2318, 2772,
	612, 558, 1425, 1910, 2131, 1626, 2198, 2294, 2133, 1630,
	2111, 1404, 1629, 1638, 2070, 2007, 1571, 194, 2305, 1641,
	19, 558, 1942, 1064, 2594, 1580, 189, 727, 138, 2279,
	2986, 1355, 1811, 1736, 2161, 1083, 2847, 1732, 1433, 1977,
	1163, 1080, 5, 2457, 1598, 1604, 1559, 1937, 1557, 793,
	1627, 1998, 1828, 2334, 963, 1839, 1796, 2037, 1978, 1405,
	92, 2068, 953, 1907, 1073, 1176, 1150, 1160, 2104, 1623,
	896, 2074, 944, 1367, 476, 559, 560, 191, 190, 1822,
	899, 1944, 1929, 1414, 878, 1914, 1871, 1336, 2363, 1812,
	1264, 145, 1262, 554, 2036, 503, 1647, 1174, 54, 1147,
	194, 194, 1091, 488, 146, 1570, 754, 494, 479, 484,
	876, 901, 652, 138, 1133, 1268, 2196, 962, 2610, 904,
	1675, 2611, 718, 1655, 1655, 2103, 1424, 3174, 607, 1979,
	1655, 1923, 3167, 3166, 3141, 3139, 1923, 1923, 2816, 2816,
	3136, 3107, 526, 3106, 1611, 1923, 1653, 1923, 563, 566,
	723, 3103, 3100, 3097, 1667, 3104, 3101, 1611, 3074, 3073,
	3039, 2464, 1667, 1667, 1611, 2465, 3038, 3035, 563, 566,
	1611, 1965, 3025, 3019, 3017, 3015, 1611, 2816, 2816, 2816,
	2429, 1112, 3013, 2498, 621, 2983, 2816, 1106, 2957, 1965,
	2955, 2946, 1611, 2945, 2816, 1611, 2938, 1611, 2937, 2904,
	1611, 2885, 2816, 1611, 1923, 1965, 138, 769, 724, 2875,
	2843, 2837, 1979, 2476, 1923, 1923, 893, 2815, 2739, 2252,
	2253, 2816, 1965, 2713, 2705, 2616, 723, 2706, 2706, 2617,
	706, 2606, 2600, 1607, 2534, 2607, 1923, 2597, 1611, 2350,
	2483, 2215, 2291, 705, 2421, 796, 1923, 2216, 1962, 2247,
	2246, 879, 879, 1923, 1923, 1276, 1277, 713, 795, 2242,
	2227, 2129, 1995, 1923, 2228, 1671, 1923, 1982, 1964, 1956,
	1916, 1923, 1965, 1611, 752, 1922, 929, 3036, 924, 1923,
	1279, 880, 1611, 1670, 882, 1667, 883, 1671, 2909, 1276,
	1277, 2597, 1309, 1310, 1311, 1319, 1320, 1321, 1915, 2838,
	1611, 1276, 1277, 1825, 2051, 1996, 1529, 1278, 2476, 2084,
	2421, 2164, 1610, 1993, 1279, 1298, 1400, 1325, 1090, 178,
	2466, 884, 175, 881, 712, 711, 1279, 710, 709, 2787,
	175, 1923, 2252, 2253, 708, 2270, 2271, 2272, 704, 2467,
	1111, 1278, 703, 702, 1276, 1277, 1105, 925, 2258, 1298,
	2735, 1548, 701, 1278, 700, 699, 1295, 698, 177, 2733,
	1656, 1656, 697, 1826, 696, 695, 177, 1656, 694, 1279,
	693, 650, 649, 648, 1301, 1302, 1303, 1304, 647, 646,
	645, 644, 2252, 2253, 1284, 910, 643, 642, 641, 640,
	639, 638, 2267, 637, 636, 194, 1278, 635, 176, 634,
	633, 632, 631, 630, 194, 1948, 176, 2199, 1301, 1302,
	1303, 1304, 1306, 1307, 1308, 629, 169, 628, 1284, 627,
	626, 620, 619, 907, 170, 598, 2268, 194, 1827, 1824,
	1284, 597, 579, 194, 578, 577, 906, 147, 569, 568,
	1346, 567, 1316, 1326, 544, 147, 1306, 1307, 1308, 2464,
	525, 524, 908, 523, 522, 521, 520, 519, 1306, 1307,
	1308, 2258, 1299, 518, 1611, 517, 516, 515, 514, 513,
	498, 194, 187, 1284, 922, 1293, 1294, 194, 975, 194,
	194, 1076, 194, 975, 194, 186, 185, 952, 175, 1314,
	184, 957, 194, 194, 175, 183, 1299, 2092, 2751, 1663,
	1654, 1306, 1307, 1308, 1862, 182, 1715, 181, 1299, 2269,
	2273, 2258, 194, 194, 1829, 194, 1076, 1076, 194, 194,
	194, 2707, 194, 925, 177, 180, 1442, 194, 1305, 179,
	177, 194, 194, 194, 194, 194, 1076, 1076, 2614, 2268,
	1076, 2332, 194, 1076, 194, 1300, 2221, 1276, 1277, 2211,
	2148, 1299, 2062, 1957, 1915, 1426, 1553, 2424, 1440, 942,
	925, 1860, 1305, 1858, 176, 1677, 1361, 1096, 959, 917,
	176, 3094, 1279, 2107, 169, 1171, 1067, 1275, 3075, 1300,
	169, 1856, 170, 2976, 2958, 2252, 2253, 1076, 170, 2268,
	1854, 1300, 1357, 2876, 1086, 2869, 2927, 2789, 939, 1278,
	2912, 2910, 1317, 147, 1357, 2771, 1823, 194, 1120, 147,
	1616, 1123, 1940, 2770, 2758, 1134, 1134, 968, 2757, 1061,
	1066, 194, 2269, 2254, 2255, 2256, 2257, 2259, 2260, 1676,
	1970, 892, 2756, 1138, 1300, 2755, 2749, 1093, 1092, 563,
	566, 2748, 1100, 2747, 2746, 2629, 1164, 2628, 966, 964,
	2626, 2620, 2591, 2590, 2589, 2093, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 2518, 2514, 1149, 1154, 1157,
	724, 1099, 2269, 1104, 1177, 1110, 1284, 2420, 1258, 2327,
	1315, 1257, 2287, 1290, 1291, 1297, 1296, 1292, 1318, 2278,
	1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 2251,
	2248, 2245, 2243, 2054, 1135, 1280, 1281, 1282, 1283, 1285,
	1286, 2226, 2205, 2204, 2258, 1358, 1185, 1356, 1635, 2197,
	2130, 1949, 1833, 1188, 1275, 1274, 2264, 2265, 2266, 1808,
	1614, 1344, 3172, 2263, 2261, 2262, 2254, 2255, 2256, 2257,
	2259, 2260, 3152, 3151, 916, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 2543, 3069, 3067, 2988, 1549, 2038,
	3062, 1256, 3011, 3009, 3006, 3005, 1189, 2160, 3000, 2997,
	2974, 2024, 2973, 1276, 1277, 1802, 2868, 2923, 2896, 2859,
	2855, 2851, 175, 2263, 2261, 2262, 2254, 2255, 2256, 2257,
	2259, 2260, 2849, 2786, 2769, 2344, 2683, 2682, 1279, 2680,
	2659, 2658, 2648, 2647, 2602, 2509, 175, 2091, 194, 2477,
	2373, 2439, 2252, 2253, 2413, 2270, 2271, 2272, 177, 706,
	2394, 2373, 2372, 724, 2346, 1278, 2290, 1259, 2252, 2253,
	2734, 2225, 705, 2224, 194, 2210, 1402, 1271, 1272, 2188,
	1368, 1365, 177, 1974, 2252, 2253, 1973, 194, 975, 194,
	194, 1952, 1934, 1076, 558, 194, 194, 2311, 176, 558,
	194, 1276, 1277, 194, 194, 1921, 1852, 194, 169, 1340,
	1618, 1439, 2267, 1403, 175, 1399, 170, 1398, 1397, 1396,
	1395, 1394, 176, 1393, 1392, 1391, 1279, 1369, 1370, 1389,
	975, 1388, 169, 1421, 1387, 1411, 194, 2106, 1408, 1409,
	170, 1386, 1284, 1385, 1434, 1384, 1383, 1382, 1678, 1381,
	177, 1276, 1277, 1278, 1380, 1379, 1460, 1384, 1378, 1523,
	1377, 147, 1341, 138, 1339, 1179, 2788, 1861, 961, 938,
	1306, 1307, 1308, 1551, 927, 2743, 1279, 2625, 1422, 2609,
	1544, 2258, 1524, 2605, 2214, 1967, 1935, 1358, 2342, 175,
	176, 1280, 1281, 1282, 1283, 1285, 1286, 2258, 1435, 879,
	169, 724, 1337, 1278, 956, 1555, 2252, 2253, 170, 1445,
	3010, 1298, 2232, 2258, 1519, 2448, 2874, 1893, 2252, 2253,
	1299, 1431, 1979, 2397, 1859, 177, 1857, 2839, 1401, 147,
	2273, 2256, 2257, 2259, 2260, 1426, 1526, 2612, 1548, 2913,
	2911, 563, 566, 2479, 1855, 1565, 563, 566, 2478, 1547,
	1428, 955, 1254, 1853, 1363, 2507, 2231, 1449, 2926, 2268,
	1076, 194, 1516, 1374, 954, 176, 1548, 975, 1548, 1375,
	1301, 1302, 1303, 1304, 1451, 169, 1372, 1384, 2267, 2230,
	1284, 1535, 1373, 170, 2229, 1825, 1575, 2170, 1204, 2026,
	194, 2268, 951, 891, 2657, 542, 1675, 1631, 1540, 2408,
	2252, 2253, 2353, 1300, 147, 1593, 2040, 194, 1306, 1307,
	1308, 1619, 194, 1556, 194, 2899, 194, 2103, 1539, 1538,
	194, 2545, 1548, 1545, 3095, 1840, 2219, 1634, 1972, 1094,
	543, 1390, 1371, 3105, 3102, 2460, 2637, 1595, 3051, 2690,
	1597, 2137, 2269, 1601, 3129, 1826, 910, 2258, 910, 1636,
	1076, 194, 1076, 3024, 726, 1579, 2357, 1076, 1299, 3130,
	2829, 1983, 2100, 1605, 3171, 538, 2952, 1447, 1076, 1076,
	2000, 194, 1193, 2949, 2269, 536, 3096, 194, 2948, 2947,
	2673, 2662, 558, 194, 907, 194, 907, 194, 1644, 194,
	1343, 194, 1705, 2670, 2669, 1679, 593, 906, 534, 906,
	973, 194, 532, 194, 2634, 1084, 1093, 1092, 563, 566,
	1827, 1824, 194, 908, 1542, 908, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 1684, 1305, 2268, 529, 2633, 2209, 2258,
	545, 194, 1600, 1609, 722, 2208, 1536, 1560, 1228, 1703,
	1561, 1300, 2207, 2206, 2174, 2056, 2264, 2265, 2266, 975,
	2343, 2000, 1149, 2263, 2261, 2262, 2254, 2255, 2256, 2257,
	2259, 2260, 1999, 2050, 2047, 2028, 1961, 1783, 1089, 965,
	594, 1651, 2254, 2255, 2256, 2257, 2259, 2260, 956, 956,
	2790, 1646, 1649, 1717, 1177, 1719, 2261, 2262, 2254, 2255,
	2256, 2257, 2259, 2260, 1851, 3023, 1829, 1850, 2396, 1849,
	1486, 1848, 1741, 721, 1712, 1460, 1460, 2268, 2269, 2009,
	1286, 919, 1191, 1737, 1738, 1572, 939, 1672, 1227, 2813,
	2880, 2485, 551, 691, 1562, 955, 955, 2027, 1543, 563,
	566, 1713, 975, 2930, 1680, 2631, 1564, 1798, 1955, 2019,
	3071, 1658, 1569, 1798, 1660, 1694, 2810, 1662, 2650, 2803,
	1261, 1665, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 2825, 2801, 1806, 1573, 1574, 723, 2805, 1804, 3091,
	819, 194, 931, 937, 2018, 1968, 1687, 1650, 2487, 2486,
	2145, 2528, 1829, 493, 1813, 1814, 2811, 1566, 1823, 1780,
	2269, 1716, 2455, 2012, 1718, 975, 194, 2162, 2163, 553,
	706, 3121, 1813, 706, 706, 194, 1847, 1840, 194, 1239,
	2405, 975, 2400, 1728, 2804, 2260, 1729, 1730, 3002, 2263,
	2261, 2262, 2254, 2255, 2256, 2257, 2259, 2260, 1205, 1435,
	1837, 3129, 3033, 1870, 1960, 1874, 1874, 1884, 1886, 1891,
	724, 1813, 1714, 1592, 732, 1549, 2038, 1913, 3154, 1950,
	1577, 1253, 2385, 724, 1655, 2044, 2358, 724, 2356, 1276,
	1277, 175, 1223, 1809, 932, 2660, 1936, 1829, 596, 595,
	1946, 1947, 1567, 1549, 2038, 1549, 2038, 682, 1711, 1226,
	3092, 3120, 1366, 1953, 1279, 1567, 547, 2384, 1835, 194,
	720, 1450, 1201, 2823, 1926, 2671, 1517, 177, 717, 2391,
	552, 2525, 599, 2262, 2254, 2255, 2256, 2257, 2259, 2260,
	1224, 1278, 2416, 1963, 1778, 1781, 2087, 2011, 2806, 1882,
	138, 2807, 879, 540, 975, 1911, 539, 1902, 2048, 1549,
	1546, 194, 1567, 724, 1919, 1920, 530, 176, 549, 194,
	1927, 1931, 1932, 2725, 2813, 2890, 1997, 169, 3093, 194,
	1192, 3031, 1704, 1431, 2809, 170, 1575, 2953, 2651, 530,
	1334, 1777, 194, 531, 2812, 1076, 2526, 683, 2223, 1930,
	1443, 2810, 1945, 546, 723, 2456, 147, 194, 975, 3032,
	1969, 194, 194, 1575, 1832, 2005, 2001, 530, 1284, 194,
	472, 918, 194, 2931, 604, 194, 2623, 1563, 1236, 1702,
	2824, 1980, 2632, 930, 2727, 3119, 550, 3147, 753, 1581,
	1460, 2811, 1554, 467, 194, 1369, 1370, 548, 2031, 1210,
	3090, 194, 2010, 194, 2455, 194, 1981, 1585, 194, 948,
	194, 3128, 194, 1976, 194, 194, 3126, 194, 1076, 1076,
	1076, 1984, 1076, 2005, 2176, 2030, 194, 194, 1527, 194,
	1797, 194, 1829, 2013, 2015, 2045, 2963, 2794, 1067, 2808,
	2858, 1413, 194, 910, 194, 2139, 692, 1805, 1582, 1260,
	1560, 603, 2004, 1561, 1779, 2114, 1237, 2125, 2126, 2021,
	910, 1267, 194, 194, 194, 3155, 194, 2057, 2059, 2029,
	2443, 1656, 936, 2030, 2150, 2058, 1686, 2097, 1794, 684,
	2095, 907, 2046, 2005, 1621, 1410, 194, 949, 1986, 2023,
	928, 923, 950, 462, 906, 933, 2387, 2136, 907, 1792,
	1988, 2039, 2041, 2042, 2043, 1417, 1093, 2060, 563, 566,
	908, 906, 2767, 2726, 2085, 1586, 2389, 2580, 138, 2053,
	1567, 1238, 2351, 2806, 2121, 1576, 2807, 908, 2123, 1612,
	1989, 3161, 2793, 2127, 2064, 1420, 2066, 1562, 2109, 943,
	1202, 2335, 1987, 2940, 2118, 2939, 2119, 1603, 2120, 1564,
	2921, 2153, 2122, 1415, 2116, 2388, 1177, 2128, 2140, 2809,
	2138, 2994, 2636, 3145, 2828, 1602, 2105, 1418, 2105, 2812,
	2444, 2827, 685, 2155, 1596, 606, 1587, 1588, 2177, 2369,
	1190, 2365, 682, 194, 1334, 1583, 1416, 2185, 1203, 1417,
	601, 1200, 1599, 2319, 2096, 1266, 1788, 1534, 1645, 794,
	1566, 2159, 2307, 717, 1789, 1633, 2157, 1790, 2183, 686,
	1795, 1584, 1724, 1632, 1573, 1574, 1628, 948, 1620, 1420,
	3043, 192, 2795, 463, 3146, 602, 480, 486, 480, 491,
	2524, 468, 2032, 497, 1708, 1266, 512, 1928, 2152, 1530,
	1211, 2202, 2203, 2581, 2768, 1282, 1283, 1285, 1286, 2582,
	2695, 1418, 2149, 1419, 3148, 2212, 2862, 2175, 605, 1532,
	486, 2922, 2375, 2374, 2808, 1681, 3160, 2168, 975, 600,
	564, 2292, 683, 1533, 625, 1959, 2299, 2300, 1265, 469,
	2320, 618, 2308, 724, 194, 1567, 615, 194, 1589, 1925,
	564, 1924, 1958, 1136, 194, 949, 1146, 194, 194, 975,
	950, 1144, 2083, 2826, 1725, 2180, 1267, 2677, 975, 721,
	1137, 1740, 194, 2422, 2218, 470, 2181, 471, 1265, 2186,
	1643, 2322, 474, 3133, 2848, 2151, 194, 2418, 948, 2919,
	2773, 2315, 2595, 2289, 3, 1845, 1251, 1419, 1791, 2306,
	1233, 2323, 2324, 2857, 3135, 2301, 1793, 1590, 194, 194,
	194, 2895, 2313, 2766, 194, 2675, 2316, 194, 2314, 2281,
	2033, 2034, 2920, 2508, 194, 194, 194, 194, 194, 486,
	486, 2336, 2326, 2338, 1460, 2296, 2310, 909, 194, 194,
	2331, 2354, 2341, 2303, 2304, 1231, 194, 2309, 2284, 2285,
	2286, 2347, 2348, 2359, 1841, 2293, 1221, 1219, 194, 1076,
	2244, 194, 1217, 2362, 684, 1215, 949, 975, 2005, 2366,
	1563, 950, 2187, 975, 1460, 1213, 2055, 1207, 2376, 2025,
	2379, 1142, 2370, 1975, 2282, 1441, 1438, 194, 1252, 194,
	1186, 194, 2147, 2337, 1076, 194, 738, 194, 1076, 1076,
	1076, 2399, 570, 2856, 1701, 2321, 194, 2182, 2430, 2146,
	2142, 1710, 194, 1565, 1691, 2184, 1518, 194, 2355, 194,
	1376, 1119, 1844, 2360, 623, 624, 194, 3086, 3040, 2799,
	2693, 616, 617, 1954, 2655, 2653, 2635, 2442, 1565, 1250,
	2101, 1145, 2089, 1232, 2088, 2086, 1143, 1076, 1076, 2080,
	2390, 2406, 2330, 2462, 1123, 2450, 2475, 685, 2451, 194,
	975, 194, 194, 975, 194, 2401, 2484, 473, 1605, 2395,
	2423, 2459, 2409, 914, 1605, 2371, 2404, 2410, 2426, 194,
	2459, 1669, 2415, 2377, 2414, 2381, 2382, 1668, 1230, 1666,
	2433, 1664, 2166, 1123, 686, 1661, 2536, 1659, 1657, 1220,
	1218, 2392, 1617, 2393, 910, 1216, 1615, 1606, 1214, 1594,
	1591, 1578, 910, 910, 2492, 2402, 910, 2446, 1212, 2403,
	1206, 1568, 975, 2449, 1141, 2967, 3130, 1269, 2081, 2878,
	2511, 2411, 975, 2412, 194, 2877, 1552, 138, 2000, 2468,
	910, 2969, 907, 2017, 1700, 2000, 1994, 724, 1575, 2016,
	907, 907, 2474, 888, 907, 906, 2014, 1460, 2427, 2704,
	1248, 1249, 2167, 906, 906, 2489, 1688, 906, 3004, 2437,
	2461, 908, 2490, 2494, 2493, 2818, 889, 2978, 907, 908,
	908, 2546, 2496, 908, 2774, 2035, 2020, 1273, 2520, 2521,
	2522, 906, 571, 572, 2052, 2022, 1560, 3037, 2143, 1561,
	2144, 1276, 1277, 1460, 1460, 2854, 2547, 908, 1270, 2516,
	528, 1737, 2550, 1276, 1277, 2619, 2108, 2090, 2079, 1912,
	1525, 1460, 1460, 1447, 920, 194, 1279, 1452, 2535, 1737,
	2560, 2340, 3143, 615, 2542, 475, 3159, 194, 1485, 1346,
	2527, 2529, 2530, 975, 2624, 2469, 2470, 2471, 2549, 2472,
	2473, 2531, 1460, 1278, 1991, 2584, 934, 890, 2613, 2557,
	2588, 194, 512, 2345, 487, 1278, 2559, 2252, 2253, 2608,
	574, 573, 2592, 2744, 533, 535, 1276, 1277, 1991, 1990,
	1195, 1992, 1846, 1562, 1821, 2523, 1194, 1344, 1413, 1235,
	2585, 2593, 1234, 1342, 2907, 1564, 2872, 2712, 138, 2688,
	497, 2440, 2438, 2601, 2598, 2599, 192, 194, 192, 192,
	2094, 1081, 1637, 192, 2596, 1247, 1246, 575, 576, 1229,
	1225, 564, 1095, 1222, 2627, 1208, 935, 2604, 863, 2615,
	774, 1528, 194, 194, 541, 194, 690, 2929, 1241, 2213,
	194, 192, 1118, 2674, 192, 2652, 1566, 192, 192, 192,
	3050, 1081, 1417, 975, 194, 680, 192, 2383, 1076, 2667,
	192, 192, 192, 192, 1081, 2684, 1690, 2639, 1209, 1622,
	1692, 512, 2312, 192, 1933, 194, 3030, 2752, 2663, 2222,
	2708, 2697, 1420, 2984, 2889, 1843, 2005, 194, 194, 1076,
	1076, 1076, 1362, 194, 194, 2668, 194, 2672, 2701, 80,
	1415, 763, 845, 2800, 2638, 2724, 2073, 2719, 2072, 975,
	2030, 2700, 978, 1537, 1418, 768, 2678, 2622, 2681, 2686,
	1550, 2696, 2679, 2661, 1971, 1873, 2729, 1456, 2687, 2114,
	771, 1567, 1458, 1416, 773, 772, 192, 1459, 1364, 2698,
	770, 1455, 2082, 2112, 670, 1541, 1803, 2702, 1838, 2217,
	192, 2738, 1359, 2710, 194, 2709, 743, 765, 1558, 1836,
	926, 742, 2715, 2720, 2721, 2714, 2317, 2454, 2339, 2618,
	2691, 2867, 1723, 2644, 2158, 1720, 1457, 590, 1460, 2249,
	960, 1899, 2349, 1892, 2296, 1888, 1255, 1335, 2113, 958,
	746, 1801, 1351, 2192, 2328, 2463, 910, 1966, 1731, 2742,
	1419, 887, 886, 885, 3056, 3053, 2654, 2723, 2656, 1531,
	2298, 1985, 1328, 194, 759, 2297, 2425, 1116, 3003, 1327,
	537, 2996, 947, 975, 946, 975, 2730, 945, 2368, 3153,
	2649, 174, 171, 2765, 907, 173, 172, 2665, 2417, 96,
	59, 2325, 58, 57, 194, 194, 194, 906, 18, 120,
	2333, 119, 118, 117, 116, 115, 1563, 114, 113, 194,
	112, 910, 111, 908, 194, 110, 194, 109, 108, 194,
	194, 194, 194, 194, 107, 2779, 106, 105, 2776, 2777,
	194, 194, 1076, 104, 975, 2780, 1076, 1485, 1485, 2781,
	2819, 2785, 103, 194, 194, 102, 101, 100, 2796, 907,
	2005, 2798, 99, 98, 975, 2821, 97, 1076, 56, 508,
	505, 35, 906, 34, 95, 94, 2775, 194, 2830, 17,
	55, 14, 39, 40, 2845, 13, 2835, 52, 908, 53,
	2864, 89, 88, 51, 16, 50, 975, 486, 2850, 48,
	2782, 49, 2840, 2866, 11, 8, 20, 10, 2005, 12,
	47, 143, 1727, 910, 2853, 2333, 142, 83, 1429, 2881,
	909, 2873, 975, 192, 2451, 141, 2865, 82, 140, 139,
	2863, 2459, 81, 2871, 2841, 46, 1095, 1123, 192, 1446,
	9, 45, 135, 564, 1095, 480, 78, 2879, 564, 1095,
	137, 907, 1081, 192, 136, 75, 512, 134, 975, 133,
	76, 2844, 132, 2797, 906, 131, 77, 130, 44, 6,
	194, 2897, 194, 38, 975, 194, 7, 2330, 2791, 2352,
	908, 2860, 30, 194, 2831, 497, 31, 15, 1412, 975,
	73, 2836, 2886, 72, 71, 2916, 43, 715, 1460, 682,
	2902, 2903, 1084, 37, 42, 973, 2933, 2644, 2935, 194,
	2934, 165, 164, 163, 2189, 2190, 162, 158, 2901, 1349,
	717, 2906, 2905, 1354, 2005, 2914, 157, 2932, 161, 194,
	159, 160, 156, 129, 1076, 167, 166, 154, 151, 194,
	2644, 1894, 150, 153, 2870, 910, 155, 152, 149, 168,
	128, 194, 68, 127, 126, 125, 716, 2965, 1460, 2951,
	124, 2950, 2972, 123, 2533, 910, 2942, 2954, 67, 2956,
	194, 41, 2, 2960, 2539, 2966, 194, 2962, 1, 0,
	0, 0, 194, 907, 194, 1457, 1457, 0, 0, 683,
	194, 2971, 2970, 0, 2700, 910, 906, 2964, 2982, 0,
	0, 0, 2977, 907, 0, 2451, 2993, 0, 0, 0,
	564, 2999, 908, 2275, 2276, 2277, 906, 2630, 194, 194,
	2987, 0, 2992, 2989, 194, 1460, 0, 3014, 910, 0,
	2915, 0, 908, 907, 194, 1076, 0, 730, 0, 192,
	194, 3016, 3001, 0, 1076, 1076, 906, 0, 0, 0,
	0, 0, 1485, 0, 0, 0, 1642, 0, 3021, 0,
	0, 192, 908, 192, 3018, 192, 907, 0, 194, 486,
	0, 194, 3007, 194, 3027, 975, 2644, 3046, 3022, 906,
	3058, 0, 3028, 3029, 0, 2621, 0, 3064, 0, 3066,
	3048, 3068, 0, 2959, 3065, 908, 3052, 3063, 0, 0,
	512, 0, 3072, 0, 0, 0, 0, 194, 0, 2644,
	0, 2644, 3070, 0, 0, 2644, 0, 2943, 2944, 2644,
	512, 684, 3034, 0, 0, 3085, 192, 3084, 3082, 3083,
	3060, 564, 192, 194, 192, 0, 192, 0, 192, 0,
	192, 3109, 194, 0, 0, 0, 3098, 3110, 0, 3111,
	1706, 3113, 1707, 3059, 3118, 3061, 3115, 194, 0, 3116,
	3117, 192, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 3127, 3125, 3124, 0, 0, 0, 3008, 3058, 3131,
	512, 3132, 0, 3134, 0, 3112, 0, 3114, 3137, 3138,
	0, 3140, 3142, 0, 0, 0, 2114, 910, 3026, 910,
	0, 0, 907, 910, 3150, 3149, 0, 910, 0, 0,
	0, 3156, 714, 3157, 685, 906, 0, 0, 0, 3158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 907, 0, 907, 0, 3164,
	3165, 907, 3168, 3169, 3170, 907, 0, 0, 906, 0,
	906, 686, 3175, 0, 906, 0, 0, 0, 906, 0,
	0, 0, 0, 0, 908, 0, 908, 0, 0, 2778,
	908, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 2252, 2253, 0, 2270, 2271, 2272, 0,
	1457, 0, 0, 2504, 2505, 3162, 3163, 0, 0, 0,
	0, 2513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2822, 3173, 0, 0, 0,
	486, 0, 0, 0, 0, 2832, 2833, 2644, 0, 2644,
	0, 0, 0, 0, 0, 909, 0, 0, 0, 0,
	0, 1894, 1894, 2267, 0, 486, 0, 0, 0, 2852,
	0, 0, 909, 0, 486, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2784, 0, 0,
	0, 0, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568,
	2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578,
	2579, 0, 2583, 0, 0, 0, 730, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2258, 0, 0, 910, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 0, 1485, 0, 480, 0,
	1894, 1894, 1894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 907, 580, 907, 0, 0, 0, 0,
	1097, 2273, 1101, 0, 1107, 0, 906, 0, 906, 0,
	0, 0, 0, 0, 0, 0, 1485, 0, 973, 0,
	2008, 0, 908, 0, 908, 0, 0, 0, 192, 0,
	2268, 1807, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 557, 0, 0, 2887, 1184, 0, 0, 583, 1349,
	0, 192, 1187, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 0, 0, 0, 0, 192, 0, 0, 0,
	564, 2061, 0, 0, 0, 2968, 0, 0, 2069, 0,
	2887, 1095, 0, 0, 192, 0, 591, 0, 0, 0,
	0, 0, 0, 1898, 0, 0, 1740, 0, 0, 0,
	589, 0, 0, 1642, 0, 0, 0, 0, 0, 0,
	2008, 1740, 486, 2269, 192, 0, 0, 192, 2990, 192,
	2991, 192, 0, 192, 192, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 2134, 615, 0, 2008, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 1330, 1331, 1332, 1333, 0, 0, 0,
	0, 192, 192, 192, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 0, 0, 192, 1360, 0, 0, 1485,
	0, 0, 0, 0, 0, 0, 0, 3047, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 2264, 2265, 2266,
	0, 0, 0, 0, 2263, 2261, 2262, 2254, 2255, 2256,
	2257, 2259, 2260, 1170, 0, 2252, 2253, 0, 2270, 2271,
	2272, 0, 0, 0, 0, 1485, 1485, 0, 0, 0,
	0, 0, 0, 2512, 1457, 0, 0, 0, 0, 0,
	1894, 1894, 0, 1485, 1485, 0, 0, 0, 0, 3108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 0, 586, 0, 0,
	0, 798, 1095, 0, 1485, 2267, 0, 1740, 0, 0,
	0, 0, 584, 0, 0, 0, 0, 69, 0, 610,
	0, 0, 0, 0, 1406, 1406, 1406, 0, 70, 0,
	0, 0, 0, 0, 0, 582, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 581, 0, 1894,
	1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
	1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 0, 1894,
	588, 0, 79, 0, 2258, 592, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 0, 909, 0, 0, 0,
	0, 587, 730, 0, 909, 909, 0, 0, 909, 0,
	0, 84, 0, 486, 0, 0, 486, 0, 0, 60,
	0, 0, 0, 486, 85, 0, 486, 486, 0, 0,
	0, 0, 1429, 2273, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 2894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 0, 1457, 0, 86,
	0, 0, 2268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 2008, 2364,
	0, 0, 0, 2008, 0, 0, 2364, 0, 0, 2924,
	0, 0, 0, 2008, 2364, 2008, 2364, 2364, 0, 0,
	0, 0, 0, 1457, 1457, 0, 902, 192, 192, 0,
	0, 0, 0, 1898, 1898, 1446, 0, 0, 0, 0,
	0, 1457, 1457, 0, 0, 0, 0, 192, 188, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	1485, 1077, 0, 976, 0, 2269, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 1642, 0, 1642, 0,
	192, 87, 0, 0, 192, 0, 192, 0, 0, 0,
	0, 0, 0, 2981, 0, 192, 1077, 1077, 0, 0,
	0, 1081, 0, 0, 0, 0, 2008, 0, 486, 144,
	90, 0, 91, 0, 0, 2008, 1077, 1077, 0, 0,
	1077, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	175, 0, 1898, 1898, 1898, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 121, 0, 0, 0, 2488, 0,
	1081, 192, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 1077, 192, 2264,
	2265, 2266, 0, 0, 0, 0, 2263, 2261, 2262, 2254,
	2255, 2256, 2257, 2259, 2260, 0, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 0, 0, 2544, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1721, 0, 1726, 0, 0, 0,
	0, 0, 1733, 0, 0, 609, 0, 0, 0, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 0, 1782, 0, 1784, 1785, 1786,
	1787, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 1810, 0, 909, 0,
	0, 0, 0, 0, 486, 0, 0, 0, 0, 0,
	1485, 1348, 0, 0, 1069, 1834, 486, 0, 0, 0,
	0, 0, 2252, 2253, 0, 2270, 2271, 2272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 0, 1124,
	1127, 0, 0, 0, 1890, 0, 1901, 1903, 1908, 0,
	0, 0, 0, 2646, 0, 0, 0, 0, 0, 977,
	1485, 0, 1078, 0, 977, 0, 1182, 0, 0, 0,
	0, 1894, 2267, 0, 0, 0, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1898, 1898, 0, 0, 0, 1078, 1078, 0,
	0, 2008, 1642, 0, 1642, 0, 0, 0, 976, 192,
	1196, 0, 0, 1077, 557, 0, 1894, 1078, 1078, 557,
	0, 1078, 0, 192, 1078, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2258, 0, 0, 2008, 909, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 2134, 2134, 0, 0,
	0, 0, 615, 615, 0, 192, 2274, 0, 1078, 0,
	0, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898,
	1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898,
	2273, 1898, 0, 0, 0, 0, 0, 0, 0, 0,
	1894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 2268,
	0, 0, 0, 2753, 0, 0, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 2063, 0, 2065, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 909, 0, 0,
	1077, 0, 1095, 0, 0, 0, 0, 976, 1114, 0,
	0, 0, 0, 0, 1132, 0, 0, 1429, 1457, 84,
	0, 0, 2269, 0, 0, 0, 0, 1153, 1153, 1153,
	1088, 0, 85, 2008, 2364, 2008, 0, 0, 0, 0,
	1183, 0, 0, 0, 0, 0, 0, 2646, 1095, 0,
	0, 0, 0, 2008, 0, 2364, 0, 0, 1095, 1095,
	192, 2008, 2364, 0, 0, 0, 0, 86, 0, 192,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2646, 0, 1095, 2069, 0, 1457, 0, 764, 93, 0,
	1077, 0, 1077, 0, 0, 0, 1448, 1077, 0, 0,
	0, 0, 0, 1240, 0, 0, 2008, 0, 1077, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 0, 0, 2264, 2265, 2266, 0,
	0, 0, 0, 2263, 2261, 2262, 2254, 2255, 2256, 2257,
	2259, 2260, 0, 0, 0, 0, 2172, 2173, 0, 977,
	0, 0, 2179, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 2193, 2194, 93, 0, 0, 0, 1834, 0, 0,
	0, 0, 0, 0, 0, 2201, 0, 0, 0, 976,
	0, 977, 0, 0, 0, 0, 0, 144, 90, 2008,
	91, 2364, 0, 0, 2918, 0, 0, 0, 0, 2220,
	0, 0, 192, 0, 0, 0, 2646, 0, 175, 0,
	0, 2233, 0, 0, 0, 0, 707, 0, 0, 611,
	0, 0, 121, 0, 0, 725, 0, 0, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2646,
	0, 2646, 0, 0, 177, 2646, 0, 0, 192, 2646,
	0, 0, 0, 1608, 0, 897, 93, 0, 1095, 0,
	0, 0, 976, 1908, 1908, 1908, 122, 0, 0, 0,
	192, 0, 0, 0, 1406, 0, 148, 0, 0, 0,
	0, 0, 2302, 0, 176, 0, 0, 0, 0, 2544,
	0, 0, 0, 0, 169, 486, 0, 0, 0, 0,
	0, 1095, 170, 1095, 0, 0, 0, 0, 0, 2918,
	0, 1078, 0, 0, 0, 0, 0, 0, 977, 0,
	1436, 1276, 1277, 147, 0, 976, 0, 1319, 1320, 1321,
	0, 1276, 1277, 0, 0, 1444, 0, 2008, 2364, 0,
	730, 976, 0, 192, 0, 1673, 1279, 0, 0, 1325,
	1521, 0, 730, 192, 0, 0, 1279, 0, 0, 2364,
	0, 1682, 1683, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 2386, 0,
	0, 1298, 0, 1278, 0, 0, 0, 3044, 0, 0,
	1095, 0, 192, 1898, 0, 2252, 2253, 0, 2270, 2271,
	2272, 1078, 0, 1078, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	1078, 0, 0, 0, 0, 0, 2544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1898, 0,
	1301, 1302, 1303, 1304, 0, 0, 0, 0, 0, 0,
	1284, 0, 1095, 0, 976, 2267, 0, 2646, 0, 2646,
	1284, 2008, 2452, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 1316, 1326, 2918, 0, 1306, 1307,
	1308, 0, 0, 0, 0, 0, 0, 69, 1306, 1307,
	1308, 0, 0, 0, 0, 1077, 0, 0, 70, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 2495,
	0, 1314, 1898, 1733, 2258, 0, 0, 0, 1299, 2499,
	2500, 0, 0, 2503, 0, 0, 1625, 2506, 1299, 0,
	0, 0, 79, 0, 0, 0, 2510, 0, 0, 0,
	0, 0, 0, 0, 0, 2517, 0, 0, 2302, 0,
	1648, 0, 1648, 0, 0, 0, 0, 0, 1077, 1077,
	1077, 84, 1077, 2273, 0, 0, 0, 0, 2537, 60,
	0, 0, 0, 977, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 2551, 2552, 0, 2553, 2554,
	2555, 0, 2268, 2556, 0, 0, 0, 0, 0, 2558,
	0, 1300, 2252, 2253, 0, 2270, 2271, 2272, 0, 86,
	0, 1300, 0, 1689, 0, 0, 0, 0, 0, 1695,
	0, 1696, 0, 1697, 1317, 1698, 0, 1699, 0, 0,
	2586, 2587, 0, 0, 0, 0, 977, 0, 0, 0,
	93, 0, 93, 0, 93, 0, 0, 0, 1709, 0,
	0, 0, 977, 0, 0, 0, 2603, 0, 0, 0,
	0, 0, 2267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2269, 0, 725, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	1318, 87, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 2640, 0, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 2258, 0, 0, 0, 0, 0, 0, 0, 144,
	90, 0, 91, 0, 2664, 1276, 1277, 0, 2049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 977, 0, 0, 0, 0,
	1279, 611, 0, 0, 121, 0, 0, 0, 0, 2264,
	2265, 2266, 0, 0, 0, 0, 2263, 2261, 2262, 2254,
	2255, 2256, 2257, 2259, 2260, 707, 177, 1278, 0, 0,
	0, 0, 0, 0, 1406, 1298, 1078, 0, 976, 2268,
	0, 0, 1338, 0, 0, 2711, 69, 0, 122, 977,
	0, 2124, 0, 0, 0, 0, 0, 70, 148, 0,
	1347, 0, 0, 0, 1353, 0, 176, 0, 0, 976,
	0, 0, 74, 0, 1951, 0, 169, 0, 976, 2502,
	2731, 2732, 0, 0, 170, 0, 2736, 2737, 0, 0,
	0, 2740, 2741, 0, 1301, 1302, 1303, 1304, 2745, 0,
	0, 79, 0, 0, 1284, 147, 0, 0, 0, 1078,
	1078, 1078, 0, 1078, 0, 0, 0, 2750, 0, 0,
	0, 0, 2269, 0, 2754, 0, 0, 0, 0, 0,
	84, 0, 1306, 1307, 1308, 0, 0, 0, 60, 0,
	0, 0, 0, 85, 0, 0, 0, 1276, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 1279, 0, 0, 0, 0, 976, 86, 0,
	0, 0, 1299, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 1427, 0, 1430, 1278,
	0, 0, 0, 0, 1077, 0, 0, 1298, 1077, 1077,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2820, 0, 2264, 2265, 2266, 0,
	0, 0, 0, 2263, 2261, 2262, 2254, 2255, 2256, 2257,
	2259, 2260, 0, 1088, 0, 0, 0, 0, 1305, 0,
	0, 2501, 0, 0, 0, 0, 0, 1077, 1077, 0,
	0, 1625, 0, 0, 0, 1300, 1301, 1302, 1303, 1304,
	976, 0, 0, 976, 0, 0, 1284, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2117, 0, 0, 1153, 0, 1153, 0, 1153, 0,
	1088, 1088, 0, 0, 1306, 1307, 1308, 0, 144, 90,
	0, 91, 2882, 2883, 2884, 0, 0, 2141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 0, 976, 0, 0, 0, 1276, 1277, 2892, 2893,
	611, 0, 976, 121, 0, 0, 0, 0, 2154, 1088,
	2156, 0, 2900, 0, 1299, 0, 0, 0, 0, 977,
	0, 1279, 0, 0, 0, 177, 0, 0, 0, 2908,
	0, 0, 2169, 0, 0, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 0, 0, 122, 1278, 0,
	977, 0, 0, 0, 0, 0, 1298, 148, 0, 977,
	0, 0, 0, 0, 0, 176, 2941, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 730, 0,
	1305, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 2407, 0, 0, 0, 0, 1300, 0, 0,
	2178, 0, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 0, 1284, 0, 2431, 0, 0,
	0, 2434, 2435, 2436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 1306, 1307, 1308, 0, 0, 977, 0,
	0, 0, 2995, 0, 977, 2998, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2481, 2482, 0, 0, 0, 1078, 0, 0, 0, 1078,
	1078, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1289, 1287,
	1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 707, 0, 1077, 707,
	707, 0, 0, 0, 0, 0, 0, 0, 1078, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 977, 0, 0, 977, 0, 0, 0, 0, 1077,
	1077, 1077, 0, 0, 0, 0, 0, 0, 0, 1305,
	3081, 3081, 3081, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 1800, 0, 1300, 0, 0, 0,
	3099, 0, 0, 0, 2361, 0, 0, 725, 0, 0,
	0, 1276, 1277, 0, 0, 0, 0, 0, 0, 0,
	1347, 0, 0, 977, 1347, 0, 0, 3081, 0, 0,
	0, 0, 0, 977, 2398, 1132, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 2428, 0, 0,
	0, 2432, 3081, 0, 0, 0, 0, 0, 0, 0,
	1430, 0, 2441, 976, 0, 976, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 1302, 1303, 1304, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2491, 0,
	1088, 0, 1077, 0, 976, 0, 1077, 0, 1306, 1307,
	1308, 0, 0, 0, 0, 2497, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 2716, 2717, 2718, 0, 0, 0, 93, 0,
	0, 0, 976, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 977, 1278, 0, 0, 0, 1078,
	0, 0, 1312, 1298, 0, 0, 0, 0, 93, 1279,
	0, 0, 1325, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 93, 1305, 93, 0, 0, 0, 0,
	1078, 1078, 1078, 0, 976, 0, 1278, 0, 0, 0,
	0, 1300, 0, 0, 1298, 0, 0, 2171, 0, 976,
	977, 1295, 0, 0, 0, 93, 0, 93, 0, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 0, 0, 0,
	0, 0, 1284, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	1306, 1307, 1308, 1301, 1302, 1303, 1304, 0, 0, 0,
	0, 0, 0, 1284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	1299, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 1322, 1323, 977, 2842, 977, 0, 0, 0,
	1293, 1294, 0, 0, 0, 0, 2685, 0, 0, 0,
	0, 0, 0, 66, 1314, 0, 0, 0, 69, 1800,
	2692, 1299, 0, 0, 0, 1077, 0, 0, 0, 70,
	61, 0, 0, 0, 1077, 1077, 0, 1324, 0, 0,
	1347, 0, 0, 0, 74, 0, 1305, 0, 0, 0,
	1313, 0, 0, 1078, 0, 977, 0, 1078, 0, 22,
	63, 0, 2722, 1300, 0, 976, 0, 0, 0, 0,
	0, 21, 0, 79, 0, 977, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 23, 0, 0, 0, 24, 0, 0,
	0, 0, 84, 0, 1300, 64, 0, 977, 0, 0,
	60, 32, 0, 0, 0, 85, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	0, 0, 897, 897, 0, 0, 897, 0, 0, 977,
	0, 0, 0, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 977, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 1315, 0, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 2761, 0,
	0, 0, 2760, 0, 0, 0, 0, 2834, 0, 0,
	0, 0, 0, 0, 0, 1078, 1132, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 27,
	93, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 33,
	144, 90, 0, 91, 0, 28, 0, 0, 0, 65,
	93, 0, 93, 0, 29, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 121, 0, 93, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 725, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 1078, 0, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 169, 0, 2925,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 4,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	3012, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3020, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 3049,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 791, 749, 750, 751, 747,
	748, 761, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 200, 0, 0,
	0, 0, 838, 766, 0, 0, 0, 201, 202, 203,
	0, 806, 785, 817, 775, 816, 815, 0, 207, 208,
	777, 776, 211, 212, 213, 767, 837, 214, 865, 866,
	424, 0, 215, 844, 0, 827, 0, 216, 217, 218,
	219, 220, 0, 222, 223, 224, 221, 0, 225, 0,
	226, 227, 0, 847, 228, 3080, 830, 828, 829, 834,
	832, 831, 833, 230, 231, 232, 233, 820, 235, 813,
	812, 739, 236, 897, 237, 0, 238, 0, 0, 239,
	811, 241, 0, 242, 0, 243, 244, 0, 744, 245,
	246, 248, 251, 247, 252, 253, 867, 868, 757, 848,
	0, 0, 0, 0, 0, 254, 255, 256, 810, 808,
	809, 0, 259, 0, 260, 0, 0, 849, 261, 0,
	262, 869, 0, 433, 263, 0, 264, 265, 266, 267,
	268, 269, 839, 840, 843, 0, 0, 841, 787, 0,
	0, 0, 0, 270, 272, 279, 0, 850, 273, 799,
	790, 801, 803, 804, 805, 800, 0, 792, 0, 280,
	0, 0, 281, 282, 283, 854, 825, 826, 0, 0,
	286, 287, 288, 0, 290, 289, 0, 291, 870, 855,
	292, 293, 0, 0, 294, 295, 0, 0, 296, 0,
	297, 741, 740, 298, 299, 301, 779, 300, 857, 303,
	304, 306, 305, 736, 0, 897, 758, 842, 814, 307,
	308, 0, 788, 789, 0, 0, 311, 312, 0, 0,
	313, 444, 859, 314, 860, 871, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 872, 323, 447, 324, 0,
	325, 326, 327, 328, 329, 330, 807, 331, 332, 0,
	333, 334, 335, 336, 337, 0, 339, 340, 338, 341,
	342, 343, 344, 0, 345, 861, 346, 347, 348, 349,
	745, 350, 0, 354, 355, 356, 357, 358, 359, 360,
	0, 366, 367, 780, 781, 783, 784, 362, 368, 369,
	835, 370, 351, 352, 371, 0, 372, 802, 782, 374,
	0, 384, 375, 376, 377, 353, 378, 382, 846, 379,
	380, 381, 873, 93, 385, 386, 0, 387, 388, 389,
	390, 391, 249, 392, 250, 778, 0, 821, 822, 823,
	824, 0, 0, 395, 396, 874, 875, 756, 397, 398,
	0, 3079, 400, 0, 0, 401, 402, 403, 405, 836,
	406, 0, 786, 407, 408, 409, 457, 818, 864, 0,
	411, 410, 460, 0, 0, 0, 0, 412, 413, 461,
	414, 415, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 734, 0, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 0, 0,
	0, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1800, 196, 197, 198, 199, 980, 200, 981,
	982, 983, 984, 417, 985, 986, 987, 988, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 989, 207,
	208, 209, 210, 211, 212, 213, 990, 991, 214, 422,
	423, 424, 992, 215, 425, 993, 979, 994, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 995, 225,
	0, 226, 227, 996, 847, 228, 229, 997, 998, 1000,
	999, 1001, 1002, 1003, 230, 231, 232, 233, 234, 235,
	426, 427, 1004, 236, 1005, 237, 1006, 238, 1007, 1008,
	239, 240, 241, 1009, 242, 1010, 243, 244, 1011, 428,
	245, 246, 248, 251, 247, 252, 253, 429, 430, 1012,
	848, 1013, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 1014, 260, 1015, 1016, 849, 261,
	1017, 262, 432, 1018, 433, 263, 1019, 264, 265, 266,
	267, 268, 269, 434, 435, 436, 851, 1020, 440, 271,
	0, 0, 0, 1021, 270, 272, 279, 1022, 850, 273,
	437, 275, 274, 276, 277, 278, 438, 1023, 439, 1024,
	280, 852, 853, 281, 282, 283, 854, 284, 285, 0,
	0, 286, 287, 288, 1025, 290, 289, 1026, 291, 441,
	855, 292, 293, 856, 1027, 294, 295, 1028, 1029, 296,
	0, 297, 913, 912, 298, 299, 301, 302, 300, 857,
	303, 304, 306, 305, 1030, 1031, 858, 1032, 442, 443,
	307, 308, 1033, 309, 310, 1034, 1035, 311, 312, 1036,
	1037, 313, 444, 859, 314, 860, 445, 315, 316, 317,
	318, 319, 320, 321, 1038, 322, 446, 323, 447, 324,
	1039, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	1040, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 1041, 345, 861, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 1042, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 1043, 370, 351, 352, 371, 862, 372, 450, 373,
	374, 1044, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 451, 1045, 385, 386, 1046, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 1047, 452, 453,
	454, 394, 1048, 1049, 395, 396, 455, 456, 1050, 397,
	398, 0, 399, 400, 1051, 1052, 401, 402, 403, 405,
	1053, 406, 1054, 404, 407, 408, 409, 457, 458, 459,
	1055, 411, 410, 460, 1056, 1057, 1058, 1059, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 0, 1938, 0, 0, 0, 0, 0,
	0, 0, 0, 1939, 196, 197, 198, 199, 980, 200,
	981, 982, 983, 984, 417, 985, 986, 987, 988, 201,
	202, 203, 418, 419, 204, 420, 205, 206, 421, 989,
	207, 208, 209, 210, 211, 212, 213, 990, 991, 214,
	422, 423, 424, 992, 215, 425, 993, 979, 994, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 995,
	225, 0, 226, 227, 996, 847, 228, 229, 997, 998,
	1000, 999, 1001, 1002, 1003, 230, 231, 232, 233, 234,
	235, 426, 427, 1004, 236, 1005, 237, 1006, 238, 1007,
	1008, 239, 240, 241, 1009, 242, 1010, 243, 244, 1011,
	428, 245, 246, 248, 251, 247, 252, 253, 429, 430,
	1012, 848, 1013, 0, 0, 0, 0, 254, 255, 256,
	431, 257, 258, 0, 259, 1014, 260, 1015, 1016, 849,
	261, 1017, 262, 432, 1018, 433, 263, 1019, 264, 265,
	266, 267, 268, 269, 434, 435, 436, 851, 1020, 440,
	271, 0, 0, 0, 1021, 270, 272, 279, 1022, 850,
	273, 437, 275, 274, 276, 277, 278, 438, 1023, 439,
	1024, 280, 852, 853, 281, 282, 283, 854, 284, 285,
	0, 0, 286, 287, 288, 1025, 290, 289, 1026, 291,
	441, 855, 292, 293, 856, 1027, 294, 295, 1028, 1029,
	296, 0, 297, 913, 912, 298, 299, 301, 302, 300,
	857, 303, 304, 306, 305, 1030, 1031, 858, 1032, 442,
	443, 307, 308, 1033, 309, 310, 1034, 1035, 311, 312,
	1036, 1037, 313, 444, 859, 314, 860, 445, 315, 316,
	317, 318, 319, 320, 321, 1038, 322, 446, 323, 447,
	324, 1039, 325, 326, 327, 328, 329, 330, 448, 331,
	332, 1040, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 1041, 345, 861, 346, 347,
	348, 349, 449, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 1042, 366, 367, 361, 363, 364, 365, 362,
	368, 369, 1043, 370, 351, 352, 371, 862, 372, 450,
	373, 374, 1044, 384, 375, 376, 377, 353, 378, 382,
	383, 379, 380, 381, 451, 1045, 385, 386, 1046, 387,
	388, 389, 390, 391, 249, 392, 250, 393, 1047, 452,
	453, 454, 394, 1048, 1049, 395, 396, 455, 456, 1050,
	397, 398, 0, 399, 400, 1051, 1052, 401, 402, 403,
	405, 1053, 406, 1054, 404, 407, 408, 409, 457, 458,
	459, 1055, 411, 410, 460, 1056, 1057, 1058, 1059, 412,
	413, 461, 414, 415, 416, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2783, 196, 197, 198, 199,
	980, 200, 981, 982, 983, 984, 417, 985, 986, 987,
	988, 201, 202, 203, 418, 419, 204, 420, 205, 206,
	421, 989, 207, 208, 209, 210, 211, 212, 213, 990,
	991, 214, 422, 423, 424, 992, 215, 425, 993, 979,
	994, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 995, 225, 0, 226, 227, 996, 847, 228, 229,
	997, 998, 1000, 999, 1001, 1002, 1003, 230, 231, 232,
	233, 234, 235, 426, 427, 1004, 236, 1005, 237, 1006,
	238, 1007, 1008, 239, 240, 241, 1009, 242, 1010, 243,
	244, 1011, 428, 245, 246, 248, 251, 247, 252, 253,
	429, 430, 1012, 848, 1013, 0, 0, 0, 0, 254,
	255, 256, 431, 257, 258, 0, 259, 1014, 260, 1015,
	1016, 849, 261, 1017, 262, 432, 1018, 433, 263, 1019,
	264, 265, 266, 267, 268, 269, 434, 435, 436, 851,
	1020, 440, 271, 0, 0, 0, 1021, 270, 272, 279,
	1022, 850, 273, 437, 275, 274, 276, 277, 278, 438,
	1023, 439, 1024, 280, 852, 853, 281, 282, 283, 854,
	284, 285, 0, 0, 286, 287, 288, 1025, 290, 289,
	1026, 291, 441, 855, 292, 293, 856, 1027, 294, 295,
	1028, 1029, 296, 0, 297, 913, 912, 298, 299, 301,
	302, 300, 857, 303, 304, 306, 305, 1030, 1031, 858,
	1032, 442, 443, 307, 308, 1033, 309, 310, 1034, 1035,
	311, 312, 1036, 1037, 313, 444, 859, 314, 860, 445,
	315, 316, 317, 318, 319, 320, 321, 1038, 322, 446,
	323, 447, 324, 1039, 325, 326, 327, 328, 329, 330,
	448, 331, 332, 1040, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 1041, 345, 861,
	346, 347, 348, 349, 449, 350, 0, 354, 355, 356,
	357, 358, 359, 360, 1042, 366, 367, 361, 363, 364,
	365, 362, 368, 369, 1043, 370, 351, 352, 371, 862,
	372, 450, 373, 374, 1044, 384, 375, 376, 377, 353,
	378, 382, 383, 379, 380, 381, 451, 1045, 385, 386,
	1046, 387, 388, 389, 390, 391, 249, 392, 250, 393,
	1047, 452, 453, 454, 394, 1048, 1049, 395, 396, 455,
	456, 1050, 397, 398, 0, 399, 400, 1051, 1052, 401,
	402, 403, 405, 1053, 406, 1054, 404, 407, 408, 409,
	457, 458, 459, 1055, 411, 410, 460, 1056, 1057, 1058,
	1059, 412, 413, 461, 414, 415, 416, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2888, 0, 196, 197, 198, 199, 980, 200,
	981, 982, 983, 984, 417, 985, 986, 987, 988, 201,
	202, 203, 418, 419, 204, 420, 205, 206, 421, 989,
	207, 208, 209, 210, 211, 212, 213, 990, 991, 214,
	422, 423, 424, 992, 215, 425, 993, 979, 994, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 995,
	225, 0, 226, 227, 996, 847, 228, 229, 997, 998,
	1000, 999, 1001, 1002, 1003, 230, 231, 232, 233, 234,
	235, 426, 427, 1004, 236, 1005, 237, 1006, 238, 1007,
	1008, 239, 240, 241, 1009, 242, 1010, 243, 244, 1011,
	428, 245, 246, 248, 251, 247, 252, 253, 429, 430,
	1012, 848, 1013, 0, 0, 0, 0, 254, 255, 256,
	431, 257, 258, 0, 259, 1014, 260, 1015, 1016, 849,
	261, 1017, 262, 432, 1018, 433, 263, 1019, 264, 265,
	266, 267, 268, 269, 434, 435, 436, 851, 1020, 440,
	271, 0, 0, 0, 1021, 270, 272, 279, 1022, 850,
	273, 437, 275, 274, 276, 277, 278, 438, 1023, 439,
	1024, 280, 852, 853, 281, 282, 283, 854, 284, 285,
	0, 0, 286, 287, 288, 1025, 290, 289, 1026, 291,
	441, 855, 292, 293, 856, 1027, 294, 295, 1028, 1029,
	296, 0, 297, 913, 912, 298, 299, 301, 302, 300,
	857, 303, 304, 306, 305, 1030, 1031, 858, 1032, 442,
	443, 307, 308, 1033, 309, 310, 1034, 1035, 311, 312,
	1036, 1037, 313, 444, 859, 314, 860, 445, 315, 316,
	317, 318, 319, 320, 321, 1038, 322, 446, 323, 447,
	324, 1039, 325, 326, 327, 328, 329, 330, 448, 331,
	332, 1040, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 1041, 345, 861, 346, 347,
	348, 349, 449, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 1042, 366, 367, 361, 363, 364, 365, 362,
	368, 369, 1043, 370, 351, 352, 371, 862, 372, 450,
	373, 374, 1044, 384, 375, 376, 377, 353, 378, 382,
	383, 379, 380, 381, 451, 1045, 385, 386, 1046, 387,
	388, 389, 390, 391, 249, 392, 250, 393, 1047, 452,
	453, 454, 394, 1048, 1049, 395, 396, 455, 456, 1050,
	397, 398, 0, 399, 400, 1051, 1052, 401, 402, 403,
	405, 1053, 406, 1054, 404, 407, 408, 409, 457, 458,
	459, 1055, 411, 410, 460, 1056, 1057, 1058, 1059, 412,
	413, 461, 414, 415, 416, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2540, 0, 196, 197, 198, 199, 980, 200, 981, 982,
	983, 984, 417, 985, 986, 987, 988, 201, 202, 203,
	418, 419, 204, 420, 205, 206, 421, 989, 207, 208,
	209, 210, 211, 212, 213, 990, 991, 214, 422, 423,
	424, 992, 215, 425, 993, 979, 994, 216, 217, 218,
	219, 220, 0, 222, 223, 224, 221, 995, 225, 0,
	226, 227, 996, 847, 228, 229, 997, 998, 1000, 999,
	1001, 1002, 1003, 230, 231, 232, 233, 234, 235, 426,
	427, 1004, 236, 1005, 237, 1006, 238, 1007, 1008, 239,
	240, 241, 1009, 242, 1010, 243, 244, 1011, 428, 245,
	246, 248, 251, 247, 252, 253, 429, 430, 1012, 848,
	1013, 0, 0, 0, 0, 254, 255, 256, 431, 257,
	258, 0, 259, 1014, 260, 1015, 1016, 849, 261, 1017,
	262, 432, 1018, 433, 263, 1019, 264, 265, 266, 267,
	268, 269, 434, 435, 436, 851, 1020, 440, 271, 0,
	0, 0, 1021, 270, 272, 279, 1022, 850, 273, 437,
	275, 274, 276, 277, 278, 438, 1023, 439, 1024, 280,
	852, 853, 281, 282, 283, 854, 284, 285, 0, 0,
	286, 287, 288, 1025, 290, 289, 1026, 291, 441, 855,
	292, 293, 856, 1027, 294, 295, 1028, 1029, 296, 0,
	297, 913, 912, 298, 299, 301, 302, 300, 857, 303,
	304, 306, 305, 1030, 1031, 858, 1032, 442, 443, 307,
	308, 1033, 309, 310, 1034, 1035, 311, 312, 1036, 1037,
	313, 444, 859, 314, 860, 445, 315, 316, 317, 318,
	319, 320, 321, 1038, 322, 446, 323, 447, 324, 1039,
	325, 326, 327, 328, 329, 330, 448, 331, 332, 1040,
	333, 334, 335, 336, 337, 0, 339, 340, 338, 341,
	342, 343, 344, 1041, 345, 861, 346, 347, 348, 349,
	449, 350, 0, 354, 355, 356, 357, 358, 359, 360,
	1042, 366, 367, 361, 363, 364, 365, 362, 368, 369,
	1043, 370, 351, 352, 371, 862, 372, 450, 373, 374,
	1044, 384, 375, 376, 377, 353, 378, 382, 383, 379,
	380, 381, 451, 1045, 385, 386, 1046, 387, 388, 389,
	390, 391, 249, 392, 250, 393, 1047, 452, 453, 454,
	394, 1048, 1049, 395, 396, 455, 456, 1050, 397, 398,
	0, 399, 400, 1051, 1052, 401, 402, 403, 405, 1053,
	406, 1054, 404, 407, 408, 409, 457, 458, 459, 1055,
	411, 410, 460, 1056, 1057, 1058, 1059, 412, 413, 461,
	414, 415, 416, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2532, 0,
	196, 197, 198, 199, 980, 200, 981, 982, 983, 984,
	417, 985, 986, 987, 988, 201, 202, 203, 418, 419,
	204, 420, 205, 206, 421, 989, 207, 208, 209, 210,
	211, 212, 213, 990, 991, 214, 422, 423, 424, 992,
	215, 425, 993, 979, 994, 216, 217, 218, 219, 220,
	0, 222, 223, 224, 221, 995, 225, 0, 226, 227,
	996, 847, 228, 229, 997, 998, 1000, 999, 1001, 1002,
	1003, 230, 231, 232, 233, 234, 235, 426, 427, 1004,
	236, 1005, 237, 1006, 238, 1007, 1008, 239, 240, 241,
	1009, 242, 1010, 243, 244, 1011, 428, 245, 246, 248,
	251, 247, 252, 253, 429, 430, 1012, 848, 1013, 0,
	0, 0, 0, 254, 255, 256, 431, 257, 258, 0,
	259, 1014, 260, 1015, 1016, 849, 261, 1017, 262, 432,
	1018, 433, 263, 1019, 264, 265, 266, 267, 268, 269,
	434, 435, 436, 851, 1020, 440, 271, 0, 0, 0,
	1021, 270, 272, 279, 1022, 850, 273, 437, 275, 274,
	276, 277, 278, 438, 1023, 439, 1024, 280, 852, 853,
	281, 282, 283, 854, 284, 285, 0, 0, 286, 287,
	288, 1025, 290, 289, 1026, 291, 441, 855, 292, 293,
	856, 1027, 294, 295, 1028, 1029, 296, 0, 297, 913,
	912, 298, 299, 301, 302, 300, 857, 303, 304, 306,
	305, 1030, 1031, 858, 1032, 442, 443, 307, 308, 1033,
	309, 310, 1034, 1035, 311, 312, 1036, 1037, 313, 444,
	859, 314, 860, 445, 315, 316, 317, 318, 319, 320,
	321, 1038, 322, 446, 323, 447, 324, 1039, 325, 326,
	327, 328, 329, 330, 448, 331, 332, 1040, 333, 334,
	335, 336, 337, 0, 339, 340, 338, 341, 342, 343,
	344, 1041, 345, 861, 346, 347, 348, 349, 449, 350,
	0, 354, 355, 356, 357, 358, 359, 360, 1042, 366,
	367, 361, 363, 364, 365, 362, 368, 369, 1043, 370,
	351, 352, 371, 862, 372, 450, 373, 374, 1044, 384,
	375, 376, 377, 353, 378, 382, 383, 379, 380, 381,
	451, 1045, 385, 386, 1046, 387, 388, 389, 390, 391,
	249, 392, 250, 393, 1047, 452, 453, 454, 394, 1048,
	1049, 395, 396, 455, 456, 1050, 397, 398, 0, 399,
	400, 1051, 1052, 401, 402, 403, 405, 1053, 406, 1054,
	404, 407, 408, 409, 457, 458, 459, 1055, 411, 410,
	460, 1056, 1057, 1058, 1059, 412, 413, 461, 414, 415,
	416, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2419, 0, 196, 197,
	198, 199, 980, 200, 981, 982, 983, 984, 417, 985,
	986, 987, 988, 201, 202, 203, 418, 419, 204, 420,
	205, 206, 421, 989, 207, 208, 209, 210, 211, 212,
	213, 990, 991, 214, 422, 423, 424, 992, 215, 425,
	993, 979, 994, 216, 217, 218, 219, 220, 0, 222,
	223, 224, 221, 995, 225, 0, 226, 227, 996, 847,
	228, 229, 997, 998, 1000, 999, 1001, 1002, 1003, 230,
	231, 232, 233, 234, 235, 426, 427, 1004, 236, 1005,
	237, 1006, 238, 1007, 1008, 239, 240, 241, 1009, 242,
	1010, 243, 244, 1011, 428, 245, 246, 248, 251, 247,
	252, 253, 429, 430, 1012, 848, 1013, 0, 0, 0,
	0, 254, 255, 256, 431, 257, 258, 0, 259, 1014,
	260, 1015, 1016, 849, 261, 1017, 262, 432, 1018, 433,
	263, 1019, 264, 265, 266, 267, 268, 269, 434, 435,
	436, 851, 1020, 440, 271, 0, 0, 0, 1021, 270,
	272, 279, 1022, 850, 273, 437, 275, 274, 276, 277,
	278, 438, 1023, 439, 1024, 280, 852, 853, 281, 282,
	283, 854, 284, 285, 0, 0, 286, 287, 288, 1025,
	290, 289, 1026, 291, 441, 855, 292, 293, 856, 1027,
	294, 295, 1028, 1029, 296, 0, 297, 913, 912, 298,
	299, 301, 302, 300, 857, 303, 304, 306, 305, 1030,
	1031, 858, 1032, 442, 443, 307, 308, 1033, 309, 310,
	1034, 1035, 311, 312, 1036, 1037, 313, 444, 859, 314,
	860, 445, 315, 316, 317, 318, 319, 320, 321, 1038,
	322, 446, 323, 447, 324, 1039, 325, 326, 327, 328,
	329, 330, 448, 331, 332, 1040, 333, 334, 335, 336,
	337, 0, 339, 340, 338, 341, 342, 343, 344, 1041,
	345, 861, 346, 347, 348, 349, 449, 350, 0, 354,
	355, 356, 357, 358, 359, 360, 1042, 366, 367, 361,
	363, 364, 365, 362, 368, 369, 1043, 370, 351, 352,
	371, 862, 372, 450, 373, 374, 1044, 384, 375, 376,
	377, 353, 378, 382, 383, 379, 380, 381, 451, 1045,
	385, 386, 1046, 387, 388, 389, 390, 391, 249, 392,
	250, 393, 1047, 452, 453, 454, 394, 1048, 1049, 395,
	396, 455, 456, 1050, 397, 398, 0, 399, 400, 1051,
	1052, 401, 402, 403, 405, 1053, 406, 1054, 404, 407,
	408, 409, 457, 458, 459, 1055, 411, 410, 460, 1056,
	1057, 1058, 1059, 412, 413, 461, 414, 415, 416, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1842, 0, 196, 197, 198, 199,
	980, 200, 981, 982, 983, 984, 417, 985, 986, 987,
	988, 201, 202, 203, 418, 419, 204, 420, 205, 206,
	421, 989, 207, 208, 209, 210, 211, 212, 213, 990,
	991, 214, 422, 423, 424, 992, 215, 425, 993, 979,
	994, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 995, 225, 0, 226, 227, 996, 847, 228, 229,
	997, 998, 1000, 999, 1001, 1002, 1003, 230, 231, 232,
	233, 234, 235, 426, 427, 1004, 236, 1005, 237, 1006,
	238, 1007, 1008, 239, 240, 241, 1009, 242, 1010, 243,
	244, 1011, 428, 245, 246, 248, 251, 247, 252, 253,
	429, 430, 1012, 848, 1013, 0, 0, 0, 0, 254,
	255, 256, 431, 257, 258, 0, 259, 1014, 260, 1015,
	1016, 849, 261, 1017, 262, 432, 1018, 433, 263, 1019,
	264, 265, 266, 267, 268, 269, 434, 435, 436, 851,
	1020, 440, 271, 0, 0, 0, 1021, 270, 272, 279,
	1022, 850, 273, 437, 275, 274, 276, 277, 278, 438,
	1023, 439, 1024, 280, 852, 853, 281, 282, 283, 854,
	284, 285, 0, 0, 286, 287, 288, 1025, 290, 289,
	1026, 291, 441, 855, 292, 293, 856, 1027, 294, 295,
	1028, 1029, 296, 0, 297, 913, 912, 298, 299, 301,
	302, 300, 857, 303, 304, 306, 305, 1030, 1031, 858,
	1032, 442, 443, 307, 308, 1033, 309, 310, 1034, 1035,
	311, 312, 1036, 1037, 313, 444, 859, 314, 860, 445,
	315, 316, 317, 318, 319, 320, 321, 1038, 322, 446,
	323, 447, 324, 1039, 325, 326, 327, 328, 329, 330,
	448, 331, 332, 1040, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 1041, 345, 861,
	346, 347, 348, 349, 449, 350, 0, 354, 355, 356,
	357, 358, 359, 360, 1042, 366, 367, 361, 363, 364,
	365, 362, 368, 369, 1043, 370, 351, 352, 371, 862,
	372, 450, 373, 374, 1044, 384, 375, 376, 377, 353,
	378, 382, 383, 379, 380, 381, 451, 1045, 385, 386,
	1046, 387, 388, 389, 390, 391, 249, 392, 250, 393,
	1047, 452, 453, 454, 394, 1048, 1049, 395, 396, 455,
	456, 1050, 397, 398, 0, 399, 400, 1051, 1052, 401,
	402, 403, 405, 1053, 406, 1054, 404, 407, 408, 409,
	457, 458, 459, 1055, 411, 410, 460, 1056, 1057, 1058,
	1059, 412, 413, 461, 414, 415, 416, 1082, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1613, 0, 0, 0, 196, 197, 198, 199,
	980, 200, 981, 982, 983, 984, 417, 985, 986, 987,
	988, 201, 202, 203, 418, 419, 204, 420, 205, 206,
	421, 989, 207, 208, 209, 210, 211, 212, 213, 990,
	991, 214, 422, 423, 424, 992, 215, 425, 993, 979,
	994, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 995, 225, 0, 226, 227, 996, 847, 228, 229,
	997, 998, 1000, 999, 1001, 1002, 1003, 230, 231, 232,
	233, 234, 235, 426, 427, 1004, 236, 1005, 237, 1006,
	238, 1007, 1008, 239, 240, 241, 1009, 242, 1010, 243,
	244, 1011, 428, 245, 246, 248, 251, 247, 252, 253,
	429, 430, 1012, 848, 1013, 0, 0, 0, 0, 254,
	255, 256, 431, 257, 258, 0, 259, 1014, 260, 1015,
	1016, 849, 261, 1017, 262, 432, 1018, 433, 263, 1019,
	264, 265, 266, 267, 268, 269, 434, 435, 436, 851,
	1020, 440, 271, 0, 0, 0, 1021, 270, 272, 279,
	1022, 850, 273, 437, 275, 274, 276, 277, 278, 438,
	1023, 439, 1024, 280, 852, 853, 281, 282, 283, 854,
	284, 285, 0, 0, 286, 287, 288, 1025, 290, 289,
	1026, 291, 441, 855, 292, 293, 856, 1027, 294, 295,
	1028, 1029, 296, 0, 297, 913, 912, 298, 299, 301,
	302, 300, 857, 303, 304, 306, 305, 1030, 1031, 858,
	1032, 442, 443, 307, 308, 1033, 309, 310, 1034, 1035,
	311, 312, 1036, 1037, 313, 444, 859, 314, 860, 445,
	315, 316, 317, 318, 319, 320, 321, 1038, 322, 446,
	323, 447, 324, 1039, 325, 326, 327, 328, 329, 330,
	448, 331, 332, 1040, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 1041, 345, 861,
	346, 347, 348, 349, 449, 350, 0, 354, 355, 356,
	357, 358, 359, 360, 1042, 366, 367, 361, 363, 364,
	365, 362, 368, 369, 1043, 370, 351, 352, 371, 862,
	372, 450, 373, 374, 1044, 384, 375, 376, 377, 353,
	378, 382, 383, 379, 380, 381, 451, 1045, 385, 386,
	1046, 387, 388, 389, 390, 391, 249, 392, 250, 393,
	1047, 452, 453, 454, 394, 1048, 1049, 395, 396, 455,
	456, 1050, 397, 398, 0, 399, 400, 1051, 1052, 401,
	402, 403, 405, 1053, 406, 1054, 404, 407, 408, 409,
	457, 458, 459, 1055, 411, 410, 460, 1056, 1057, 1058,
	1059, 412, 413, 461, 414, 415, 416, 971, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 198, 199,
	980, 200, 981, 982, 983, 984, 417, 985, 986, 987,
	988, 201, 202, 203, 418, 419, 204, 420, 205, 206,
	421, 989, 207, 208, 209, 210, 211, 212, 213, 990,
	991, 214, 422, 423, 424, 992, 215, 425, 993, 979,
	994, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 995, 225, 0, 226, 227, 996, 847, 228, 229,
	997, 998, 1000, 999, 1001, 1002, 1003, 230, 231, 232,
	233, 234, 235, 426, 427, 1004, 236, 1005, 237, 1006,
	238, 1007, 1008, 239, 240, 241, 1009, 242, 1010, 243,
	244, 1011, 428, 245, 246, 248, 251, 247, 252, 253,
	429, 430, 1012, 848, 1013, 0, 0, 0, 0, 254,
	255, 256, 431, 257, 258, 0, 259, 1014, 260, 1015,
	1016, 849, 261, 1017, 262, 432, 1018, 433, 263, 1019,
	264, 265, 266, 267, 268, 269, 434, 435, 436, 851,
	1020, 440, 271, 0, 0, 0, 1021, 270, 272, 279,
	1022, 850, 273, 437, 275, 274, 276, 277, 278, 438,
	1023, 439, 1024, 280, 852, 853, 281, 282, 283, 854,
	284, 285, 0, 0, 286, 287, 288, 1025, 290, 289,
	1026, 291, 441, 855, 292, 293, 856, 1027, 294, 295,
	1028, 1029, 296, 0, 297, 913, 912, 298, 299, 301,
	302, 300, 857, 303, 304, 306, 305, 1030, 1031, 858,
	1032, 442, 443, 307, 308, 1033, 309, 310, 1034, 1035,
	311, 312, 1036, 1037, 313, 444, 859, 314, 860, 445,
	315, 316, 317, 318, 319, 320, 321, 1038, 322, 446,
	323, 447, 324, 1039, 325, 326, 327, 328, 329, 330,
	448, 331, 332, 1040, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 1041, 345, 861,
	346, 347, 348, 349, 449, 350, 0, 354, 355, 356,
	357, 358, 359, 360, 1042, 366, 367, 361, 363, 364,
	365, 362, 368, 369, 1043, 370, 351, 352, 371, 862,
	372, 450, 373, 374, 1044, 384, 375, 376, 377, 353,
	378, 382, 383, 379, 380, 381, 451, 1045, 385, 386,
	1046, 387, 388, 389, 390, 391, 249, 392, 250, 393,
	1047, 452, 453, 454, 394, 1048, 1049, 395, 396, 455,
	456, 1050, 397, 398, 0, 399, 400, 1051, 1052, 401,
	402, 403, 405, 1053, 406, 1054, 404, 407, 408, 409,
	457, 458, 459, 1055, 411, 410, 460, 1056, 1057, 1058,
	1059, 412, 413, 461, 414, 415, 416, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 980, 200,
	981, 982, 983, 984, 417, 985, 986, 987, 988, 201,
	202, 203, 418, 419, 204, 420, 205, 206, 421, 989,
	207, 208, 209, 210, 211, 212, 213, 990, 991, 214,
	422, 423, 424, 992, 215, 425, 993, 979, 994, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 995,
	225, 0, 226, 227, 996, 847, 228, 229, 997, 998,
	1000, 999, 1001, 1002, 1003, 230, 231, 232, 233, 234,
	235, 426, 427, 1004, 236, 1005, 237, 1006, 238, 1007,
	1008, 239, 240, 241, 1009, 242, 1010, 243, 244, 1011,
	428, 245, 246, 248, 251, 247, 252, 253, 429, 430,
	1012, 848, 1013, 0, 0, 0, 0, 254, 255, 256,
	431, 257, 258, 0, 259, 1014, 260, 1015, 1016, 849,
	261, 1017, 262, 432, 1018, 433, 263, 1019, 264, 265,
	266, 267, 268, 269, 434, 435, 436, 851, 1020, 440,
	271, 0, 0, 0, 1021, 270, 272, 279, 1022, 850,
	273, 437, 275, 274, 276, 277, 278, 438, 1023, 439,
	1024, 280, 852, 853, 281, 282, 283, 854, 284, 285,
	0, 0, 286, 287, 288, 1025, 290, 289, 1026, 291,
	441, 855, 292, 293, 856, 1027, 294, 295, 1028, 1029,
	296, 0, 297, 913, 912, 298, 299, 301, 302, 300,
	857, 303, 304, 306, 305, 1030, 1031, 858, 1032, 442,
	443, 307, 308, 1033, 309, 310, 1034, 1035, 311, 312,
	1036, 1037, 313, 444, 859, 314, 860, 445, 315, 316,
	317, 318, 319, 320, 321, 1038, 322, 446, 323, 447,
	324, 1039, 325, 326, 327, 328, 329, 330, 448, 331,
	332, 1040, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 1041, 345, 861, 346, 347,
	348, 349, 449, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 1042, 366, 367, 361, 363, 364, 365, 362,
	368, 369, 1043, 370, 351, 352, 371, 862, 372, 450,
	373, 374, 1044, 384, 375, 376, 377, 353, 378, 382,
	383, 379, 380, 381, 451, 1045, 385, 386, 1046, 387,
	388, 389, 390, 391, 249, 392, 250, 393, 1047, 452,
	453, 454, 394, 1048, 1049, 395, 396, 455, 456, 1050,
	397, 398, 0, 399, 400, 1051, 1052, 401, 402, 403,
	405, 1053, 406, 1054, 404, 407, 408, 409, 457, 458,
	459, 1055, 411, 410, 460, 1056, 1057, 1058, 1059, 412,
	413, 461, 414, 415, 416, 1820, 0, 791, 749, 750,
	751, 747, 748, 761, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 1817, 200,
	0, 0, 0, 0, 838, 766, 0, 0, 0, 201,
	202, 203, 418, 806, 785, 817, 775, 816, 815, 0,
	207, 208, 777, 776, 211, 212, 213, 767, 837, 214,
	865, 866, 424, 0, 215, 844, 0, 827, 0, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 0,
	225, 0, 226, 227, 0, 847, 228, 229, 830, 828,
	829, 834, 832, 831, 833, 230, 231, 232, 233, 820,
	235, 813, 812, 739, 236, 0, 237, 0, 238, 1818,
	0, 239, 811, 241, 0, 242, 0, 243, 244, 0,
	744, 245, 246, 248, 251, 247, 252, 253, 867, 868,
	757, 848, 0, 0, 0, 0, 0, 254, 255, 256,
	810, 808, 809, 0, 259, 0, 260, 0, 0, 849,
	261, 0, 262, 869, 0, 433, 263, 0, 264, 265,
	266, 267, 268, 269, 839, 840, 843, 851, 0, 841,
	787, 0, 0, 0, 0, 270, 272, 279, 0, 850,
	273, 799, 790, 801, 803, 804, 805, 800, 0, 792,
	0, 280, 852, 853, 281, 282, 283, 854, 825, 826,
	0, 0, 286, 287, 288, 0, 290, 289, 0, 291,
	870, 855, 292, 293, 856, 0, 294, 295, 0, 0,
	296, 0, 297, 741, 740, 298, 299, 301, 779, 300,
	857, 303, 304, 306, 305, 736, 0, 858, 758, 842,
	814, 307, 308, 0, 788, 789, 0, 0, 311, 312,
	0, 0, 313, 444, 859, 314, 860, 871, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 872, 323, 447,
	324, 0, 325, 326, 327, 328, 329, 330, 807, 331,
	332, 0, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 0, 345, 861, 346, 347,
	348, 349, 745, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 0, 366, 367, 780, 781, 783, 784, 362,
	368, 369, 835, 370, 351, 352, 371, 862, 372, 802,
	782, 374, 0, 384, 375, 376, 377, 353, 378, 382,
	846, 379, 380, 381, 873, 0, 385, 386, 0, 387,
	388, 389, 390, 391, 249, 392, 250, 778, 0, 821,
	822, 823, 824, 0, 0, 395, 396, 874, 875, 756,
	397, 398, 0, 399, 400, 0, 0, 401, 402, 403,
	405, 836, 406, 0, 786, 407, 408, 409, 457, 818,
	864, 1816, 411, 410, 460, 0, 0, 0, 0, 412,
	413, 461, 414, 415, 416, 737, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 733, 734,
	1819, 0, 0, 0, 0, 0, 0, 762, 1815, 0,
	0, 0, 726, 760, 791, 749, 750, 751, 747, 748,
	761, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 838, 766, 0, 0, 0, 201, 202, 203, 418,
	806, 785, 817, 775, 816, 815, 0, 207, 208, 777,
	776, 211, 212, 213, 767, 837, 214, 865, 866, 424,
	0, 215, 844, 0, 827, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 847, 228, 229, 830, 828, 829, 834, 832,
	831, 833, 230, 231, 232, 233, 820, 235, 813, 812,
	739, 236, 0, 237, 0, 238, 0, 0, 239, 811,
	241, 0, 242, 0, 243, 244, 0, 744, 245, 246,
	248, 251, 247, 252, 253, 867, 868, 757, 848, 0,
	0, 0, 0, 0, 254, 255, 256, 810, 808, 809,
	0, 259, 0, 260, 0, 0, 849, 261, 0, 262,
	869, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 839, 840, 843, 851, 0, 841, 787, 0, 0,
	0, 0, 270, 272, 279, 0, 850, 273, 799, 790,
	801, 803, 804, 805, 800, 0, 792, 0, 280, 852,
	853, 281, 282, 283, 854, 825, 826, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 870, 855, 292,
	293, 856, 0, 294, 295, 0, 0, 296, 0, 297,
	741, 740, 298, 299, 301, 779, 300, 857, 303, 304,
	306, 305, 736, 0, 858, 758, 842, 814, 307, 308,
	0, 788, 789, 0, 0, 311, 312, 0, 0, 313,
	444, 859, 314, 860, 871, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 872, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 807, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 861, 346, 347, 348, 349, 745,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 175,
	366, 367, 780, 781, 783, 784, 362, 368, 369, 835,
	370, 351, 352, 371, 862, 372, 802, 782, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 846, 379, 380,
	381, 873, 0, 385, 386, 177, 387, 388, 389, 390,
	391, 249, 392, 250, 778, 0, 821, 822, 823, 824,
	0, 0, 395, 396, 874, 875, 756, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 836, 406,
	0, 786, 407, 408, 409, 1178, 818, 864, 0, 411,
	410, 460, 0, 0, 0, 169, 412, 413, 461, 414,
	415, 416, 737, 170, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 733, 734, 791, 749, 750,
	751, 747, 748, 761, 1352, 1350, 0, 0, 0, 0,
	760, 0, 0, 0, 196, 197, 198, 199, 0, 200,
	0, 0, 0, 0, 838, 766, 0, 0, 0, 201,
	202, 203, 418, 806, 785, 817, 775, 816, 815, 0,
	207, 208, 777, 776, 211, 212, 213, 767, 837, 214,
	865, 866, 424, 0, 215, 844, 0, 827, 0, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 0,
	225, 0, 226, 227, 0, 847, 228, 229, 830, 828,
	829, 834, 832, 831, 833, 230, 231, 232, 233, 820,
	235, 813, 812, 739, 236, 0, 237, 0, 238, 0,
	0, 239, 811, 241, 0, 242, 0, 243, 244, 0,
	744, 245, 246, 248, 251, 247, 252, 253, 867, 868,
	757, 848, 0, 0, 0, 0, 0, 254, 255, 256,
	810, 808, 809, 0, 259, 0, 260, 0, 0, 849,
	261, 0, 262, 869, 0, 433, 263, 0, 264, 265,
	266, 267, 268, 269, 839, 840, 843, 851, 0, 841,
	787, 0, 0, 0, 0, 270, 272, 279, 0, 850,
	273, 799, 790, 801, 803, 804, 805, 800, 0, 792,
	0, 280, 852, 853, 281, 282, 283, 854, 825, 826,
	0, 0, 286, 287, 288, 0, 290, 289, 0, 291,
	870, 855, 292, 293, 856, 0, 294, 295, 0, 0,
	296, 0, 297, 741, 740, 298, 299, 301, 779, 300,
	857, 303, 304, 306, 305, 736, 0, 858, 758, 842,
	814, 307, 308, 0, 788, 789, 0, 0, 311, 312,
	0, 0, 313, 444, 859, 314, 860, 871, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 872, 323, 447,
	324, 0, 325, 326, 327, 328, 329, 330, 807, 331,
	332, 0, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 0, 345, 861, 346, 347,
	348, 349, 745, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 175, 366, 367, 780, 781, 783, 784, 362,
	368, 369, 835, 370, 351, 352, 371, 862, 372, 802,
	782, 374, 0, 384, 375, 376, 377, 353, 378, 382,
	846, 379, 380, 381, 873, 0, 385, 386, 177, 387,
	388, 389, 390, 391, 249, 392, 250, 778, 0, 821,
	822, 823, 824, 0, 0, 395, 396, 874, 875, 756,
	397, 398, 0, 399, 400, 0, 0, 401, 402, 403,
	405, 836, 406, 0, 786, 407, 408, 409, 1178, 818,
	864, 0, 411, 410, 460, 0, 0, 0, 169, 412,
	413, 461, 414, 415, 416, 737, 170, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 733, 734,
	791, 749, 750, 751, 747, 748, 761, 1352, 2191, 0,
	0, 0, 0, 760, 0, 0, 0, 196, 197, 198,
	199, 0, 200, 0, 0, 0, 0, 838, 766, 0,
	0, 0, 201, 202, 203, 418, 806, 785, 817, 775,
	816, 815, 0, 207, 208, 777, 776, 211, 212, 213,
	767, 837, 214, 865, 866, 424, 0, 215, 844, 0,
	827, 0, 216, 217, 218, 219, 220, 0, 222, 223,
	224, 221, 0, 225, 0, 226, 227, 0, 847, 228,
	229, 830, 828, 829, 834, 832, 831, 833, 230, 231,
	232, 233, 820, 235, 813, 812, 739, 236, 0, 237,
	0, 238, 0, 0, 239, 811, 241, 0, 242, 0,
	243, 244, 0, 744, 245, 246, 248, 251, 247, 252,
	253, 867, 868, 757, 848, 0, 0, 0, 0, 0,
	254, 255, 256, 810, 808, 809, 0, 259, 0, 260,
	0, 0, 849, 261, 0, 262, 869, 0, 433, 263,
	0, 264, 265, 266, 267, 268, 269, 839, 840, 843,
	851, 0, 841, 787, 0, 0, 0, 0, 270, 272,
	279, 0, 850, 273, 799, 790, 801, 803, 804, 805,
	800, 0, 792, 0, 280, 852, 853, 281, 282, 283,
	854, 825, 826, 0, 0, 286, 287, 288, 0, 290,
	289, 0, 291, 870, 855, 292, 293, 856, 0, 294,
	295, 0, 0, 296, 0, 297, 741, 740, 298, 299,
	301, 779, 300, 857, 303, 304, 306, 305, 736, 0,
	858, 758, 842, 814, 307, 308, 0, 788, 789, 0,
	0, 311, 312, 0, 0, 313, 444, 859, 314, 860,
	871, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	872, 323, 447, 324, 0, 325, 326, 327, 328, 329,
	330, 807, 331, 332, 0, 333, 334, 335, 336, 337,
	0, 339, 340, 338, 341, 342, 343, 344, 0, 345,
	861, 346, 347, 348, 349, 745, 350, 0, 354, 355,
	356, 357, 358, 359, 360, 175, 366, 367, 780, 781,
	783, 784, 362, 368, 369, 835, 370, 351, 352, 371,
	862, 372, 802, 782, 374, 0, 384, 375, 376, 377,
	353, 378, 382, 846, 379, 380, 381, 873, 0, 385,
	386, 177, 387, 388, 389, 390, 391, 249, 392, 250,
	778, 0, 821, 822, 823, 824, 0, 0, 395, 396,
	874, 875, 756, 397, 398, 0, 399, 400, 0, 0,
	401, 402, 403, 405, 836, 406, 0, 786, 407, 408,
	409, 1178, 818, 864, 0, 411, 410, 460, 0, 0,
	0, 169, 412, 413, 461, 414, 415, 416, 737, 170,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 733, 734, 791, 749, 750, 751, 747, 748, 761,
	1352, 1350, 0, 0, 0, 0, 760, 0, 0, 0,
	196, 197, 198, 199, 0, 200, 0, 0, 0, 0,
	838, 766, 0, 0, 0, 201, 202, 203, 418, 806,
	785, 817, 775, 816, 815, 1904, 207, 208, 777, 776,
	211, 212, 213, 767, 837, 214, 865, 866, 424, 0,
	215, 844, 0, 827, 0, 216, 217, 218, 219, 220,
	0, 222, 223, 224, 221, 0, 225, 0, 226, 227,
	0, 847, 228, 229, 830, 828, 829, 834, 832, 831,
	833, 230, 231, 232, 233, 820, 235, 813, 812, 739,
	236, 0, 237, 0, 238, 0, 0, 239, 811, 241,
	0, 242, 0, 243, 244, 0, 744, 245, 246, 248,
	251, 247, 252, 253, 867, 868, 757, 848, 0, 0,
	0, 0, 0, 254, 255, 256, 810, 808, 809, 0,
	259, 0, 260, 0, 1909, 849, 261, 0, 262, 869,
	0, 433, 263, 0, 264, 265, 266, 267, 268, 269,
	839, 840, 843, 851, 0, 841, 787, 0, 0, 0,
	0, 270, 272, 279, 0, 850, 273, 799, 790, 801,
	803, 804, 805, 800, 0, 792, 0, 280, 852, 853,
	281, 282, 283, 854, 825, 826, 0, 0, 286, 287,
	288, 0, 290, 289, 1905, 291, 870, 855, 292, 293,
	856, 0, 294, 295, 0, 0, 296, 0, 297, 741,
	740, 298, 299, 301, 779, 300, 857, 303, 304, 306,
	305, 736, 0, 858, 758, 842, 814, 307, 308, 0,
	788, 789, 0, 0, 311, 312, 0, 0, 313, 444,
	859, 314, 860, 871, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 872, 323, 447, 324, 0, 325, 326,
	327, 328, 329, 330, 807, 331, 332, 0, 333, 334,
	335, 336, 337, 0, 339, 340, 338, 341, 342, 343,
	344, 0, 345, 861, 346, 347, 348, 349, 745, 350,
	0, 354, 355, 356, 357, 358, 359, 360, 0, 366,
	367, 780, 781, 783, 784, 362, 368, 369, 835, 370,
	351, 352, 371, 862, 372, 802, 782, 374, 0, 384,
	375, 376, 377, 353, 378, 382, 846, 379, 380, 381,
	873, 0, 385, 386, 0, 387, 388, 389, 390, 391,
	249, 392, 250, 778, 0, 821, 822, 823, 824, 0,
	1906, 395, 396, 874, 875, 756, 397, 398, 0, 399,
	400, 0, 0, 401, 402, 403, 405, 836, 406, 0,
	786, 407, 408, 409, 457, 818, 864, 0, 411, 410,
	460, 0, 0, 0, 0, 412, 413, 461, 414, 415,
	416, 737, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 733, 734, 791, 749, 750, 751,
	747, 748, 761, 762, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 838, 766, 0, 0, 0, 201, 202,
	203, 418, 806, 785, 817, 775, 816, 815, 0, 207,
	208, 777, 776, 211, 212, 213, 767, 837, 214, 865,
	866, 424, 0, 215, 844, 0, 827, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 847, 228, 229, 830, 828, 829,
	834, 832, 831, 833, 230, 231, 232, 233, 820, 235,
	813, 812, 739, 236, 0, 237, 0, 238, 0, 0,
	239, 811, 241, 0, 242, 0, 243, 244, 0, 744,
	245, 246, 248, 251, 247, 252, 253, 867, 868, 757,
	848, 0, 0, 0, 0, 0, 254, 255, 256, 810,
	808, 809, 0, 259, 0, 260, 0, 0, 849, 261,
	0, 262, 869, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 839, 840, 843, 851, 0, 841, 787,
	0, 0, 0, 0, 270, 272, 279, 0, 850, 273,
	799, 790, 801, 803, 804, 805, 800, 0, 792, 0,
	280, 852, 853, 281, 282, 283, 854, 825, 826, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 870,
	855, 292, 293, 856, 0, 294, 295, 0, 0, 296,
	0, 297, 741, 740, 298, 299, 301, 779, 300, 857,
	303, 304, 306, 305, 736, 2703, 858, 758, 842, 814,
	307, 308, 0, 788, 789, 0, 0, 311, 312, 0,
	0, 313, 444, 859, 314, 860, 871, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 872, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 807, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 861, 346, 347, 348,
	349, 745, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 780, 781, 783, 784, 362, 368,
	369, 835, 370, 351, 352, 371, 862, 372, 802, 782,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 846,
	379, 380, 381, 873, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 778, 0, 821, 822,
	823, 824, 0, 0, 395, 396, 874, 875, 756, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	836, 406, 0, 786, 407, 408, 409, 457, 818, 864,
	0, 411, 410, 460, 0, 0, 0, 0, 412, 413,
	461, 414, 415, 416, 737, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 733, 734, 1407,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 760, 791, 749, 750, 751, 747, 748, 761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 198, 199, 0, 200, 0, 0, 0, 0,
	838, 766, 0, 0, 0, 201, 202, 203, 418, 806,
	785, 817, 775, 816, 815, 0, 207, 208, 777, 776,
	211, 212, 213, 767, 837, 214, 865, 866, 424, 0,
	215, 844, 0, 827, 0, 216, 217, 218, 219, 220,
	0, 222, 223, 224, 221, 0, 225, 0, 226, 227,
	0, 847, 228, 229, 830, 828, 829, 834, 832, 831,
	833, 230, 231, 232, 233, 820, 235, 813, 812, 739,
	236, 0, 237, 0, 238, 0, 0, 239, 811, 241,
	0, 242, 0, 243, 244, 0, 744, 245, 246, 248,
	251, 247, 252, 253, 867, 868, 757, 848, 0, 0,
	0, 0, 0, 254, 255, 256, 810, 808, 809, 0,
	259, 0, 260, 0, 0, 849, 261, 0, 262, 869,
	0, 433, 263, 0, 264, 265, 266, 267, 268, 269,
	839, 840, 843, 851, 0, 841, 787, 0, 0, 0,
	1735, 270, 272, 279, 0, 850, 273, 799, 790, 801,
	803, 804, 805, 800, 0, 792, 0, 280, 852, 853,
	281, 282, 283, 854, 825, 826, 0, 0, 286, 287,
	288, 0, 290, 289, 0, 291, 870, 855, 292, 293,
	856, 0, 294, 295, 0, 0, 296, 0, 297, 741,
	740, 298, 299, 301, 779, 300, 857, 303, 304, 306,
	305, 736, 0, 858, 758, 842, 814, 307, 308, 0,
	788, 789, 0, 0, 311, 312, 0, 0, 313, 444,
	859, 314, 860, 871, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 872, 323, 447, 324, 1734, 325, 326,
	327, 328, 329, 330, 807, 331, 332, 0, 333, 334,
	335, 336, 337, 0, 339, 340, 338, 341, 342, 343,
	344, 0, 345, 861, 346, 347, 348, 349, 745, 350,
	0, 354, 355, 356, 357, 358, 359, 360, 0, 366,
	367, 780, 781, 783, 784, 362, 368, 369, 835, 370,
	351, 352, 371, 862, 372, 802, 782, 374, 0, 384,
	375, 376, 377, 353, 378, 382, 846, 379, 380, 381,
	873, 0, 385, 386, 0, 387, 388, 389, 390, 391,
	249, 392, 250, 778, 0, 821, 822, 823, 824, 0,
	0, 395, 396, 874, 875, 756, 397, 398, 0, 399,
	400, 0, 0, 401, 402, 403, 405, 836, 406, 0,
	786, 407, 408, 409, 457, 818, 864, 0, 411, 410,
	460, 0, 0, 0, 0, 412, 413, 461, 414, 415,
	416, 737, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 733, 734, 0, 0, 0, 0,
	0, 0, 0, 762, 0, 0, 0, 0, 729, 760,
	791, 749, 750, 751, 747, 748, 761, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 198,
	199, 0, 200, 0, 0, 0, 0, 838, 766, 0,
	0, 0, 201, 202, 203, 418, 806, 785, 817, 775,
	816, 815, 0, 207, 208, 777, 776, 211, 212, 213,
	767, 837, 214, 865, 866, 424, 0, 215, 844, 0,
	827, 0, 216, 217, 218, 219, 220, 0, 222, 223,
	224, 221, 0, 225, 0, 226, 227, 0, 847, 228,
	229, 830, 828, 829, 834, 832, 831, 833, 230, 231,
	232, 233, 820, 235, 813, 812, 739, 236, 0, 237,
	0, 238, 0, 0, 239, 811, 241, 0, 242, 0,
	243, 244, 0, 744, 245, 246, 248, 251, 247, 252,
	253, 867, 868, 757, 848, 0, 0, 0, 0, 0,
	254, 255, 256, 810, 808, 809, 0, 259, 0, 260,
	0, 0, 849, 261, 0, 262, 869, 0, 433, 263,
	0, 264, 265, 266, 267, 268, 269, 839, 840, 843,
	851, 0, 841, 787, 0, 0, 0, 0, 270, 272,
	279, 0, 850, 273, 799, 790, 801, 803, 804, 805,
	800, 0, 792, 0, 280, 852, 853, 281, 282, 283,
	854, 825, 826, 0, 0, 286, 287, 288, 0, 290,
	289, 0, 291, 870, 855, 292, 293, 856, 0, 294,
	295, 0, 0, 296, 0, 297, 741, 740, 298, 299,
	301, 779, 300, 857, 303, 304, 306, 305, 736, 0,
	858, 758, 842, 814, 307, 308, 0, 788, 789, 731,
	0, 311, 312, 0, 0, 313, 444, 859, 314, 860,
	871, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	872, 323, 447, 324, 0, 325, 326, 327, 328, 329,
	330, 807, 331, 332, 0, 333, 334, 335, 336, 337,
	0, 339, 340, 338, 341, 342, 343, 344, 0, 345,
	861, 346, 347, 348, 349, 745, 350, 0, 354, 355,
	356, 357, 358, 359, 360, 0, 366, 367, 780, 781,
	783, 784, 362, 368, 369, 835, 370, 351, 352, 371,
	862, 372, 802, 782, 374, 0, 384, 375, 376, 377,
	353, 378, 382, 846, 379, 380, 381, 873, 0, 385,
	386, 0, 387, 388, 389, 390, 391, 249, 392, 250,
	778, 0, 821, 822, 823, 824, 0, 0, 395, 396,
	874, 875, 756, 397, 398, 0, 399, 400, 0, 0,
	401, 402, 403, 405, 836, 406, 0, 786, 407, 408,
	409, 457, 818, 864, 0, 411, 410, 460, 0, 0,
	0, 0, 412, 413, 461, 414, 415, 416, 737, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 733, 734, 791, 749, 750, 751, 747, 748, 761,
	762, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	196, 197, 198, 199, 0, 200, 0, 0, 0, 0,
	838, 766, 0, 0, 0, 201, 202, 203, 418, 806,
	785, 817, 775, 816, 815, 0, 207, 208, 777, 776,
	211, 212, 213, 767, 837, 214, 865, 866, 424, 0,
	215, 844, 0, 827, 0, 216, 217, 218, 219, 220,
	0, 222, 223, 224, 221, 0, 225, 0, 226, 227,
	0, 847, 228, 229, 830, 828, 829, 834, 832, 831,
	833, 230, 231, 232, 233, 820, 235, 813, 812, 739,
	236, 0, 237, 0, 238, 0, 0, 239, 811, 241,
	0, 242, 0, 243, 244, 0, 744, 245, 246, 248,
	251, 247, 252, 253, 867, 868, 757, 848, 0, 0,
	0, 0, 0, 254, 255, 256, 810, 808, 809, 0,
	259, 0, 260, 0, 0, 849, 261, 0, 262, 869,
	0, 433, 263, 0, 264, 265, 266, 267, 268, 269,
	839, 840, 843, 851, 0, 841, 787, 0, 0, 0,
	0, 270, 272, 279, 0, 850, 273, 799, 790, 801,
	803, 804, 805, 800, 0, 792, 0, 280, 852, 853,
	281, 282, 283, 854, 825, 826, 0, 0, 286, 287,
	288, 0, 290, 289, 0, 291, 870, 855, 292, 293,
	856, 0, 294, 295, 0, 0, 296, 0, 297, 741,
	740, 298, 299, 301, 779, 300, 857, 303, 304, 306,
	305, 736, 0, 858, 758, 842, 814, 307, 308, 0,
	788, 789, 731, 0, 311, 312, 0, 0, 313, 444,
	859, 314, 860, 871, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 872, 323, 447, 324, 0, 325, 326,
	327, 328, 329, 330, 807, 331, 332, 0, 333, 334,
	335, 336, 337, 0, 339, 340, 338, 341, 342, 343,
	344, 0, 345, 861, 346, 347, 348, 349, 745, 350,
	0, 354, 355, 356, 357, 358, 359, 360, 0, 366,
	367, 780, 781, 783, 784, 362, 368, 369, 835, 370,
	351, 352, 371, 862, 372, 802, 782, 374, 0, 384,
	375, 376, 377, 353, 378, 382, 846, 379, 380, 381,
	873, 0, 385, 386, 0, 387, 388, 389, 390, 391,
	249, 392, 250, 778, 0, 821, 822, 823, 824, 0,
	0, 395, 396, 874, 875, 756, 397, 398, 0, 399,
	400, 0, 0, 401, 402, 403, 405, 836, 406, 0,
	786, 407, 408, 409, 457, 818, 864, 0, 411, 410,
	460, 0, 0, 0, 0, 412, 413, 461, 414, 415,
	416, 737, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 733, 734, 791, 749, 750, 751,
	747, 748, 761, 762, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 838, 766, 0, 0, 0, 201, 202,
	203, 418, 806, 785, 817, 775, 816, 815, 0, 207,
	208, 777, 776, 211, 212, 213, 767, 837, 214, 865,
	866, 424, 0, 215, 844, 0, 827, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 847, 228, 229, 830, 828, 829,
	834, 832, 831, 833, 230, 231, 232, 233, 820, 235,
	813, 812, 739, 236, 0, 237, 0, 238, 0, 0,
	239, 811, 241, 0, 242, 0, 243, 244, 0, 744,
	245, 246, 248, 251, 247, 252, 253, 867, 868, 757,
	848, 0, 0, 0, 0, 0, 254, 255, 256, 810,
	808, 809, 0, 259, 0, 260, 0, 0, 849, 261,
	0, 262, 869, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 839, 840, 843, 851, 0, 841, 787,
	0, 0, 0, 0, 270, 272, 279, 0, 850, 273,
	799, 790, 801, 803, 804, 805, 800, 0, 792, 0,
	280, 852, 853, 281, 282, 283, 854, 825, 826, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 870,
	855, 292, 293, 856, 0, 294, 295, 0, 0, 296,
	0, 297, 741, 740, 298, 299, 301, 779, 300, 857,
	303, 304, 306, 305, 736, 0, 858, 758, 842, 814,
	307, 308, 0, 788, 789, 0, 0, 311, 312, 0,
	0, 313, 444, 859, 314, 860, 871, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 872, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 807, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 861, 346, 347, 348,
	349, 745, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 780, 781, 783, 784, 362, 368,
	369, 835, 370, 351, 352, 371, 862, 372, 802, 782,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 846,
	379, 380, 381, 873, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 778, 0, 821, 822,
	823, 824, 0, 0, 395, 396, 874, 875, 756, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	836, 406, 0, 786, 407, 408, 409, 457, 818, 864,
	2519, 411, 410, 460, 0, 0, 0, 0, 412, 413,
	461, 414, 415, 416, 737, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 733, 734, 791,
	749, 750, 751, 747, 748, 761, 762, 0, 0, 0,
	0, 0, 760, 0, 0, 0, 196, 197, 198, 199,
	0, 200, 0, 0, 0, 0, 838, 766, 0, 0,
	0, 201, 202, 203, 418, 806, 785, 817, 775, 816,
	815, 0, 207, 208, 777, 776, 211, 212, 213, 767,
	837, 214, 865, 866, 424, 0, 215, 844, 0, 827,
	0, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 0, 225, 0, 226, 227, 0, 847, 228, 229,
	830, 828, 829, 834, 832, 831, 833, 230, 231, 232,
	233, 820, 235, 813, 812, 739, 236, 0, 237, 0,
	238, 0, 0, 239, 811, 241, 0, 242, 0, 243,
	244, 0, 744, 245, 246, 248, 251, 247, 252, 253,
	867, 868, 757, 848, 0, 0, 0, 0, 0, 254,
	255, 256, 810, 808, 809, 0, 259, 0, 260, 0,
	0, 849, 261, 0, 262, 869, 0, 433, 263, 0,
	264, 265, 266, 267, 268, 269, 839, 840, 843, 851,
	0, 841, 787, 0, 0, 0, 0, 270, 272, 279,
	0, 850, 273, 799, 790, 801, 803, 804, 805, 800,
	0, 792, 0, 280, 852, 853, 281, 282, 283, 854,
	825, 826, 0, 0, 286, 287, 288, 0, 290, 289,
	0, 291, 870, 855, 292, 293, 856, 0, 294, 295,
	0, 0, 296, 0, 297, 741, 740, 298, 299, 301,
	779, 300, 857, 303, 304, 306, 305, 736, 0, 858,
	758, 842, 814, 307, 308, 0, 788, 789, 0, 0,
	311, 312, 0, 0, 313, 444, 859, 314, 860, 871,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 872,
	323, 447, 324, 0, 325, 326, 327, 328, 329, 330,
	807, 331, 332, 0, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 0, 345, 861,
	346, 347, 348, 349, 745, 350, 0, 354, 355, 356,
	357, 358, 359, 360, 0, 366, 367, 780, 781, 783,
	784, 362, 368, 369, 835, 370, 351, 352, 371, 862,
	372, 802, 782, 374, 0, 384, 375, 376, 377, 353,
	378, 382, 846, 379, 380, 381, 873, 0, 385, 386,
	0, 387, 388, 389, 390, 391, 249, 392, 250, 778,
	0, 821, 822, 823, 824, 0, 0, 395, 396, 874,
	875, 756, 397, 398, 0, 399, 400, 0, 0, 401,
	402, 403, 405, 836, 406, 0, 786, 407, 408, 409,
	457, 818, 864, 0, 411, 410, 460, 0, 0, 0,
	0, 412, 413, 461, 414, 415, 416, 737, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	733, 734, 1407, 0, 0, 0, 0, 0, 0, 762,
	0, 0, 0, 0, 0, 760, 791, 749, 750, 751,
	747, 748, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 838, 766, 0, 0, 0, 201, 202,
	203, 418, 806, 785, 817, 775, 816, 815, 0, 207,
	208, 777, 776, 211, 212, 213, 767, 837, 214, 865,
	866, 424, 0, 215, 844, 0, 827, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 847, 228, 229, 830, 828, 829,
	834, 832, 831, 833, 230, 231, 232, 233, 820, 235,
	813, 812, 739, 236, 0, 237, 0, 238, 0, 0,
	239, 811, 241, 0, 242, 0, 243, 244, 0, 744,
	245, 246, 248, 251, 247, 252, 253, 867, 868, 757,
	848, 0, 0, 0, 0, 0, 254, 255, 256, 810,
	808, 809, 0, 259, 0, 260, 0, 1909, 849, 261,
	0, 262, 869, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 839, 840, 843, 851, 0, 841, 787,
	0, 0, 0, 0, 270, 272, 279, 0, 850, 273,
	799, 790, 801, 803, 804, 805, 800, 0, 792, 0,
	280, 852, 853, 281, 282, 283, 854, 825, 826, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 870,
	855, 292, 293, 856, 0, 294, 295, 0, 0, 296,
	0, 297, 741, 740, 298, 299, 301, 779, 300, 857,
	303, 304, 306, 305, 736, 0, 858, 758, 842, 814,
	307, 308, 0, 788, 789, 0, 0, 311, 312, 0,
	0, 313, 444, 859, 314, 860, 871, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 872, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 807, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 861, 346, 347, 348,
	349, 745, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 780, 781, 783, 784, 362, 368,
	369, 835, 370, 351, 352, 371, 862, 372, 802, 782,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 846,
	379, 380, 381, 873, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 778, 0, 821, 822,
	823, 824, 0, 0, 395, 396, 874, 875, 756, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	836, 406, 0, 786, 407, 408, 409, 457, 818, 864,
	0, 411, 410, 460, 0, 0, 0, 0, 412, 413,
	461, 414, 415, 416, 737, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 733, 734, 791,
	749, 750, 751, 747, 748, 761, 762, 0, 0, 0,
	0, 0, 760, 0, 0, 0, 196, 197, 198, 199,
	0, 200, 0, 0, 0, 0, 838, 766, 0, 0,
	0, 201, 202, 203, 418, 806, 785, 817, 775, 816,
	815, 0, 207, 208, 777, 776, 211, 212, 213, 767,
	837, 214, 865, 866, 424, 0, 215, 844, 0, 827,
	0, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 0, 225, 0, 226, 227, 0, 847, 228, 229,
	830, 828, 829, 834, 832, 831, 833, 230, 231, 232,
	233, 820, 235, 813, 812, 739, 236, 0, 237, 0,
	238, 0, 0, 239, 811, 241, 0, 242, 0, 243,
	244, 0, 744, 245, 246, 248, 251, 247, 252, 253,
	867, 868, 757, 848, 0, 0, 0, 0, 0, 254,
	255, 256, 810, 808, 809, 0, 259, 0, 260, 0,
	0, 849, 261, 0, 262, 869, 0, 433, 263, 0,
	264, 265, 266, 267, 268, 269, 839, 840, 843, 851,
	0, 841, 787, 0, 0, 0, 0, 270, 272, 279,
	0, 850, 273, 799, 790, 801, 803, 804, 805, 800,
	0, 792, 0, 280, 852, 853, 281, 282, 283, 854,
	825, 826, 0, 0, 286, 287, 288, 0, 290, 289,
	0, 291, 870, 855, 292, 293, 856, 0, 294, 295,
	0, 0, 296, 0, 297, 741, 740, 298, 299, 301,
	779, 300, 857, 303, 304, 306, 305, 736, 0, 858,
	758, 842, 814, 307, 308, 0, 788, 789, 0, 0,
	311, 312, 0, 0, 313, 444, 859, 314, 860, 871,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 872,
	323, 447, 324, 0, 325, 326, 327, 328, 329, 330,
	807, 331, 332, 0, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 0, 345, 861,
	346, 347, 348, 349, 745, 350, 0, 354, 355, 356,
	357, 358, 359, 360, 0, 366, 367, 780, 781, 783,
	784, 362, 368, 369, 835, 370, 351, 352, 371, 862,
	372, 802, 782, 374, 0, 384, 375, 376, 377, 353,
	378, 382, 846, 379, 380, 381, 873, 0, 385, 386,
	0, 387, 388, 389, 390, 391, 249, 392, 250, 778,
	0, 821, 822, 823, 824, 0, 0, 395, 396, 874,
	875, 756, 397, 398, 0, 399, 400, 0, 0, 401,
	402, 403, 405, 836, 406, 0, 786, 407, 408, 409,
	457, 818, 864, 0, 411, 410, 460, 0, 0, 0,
	0, 412, 413, 461, 414, 415, 416, 737, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	733, 734, 0, 0, 0, 0, 0, 0, 0, 762,
	1350, 0, 0, 0, 1900, 760, 791, 749, 750, 751,
	747, 748, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 838, 766, 0, 0, 0, 201, 202,
	203, 418, 806, 785, 817, 775, 816, 815, 0, 207,
	208, 777, 776, 211, 212, 213, 767, 837, 214, 865,
	866, 424, 0, 215, 844, 0, 827, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 847, 228, 229, 830, 828, 829,
	834, 832, 831, 833, 230, 231, 232, 233, 820, 235,
	813, 812, 739, 236, 0, 237, 0, 238, 0, 0,
	239, 811, 241, 0, 242, 0, 243, 244, 0, 744,
	245, 246, 248, 251, 247, 252, 253, 867, 868, 757,
	848, 0, 0, 0, 0, 0, 254, 255, 256, 810,
	808, 809, 0, 259, 0, 260, 0, 0, 849, 261,
	0, 262, 869, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 839, 840, 843, 851, 0, 841, 787,
	0, 0, 0, 0, 270, 272, 279, 0, 850, 273,
	799, 790, 801, 803, 804, 805, 800, 0, 792, 0,
	280, 852, 853, 281, 282, 283, 854, 825, 826, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 870,
	855, 292, 293, 856, 0, 294, 295, 0, 0, 296,
	0, 297, 741, 740, 298, 299, 301, 779, 300, 857,
	303, 304, 306, 305, 736, 0, 858, 758, 842, 814,
	307, 308, 0, 788, 789, 0, 0, 311, 312, 0,
	0, 313, 444, 859, 314, 860, 871, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 872, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 807, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 861, 346, 347, 348,
	349, 745, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 780, 781, 783, 784, 362, 368,
	369, 835, 370, 351, 352, 371, 862, 372, 802, 782,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 846,
	379, 380, 381, 873, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 778, 0, 821, 822,
	823, 824, 0, 0, 395, 396, 874, 875, 756, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	836, 406, 0, 786, 407, 408, 409, 457, 818, 864,
	0, 411, 410, 460, 0, 0, 0, 0, 412, 413,
	461, 414, 415, 416, 737, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 1889, 760, 791, 749, 750, 751, 747, 748, 761,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 198, 199, 0, 200, 0, 0, 0, 0,
	838, 766, 0, 0, 0, 201, 202, 203, 418, 806,
	785, 817, 775, 816, 815, 0, 207, 208, 777, 776,
	211, 212, 213, 767, 837, 214, 865, 866, 424, 0,
	215, 844, 0, 827, 0, 216, 217, 218, 219, 220,
	0, 222, 223, 224, 221, 0, 225, 0, 226, 227,
	0, 847, 228, 229, 830, 828, 829, 834, 832, 831,
	833, 230, 231, 232, 233, 820, 235, 813, 812, 739,
	236, 0, 237, 0, 238, 0, 0, 239, 811, 241,
	0, 242, 0, 243, 244, 0, 744, 245, 246, 248,
	251, 247, 252, 253, 867, 868, 757, 848, 0, 0,
	0, 0, 0, 254, 255, 256, 810, 808, 809, 0,
	259, 0, 260, 0, 0, 849, 261, 0, 262, 869,
	0, 433, 263, 0, 264, 265, 266, 267, 268, 269,
	839, 840, 843, 851, 0, 841, 787, 0, 0, 0,
	0, 270, 272, 279, 0, 850, 273, 799, 790, 801,
	803, 804, 805, 800, 0, 792, 0, 280, 852, 853,
	281, 282, 283, 854, 825, 826, 0, 0, 286, 287,
	288, 0, 290, 289, 0, 291, 870, 855, 292, 293,
	856, 0, 294, 295, 0, 0, 296, 0, 297, 741,
	740, 298, 299, 301, 779, 300, 857, 303, 304, 306,
	305, 736, 0, 858, 758, 842, 814, 307, 308, 0,
	788, 789, 0, 0, 311, 312, 0, 0, 313, 444,
	859, 314, 860, 871, 315, 316, 317, 318, 319, 320,
	321, 0, 322, 872, 323, 447, 324, 0, 325, 326,
	327, 328, 329, 330, 807, 331, 332, 0, 333, 334,
	335, 336, 337, 0, 339, 340, 338, 341, 342, 343,
	344, 0, 345, 861, 346, 347, 348, 349, 745, 350,
	0, 354, 355, 356, 357, 358, 359, 360, 0, 366,
	367, 780, 781, 783, 784, 362, 368, 369, 835, 370,
	351, 352, 371, 862, 372, 802, 782, 374, 0, 384,
	375, 376, 377, 353, 378, 382, 846, 379, 380, 381,
	873, 0, 385, 386, 0, 387, 388, 389, 390, 391,
	249, 392, 250, 778, 0, 821, 822, 823, 824, 0,
	0, 395, 396, 874, 875, 756, 397, 398, 0, 399,
	400, 0, 0, 401, 402, 403, 405, 836, 406, 0,
	786, 407, 408, 409, 457, 818, 864, 0, 411, 410,
	460, 0, 0, 0, 0, 412, 413, 461, 414, 415,
	416, 737, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 733, 734, 0, 0, 0, 0,
	0, 0, 0, 762, 0, 0, 0, 0, 1887, 760,
	791, 749, 750, 751, 747, 748, 761, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 198,
	199, 0, 200, 0, 0, 0, 0, 838, 766, 0,
	0, 0, 201, 202, 203, 418, 806, 785, 817, 775,
	816, 815, 0, 207, 208, 777, 776, 211, 212, 213,
	767, 837, 214, 865, 866, 424, 0, 215, 844, 0,
	827, 0, 216, 217, 218, 219, 220, 0, 222, 223,
	224, 221, 0, 225, 0, 226, 227, 0, 847, 228,
	229, 830, 828, 829, 834, 832, 831, 833, 230, 231,
	232, 233, 820, 235, 813, 812, 739, 236, 0, 237,
	0, 238, 0, 0, 239, 811, 241, 0, 242, 0,
	243, 244, 0, 744, 245, 246, 248, 251, 247, 252,
	253, 867, 868, 757, 848, 0, 0, 0, 0, 0,
	254, 255, 256, 810, 808, 809, 0, 259, 0, 260,
	0, 0, 849, 261, 0, 262, 869, 0, 433, 263,
	0, 264, 265, 266, 267, 268, 269, 839, 840, 843,
	851, 0, 841, 787, 0, 0, 0, 0, 270, 272,
	279, 0, 850, 273, 799, 790, 801, 803, 804, 805,
	800, 0, 792, 0, 280, 852, 853, 281, 282, 283,
	854, 825, 826, 0, 0, 286, 287, 288, 0, 290,
	289, 0, 291, 870, 855, 292, 293, 856, 0, 294,
	295, 0, 0, 296, 0, 297, 741, 740, 298, 299,
	301, 779, 300, 857, 303, 304, 306, 305, 736, 0,
	858, 758, 842, 814, 307, 308, 0, 788, 789, 0,
	0, 311, 312, 0, 0, 313, 444, 859, 314, 860,
	871, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	872, 323, 447, 324, 0, 325, 326, 327, 328, 329,
	330, 807, 331, 332, 0, 333, 334, 335, 336, 337,
	0, 339, 340, 338, 341, 342, 343, 344, 0, 345,
	861, 346, 347, 348, 349, 745, 350, 0, 354, 355,
	356, 357, 358, 359, 360, 0, 366, 367, 780, 781,
	783, 784, 362, 368, 369, 835, 370, 351, 352, 371,
	862, 372, 802, 782, 374, 0, 384, 375, 376, 377,
	353, 378, 382, 846, 379, 380, 381, 873, 0, 385,
	386, 0, 387, 388, 389, 390, 391, 249, 392, 250,
	778, 0, 821, 822, 823, 824, 0, 0, 395, 396,
	874, 875, 756, 397, 398, 0, 399, 400, 0, 0,
	401, 402, 403, 405, 836, 406, 0, 786, 407, 408,
	409, 457, 818, 864, 0, 411, 410, 460, 0, 0,
	0, 0, 412, 413, 461, 414, 415, 416, 737, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 733, 734, 0, 0, 0, 0, 0, 0, 0,
	762, 0, 0, 0, 0, 1885, 760, 791, 749, 750,
	751, 747, 748, 761, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 0, 200,
	0, 0, 0, 0, 838, 766, 0, 0, 0, 201,
	202, 203, 418, 806, 785, 817, 775, 816, 815, 0,
	207, 208, 777, 776, 211, 212, 213, 767, 837, 214,
	865, 866, 424, 0, 215, 844, 0, 827, 0, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 0,
	225, 0, 226, 227, 0, 847, 228, 229, 830, 828,
	829, 834, 832, 831, 833, 230, 231, 232, 233, 820,
	235, 813, 812, 739, 236, 0, 237, 0, 238, 0,
	0, 239, 811, 241, 0, 242, 0, 243, 244, 0,
	744, 245, 246, 248, 251, 247, 252, 253, 867, 868,
	757, 848, 0, 0, 0, 0, 0, 254, 255, 256,
	810, 808, 809, 0, 259, 0, 260, 0, 0, 849,
	261, 0, 262, 869, 0, 433, 263, 0, 264, 265,
	266, 267, 268, 269, 839, 840, 843, 851, 0, 841,
	787, 0, 0, 0, 0, 270, 272, 279, 0, 850,
	273, 799, 790, 801, 803, 804, 805, 800, 0, 792,
	0, 280, 852, 853, 281, 282, 283, 854, 825, 826,
	0, 0, 286, 287, 288, 0, 290, 289, 0, 291,
	870, 855, 292, 293, 856, 0, 294, 295, 0, 0,
	296, 0, 297, 741, 740, 298, 299, 301, 779, 300,
	857, 303, 304, 306, 305, 736, 0, 858, 758, 842,
	814, 307, 308, 0, 788, 789, 0, 0, 311, 312,
	0, 0, 313, 444, 859, 314, 860, 871, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 872, 323, 447,
	324, 0, 325, 326, 327, 328, 329, 330, 807, 331,
	332, 0, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 0, 345, 861, 346, 347,
	348, 349, 745, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 0, 366, 367, 780, 781, 783, 784, 362,
	368, 369, 835, 370, 351, 352, 371, 862, 372, 802,
	782, 374, 0, 384, 375, 376, 377, 353, 378, 382,
	846, 379, 380, 381, 873, 0, 385, 386, 0, 387,
	388, 389, 390, 391, 249, 392, 250, 778, 0, 821,
	822, 823, 824, 0, 0, 395, 396, 874, 875, 756,
	397, 398, 0, 399, 400, 0, 0, 401, 402, 403,
	405, 836, 406, 0, 786, 407, 408, 409, 457, 818,
	864, 0, 411, 410, 460, 0, 0, 0, 0, 412,
	413, 461, 414, 415, 416, 737, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 733, 734,
	0, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 0, 1883, 760, 1875, 749, 750, 751, 747, 748,
	761, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 838, 766, 0, 0, 0, 201, 202, 203, 418,
	806, 785, 817, 775, 816, 815, 0, 207, 208, 777,
	776, 211, 212, 213, 767, 837, 214, 865, 866, 424,
	0, 215, 844, 0, 827, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 847, 228, 229, 830, 828, 829, 834, 832,
	831, 833, 230, 231, 232, 233, 820, 1878, 813, 812,
	739, 236, 0, 237, 0, 238, 0, 0, 239, 811,
	241, 0, 242, 0, 243, 244, 0, 744, 245, 246,
	248, 251, 247, 252, 253, 867, 868, 757, 848, 0,
	0, 0, 0, 0, 254, 255, 256, 810, 808, 809,
	0, 259, 0, 260, 0, 0, 849, 261, 0, 262,
	869, 0, 433, 263, 0, 264, 265, 1879, 267, 268,
	269, 839, 840, 843, 851, 0, 841, 787, 0, 0,
	0, 0, 270, 272, 279, 0, 850, 273, 799, 790,
	801, 803, 804, 805, 800, 0, 792, 0, 280, 852,
	853, 281, 282, 283, 854, 825, 826, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 870, 855, 292,
	293, 856, 0, 294, 295, 0, 0, 296, 0, 297,
	741, 740, 1880, 1877, 301, 779, 300, 857, 303, 304,
	306, 305, 736, 0, 858, 758, 842, 814, 307, 308,
	0, 788, 789, 0, 0, 311, 312, 0, 0, 313,
	444, 859, 314, 860, 871, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 872, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 807, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 861, 346, 347, 348, 349, 745,
	350, 0, 354, 355, 356, 357, 358, 359, 1881, 0,
	366, 367, 780, 781, 783, 784, 362, 368, 369, 835,
	370, 351, 352, 371, 862, 372, 802, 782, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 846, 379, 380,
	381, 873, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 778, 0, 821, 822, 823, 824,
	0, 0, 395, 396, 874, 875, 756, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 836, 406,
	0, 786, 407, 408, 409, 457, 818, 864, 0, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	1876, 416, 737, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 733, 734, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 0, 0, 0, 1872,
	760, 1875, 749, 750, 751, 747, 748, 761, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	198, 199, 0, 200, 0, 0, 0, 0, 838, 766,
	0, 0, 0, 201, 202, 203, 418, 806, 785, 817,
	775, 816, 815, 0, 207, 208, 777, 776, 211, 212,
	213, 767, 837, 214, 865, 866, 424, 0, 215, 844,
	0, 827, 0, 216, 217, 218, 219, 220, 0, 222,
	223, 224, 221, 0, 225, 0, 226, 227, 0, 847,
	228, 229, 830, 828, 829, 834, 832, 831, 833, 230,
	231, 232, 233, 820, 1878, 813, 812, 739, 236, 0,
	237, 0, 238, 0, 0, 239, 811, 241, 0, 242,
	0, 243, 244, 0, 744, 245, 246, 248, 251, 247,
	252, 253, 867, 868, 757, 848, 0, 0, 0, 0,
	0, 254, 255, 256, 810, 808, 809, 0, 259, 0,
	260, 0, 0, 849, 261, 0, 262, 869, 0, 433,
	263, 0, 264, 265, 1879, 267, 268, 269, 839, 840,
	843, 851, 0, 841, 787, 0, 0, 0, 0, 270,
	272, 279, 0, 850, 273, 799, 790, 801, 803, 804,
	805, 800, 0, 792, 0, 280, 852, 853, 281, 282,
	283, 854, 825, 826, 0, 0, 286, 287, 288, 0,
	290, 289, 0, 291, 870, 855, 292, 293, 856, 0,
	294, 295, 0, 0, 296, 0, 297, 741, 740, 1880,
	1877, 301, 779, 300, 857, 303, 304, 306, 305, 736,
	0, 858, 758, 842, 814, 307, 308, 0, 788, 789,
	0, 0, 311, 312, 0, 0, 313, 444, 859, 314,
	860, 871, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 872, 323, 447, 324, 0, 325, 326, 327, 328,
	329, 330, 807, 331, 332, 0, 333, 334, 335, 336,
	337, 0, 339, 340, 338, 341, 342, 343, 344, 0,
	345, 861, 346, 347, 348, 349, 745, 350, 0, 354,
	355, 356, 357, 358, 359, 1881, 0, 366, 367, 780,
	781, 783, 784, 362, 368, 369, 835, 370, 351, 352,
	371, 862, 372, 802, 782, 374, 0, 384, 375, 376,
	377, 353, 378, 382, 846, 379, 380, 381, 873, 0,
	385, 386, 0, 387, 388, 389, 390, 391, 249, 392,
	250, 778, 0, 821, 822, 823, 824, 0, 0, 395,
	396, 874, 875, 756, 397, 398, 0, 399, 400, 0,
	0, 401, 402, 403, 405, 836, 406, 0, 786, 407,
	408, 409, 457, 818, 864, 0, 411, 410, 460, 0,
	0, 0, 0, 412, 413, 461, 414, 1876, 416, 737,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 733, 734, 791, 749, 750, 751, 747, 748,
	761, 762, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 838, 766, 0, 0, 0, 201, 202, 203, 418,
	806, 785, 817, 775, 816, 815, 0, 207, 208, 777,
	776, 211, 212, 213, 767, 837, 214, 865, 866, 424,
	0, 215, 844, 0, 827, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 847, 228, 229, 830, 828, 829, 834, 832,
	831, 833, 230, 231, 232, 233, 820, 235, 813, 812,
	739, 236, 0, 237, 0, 238, 0, 0, 239, 811,
	241, 0, 242, 0, 243, 244, 0, 744, 245, 246,
	248, 251, 247, 252, 253, 867, 868, 757, 848, 0,
	0, 0, 0, 0, 254, 255, 256, 810, 808, 809,
	0, 259, 0, 260, 0, 0, 849, 261, 0, 262,
	869, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 839, 840, 843, 851, 0, 841, 787, 0, 0,
	0, 0, 270, 272, 279, 0, 850, 273, 799, 790,
	801, 803, 804, 805, 800, 0, 792, 0, 280, 852,
	853, 281, 282, 283, 854, 825, 826, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 870, 855, 292,
	293, 856, 0, 294, 295, 0, 0, 296, 0, 297,
	741, 740, 298, 299, 301, 779, 300, 857, 303, 304,
	306, 305, 736, 0, 858, 758, 842, 814, 307, 308,
	0, 788, 789, 0, 0, 311, 312, 0, 0, 313,
	444, 859, 314, 860, 871, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 872, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 807, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 861, 346, 347, 348, 349, 745,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 780, 781, 783, 784, 362, 368, 369, 835,
	370, 351, 352, 371, 862, 372, 802, 782, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 846, 379, 380,
	381, 873, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 778, 0, 821, 822, 823, 824,
	0, 0, 395, 396, 874, 875, 756, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 836, 406,
	0, 786, 407, 408, 409, 457, 818, 864, 0, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 737, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 733, 734, 0, 0, 0,
	0, 0, 1358, 0, 762, 0, 0, 0, 0, 0,
	760, 791, 749, 750, 751, 747, 748, 761, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	198, 199, 1722, 200, 0, 0, 0, 0, 838, 766,
	0, 0, 0, 201, 202, 203, 418, 806, 785, 817,
	775, 816, 815, 0, 207, 208, 777, 776, 211, 212,
	213, 767, 837, 214, 865, 866, 424, 0, 215, 844,
	0, 827, 0, 216, 217, 218, 219, 220, 0, 222,
	223, 224, 221, 0, 225, 0, 226, 227, 0, 847,
	228, 229, 830, 828, 829, 834, 832, 831, 833, 230,
	231, 232, 233, 820, 235, 813, 812, 739, 236, 0,
	237, 0, 238, 0, 0, 239, 811, 241, 0, 242,
	0, 243, 244, 0, 744, 245, 246, 248, 251, 247,
	252, 253, 867, 868, 757, 848, 0, 0, 0, 0,
	0, 254, 255, 256, 810, 808, 809, 0, 259, 0,
	260, 0, 0, 849, 261, 0, 262, 869, 0, 433,
	263, 0, 264, 265, 266, 267, 268, 269, 839, 840,
	843, 851, 0, 841, 787, 0, 0, 0, 0, 270,
	272, 279, 0, 850, 273, 799, 790, 801, 803, 804,
	805, 800, 0, 792, 0, 280, 852, 853, 281, 282,
	283, 854, 825, 826, 0, 0, 286, 287, 288, 0,
	290, 289, 0, 291, 870, 855, 292, 293, 856, 0,
	294, 295, 0, 0, 296, 0, 297, 741, 740, 298,
	299, 301, 779, 300, 857, 303, 304, 306, 305, 736,
	0, 858, 758, 842, 814, 307, 308, 0, 788, 789,
	0, 0, 311, 312, 0, 0, 313, 444, 859, 314,
	860, 871, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 872, 323, 447, 324, 0, 325, 326, 327, 328,
	329, 330, 807, 331, 332, 0, 333, 334, 335, 336,
	337, 0, 339, 340, 338, 341, 342, 343, 344, 0,
	345, 861, 346, 347, 348, 349, 745, 350, 0, 354,
	355, 356, 357, 358, 359, 360, 0, 366, 367, 780,
	781, 783, 784, 362, 368, 369, 835, 370, 351, 352,
	371, 862, 372, 802, 782, 374, 0, 384, 375, 376,
	377, 353, 378, 382, 846, 379, 380, 381, 873, 0,
	385, 386, 0, 387, 388, 389, 390, 391, 249, 392,
	250, 778, 0, 821, 822, 823, 824, 0, 0, 395,
	396, 874, 875, 756, 397, 398, 0, 399, 400, 0,
	0, 401, 402, 403, 405, 836, 406, 0, 786, 407,
	408, 409, 457, 818, 864, 0, 411, 410, 460, 0,
	0, 0, 0, 412, 413, 461, 414, 415, 416, 737,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 733, 734, 0, 0, 0, 0, 0, 0,
	0, 762, 0, 0, 0, 0, 1109, 760, 791, 749,
	750, 751, 747, 748, 761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 838, 766, 0, 0, 0,
	201, 202, 203, 418, 806, 785, 817, 775, 816, 815,
	0, 207, 208, 777, 776, 211, 212, 213, 767, 837,
	214, 865, 866, 424, 0, 215, 844, 0, 827, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 830,
	828, 829, 834, 832, 831, 833, 230, 231, 232, 233,
	820, 235, 813, 812, 739, 236, 0, 237, 0, 238,
	0, 0, 239, 811, 241, 0, 242, 0, 243, 244,
	0, 744, 245, 246, 248, 251, 247, 252, 253, 867,
	868, 757, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 810, 808, 809, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 869, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1108, 840, 843, 851, 0,
	841, 787, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 799, 790, 801, 803, 804, 805, 800, 0,
	792, 0, 280, 852, 853, 281, 282, 283, 854, 825,
	826, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 870, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 741, 740, 298, 299, 301, 779,
	300, 857, 303, 304, 306, 305, 736, 0, 858, 758,
	842, 814, 307, 308, 0, 788, 789, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 871, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 872, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 807,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 745, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 780, 781, 783, 784,
	362, 368, 369, 835, 370, 351, 352, 371, 862, 372,
	802, 782, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 846, 379, 380, 381, 873, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 778, 0,
	821, 822, 823, 824, 0, 0, 395, 396, 874, 875,
	756, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 836, 406, 0, 786, 407, 408, 409, 457,
	818, 864, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 737, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 733,
	734, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 0, 1103, 760, 791, 749, 750, 751, 747,
	748, 761, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 200, 0, 0,
	0, 0, 838, 766, 0, 0, 0, 201, 202, 203,
	418, 806, 785, 817, 775, 816, 815, 0, 207, 208,
	777, 776, 211, 212, 213, 767, 837, 214, 865, 866,
	424, 0, 215, 844, 0, 827, 0, 216, 217, 218,
	219, 220, 0, 222, 223, 224, 221, 0, 225, 0,
	226, 227, 0, 847, 228, 229, 830, 828, 829, 834,
	832, 831, 833, 230, 231, 232, 233, 820, 235, 813,
	812, 739, 236, 0, 237, 0, 238, 0, 0, 239,
	811, 241, 0, 242, 0, 243, 244, 0, 744, 245,
	246, 248, 251, 247, 252, 253, 867, 868, 757, 848,
	0, 0, 0, 0, 0, 254, 255, 256, 810, 808,
	809, 0, 259, 0, 260, 0, 0, 849, 261, 0,
	262, 869, 0, 433, 263, 0, 264, 265, 266, 267,
	268, 269, 1102, 840, 843, 851, 0, 841, 787, 0,
	0, 0, 0, 270, 272, 279, 0, 850, 273, 799,
	790, 801, 803, 804, 805, 800, 0, 792, 0, 280,
	852, 853, 281, 282, 283, 854, 825, 826, 0, 0,
	286, 287, 288, 0, 290, 289, 0, 291, 870, 855,
	292, 293, 856, 0, 294, 295, 0, 0, 296, 0,
	297, 741, 740, 298, 299, 301, 779, 300, 857, 303,
	304, 306, 305, 736, 0, 858, 758, 842, 814, 307,
	308, 0, 788, 789, 0, 0, 311, 312, 0, 0,
	313, 444, 859, 314, 860, 871, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 872, 323, 447, 324, 0,
	325, 326, 327, 328, 329, 330, 807, 331, 332, 0,
	333, 334, 335, 336, 337, 0, 339, 340, 338, 341,
	342, 343, 344, 0, 345, 861, 346, 347, 348, 349,
	745, 350, 0, 354, 355, 356, 357, 358, 359, 360,
	0, 366, 367, 780, 781, 783, 784, 362, 368, 369,
	835, 370, 351, 352, 371, 862, 372, 802, 782, 374,
	0, 384, 375, 376, 377, 353, 378, 382, 846, 379,
	380, 381, 873, 0, 385, 386, 0, 387, 388, 389,
	390, 391, 249, 392, 250, 778, 0, 821, 822, 823,
	824, 0, 0, 395, 396, 874, 875, 756, 397, 398,
	0, 399, 400, 0, 0, 401, 402, 403, 405, 836,
	406, 0, 786, 407, 408, 409, 457, 818, 864, 0,
	411, 410, 460, 0, 0, 0, 0, 412, 413, 461,
	414, 415, 416, 737, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 0, 0, 733, 734, 0, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 0, 0,
	1098, 760, 791, 749, 750, 751, 747, 748, 761, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 838,
	766, 0, 0, 0, 201, 202, 203, 418, 806, 785,
	817, 775, 816, 815, 0, 207, 208, 777, 776, 211,
	212, 213, 767, 837, 214, 865, 866, 424, 0, 215,
	844, 0, 827, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	847, 228, 229, 830, 828, 829, 834, 832, 831, 833,
	230, 231, 232, 233, 820, 235, 813, 812, 739, 236,
	0, 237, 0, 238, 0, 0, 239, 811, 241, 0,
	242, 0, 243, 244, 0, 744, 245, 246, 248, 251,
	247, 252, 253, 867, 868, 757, 848, 0, 0, 0,
	0, 0, 254, 255, 256, 810, 808, 809, 0, 259,
	0, 260, 0, 0, 849, 261, 0, 262, 869, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 839,
	840, 843, 851, 0, 841, 787, 0, 0, 0, 0,
	270, 272, 279, 0, 850, 273, 799, 790, 801, 803,
	804, 805, 800, 0, 792, 0, 280, 852, 853, 281,
	282, 283, 854, 825, 826, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 870, 855, 292, 293, 856,
	0, 294, 295, 0, 0, 296, 0, 297, 741, 740,
	298, 299, 301, 779, 300, 857, 303, 304, 306, 305,
	736, 0, 858, 758, 842, 814, 307, 308, 0, 788,
	789, 0, 0, 311, 312, 0, 0, 313, 444, 859,
	314, 860, 871, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 872, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 807, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 861, 346, 347, 348, 349, 745, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	780, 781, 783, 784, 362, 368, 369, 835, 370, 351,
	352, 371, 862, 372, 802, 782, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 846, 379, 380, 381, 873,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 778, 0, 821, 822, 823, 824, 0, 0,
	395, 396, 874, 875, 756, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 836, 406, 0, 786,
	407, 408, 409, 457, 818, 864, 0, 411, 410, 460,
	0, 0, 0, 0, 412, 413, 461, 414, 415, 416,
	737, 0, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 733, 734, 791, 749, 750, 751, 747,
	748, 761, 762, 0, 0, 0, 0, 0, 760, 0,
	0, 0, 196, 197, 198, 199, 0, 200, 0, 0,
	0, 0, 838, 766, 0, 0, 0, 201, 202, 203,
	418, 806, 785, 817, 775, 816, 815, 0, 207, 208,
	777, 776, 211, 212, 213, 767, 837, 214, 865, 866,
	424, 0, 215, 844, 0, 827, 0, 216, 217, 218,
	219, 220, 0, 222, 223, 224, 221, 0, 225, 0,
	226, 227, 0, 847, 228, 229, 830, 828, 829, 834,
	832, 831, 833, 230, 231, 232, 233, 820, 235, 813,
	812, 739, 236, 0, 237, 0, 238, 0, 0, 239,
	811, 241, 0, 242, 0, 243, 244, 0, 744, 245,
	246, 248, 251, 247, 252, 253, 867, 868, 757, 848,
	0, 0, 0, 0, 0, 254, 255, 256, 810, 808,
	809, 0, 259, 0, 260, 0, 0, 849, 261, 0,
	262, 869, 0, 433, 263, 0, 264, 265, 266, 267,
	268, 269, 839, 840, 843, 851, 0, 841, 787, 0,
	0, 0, 0, 270, 272, 279, 0, 850, 273, 799,
	790, 801, 803, 804, 805, 800, 0, 792, 0, 280,
	852, 853, 281, 282, 283, 854, 825, 826, 0, 0,
	286, 287, 288, 0, 290, 289, 0, 291, 870, 855,
	292, 293, 856, 0, 294, 295, 0, 0, 296, 0,
	297, 741, 740, 298, 299, 301, 779, 300, 857, 303,
	304, 306, 305, 736, 0, 858, 758, 842, 814, 307,
	308, 0, 788, 789, 0, 0, 311, 312, 0, 0,
	313, 444, 859, 314, 860, 871, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 872, 323, 447, 324, 0,
	325, 326, 327, 328, 329, 330, 807, 331, 332, 0,
	333, 334, 335, 336, 337, 0, 339, 340, 338, 341,
	342, 343, 344, 0, 345, 861, 346, 347, 348, 349,
	745, 350, 0, 354, 355, 356, 357, 358, 359, 360,
	0, 366, 367, 780, 781, 783, 784, 362, 368, 369,
	835, 370, 351, 352, 371, 862, 372, 802, 782, 374,
	0, 384, 375, 376, 377, 353, 378, 382, 846, 379,
	380, 381, 873, 0, 385, 386, 0, 387, 388, 389,
	390, 391, 249, 392, 250, 778, 0, 821, 822, 823,
	824, 0, 0, 395, 396, 874, 875, 756, 397, 398,
	0, 399, 400, 0, 0, 401, 402, 403, 405, 836,
	406, 0, 786, 407, 408, 409, 457, 818, 864, 0,
	411, 410, 460, 0, 0, 0, 0, 412, 413, 461,
	414, 415, 416, 737, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 0, 0, 733, 734, 791, 749,
	750, 751, 747, 748, 761, 762, 0, 0, 0, 0,
	0, 760, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 838, 766, 0, 0, 0,
	201, 202, 203, 418, 806, 785, 817, 775, 816, 815,
	0, 207, 208, 777, 776, 211, 212, 213, 767, 837,
	214, 865, 866, 424, 0, 215, 844, 0, 827, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 3080, 830,
	828, 829, 834, 832, 831, 833, 230, 231, 232, 233,
	820, 235, 813, 812, 739, 236, 0, 237, 0, 238,
	0, 0, 239, 811, 241, 0, 242, 0, 243, 244,
	0, 744, 245, 246, 248, 251, 247, 252, 253, 867,
	868, 757, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 810, 808, 809, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 869, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 839, 840, 843, 851, 0,
	841, 787, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 799, 790, 801, 803, 804, 805, 800, 0,
	792, 0, 280, 852, 853, 281, 282, 283, 854, 825,
	826, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 870, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 741, 740, 298, 299, 301, 779,
	300, 857, 303, 304, 306, 305, 736, 0, 858, 758,
	842, 814, 307, 308, 0, 788, 789, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 871, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 872, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 807,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 745, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 780, 781, 783, 784,
	362, 368, 369, 835, 370, 351, 352, 371, 862, 372,
	802, 782, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 846, 379, 380, 381, 873, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 778, 0,
	821, 822, 823, 824, 0, 0, 395, 396, 874, 875,
	756, 397, 398, 0, 3079, 400, 0, 0, 401, 402,
	403, 405, 836, 406, 0, 786, 407, 408, 409, 457,
	818, 864, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 737, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 733,
	734, 791, 749, 750, 751, 747, 748, 761, 762, 0,
	0, 0, 0, 0, 760, 0, 0, 0, 196, 197,
	198, 199, 0, 200, 0, 0, 0, 0, 838, 766,
	0, 0, 0, 201, 202, 203, 3078, 806, 785, 817,
	775, 816, 815, 0, 207, 208, 777, 776, 211, 212,
	213, 767, 837, 214, 865, 866, 424, 0, 215, 844,
	0, 827, 0, 216, 217, 218, 219, 220, 0, 222,
	223, 224, 221, 0, 225, 0, 226, 227, 0, 847,
	228, 3080, 830, 828, 829, 834, 832, 831, 833, 230,
	231, 232, 233, 820, 235, 813, 812, 739, 236, 0,
	237, 0, 238, 0, 0, 239, 811, 241, 0, 242,
	0, 243, 244, 0, 744, 245, 246, 248, 251, 247,
	252, 253, 867, 868, 757, 848, 0, 0, 0, 0,
	0, 254, 255, 256, 810, 808, 809, 0, 259, 0,
	260, 0, 0, 849, 261, 0, 262, 869, 0, 433,
	263, 0, 264, 265, 266, 267, 268, 269, 839, 840,
	843, 851, 0, 841, 787, 0, 0, 0, 0, 270,
	272, 279, 0, 850, 273, 799, 790, 801, 803, 804,
	805, 800, 0, 792, 0, 280, 852, 853, 281, 282,
	283, 854, 825, 826, 0, 0, 286, 287, 288, 0,
	290, 289, 0, 291, 870, 855, 292, 293, 856, 0,
	294, 295, 0, 0, 296, 0, 297, 741, 740, 298,
	299, 301, 779, 300, 857, 303, 304, 306, 305, 736,
	0, 858, 758, 842, 814, 307, 308, 0, 788, 789,
	0, 0, 311, 312, 0, 0, 313, 444, 859, 314,
	860, 871, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 872, 323, 447, 324, 0, 325, 326, 327, 328,
	329, 330, 807, 331, 332, 0, 333, 334, 335, 336,
	337, 0, 339, 340, 338, 341, 342, 343, 344, 0,
	345, 861, 346, 347, 348, 349, 745, 350, 0, 354,
	355, 356, 357, 358, 359, 360, 0, 366, 367, 780,
	781, 783, 784, 362, 368, 369, 835, 370, 351, 352,
	371, 862, 372, 802, 782, 374, 0, 384, 375, 376,
	377, 353, 378, 382, 846, 379, 380, 381, 873, 0,
	385, 386, 0, 387, 388, 389, 390, 391, 249, 392,
	250, 778, 0, 821, 822, 823, 824, 0, 0, 395,
	396, 874, 875, 756, 397, 398, 0, 3079, 400, 0,
	0, 401, 402, 403, 405, 836, 406, 0, 786, 407,
	408, 409, 457, 818, 864, 0, 411, 410, 460, 0,
	0, 0, 0, 412, 413, 461, 414, 415, 416, 737,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 733, 734, 791, 749, 750, 751, 747, 748,
	761, 762, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 838, 766, 0, 0, 0, 201, 202, 203, 418,
	806, 785, 817, 775, 816, 815, 0, 207, 208, 777,
	776, 211, 212, 213, 767, 837, 214, 865, 866, 424,
	0, 215, 844, 0, 827, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 847, 228, 229, 830, 828, 829, 834, 832,
	831, 833, 230, 231, 232, 233, 820, 235, 813, 812,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 811,
	241, 0, 242, 0, 243, 244, 0, 744, 245, 246,
	248, 251, 247, 252, 253, 867, 868, 757, 848, 0,
	0, 0, 0, 0, 254, 255, 256, 810, 808, 809,
	0, 259, 0, 260, 0, 0, 849, 261, 0, 262,
	869, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 839, 840, 843, 851, 0, 841, 787, 0, 0,
	0, 0, 270, 272, 279, 0, 850, 273, 799, 790,
	801, 803, 804, 805, 800, 0, 792, 0, 280, 852,
	853, 281, 282, 283, 854, 825, 826, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 870, 855, 292,
	293, 856, 0, 294, 295, 0, 0, 296, 0, 297,
	913, 912, 298, 299, 301, 779, 300, 857, 303, 304,
	306, 305, 0, 0, 858, 758, 842, 814, 307, 308,
	0, 788, 789, 0, 0, 311, 312, 0, 0, 313,
	444, 859, 314, 860, 871, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 872, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 807, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 861, 346, 347, 348, 349, 745,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 780, 781, 783, 784, 362, 368, 369, 835,
	370, 351, 352, 371, 862, 372, 802, 782, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 846, 379, 380,
	381, 873, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 778, 0, 821, 822, 823, 824,
	0, 0, 395, 396, 874, 875, 756, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 836, 406,
	0, 786, 407, 408, 409, 457, 818, 864, 0, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 0, 0, 726, 0, 911,
	1897, 0, 0, 0, 0, 1895, 1896, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 196, 197, 198, 199,
	760, 200, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 201, 202, 203, 418, 419, 204, 420, 205, 206,
	421, 0, 207, 208, 209, 210, 211, 212, 213, 0,
	837, 214, 422, 423, 424, 0, 215, 844, 0, 827,
	0, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 0, 225, 0, 226, 227, 0, 847, 228, 229,
	830, 828, 829, 834, 832, 831, 833, 230, 231, 232,
	233, 234, 235, 426, 427, 0, 236, 0, 237, 0,
	238, 0, 0, 239, 240, 241, 0, 242, 0, 243,
	244, 0, 428, 245, 246, 248, 251, 247, 252, 253,
	867, 868, 0, 848, 0, 0, 0, 0, 0, 254,
	255, 256, 431, 257, 258, 0, 259, 0, 260, 0,
	0, 849, 261, 0, 262, 869, 0, 433, 263, 0,
	264, 265, 266, 267, 268, 269, 839, 840, 843, 851,
	0, 841, 271, 0, 0, 0, 0, 270, 272, 279,
	0, 850, 273, 437, 275, 274, 276, 277, 278, 438,
	0, 439, 0, 280, 852, 853, 281, 282, 283, 854,
	284, 285, 0, 0, 286, 287, 288, 898, 290, 289,
	0, 291, 870, 855, 292, 293, 856, 0, 294, 295,
	0, 0, 296, 0, 297, 913, 912, 298, 299, 301,
	302, 300, 857, 303, 304, 306, 305, 0, 0, 858,
	0, 842, 443, 307, 308, 0, 309, 310, 0, 903,
	311, 312, 0, 0, 313, 444, 859, 314, 860, 871,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 872,
	323, 447, 324, 0, 325, 326, 327, 328, 329, 330,
	448, 331, 332, 0, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 0, 345, 861,
	346, 347, 348, 349, 449, 905, 0, 354, 355, 356,
	357, 358, 359, 360, 175, 366, 367, 361, 363, 364,
	365, 362, 368, 369, 835, 370, 351, 352, 371, 862,
	372, 450, 373, 374, 0, 384, 375, 376, 377, 353,
	378, 382, 383, 379, 380, 381, 873, 0, 385, 386,
	177, 387, 388, 389, 390, 391, 249, 392, 250, 393,
	0, 452, 453, 454, 394, 0, 0, 395, 396, 874,
	875, 0, 397, 398, 0, 399, 400, 0, 0, 401,
	402, 403, 405, 836, 406, 0, 404, 407, 408, 409,
	1178, 458, 459, 0, 411, 410, 460, 0, 911, 0,
	169, 412, 413, 461, 414, 415, 416, 0, 170, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 838, 0, 895, 0, 1432,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 837,
	214, 422, 423, 424, 0, 215, 844, 0, 827, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 830,
	828, 829, 834, 832, 831, 833, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 867,
	868, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 869, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 839, 840, 843, 851, 0,
	841, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 898, 290, 289, 0,
	291, 870, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	842, 443, 307, 308, 0, 309, 310, 0, 903, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 871, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 872, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 905, 0, 354, 355, 356, 357,
	358, 359, 360, 175, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 835, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 873, 0, 385, 386, 177,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 874, 875,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 836, 406, 0, 404, 407, 408, 409, 1178,
	458, 459, 0, 411, 410, 460, 2295, 0, 911, 169,
	412, 413, 461, 414, 415, 416, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 838, 895, 0, 1432, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 837,
	214, 422, 423, 424, 0, 215, 844, 0, 827, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 830,
	828, 829, 834, 832, 831, 833, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 867,
	868, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 869, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 839, 840, 843, 851, 0,
	841, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 898, 290, 289, 0,
	291, 870, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	842, 443, 307, 308, 0, 309, 310, 0, 903, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 871, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 872, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 905, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 835, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 873, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 874, 875,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 836, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 894, 0, 911, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 838, 895, 0, 900, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 837,
	214, 422, 423, 424, 0, 215, 844, 0, 827, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 830,
	828, 829, 834, 832, 831, 833, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 867,
	868, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 869, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 839, 840, 843, 851, 0,
	841, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 898, 290, 289, 0,
	291, 870, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	842, 443, 307, 308, 0, 309, 310, 0, 903, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 871, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 872, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 905, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 835, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 873, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 874, 875,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 836, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 911, 0, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 0, 200,
	0, 0, 0, 0, 838, 0, 895, 0, 900, 201,
	202, 203, 418, 419, 204, 420, 205, 206, 421, 0,
	207, 208, 209, 210, 211, 212, 213, 0, 837, 214,
	422, 423, 424, 0, 215, 844, 0, 827, 0, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 0,
	225, 0, 226, 227, 0, 847, 228, 229, 830, 828,
	829, 834, 832, 831, 833, 230, 231, 232, 233, 234,
	235, 426, 427, 0, 236, 0, 237, 0, 238, 0,
	0, 239, 240, 241, 0, 242, 0, 243, 244, 0,
	428, 245, 246, 248, 251, 247, 252, 253, 867, 868,
	0, 848, 0, 0, 0, 0, 0, 254, 255, 256,
	431, 257, 258, 0, 259, 0, 260, 0, 0, 849,
	261, 0, 262, 869, 0, 433, 263, 0, 264, 265,
	266, 267, 268, 269, 839, 840, 843, 851, 0, 841,
	271, 0, 0, 0, 0, 270, 272, 279, 0, 850,
	273, 437, 275, 274, 276, 277, 278, 438, 0, 439,
	0, 280, 852, 853, 281, 282, 283, 854, 284, 285,
	0, 0, 286, 287, 288, 898, 290, 289, 0, 291,
	870, 855, 292, 293, 856, 0, 294, 295, 0, 0,
	296, 0, 297, 913, 912, 298, 299, 301, 302, 300,
	857, 303, 304, 306, 305, 0, 0, 858, 0, 842,
	443, 307, 308, 0, 309, 310, 0, 903, 311, 312,
	0, 0, 313, 444, 859, 314, 860, 871, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 872, 323, 447,
	324, 0, 325, 326, 327, 328, 329, 330, 448, 331,
	332, 0, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 0, 345, 861, 346, 347,
	348, 349, 449, 905, 0, 354, 355, 356, 357, 358,
	359, 360, 0, 366, 367, 361, 363, 364, 365, 362,
	368, 369, 835, 370, 351, 352, 371, 862, 372, 450,
	373, 374, 0, 384, 375, 376, 377, 353, 378, 382,
	383, 379, 380, 381, 873, 0, 385, 386, 0, 387,
	388, 389, 390, 391, 249, 392, 250, 393, 0, 452,
	453, 454, 394, 0, 0, 395, 396, 874, 875, 0,
	397, 398, 0, 399, 400, 0, 0, 401, 402, 403,
	405, 836, 406, 0, 404, 407, 408, 409, 457, 458,
	459, 0, 411, 410, 460, 0, 911, 0, 0, 412,
	413, 461, 414, 415, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 838, 0, 895, 0, 900, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 837, 214, 422,
	423, 424, 0, 215, 844, 0, 827, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 847, 228, 229, 830, 828, 829,
	834, 832, 831, 833, 230, 231, 232, 233, 234, 235,
	426, 427, 0, 236, 0, 237, 0, 238, 0, 0,
	239, 240, 241, 0, 242, 0, 243, 244, 0, 428,
	245, 246, 248, 251, 247, 252, 253, 867, 868, 0,
	848, 0, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 0, 260, 0, 0, 849, 261,
	0, 262, 869, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 839, 840, 843, 851, 0, 841, 271,
	0, 0, 0, 0, 270, 272, 279, 0, 850, 273,
	437, 275, 274, 276, 277, 278, 438, 0, 439, 0,
	280, 852, 853, 281, 282, 283, 854, 284, 285, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 870,
	855, 292, 293, 856, 0, 294, 295, 0, 0, 296,
	0, 297, 913, 912, 298, 299, 301, 302, 300, 857,
	303, 304, 306, 305, 0, 0, 858, 0, 842, 443,
	307, 308, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 444, 859, 314, 860, 871, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 872, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 861, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 835, 370, 351, 352, 371, 862, 372, 450, 373,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 873, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 0, 452, 453,
	454, 394, 0, 0, 395, 396, 874, 875, 0, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	836, 406, 0, 404, 407, 408, 409, 457, 458, 459,
	0, 411, 410, 460, 0, 911, 0, 0, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 200, 0, 0,
	0, 0, 838, 0, 0, 0, 2645, 201, 202, 203,
	418, 419, 204, 420, 205, 206, 421, 0, 207, 208,
	209, 210, 211, 212, 213, 0, 837, 214, 422, 423,
	424, 0, 215, 844, 0, 827, 0, 216, 217, 218,
	219, 220, 0, 222, 223, 224, 221, 0, 225, 0,
	226, 227, 0, 847, 228, 229, 830, 828, 829, 834,
	832, 831, 833, 230, 231, 232, 233, 234, 235, 426,
	427, 0, 236, 0, 237, 0, 238, 0, 0, 239,
	240, 241, 0, 242, 0, 243, 244, 0, 428, 245,
	246, 248, 251, 247, 252, 253, 867, 868, 0, 848,
	0, 0, 0, 0, 0, 254, 255, 256, 431, 257,
	258, 0, 259, 0, 260, 0, 0, 849, 261, 0,
	262, 869, 0, 433, 263, 0, 264, 265, 266, 267,
	268, 269, 839, 840, 843, 851, 0, 841, 271, 0,
	0, 0, 0, 270, 272, 279, 0, 850, 273, 437,
	275, 274, 276, 277, 278, 438, 0, 439, 0, 280,
	852, 853, 281, 282, 283, 854, 284, 285, 0, 0,
	286, 287, 288, 0, 290, 289, 0, 291, 870, 855,
	292, 293, 856, 0, 294, 295, 0, 0, 296, 0,
	297, 913, 912, 298, 299, 301, 302, 300, 857, 303,
	304, 306, 305, 0, 0, 858, 0, 842, 443, 307,
	308, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 444, 859, 314, 860, 871, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 872, 323, 447, 324, 0,
	325, 326, 327, 328, 329, 330, 448, 331, 332, 0,
	333, 334, 335, 336, 337, 0, 339, 340, 338, 341,
	342, 343, 344, 0, 345, 861, 346, 347, 348, 349,
	449, 905, 0, 354, 355, 356, 357, 358, 359, 360,
	0, 366, 367, 361, 363, 364, 365, 362, 368, 369,
	835, 370, 351, 352, 371, 862, 372, 450, 373, 374,
	0, 384, 375, 376, 377, 353, 378, 382, 383, 379,
	380, 381, 873, 0, 385, 386, 0, 387, 388, 389,
	390, 391, 249, 392, 250, 393, 0, 452, 453, 454,
	394, 0, 0, 395, 396, 874, 875, 0, 397, 398,
	0, 399, 400, 0, 0, 401, 402, 403, 405, 836,
	406, 0, 404, 407, 408, 409, 457, 458, 459, 0,
	411, 410, 460, 1175, 0, 1075, 0, 412, 413, 461,
	414, 415, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 200, 0, 0,
	0, 0, 417, 0, 0, 1339, 0, 201, 202, 203,
	418, 419, 204, 420, 205, 206, 421, 0, 207, 208,
	209, 210, 211, 212, 213, 0, 0, 214, 422, 423,
	424, 0, 215, 425, 0, 979, 0, 216, 217, 218,
	219, 220, 0, 222, 223, 224, 221, 0, 225, 0,
	226, 227, 0, 847, 228, 229, 0, 0, 0, 0,
	0, 0, 0, 230, 231, 232, 233, 234, 235, 426,
	427, 0, 236, 0, 237, 0, 238, 0, 0, 239,
	240, 241, 0, 242, 0, 243, 244, 0, 428, 245,
	246, 248, 251, 247, 252, 253, 429, 430, 0, 848,
	0, 0, 0, 0, 0, 254, 255, 256, 431, 257,
	258, 0, 259, 0, 260, 0, 0, 849, 261, 0,
	262, 432, 0, 433, 263, 0, 264, 265, 266, 267,
	268, 269, 434, 435, 436, 851, 0, 440, 271, 0,
	0, 0, 0, 270, 272, 279, 0, 850, 273, 437,
	275, 274, 276, 277, 278, 438, 0, 439, 0, 280,
	852, 853, 281, 282, 283, 854, 284, 285, 0, 0,
	286, 287, 288, 0, 290, 289, 0, 291, 441, 855,
	292, 293, 856, 0, 294, 295, 0, 0, 296, 0,
	297, 913, 912, 298, 299, 301, 302, 300, 857, 303,
	304, 306, 305, 0, 0, 858, 0, 442, 443, 307,
	308, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 444, 859, 314, 860, 445, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 446, 323, 447, 324, 0,
	325, 326, 327, 328, 329, 330, 448, 331, 332, 0,
	333, 334, 335, 336, 337, 0, 339, 340, 338, 341,
	342, 343, 344, 0, 345, 861, 346, 347, 348, 349,
	449, 350, 0, 354, 355, 356, 357, 358, 359, 360,
	175, 366, 367, 361, 363, 364, 365, 362, 368, 369,
	0, 370, 351, 352, 371, 862, 372, 450, 373, 374,
	0, 384, 375, 376, 377, 353, 378, 382, 383, 379,
	380, 381, 451, 0, 385, 386, 177, 387, 388, 389,
	390, 391, 249, 392, 250, 393, 0, 452, 453, 454,
	394, 0, 0, 395, 396, 455, 456, 0, 397, 398,
	0, 399, 400, 0, 0, 401, 402, 403, 405, 0,
	406, 0, 404, 407, 408, 409, 1178, 458, 459, 0,
	411, 410, 460, 0, 0, 0, 169, 412, 413, 461,
	414, 415, 416, 0, 170, 0, 0, 0, 0, 1075,
	1074, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 196, 197, 198, 199,
	0, 200, 0, 0, 0, 0, 417, 0, 0, 0,
	0, 201, 202, 203, 418, 419, 204, 420, 205, 206,
	421, 0, 207, 208, 209, 210, 211, 212, 213, 0,
	0, 214, 422, 423, 424, 0, 215, 425, 0, 979,
	0, 216, 217, 218, 219, 220, 0, 222, 223, 224,
	221, 0, 225, 0, 226, 227, 0, 847, 228, 229,
	0, 0, 0, 0, 0, 0, 0, 230, 231, 232,
	233, 234, 235, 426, 427, 0, 236, 0, 237, 0,
	238, 0, 0, 239, 240, 241, 0, 242, 0, 243,
	244, 0, 428, 245, 246, 248, 251, 247, 252, 253,
	429, 430, 0, 848, 0, 0, 0, 0, 0, 254,
	255, 256, 431, 257, 258, 0, 259, 0, 260, 0,
	0, 849, 261, 0, 262, 432, 0, 433, 263, 0,
	264, 265, 266, 267, 268, 269, 434, 435, 436, 851,
	0, 440, 271, 0, 0, 0, 0, 270, 272, 279,
	0, 850, 273, 437, 275, 274, 276, 277, 278, 438,
	0, 439, 0, 280, 852, 853, 281, 282, 283, 854,
	284, 285, 0, 0, 286, 287, 288, 0, 290, 289,
	0, 291, 441, 855, 292, 293, 856, 0, 294, 295,
	0, 0, 296, 0, 297, 913, 912, 298, 299, 301,
	302, 300, 857, 303, 304, 306, 305, 0, 0, 858,
	0, 442, 443, 307, 308, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 444, 859, 314, 860, 445,
	315, 316, 317, 318, 319, 320, 321, 0, 322, 446,
	323, 447, 324, 0, 325, 326, 327, 328, 329, 330,
	448, 331, 332, 0, 333, 334, 335, 336, 337, 0,
	339, 340, 338, 341, 342, 343, 344, 0, 345, 861,
	346, 347, 348, 349, 449, 350, 0, 354, 355, 356,
	357, 358, 359, 360, 0, 366, 367, 361, 363, 364,
	365, 362, 368, 369, 0, 370, 351, 352, 371, 862,
	372, 450, 373, 374, 0, 384, 375, 376, 377, 353,
	378, 382, 383, 379, 380, 381, 451, 0, 385, 386,
	0, 387, 388, 389, 390, 391, 249, 392, 250, 393,
	0, 452, 453, 454, 394, 0, 0, 395, 396, 455,
	456, 0, 397, 398, 0, 399, 400, 0, 0, 401,
	402, 403, 405, 0, 406, 0, 404, 407, 408, 409,
	457, 458, 459, 0, 411, 410, 460, 0, 0, 0,
	0, 412, 413, 461, 414, 415, 416, 0, 1075, 1074,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 2480,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 911, 0, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 0, 200,
	0, 0, 0, 0, 838, 0, 0, 0, 1181, 201,
	202, 203, 418, 419, 204, 420, 205, 206, 421, 0,
	207, 208, 209, 210, 211, 212, 213, 0, 837, 214,
	422, 423, 424, 0, 215, 844, 0, 827, 0, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 0,
	225, 0, 226, 227, 0, 847, 228, 229, 830, 828,
	829, 834, 832, 831, 833, 230, 231, 232, 233, 234,
	235, 426, 427, 0, 236, 0, 237, 0, 238, 0,
	0, 239, 240, 241, 0, 242, 0, 243, 244, 0,
	428, 245, 246, 248, 251, 247, 252, 253, 867, 868,
	0, 848, 0, 0, 0, 0, 0, 254, 255, 256,
	431, 257, 258, 0, 259, 0, 260, 0, 0, 849,
	261, 0, 262, 869, 0, 433, 263, 0, 264, 265,
	266, 267, 268, 269, 839, 840, 843, 851, 0, 841,
	271, 0, 0, 0, 0, 270, 272, 279, 0, 850,
	273, 437, 275, 274, 276, 277, 278, 438, 0, 439,
	0, 280, 852, 853, 281, 282, 283, 854, 284, 285,
	0, 0, 286, 287, 288, 0, 290, 289, 0, 291,
	870, 855, 292, 293, 856, 0, 294, 295, 0, 0,
	296, 0, 297, 913, 912, 298, 299, 301, 302, 300,
	857, 303, 304, 306, 305, 0, 0, 858, 0, 842,
	443, 307, 308, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 444, 859, 314, 860, 871, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 872, 323, 447,
	324, 0, 325, 326, 327, 328, 329, 330, 448, 331,
	332, 0, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 0, 345, 861, 346, 347,
	348, 349, 449, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 0, 366, 367, 361, 363, 364, 365, 362,
	368, 369, 835, 370, 351, 352, 371, 862, 372, 450,
	373, 374, 0, 384, 375, 376, 377, 353, 378, 382,
	383, 379, 380, 381, 873, 0, 385, 386, 0, 387,
	388, 389, 390, 391, 249, 392, 250, 393, 0, 452,
	453, 454, 394, 0, 0, 395, 396, 874, 875, 0,
	397, 398, 0, 399, 400, 0, 0, 401, 402, 403,
	405, 836, 406, 0, 404, 407, 408, 409, 457, 458,
	459, 0, 411, 410, 460, 726, 0, 193, 0, 412,
	413, 461, 414, 415, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 0, 200,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 201,
	202, 203, 418, 419, 204, 420, 205, 206, 421, 0,
	207, 208, 209, 210, 211, 212, 213, 0, 0, 214,
	422, 423, 424, 0, 215, 425, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 222, 223, 224, 221, 0,
	225, 0, 226, 227, 0, 0, 228, 229, 0, 0,
	0, 0, 0, 0, 0, 230, 231, 232, 233, 234,
	235, 426, 427, 0, 236, 0, 237, 0, 238, 0,
	0, 239, 240, 241, 0, 242, 0, 243, 244, 0,
	428, 245, 246, 248, 251, 247, 252, 253, 429, 430,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 256,
	431, 257, 258, 0, 259, 0, 260, 0, 0, 0,
	261, 0, 262, 432, 0, 433, 263, 0, 264, 265,
	266, 267, 268, 269, 434, 435, 436, 0, 0, 440,
	271, 0, 0, 0, 0, 270, 272, 279, 0, 0,
	273, 437, 275, 274, 276, 277, 278, 438, 0, 439,
	0, 280, 0, 0, 281, 282, 283, 0, 284, 285,
	0, 0, 286, 287, 288, 0, 290, 289, 0, 291,
	441, 0, 292, 293, 0, 0, 294, 295, 0, 0,
	296, 0, 297, 0, 0, 298, 299, 301, 302, 300,
	0, 303, 304, 306, 305, 0, 0, 0, 0, 442,
	443, 307, 308, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 444, 0, 314, 0, 445, 315, 316,
	317, 318, 319, 320, 321, 0, 322, 446, 323, 447,
	324, 0, 325, 326, 327, 328, 329, 330, 448, 331,
	332, 0, 333, 334, 335, 336, 337, 0, 339, 340,
	338, 341, 342, 343, 344, 0, 345, 0, 346, 347,
	348, 349, 449, 350, 0, 354, 355, 356, 357, 358,
	359, 360, 175, 366, 367, 361, 363, 364, 365, 362,
	368, 369, 0, 370, 351, 352, 371, 0, 372, 450,
	373, 374, 0, 384, 375, 376, 377, 353, 378, 382,
	383, 379, 380, 381, 451, 0, 385, 386, 177, 387,
	388, 389, 390, 391, 249, 392, 250, 393, 0, 452,
	453, 454, 394, 0, 0, 395, 396, 455, 456, 0,
	397, 398, 0, 399, 400, 0, 0, 401, 402, 403,
	405, 0, 406, 0, 404, 407, 408, 409, 1178, 458,
	459, 0, 411, 410, 460, 0, 193, 0, 169, 412,
	413, 461, 414, 415, 416, 0, 170, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 417, 0, 0, 0, 147, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 0, 214, 422,
	423, 424, 0, 215, 425, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 0, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 230, 231, 232, 233, 234, 235,
	426, 427, 0, 236, 0, 237, 0, 238, 0, 0,
	239, 240, 241, 0, 242, 0, 243, 244, 0, 428,
	245, 246, 248, 251, 247, 252, 253, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 0, 260, 0, 0, 0, 261,
	0, 262, 432, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 434, 435, 436, 0, 0, 440, 271,
	0, 0, 0, 0, 270, 272, 279, 0, 0, 273,
	437, 275, 274, 276, 277, 278, 438, 0, 439, 0,
	280, 0, 0, 281, 282, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 441,
	0, 292, 293, 0, 0, 294, 295, 0, 0, 296,
	0, 297, 0, 0, 298, 299, 301, 302, 300, 0,
	303, 304, 306, 305, 0, 0, 0, 0, 442, 443,
	307, 308, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 444, 0, 314, 0, 445, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 446, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 0, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 0, 370, 351, 352, 371, 0, 372, 450, 373,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 451, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 0, 452, 453,
	454, 394, 0, 0, 395, 396, 455, 456, 0, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	0, 406, 0, 404, 407, 408, 409, 457, 458, 459,
	0, 411, 410, 460, 0, 193, 0, 0, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 198, 199, 0, 200, 0, 0,
	0, 0, 417, 0, 0, 0, 2115, 201, 202, 203,
	418, 419, 204, 420, 205, 206, 421, 0, 207, 208,
	209, 210, 211, 212, 213, 0, 0, 214, 422, 423,
	424, 0, 215, 425, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 222, 223, 224, 221, 0, 225, 0,
	226, 227, 0, 0, 228, 229, 0, 0, 0, 0,
	0, 0, 0, 230, 231, 232, 233, 234, 235, 426,
	427, 0, 236, 0, 237, 0, 238, 0, 0, 239,
	240, 241, 0, 242, 0, 243, 244, 0, 428, 245,
	246, 248, 251, 247, 252, 253, 429, 430, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 256, 431, 257,
	258, 0, 259, 0, 260, 0, 0, 0, 261, 0,
	262, 432, 0, 433, 263, 0, 264, 265, 266, 267,
	268, 269, 434, 435, 436, 0, 0, 440, 271, 0,
	0, 0, 0, 270, 272, 279, 0, 0, 273, 437,
	275, 274, 276, 277, 278, 438, 0, 439, 0, 280,
	0, 0, 281, 282, 283, 0, 284, 285, 0, 0,
	286, 287, 288, 0, 290, 289, 0, 291, 441, 0,
	292, 293, 0, 0, 294, 295, 0, 0, 296, 0,
	297, 0, 0, 298, 299, 301, 302, 300, 0, 303,
	304, 306, 305, 0, 0, 0, 0, 442, 443, 307,
	308, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 444, 0, 314, 0, 445, 315, 316, 317, 318,
	319, 320, 321, 0, 322, 446, 323, 447, 324, 0,
	325, 326, 327, 328, 329, 330, 448, 331, 332, 0,
	333, 334, 335, 336, 337, 0, 339, 340, 338, 341,
	342, 343, 344, 0, 345, 0, 346, 347, 348, 349,
	449, 350, 0, 354, 355, 356, 357, 358, 359, 360,
	0, 366, 367, 361, 363, 364, 365, 362, 368, 369,
	0, 370, 351, 352, 371, 0, 372, 450, 373, 374,
	0, 384, 375, 376, 377, 353, 378, 382, 383, 379,
	380, 381, 451, 0, 385, 386, 0, 387, 388, 389,
	390, 391, 249, 392, 250, 393, 0, 452, 453, 454,
	394, 0, 0, 395, 396, 455, 456, 0, 397, 398,
	0, 399, 400, 0, 0, 401, 402, 403, 405, 0,
	406, 0, 404, 407, 408, 409, 457, 458, 459, 0,
	411, 410, 460, 0, 193, 0, 0, 412, 413, 461,
	414, 415, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 2543, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	0, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 434, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 300, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 0, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 0, 1199, 0, 1075, 1074,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 1198, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 1197, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 1173, 0, 1075, 1074,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1172, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 1169, 0, 1075, 1074,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1168, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 1129, 0, 1075, 1074,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1128, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 1126, 0, 1075, 1074,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1125, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 1068, 0, 1075, 1074,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1070, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 1075, 1074, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 0, 214, 422,
	423, 424, 0, 215, 425, 0, 979, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 847, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 230, 231, 232, 233, 234, 235,
	426, 427, 0, 236, 0, 237, 0, 238, 0, 0,
	239, 240, 241, 0, 242, 0, 243, 244, 0, 428,
	245, 246, 248, 251, 247, 252, 253, 429, 430, 0,
	848, 0, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 0, 260, 0, 0, 849, 261,
	0, 262, 432, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 434, 435, 436, 851, 0, 440, 271,
	0, 0, 0, 0, 270, 272, 279, 0, 850, 273,
	437, 275, 274, 276, 277, 278, 438, 0, 439, 0,
	280, 852, 853, 281, 282, 283, 854, 284, 285, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 441,
	855, 292, 293, 856, 0, 294, 295, 0, 0, 296,
	0, 297, 913, 912, 298, 299, 301, 302, 300, 857,
	303, 304, 306, 305, 0, 0, 858, 0, 442, 443,
	307, 308, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 444, 859, 314, 860, 445, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 446, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 861, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 0, 370, 351, 352, 371, 862, 372, 450, 373,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 451, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 0, 452, 453,
	454, 394, 0, 0, 395, 396, 455, 456, 0, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	0, 406, 0, 404, 407, 408, 409, 457, 458, 459,
	0, 411, 410, 460, 1075, 1074, 0, 0, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	0, 215, 425, 0, 979, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 847, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 848, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 849, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 434, 435, 436, 851, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 850, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 852,
	853, 281, 282, 283, 854, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 855, 292,
	293, 856, 0, 294, 295, 0, 0, 296, 0, 297,
	913, 912, 298, 299, 301, 302, 300, 857, 303, 304,
	306, 305, 0, 0, 858, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 859, 314, 860, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 861, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 862, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 1075, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 979, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 847, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 848, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	849, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 851, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	850, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 852, 853, 281, 282, 283, 854, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 855, 292, 293, 856, 0, 294, 295, 0,
	0, 296, 0, 297, 913, 912, 298, 299, 301, 302,
	300, 857, 303, 304, 306, 305, 0, 0, 858, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 859, 314, 860, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 861, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 862, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 622, 0, 556, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 562, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 561,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 555, 0, 556, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 565, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 562, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 561,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 556, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 565, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 562, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 1693, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 561, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 556, 411, 410, 460,
	0, 0, 0, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 417, 0, 565, 0, 0, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 0, 214, 422,
	423, 424, 0, 215, 425, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 0, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 230, 231, 562, 233, 234, 235,
	426, 427, 0, 236, 0, 237, 0, 238, 0, 0,
	239, 240, 241, 0, 242, 0, 243, 244, 0, 428,
	245, 246, 248, 251, 247, 252, 253, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 0, 260, 0, 0, 0, 261,
	0, 262, 432, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 434, 435, 436, 0, 0, 440, 271,
	0, 0, 0, 0, 270, 272, 279, 0, 0, 273,
	437, 275, 274, 276, 277, 278, 438, 0, 439, 0,
	280, 0, 0, 281, 282, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 441,
	0, 292, 293, 0, 0, 294, 295, 0, 0, 296,
	0, 297, 0, 0, 298, 299, 301, 302, 300, 0,
	303, 304, 306, 305, 0, 0, 0, 0, 442, 443,
	307, 308, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 444, 0, 314, 0, 445, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 446, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 0, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 0, 370, 351, 352, 371, 0, 372, 450, 373,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 451, 0, 385, 386, 561, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 0, 452, 453,
	454, 394, 0, 0, 395, 396, 455, 456, 0, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	0, 406, 0, 404, 407, 408, 409, 457, 458, 459,
	193, 411, 410, 460, 0, 0, 0, 0, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 196, 197, 198,
	199, 0, 200, 0, 0, 0, 0, 417, 0, 565,
	0, 0, 201, 202, 203, 418, 419, 204, 420, 205,
	206, 421, 0, 207, 208, 209, 210, 211, 212, 213,
	0, 0, 214, 422, 423, 424, 0, 215, 425, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 222, 223,
	224, 221, 0, 225, 0, 226, 227, 0, 0, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 230, 231,
	232, 233, 234, 235, 426, 427, 0, 236, 0, 237,
	0, 238, 0, 0, 239, 240, 241, 0, 242, 0,
	243, 244, 0, 428, 245, 246, 248, 251, 247, 252,
	253, 429, 430, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 256, 431, 257, 258, 0, 259, 0, 260,
	0, 0, 0, 261, 0, 262, 432, 0, 433, 263,
	0, 264, 265, 266, 267, 268, 269, 434, 435, 436,
	0, 0, 440, 271, 0, 0, 0, 0, 270, 272,
	279, 0, 0, 273, 437, 275, 274, 276, 277, 278,
	438, 0, 439, 0, 280, 0, 0, 281, 282, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 290,
	289, 0, 291, 441, 0, 292, 293, 0, 0, 294,
	295, 0, 0, 296, 0, 297, 0, 0, 298, 299,
	301, 302, 300, 0, 303, 304, 306, 305, 0, 0,
	0, 0, 442, 443, 307, 308, 0, 309, 310, 0,
	0, 311, 312, 0, 0, 313, 444, 0, 314, 0,
	445, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	446, 323, 447, 324, 0, 325, 326, 327, 328, 329,
	330, 448, 331, 332, 0, 333, 334, 335, 336, 337,
	0, 339, 340, 338, 341, 342, 343, 344, 0, 345,
	0, 346, 347, 348, 349, 449, 350, 0, 354, 355,
	356, 357, 358, 359, 360, 0, 366, 367, 361, 363,
	364, 365, 362, 368, 369, 0, 370, 351, 352, 371,
	0, 372, 450, 373, 374, 0, 384, 375, 376, 377,
	353, 378, 382, 383, 379, 380, 381, 451, 0, 385,
	386, 0, 387, 388, 389, 390, 391, 249, 392, 250,
	393, 0, 452, 453, 454, 394, 0, 0, 395, 396,
	455, 456, 0, 397, 398, 0, 399, 400, 0, 0,
	401, 402, 403, 405, 0, 406, 0, 404, 407, 408,
	409, 457, 458, 459, 193, 411, 410, 460, 0, 0,
	0, 0, 412, 413, 461, 414, 415, 416, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 565, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	2009, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 2006, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 2078, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 2012, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 434, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 2076, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 2075, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 300, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 2011, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 2077, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 193, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 2009, 215, 425, 0, 0, 2003,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	2006, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 2012, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 2002, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 2011, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 2010, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 490, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 489, 478,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 481, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 482, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 483, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 477, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 478,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 481, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 482, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 483, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 193, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 481,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 482, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 483, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	1242, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 1245, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 1243, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 1244, 410, 460,
	1148, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 903, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	1063, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 1065,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 903, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	1060, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 1062,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 903, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	967, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 969,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 903, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	614, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 613, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	466, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 465, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 464, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 193, 411, 410, 460,
	0, 0, 0, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 417, 0, 1943, 0, 0, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 0, 214, 422,
	423, 424, 0, 215, 425, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 0, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 230, 231, 232, 233, 234, 235,
	426, 427, 0, 236, 0, 237, 0, 238, 0, 0,
	239, 240, 241, 0, 242, 0, 243, 244, 0, 428,
	245, 246, 248, 251, 247, 252, 253, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 0, 260, 0, 0, 0, 261,
	0, 262, 432, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 434, 435, 436, 0, 0, 440, 271,
	0, 0, 0, 0, 270, 272, 279, 0, 0, 273,
	437, 275, 274, 276, 277, 278, 438, 0, 439, 0,
	280, 0, 0, 281, 282, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 441,
	0, 292, 293, 0, 0, 294, 295, 0, 0, 296,
	0, 297, 0, 0, 298, 299, 301, 302, 300, 0,
	303, 304, 306, 305, 0, 0, 0, 0, 442, 443,
	307, 308, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 444, 0, 314, 0, 445, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 446, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 0, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 0, 370, 351, 352, 371, 0, 372, 450, 373,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 451, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 0, 452, 453,
	454, 394, 0, 0, 395, 396, 455, 456, 0, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	0, 406, 0, 404, 407, 408, 409, 457, 458, 459,
	0, 411, 410, 460, 193, 2135, 0, 0, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	0, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 434, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 300, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 193, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 2666, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 193, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 903, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	193, 2135, 0, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 198,
	199, 0, 200, 0, 0, 0, 0, 417, 0, 0,
	0, 0, 201, 202, 203, 418, 419, 204, 420, 205,
	206, 421, 0, 207, 208, 209, 210, 211, 212, 213,
	0, 0, 214, 422, 423, 424, 0, 215, 425, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 222, 223,
	224, 221, 0, 225, 0, 226, 227, 0, 0, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 230, 231,
	232, 233, 234, 235, 426, 427, 0, 236, 0, 237,
	0, 238, 0, 0, 239, 240, 241, 0, 242, 0,
	243, 244, 0, 428, 245, 246, 248, 251, 247, 252,
	253, 429, 430, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 256, 431, 257, 258, 0, 259, 0, 260,
	0, 0, 0, 261, 0, 262, 432, 0, 433, 263,
	0, 264, 265, 266, 267, 268, 269, 434, 435, 436,
	0, 0, 440, 271, 0, 0, 0, 0, 270, 272,
	279, 0, 0, 273, 437, 275, 274, 276, 277, 278,
	438, 0, 439, 0, 280, 0, 0, 281, 282, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 290,
	289, 0, 291, 441, 0, 292, 293, 0, 0, 294,
	295, 0, 0, 296, 0, 297, 0, 0, 298, 299,
	301, 302, 300, 0, 303, 304, 306, 305, 0, 0,
	0, 0, 442, 443, 307, 308, 0, 309, 310, 0,
	0, 311, 2132, 0, 0, 313, 444, 0, 314, 0,
	445, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	446, 323, 447, 324, 0, 325, 326, 327, 328, 329,
	330, 448, 331, 332, 0, 333, 334, 335, 336, 337,
	0, 339, 340, 338, 341, 342, 343, 344, 0, 345,
	0, 346, 347, 348, 349, 449, 350, 0, 354, 355,
	356, 357, 358, 359, 360, 0, 366, 367, 361, 363,
	364, 365, 362, 368, 369, 0, 370, 351, 352, 371,
	0, 372, 450, 373, 374, 0, 384, 375, 376, 377,
	353, 378, 382, 383, 379, 380, 381, 451, 0, 385,
	386, 0, 387, 388, 389, 390, 391, 249, 392, 250,
	393, 0, 452, 453, 454, 394, 0, 0, 395, 396,
	455, 456, 0, 397, 398, 0, 399, 400, 0, 0,
	401, 402, 403, 405, 0, 406, 0, 404, 407, 408,
	409, 457, 458, 459, 193, 411, 410, 460, 0, 0,
	0, 0, 412, 413, 461, 414, 415, 416, 0, 0,
	0, 196, 197, 198, 199, 1685, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	0, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 434, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 300, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 0, 411,
	410, 460, 510, 0, 193, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 940,
	0, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 434, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 511, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 507, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 506, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 0, 411,
	410, 460, 1640, 0, 193, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	0, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 1639, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 300, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 193, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 1624,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1522, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1520, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 510, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 500, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	511, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 507, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 1180, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	506, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1166, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1165, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1162, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1161, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1159, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1158, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1156, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1155, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1152, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1151, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1140, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1139, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1131, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1122, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1121, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1117, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1113, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1115, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1085, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 1087, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 1079, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 510, 0, 193, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 940, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	511, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 507, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	506, 453, 454, 394, 0, 0, 395, 941, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 193, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 196,
	197, 198, 199, 921, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	527, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	510, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 500,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 499, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 511, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 501, 350, 0,
	354, 355, 507, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 502, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 506, 453, 454, 394, 0, 0,
	395, 504, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	495, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	496, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	492, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 0, 411, 410, 460,
	485, 0, 193, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 434,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 193, 411, 410, 460,
	0, 0, 0, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 0, 214, 422,
	423, 424, 0, 215, 425, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 0, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 230, 231, 232, 233, 234, 235,
	426, 427, 0, 236, 0, 237, 0, 238, 0, 0,
	239, 240, 241, 0, 242, 0, 243, 244, 0, 428,
	245, 246, 248, 251, 247, 252, 253, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 0, 260, 0, 0, 0, 261,
	0, 262, 432, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 434, 435, 436, 0, 0, 440, 271,
	0, 0, 0, 0, 270, 272, 279, 0, 0, 273,
	437, 275, 274, 276, 277, 278, 438, 0, 439, 0,
	280, 0, 0, 281, 282, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 441,
	0, 292, 293, 0, 0, 294, 295, 0, 0, 296,
	0, 297, 0, 0, 298, 299, 301, 302, 300, 0,
	303, 304, 306, 305, 0, 0, 0, 0, 442, 443,
	307, 308, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 444, 0, 314, 0, 445, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 446, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 0, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 0, 370, 351, 352, 371, 0, 372, 450, 373,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 451, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 0, 452, 453,
	454, 394, 0, 0, 395, 396, 455, 456, 0, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	0, 406, 0, 404, 407, 408, 409, 457, 458, 459,
	193, 411, 410, 460, 0, 0, 0, 0, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 196, 197, 198,
	199, 0, 200, 0, 0, 0, 0, 417, 0, 0,
	0, 0, 201, 202, 203, 418, 419, 204, 420, 205,
	206, 421, 0, 207, 208, 209, 210, 211, 212, 213,
	0, 0, 214, 422, 423, 424, 0, 215, 425, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 222, 223,
	224, 221, 0, 225, 0, 226, 227, 0, 0, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 230, 231,
	232, 233, 234, 235, 426, 427, 0, 236, 0, 237,
	0, 238, 0, 0, 239, 240, 241, 0, 242, 0,
	243, 244, 0, 428, 245, 246, 248, 251, 247, 252,
	253, 429, 430, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 256, 431, 257, 258, 0, 259, 0, 260,
	0, 0, 0, 261, 0, 262, 432, 0, 433, 263,
	0, 264, 265, 266, 267, 268, 269, 2380, 435, 436,
	0, 0, 440, 271, 0, 0, 0, 0, 270, 272,
	279, 0, 0, 273, 437, 275, 274, 276, 277, 278,
	438, 0, 439, 0, 280, 0, 0, 281, 282, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 290,
	289, 0, 291, 441, 0, 292, 293, 0, 0, 294,
	295, 0, 0, 296, 0, 297, 0, 0, 298, 299,
	301, 302, 300, 0, 303, 304, 306, 305, 0, 0,
	0, 0, 442, 443, 307, 308, 0, 309, 310, 0,
	0, 311, 312, 0, 0, 313, 444, 0, 314, 0,
	445, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	446, 323, 447, 324, 0, 325, 326, 327, 328, 329,
	330, 448, 331, 332, 0, 333, 334, 335, 336, 337,
	0, 339, 340, 338, 341, 342, 343, 344, 0, 345,
	0, 346, 347, 348, 349, 449, 350, 0, 354, 355,
	356, 357, 358, 359, 360, 0, 366, 367, 361, 363,
	364, 365, 362, 368, 369, 0, 370, 351, 352, 371,
	0, 372, 450, 373, 374, 0, 384, 375, 376, 377,
	353, 378, 382, 383, 379, 380, 381, 451, 0, 385,
	386, 0, 387, 388, 389, 390, 391, 249, 392, 250,
	393, 0, 452, 453, 454, 394, 0, 0, 395, 396,
	455, 456, 0, 397, 398, 0, 399, 400, 0, 0,
	401, 402, 403, 405, 0, 406, 0, 404, 407, 408,
	409, 457, 458, 459, 193, 411, 410, 460, 0, 0,
	0, 0, 412, 413, 461, 414, 415, 416, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	0, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 2378, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 300, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 331, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 193, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 263, 0, 264,
	265, 266, 267, 268, 269, 2367, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 328, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 350, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 193, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 0, 0, 0, 196,
	197, 198, 199, 0, 200, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 201, 202, 203, 418, 419, 204,
	420, 205, 206, 421, 0, 207, 208, 209, 210, 211,
	212, 213, 0, 0, 214, 422, 423, 424, 0, 215,
	425, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	222, 223, 224, 221, 0, 225, 0, 226, 227, 0,
	0, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	230, 231, 232, 233, 234, 235, 426, 427, 0, 236,
	0, 237, 0, 238, 0, 0, 239, 240, 241, 0,
	242, 0, 243, 244, 0, 428, 245, 246, 248, 251,
	247, 252, 253, 429, 430, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 256, 431, 257, 258, 0, 259,
	0, 260, 0, 0, 0, 261, 0, 262, 432, 0,
	433, 263, 0, 264, 265, 266, 267, 268, 269, 2098,
	435, 436, 0, 0, 440, 271, 0, 0, 0, 0,
	270, 272, 279, 0, 0, 273, 437, 275, 274, 276,
	277, 278, 438, 0, 439, 0, 280, 0, 0, 281,
	282, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 290, 289, 0, 291, 441, 0, 292, 293, 0,
	0, 294, 295, 0, 0, 296, 0, 297, 0, 0,
	298, 299, 301, 302, 300, 0, 303, 304, 306, 305,
	0, 0, 0, 0, 442, 443, 307, 308, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 444, 0,
	314, 0, 445, 315, 316, 317, 318, 319, 320, 321,
	0, 322, 446, 323, 447, 324, 0, 325, 326, 327,
	328, 329, 330, 448, 331, 332, 0, 333, 334, 335,
	336, 337, 0, 339, 340, 338, 341, 342, 343, 344,
	0, 345, 0, 346, 347, 348, 349, 449, 350, 0,
	354, 355, 356, 357, 358, 359, 360, 0, 366, 367,
	361, 363, 364, 365, 362, 368, 369, 0, 370, 351,
	352, 371, 0, 372, 450, 373, 374, 0, 384, 375,
	376, 377, 353, 378, 382, 383, 379, 380, 381, 451,
	0, 385, 386, 0, 387, 388, 389, 390, 391, 249,
	392, 250, 393, 0, 452, 453, 454, 394, 0, 0,
	395, 396, 455, 456, 0, 397, 398, 0, 399, 400,
	0, 0, 401, 402, 403, 405, 0, 406, 0, 404,
	407, 408, 409, 457, 458, 459, 193, 411, 410, 460,
	0, 0, 0, 0, 412, 413, 461, 414, 415, 416,
	0, 0, 0, 196, 197, 198, 199, 0, 200, 0,
	0, 0, 0, 417, 0, 1652, 0, 0, 201, 202,
	203, 418, 419, 204, 420, 205, 206, 421, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 0, 214, 422,
	423, 424, 0, 215, 425, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 222, 223, 224, 221, 0, 225,
	0, 226, 227, 0, 0, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 230, 231, 232, 233, 234, 235,
	426, 427, 0, 236, 0, 237, 0, 238, 0, 0,
	239, 240, 241, 0, 242, 0, 243, 244, 0, 428,
	245, 246, 248, 251, 247, 252, 253, 429, 430, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 256, 431,
	257, 258, 0, 259, 0, 260, 0, 0, 0, 261,
	0, 262, 432, 0, 433, 263, 0, 264, 265, 266,
	267, 268, 269, 434, 435, 436, 0, 0, 440, 271,
	0, 0, 0, 0, 270, 272, 279, 0, 0, 273,
	437, 275, 274, 276, 277, 278, 438, 0, 439, 0,
	280, 0, 0, 281, 282, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 290, 289, 0, 291, 441,
	0, 292, 293, 0, 0, 294, 295, 0, 0, 296,
	0, 297, 0, 0, 298, 299, 301, 302, 300, 0,
	303, 304, 306, 305, 0, 0, 0, 0, 442, 443,
	307, 308, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 444, 0, 314, 0, 445, 315, 316, 317,
	318, 319, 320, 321, 0, 322, 446, 323, 447, 324,
	0, 325, 326, 327, 328, 329, 330, 448, 331, 332,
	0, 333, 334, 335, 336, 337, 0, 339, 340, 338,
	341, 342, 343, 344, 0, 345, 0, 346, 347, 348,
	349, 449, 350, 0, 354, 355, 356, 357, 358, 359,
	360, 0, 366, 367, 361, 363, 364, 365, 362, 368,
	369, 0, 0, 351, 352, 371, 0, 372, 450, 373,
	374, 0, 384, 375, 376, 377, 353, 378, 382, 383,
	379, 380, 381, 451, 0, 385, 386, 0, 387, 388,
	389, 390, 391, 249, 392, 250, 393, 0, 452, 453,
	454, 394, 0, 0, 395, 396, 455, 456, 0, 397,
	398, 0, 399, 400, 0, 0, 401, 402, 403, 405,
	0, 406, 0, 404, 407, 408, 409, 457, 458, 459,
	193, 411, 410, 460, 0, 0, 0, 0, 412, 413,
	461, 414, 415, 416, 0, 0, 0, 196, 197, 198,
	199, 0, 200, 0, 0, 0, 0, 417, 0, 0,
	0, 0, 201, 202, 203, 418, 419, 204, 420, 205,
	206, 421, 0, 207, 208, 209, 210, 211, 212, 213,
	0, 0, 214, 422, 423, 424, 0, 215, 425, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 222, 223,
	224, 221, 0, 225, 0, 226, 227, 0, 0, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 230, 231,
	232, 233, 234, 235, 426, 427, 0, 236, 0, 237,
	0, 238, 0, 0, 239, 240, 241, 0, 242, 0,
	243, 244, 0, 428, 245, 246, 248, 251, 247, 252,
	253, 429, 430, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 256, 431, 257, 258, 0, 259, 0, 260,
	0, 0, 0, 261, 0, 262, 432, 0, 433, 263,
	0, 264, 265, 266, 267, 268, 269, 434, 435, 436,
	0, 0, 440, 271, 0, 0, 0, 0, 270, 272,
	279, 0, 0, 273, 437, 275, 274, 276, 277, 278,
	438, 0, 439, 0, 280, 0, 0, 281, 282, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 290,
	289, 0, 291, 441, 0, 292, 293, 0, 0, 294,
	295, 0, 0, 296, 0, 297, 0, 0, 298, 299,
	301, 302, 300, 0, 303, 304, 306, 305, 0, 0,
	0, 0, 442, 443, 307, 308, 0, 309, 310, 0,
	0, 311, 312, 0, 0, 313, 444, 0, 314, 0,
	445, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	446, 323, 447, 324, 0, 325, 326, 327, 328, 329,
	330, 448, 331, 332, 0, 333, 334, 335, 336, 337,
	0, 339, 340, 338, 341, 342, 343, 344, 0, 345,
	0, 346, 347, 348, 349, 449, 350, 0, 496, 355,
	356, 357, 358, 359, 360, 0, 366, 367, 361, 363,
	364, 365, 362, 368, 369, 0, 370, 351, 352, 371,
	0, 372, 450, 373, 374, 0, 384, 375, 376, 377,
	353, 378, 382, 383, 379, 380, 381, 451, 0, 385,
	386, 0, 387, 388, 389, 390, 391, 249, 392, 250,
	393, 0, 452, 453, 454, 394, 0, 0, 395, 396,
	455, 456, 0, 397, 398, 0, 399, 400, 0, 0,
	401, 402, 403, 405, 0, 406, 0, 404, 407, 408,
	409, 457, 458, 459, 193, 411, 410, 460, 0, 0,
	0, 0, 412, 413, 461, 414, 415, 416, 0, 0,
	0, 196, 197, 198, 199, 0, 200, 0, 0, 0,
	0, 417, 0, 0, 0, 0, 201, 202, 203, 418,
	419, 204, 420, 205, 206, 421, 0, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 214, 422, 423, 424,
	0, 215, 425, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 222, 223, 224, 221, 0, 225, 0, 226,
	227, 0, 0, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 230, 231, 232, 233, 234, 235, 426, 427,
	0, 236, 0, 237, 0, 238, 0, 0, 239, 240,
	241, 0, 242, 0, 243, 244, 0, 428, 245, 246,
	248, 251, 247, 252, 253, 429, 430, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 256, 431, 257, 258,
	0, 259, 0, 260, 0, 0, 0, 261, 0, 262,
	432, 0, 433, 263, 0, 264, 265, 266, 267, 268,
	269, 434, 435, 436, 0, 0, 440, 271, 0, 0,
	0, 0, 270, 272, 279, 0, 0, 273, 437, 275,
	274, 276, 277, 278, 438, 0, 439, 0, 280, 0,
	0, 281, 282, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 290, 289, 0, 291, 441, 0, 292,
	293, 0, 0, 294, 295, 0, 0, 296, 0, 297,
	0, 0, 298, 299, 301, 302, 300, 0, 303, 304,
	306, 305, 0, 0, 0, 0, 442, 443, 307, 308,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	444, 0, 314, 0, 445, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 446, 323, 447, 324, 0, 325,
	326, 327, 328, 329, 330, 448, 877, 332, 0, 333,
	334, 335, 336, 337, 0, 339, 340, 338, 341, 342,
	343, 344, 0, 345, 0, 346, 347, 348, 349, 449,
	350, 0, 354, 355, 356, 357, 358, 359, 360, 0,
	366, 367, 361, 363, 364, 365, 362, 368, 369, 0,
	370, 351, 352, 371, 0, 372, 450, 373, 374, 0,
	384, 375, 376, 377, 353, 378, 382, 383, 379, 380,
	381, 451, 0, 385, 386, 0, 387, 388, 389, 390,
	391, 249, 392, 250, 393, 0, 452, 453, 454, 394,
	0, 0, 395, 396, 455, 456, 0, 397, 398, 0,
	399, 400, 0, 0, 401, 402, 403, 405, 0, 406,
	0, 404, 407, 408, 409, 457, 458, 459, 193, 411,
	410, 460, 0, 0, 0, 0, 412, 413, 461, 414,
	415, 416, 0, 0, 0, 196, 197, 198, 199, 0,
	200, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	201, 202, 203, 418, 419, 204, 420, 205, 206, 421,
	0, 207, 208, 209, 210, 211, 212, 213, 0, 0,
	214, 422, 423, 424, 0, 215, 425, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 222, 223, 224, 221,
	0, 225, 0, 226, 227, 0, 0, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 230, 231, 232, 233,
	234, 235, 426, 427, 0, 236, 0, 237, 0, 238,
	0, 0, 239, 240, 241, 0, 242, 0, 243, 244,
	0, 428, 245, 246, 248, 251, 247, 252, 253, 429,
	430, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	256, 431, 257, 258, 0, 259, 0, 260, 0, 0,
	0, 261, 0, 262, 432, 0, 433, 0, 0, 264,
	265, 266, 267, 268, 269, 434, 435, 436, 0, 0,
	440, 271, 0, 0, 0, 0, 270, 272, 279, 0,
	0, 273, 437, 275, 274, 276, 277, 278, 438, 0,
	439, 0, 280, 0, 0, 281, 282, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 290, 289, 0,
	291, 441, 0, 292, 293, 0, 0, 294, 295, 0,
	0, 296, 0, 297, 0, 0, 298, 299, 301, 302,
	300, 0, 303, 304, 306, 305, 0, 0, 0, 0,
	442, 443, 307, 308, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 444, 0, 314, 0, 445, 315,
	316, 317, 0, 319, 320, 321, 0, 322, 446, 323,
	447, 324, 0, 325, 326, 327, 0, 329, 330, 448,
	331, 332, 0, 333, 334, 335, 336, 337, 0, 339,
	340, 338, 341, 342, 343, 344, 0, 345, 0, 346,
	347, 348, 349, 449, 0, 0, 354, 355, 356, 357,
	358, 359, 360, 0, 366, 367, 361, 363, 364, 365,
	362, 368, 369, 0, 370, 351, 352, 371, 0, 372,
	450, 373, 374, 0, 384, 375, 376, 377, 353, 378,
	382, 383, 379, 380, 381, 451, 0, 385, 386, 0,
	387, 388, 389, 390, 391, 249, 392, 250, 393, 0,
	452, 453, 454, 394, 0, 0, 395, 396, 455, 456,
	0, 397, 398, 0, 399, 400, 0, 0, 401, 402,
	403, 405, 0, 406, 0, 404, 407, 408, 409, 457,
	458, 459, 0, 411, 410, 460, 0, 0, 0, 0,
	412, 413, 461, 414, 415, 416, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 1276, 1277,
	0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	1278, 0, 0, 0, 0, 1284, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 1301, 1302, 1303,
	1304, 0, 0, 0, 0, 0, 1314, 1284, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 1305,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 1315, 0, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0,
	2238, 0, 0, 0, 2239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1276, 1277, 0,
	1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 1325, 0, 0, 0, 1315,
	0, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289,
	1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 1278,
	0, 0, 1830, 0, 0, 0, 1831, 1298, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 0, 0, 1276,
	1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1301, 1302, 1303, 1304,
	0, 1278, 0, 0, 0, 0, 1284, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	0, 0, 0, 1293, 1294, 0, 0, 0, 1301, 1302,
	1303, 1304, 0, 0, 0, 0, 0, 1314, 1284, 0,
	0, 0, 0, 0, 1299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	1305, 0, 0, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 1317, 0, 0, 0, 1279, 0, 1315, 1325,
	0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287,
	1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0,
	0, 0, 0, 1278, 0, 2759, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0,
	1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0,
	1301, 1302, 1303, 1304, 0, 1278, 0, 2515, 0, 0,
	1284, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 1326, 0, 0, 1306, 1307,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 0, 0, 0, 0, 1293, 1294, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 0, 0, 0,
	0, 1314, 1284, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 1305, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 1317, 0, 0, 0,
	1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292,
	1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 0, 0, 0, 0, 0, 1278, 0, 2241,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 1276, 1277, 0,
	1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 1301, 1302, 1303, 1304, 0, 1278,
	0, 2240, 0, 0, 1284, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304,
	0, 0, 0, 0, 0, 1314, 1284, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	0, 0, 0, 1293, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1314, 1305, 0,
	0, 0, 0, 0, 1299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 0, 1276,
	1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	1317, 0, 0, 0, 1279, 0, 1315, 1325, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0, 0,
	0, 1278, 0, 2237, 0, 0, 0, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 1279, 0, 1315, 1325,
	0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287,
	1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 1301, 1302,
	1303, 1304, 0, 1278, 0, 2236, 0, 0, 1284, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 0, 0,
	1301, 1302, 1303, 1304, 0, 0, 0, 0, 0, 1314,
	1284, 0, 0, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 1316, 1326, 0, 0, 1306, 1307,
	1308, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 0, 0, 0, 0, 1293, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 1305, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 1317, 0, 0, 0, 1279, 0,
	1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0,
	1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0,
	0, 0, 0, 0, 0, 1278, 0, 2235, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292,
	1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 1831,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 1315, 0, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 3045, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1325, 0, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0, 3041,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 1315, 0, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 2980, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1325, 0, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0, 2979,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 1315, 0, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 2936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1325, 0, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0, 2891,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 1315, 0, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 2814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1325, 0, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0, 2764,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 1315, 0, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 2763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1325, 0, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0, 2762,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 1315, 0, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 2728, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1325, 0, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0, 2548,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 3123, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 1276, 1277, 0,
	1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 1317, 0,
	0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 2195, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 0, 0, 1276,
	1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 2166, 0, 1279, 0, 1315, 1325, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 0, 1301, 1302, 1303, 1304,
	0, 1278, 0, 0, 0, 0, 1284, 0, 2282, 1298,
	0, 2281, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0, 0,
	0, 0, 2167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	0, 0, 0, 1293, 1294, 0, 0, 0, 1301, 1302,
	1303, 1304, 0, 0, 0, 0, 0, 1314, 1284, 0,
	0, 0, 0, 0, 1299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	1305, 0, 0, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1918, 0, 0, 0, 0, 1300,
	0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 1317, 1917, 0, 0, 1279, 0, 1315, 1325,
	0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287,
	1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 1279, 0,
	1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0,
	1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0,
	1301, 1302, 1303, 1304, 0, 1278, 0, 0, 0, 0,
	1284, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 1326, 0, 0, 1306, 1307,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 0, 0, 0, 0, 1293, 1294, 0,
	0, 0, 1301, 1302, 1303, 1304, 0, 0, 0, 0,
	0, 1314, 1284, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 1305, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	723, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 1317, 0, 0, 0,
	1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292,
	1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 1276, 1277, 0,
	1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 1301, 1302, 1303, 1304, 0, 1278,
	0, 0, 0, 0, 1284, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304,
	0, 0, 0, 0, 0, 1314, 1284, 0, 0, 0,
	0, 2288, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	0, 0, 0, 1293, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1314, 1305, 0,
	0, 0, 0, 0, 1299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2538,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 0, 1276,
	1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	1317, 2283, 0, 0, 1279, 0, 1315, 1325, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 1279, 0, 1315, 1325,
	0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287,
	1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 1301, 1302,
	1303, 1304, 0, 1278, 0, 0, 0, 0, 1284, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 0, 0,
	1301, 1302, 1303, 1304, 0, 0, 0, 0, 0, 1314,
	1284, 0, 0, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 1316, 1326, 0, 0, 1306, 1307,
	1308, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 0, 0, 0, 0, 1293, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 1305, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 1317, 2234, 0, 0, 1279, 0,
	1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0,
	1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292,
	1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0,
	0, 0, 1284, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1326, 0, 0,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 1293,
	1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	0, 0, 0, 1314, 1284, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 1313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 1293, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 1305, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 1276, 1277, 0,
	1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 1317, 0,
	0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297,
	1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 0, 0, 1276,
	1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 0, 1315, 1325, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 0, 1301, 1302, 1303, 1304,
	0, 1278, 0, 0, 0, 0, 1284, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	0, 0, 0, 1293, 1294, 0, 0, 0, 1301, 1302,
	1303, 1304, 0, 0, 0, 0, 0, 1314, 1284, 0,
	0, 0, 0, 0, 1299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	1305, 0, 0, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 1476, 1483, 1466, 1504, 1503, 0, 1300,
	0, 1468, 1467, 0, 0, 0, 0, 0, 0, 1514,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 1315, 0,
	0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287,
	1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 1505, 0,
	1501, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1498,
	1496, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 0, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0,
	1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 1478,
	0, 0, 651, 0, 682, 0, 0, 0, 0, 0,
	1487, 1481, 1489, 1491, 1492, 1493, 1488, 0, 1486, 0,
	0, 0, 0, 0, 0, 658, 0, 1510, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 657, 0, 0, 0, 0, 659, 0, 0, 1502,
	687, 0, 0, 1479, 1480, 0, 665, 666, 0, 0,
	0, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 1463, 1461, 1462, 1465, 1464, 0, 0, 0, 0,
	681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 1472, 1474, 1475, 0, 661,
	0, 0, 0, 0, 0, 0, 655, 0, 1490, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 662, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 0, 1506, 1507,
	1508, 1509, 0, 669, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 668, 0, 0, 0, 1484, 1512,
	0, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 678, 0, 0, 0,
	0, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 653, 671, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 672, 0, 0, 0,
	688, 689, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 677,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679,
}
var sqlPact = [...]int{

	6292, -1000, -39, -1000, -1000, -1000, -1000, -1000, 172, 168,
	150, 148, 138, 133, 129, -1000, 128, -1000, -1000, -1000,
	115, 51622, 1500, 39188, 1618, 1970, 36074, 51238, 35684, 50848,
	-1000, -1000, 1107, 50458, 113, -1000, 50068, 112, 111, 110,
	-1000, -1000, 109, -1000, -1000, 108, -1000, -1000, 106, 100,
	99, -1000, 98, 97, -1000, -1000, -1000, 96, 94, 93,
	49678, 1254, 1230, 1226, 1203, 1193, 762, -1000, 87, 1258,
	33374, 84, 82, 81, 2090, 78, 77, -1000, 75, 3382,
	1123, -1000, 74, 68, 1530, 3671, 38798, 1929, 65, 64,
	32984, 1922, -1000, -1000, 63, 62, 60, 58, 46, 45,
	44, 43, 42, -1000, 40, 37, 36, 34, 33, 32,
	31, 30, 29, 24, 23, 22, 21, 16, 15, 14,
	-1000, 62230, 1351, 13, 11, 8, 7, 5, 0, -1000,
	-1000, -2, -3, -5, -14, -1000, -15, -19, 83, -23,
	-29, -30, -32, -33, 2825, -1000, 1148, 1182, 14726, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54310,
	51622, -34, -73, -36, -1000, 2241, 699, 24714, 6292, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 390, -1000,
	-1000, -1000, 213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1276, -1000, 49288, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 51622, -1000, 1498, -12, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 580, -1000, -1000, 1497, 201, 1388,
	-1000, -1000, -1000, 1400, -1000, -1000, 51622, -1000, -1000, 2414,
	1401, 575, 48904, -1000, 1787, -1000, 721, 15139, -1000, 949,
	-1000, 15139, 212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 574, -1000, 1468, -1000,
	-1000, 1468, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 939,
	53926, -1000, -1000, -1000, -1000, -1000, 38408, 10995, 38018, 37628,
	31424, 48514, 10595, 48124, 938, -1000, -1000, -1000, -1000, -1000,
	-41, 34526, 51622, -1000, 211, -1000, -1000, -1000, -1000, -1000,
	-1000, 21488, 710, 21061, 255, 20634, 249, -1000, -1000, -1000,
	-1000, 47734, 47344, 1969, 46954, 31024, 30624, 46564, 51622, 51622,
	1772, 46174, -1000, 2069, 1949, 1944, 37238, -1000, -1000, -1000,
	45784, 45394, 45004, 44614, 44224, 30224, 29824, -1000, -1000, 26271,
	571, 43834, 27074, 51622, -1000, -1000, 21901, 91, -1000, -1000,
	-1000, 1935, -1000, 21901, 91, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1828, 1200, 2368, 29424, 1520, 1057, 2065,
	2413, 1647, 2063, 2053, 2050, 2045, 2044, 2411, 1222, 2408,
	1147, 2407, 2033, 1988, 2377, 1437, 36848, 2404, 2403, 2178,
	1984, 1933, -1000, -1000, -1000, -1000, 1080, -1000, -1000, -1000,
	40728, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1148, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1503, -1000, 1378, -1000, -1000, 1716,
	2192, 2192, 2192, 2229, 370, 369, -1000, 83, -1000, -1000,
	61444, -1000, -1000, 21901, 21901, 21901, 21901, 21901, 1337, -1000,
	-1000, -1000, 610, -1000, 570, 515, -1000, -1000, -1000, -1000,
	-1000, -1000, 568, 2378, -1000, 796, -1000, -1000, -1000, -1000,
	2321, -1000, 13046, -1000, -1000, -1000, 363, 21901, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 210, 688, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	487, 1246, 486, 486, 486, -1000, -1000, 772, -1000, -1000,
	-1000, 709, -1000, 696, -1000, -1000, -1000, 1968, 566, 564,
	-1000, 561, 560, 555, -1000, -1000, -1000, 553, 552, 551,
	549, 547, 540, 537, 535, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 771, -1000, -1000, -1000, 531, 530, 529,
	527, 526, 525, 524, 523, 521, -43, 51622, -1000, 390,
	-43, -1000, -1000, 519, -1000, 15965, 15965, 15965, -1000, -1000,
	1492, 21901, -1000, 2296, -1000, 4921, -234, 662, 25881, -1000,
	23934, 662, 611, 29020, -1000, 1931, -1000, -1000, 517, 202,
	-1000, -1000, -1000, -1000, -1000, 1930, 51622, 11393, 51622, 51622,
	-1000, -1000, 31822, 34142, 51622, 36458, 2284, 62062, 34142, 51622,
	1964, -1000, 43444, 43054, -1000, -1000, 51622, -1000, 21901, -1000,
	2277, 1676, -53, -1000, -1000, -1000, -1000, -1000, 1679, 1692,
	867, 1144, -1000, 15139, 2142, -1000, -1000, -1000, 200, 11393,
	-1000, 21901, -1000, -53, -1000, 53926, -1000, -1000, 2263, 2094,
	1042, -1000, 1537, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1195, 2084, -1000, 1606, 2083, 1188, -1000, -1000, 740,
	2082, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1539, -1000, -1000, 2164, -1000, -1000, 1512, 2080, -127, 31822,
	34526, -47, -1000, -1000, -59, -1000, 10195, 61444, -1000, -1000,
	-1000, 61444, 683, -1000, -1000, 2079, -1000, 61444, 563, -1000,
	-1000, 2075, -1000, -1000, 516, 1636, 1491, -1000, -1000, 42664,
	1606, 1634, -1000, -1000, 732, 1631, -1000, -1000, 1623, -1000,
	390, -1000, -1000, 755, -1000, 2400, 42280, 1799, 732, 1616,
	-1000, 40728, -1000, 51622, -1000, 51622, -1000, 1087, -1000, 53542,
	141, 2071, -1000, -1000, 141, 2070, -1000, 141, 2068, -1000,
	140, 2064, -1000, -1000, 1431, 2062, -1000, -74, 2060, -1000,
	-1000, -74, 2054, -1000, -72, -1000, -1000, -1000, 699, 32594,
	41890, 31822, 731, 554, 61444, -1000, 31822, 61444, -1000, -1000,
	-1000, 1019, 1720, -1000, -1000, -1000, -1000, 31822, 31822, -1000,
	41500, -1000, -1000, -1000, 1404, 2183, 51622, -1000, -1000, 1962,
	-1000, 33758, 51622, -1000, 51622, -1000, 51622, -1000, 51622, -1000,
	51622, -1000, -1000, -1000, -1000, -1000, 2092, 1267, 1220, -1000,
	51622, -1000, 51622, -1000, -1000, -1000, 1674, -1000, -1000, -1000,
	-1000, 51622, -1000, -1000, -1000, -1000, -1000, -1000, 1959, -1000,
	1163, -1000, 1016, -1000, -1000, 147, -1000, -1000, 1716, -1000,
	51622, -1000, -1000, 1471, 1756, 20207, 1726, 21901, 83, -1000,
	-1000, 83, 83, 14299, -1000, -1000, 62062, 62062, 11393, 976,
	21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901,
	21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901,
	21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901,
	21901, 21901, 21901, 21901, 21901, 1380, 21901, 937, 21901, 21901,
	21901, 21901, 1622, -1000, -1000, 1338, 421, 1368, -1000, 2355,
	2355, 2355, 61808, 61808, 375, 610, -1000, 21901, -1000, 91,
	21901, 11793, -1000, 2366, 1018, -1000, -1000, 369, 55157, 1581,
	-1000, 367, 12220, -1000, -1000, -1000, 13046, 515, 19780, 763,
	61444, 9797, 1977, 1834, -1000, 2364, -1000, -1000, 2321, -1000,
	-1000, -1000, 975, 973, 971, 968, 512, 658, 649, 631,
	629, 572, 21901, 21901, 21901, 21901, 21901, 21901, 21901, 21901,
	-1000, 19367, 18940, 18513, 18086, 17659, 23140, 17232, 21901, 13459,
	51622, -43, 2276, 21901, 195, -1000, 60280, -1000, 195, 195,
	511, -80, 61444, 1747, 1745, 25103, 1693, 1348, 1348, 1348,
	-1000, 498, 593, 662, 7392, 39572, 1353, 662, 662, 49,
	222, 366, 23545, 2296, 39572, -1000, -1000, 51622, 497, 11793,
	11393, 1033, -86, 197, 1753, 1736, 49, -1000, 731, 936,
	-77, -1000, 4359, -87, -1000, 983, -1000, -1000, -1000, -1000,
	276, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 768, 492, 489, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 487, 1246,
	486, 486, 486, -1000, -1000, -1000, 709, -1000, 696, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1928, -59, 36458, 648,
	-1000, 648, -1000, 674, -88, 828, -53, -1000, 1468, -1000,
	1464, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2372, -1000, 2360, -1000, -1000, 2363,
	-46, -1000, -1000, 11393, -1000, -93, -1000, -54, 1216, -1000,
	35294, 2170, 2163, 2157, 1084, -1000, 1036, 2228, 40728, 2249,
	635, -1000, 1924, -1000, -1000, 718, 1012, 935, 40728, 1606,
	-1000, 62062, -1000, 1790, 2227, 1060, 1088, 1060, 1060, 1090,
	-1000, 40728, 934, 1299, 31822, -1000, 933, -1000, -55, 2248,
	567, -1000, 1921, 915, -1000, -1000, 51622, 11393, 648, -47,
	34526, 51622, 196, -1000, 21901, 91, 21901, 91, 34910, 2275,
	2022, 51622, 1765, -50, 51622, -1000, -1000, 1606, 2018, -1000,
	1287, -1000, 2017, 2015, 2274, 453, 2398, -1000, 1487, 1612,
	-1000, -1000, -1000, 53158, 844, 2013, 754, 543, 2273, 543,
	28242, -1000, 51622, -1000, 51622, -1000, -1000, 51622, -1000, 51622,
	-1000, 51622, -1000, 51622, 51622, -1000, 51622, 31822, 31822, 31822,
	5260, 32594, -94, 365, -1000, 41116, 51622, 791, 34910, -205,
	51622, 1958, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 51622, -1000, 51622, -1000, -1000, -1000, -1000, -1000, -1000,
	1093, -1000, 1957, -1000, 1940, -1000, 194, -1000, -1000, -1000,
	1630, 51622, 51622, 51622, -1000, 40728, -1000, -1000, -1000, -1000,
	-1000, 61444, -1000, 413, -1000, -1000, 61444, 1128, 1774, -1000,
	1774, -48, -1000, 59988, 1718, 51622, -1000, -1000, -1000, -1000,
	-1000, 716, 1478, 1478, 920, 920, 920, 920, 2280, 832,
	360, 4780, 4770, 4770, 4770, 4770, 4770, 4770, 4770, 4770,
	403, 606, 606, 403, 403, 403, 403, 403, 606, 606,
	606, 4770, 4770, 4770, 61808, 61736, 6062, 21901, 21901, 914,
	1332, 421, 5565, 21901, 5870, 5870, 5870, 5870, -1000, 1731,
	-1000, -1000, -1000, -1000, 1917, 485, 23140, 23140, -1000, -1000,
	-1000, -1000, 12633, 21901, -1000, -1000, -1000, -1000, 16805, -1000,
	59552, -247, 364, -155, 48, -1000, 21901, 21901, 21901, 358,
	-1000, 357, -1000, 913, -1000, 912, 905, 898, -1000, 481,
	193, 21901, 51622, -1000, 56680, 591, -112, -1000, 1045, -1000,
	21901, 190, -1000, 1346, 479, 477, 356, -95, 713, 708,
	685, 641, 21901, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 61372, 56608, 56316, 56244, 55085, 55952, 55880,
	-96, 347, -1000, 1905, -155, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 346, -1000, -105, -1000, -106, -1000, 345, -1000,
	61080, -155, 344, 4171, -1000, 23140, 23140, 23140, -1000, 334,
	-1000, 59916, -1000, 61008, 16392, 16392, 16392, 327, 60716, 21901,
	-155, -1000, 472, -113, 754, 15965, 24324, 11393, -1000, 754,
	754, 21901, -1000, 21901, 25103, 25103, 1609, 1738, 25103, -1000,
	-1000, -1000, -1000, 39572, 502, 662, 39572, -1000, 2321, 1700,
	-1000, -1000, -1000, 51622, 390, -1000, 39572, 39572, 11393, 662,
	-1000, 324, 27463, 48, 185, -1000, -1000, 11393, 1786, 1786,
	1878, 51622, 2297, -1000, -1000, 62062, -1000, 596, 857, -1000,
	2345, 470, -1000, 2321, 2321, 51622, 164, -1000, -1000, 1534,
	737, 15139, -1000, 1468, -1000, -1000, 1117, -1000, 1212, -1000,
	-1000, -1000, -1000, 15139, -1000, -1000, 1677, 51622, 51622, 51622,
	-1000, -1000, 1599, 52774, 1597, 62062, 51622, -1000, -1000, 468,
	467, 1714, 1713, 51622, 51622, 52390, 52006, 51622, 1243, 21901,
	1533, 1244, 91, -1000, 91, 466, 948, 51622, 51622, 1157,
	-1000, -1000, -1000, -1000, -1000, 51622, -1000, -1000, 2336, -1000,
	1060, -1000, -1000, -1000, 1060, 1606, 1155, 51622, 31822, 734,
	51622, 1304, 91, -1000, 91, 460, 11393, 1257, -1000, 1817,
	-1000, -1000, 9399, 61444, -1000, 61444, -1000, 322, -49, -1000,
	-1000, -1000, -1000, -1000, -1000, 1792, 51622, 456, 51622, 91,
	51622, 105, 731, 31822, 51622, -50, 51622, 31822, 31822, 31822,
	91, 2390, 457, 2389, -1000, 51622, 2010, 1477, 1588, 2095,
	638, 51622, 1356, 21901, 1362, -1000, 27853, 780, 51622, 1130,
	90, -1000, -1000, -1000, -17, 51622, -1000, -1000, 141, 141,
	141, -1000, 140, 1431, -1000, -74, -74, -1000, -1000, 5260,
	731, -51, 455, -1000, 671, 666, 26675, 31822, -115, -1000,
	731, -1000, 1006, -59, -59, -1000, 1092, 1091, 51622, 11393,
	51622, 51622, 11393, 51622, -1000, -1000, -1000, -1000, 1128, -1000,
	21901, -1000, -1000, -1000, 14299, -1000, -1000, -1000, 51622, -177,
	21901, 21901, 5376, 5204, 21901, 23140, 23140, -1000, 21901, 970,
	-1000, -1000, -1000, -1000, -1000, 1868, 451, 21901, 62062, 3614,
	3202, -1000, 311, 55588, 403, -1000, 21901, -1000, 310, 15552,
	-1000, 60352, -28, -28, -1000, 2370, 1657, 1374, 1189, 1104,
	2333, 9001, -155, -121, -1000, -1000, 595, 2073, -1000, 21901,
	60644, 8603, -1000, 28631, 758, 1356, -1000, -1000, 2321, -1000,
	-1000, -1000, -1000, 59194, 62062, 62062, 21901, 21901, -1000, 21901,
	21901, 21901, -1000, -1000, 21901, -1000, -1000, -1000, -1000, 1864,
	21901, -1000, 62062, 62062, 23140, 23140, 23140, 23140, 23140, 23140,
	23140, 23140, 23140, 23140, 23140, 23140, 23140, 23140, 23140, 23140,
	23140, 23140, 23140, 1661, 23140, 2346, 2346, 2346, -1000, 1932,
	1864, 21901, 21901, 62062, 299, 298, 297, -1000, 21901, -155,
	4359, -1000, 1831, -1000, -122, -1000, 2296, -1000, -1000, 1831,
	1831, -123, 61444, -1000, 1609, -1000, 450, 21901, 25103, -1000,
	590, -1000, -124, -1000, 39572, -1000, 586, -241, -1000, 660,
	-1000, 390, -1000, -1000, -1000, 182, 39572, -1000, -130, -1000,
	2272, 296, 11393, -1000, -1000, -1000, -1000, -1000, 91, -59,
	1381, -1000, 2326, -1000, 584, 295, 2321, 292, 290, -59,
	51622, 1021, -1000, 1386, -1000, -53, -1000, -1000, -1000, -1000,
	-1000, -1000, 897, 874, -1000, 2009, -1000, 1580, -1000, 784,
	-1000, 1279, 21901, 25492, 449, 448, 1268, -1000, 2008, 1431,
	2007, 1431, -1000, -1000, 725, -1000, 61444, 447, 446, -1000,
	-54, 1135, -1000, -1000, 21901, 21901, 40344, -1000, 2164, -1000,
	864, -1000, -1000, -1000, 1606, 863, -1000, -1000, 1266, -1000,
	-1000, -1000, -1000, 21901, -1000, -55, 850, 731, 1860, -1000,
	1783, 34910, 51622, 445, 51622, 443, -1000, -1000, 442, 51622,
	-1000, -1000, -1000, 1606, -1000, 732, -1000, -1000, -1000, 2387,
	-1000, 789, 11393, 51622, 2003, 1696, 638, 32210, -1000, 732,
	1756, -1000, 61444, -1000, 1130, 13872, 2174, -131, -1000, 165,
	-1000, -1000, -1000, 754, 28242, 25103, 21901, 2385, -132, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 39960, 39960, 31822, 31822,
	31822, 731, 51622, 51622, -1000, 51622, -1000, -1000, -1000, -1000,
	-1000, 1315, 1525, -1000, 1390, 59122, -1000, 2148, 11393, 2292,
	5870, 21901, 21901, 314, 871, 391, 5870, 21901, 21901, 62062,
	348, -137, 21901, 21901, -1000, 21901, 582, 61444, 2358, 21901,
	289, 288, 286, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 281, -1000, -1000, -1000, -1000, -1000, 61444, 21901, 142,
	-1000, -1000, -1000, 54694, -1000, 21901, 280, 277, -1000, 263,
	259, 55516, 6103, 58764, 58692, 58334, 61444, 1932, 61444, -1000,
	-1000, 644, 644, 1025, 1025, 1025, 1025, 2346, 1119, 278,
	903, 1037, 1037, 1037, 441, 887, 887, 1037, 1037, 1037,
	1858, 1656, 440, 4844, -1000, -1000, 61444, 61444, 258, -1000,
	-1000, -1000, -155, 250, 1826, 2226, -1000, 25103, 1826, 1826,
	-1000, -1000, 51622, 61444, -1000, -234, -1000, 2321, -1000, -1000,
	1700, -1000, 7803, -1000, 11393, -1000, -1000, 27463, -1000, 439,
	-1000, -27, -1000, -1000, 573, -1000, -1000, 242, -1000, -1000,
	-59, 954, 1611, 51622, 51622, 51622, 2002, -1000, 1316, -1000,
	58262, -138, -1000, 2202, 2202, 21901, 49, 25492, 51622, -1000,
	1291, 1721, 822, 51622, -1000, 51622, -1000, -1000, 51622, 51622,
	51622, 51622, 51622, -144, 61444, -60, -1000, 650, -1000, 51622,
	51622, 31822, -145, 11393, -1000, 31822, 1304, 1809, -1000, 438,
	25492, 427, 51622, 34910, 2262, -1000, -1000, -1000, -1000, 426,
	1946, 1447, 425, 11393, 1703, 638, 32210, -1000, 844, 1130,
	-1000, -1000, -61, -1000, 422, 91, 51622, 2384, 1356, -1000,
	-68, 61444, -1000, 639, -1000, -146, -1000, -1000, 238, -1000,
	2132, 2126, -1000, -1000, -1000, 11393, 1005, -1000, -1000, -1000,
	2148, 5870, 5870, 21901, 21901, 21901, 5870, 348, -154, -1000,
	5870, 5870, -155, -1000, -1000, 60352, -1000, -1000, -1000, -1000,
	61444, 8205, 1317, -1000, 57904, -1000, -1000, -1000, -1000, 21901,
	21901, -1000, -1000, -1000, -1000, -1000, 23140, 1856, 424, 62062,
	-1000, -1000, 751, 21901, 21901, 2296, 751, 751, -156, 662,
	-1000, -1000, -1000, 2321, -27, -1000, 2382, 11393, -1000, -1000,
	21901, -71, -1000, 646, 645, -1000, -1000, -1000, -1000, 51622,
	-1000, 51622, -1000, 11393, 51622, 1851, 1565, -1000, -1000, 1712,
	423, 23140, 51622, 664, -1000, 1283, 25492, 2148, 11393, 2148,
	57832, -157, -159, 1560, -1000, -1000, 1558, 21901, -1000, 62062,
	1431, 1431, -162, -164, -1000, 849, 848, 843, 51622, 15139,
	-1000, -1000, -1000, 836, -1000, -74, -1000, -1000, 1331, 25492,
	-165, 25492, -167, 229, 91, 25492, -1000, -1000, 51622, 25492,
	1443, -1000, 638, 32210, -1000, 2095, -1000, 2108, 51622, 2155,
	-1000, -1000, -1000, 1756, 421, -1000, 731, 418, 416, -1000,
	51622, -1000, 5870, 5870, 5870, -1000, 228, -1000, -1000, 1356,
	2219, -1000, 57474, 57402, 5061, 23140, 62062, -170, -1000, 51622,
	61444, -155, -1000, -1000, -1000, 39572, 404, -1000, 61444, 1611,
	-1000, 51622, -1000, 51622, -1000, 1541, -1000, -1000, -1000, 51622,
	1579, -1000, -1000, 21901, 4844, 415, 21901, -1000, 1783, 414,
	-1000, -1000, -1000, -1000, -1000, -1000, 2202, -1000, 1170, -1000,
	-1000, 61444, 2195, -1000, -1000, 411, 410, 51622, 51622, 409,
	633, -1000, 408, 51622, -173, 1283, -180, -1000, 1783, -1000,
	-181, 789, -182, 51622, 32210, -1000, 1696, 950, -183, 51622,
	1130, -1000, -1000, 31822, 31822, -1000, -1000, 1309, 21901, -1000,
	-1000, 5061, -188, -1000, -82, -1000, 2254, -1000, -1000, -1000,
	-189, -195, -1000, -1000, 2001, 57044, 1651, 51622, 56972, 1304,
	51622, 2148, 51622, 788, 11393, 1315, 1315, -1000, -1000, 21901,
	15139, 21901, 406, -1000, 1783, 1283, 1304, 1283, 402, 1283,
	401, -1000, 1703, 1050, -1000, 754, -1000, -1000, -196, -197,
	223, 22727, 22727, 22727, -155, -1000, 51622, 400, -1000, -1000,
	1989, -1000, 1407, 1253, 216, 815, -1000, -202, -1000, 390,
	-1000, 21901, -1000, -203, -1000, 779, -204, -1000, 778, -212,
	-1000, -214, 51622, 1304, 1783, -1000, 1783, 25492, 1783, 25492,
	-1000, 28242, -1000, 731, 731, -1000, -1000, -1000, 6901, 1370,
	1132, 59624, -1000, -1000, -1000, -1000, 51622, -1000, 1423, 1418,
	1086, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1651, 61444,
	-1000, 1315, 1808, -1000, 1315, 1849, -1000, -1000, -215, -1000,
	1304, 1304, -220, 1304, -221, -198, -1000, -1000, 2293, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2113, -1000, 799, 1584,
	1584, 1407, -1000, 389, -1000, 388, 1425, -1000, -1000, 1283,
	-1000, 1283, -1000, 22314, -1000, 2304, -1000, -1000, 1681, -1000,
	-1000, 21901, 21901, -1000, -1000, -1000, 1783, 1783, -1000, -1000,
	-1000, -1000, -222, -223, 1304, 1304, 1304, 834, -1000, -1000,
	-1000, 378, 21901, -228, 1304, -1000,
}
var sqlPgo = [...]int{

	0, 2908, 2902, 1984, 2901, 2898, 2893, 2890, 2885, 2884,
	2883, 2882, 2880, 2879, 2878, 2877, 2876, 2873, 2872, 2868,
	2867, 2866, 2865, 2863, 2862, 2861, 2860, 2858, 2856, 2847,
	2846, 2843, 2842, 2841, 2834, 2833, 2826, 2824, 2823, 2820,
	2817, 2816, 2812, 2809, 2808, 43, 2806, 2803, 2799, 2798,
	2797, 2796, 2795, 2792, 2790, 2789, 2787, 2785, 2784, 2780,
	2776, 2772, 2771, 2770, 2765, 2762, 2759, 2758, 2757, 2755,
	2747, 2746, 2741, 2740, 2739, 90, 112, 2737, 2736, 2735,
	2734, 2731, 2729, 2725, 2724, 2723, 2722, 2721, 2719, 2717,
	2715, 168, 2713, 2712, 2711, 2710, 2709, 2705, 2704, 2703,
	2701, 2700, 165, 2699, 2698, 2696, 2693, 2692, 2687, 2686,
	2685, 2682, 2673, 2667, 2666, 2664, 2658, 2657, 2655, 2652,
	2650, 2648, 2647, 2645, 2644, 2643, 2642, 2641, 2639, 182,
	123, 2638, 2633, 2632, 2630, 2629, 2628, 78, 74, 15,
	2627, 70, 130, 174, 4537, 161, 2626, 2625, 2622, 2621,
	2620, 18, 116, 118, 115, 114, 216, 2619, 2618, 57,
	39, 41, 19, 82, 2617, 2614, 2612, 1849, 89, 2611,
	2610, 178, 177, 2609, 344, 2608, 35, 111, 117, 83,
	54, 56, 2607, 100, 16, 2606, 151, 158, 2605, 105,
	51, 21, 3876, 93, 184, 62, 96, 148, 147, 146,
	145, 119, 277, 2604, 166, 110, 137, 2602, 2601, 2599,
	60, 131, 12, 7, 106, 3, 2597, 9, 2595, 8,
	2594, 2593, 2592, 2591, 26, 113, 45, 42, 2588, 47,
	596, 144, 2587, 155, 2585, 77, 2584, 172, 139, 136,
	73, 159, 2583, 2582, 2581, 2580, 2579, 81, 14, 80,
	2578, 2577, 94, 162, 2576, 33, 120, 75, 95, 185,
	152, 88, 153, 156, 2575, 2573, 2571, 133, 2570, 149,
	122, 2569, 2567, 32, 50, 160, 48, 2565, 2564, 104,
	2562, 138, 2561, 2559, 2557, 187, 124, 142, 1, 55,
	84, 6, 157, 102, 59, 68, 2556, 2818, 1047, 1474,
	2551, 99, 65, 46, 69, 101, 176, 31, 2550, 2549,
	2086, 2547, 2546, 2542, 2539, 125, 2538, 2536, 2535, 92,
	44, 72, 2534, 107, 40, 108, 181, 63, 150, 140,
	169, 129, 2533, 128, 109, 2532, 135, 167, 66, 2531,
	1638, 2530, 143, 2528, 2527, 2525, 2524, 58, 2522, 2520,
	1400, 2517, 103, 2515, 2514, 127, 164, 67, 49, 2510,
	52, 682, 2505, 134, 23, 2503, 3623, 38, 0, 3681,
	3360, 2502, 141, 85, 2498, 2496, 2494, 2493, 36, 10,
	2, 4, 13, 11, 328, 315, 2492, 2491, 189, 79,
	97, 2489, 180, 154, 2482, 2475, 2474, 53, 2473, 20,
	2469, 17, 2467, 2466, 25, 5, 2464, 2462, 163, 2460,
	2459, 2458, 2456, 2325, 2447, 175, 2445, 86, 2440, 132,
	121, 2435, 2428, 2427, 2426, 2300, 2424, 2421, 64, 76,
	2420, 2418, 126,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 8, 8, 9, 9, 9, 33, 33,
	11, 11, 10, 10, 10, 12, 12, 7, 7, 7,
	7, 7, 7, 7, 7, 14, 14, 24, 24, 15,
	26, 415, 415, 18, 28, 19, 29, 13, 417, 417,
	417, 417, 22, 20, 20, 30, 140, 140, 17, 17,
	25, 25, 153, 153, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 414, 414, 155, 155, 154, 150, 150,
	418, 418, 156, 156, 156, 158, 158, 34, 34, 89,
	89, 89, 141, 82, 82, 82, 82, 82, 82, 82,
	77, 77, 366, 366, 367, 367, 136, 136, 137, 137,
	137, 137, 138, 138, 139, 139, 139, 48, 36, 36,
	36, 36, 36, 36, 36, 37, 37, 37, 37, 38,
	38, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 46, 46, 130, 130, 49, 49, 49, 49, 49,
	49, 49, 49, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 410, 410, 238, 238, 335, 335, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 71, 71, 71, 72, 72, 72, 69, 69, 69,
	67, 67, 67, 66, 66, 66, 70, 70, 70, 68,
	68, 68, 239, 239, 73, 73, 73, 73, 73, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 76, 76,
	76, 337, 337, 74, 74, 308, 308, 78, 78, 268,
	268, 79, 79, 79, 79, 79, 80, 80, 80, 80,
	90, 90, 90, 90, 413, 413, 231, 231, 171, 171,
	171, 171, 85, 85, 85, 85, 86, 86, 86, 87,
	87, 135, 135, 96, 96, 96, 96, 95, 95, 95,
	95, 95, 95, 40, 40, 40, 41, 41, 42, 42,
	43, 43, 44, 44, 45, 45, 45, 45, 45, 98,
	98, 419, 419, 100, 97, 97, 97, 99, 99, 99,
	99, 101, 102, 102, 102, 102, 102, 102, 103, 103,
	360, 360, 246, 246, 358, 358, 359, 359, 208, 208,
	208, 208, 208, 209, 209, 209, 365, 365, 365, 365,
	365, 365, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 120,
	120, 120, 129, 129, 129, 129, 129, 129, 129, 122,
	122, 122, 113, 113, 105, 105, 105, 105, 109, 109,
	109, 109, 109, 106, 106, 110, 110, 112, 112, 114,
	114, 114, 114, 114, 114, 107, 107, 107, 107, 116,
	116, 116, 116, 115, 115, 125, 125, 125, 125, 125,
	125, 322, 322, 121, 121, 121, 121, 124, 124, 124,
	124, 119, 119, 119, 123, 123, 126, 126, 126, 126,
	108, 108, 108, 422, 422, 422, 127, 127, 118, 118,
	128, 128, 128, 128, 128, 128, 128, 117, 117, 117,
	416, 416, 111, 411, 411, 408, 408, 408, 408, 408,
	408, 408, 409, 409, 412, 412, 83, 83, 83, 55,
	55, 56, 56, 210, 210, 211, 211, 290, 290, 290,
	290, 212, 212, 157, 157, 157, 215, 216, 216, 213,
	213, 214, 214, 214, 218, 218, 217, 220, 220, 219,
	289, 376, 376, 377, 377, 377, 377, 377, 377, 377,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	374, 374, 374, 375, 372, 372, 373, 373, 373, 373,
	423, 423, 288, 288, 224, 224, 379, 379, 379, 379,
	380, 380, 380, 380, 380, 383, 382, 381, 381, 381,
	381, 381, 318, 318, 318, 59, 59, 59, 257, 257,
	256, 256, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 132, 132, 57, 57,
	57, 163, 163, 54, 54, 54, 58, 58, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 273,
	273, 273, 272, 272, 229, 229, 324, 324, 324, 175,
	175, 176, 176, 151, 151, 151, 21, 23, 23, 16,
	16, 16, 16, 16, 16, 31, 31, 32, 32, 27,
	27, 420, 420, 421, 421, 84, 84, 88, 88, 88,
	94, 94, 131, 131, 131, 131, 131, 131, 131, 35,
	35, 35, 35, 47, 47, 47, 47, 92, 426, 426,
	426, 93, 93, 425, 425, 170, 170, 170, 170, 172,
	172, 285, 285, 286, 286, 427, 427, 287, 287, 287,
	165, 164, 166, 166, 52, 52, 52, 159, 159, 160,
	160, 161, 161, 162, 162, 428, 428, 81, 81, 81,
	134, 134, 204, 204, 281, 281, 281, 225, 225, 181,
	181, 284, 284, 282, 282, 282, 255, 255, 255, 133,
	133, 234, 234, 248, 248, 249, 249, 332, 332, 250,
	91, 91, 144, 144, 142, 142, 142, 142, 142, 142,
	143, 143, 143, 145, 145, 145, 145, 145, 145, 145,
	148, 148, 148, 148, 149, 149, 149, 147, 147, 390,
	390, 390, 392, 392, 393, 389, 389, 391, 391, 424,
	424, 259, 259, 259, 222, 223, 221, 221, 429, 429,
	227, 227, 226, 228, 228, 323, 323, 323, 253, 253,
	253, 253, 276, 276, 274, 274, 275, 275, 277, 277,
	278, 278, 278, 279, 279, 280, 280, 252, 252, 304,
	304, 146, 146, 146, 233, 233, 233, 235, 235, 295,
	295, 295, 296, 296, 294, 294, 294, 294, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 326, 326, 236,
	236, 327, 283, 283, 406, 406, 406, 407, 407, 321,
	321, 328, 328, 328, 328, 328, 328, 319, 319, 320,
	320, 333, 334, 334, 262, 262, 262, 262, 260, 260,
	261, 261, 329, 329, 329, 329, 254, 254, 330, 330,
	330, 291, 291, 338, 338, 338, 338, 352, 232, 232,
	232, 430, 430, 339, 339, 339, 339, 339, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	342, 342, 342, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 351, 351, 351, 351, 351, 343, 343, 348, 348,
	349, 349, 349, 344, 345, 350, 350, 350, 350, 431,
	431, 354, 354, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 347, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 270, 270, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 299, 299, 299, 299, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 384, 384, 384, 384, 384, 384, 384,
	384, 387, 387, 388, 388, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 394, 394, 395, 395, 397, 397,
	398, 398, 399, 400, 400, 400, 401, 402, 402, 396,
	396, 403, 403, 403, 403, 404, 404, 405, 405, 405,
	405, 405, 310, 310, 311, 311, 317, 317, 317, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 173, 173, 173, 173, 173,
	244, 244, 242, 242, 242, 245, 245, 243, 243, 241,
	241, 240, 240, 307, 307, 305, 305, 309, 309, 263,
	263, 353, 353, 353, 353, 353, 353, 353, 264, 264,
	264, 271, 265, 265, 266, 266, 266, 266, 266, 301,
	302, 267, 267, 267, 303, 303, 312, 316, 316, 315,
	314, 314, 313, 313, 292, 292, 293, 293, 251, 251,
	432, 432, 247, 247, 331, 331, 331, 331, 206, 206,
	237, 237, 205, 205, 199, 199, 200, 200, 200, 200,
	230, 230, 355, 355, 355, 356, 357, 306, 191, 190,
	178, 179, 189, 188, 187, 177, 180, 184, 185, 186,
	182, 183, 195, 194, 193, 192, 336, 201, 201, 202,
	202, 202, 203, 203, 203, 203, 174, 174, 196, 196,
	197, 198, 198, 167, 167, 167, 168, 168, 169, 169,
	364, 364, 362, 362, 362, 363, 363, 363, 363, 361,
	361, 361, 361, 361, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 6, 4, 6, 6,
	6, 1, 1, 5, 5, 6, 6, 4, 4, 4,
	4, 3, 4, 4, 7, 4, 3, 5, 4, 12,
	4, 12, 1, 3, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 6, 4, 9, 7, 12, 12, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 3, 1, 1, 2, 1, 2, 7, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 2, 3, 3, 3, 6, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 6, 3, 4, 5, 5, 3,
	1, 1, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 8,
	11, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 4, 7, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 7, 3, 1, 0,
	1, 2, 2, 1, 2, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 1, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 6, 7,
	6, 5, 3, 4, 13, 16, 13, 16, 4, 2,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -76, -48, -46, -79, -63,
	-77, -80, -74, -90, -94, -40, -84, -96, -131, -75,
	-78, 79, 67, 101, 105, 124, 148, 267, 293, 302,
	-42, -41, 119, 287, -99, -100, 320, -35, -47, -93,
	-92, -4, -34, -36, -49, -62, -64, -73, -82, -81,
	-83, -85, -89, -88, -91, -95, -104, -132, -133, -134,
	118, 38, 332, 68, 113, 297, 21, -5, -11, 26,
	37, -37, -38, -39, 52, -57, -54, -51, -60, 81,
	-391, -65, -68, -70, 110, 123, 158, 260, -86, -87,
	289, 291, -142, -144, -97, -98, -135, -105, -106, -107,
	-108, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, 323, 367, -6, -7, -8, -9, -10, -12, -23,
	-50, -52, -53, -55, -56, -61, -58, -59, -390, -66,
	-67, -69, -71, -72, 288, -145, -143, 424, 377, -14,
	-18, -19, -15, -17, -20, -16, -24, -28, -29, -26,
	-25, -27, -30, -31, -32, -33, -21, -22, -13, 395,
	403, -148, -146, -147, -149, 309, 385, 345, 428, 427,
	427, 427, 427, 427, 427, 427, 427, 427, -192, -196,
	-197, -198, -167, 4, -368, -370, 21, 22, 23, 24,
	26, 36, 37, 38, 41, 43, 44, 47, 48, 49,
	50, 51, 52, 53, 56, 61, 66, 67, 68, 69,
	70, 75, 72, 73, 74, 77, 79, 80, 83, 84,
	92, 93, 94, 95, 96, 97, 101, 103, 105, 108,
	109, 110, 112, 114, 115, 118, 119, 122, 120, 351,
	353, 121, 123, 124, 134, 135, 136, 138, 139, 141,
	143, 147, 149, 153, 155, 156, 157, 158, 159, 160,
	172, 167, 173, 177, 180, 179, 181, 182, 183, 174,
	188, 191, 192, 193, 195, 196, 199, 200, 201, 204,
	203, 206, 209, 210, 213, 214, 217, 219, 222, 223,
	226, 224, 225, 228, 229, 231, 230, 238, 239, 241,
	242, 245, 246, 249, 252, 255, 256, 257, 258, 259,
	260, 261, 263, 265, 267, 269, 270, 271, 272, 273,
	274, 276, 277, 279, 280, 281, 282, 283, 287, 285,
	286, 288, 289, 290, 291, 293, 295, 296, 297, 298,
	300, 321, 322, 334, 302, 303, 304, 305, 306, 307,
	308, 312, 316, 313, 314, 315, 310, 311, 317, 318,
	320, 323, 325, 327, 328, 331, 332, 333, 335, 338,
	339, 340, 336, 337, 330, 343, 344, 346, 347, 348,
	349, 350, 352, 354, 359, 362, 363, 367, 368, 370,
	371, 374, 375, 376, 381, 377, 379, 382, 383, 384,
	390, 389, 396, 397, 399, 400, 401, 31, 39, 40,
	42, 45, 57, 58, 59, 62, 98, 99, 117, 125,
	126, 137, 150, 152, 161, 162, 163, 178, 184, 186,
	166, 207, 236, 237, 250, 254, 264, 266, 275, 299,
	326, 341, 356, 357, 358, 364, 365, 385, 386, 387,
	391, 398, 243, -167, 267, 25, 2, 25, 263, 311,
	347, 349, 2, 187, 2, -413, -231, 2, 25, -171,
	-167, 81, 148, 309, -186, 2, -167, -413, -231, 24,
	2, -167, 2, 306, -172, 2, 302, -167, 427, 214,
	61, 299, 317, -102, 363, -101, 356, 304, -103, -360,
	2, 226, -167, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, -186, 2, -425, 2,
	363, 363, 2, -425, 2, -425, 2, -170, 2, 363,
	360, -426, 363, 398, 427, 2, 345, 258, 389, 310,
	378, 94, 272, 171, -408, 2, 4, -370, -368, -200,
	-199, 345, 94, -198, -167, 417, -197, 427, 427, 427,
	2, 192, 193, 271, 270, 317, 318, 427, 427, 427,
	2, 345, 333, 56, 310, 378, 295, 389, 368, 108,
	-272, 94, 373, 103, 177, 376, 375, 427, 427, 2,
	389, 310, 345, 171, 94, 378, 295, -76, 2, 424,
	28, 320, -141, 345, 2, -167, 192, 193, 2, 427,
	427, -408, 2, 192, 193, 2, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 2, -129, 317, 333, 156, 37, 61, 25, 66,
	95, 149, 171, 172, 200, 76, 77, 270, 214, 193,
	-322, 318, 346, 305, 343, 363, 81, 379, 296, 401,
	-416, 120, 4, 94, 226, 319, 356, 70, 350, 351,
	-424, 2, 345, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, -143, -145, -144, 427, 427,
	427, 427, 427, -129, 317, 2, 61, 25, -226, -227,
	372, 185, 116, 248, -142, -144, 2, -390, -358, 2,
	-297, 243, -299, 415, 416, 410, 232, 402, -310, 100,
	221, 220, -300, -312, 117, 299, -245, 8, 9, 5,
	6, 7, -174, -340, -306, -347, 366, 127, 235, -203,
	430, 10, 424, -387, -144, -311, 32, 54, -362, -202,
	-341, -349, -345, -346, -430, 43, 50, 49, 354, 225,
	312, 313, 327, 314, 315, 41, 381, 167, 241, 242,
	179, 4, 186, -201, -167, -384, -385, -368, -369, 178,
	184, 180, 326, 181, 182, 183, 40, 275, 138, 139,
	137, 109, 99, 98, 237, 45, 44, 42, 386, -350,
	96, 356, 357, 358, 359, 195, 196, 64, 86, 87,
	85, 90, 89, 91, 88, 319, 378, 55, 31, 161,
	162, 166, 236, 163, 62, -386, 337, 82, 128, 146,
	176, 164, 189, 190, 194, 208, 211, 227, 234, 251,
	253, 294, 324, -431, 387, 57, 58, 125, 126, 150,
	207, 254, 264, 341, 364, 365, -392, 276, -393, -186,
	-392, 427, 427, 429, 427, -221, -222, -223, 2, 25,
	106, 424, 2, -325, 2, 422, -329, -144, 202, -328,
	424, -326, -192, 244, -388, 300, -384, -385, -174, -167,
	-202, 4, 221, 220, -3, -224, 424, 426, 345, 65,
	-167, 25, -141, 243, 360, 429, -308, 424, 243, 145,
	245, 2, 94, 345, -167, 2, 321, 2, 424, -102,
	59, 363, -286, 2, -287, -164, -165, -166, 191, 269,
	274, 401, -358, -419, 145, 407, 360, -358, -246, 426,
	-268, 424, -285, -286, -285, 360, -172, 2, -329, 161,
	-192, 2, -190, -361, 4, -368, -370, -369, -371, 64,
	25, 27, 28, 29, 30, 32, 33, 34, 35, 46,
	54, 55, 60, 63, 65, 76, 81, 85, 86, 88,
	87, 89, 90, 91, 100, 102, 104, 106, 107, 111,
	113, 116, 127, 129, 142, 144, 145, 148, 151, 154,
	165, 171, 175, 185, 187, 202, 205, 212, 215, 216,
	232, 233, 235, 240, 243, 244, 247, 248, 262, 268,
	278, 292, 309, 319, 329, 342, 345, 355, 360, 361,
	366, 372, 373, 378, 380, 388, 392, 393, 394, 395,
	2, -329, 161, 2, -193, 161, -329, -196, 2, -366,
	161, -364, 10, -363, 5, 4, -368, -370, -369, 2,
	-177, -167, 2, -189, -361, 2, -205, 161, -192, 360,
	429, -237, -199, -200, -230, -167, 426, -297, 2, -91,
	2, -297, 161, 2, -91, 161, 2, -297, 161, 2,
	-91, 161, 2, 2, -192, 161, -182, 2, -167, 142,
	-193, 161, 2, -196, -366, 161, 2, -366, 161, 2,
	-195, 2, -192, -194, -196, -194, 171, 188, -177, 161,
	2, 145, 2, 187, 2, 187, 2, -330, 2, -329,
	-239, 161, 2, -192, -239, 161, 2, -239, 161, 2,
	-206, 161, 2, -205, -177, 161, 2, -367, 161, 2,
	-366, -367, 161, 2, -337, 2, -336, -363, 385, 424,
	317, 424, -366, -192, -297, -91, 145, -297, -91, -129,
	2, 142, 380, 2, 8, 2, -366, 273, 134, 2,
	321, 2, 270, 318, 61, 401, 145, 2, 2, -411,
	2, 243, 145, 2, 145, 2, 145, 2, 145, 2,
	145, 2, 2, 270, 318, 2, 362, 201, 121, 2,
	145, 2, 145, 2, 5, 2, 191, 269, 334, 2,
	-192, -422, 2, 345, 389, 310, 2, 2, 72, 73,
	145, 2, 145, 401, 2, -254, -329, -226, -227, -129,
	321, 2, -253, -274, -275, 212, 129, 240, -259, 25,
	106, -259, -259, 48, 425, 425, 11, 12, 63, 36,
	415, 416, 417, 418, 140, 419, 420, 413, 414, 412,
	405, 406, 409, 197, 198, 78, 408, 407, 71, 218,
	301, 130, 131, 132, 133, 284, 168, 169, 170, 14,
	15, 16, 29, 247, 211, 402, 164, 324, 410, 17,
	18, 19, 189, 190, 234, 39, 165, -173, -207, -297,
	-297, -297, -297, -297, 253, -251, -292, 422, -144, 424,
	424, 424, 5, 424, 5, -357, 8, -144, -297, -310,
	425, -243, 424, -144, -310, -305, 424, 299, 422, -313,
	-297, 426, -394, 396, -343, 424, 266, -342, 424, -342,
	-342, 390, 397, 403, 397, 403, 142, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	390, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	429, -392, -224, 424, -247, -331, -297, 417, -247, -247,
	243, -240, -297, 82, -262, 194, 227, 146, 208, 294,
	176, -357, -76, -294, 430, -321, 403, -144, -326, -167,
	-144, -328, 424, -325, -321, 417, -192, 424, 145, 424,
	426, 145, -230, -361, -192, -201, -167, -202, -366, -408,
	-230, -171, 33, -307, -338, -339, -351, -340, -348, -344,
	-347, 280, 281, 279, 283, 282, 43, 50, 49, 354,
	225, 312, 313, 327, 314, 315, 41, 381, 167, 241,
	242, 179, 4, 42, 386, -350, 186, 178, 184, 180,
	326, 181, 182, 183, 40, 275, 138, 139, 137, 109,
	99, 98, 237, 45, 44, 96, 356, 357, 358, 359,
	195, 196, 387, 337, 57, 58, -408, -230, 142, -177,
	2, -192, 2, -360, -240, 33, -286, 2, -427, 429,
	210, -209, 217, 231, 155, 244, 399, -365, 5, 4,
	-306, -318, 100, 214, -347, 9, 416, -355, 8, 415,
	-359, -358, 84, 426, -361, -240, -172, -153, 285, -152,
	23, 26, 110, 383, 122, -214, 173, 258, 117, 330,
	-415, -417, 303, 352, 353, 74, 238, 285, 117, -256,
	-258, 33, 92, 229, 255, 51, 159, 220, 221, 332,
	391, 117, 285, 395, 117, -417, 285, -417, -155, 330,
	-415, -417, 303, 285, -154, -214, 117, 430, -366, -237,
	429, 429, -361, 417, 117, 117, 117, 117, 424, -224,
	232, 243, -410, -238, 345, -192, -257, -256, 232, -163,
	-389, 395, 232, 232, -224, 33, 424, 2, -179, 161,
	2, -168, -167, 171, -389, 232, -330, -204, -192, -204,
	320, -186, 33, -156, 429, 53, 290, 117, -156, 117,
	-156, 117, -156, 429, 117, -156, 117, 429, 117, 117,
	425, 429, -337, -366, -139, 395, 145, 81, 424, -367,
	345, 195, -366, -366, -360, 25, 322, 2, 73, -192,
	-412, 142, -409, 295, -408, -192, -192, -192, -192, -192,
	142, 2, 362, 2, 362, 2, -167, -167, 210, -192,
	142, 345, 171, 345, -156, 429, -253, -360, -275, -274,
	-277, -297, 25, -280, 136, 228, -297, -299, -143, -143,
	-143, -228, -323, -297, 268, 171, -352, -338, -338, -191,
	-361, 356, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, 211, 164, 324,
	39, 165, -297, 360, -297, -297, -297, -297, 224, 232,
	235, 366, 127, 374, 106, 238, -432, 342, 35, -303,
	-144, -244, 424, -317, 30, 329, 25, -310, 424, -292,
	-297, -293, -241, -240, -240, 425, 388, 25, 106, 417,
	2, 8, -269, 400, 223, 97, 157, 222, -270, 308,
	425, 429, 33, 425, -297, -241, -309, -305, -316, -315,
	392, -361, 417, -395, 135, 151, 8, -357, 356, 356,
	356, 356, 424, 425, 2, 425, 2, 425, 2, 425,
	2, 425, 2, -297, -297, -297, -297, -297, -297, -297,
	-240, -263, 2, -353, -240, 4, 400, 223, 97, 157,
	222, 308, -263, 2, -240, 2, -240, 2, -264, 2,
	-297, -240, -265, -298, -299, 415, 416, 410, -310, -266,
	2, -297, -241, -297, 46, 205, 361, -267, -297, 145,
	-240, -393, 33, -240, -233, 429, 145, 33, 4, -233,
	-233, 424, 425, 429, 194, 194, -325, -262, 194, -260,
	251, -260, -260, -406, 424, 423, -321, -178, 422, 431,
	-361, -320, -319, 33, -186, 249, -321, -321, 426, 425,
	-320, -192, 424, -240, -361, 335, 425, 426, 189, 189,
	-139, 360, 395, -75, 425, 429, -232, 32, 422, -269,
	424, -354, 390, 424, 424, 145, -231, -334, -333, 404,
	-334, -419, 425, 363, -287, -208, 274, 328, 286, 316,
	9, 8, 8, 429, -361, 425, 429, 360, -420, 76,
	65, -289, 161, 65, -372, -180, 76, -373, -167, 60,
	373, 268, 144, -420, 76, -420, 76, 76, 320, 333,
	48, -329, 36, -91, 206, 145, 401, 345, 360, -329,
	-258, -338, 92, 220, 221, 48, -356, -355, 416, -356,
	48, -356, -356, -356, 395, -193, -329, 360, 259, -366,
	360, 429, 36, -91, 206, 145, 360, -205, -178, -334,
	-199, -167, 426, -297, -91, -297, -91, -210, -211, -167,
	-290, -289, -374, -375, -372, 188, 171, 373, 128, 33,
	117, -230, -335, 187, 429, -238, 117, 259, 117, 117,
	33, 424, 114, 272, 2, 243, 232, -179, 161, -159,
	348, 117, -291, 393, -281, -91, 424, 100, 33, -281,
	-248, -249, -332, -250, -180, 424, -186, -192, -239, -239,
	-239, -205, -206, -177, -366, -367, -367, -76, -336, 425,
	425, -138, 246, -137, -167, 5, -141, 380, -211, -139,
	-333, -192, 142, -230, -230, 317, 142, 142, 426, 272,
	94, 345, 258, 171, -192, -205, -192, -329, -278, -355,
	424, -279, 299, 300, 429, -151, 34, 104, 199, -192,
	401, 115, -297, -297, 360, -432, 342, -303, 115, -297,
	224, 235, 366, 127, 374, 106, 238, 145, 424, -298,
	-298, 425, -242, -297, -297, 423, 433, 425, -429, 429,
	-226, -297, -240, -240, 425, 425, 360, 360, 360, 360,
	424, 426, -240, -230, 423, 423, 429, -314, -315, 111,
	-297, 426, -400, 252, 424, 424, 425, 425, 429, 401,
	401, 401, 401, -297, 33, 429, 429, 429, 425, 429,
	429, 429, 425, 425, 145, 425, 425, 425, 425, -271,
	262, 425, 11, 12, 415, 416, 417, 418, 140, 419,
	420, 413, 414, 412, 405, 406, 407, 71, 218, 301,
	14, 15, 16, 189, 165, -298, -298, -298, 425, -301,
	-302, 145, 142, 33, -267, -267, -267, 425, 145, -240,
	424, 425, -291, -331, -235, 2, -325, -188, -361, -291,
	-291, -240, -297, -325, -325, -261, 380, 243, 194, -325,
	-319, 425, -407, -357, -321, -320, -357, -296, -295, 143,
	230, -186, -224, -320, -320, -361, -321, 425, -236, -327,
	-388, -429, 426, -361, -130, 5, 235, -130, 145, -230,
	24, -338, 422, 423, 8, 8, 424, -357, -357, -230,
	145, 238, -43, 395, -358, -286, 371, 69, 274, -358,
	-152, -192, -180, -187, -167, 232, -289, 161, -158, 232,
	-338, -187, 424, 424, 199, 199, -180, -187, 161, -180,
	161, -187, -187, -414, 274, 239, -297, 213, 272, 233,
	-153, 285, -91, -91, 424, -419, 380, 105, -192, -195,
	285, -201, -356, -356, -256, 285, -193, -366, 395, -177,
	-154, -91, -91, 424, -178, -155, 285, -136, 160, 417,
	425, 429, 171, -179, 171, -185, -168, -91, -192, 145,
	-139, -366, -192, -193, -366, -366, -366, -91, 2, 424,
	2, -192, 117, 243, 232, -160, 112, -428, 407, -177,
	-227, -226, -297, -255, -284, 292, 243, -225, -181, -180,
	385, -186, -255, -234, 429, 145, 407, 426, -225, -156,
	-156, -156, -156, -156, -76, -139, 429, 424, 407, 407,
	424, -366, -366, 425, -139, 345, 317, 317, -167, -189,
	-177, -192, -190, -205, -279, -297, -323, -192, 430, -297,
	-297, 115, 115, -297, -298, -298, -297, 115, 145, 424,
	-297, -307, 29, 29, 425, 429, -293, -297, 425, 388,
	-429, -429, -429, 5, 223, 157, 222, -270, 222, -270,
	-270, 8, 417, -361, 425, -305, 113, -297, 355, -361,
	417, -401, -183, 424, -167, 393, -226, -357, 425, -352,
	-338, -297, -297, -297, -297, -297, -297, -301, -297, -352,
	-338, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	106, 232, 238, -298, -302, -301, -297, -297, -338, 425,
	425, 425, -240, -75, -252, 151, -334, 429, -252, -252,
	425, -261, 424, -297, -325, 423, 425, 429, -320, 423,
	429, 432, 407, -224, 426, -319, 425, 429, -283, 33,
	425, -361, -91, 245, 8, 423, 425, -357, 425, 425,
	-230, 344, 246, 360, 360, 117, 232, 382, -376, -373,
	-297, -229, -324, -180, -388, 424, -167, 424, 424, -150,
	110, 320, -421, 117, -156, 117, -156, 399, 424, 424,
	360, -420, 76, -240, -297, -140, 100, -360, -417, 360,
	360, 259, -240, 360, -139, 145, -212, 174, -290, -168,
	424, -179, 424, 424, -224, -192, -257, -163, 2, -273,
	380, -178, -192, 117, -161, 204, -428, -364, -389, -276,
	-274, -255, -247, 233, 75, 425, 429, 426, -291, -249,
	-235, -297, 2, 425, -137, -138, -366, -366, -366, -139,
	-141, -141, -192, -216, -215, 258, 238, 244, 425, -151,
	-178, -297, -297, 115, 29, 29, -297, -297, -307, 425,
	-297, -297, -240, 423, 5, -297, 425, 425, 425, 425,
	-297, 426, -402, -167, -297, 425, 425, 425, 425, 429,
	429, 425, 425, 425, 425, -302, 145, 106, 238, 424,
	425, 425, -304, 154, 48, -325, -304, -304, -230, -294,
	-357, -295, -178, 422, -361, -327, 424, 426, 423, 425,
	356, -44, -45, 171, 76, 261, -180, -187, -289, 117,
	-377, 76, -378, 63, 128, 81, 232, 235, 373, 268,
	60, 100, 278, 33, 425, 425, 429, -176, 63, -176,
	-297, -229, -230, 232, 339, 100, 232, 100, 93, 368,
	-180, -187, -230, -230, -192, -180, -187, 425, 429, 407,
	-195, -193, -366, 425, -178, -367, -213, -214, 165, 424,
	-229, 424, -230, -210, 33, 424, 147, 47, 243, 424,
	-178, -162, 203, -428, -364, -159, -255, -282, 424, 243,
	-91, -181, 2, -227, 407, 425, 425, 93, 93, -190,
	345, -151, -297, -297, -297, 425, -429, -361, 417, -396,
	258, 425, -297, -297, -298, 145, 424, -307, -397, 394,
	-297, -240, -397, -397, 425, -321, -357, 2, -297, 429,
	25, 424, 25, 424, -289, -187, -191, -184, -167, 128,
	161, 235, 199, 424, -298, -192, 424, 2, -288, -423,
	80, 340, -324, -151, -191, -151, 425, 425, 425, 235,
	235, -297, -338, -156, -156, 425, 425, 360, 360, 360,
	-360, -358, 360, 256, -229, 425, -229, 425, 425, -91,
	-229, -192, -229, 243, -428, -364, -160, 107, -230, 76,
	-276, -303, -139, 424, 424, -192, 425, -227, 48, 425,
	425, -298, -307, 425, -398, -399, -183, -320, 423, -45,
	-230, -230, -378, -184, 232, -297, -169, 424, -297, -212,
	424, -176, 278, -175, 63, 424, 424, -180, -187, 424,
	407, 424, -192, 425, -288, 425, -212, 425, -273, 425,
	-192, -364, -161, 375, 233, 425, -187, -255, -367, -367,
	-403, 272, 300, 153, -240, 425, 429, 33, 425, 425,
	117, 425, -379, 219, -167, 425, -213, -230, -151, -192,
	-418, 380, -191, -218, -217, -215, -220, -219, -215, -240,
	-358, -240, 424, -212, -288, -213, -288, 424, -288, 424,
	-162, 320, -291, 425, 425, 425, -404, -405, 39, 370,
	84, -297, -404, -404, -399, -401, 128, -380, -383, -382,
	243, 146, 257, 325, 425, 339, 391, 425, -224, -297,
	425, 429, 385, 425, 429, 385, 425, 425, -230, -213,
	-212, -212, -229, -212, -229, -248, -139, -139, -405, 265,
	141, 299, 265, 141, -184, -382, 243, -383, 243, 375,
	103, -379, -217, 165, -219, 145, 425, -213, -213, 425,
	-213, 425, -291, 29, -381, 229, 290, 53, 320, -381,
	-380, 424, 424, -157, 53, 290, -288, -288, -405, 22,
	235, 100, -240, -240, -212, -212, 425, 425, -213, -213,
	-213, 360, 424, -240, 425, -213,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 25, 26, 308,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 364, 0, 0, 353, 355, 0, 752, 754, 756,
	758, 279, 280, 282, 283, 284, 286, 287, 288, 290,
	292, 294, 295, 297, 299, 300, 301, 302, 304, 306,
	0, -2, 0, -2, -2, -2, 770, 28, 29, 0,
	0, 168, 170, 172, 0, 195, 197, 199, 200, -2,
	0, 235, 236, 238, 0, -2, 0, 0, 342, 344,
	0, 0, 840, -2, 357, 359, 361, 422, 424, 426,
	428, 430, 432, 434, 435, 437, 439, 441, 443, 445,
	447, 449, 451, 453, 455, 457, 459, 461, 463, 465,
	467, -2, -2, 32, 34, 36, 38, 40, 42, 60,
	203, 204, 206, 208, 210, 213, 214, 216, 877, 241,
	243, 245, 247, 249, 0, -2, 891, 0, 0, 44,
	45, 46, 47, 48, 49, 50, 67, 68, 69, 70,
	71, 72, 73, 53, 55, 56, 62, 63, 65, 0,
	0, 853, 855, 857, 859, -2, 0, 0, -2, 9,
	11, 13, 15, 17, 19, 21, 24, 310, 645, 1465,
	1478, 1479, 1480, 1483, 1484, 1485, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 0, 321, 1632, 323, 325, 229, 230, 231,
	232, 233, 234, 0, 151, 0, 335, 329, 334, 336,
	338, 339, 340, 341, 316, 314, 1459, 0, 335, 1507,
	333, 750, 751, 0, 745, 746, 1662, 780, 354, -2,
	-2, 1757, -2, 385, -2, 392, 1760, 1664, 395, 0,
	397, -2, 400, 753, 755, 757, 281, 285, 289, 291,
	293, 296, 298, 303, 305, 307, 320, 318, 782, 760,
	773, 782, 762, 763, 764, 765, 766, 771, 772, 775,
	0, 767, 768, 769, 30, 31, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, -2, -2, -2, -2,
	0, 0, 1540, 1436, 1480, 1439, 1434, 169, 171, 173,
	174, 0, 0, 0, 0, 0, 0, 196, 198, 201,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 237, 239, 240,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 0,
	0, 0, 0, 0, 149, 142, 0, 0, 578, 343,
	345, 0, 141, 0, 0, 749, 358, 360, 362, 423,
	425, 427, 429, 431, 433, 436, 438, 440, 442, 444,
	446, 448, 450, 452, 454, 456, 458, 460, 462, 464,
	466, 468, 469, 0, 0, 0, 0, 0, 473, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 472, 474, 475, 476, 0, 521, 560, 561,
	0, 687, 879, 33, 35, 37, 39, 41, 43, 205,
	207, 209, 211, 215, 217, -2, 851, 852, 242, 244,
	246, 248, 250, 346, 0, 348, 0, 473, -2, 0,
	883, 883, 883, 0, 0, 852, 850, 0, 351, 352,
	404, 405, 1099, 0, 0, 0, 0, 0, 1334, 1183,
	-2, -2, 1215, 1217, 1736, 1757, 1333, 1219, 1220, 1221,
	1222, 1223, 0, 0, 1226, 0, 1228, 1229, 1230, 1231,
	0, 1233, 0, 1237, 1238, 1239, 0, 1413, 1476, -2,
	1008, 1009, 1010, 1011, 1012, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1472, 1467, 1305, 1252, -2, 1494, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1548, -2, -2, -2, -2, -2, -2, -2, 1064,
	-2, -2, -2, -2, -2, -2, -2, 1770, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 0, 1725, 1742,
	1743, 1748, 1750, 1744, 1733, 1275, -2, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1783, 1784, 1785,
	1786, 1787, 1788, 1065, -2, -2, -2, 1737, 1738, 1740,
	1749, 1753, 1754, 1759, 1763, 1764, 869, 1639, 872, 645,
	870, 854, 856, 0, 858, 0, 0, 0, 863, 886,
	884, 0, 922, 867, 868, 878, 937, 960, 0, 942,
	0, 960, 982, 0, 947, 1658, 1253, 1254, 0, 1480,
	1477, -2, 1781, 1782, 2, 0, 0, 0, 0, 0,
	322, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 0, 779, 356, 0, 380, 0, 384,
	1732, -2, -2, 388, 783, 787, 788, 789, 0, 0,
	0, 0, 394, 0, 0, 381, 382, 398, 401, 0,
	317, 0, 759, -2, 761, 0, 777, 51, 0, 1742,
	982, 52, 0, 1449, 1499, 1500, 1501, 1502, 1503, 1770,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	54, 0, 1742, 57, 0, 1742, 0, -2, 61, 0,
	1742, 152, 153, 1490, 1491, 1495, 1496, 1497, 1498, 64,
	0, 1455, 66, 0, 1452, 74, 0, 1742, 1433, 0,
	0, 570, 1430, 1435, 571, 1440, 0, 175, 176, 177,
	178, 179, 1742, 181, 182, 0, 184, 185, 1742, 187,
	188, 0, 190, 212, 645, 1742, 0, 219, 1460, 0,
	669, 1742, 667, 1464, -2, 1742, 690, 693, 1742, 695,
	645, 697, 1462, 702, 1463, 0, -2, 0, 876, 1742,
	796, 0, 228, 0, 809, 0, 811, 0, 830, 988,
	134, 1742, 253, 272, 134, 1742, 256, 134, 1742, 259,
	134, 1742, 262, 1428, 134, 1742, 265, 266, 1742, 268,
	154, 269, 1742, 271, 0, -2, 311, 1466, -2, 0,
	-2, 0, 166, 0, 576, 577, 0, 747, 748, 470,
	471, 0, 0, 481, 482, 483, 484, 1637, 1562, 487,
	0, 490, 511, 525, 0, 0, 0, 494, 496, 575,
	498, 0, 0, 500, 0, 502, 0, 504, 0, 506,
	0, 508, 510, 512, 526, 514, 0, 0, 0, 524,
	0, 530, 0, 533, 534, 535, 0, 537, 538, 539,
	540, 0, 542, 543, -2, -2, 547, 549, 0, 555,
	0, 559, 0, 477, 478, 134, 986, -2, 0, 347,
	0, 350, 846, 900, 901, 0, 0, 0, 0, 881,
	882, 0, 0, 0, 842, 843, 0, 0, 0, 0,
	1339, 1340, 1341, 1342, 1343, 1344, 1347, 1348, 1345, 1346,
	1349, 1350, 0, 0, 0, 0, 0, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	1353, 1354, 0, 0, 1356, 0, 1358, 0, 0, 0,
	0, 0, 0, 1162, 1164, 1421, 0, 0, 1355, 1104,
	1105, 1106, 1141, 1142, 0, 1216, 1418, 1417, 1218, 0,
	1370, 0, 1225, 0, 1096, 1232, 1446, -2, 0, 1334,
	1365, 0, 0, 1240, 1241, 1242, 0, 0, 1370, 0,
	1412, 0, 1307, 0, 1044, 0, 1045, 1046, 0, 1047,
	1048, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1393, -2, 0, 0,
	0, 871, 0, 0, 926, 1422, 1426, 1427, 926, 926,
	0, 0, 1371, 0, 0, 0, 0, 979, 979, 979,
	977, 954, 0, 960, 0, 970, 0, 960, 960, 0,
	-2, 942, 0, 0, 970, 983, 984, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 1467, 1468, 166, 0,
	327, 337, 878, 0, 1373, 1000, 996, 1003, 1004, 1005,
	1096, 1051, 1052, 1053, 1054, 1055, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, -2, 1062, 1064, 1082, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1057, 0,
	1032, 1032, 1032, 1049, 1050, 1073, 1074, 1076, 1078, 1080,
	1001, 1002, 1067, 1068, 1069, 1070, 0, 331, 0, 973,
	367, 973, 369, 0, 0, 0, -2, 390, 0, 785,
	0, 790, 413, 414, 415, 792, 793, 393, 416, 417,
	418, 419, 420, 421, 0, 662, 0, 664, 1442, 0,
	391, 406, 396, 0, 402, 0, 776, 75, 742, 102,
	0, 742, 742, 0, 0, 121, 0, 0, 0, 0,
	0, 93, 98, 81, 82, 0, 0, 0, 0, 58,
	670, 0, 673, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 0, 0, 92, 0, 87, 77, 0,
	0, 95, 100, 0, 125, 127, 0, 0, 973, 569,
	0, 0, 1481, 1438, 0, 0, 0, 0, 584, 0,
	0, 0, 226, 221, 0, 223, 665, 668, 0, 688,
	0, 875, 0, 0, 0, 0, 0, 703, 0, 1742,
	708, 1451, 1486, 1487, 798, 0, 992, 0, 812, 0,
	0, 989, 0, 251, 0, 132, 133, 0, 254, 0,
	257, 0, 260, 0, 0, 263, 0, 0, 0, 0,
	878, 0, 0, 0, 144, 0, 0, 0, 0, 166,
	0, 0, 485, 486, 488, 489, 491, 492, 556, 493,
	497, 0, 563, 1654, 573, 499, 501, 503, 505, 507,
	0, 516, 0, 518, 0, 520, 528, 531, 536, 541,
	0, 0, 0, 0, 686, 0, 849, 349, 898, 899,
	904, 908, 909, 912, 915, 916, 906, 1099, 864, 865,
	866, 892, 893, 725, 0, 0, 1100, 997, 1101, 1102,
	1448, 0, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, -2, -2, -2, -2, -2, -2, -2, -2,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, -2, -2, -2, 1139, 1140, -2, 1357, 1359, 0,
	1421, 0, -2, 0, -2, -2, -2, -2, 1159, 0,
	1161, 1166, 1168, 1170, 0, 0, 0, 0, 1420, 1180,
	1404, 1405, 0, 0, 1336, 1337, 1338, 1165, 0, 1419,
	1416, 0, 0, 1369, 889, 1243, 0, 0, 0, 0,
	1250, 0, 1447, 1083, 1084, 1085, 1086, 1087, 1088, 1097,
	1236, 1367, 0, 1366, 0, 0, 0, 1377, 1411, 1407,
	0, 1469, 1475, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 1380, -2, -2, -2, -2, -2,
	-2, -2, 0, 1289, 0, 1301, 0, 1303, 0, 1291,
	1371, 1390, 0, 0, 1186, 0, 0, 0, 1334, 0,
	1294, 1371, 1398, 0, 0, 0, 0, 0, 1371, 0,
	1403, 873, 0, 0, 992, 0, 0, 0, 1425, 992,
	992, 0, 921, 0, 0, 0, 0, 0, 0, 974,
	978, 975, 976, 0, 0, 960, 970, 934, 0, 0,
	1450, 940, 969, 0, 645, 959, 970, 970, 0, -2,
	944, 0, 0, 889, -2, 167, 644, 0, 0, 0,
	0, 0, 0, 313, 315, 0, 993, 995, 0, 1006,
	0, 0, -2, 0, 0, 0, 0, 366, 972, 0,
	371, 0, 383, 0, 784, 791, 0, 410, 0, 412,
	663, 1444, 1443, 0, 403, 319, 0, 0, 0, 0,
	741, 104, 1742, 0, 136, 0, 0, 635, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	671, 672, 674, 680, 682, 0, 676, 1445, 0, 677,
	0, 679, 681, 683, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 1432, 157,
	1431, 1441, 0, 180, 183, 186, 189, 0, 583, -2,
	585, 587, 588, 589, 590, 1588, 1487, 0, 1487, 0,
	0, 0, 166, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 1742, 800,
	806, 0, 891, 0, 828, 814, 0, 0, 0, 828,
	832, 833, 835, 836, 0, 0, 990, 273, 134, 134,
	134, 1429, 134, 134, 155, 267, 270, 276, 312, 878,
	166, 164, 1620, 162, 159, 161, 0, 0, 0, 139,
	166, 479, 0, 574, 572, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 562, 987, 0, 910,
	0, 907, 913, 914, 0, 895, 723, 724, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 1181, 0, -2,
	1160, 1163, 1167, 1169, 1171, 0, 0, 0, 0, 0,
	0, 1360, 0, 1362, 1182, 1414, 1417, 1332, 0, 0,
	888, 889, 889, 889, 1249, 0, 0, 0, 0, 0,
	0, 0, 1368, 0, 1375, 1376, 0, 0, 1408, 0,
	0, 0, 1251, 0, 0, 0, 1056, 1030, 0, 1075,
	1077, 1079, 1081, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 1274, 1286, 0, 1288, 1300, 1302, 1290, 0,
	0, 1292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1189, 1190, 1191, 1293, 1396,
	1397, 0, 0, 0, 0, 0, 0, 1299, 0, 1402,
	878, 923, 918, 1423, 973, 925, 927, 1424, 1453, 918,
	918, 0, 1372, 962, 0, 964, 0, 0, 0, 966,
	0, 955, 0, 957, 970, 939, 0, 0, 932, 0,
	931, 645, 968, 941, 945, 1469, 0, 985, 0, 949,
	952, 0, 0, 1482, 191, 193, 194, 192, 0, 326,
	0, 1374, 0, 998, 0, 0, 0, 0, 0, 330,
	0, 0, 368, 0, 379, -2, 408, 409, 411, 407,
	103, 729, 0, 0, 1454, 0, 106, 1742, 115, 0,
	612, 0, 0, 0, 0, 0, 744, 116, 1742, 134,
	1742, 134, 117, 120, 0, 124, 122, 0, 0, 603,
	76, 742, 79, 85, 0, 0, 0, 91, 0, 735,
	0, 675, 678, 684, 59, 0, 737, 727, 0, 726,
	126, 80, 86, 0, 739, 78, 0, 166, 0, 1437,
	592, 0, 1487, 0, 1487, 0, 1458, 581, 645, 0,
	220, 225, 224, 669, 691, -2, 694, 696, 698, 0,
	700, 711, 0, 0, 0, 802, 806, 0, 805, 876,
	903, 890, 991, 807, 828, 0, 0, 0, 817, 819,
	816, 813, 810, 992, 0, 0, 0, 0, 0, 252,
	255, 258, 261, 264, 277, 143, 0, 0, 0, 0,
	0, 166, 0, 0, 140, 0, 517, 519, 527, 550,
	551, 598, 0, 554, 0, 0, 894, 725, 0, 1103,
	1144, 0, 0, -2, 0, 0, 1148, 0, 0, 0,
	-2, 0, 0, 0, 1361, 1363, 0, 1416, 1244, 0,
	0, 0, 0, 1227, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 0, 1234, 1235, 1335, 1378, 1406, 1410, 0, 1470,
	1474, 1313, 1314, 1318, 1461, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 0, 1379, 1389, 1391, 1187,
	1188, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, -2, -2, -2, 1205, 1206, 1207, -2, -2, -2,
	0, 0, 0, 1392, 1394, 1395, 1399, 1400, 0, 1296,
	1297, 1298, 1401, 0, 920, 0, 924, 0, 920, 920,
	885, 963, 0, 981, 965, 937, 956, 0, 946, 935,
	0, 936, 0, 967, 0, 943, 948, 0, 951, 0,
	1244, -2, 150, 328, 0, 999, 1007, 0, 1059, 1063,
	332, 0, 0, 0, 0, 0, 0, 135, 610, 634,
	0, 0, 714, 722, 722, 0, 1456, 0, 0, 108,
	0, 0, 0, 0, 113, 0, 119, 123, 0, 0,
	0, 0, 0, 0, 88, 89, 90, 0, 94, 0,
	0, 0, 0, 0, 137, 0, 600, 0, 586, 0,
	0, 0, 0, 584, 0, 218, 666, 689, 699, 0,
	0, 0, 0, 0, 804, 806, 0, 797, 798, 828,
	902, 808, 826, 827, 825, 0, 0, 0, 891, 834,
	831, 837, 838, 0, 163, 0, 158, 160, 0, 146,
	0, 0, 480, 552, 597, 0, 0, 905, 911, 896,
	725, 1146, 1150, 0, 0, 0, 1152, -2, 0, 1174,
	-2, -2, 1364, 1415, 1224, 889, 1245, 1247, 1248, 1098,
	1409, 0, 1320, 1317, 0, 1304, 1031, 1265, 1266, 0,
	0, 1269, 1271, 1272, 1273, 1388, 0, 0, 0, 0,
	1295, 874, 1309, 0, 0, 928, 1309, 1309, 0, 960,
	958, 933, 929, 0, 1470, 950, 0, 0, 994, 1058,
	0, 370, 372, 0, 0, 378, 731, 733, 105, 0,
	611, 0, 614, 0, 0, 0, 0, 621, 622, 0,
	0, 0, 0, 0, 636, 643, 0, 725, 0, 725,
	0, 0, 0, 0, 110, 129, 0, 0, 743, 0,
	134, 134, 0, 0, 730, 0, 0, 0, 0, 0,
	736, 738, 728, 0, 740, 156, 579, 599, 0, 0,
	0, 0, 0, 0, 0, 0, 709, 710, 0, 0,
	0, 794, 806, 0, 799, 800, 227, 0, 0, 0,
	815, 818, 820, 903, 0, 165, 166, 0, 0, 596,
	0, 897, 1154, -2, -2, 1175, 0, 1471, 1473, 891,
	0, 1306, 0, 0, -2, 0, 0, 0, 860, 0,
	919, 917, 861, 862, 980, 970, 0, 953, 971, 0,
	374, 0, 376, 0, 107, 0, 615, 616, 1457, 618,
	0, 620, 623, 0, 625, 1489, 0, 629, 592, 0,
	640, 641, 715, 716, 721, 717, 722, 638, 0, 109,
	111, 128, 720, 112, 118, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 643, 0, 633, 592, 582,
	0, 711, 0, 0, 0, 801, 802, 0, 0, 0,
	828, 839, 145, 0, 0, 553, 1246, 1324, 0, 1267,
	1268, -2, 0, 1213, 1308, 1310, 0, 938, 930, 373,
	0, 0, 613, 617, 0, 0, 649, 0, 0, 600,
	0, 725, 0, 131, 0, 0, 0, 732, 734, 0,
	0, 0, 0, 632, 592, 643, 600, 643, 0, 643,
	0, 803, 804, 0, 822, 992, 824, 829, 0, 0,
	0, 0, 0, 0, 1319, 1214, 0, 0, 375, 377,
	0, 624, 654, 0, 0, 0, 637, 0, 718, 645,
	114, 0, 719, 0, 604, 0, 0, 607, 0, 0,
	97, 0, 0, 600, 592, 580, 592, 0, 592, 0,
	795, 0, 823, 166, 166, 1316, 1321, 1325, -2, 1707,
	1537, 0, 1322, 1323, 1311, 1312, 0, 626, 650, 651,
	0, 646, 647, 648, 1488, 627, 628, 642, 649, 130,
	601, 0, 0, 602, 0, 0, 99, 101, 0, 630,
	600, 600, 0, 600, 0, 992, 147, 148, 0, 1327,
	1328, 1329, 1330, 1331, 619, 652, 0, 653, 0, 0,
	0, 654, 605, 0, 608, 0, 595, 631, 704, 643,
	706, 643, 821, 0, 655, 0, 658, 659, 0, 656,
	639, 0, 0, 591, 593, 594, 592, 592, 1326, 657,
	660, 661, 0, 0, 600, 600, 600, 0, 705, 707,
	606, 0, 0, 0, 600, 609,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1030
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1036
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1045
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1150
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1165
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1169
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1184
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1196
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1214
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1237
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1251
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1255
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1261
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1267
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1277
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1284
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1291
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1298
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1305
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1313
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1318
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1322
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1333
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1341
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1349
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1360
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1370
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1384
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1416
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1421
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1431
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1436
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1441
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1445
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1457
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1469
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1486
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1505
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1514
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1519
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1526
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1543
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1549
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1557
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = nil
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1567
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1571
		{
			sqlVAL.union.val = nil
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1578
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1582
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1596
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 137:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1625
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1655
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1714
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1717
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1734
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1737
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1745
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1761
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1765
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1771
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1775
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1789
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1799
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1807
		{
			sqlVAL.union.val = nil
		}
	case 167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1826
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1827
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1828
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1846
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1848
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1851
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1861
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1870
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1878
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1880
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1887
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1897
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1906
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1914
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1916
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1920
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1923
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1927
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1932
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1938
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.str = ""
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1948
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1949
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1952
		{
			return helpWith(sqllex, "CREATE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1962
		{
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1964
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1974
		{

			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1982
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1986
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1996
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2000
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2006
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2017
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2021
		{

			sqlVAL.union.val = nil
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2045
		{
			return helpWith(sqllex, "DELETE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2068
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2069
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2070
		{
			return helpWith(sqllex, "DROP")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2073
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2074
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2075
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2077
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2089
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2092
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2104
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2107
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2115
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2119
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2122
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2138
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2161
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2176
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2180
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2191
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2202
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2227
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2230
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2243
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2247
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2250
		{
			return helpWith(sqllex, "DELETE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2252
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2253
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2254
		{
			return helpWith(sqllex, "INSERT")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2255
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2258
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2260
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2265
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2266
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2267
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2273
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2277
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2291
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2298
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2302
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2306
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2322
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2328
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2332
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2342
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2346
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2350
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2354
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2357
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2377
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2381
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2385
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2388
		{
			return helpWith(sqllex, "GRANT")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2408
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2412
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2424
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2428
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2439
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2443
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2457
		{
			return helpWith(sqllex, "RESET")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2458
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2466
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2470
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2473
		{
			return helpWith(sqllex, "RESET")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2481
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2484
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2495
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2498
		{
			return helpWith(sqllex, "USE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2502
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2503
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2504
		{
			return unimplemented(sqllex, "set local")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2508
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2509
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2510
		{
			return helpWith(sqllex, "USE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2526
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2541
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2544
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2570
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2574
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2578
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2584
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2594
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2598
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2602
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2606
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2610
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2621
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2624
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2634
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2650
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2654
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2659
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2676
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2679
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2681
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2684
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2688
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2707
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2714
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2720
		{
			return unimplemented(sqllex, "set from current")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2721
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2729
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2734
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2741
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2751
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2762
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2786
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2794
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2800
		{
			sqlVAL.union.val = tree.Low
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2804
		{
			sqlVAL.union.val = tree.Normal
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2808
		{
			sqlVAL.union.val = tree.High
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2823
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2827
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2832
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2836
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2848
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2849
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2850
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2851
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2852
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2853
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2856
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2857
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2858
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2859
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2861
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2862
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2864
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2865
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2866
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2867
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2868
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2869
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2872
		{
			return helpWith(sqllex, "SHOW")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2879
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2880
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2881
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2892
		{
			sqlVAL.str = "client_encoding"
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2895
		{
			sqlVAL.str = "timezone"
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2896
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2910
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2915
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2919
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2930
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2939
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2947
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2954
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2962
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2979
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2983
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2988
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2991
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3002
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3026
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3042
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3047
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3063
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3066
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3071
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3082
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3084
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3088
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3113
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3115
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3118
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3120
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3124
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3127
		{
			sqlVAL.union.val = true
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3128
		{
			sqlVAL.union.val = false
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3136
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3155
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3164
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3173
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3187
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3190
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3197
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3209
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3214
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3223
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3231
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3235
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3252
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3255
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3263
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3266
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3270
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3274
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3278
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3284
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[9].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3291
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3297
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3301
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3312
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3316
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3327
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3334
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3339
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3459
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3463
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3467
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3506
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3510
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3515
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3519
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3528
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3535
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3539
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3551
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3560
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3563
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3599
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3611
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3656
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3678
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3686
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3693
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3698
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3703
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3709
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3716
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3723
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3736
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3743
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3749
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3759
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 609:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3790
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3801
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3805
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3811
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3815
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3823
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3827
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3831
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3835
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3853
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3857
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3861
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3865
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3873
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3885
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3889
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3893
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 630:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3910
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3922
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3932
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3944
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3955
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3961
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3972
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3982
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4016
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4020
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4025
		{
			return unimplemented(sqllex, "match full")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4026
		{
			return unimplemented(sqllex, "match partial")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4027
		{
			return unimplemented(sqllex, "match simple")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4028
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4047
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4051
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4063
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4071
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4075
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4079
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4087
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4093
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4097
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4122
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4130
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4138
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4142
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4145
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4149
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4150
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4152
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4153
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4154
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4157
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4159
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4161
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4163
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4164
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4166
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4167
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4169
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4171
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4179
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4182
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4194
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4197
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4201
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4205
		{
			sqlVAL.union.val = nil
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4215
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4219
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4222
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4230
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4237
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4245
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4247
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4249
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4251
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4253
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4255
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4271
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4311
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4324
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4329
		{
			sqlVAL.union.val = true
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4333
		{
			sqlVAL.union.val = false
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4337
		{
			sqlVAL.union.val = false
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4343
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = false
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4353
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4366
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4369
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4370
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4374
		{
			sqlVAL.str = ""
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4377
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4378
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4382
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4386
		{
			sqlVAL.union.val = tree.Descending
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4390
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4396
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4413
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4417
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4421
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4425
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4429
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4431
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4435
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4439
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4445
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4449
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4455
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4459
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4464
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4465
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4468
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4469
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4477
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4480
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4490
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4499
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4502
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4510
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4513
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4517
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4518
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4519
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4535
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4538
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4540
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4543
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4553
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4556
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4558
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4561
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4565
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4570
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4571
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4572
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4580
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4587
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4590
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4591
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4599
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4603
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.str = ""
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4623
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4637
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4650
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4652
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4656
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4660
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4664
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4670
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4676
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4682
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4686
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 794:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4696
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4706
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4716
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4720
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4724
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4730
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4734
		{
			sqlVAL.str = ""
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4740
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.str = ""
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4750
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4754
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4759
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4760
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4772
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4779
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4786
		{
			return helpWith(sqllex, "INSERT")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4797
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4804
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4816
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4822
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4826
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4830
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4836
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4840
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4860
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4868
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4874
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4878
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4880
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4886
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4891
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4895
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 829:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4923
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4927
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4928
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4932
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4949
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4952
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4999
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5009
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5024
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5028
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5032
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5036
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5040
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5044
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5051
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5086
		{
			return helpWith(sqllex, "SELECT")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5087
		{
			return helpWith(sqllex, "VALUES")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5088
		{
			return helpWith(sqllex, "TABLE")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5110
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5123
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5137
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5149
		{
			return helpWith(sqllex, "SELECT")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5153
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5162
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5171
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5186
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5193
		{
			return helpWith(sqllex, "TABLE")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5205
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5208
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5209
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5213
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5223
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5231
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5232
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5236
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5240
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5245
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5246
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5250
		{
			sqlVAL.union.val = true
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5254
		{
			sqlVAL.union.val = false
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5258
		{
			sqlVAL.union.val = false
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5264
		{
			sqlVAL.union.val = true
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5270
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5275
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5276
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5279
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5280
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5284
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5288
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5294
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5300
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5310
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5314
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5318
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5327
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5336
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5347
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5351
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5373
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5380
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5389
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5393
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5397
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5403
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5404
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5407
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5408
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5425
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5429
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5435
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5439
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5458
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5461
		{
			return helpWith(sqllex, "VALUES")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5463
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5475
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5478
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5480
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5486
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5496
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5500
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5506
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5517
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5529
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5533
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5537
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5541
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5568
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5582
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5591
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5598
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5600
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5608
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5613
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5635
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5657
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5659
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.union.val = nil
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5663
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5664
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5668
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5678
		{
			sqlVAL.union.val = true
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = false
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5702
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5706
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5710
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5714
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5718
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5728
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5732
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5739
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5745
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5752
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5758
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5762
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5766
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5770
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5776
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5777
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5788
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5792
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5797
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5799
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5800
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5804
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5821
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5825
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5829
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5835
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5839
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5851
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5865
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5874
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5883
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5889
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5898
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5907
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5918
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5935
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5939
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5943
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5947
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5951
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5963
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5967
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6003
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6023
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6027
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6031
		{
			sqlVAL.union.val = nil
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6042
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6046
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6050
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6054
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6058
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6062
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6066
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6070
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6074
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6082
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6097
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6111
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6115
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6122
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6126
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6130
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6138
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6144
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6159
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6165
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6171
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6179
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6183
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6187
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6193
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6224
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = true
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = false
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6239
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6243
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6247
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6251
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6255
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6263
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6267
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6271
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6276
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6282
		{
			sqlVAL.union.val = tree.Year
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6286
		{
			sqlVAL.union.val = tree.Month
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6290
		{
			sqlVAL.union.val = tree.Day
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6294
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6298
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = tree.Month
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = nil
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6342
		{
			sqlVAL.union.val = tree.Second
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6345
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6380
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6389
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6402
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6406
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6458
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6466
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6502
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6574
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6578
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6633
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6647
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6687
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6691
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6695
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6699
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6716
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6720
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6724
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6739
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6743
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6751
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6755
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6763
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6767
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6771
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6775
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6779
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6787
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6791
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6811
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6815
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6819
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6823
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6827
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6831
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6835
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6839
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6843
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6847
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6861
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6869
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6905
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6909
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6913
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6917
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6921
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6926
		{
			return unimplemented(sqllex, "func const")
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6932
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6935
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6945
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6949
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6953
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6975
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6984
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6996
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7012
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7013
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7026
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7037
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7058
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7078
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7082
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7092
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7096
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7100
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7136
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7143
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7146
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7151
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7156
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7158
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7161
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7166
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7168
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7171
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7176
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7181
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7190
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7191
		{
			return unimplemented(sqllex, "treat")
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7212
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7217
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7222
		{
			return unimplemented(sqllex, "within group")
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7223
		{
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7227
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7231
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7238
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7242
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7248
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7258
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7266
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7274
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7301
		{
			sqlVAL.str = ""
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7307
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7311
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7329
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7343
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7349
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7362
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7398
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7402
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7425
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7429
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7436
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = tree.Any
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7452
		{
			sqlVAL.union.val = tree.Some
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = tree.All
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7463
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7464
		{
			sqlVAL.union.val = tree.Div
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7468
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = tree.LT
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7472
		{
			sqlVAL.union.val = tree.GT
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7473
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7474
		{
			sqlVAL.union.val = tree.LE
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = tree.GE
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7476
		{
			sqlVAL.union.val = tree.NE
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = tree.Like
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7482
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7516
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7539
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7545
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7549
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7562
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7592
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7602
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7606
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7632
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7636
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7642
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7649
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7670
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7674
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7678
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7682
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7686
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7692
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7698
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7704
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7708
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7737
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7753
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7770
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7781
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7787
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7796
		{
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7797
		{
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7801
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7811
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7820
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7824
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7828
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7836
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7840
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7846
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7856
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7863
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7899
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7905
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7917
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7921
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7932
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7943
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7953
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8051
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8066
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8080
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8084
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8119
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8129
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8133
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8147
		{
			sqlVAL.str = ""
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8153
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8157
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
