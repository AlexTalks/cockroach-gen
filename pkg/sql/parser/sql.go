// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7790

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	413, 55,
	-2, 859,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	163, 697,
	-2, 0,
	-1, 59,
	101, 859,
	167, 859,
	361, 859,
	362, 859,
	-2, 0,
	-1, 72,
	112, 833,
	124, 833,
	175, 833,
	201, 833,
	230, 833,
	238, 833,
	358, 833,
	-2, 822,
	-1, 107,
	191, 527,
	349, 527,
	-2, 0,
	-1, 112,
	4, 861,
	20, 861,
	21, 861,
	22, 861,
	23, 861,
	25, 861,
	30, 861,
	35, 861,
	36, 861,
	37, 861,
	38, 861,
	39, 861,
	40, 861,
	41, 861,
	42, 861,
	43, 861,
	44, 861,
	46, 861,
	47, 861,
	48, 861,
	49, 861,
	50, 861,
	51, 861,
	54, 861,
	55, 861,
	56, 861,
	58, 861,
	59, 861,
	63, 861,
	64, 861,
	65, 861,
	66, 861,
	67, 861,
	69, 861,
	70, 861,
	71, 861,
	72, 861,
	74, 861,
	76, 861,
	77, 861,
	80, 861,
	81, 861,
	82, 861,
	90, 861,
	91, 861,
	92, 861,
	93, 861,
	94, 861,
	95, 861,
	96, 861,
	97, 861,
	99, 861,
	101, 861,
	103, 861,
	106, 861,
	107, 861,
	109, 861,
	113, 861,
	114, 861,
	115, 861,
	116, 861,
	117, 861,
	118, 861,
	119, 861,
	120, 861,
	121, 861,
	129, 861,
	130, 861,
	131, 861,
	132, 861,
	133, 861,
	135, 861,
	137, 861,
	141, 861,
	143, 861,
	144, 861,
	146, 861,
	148, 861,
	149, 861,
	150, 861,
	151, 861,
	152, 861,
	153, 861,
	154, 861,
	155, 861,
	158, 861,
	162, 861,
	164, 861,
	167, 861,
	168, 861,
	169, 861,
	170, 861,
	171, 861,
	172, 861,
	173, 861,
	174, 861,
	176, 861,
	178, 861,
	181, 861,
	182, 861,
	183, 861,
	185, 861,
	186, 861,
	189, 861,
	190, 861,
	191, 861,
	193, 861,
	194, 861,
	196, 861,
	198, 861,
	199, 861,
	202, 861,
	203, 861,
	206, 861,
	208, 861,
	211, 861,
	212, 861,
	213, 861,
	214, 861,
	215, 861,
	217, 861,
	218, 861,
	219, 861,
	220, 861,
	225, 861,
	226, 861,
	227, 861,
	228, 861,
	229, 861,
	231, 861,
	232, 861,
	234, 861,
	235, 861,
	236, 861,
	239, 861,
	240, 861,
	242, 861,
	244, 861,
	245, 861,
	246, 861,
	247, 861,
	248, 861,
	249, 861,
	250, 861,
	251, 861,
	253, 861,
	254, 861,
	255, 861,
	256, 861,
	257, 861,
	259, 861,
	260, 861,
	261, 861,
	262, 861,
	263, 861,
	264, 861,
	265, 861,
	266, 861,
	268, 861,
	269, 861,
	270, 861,
	271, 861,
	272, 861,
	274, 861,
	275, 861,
	276, 861,
	277, 861,
	278, 861,
	279, 861,
	280, 861,
	282, 861,
	285, 861,
	286, 861,
	287, 861,
	288, 861,
	289, 861,
	291, 861,
	292, 861,
	293, 861,
	294, 861,
	295, 861,
	296, 861,
	297, 861,
	299, 861,
	300, 861,
	301, 861,
	302, 861,
	303, 861,
	304, 861,
	305, 861,
	306, 861,
	307, 861,
	309, 861,
	310, 861,
	311, 861,
	312, 861,
	314, 861,
	315, 861,
	316, 861,
	317, 861,
	319, 861,
	320, 861,
	321, 861,
	322, 861,
	323, 861,
	324, 861,
	325, 861,
	326, 861,
	327, 861,
	329, 861,
	330, 861,
	332, 861,
	333, 861,
	335, 861,
	336, 861,
	337, 861,
	338, 861,
	339, 861,
	340, 861,
	341, 861,
	342, 861,
	344, 861,
	345, 861,
	346, 861,
	349, 861,
	350, 861,
	351, 861,
	352, 861,
	354, 861,
	355, 861,
	356, 861,
	357, 861,
	360, 861,
	361, 861,
	362, 861,
	363, 861,
	365, 861,
	367, 861,
	368, 861,
	369, 861,
	370, 861,
	371, 861,
	372, 861,
	375, 861,
	376, 861,
	381, 861,
	382, 861,
	383, 861,
	384, 861,
	385, 861,
	386, 861,
	-2, 0,
	-1, 132,
	112, 832,
	124, 832,
	175, 832,
	201, 832,
	230, 832,
	238, 832,
	358, 832,
	-2, 825,
	-1, 137,
	1, 755,
	181, 755,
	259, 755,
	263, 755,
	412, 755,
	413, 755,
	-2, 0,
	-1, 139,
	1, 755,
	412, 755,
	413, 755,
	-2, 0,
	-1, 140,
	1, 755,
	412, 755,
	413, 755,
	-2, 0,
	-1, 141,
	1, 759,
	412, 759,
	413, 759,
	-2, 0,
	-1, 167,
	4, 868,
	5, 868,
	6, 868,
	7, 868,
	8, 868,
	9, 868,
	20, 868,
	21, 868,
	22, 868,
	23, 868,
	25, 868,
	30, 868,
	31, 868,
	35, 868,
	36, 868,
	37, 868,
	38, 868,
	39, 868,
	40, 868,
	41, 868,
	42, 868,
	43, 868,
	44, 868,
	46, 868,
	47, 868,
	48, 868,
	49, 868,
	50, 868,
	51, 868,
	52, 868,
	53, 868,
	54, 868,
	55, 868,
	56, 868,
	58, 868,
	59, 868,
	61, 868,
	63, 868,
	64, 868,
	65, 868,
	66, 868,
	67, 868,
	69, 868,
	70, 868,
	71, 868,
	72, 868,
	74, 868,
	76, 868,
	77, 868,
	79, 868,
	80, 868,
	81, 868,
	82, 868,
	83, 868,
	84, 868,
	85, 868,
	86, 868,
	88, 868,
	89, 868,
	90, 868,
	91, 868,
	92, 868,
	93, 868,
	94, 868,
	95, 868,
	96, 868,
	97, 868,
	98, 868,
	99, 868,
	101, 868,
	103, 868,
	106, 868,
	107, 868,
	109, 868,
	113, 868,
	114, 868,
	115, 868,
	116, 868,
	117, 868,
	118, 868,
	119, 868,
	120, 868,
	121, 868,
	122, 868,
	123, 868,
	129, 868,
	130, 868,
	131, 868,
	132, 868,
	133, 868,
	135, 868,
	137, 868,
	140, 868,
	141, 868,
	143, 868,
	144, 868,
	146, 868,
	148, 868,
	149, 868,
	150, 868,
	151, 868,
	152, 868,
	153, 868,
	154, 868,
	155, 868,
	156, 868,
	158, 868,
	162, 868,
	164, 868,
	166, 868,
	167, 868,
	168, 868,
	169, 868,
	170, 868,
	171, 868,
	172, 868,
	173, 868,
	174, 868,
	176, 868,
	178, 868,
	179, 868,
	180, 868,
	181, 868,
	182, 868,
	183, 868,
	184, 868,
	185, 868,
	186, 868,
	189, 868,
	190, 868,
	191, 868,
	193, 868,
	194, 868,
	196, 868,
	197, 868,
	198, 868,
	199, 868,
	200, 868,
	202, 868,
	203, 868,
	206, 868,
	208, 868,
	209, 868,
	210, 868,
	211, 868,
	212, 868,
	213, 868,
	214, 868,
	215, 868,
	216, 868,
	217, 868,
	218, 868,
	219, 868,
	220, 868,
	221, 868,
	223, 868,
	224, 868,
	225, 868,
	226, 868,
	227, 868,
	228, 868,
	229, 868,
	231, 868,
	232, 868,
	235, 868,
	236, 868,
	239, 868,
	240, 868,
	241, 868,
	242, 868,
	243, 868,
	244, 868,
	245, 868,
	246, 868,
	247, 868,
	248, 868,
	249, 868,
	250, 868,
	251, 868,
	253, 868,
	254, 868,
	255, 868,
	256, 868,
	257, 868,
	259, 868,
	260, 868,
	261, 868,
	262, 868,
	263, 868,
	264, 868,
	265, 868,
	266, 868,
	268, 868,
	269, 868,
	270, 868,
	271, 868,
	272, 868,
	274, 868,
	275, 868,
	276, 868,
	277, 868,
	278, 868,
	279, 868,
	280, 868,
	282, 868,
	283, 868,
	285, 868,
	286, 868,
	287, 868,
	288, 868,
	289, 868,
	291, 868,
	292, 868,
	293, 868,
	294, 868,
	295, 868,
	296, 868,
	297, 868,
	299, 868,
	300, 868,
	301, 868,
	302, 868,
	303, 868,
	304, 868,
	305, 868,
	306, 868,
	307, 868,
	308, 868,
	309, 868,
	310, 868,
	311, 868,
	312, 868,
	313, 868,
	314, 868,
	315, 868,
	316, 868,
	317, 868,
	319, 868,
	320, 868,
	321, 868,
	322, 868,
	323, 868,
	324, 868,
	325, 868,
	326, 868,
	327, 868,
	329, 868,
	330, 868,
	332, 868,
	333, 868,
	335, 868,
	336, 868,
	337, 868,
	338, 868,
	339, 868,
	340, 868,
	341, 868,
	342, 868,
	344, 868,
	345, 868,
	346, 868,
	349, 868,
	350, 868,
	351, 868,
	352, 868,
	353, 868,
	354, 868,
	355, 868,
	356, 868,
	357, 868,
	360, 868,
	361, 868,
	362, 868,
	363, 868,
	364, 868,
	365, 868,
	367, 868,
	368, 868,
	369, 868,
	370, 868,
	371, 868,
	372, 868,
	375, 868,
	376, 868,
	381, 868,
	382, 868,
	383, 868,
	384, 868,
	385, 868,
	386, 868,
	387, 868,
	395, 868,
	400, 868,
	401, 868,
	402, 868,
	409, 868,
	415, 868,
	-2, 0,
	-1, 170,
	1, 55,
	413, 55,
	-2, 859,
	-1, 585,
	139, 1529,
	347, 1529,
	392, 1529,
	411, 1529,
	-2, 0,
	-1, 586,
	139, 1458,
	347, 1458,
	392, 1458,
	411, 1458,
	-2, 0,
	-1, 588,
	139, 1601,
	347, 1601,
	392, 1601,
	411, 1601,
	-2, 0,
	-1, 590,
	139, 1629,
	347, 1629,
	392, 1629,
	411, 1629,
	-2, 0,
	-1, 597,
	139, 1534,
	347, 1534,
	392, 1534,
	411, 1534,
	-2, 403,
	-1, 631,
	1, 498,
	408, 498,
	410, 498,
	412, 498,
	413, 498,
	-2, 0,
	-1, 632,
	1, 566,
	136, 566,
	408, 566,
	410, 566,
	412, 566,
	413, 566,
	-2, 0,
	-1, 638,
	1, 513,
	408, 513,
	410, 513,
	412, 513,
	413, 513,
	-2, 0,
	-1, 640,
	1, 517,
	408, 517,
	410, 517,
	412, 517,
	413, 517,
	-2, 0,
	-1, 643,
	1, 528,
	408, 528,
	410, 528,
	412, 528,
	413, 528,
	-2, 0,
	-1, 644,
	1, 534,
	408, 534,
	410, 534,
	412, 534,
	413, 534,
	-2, 0,
	-1, 645,
	1, 537,
	408, 537,
	410, 537,
	412, 537,
	413, 537,
	-2, 0,
	-1, 649,
	1, 551,
	408, 551,
	410, 551,
	412, 551,
	413, 551,
	-2, 0,
	-1, 650,
	1, 553,
	408, 553,
	410, 553,
	412, 553,
	413, 553,
	-2, 0,
	-1, 676,
	124, 870,
	201, 870,
	230, 870,
	-2, 828,
	-1, 684,
	124, 869,
	201, 869,
	230, 869,
	-2, 826,
	-1, 711,
	409, 1701,
	-2, 1143,
	-1, 712,
	409, 1702,
	-2, 1144,
	-1, 743,
	409, 1416,
	-2, 1407,
	-1, 744,
	5, 1001,
	409, 1429,
	-2, 1420,
	-1, 745,
	409, 1430,
	-2, 1421,
	-1, 752,
	5, 985,
	-2, 1450,
	-1, 753,
	5, 986,
	-2, 1454,
	-1, 754,
	5, 987,
	-2, 1453,
	-1, 755,
	5, 988,
	-2, 1625,
	-1, 756,
	5, 989,
	-2, 1536,
	-1, 757,
	5, 990,
	-2, 1594,
	-1, 758,
	5, 991,
	-2, 1596,
	-1, 759,
	5, 992,
	-2, 1597,
	-1, 760,
	5, 993,
	-2, 1598,
	-1, 761,
	5, 994,
	-2, 1606,
	-1, 762,
	5, 995,
	-2, 1637,
	-1, 763,
	5, 996,
	-2, 1507,
	-1, 764,
	5, 997,
	-2, 1449,
	-1, 765,
	5, 998,
	-2, 1544,
	-1, 766,
	5, 999,
	-2, 1545,
	-1, 767,
	5, 1000,
	-2, 1510,
	-1, 768,
	5, 1047,
	409, 1047,
	-2, 1670,
	-1, 785,
	5, 1022,
	-2, 1451,
	-1, 786,
	5, 1040,
	-2, 1478,
	-1, 788,
	5, 1014,
	-2, 1494,
	-1, 789,
	5, 1015,
	-2, 1495,
	-1, 790,
	5, 1006,
	-2, 1509,
	-1, 791,
	5, 1007,
	-2, 1511,
	-1, 792,
	5, 1008,
	-2, 1512,
	-1, 793,
	5, 1009,
	-2, 1513,
	-1, 794,
	5, 973,
	-2, 1519,
	-1, 795,
	5, 974,
	-2, 1520,
	-1, 796,
	5, 1037,
	-2, 1615,
	-1, 797,
	5, 1045,
	-2, 1627,
	-1, 798,
	5, 1012,
	-2, 1651,
	-1, 799,
	5, 1039,
	-2, 1652,
	-1, 800,
	5, 1021,
	-2, 1653,
	-1, 801,
	5, 1039,
	-2, 1654,
	-1, 802,
	5, 1039,
	-2, 1655,
	-1, 803,
	5, 1004,
	-2, 1658,
	-1, 804,
	5, 1004,
	-2, 1659,
	-1, 807,
	5, 1029,
	-2, 1663,
	-1, 809,
	5, 1005,
	-2, 1668,
	-1, 810,
	5, 1010,
	-2, 1669,
	-1, 812,
	5, 1004,
	-2, 1673,
	-1, 815,
	5, 1013,
	-2, 1678,
	-1, 816,
	5, 1011,
	-2, 1680,
	-1, 818,
	5, 1041,
	-2, 1682,
	-1, 819,
	5, 1043,
	-2, 1683,
	-1, 822,
	5, 1036,
	-2, 1687,
	-1, 890,
	409, 1429,
	-2, 1420,
	-1, 907,
	274, 1404,
	402, 1404,
	-2, 1403,
	-1, 1047,
	249, 857,
	-2, 683,
	-1, 1056,
	233, 1424,
	-2, 0,
	-1, 1099,
	1, 267,
	408, 267,
	410, 267,
	412, 267,
	413, 267,
	-2, 831,
	-1, 1102,
	4, 1686,
	10, 1686,
	11, 1686,
	13, 1686,
	14, 1686,
	15, 1686,
	16, 1686,
	17, 1686,
	18, 1686,
	20, 1686,
	21, 1686,
	22, 1686,
	23, 1686,
	25, 1686,
	28, 1686,
	30, 1686,
	32, 1686,
	35, 1686,
	36, 1686,
	37, 1686,
	38, 1686,
	39, 1686,
	40, 1686,
	41, 1686,
	42, 1686,
	43, 1686,
	44, 1686,
	46, 1686,
	47, 1686,
	48, 1686,
	49, 1686,
	50, 1686,
	51, 1686,
	54, 1686,
	55, 1686,
	56, 1686,
	58, 1686,
	59, 1686,
	60, 1686,
	63, 1686,
	64, 1686,
	65, 1686,
	66, 1686,
	67, 1686,
	68, 1686,
	69, 1686,
	70, 1686,
	71, 1686,
	72, 1686,
	74, 1686,
	75, 1686,
	76, 1686,
	77, 1686,
	79, 1686,
	80, 1686,
	81, 1686,
	82, 1686,
	90, 1686,
	91, 1686,
	92, 1686,
	93, 1686,
	94, 1686,
	95, 1686,
	96, 1686,
	97, 1686,
	99, 1686,
	101, 1686,
	103, 1686,
	106, 1686,
	107, 1686,
	109, 1686,
	113, 1686,
	114, 1686,
	115, 1686,
	116, 1686,
	117, 1686,
	118, 1686,
	119, 1686,
	120, 1686,
	121, 1686,
	125, 1686,
	126, 1686,
	127, 1686,
	128, 1686,
	129, 1686,
	130, 1686,
	131, 1686,
	132, 1686,
	133, 1686,
	134, 1686,
	135, 1686,
	137, 1686,
	140, 1686,
	141, 1686,
	143, 1686,
	144, 1686,
	146, 1686,
	148, 1686,
	149, 1686,
	150, 1686,
	151, 1686,
	152, 1686,
	153, 1686,
	154, 1686,
	155, 1686,
	156, 1686,
	157, 1686,
	158, 1686,
	159, 1686,
	160, 1686,
	161, 1686,
	162, 1686,
	164, 1686,
	166, 1686,
	167, 1686,
	168, 1686,
	169, 1686,
	170, 1686,
	171, 1686,
	172, 1686,
	173, 1686,
	174, 1686,
	176, 1686,
	178, 1686,
	179, 1686,
	180, 1686,
	181, 1686,
	182, 1686,
	183, 1686,
	184, 1686,
	185, 1686,
	186, 1686,
	187, 1686,
	188, 1686,
	189, 1686,
	190, 1686,
	191, 1686,
	193, 1686,
	194, 1686,
	196, 1686,
	197, 1686,
	198, 1686,
	199, 1686,
	200, 1686,
	202, 1686,
	203, 1686,
	206, 1686,
	207, 1686,
	208, 1686,
	211, 1686,
	212, 1686,
	213, 1686,
	214, 1686,
	215, 1686,
	216, 1686,
	217, 1686,
	218, 1686,
	219, 1686,
	220, 1686,
	223, 1686,
	225, 1686,
	226, 1686,
	227, 1686,
	228, 1686,
	229, 1686,
	231, 1686,
	232, 1686,
	235, 1686,
	236, 1686,
	237, 1686,
	239, 1686,
	240, 1686,
	242, 1686,
	244, 1686,
	245, 1686,
	246, 1686,
	247, 1686,
	248, 1686,
	249, 1686,
	250, 1686,
	251, 1686,
	253, 1686,
	254, 1686,
	255, 1686,
	256, 1686,
	257, 1686,
	259, 1686,
	260, 1686,
	261, 1686,
	262, 1686,
	263, 1686,
	264, 1686,
	265, 1686,
	266, 1686,
	268, 1686,
	269, 1686,
	270, 1686,
	271, 1686,
	272, 1686,
	273, 1686,
	274, 1686,
	275, 1686,
	276, 1686,
	277, 1686,
	278, 1686,
	279, 1686,
	280, 1686,
	282, 1686,
	283, 1686,
	285, 1686,
	286, 1686,
	287, 1686,
	288, 1686,
	289, 1686,
	290, 1686,
	291, 1686,
	292, 1686,
	293, 1686,
	294, 1686,
	295, 1686,
	296, 1686,
	297, 1686,
	299, 1686,
	300, 1686,
	301, 1686,
	302, 1686,
	303, 1686,
	304, 1686,
	305, 1686,
	306, 1686,
	307, 1686,
	309, 1686,
	310, 1686,
	311, 1686,
	312, 1686,
	313, 1686,
	314, 1686,
	315, 1686,
	316, 1686,
	317, 1686,
	319, 1686,
	320, 1686,
	321, 1686,
	322, 1686,
	323, 1686,
	324, 1686,
	325, 1686,
	326, 1686,
	327, 1686,
	329, 1686,
	330, 1686,
	332, 1686,
	333, 1686,
	335, 1686,
	336, 1686,
	337, 1686,
	338, 1686,
	339, 1686,
	340, 1686,
	341, 1686,
	342, 1686,
	344, 1686,
	345, 1686,
	346, 1686,
	349, 1686,
	350, 1686,
	351, 1686,
	352, 1686,
	354, 1686,
	355, 1686,
	356, 1686,
	357, 1686,
	360, 1686,
	361, 1686,
	362, 1686,
	363, 1686,
	365, 1686,
	367, 1686,
	368, 1686,
	369, 1686,
	370, 1686,
	371, 1686,
	372, 1686,
	375, 1686,
	376, 1686,
	381, 1686,
	382, 1686,
	383, 1686,
	384, 1686,
	385, 1686,
	386, 1686,
	387, 1686,
	388, 1686,
	390, 1686,
	391, 1686,
	392, 1686,
	393, 1686,
	394, 1686,
	395, 1686,
	397, 1686,
	398, 1686,
	399, 1686,
	400, 1686,
	401, 1686,
	402, 1686,
	403, 1686,
	404, 1686,
	405, 1686,
	407, 1686,
	410, 1686,
	411, 1686,
	414, 1686,
	415, 1686,
	-2, 0,
	-1, 1120,
	139, 1601,
	347, 1601,
	392, 1601,
	411, 1601,
	-2, 0,
	-1, 1145,
	139, 1629,
	347, 1629,
	392, 1629,
	411, 1629,
	-2, 0,
	-1, 1146,
	181, 767,
	259, 767,
	263, 767,
	-2, 390,
	-1, 1221,
	124, 869,
	201, 869,
	230, 869,
	-2, 829,
	-1, 1305,
	112, 833,
	124, 833,
	175, 833,
	201, 833,
	230, 833,
	238, 833,
	358, 833,
	-2, 1184,
	-1, 1351,
	410, 1299,
	-2, 0,
	-1, 1358,
	181, 767,
	259, 767,
	263, 767,
	-2, 762,
	-1, 1387,
	410, 1299,
	-2, 0,
	-1, 1391,
	112, 833,
	124, 833,
	175, 833,
	201, 833,
	230, 833,
	238, 833,
	358, 833,
	-2, 932,
	-1, 1583,
	181, 767,
	259, 767,
	263, 767,
	-2, 392,
	-1, 1689,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1082,
	-1, 1690,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1083,
	-1, 1691,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1084,
	-1, 1692,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1085,
	-1, 1693,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1086,
	-1, 1694,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1087,
	-1, 1695,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1088,
	-1, 1696,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1089,
	-1, 1708,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1101,
	-1, 1709,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1102,
	-1, 1710,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	187, 0,
	188, 0,
	390, 0,
	391, 0,
	392, 0,
	393, 0,
	394, 0,
	-2, 1103,
	-1, 1713,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1108,
	-1, 1719,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1110,
	-1, 1721,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1114,
	-1, 1722,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1115,
	-1, 1723,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1116,
	-1, 1724,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1117,
	-1, 1800,
	5, 1001,
	139, 1310,
	409, 1429,
	-2, 1420,
	-1, 1801,
	139, 1311,
	-2, 1647,
	-1, 1802,
	139, 1312,
	-2, 1533,
	-1, 1803,
	139, 1313,
	-2, 1479,
	-1, 1804,
	139, 1314,
	-2, 1502,
	-1, 1805,
	139, 1315,
	-2, 1532,
	-1, 1806,
	139, 1316,
	-2, 1593,
	-1, 1880,
	1, 933,
	79, 933,
	112, 933,
	124, 933,
	140, 933,
	145, 933,
	147, 933,
	166, 933,
	175, 933,
	184, 933,
	197, 933,
	201, 933,
	216, 933,
	230, 933,
	233, 933,
	238, 933,
	281, 933,
	283, 933,
	358, 933,
	366, 933,
	378, 933,
	379, 933,
	389, 933,
	408, 933,
	410, 933,
	412, 933,
	413, 933,
	414, 933,
	-2, 932,
	-1, 1882,
	409, 1408,
	-2, 1418,
	-1, 1961,
	410, 1367,
	414, 1367,
	-2, 1396,
	-1, 2081,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1109,
	-1, 2082,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1111,
	-1, 2087,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1112,
	-1, 2105,
	243, 1270,
	-2, 1272,
	-1, 2308,
	249, 857,
	-2, 683,
	-1, 2371,
	181, 767,
	259, 767,
	263, 767,
	-2, 389,
	-1, 2386,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1113,
	-1, 2391,
	179, 0,
	180, 0,
	223, 0,
	-2, 1131,
	-1, 2400,
	243, 1271,
	-2, 1273,
	-1, 2449,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1161,
	-1, 2450,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1162,
	-1, 2451,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1163,
	-1, 2455,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1167,
	-1, 2456,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1168,
	-1, 2457,
	13, 0,
	14, 0,
	15, 0,
	390, 0,
	391, 0,
	392, 0,
	-2, 1169,
	-1, 2496,
	409, 1409,
	-2, 1419,
	-1, 2610,
	179, 0,
	180, 0,
	223, 0,
	-2, 1132,
	-1, 2613,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1135,
	-1, 2614,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1137,
	-1, 2757,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1136,
	-1, 2758,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1138,
	-1, 2768,
	179, 0,
	-2, 1170,
	-1, 2856,
	179, 0,
	-2, 1171,
	-1, 2954,
	38, 0,
	156, 0,
	200, 0,
	313, 0,
	387, 0,
	395, 0,
	-2, 1650,
}

const sqlPrivate = 57344

const sqlLast = 55716

var sqlAct = [...]int{

	745, 1750, 2711, 2547, 2953, 2796, 3016, 2962, 2929, 1986,
	2930, 2932, 2916, 2964, 2785, 1994, 2952, 2963, 2421, 2725,
	2031, 2860, 1676, 742, 2075, 1089, 2748, 2564, 2505, 2559,
	1032, 911, 685, 1736, 737, 2665, 734, 1514, 1016, 2322,
	210, 2680, 2569, 2315, 2506, 210, 1963, 2355, 2327, 2357,
	741, 1959, 210, 719, 1224, 1874, 1453, 2317, 1983, 210,
	2181, 210, 2773, 2585, 210, 210, 2222, 210, 210, 926,
	1085, 1995, 1385, 2645, 210, 1466, 2198, 1366, 784, 1053,
	1463, 904, 210, 1390, 1475, 1868, 1749, 920, 468, 1467,
	1962, 1472, 1515, 1417, 1894, 1875, 2209, 516, 2474, 1748,
	1667, 1394, 2180, 2117, 1312, 537, 27, 2861, 1662, 1946,
	513, 2071, 1358, 1309, 1621, 693, 126, 2326, 1885, 1488,
	1608, 1775, 1439, 2291, 1433, 1367, 1401, 1464, 206, 728,
	71, 1837, 2712, 1399, 2234, 1733, 1921, 1920, 1757, 1148,
	877, 1947, 549, 1339, 1960, 913, 1769, 1337, 1082, 1988,
	1100, 1966, 1877, 206, 1860, 1376, 709, 881, 1300, 1225,
	1845, 1607, 210, 210, 859, 595, 1072, 1223, 736, 552,
	1796, 1069, 575, 200, 1482, 126, 589, 205, 132, 2507,
	857, 623, 1357, 2490, 2104, 1987, 2491, 1229, 1490, 133,
	1490, 1490, 2033, 210, 210, 210, 916, 210, 210, 929,
	929, 1948, 689, 3043, 210, 210, 878, 1854, 3037, 568,
	3036, 510, 1854, 3013, 1854, 3010, 561, 2679, 2988, 1447,
	2982, 2333, 2679, 2981, 1854, 1092, 1502, 1854, 2978, 2975,
	2972, 2950, 2979, 2976, 1447, 1447, 2949, 684, 563, 689,
	1447, 2948, 2947, 824, 1386, 1502, 1502, 2911, 879, 2898,
	2891, 2023, 2889, 1447, 2679, 1854, 2679, 699, 2151, 2152,
	2887, 1021, 2858, 2844, 2679, 690, 2023, 2593, 923, 2832,
	2827, 874, 2384, 2679, 1447, 2825, 27, 2815, 2814, 2679,
	2807, 1447, 1447, 907, 1447, 2806, 126, 2779, 2361, 2679,
	2759, 1447, 206, 2334, 2023, 1948, 1240, 1241, 2305, 1273,
	1274, 1275, 1283, 1284, 1285, 677, 2705, 735, 2701, 2678,
	1854, 1772, 1854, 2679, 860, 860, 676, 694, 2612, 2583,
	2477, 1243, 2023, 2576, 1289, 2575, 2486, 2480, 2395, 2576,
	2487, 1854, 1854, 897, 901, 906, 2346, 2195, 2146, 2015,
	2297, 1854, 1854, 861, 2145, 2139, 1242, 2138, 1854, 2140,
	2912, 1854, 1240, 1241, 1262, 1273, 1274, 1275, 1283, 1284,
	1285, 1259, 2108, 2042, 1847, 2022, 1773, 1854, 2109, 2023,
	1276, 2011, 1442, 1447, 2845, 1854, 743, 1243, 1854, 1954,
	1289, 1853, 2157, 1447, 1506, 1854, 1122, 1502, 1507, 1131,
	863, 1447, 864, 2477, 1846, 1586, 2593, 1936, 1883, 2462,
	2397, 2297, 1242, 2074, 2053, 1362, 1752, 1019, 170, 1119,
	1262, 1265, 1266, 1267, 1268, 2116, 1491, 1259, 1491, 1491,
	1248, 909, 1118, 167, 1117, 2335, 1116, 1774, 1771, 1115,
	1114, 1113, 1112, 1111, 1110, 1109, 1108, 1107, 1106, 1105,
	2151, 2152, 1280, 1290, 2336, 1270, 1271, 1272, 1104, 1605,
	1103, 167, 865, 1123, 862, 2167, 683, 682, 681, 169,
	680, 679, 675, 674, 673, 672, 671, 1265, 1266, 1267,
	1268, 670, 669, 1257, 1258, 668, 1248, 210, 210, 210,
	916, 916, 210, 692, 667, 210, 1278, 169, 210, 666,
	665, 661, 660, 1263, 210, 659, 168, 621, 1280, 1290,
	620, 1270, 1271, 1272, 210, 210, 210, 210, 210, 916,
	916, 619, 618, 1776, 617, 616, 916, 615, 614, 1240,
	1241, 1286, 1287, 613, 168, 612, 611, 1991, 610, 1257,
	1258, 609, 544, 161, 134, 1093, 1240, 1241, 2168, 608,
	607, 162, 1278, 39, 1243, 606, 885, 210, 605, 1263,
	604, 1498, 2658, 1489, 1646, 603, 602, 43, 210, 1269,
	1043, 1243, 134, 1123, 2157, 1288, 1958, 1046, 2333, 1242,
	601, 2619, 1058, 1447, 2151, 2152, 1264, 600, 210, 1277,
	599, 584, 583, 1240, 1241, 543, 1242, 582, 581, 210,
	580, 579, 501, 500, 474, 1086, 473, 472, 462, 1281,
	461, 1770, 460, 190, 1240, 1241, 189, 188, 1243, 187,
	186, 185, 184, 183, 545, 1269, 182, 181, 180, 179,
	178, 58, 547, 177, 176, 2028, 59, 175, 916, 1243,
	174, 173, 1264, 1242, 1071, 172, 171, 2167, 2577, 1846,
	2546, 2230, 2114, 1248, 1310, 2063, 690, 2161, 2153, 2154,
	2155, 2156, 2158, 2159, 1242, 1281, 1955, 1950, 61, 1788,
	1248, 1101, 1786, 210, 1123, 1784, 1782, 1611, 1270, 1271,
	1272, 1076, 1079, 1279, 1398, 1389, 1254, 1255, 1261, 1260,
	1256, 1282, 1316, 1253, 1251, 1252, 1244, 1245, 1246, 1247,
	1249, 1250, 1162, 1034, 2151, 2152, 1023, 1236, 2157, 544,
	2969, 2951, 2934, 1146, 2923, 1047, 1050, 1248, 2852, 1222,
	39, 2848, 2846, 2828, 1156, 2742, 1263, 2644, 1160, 1307,
	2168, 2795, 2733, 2643, 43, 2151, 2152, 167, 1248, 1279,
	2642, 2635, 1254, 1255, 1261, 1260, 1256, 1282, 2631, 1253,
	1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 2630, 2629,
	2625, 2624, 543, 1270, 1271, 1272, 2632, 62, 2623, 2622,
	2615, 2592, 2590, 169, 2471, 1143, 2470, 2469, 2407, 2300,
	2296, 2229, 2225, 2191, 2179, 2150, 2147, 2144, 2143, 167,
	1221, 545, 2141, 2166, 135, 64, 2122, 65, 58, 547,
	2121, 2105, 1880, 59, 1236, 1511, 1744, 1235, 873, 1264,
	168, 1263, 1451, 1220, 1450, 167, 1163, 3041, 3024, 161,
	1320, 3023, 1313, 2377, 1303, 169, 546, 162, 2157, 107,
	1033, 2423, 2942, 2937, 2893, 61, 2884, 2162, 2160, 2161,
	2153, 2154, 2155, 2156, 2158, 2159, 2883, 2879, 1990, 2350,
	2878, 169, 1606, 1922, 2872, 2869, 2843, 2842, 690, 2157,
	1738, 2070, 168, 1169, 210, 2791, 2770, 2720, 2716, 210,
	2714, 161, 2700, 2684, 2640, 2594, 2562, 2554, 2553, 162,
	2551, 2526, 677, 2525, 1373, 1232, 1233, 1237, 168, 2151,
	2152, 2515, 2514, 676, 1264, 210, 2482, 161, 2390, 2352,
	134, 1364, 2280, 1240, 1241, 162, 2264, 2244, 2732, 2243,
	2194, 2178, 2131, 2130, 2127, 2101, 1253, 1251, 1252, 1244,
	1245, 1246, 1247, 1249, 1250, 2096, 134, 1745, 1243, 878,
	1340, 1345, 2167, 2030, 62, 1865, 1244, 1245, 1246, 1247,
	1249, 1250, 1852, 1780, 1459, 2025, 1327, 2151, 2152, 1326,
	1325, 1324, 1387, 1242, 1365, 1370, 1371, 1335, 1341, 1356,
	1338, 135, 64, 1355, 65, 1351, 1348, 1240, 1241, 1350,
	1349, 879, 1347, 1388, 2153, 2154, 2155, 2156, 2158, 2159,
	1346, 1343, 167, 1313, 1342, 1246, 1247, 1249, 1250, 1333,
	2059, 1332, 1243, 546, 1331, 1330, 107, 1384, 1329, 1328,
	1383, 1317, 126, 1252, 1244, 1245, 1246, 1247, 1249, 1250,
	1304, 1303, 1142, 2157, 1127, 2168, 1097, 1242, 169, 2863,
	2741, 860, 2617, 690, 2348, 2244, 2589, 1248, 2489, 916,
	210, 2485, 2107, 1866, 929, 1301, 1361, 1359, 1395, 1948,
	1407, 1605, 1416, 1605, 210, 929, 210, 210, 2318, 1363,
	1392, 2738, 1270, 1271, 1272, 168, 1159, 2215, 1596, 1595,
	2041, 1605, 1602, 1412, 161, 1137, 1440, 210, 210, 2596,
	2595, 2157, 162, 2492, 210, 1389, 210, 1787, 210, 1460,
	1785, 1605, 210, 1783, 1781, 1353, 2167, 1218, 2151, 2152,
	2821, 1354, 2284, 134, 1471, 2279, 2155, 2156, 2158, 2159,
	1263, 2275, 2263, 2186, 2185, 2040, 2849, 2847, 1330, 1505,
	1330, 1592, 2184, 1322, 2080, 855, 1579, 1155, 206, 2524,
	1924, 1352, 2162, 2160, 2161, 2153, 2154, 2155, 2156, 2158,
	2159, 210, 210, 210, 210, 2033, 1512, 1468, 2794, 916,
	2363, 210, 210, 2274, 2167, 210, 210, 1429, 856, 2774,
	1987, 210, 1599, 2425, 1581, 2970, 2112, 1758, 1479, 1477,
	1336, 2980, 2977, 2329, 1569, 2501, 2926, 1212, 2560, 2168,
	2016, 195, 1520, 929, 3003, 507, 1456, 2692, 509, 480,
	2897, 1402, 210, 1264, 1403, 2043, 1198, 210, 3040, 1509,
	210, 3004, 2820, 210, 2819, 210, 1772, 210, 1571, 210,
	1601, 210, 1210, 2971, 851, 849, 1493, 1446, 847, 1495,
	2373, 210, 1497, 210, 1071, 872, 1500, 845, 1197, 2817,
	206, 210, 210, 210, 1319, 2816, 2709, 2168, 1631, 206,
	1540, 2540, 1573, 2535, 1486, 2534, 2498, 2497, 2126, 2125,
	1413, 842, 1211, 2124, 2123, 1481, 506, 2083, 2014, 210,
	2349, 1773, 1484, 929, 1445, 1731, 1941, 1600, 508, 479,
	688, 1593, 1935, 1931, 1157, 1912, 1404, 1410, 1583, 885,
	1720, 1360, 1018, 1729, 1832, 1831, 1830, 1406, 206, 2153,
	2154, 2155, 2156, 2158, 2159, 1520, 1520, 1678, 1411, 1984,
	1649, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 1133,
	2851, 1638, 1604, 1510, 1640, 1508, 1887, 1143, 663, 1158,
	1643, 1046, 1774, 1771, 1570, 1896, 1580, 2529, 1036, 2896,
	1307, 2026, 1887, 687, 558, 703, 490, 929, 1945, 1762,
	1609, 1871, 1644, 1886, 1597, 2160, 2161, 2153, 2154, 2155,
	2156, 2158, 2159, 1668, 1675, 1794, 1819, 1614, 1613, 1645,
	1395, 2545, 2093, 2798, 1799, 1799, 1953, 573, 1810, 1812,
	2945, 1817, 1250, 1620, 1725, 1735, 1776, 509, 1840, 574,
	2091, 210, 1726, 210, 574, 1727, 1196, 1844, 1209, 1732,
	1742, 1539, 504, 1735, 1402, 1740, 689, 1403, 3019, 1134,
	1239, 1617, 491, 1905, 1648, 1141, 1899, 929, 1776, 210,
	1647, 210, 2517, 1485, 2908, 2995, 196, 1408, 210, 929,
	1753, 2417, 475, 210, 1666, 1193, 1928, 505, 677, 2325,
	210, 677, 677, 1458, 878, 1758, 210, 1136, 1755, 1658,
	1375, 2909, 1659, 1660, 1606, 1922, 1606, 1922, 210, 2324,
	878, 916, 2271, 1172, 690, 1517, 2266, 508, 1829, 690,
	1428, 3003, 210, 929, 1606, 1603, 1879, 503, 210, 1888,
	2875, 2088, 1194, 1520, 1795, 1743, 879, 2324, 1746, 1404,
	210, 1217, 2089, 210, 1606, 1922, 2094, 197, 1431, 1867,
	1406, 1642, 879, 2159, 1872, 1402, 1770, 3026, 1403, 1857,
	502, 1379, 2072, 2073, 1539, 1539, 210, 1776, 210, 484,
	210, 2372, 484, 210, 1728, 210, 686, 210, 1414, 210,
	210, 1730, 210, 916, 916, 916, 1898, 1382, 916, 1929,
	1914, 1915, 1942, 210, 1807, 860, 907, 1909, 1405, 1973,
	927, 1017, 1900, 1902, 690, 1377, 191, 1842, 1943, 2009,
	2010, 1850, 1851, 1841, 1858, 1862, 1863, 1490, 1380, 853,
	463, 1938, 852, 843, 2966, 3017, 843, 1206, 1517, 1517,
	1907, 1392, 199, 1152, 1891, 844, 1913, 1378, 1914, 2256,
	1404, 1923, 1925, 1926, 1927, 1630, 198, 653, 1930, 2005,
	507, 1406, 2374, 210, 2211, 483, 493, 492, 483, 843,
	1035, 2527, 1892, 1164, 2676, 653, 2994, 698, 1989, 2007,
	1989, 2090, 1408, 2255, 2518, 2799, 1334, 1884, 2092, 2414,
	1408, 1298, 1584, 194, 2536, 698, 3018, 1897, 1975, 2673,
	1932, 2018, 929, 1408, 210, 2754, 196, 2012, 2283, 2765,
	210, 1135, 126, 210, 1381, 1207, 2261, 1432, 2823, 126,
	664, 1153, 2365, 2750, 1993, 1154, 3020, 2129, 192, 1892,
	2000, 506, 1861, 210, 210, 210, 557, 210, 2006, 2257,
	2674, 2967, 2085, 1101, 1878, 654, 1933, 2017, 2013, 2002,
	2415, 2003, 1539, 2004, 1741, 1998, 210, 2027, 195, 2259,
	1734, 689, 2598, 654, 1436, 2584, 2057, 1132, 193, 2058,
	2604, 480, 2046, 2036, 480, 2037, 2029, 197, 1238, 1208,
	1616, 1173, 1892, 1140, 2048, 2965, 478, 1181, 1341, 478,
	1348, 1408, 3002, 2368, 3000, 3027, 2993, 2210, 2724, 2258,
	2722, 2032, 1981, 1338, 2065, 2035, 1979, 2676, 2968, 477,
	464, 1405, 477, 2749, 2049, 2044, 1517, 1400, 2008, 1462,
	1372, 476, 1130, 1147, 476, 1121, 2047, 471, 1174, 2060,
	2099, 1171, 2673, 2062, 126, 2666, 1776, 2102, 126, 2458,
	1227, 1228, 2086, 2755, 885, 2638, 485, 1717, 2664, 485,
	2288, 479, 509, 2668, 479, 1491, 2119, 2120, 2292, 1444,
	885, 481, 199, 2669, 481, 2809, 2670, 504, 655, 2808,
	2789, 1152, 2866, 2674, 3032, 2691, 198, 2067, 2367, 2500,
	2069, 696, 2690, 653, 2688, 2115, 655, 2240, 2236, 465,
	1982, 1980, 2364, 1480, 1470, 1469, 1465, 1408, 2667, 1461,
	2672, 2751, 505, 698, 2413, 2917, 1635, 202, 2223, 2675,
	1916, 499, 1405, 194, 1587, 1591, 2177, 1226, 2565, 1654,
	2726, 2790, 2246, 1438, 1957, 2245, 1840, 1840, 1840, 2078,
	2212, 2193, 508, 494, 466, 1227, 1856, 697, 1855, 929,
	1956, 1437, 503, 2084, 2205, 2196, 1228, 566, 192, 1153,
	2203, 2204, 687, 1154, 2298, 210, 2459, 1057, 210, 690,
	560, 656, 1056, 2460, 2366, 1715, 1718, 210, 1434, 2639,
	3, 654, 2548, 1589, 878, 210, 210, 210, 195, 656,
	3007, 210, 878, 878, 210, 2111, 878, 1590, 193, 1435,
	2224, 210, 210, 210, 210, 210, 2669, 657, 2227, 2670,
	3031, 2671, 1152, 210, 1068, 2689, 1655, 2687, 1066, 1714,
	210, 2713, 1226, 2219, 2287, 657, 879, 1520, 1179, 542,
	35, 2787, 210, 916, 879, 879, 210, 2237, 879, 1917,
	1918, 2646, 929, 2672, 729, 2475, 210, 1779, 2721, 2200,
	2218, 929, 2675, 1203, 3009, 690, 929, 2207, 2208, 929,
	2214, 2213, 2788, 841, 2228, 2769, 2188, 2189, 2190, 210,
	2637, 210, 2197, 210, 1201, 210, 916, 916, 916, 2217,
	210, 1375, 210, 2220, 207, 2241, 210, 2293, 1191, 469,
	1153, 210, 2265, 210, 1154, 1189, 486, 2544, 1187, 2182,
	210, 2389, 2142, 512, 655, 553, 1185, 2183, 512, 207,
	2231, 553, 571, 2272, 2262, 210, 1407, 916, 578, 2320,
	1046, 1020, 2095, 2276, 541, 34, 598, 2281, 2242, 2226,
	1418, 2034, 1716, 2331, 210, 210, 2248, 565, 2252, 2253,
	1407, 2260, 1379, 2278, 2671, 1940, 1911, 1422, 1379, 2267,
	559, 895, 1452, 2354, 1216, 2302, 2306, 2270, 1520, 2277,
	2299, 1183, 2268, 1046, 210, 2233, 2269, 2282, 1382, 1440,
	1892, 2343, 495, 2319, 1382, 1440, 1177, 2303, 1064, 210,
	2247, 2294, 2250, 1215, 2310, 1128, 1377, 1778, 1419, 1067,
	1202, 2360, 1859, 1065, 1629, 695, 1166, 656, 1622, 1380,
	35, 540, 31, 846, 848, 1380, 512, 512, 539, 77,
	2061, 1200, 538, 76, 891, 929, 2347, 2337, 1378, 496,
	2038, 690, 2338, 2339, 2340, 1190, 2341, 2342, 1632, 2961,
	210, 1520, 1188, 657, 2392, 1186, 1539, 469, 469, 469,
	2542, 921, 469, 1184, 2353, 2330, 1572, 1323, 207, 1022,
	1423, 2409, 2410, 2411, 1443, 497, 2371, 498, 2273, 535,
	22, 2369, 2370, 2914, 2662, 536, 23, 2522, 1520, 1520,
	2328, 2376, 2378, 2520, 2375, 534, 29, 126, 2499, 2328,
	2380, 533, 20, 2382, 2314, 1381, 1520, 1520, 2396, 531,
	19, 1381, 2312, 1985, 2472, 34, 1977, 1976, 1182, 1974,
	1517, 2307, 2308, 2309, 2398, 532, 18, 1424, 1425, 1972,
	521, 15, 1504, 1176, 2401, 1063, 1420, 1503, 1501, 210,
	522, 16, 1520, 1499, 885, 1496, 1668, 2429, 1628, 210,
	1165, 929, 885, 885, 2428, 2426, 885, 2422, 1494, 1492,
	1441, 2464, 2345, 1421, 1668, 2438, 2416, 2418, 2419, 878,
	1430, 2435, 2437, 1427, 2433, 1415, 1409, 2494, 2402, 530,
	56, 2316, 529, 55, 2837, 2463, 2533, 1539, 2512, 520,
	54, 1230, 31, 3004, 2488, 528, 12, 2740, 2739, 77,
	2468, 2513, 2539, 76, 2465, 519, 49, 526, 46, 2076,
	1610, 879, 2473, 527, 47, 2511, 1458, 2586, 210, 210,
	2531, 210, 2478, 2479, 2839, 2481, 210, 2543, 2476, 2493,
	126, 1887, 2531, 929, 2484, 929, 2531, 2530, 916, 1426,
	2574, 2531, 1903, 1904, 2495, 2707, 518, 48, 1887, 2537,
	22, 1517, 1944, 2538, 210, 2555, 23, 2503, 2541, 1901,
	1539, 1939, 2578, 1934, 1910, 1448, 29, 525, 7, 2567,
	2039, 1231, 20, 524, 6, 2877, 1454, 2681, 2077, 1175,
	19, 2854, 210, 2571, 1914, 929, 210, 210, 929, 210,
	2521, 878, 2523, 2647, 2566, 2570, 18, 1539, 1539, 869,
	2528, 15, 1919, 2550, 2558, 929, 1906, 2557, 2549, 523,
	37, 16, 2552, 1577, 1578, 1539, 1539, 1234, 2561, 1937,
	2563, 870, 2572, 1908, 1517, 2579, 2602, 548, 2606, 2568,
	2587, 2580, 2913, 879, 517, 36, 2719, 1992, 2597, 1240,
	1241, 469, 1042, 469, 210, 1520, 469, 1978, 2611, 921,
	56, 1539, 1061, 55, 2599, 1971, 2200, 1843, 469, 2603,
	54, 1517, 1517, 1582, 1243, 1513, 12, 3015, 469, 469,
	469, 469, 921, 2600, 1240, 1241, 49, 2344, 46, 1517,
	1517, 3030, 2151, 2152, 47, 1310, 2591, 1240, 1241, 1242,
	2607, 2051, 2050, 1168, 567, 2588, 2420, 1892, 1167, 2351,
	2051, 871, 2052, 210, 1612, 1809, 1768, 1205, 2620, 2412,
	1204, 598, 1320, 929, 210, 1517, 2636, 48, 210, 210,
	210, 1318, 469, 2736, 1242, 2582, 1214, 1213, 1199, 1195,
	1192, 1178, 1139, 1998, 878, 1585, 210, 854, 7, 662,
	2797, 210, 1138, 210, 6, 2254, 210, 210, 210, 210,
	210, 1180, 2216, 598, 1864, 210, 210, 916, 2512, 2651,
	2907, 929, 2626, 2685, 1657, 916, 2661, 929, 2128, 2657,
	2682, 2513, 2649, 2650, 210, 210, 879, 2654, 2652, 2859,
	37, 2764, 1777, 1321, 1677, 2511, 52, 916, 2508, 722,
	2708, 2663, 2686, 2502, 1965, 2512, 1964, 210, 2655, 2648,
	2715, 932, 2695, 2696, 1594, 36, 2512, 746, 2513, 885,
	1798, 2723, 1669, 748, 210, 210, 916, 916, 2728, 2513,
	1518, 2653, 2511, 751, 750, 749, 2718, 469, 1519, 2730,
	2717, 2737, 2753, 2511, 2702, 1344, 747, 2703, 1516, 1098,
	929, 885, 1996, 2727, 1046, 2735, 2706, 2729, 641, 1598,
	1739, 1756, 2756, 2660, 1539, 2110, 1314, 714, 1759, 726,
	885, 725, 2744, 2743, 1754, 1126, 713, 2221, 2323, 2776,
	2731, 1653, 885, 2068, 2763, 1650, 885, 2694, 2519, 929,
	482, 885, 2148, 210, 2699, 210, 1820, 929, 210, 1096,
	1826, 1818, 1814, 1219, 1299, 1520, 210, 2659, 2771, 1892,
	1997, 2734, 929, 1161, 883, 2332, 2805, 2024, 2056, 2784,
	1661, 868, 867, 866, 2931, 2928, 2752, 1588, 1517, 2045,
	2693, 1292, 2818, 2512, 2802, 2801, 718, 2803, 2698, 2782,
	2201, 885, 2777, 2778, 2301, 1040, 2513, 1291, 850, 2868,
	1882, 1151, 1150, 210, 2800, 210, 1149, 1520, 916, 467,
	2511, 2239, 3025, 210, 1892, 2876, 2780, 2516, 2512, 2925,
	2512, 166, 163, 2824, 2512, 2826, 2531, 165, 164, 2830,
	2286, 2513, 80, 2513, 33, 929, 2328, 2513, 32, 2835,
	106, 105, 2704, 2822, 104, 2511, 103, 2511, 102, 101,
	2781, 2511, 2841, 2836, 100, 210, 99, 98, 97, 96,
	2840, 210, 95, 94, 2834, 2811, 93, 92, 210, 2838,
	91, 90, 2570, 2850, 89, 88, 87, 2853, 578, 2783,
	2871, 86, 2865, 512, 85, 1520, 84, 83, 2857, 82,
	594, 591, 79, 2812, 2813, 78, 30, 210, 210, 2864,
	25, 2745, 2746, 110, 210, 2829, 111, 891, 24, 469,
	75, 2888, 2890, 74, 28, 916, 2862, 17, 2874, 11,
	210, 21, 1892, 916, 916, 131, 2873, 130, 210, 129,
	210, 2882, 210, 128, 885, 127, 2910, 14, 2531, 13,
	125, 2892, 124, 123, 2895, 122, 2894, 121, 2901, 2902,
	210, 120, 2903, 210, 2920, 2885, 210, 899, 929, 10,
	2900, 8, 925, 109, 1539, 2935, 2936, 9, 2747, 2362,
	2933, 885, 2938, 2940, 68, 2939, 69, 2941, 2922, 26,
	2927, 42, 41, 40, 2904, 108, 2905, 157, 2946, 156,
	155, 154, 151, 210, 153, 2944, 150, 2512, 152, 149,
	119, 159, 2943, 158, 147, 145, 2958, 146, 885, 2921,
	2513, 148, 2960, 2054, 2959, 144, 1539, 143, 210, 885,
	160, 2984, 118, 2985, 2511, 2986, 210, 117, 1517, 116,
	115, 114, 2881, 113, 5, 2973, 2, 1, 0, 2992,
	0, 2989, 210, 0, 207, 0, 2512, 0, 2990, 2991,
	0, 2987, 0, 0, 2899, 0, 2998, 2999, 1022, 2513,
	469, 1457, 3001, 514, 0, 3006, 3005, 0, 3011, 3012,
	2933, 3008, 0, 2511, 2983, 0, 2880, 0, 0, 3014,
	1517, 1476, 1476, 0, 0, 0, 544, 0, 469, 0,
	469, 3021, 469, 3022, 1539, 0, 512, 39, 0, 3028,
	3029, 0, 0, 0, 0, 3033, 3034, 0, 0, 0,
	0, 43, 3035, 0, 0, 0, 0, 0, 3038, 3039,
	0, 0, 0, 3042, 0, 0, 3044, 0, 0, 1820,
	1820, 0, 0, 0, 0, 0, 885, 0, 0, 543,
	0, 0, 0, 0, 0, 598, 207, 1022, 553, 0,
	2097, 2098, 0, 0, 0, 207, 1022, 0, 1517, 921,
	469, 0, 0, 0, 0, 598, 885, 0, 545, 0,
	0, 885, 0, 885, 0, 58, 547, 885, 211, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 0, 0, 0,
	0, 469, 0, 0, 207, 1998, 0, 469, 0, 469,
	0, 469, 61, 469, 0, 469, 0, 1820, 1820, 1820,
	0, 0, 0, 0, 0, 1633, 0, 1634, 0, 0,
	0, 0, 0, 0, 0, 469, 469, 469, 2174, 2175,
	2176, 1038, 0, 0, 0, 0, 1055, 0, 0, 0,
	2202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 1075, 1075,
	1075, 925, 0, 0, 0, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 64,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 2290, 0, 0, 0, 0, 2290, 0, 167,
	2295, 0, 0, 142, 0, 0, 0, 0, 38, 0,
	546, 0, 0, 107, 917, 0, 0, 930, 930, 39,
	137, 0, 0, 0, 0, 578, 0, 512, 0, 0,
	0, 0, 0, 43, 0, 169, 0, 0, 0, 885,
	0, 0, 891, 0, 0, 0, 0, 45, 139, 0,
	0, 0, 0, 512, 0, 512, 0, 0, 891, 44,
	0, 50, 469, 0, 0, 0, 0, 1895, 0, 0,
	0, 0, 168, 0, 469, 0, 0, 0, 0, 0,
	469, 161, 51, 0, 0, 0, 53, 0, 0, 162,
	57, 0, 469, 140, 0, 0, 0, 58, 70, 0,
	0, 0, 59, 0, 0, 0, 469, 0, 0, 0,
	515, 0, 1949, 0, 0, 0, 0, 0, 0, 0,
	1820, 1820, 0, 0, 1961, 60, 0, 1022, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 2387, 2388, 0, 0, 0, 0, 0, 0, 0,
	1895, 0, 512, 0, 469, 0, 2405, 469, 0, 469,
	0, 469, 0, 469, 469, 918, 921, 0, 931, 931,
	0, 0, 0, 0, 0, 0, 0, 1895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1820,
	1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820,
	1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 0, 1820,
	2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448,
	2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 0,
	2461, 0, 0, 62, 0, 0, 0, 553, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	135, 64, 0, 65, 0, 66, 0, 0, 0, 141,
	0, 0, 2496, 0, 67, 0, 0, 0, 469, 0,
	0, 167, 0, 0, 1022, 0, 0, 1022, 0, 1396,
	0, 0, 81, 0, 0, 107, 0, 0, 917, 917,
	0, 0, 0, 0, 138, 0, 0, 469, 469, 469,
	0, 469, 0, 0, 0, 0, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 917, 917, 0,
	469, 0, 0, 0, 917, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 1240, 1241, 0,
	0, 1310, 0, 0, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 0, 544,
	0, 162, 1243, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 0, 0, 1374, 1240, 1241, 0, 0,
	0, 0, 134, 0, 43, 4, 0, 1242, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 1017,
	0, 1243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 0, 0, 0, 0, 0, 0, 2151,
	2152, 0, 2169, 2170, 2171, 0, 1242, 0, 0, 0,
	1455, 0, 0, 0, 1262, 0, 917, 2609, 0, 918,
	918, 545, 0, 0, 0, 0, 0, 0, 58, 547,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 0,
	1483, 1248, 1483, 0, 0, 0, 0, 0, 918, 918,
	0, 544, 0, 0, 0, 918, 0, 2166, 0, 0,
	0, 0, 39, 0, 0, 61, 1270, 1271, 1272, 0,
	0, 1265, 1266, 1267, 1268, 0, 43, 0, 0, 0,
	1248, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	891, 891, 701, 0, 891, 0, 0, 0, 0, 512,
	0, 0, 512, 0, 543, 1270, 1271, 1272, 0, 0,
	1575, 512, 0, 0, 1263, 0, 0, 0, 0, 469,
	1895, 2235, 0, 2157, 0, 1895, 0, 0, 2235, 0,
	0, 0, 0, 545, 0, 1895, 2235, 1895, 2235, 2235,
	58, 547, 0, 0, 0, 59, 0, 469, 0, 0,
	0, 1618, 0, 1263, 1457, 0, 0, 1623, 2710, 1624,
	0, 1625, 0, 1626, 62, 1627, 469, 918, 2172, 0,
	921, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	469, 0, 0, 0, 0, 1636, 1055, 0, 0, 0,
	0, 135, 64, 2019, 65, 0, 2167, 1264, 0, 0,
	0, 0, 0, 1476, 39, 1476, 0, 469, 0, 469,
	0, 0, 167, 0, 469, 0, 469, 0, 43, 1269,
	921, 0, 0, 546, 0, 1895, 107, 512, 0, 0,
	0, 2761, 0, 0, 1895, 0, 1264, 0, 0, 0,
	0, 0, 0, 1820, 0, 0, 2020, 0, 169, 1022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2768, 0, 0, 0, 2358, 1022,
	2761, 0, 0, 0, 0, 2021, 62, 0, 1677, 2168,
	1820, 0, 0, 547, 0, 168, 0, 0, 0, 0,
	0, 0, 0, 1677, 161, 0, 0, 0, 2379, 0,
	0, 2792, 162, 135, 64, 0, 65, 1244, 1245, 1246,
	1247, 1249, 1250, 469, 0, 0, 0, 0, 0, 61,
	0, 0, 0, 134, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 107, 0,
	0, 0, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247,
	1249, 1250, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 2424, 0, 1017, 0, 0, 0,
	0, 0, 1881, 0, 0, 1820, 0, 0, 0, 2163,
	2164, 2165, 0, 0, 0, 0, 2162, 2160, 2161, 2153,
	2154, 2155, 2156, 2158, 2159, 0, 2856, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 917, 0, 0,
	0, 0, 930, 0, 162, 0, 925, 0, 62, 0,
	1024, 1026, 1029, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 64, 891, 65, 0,
	0, 0, 0, 512, 0, 2151, 2152, 0, 2169, 2170,
	2171, 0, 0, 512, 2001, 0, 167, 1075, 0, 1075,
	0, 1075, 0, 925, 925, 0, 0, 546, 0, 2510,
	107, 0, 0, 0, 0, 0, 0, 2151, 2152, 1677,
	2169, 2170, 2171, 0, 0, 0, 0, 0, 2532, 0,
	0, 0, 169, 0, 0, 2608, 0, 0, 0, 0,
	2532, 0, 0, 2166, 2532, 1125, 0, 917, 0, 2532,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1895, 1476, 0, 1476, 0, 0, 0, 168,
	469, 0, 0, 0, 0, 2166, 0, 0, 161, 701,
	0, 930, 0, 701, 0, 0, 162, 0, 918, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 1895, 891,
	0, 0, 0, 0, 931, 0, 0, 134, 0, 2157,
	0, 723, 72, 0, 0, 0, 0, 0, 2055, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	921, 469, 2173, 469, 0, 0, 0, 0, 0, 0,
	0, 2157, 0, 0, 0, 0, 0, 2064, 925, 2066,
	0, 0, 0, 0, 2172, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 0, 0, 0,
	2079, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2167, 0, 0, 0, 2172, 0, 2627, 0,
	1293, 1294, 1295, 1296, 1297, 0, 0, 0, 918, 0,
	0, 0, 0, 1306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 2167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 930, 0, 0, 678, 0,
	0, 0, 891, 0, 0, 0, 691, 1022, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 0,
	0, 0, 1895, 2235, 1895, 2168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2510,
	1022, 880, 72, 0, 0, 1895, 0, 2235, 0, 0,
	1022, 1022, 469, 1895, 2235, 0, 0, 2168, 0, 469,
	469, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 2510, 930, 1022, 1961,
	0, 0, 0, 0, 0, 0, 0, 2510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1895, 0, 0, 0, 0, 0, 0, 0, 917,
	0, 0, 1368, 1368, 1368, 0, 0, 0, 2358, 2358,
	0, 930, 0, 0, 0, 2163, 2164, 2165, 0, 0,
	0, 0, 2162, 2160, 2161, 2153, 2154, 2155, 2156, 2158,
	2159, 0, 0, 0, 0, 0, 931, 0, 0, 2232,
	0, 0, 0, 0, 0, 0, 0, 2163, 2164, 2165,
	0, 0, 0, 0, 2162, 2160, 2161, 2153, 2154, 2155,
	2156, 2158, 2159, 0, 0, 0, 0, 1055, 0, 0,
	0, 917, 917, 917, 0, 0, 917, 1895, 0, 2235,
	0, 0, 2786, 0, 0, 0, 0, 0, 0, 0,
	469, 0, 0, 0, 2510, 0, 0, 0, 0, 0,
	2285, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 931, 0,
	0, 0, 0, 0, 2532, 0, 0, 2304, 0, 2510,
	0, 2510, 0, 0, 2311, 2510, 2313, 469, 0, 469,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	918, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2151, 2152, 0, 2169, 2170, 2171, 0, 0,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 2424,
	2394, 0, 0, 0, 0, 512, 0, 0, 0, 0,
	0, 0, 2786, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 918, 918, 918, 0, 0, 918, 0, 0,
	2166, 1895, 2235, 2383, 0, 0, 2532, 0, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2235, 0, 0, 0, 0, 0,
	0, 0, 1022, 0, 1022, 0, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 691, 0, 0,
	0, 0, 0, 0, 2918, 0, 0, 1022, 0, 0,
	469, 0, 0, 701, 701, 0, 2157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2424, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 0, 0, 0, 0, 2510, 0, 0,
	1895, 0, 1651, 0, 1656, 0, 0, 0, 0, 2167,
	1663, 0, 0, 0, 2151, 2152, 2786, 2169, 2170, 2171,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 0, 1719, 930, 1721, 1722,
	1723, 1724, 0, 1240, 1241, 0, 1273, 1274, 1275, 1283,
	1284, 1285, 2166, 0, 0, 0, 0, 1747, 0, 0,
	0, 1276, 0, 0, 1306, 0, 0, 0, 1243, 0,
	0, 1289, 2168, 0, 0, 678, 0, 0, 0, 0,
	2556, 0, 0, 0, 1789, 1790, 1791, 1792, 1793, 0,
	0, 0, 0, 1242, 0, 0, 0, 1302, 0, 1305,
	0, 1262, 0, 0, 0, 1816, 1311, 1828, 1259, 0,
	0, 1833, 1838, 0, 0, 0, 0, 0, 2157, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 2601, 0, 925, 930, 0, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 1266,
	1267, 1268, 0, 2172, 917, 917, 917, 1248, 0, 0,
	0, 0, 2163, 2164, 2165, 0, 0, 0, 0, 2162,
	2160, 2161, 2153, 2154, 2155, 2156, 2158, 2159, 931, 1280,
	1290, 2167, 1270, 1271, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 1951, 1952, 0, 0,
	0, 0, 1286, 1287, 0, 0, 0, 0, 0, 0,
	1257, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1240, 1241, 1288, 0, 72, 0,
	1283, 1284, 1285, 0, 1391, 0, 0, 0, 0, 0,
	1277, 0, 918, 0, 2168, 0, 0, 0, 0, 1243,
	0, 931, 1289, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 931, 0, 0, 931, 0,
	0, 0, 2697, 930, 1242, 0, 1269, 0, 0, 1055,
	0, 0, 1262, 0, 0, 918, 918, 918, 0, 0,
	0, 2151, 2152, 1264, 2169, 2170, 2171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2393,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 918, 2151, 2152, 0,
	2169, 2170, 2171, 0, 0, 0, 0, 0, 0, 1265,
	1266, 1267, 1268, 0, 2163, 2164, 2165, 0, 1248, 2166,
	0, 2162, 2160, 2161, 2153, 2154, 2155, 2156, 2158, 2159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1280, 1290, 0, 1270, 1271, 1272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2166, 0, 0, 0, 930,
	1279, 0, 0, 1254, 1255, 1261, 1260, 1256, 1282, 0,
	1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 0,
	0, 0, 0, 0, 1278, 2157, 0, 2137, 0, 0,
	2793, 1263, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2081, 2082, 0, 0, 0, 0, 2087, 0, 0, 0,
	0, 2157, 0, 0, 0, 0, 0, 0, 0, 0,
	2172, 0, 0, 0, 0, 2100, 0, 2831, 0, 2833,
	0, 930, 0, 930, 0, 0, 917, 0, 2106, 0,
	0, 0, 0, 0, 2113, 0, 0, 1269, 2167, 2118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1264, 0, 2132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 2167, 0, 930, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	931, 0, 0, 930, 0, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1838, 1838, 1838, 0, 0, 0, 0, 0, 2886, 0,
	0, 2168, 1368, 0, 0, 0, 0, 0, 0, 0,
	2206, 678, 0, 0, 678, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2906, 0, 0, 0,
	0, 1279, 0, 0, 0, 0, 0, 2168, 0, 1282,
	0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250,
	2924, 0, 931, 0, 931, 0, 0, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1737, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 691, 0, 0, 0, 0,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2163, 2164, 2165, 931, 0, 0, 931, 2162, 2160,
	2161, 2153, 2154, 2155, 2156, 2158, 2159, 0, 0, 0,
	0, 0, 0, 0, 931, 917, 0, 0, 0, 930,
	0, 0, 0, 917, 0, 930, 0, 2163, 2164, 2165,
	0, 0, 0, 2321, 2162, 2160, 2161, 2153, 2154, 2155,
	2156, 2158, 2159, 0, 0, 917, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1391, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 917, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 701, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 930, 701,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 2381, 0, 0, 0,
	1663, 0, 931, 0, 0, 0, 2385, 0, 0, 2386,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 2391, 0, 0, 0, 930, 0, 0, 0, 0,
	2399, 0, 0, 0, 72, 0, 72, 0, 2403, 0,
	930, 0, 2206, 0, 0, 0, 918, 0, 0, 0,
	931, 0, 0, 0, 918, 0, 931, 0, 72, 0,
	0, 2430, 2431, 2432, 0, 72, 0, 0, 2434, 0,
	0, 0, 0, 0, 0, 2436, 918, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 918, 0, 2466, 2467,
	0, 0, 0, 930, 0, 0, 1240, 1241, 0, 1273,
	1274, 1275, 1283, 1284, 1285, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 1276, 0, 0, 2483, 0, 0,
	0, 1243, 0, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1242, 0, 931, 2504,
	0, 0, 0, 0, 1262, 0, 931, 0, 0, 0,
	72, 1259, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 931, 0, 917, 0, 0, 0, 0, 0, 0,
	0, 917, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1266, 1267, 1268, 0, 930, 918, 0, 0,
	1248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1368, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285,
	0, 2581, 1280, 1290, 931, 1270, 1271, 1272, 0, 1276,
	1737, 0, 0, 0, 0, 0, 1243, 0, 0, 1289,
	0, 0, 0, 0, 0, 1286, 1287, 0, 0, 0,
	1305, 0, 0, 1257, 1258, 0, 0, 0, 0, 0,
	0, 1242, 0, 0, 0, 0, 1278, 0, 0, 1262,
	0, 0, 0, 1263, 0, 2610, 1259, 0, 0, 2613,
	2614, 0, 0, 2616, 0, 0, 0, 0, 0, 1288,
	2618, 0, 0, 0, 2621, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 918, 0, 0, 0, 0, 0,
	0, 2628, 918, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1265, 1266, 1267, 1268,
	0, 0, 0, 0, 0, 1248, 1305, 0, 0, 1269,
	0, 0, 0, 0, 0, 0, 0, 931, 2641, 0,
	0, 0, 0, 0, 0, 0, 1264, 1280, 1290, 880,
	1270, 1271, 1272, 0, 0, 0, 0, 880, 880, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 1281,
	1286, 1287, 0, 0, 0, 0, 0, 0, 1257, 1258,
	0, 0, 0, 0, 0, 2683, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 1279, 0, 0, 1254, 1255, 1261, 1260,
	1256, 1282, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247,
	1249, 1250, 0, 0, 1269, 0, 0, 0, 0, 0,
	2136, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	72, 1264, 0, 0, 2757, 2758, 0, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 0, 2767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2775, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 2810, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251,
	1252, 1244, 1245, 1246, 1247, 1249, 1250, 0, 0, 0,
	0, 0, 0, 0, 0, 2135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2867, 0, 0,
	2870, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2957, 2957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2974, 0, 0, 0, 1767, 0, 744, 732,
	733, 730, 731, 721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 1764, 216,
	2957, 0, 0, 0, 779, 724, 880, 0, 0, 217,
	218, 219, 420, 798, 764, 799, 752, 785, 800, 0,
	223, 754, 753, 226, 227, 228, 727, 778, 801, 802,
	426, 0, 229, 783, 0, 769, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 772, 770, 771,
	775, 2957, 773, 774, 245, 246, 470, 247, 786, 249,
	803, 804, 710, 250, 0, 251, 0, 252, 1765, 0,
	787, 254, 0, 255, 0, 0, 0, 715, 256, 257,
	259, 260, 258, 261, 805, 806, 739, 826, 0, 0,
	0, 0, 0, 262, 263, 807, 788, 789, 0, 266,
	0, 267, 0, 0, 827, 268, 0, 269, 808, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 780, 782,
	829, 0, 763, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 809, 767, 790, 791, 792, 793, 810, 880,
	768, 0, 285, 830, 831, 286, 287, 288, 832, 794,
	795, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	811, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 712, 711, 302, 303, 305, 756, 304,
	835, 307, 308, 310, 309, 707, 0, 836, 740, 781,
	311, 812, 312, 313, 0, 765, 766, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 813, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 814, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 815, 335,
	336, 0, 337, 338, 339, 340, 341, 72, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 716, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 757, 758, 759, 760, 365,
	371, 372, 776, 373, 354, 355, 374, 840, 375, 816,
	761, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	796, 382, 0, 383, 817, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 755, 396, 0, 818, 819,
	797, 0, 0, 398, 399, 820, 821, 738, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 777, 409,
	0, 762, 410, 411, 412, 456, 822, 1763, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 708, 0, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 704, 705, 1766, 0, 0, 0,
	0, 0, 0, 717, 1761, 0, 0, 0, 0, 720,
	0, 72, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1737, 212, 213, 214, 215, 933, 216, 934, 935, 936,
	937, 419, 938, 939, 940, 941, 217, 218, 219, 420,
	421, 220, 422, 221, 222, 423, 942, 223, 224, 225,
	226, 227, 228, 943, 944, 424, 425, 426, 945, 229,
	427, 946, 892, 947, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 948, 239, 0, 240, 241, 949,
	825, 242, 243, 244, 950, 951, 953, 952, 954, 955,
	956, 245, 246, 470, 247, 248, 249, 428, 429, 957,
	250, 958, 251, 959, 252, 960, 961, 253, 254, 962,
	255, 963, 0, 964, 430, 256, 257, 259, 260, 258,
	261, 431, 432, 965, 826, 966, 0, 0, 0, 0,
	262, 263, 433, 264, 265, 0, 266, 967, 267, 968,
	969, 827, 268, 970, 269, 434, 971, 435, 972, 270,
	271, 272, 273, 274, 275, 436, 437, 829, 973, 277,
	0, 0, 0, 284, 974, 276, 975, 828, 278, 438,
	280, 279, 281, 282, 283, 439, 976, 440, 977, 285,
	830, 831, 286, 287, 288, 832, 289, 290, 0, 0,
	291, 292, 293, 978, 295, 294, 979, 441, 833, 296,
	297, 834, 980, 298, 299, 981, 982, 300, 0, 301,
	894, 893, 302, 303, 305, 306, 304, 835, 307, 308,
	310, 309, 983, 984, 836, 985, 442, 311, 443, 312,
	313, 986, 314, 315, 987, 988, 316, 317, 989, 990,
	318, 444, 837, 319, 838, 445, 320, 321, 322, 323,
	324, 325, 326, 991, 327, 446, 328, 447, 329, 992,
	330, 331, 332, 333, 334, 448, 335, 336, 993, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 994, 349, 839, 995, 350, 351, 352, 449,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 996,
	369, 370, 364, 366, 367, 368, 365, 371, 372, 997,
	373, 354, 355, 374, 840, 375, 450, 376, 377, 998,
	386, 378, 379, 380, 356, 381, 384, 385, 382, 999,
	383, 451, 1000, 387, 388, 1001, 389, 390, 391, 392,
	393, 394, 395, 396, 1002, 452, 453, 397, 1003, 1004,
	398, 399, 454, 455, 1005, 400, 401, 402, 403, 1006,
	1007, 404, 405, 406, 408, 1008, 409, 1009, 407, 410,
	411, 412, 456, 457, 1010, 1011, 413, 458, 1012, 1013,
	1014, 1015, 414, 415, 459, 416, 417, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 1869, 0,
	0, 0, 0, 0, 0, 0, 0, 1870, 212, 213,
	214, 215, 933, 216, 934, 935, 936, 937, 419, 938,
	939, 940, 941, 217, 218, 219, 420, 421, 220, 422,
	221, 222, 423, 942, 223, 224, 225, 226, 227, 228,
	943, 944, 424, 425, 426, 945, 229, 427, 946, 892,
	947, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 948, 239, 0, 240, 241, 949, 825, 242, 243,
	244, 950, 951, 953, 952, 954, 955, 956, 245, 246,
	470, 247, 248, 249, 428, 429, 957, 250, 958, 251,
	959, 252, 960, 961, 253, 254, 962, 255, 963, 0,
	964, 430, 256, 257, 259, 260, 258, 261, 431, 432,
	965, 826, 966, 0, 0, 0, 0, 262, 263, 433,
	264, 265, 0, 266, 967, 267, 968, 969, 827, 268,
	970, 269, 434, 971, 435, 972, 270, 271, 272, 273,
	274, 275, 436, 437, 829, 973, 277, 0, 0, 0,
	284, 974, 276, 975, 828, 278, 438, 280, 279, 281,
	282, 283, 439, 976, 440, 977, 285, 830, 831, 286,
	287, 288, 832, 289, 290, 0, 0, 291, 292, 293,
	978, 295, 294, 979, 441, 833, 296, 297, 834, 980,
	298, 299, 981, 982, 300, 0, 301, 894, 893, 302,
	303, 305, 306, 304, 835, 307, 308, 310, 309, 983,
	984, 836, 985, 442, 311, 443, 312, 313, 986, 314,
	315, 987, 988, 316, 317, 989, 990, 318, 444, 837,
	319, 838, 445, 320, 321, 322, 323, 324, 325, 326,
	991, 327, 446, 328, 447, 329, 992, 330, 331, 332,
	333, 334, 448, 335, 336, 993, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 994,
	349, 839, 995, 350, 351, 352, 449, 353, 0, 357,
	358, 359, 360, 361, 362, 363, 996, 369, 370, 364,
	366, 367, 368, 365, 371, 372, 997, 373, 354, 355,
	374, 840, 375, 450, 376, 377, 998, 386, 378, 379,
	380, 356, 381, 384, 385, 382, 999, 383, 451, 1000,
	387, 388, 1001, 389, 390, 391, 392, 393, 394, 395,
	396, 1002, 452, 453, 397, 1003, 1004, 398, 399, 454,
	455, 1005, 400, 401, 402, 403, 1006, 1007, 404, 405,
	406, 408, 1008, 409, 1009, 407, 410, 411, 412, 456,
	457, 1010, 1011, 413, 458, 1012, 1013, 1014, 1015, 414,
	415, 459, 416, 417, 418, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2656, 212, 213, 214, 215,
	933, 216, 934, 935, 936, 937, 419, 938, 939, 940,
	941, 217, 218, 219, 420, 421, 220, 422, 221, 222,
	423, 942, 223, 224, 225, 226, 227, 228, 943, 944,
	424, 425, 426, 945, 229, 427, 946, 892, 947, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 948,
	239, 0, 240, 241, 949, 825, 242, 243, 244, 950,
	951, 953, 952, 954, 955, 956, 245, 246, 470, 247,
	248, 249, 428, 429, 957, 250, 958, 251, 959, 252,
	960, 961, 253, 254, 962, 255, 963, 0, 964, 430,
	256, 257, 259, 260, 258, 261, 431, 432, 965, 826,
	966, 0, 0, 0, 0, 262, 263, 433, 264, 265,
	0, 266, 967, 267, 968, 969, 827, 268, 970, 269,
	434, 971, 435, 972, 270, 271, 272, 273, 274, 275,
	436, 437, 829, 973, 277, 0, 0, 0, 284, 974,
	276, 975, 828, 278, 438, 280, 279, 281, 282, 283,
	439, 976, 440, 977, 285, 830, 831, 286, 287, 288,
	832, 289, 290, 0, 0, 291, 292, 293, 978, 295,
	294, 979, 441, 833, 296, 297, 834, 980, 298, 299,
	981, 982, 300, 0, 301, 894, 893, 302, 303, 305,
	306, 304, 835, 307, 308, 310, 309, 983, 984, 836,
	985, 442, 311, 443, 312, 313, 986, 314, 315, 987,
	988, 316, 317, 989, 990, 318, 444, 837, 319, 838,
	445, 320, 321, 322, 323, 324, 325, 326, 991, 327,
	446, 328, 447, 329, 992, 330, 331, 332, 333, 334,
	448, 335, 336, 993, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 994, 349, 839,
	995, 350, 351, 352, 449, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 996, 369, 370, 364, 366, 367,
	368, 365, 371, 372, 997, 373, 354, 355, 374, 840,
	375, 450, 376, 377, 998, 386, 378, 379, 380, 356,
	381, 384, 385, 382, 999, 383, 451, 1000, 387, 388,
	1001, 389, 390, 391, 392, 393, 394, 395, 396, 1002,
	452, 453, 397, 1003, 1004, 398, 399, 454, 455, 1005,
	400, 401, 402, 403, 1006, 1007, 404, 405, 406, 408,
	1008, 409, 1009, 407, 410, 411, 412, 456, 457, 1010,
	1011, 413, 458, 1012, 1013, 1014, 1015, 414, 415, 459,
	416, 417, 418, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2762, 212,
	213, 214, 215, 933, 216, 934, 935, 936, 937, 419,
	938, 939, 940, 941, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 942, 223, 224, 225, 226, 227,
	228, 943, 944, 424, 425, 426, 945, 229, 427, 946,
	892, 947, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 948, 239, 0, 240, 241, 949, 825, 242,
	243, 244, 950, 951, 953, 952, 954, 955, 956, 245,
	246, 470, 247, 248, 249, 428, 429, 957, 250, 958,
	251, 959, 252, 960, 961, 253, 254, 962, 255, 963,
	0, 964, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 965, 826, 966, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 967, 267, 968, 969, 827,
	268, 970, 269, 434, 971, 435, 972, 270, 271, 272,
	273, 274, 275, 436, 437, 829, 973, 277, 0, 0,
	0, 284, 974, 276, 975, 828, 278, 438, 280, 279,
	281, 282, 283, 439, 976, 440, 977, 285, 830, 831,
	286, 287, 288, 832, 289, 290, 0, 0, 291, 292,
	293, 978, 295, 294, 979, 441, 833, 296, 297, 834,
	980, 298, 299, 981, 982, 300, 0, 301, 894, 893,
	302, 303, 305, 306, 304, 835, 307, 308, 310, 309,
	983, 984, 836, 985, 442, 311, 443, 312, 313, 986,
	314, 315, 987, 988, 316, 317, 989, 990, 318, 444,
	837, 319, 838, 445, 320, 321, 322, 323, 324, 325,
	326, 991, 327, 446, 328, 447, 329, 992, 330, 331,
	332, 333, 334, 448, 335, 336, 993, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	994, 349, 839, 995, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 996, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 997, 373, 354,
	355, 374, 840, 375, 450, 376, 377, 998, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 999, 383, 451,
	1000, 387, 388, 1001, 389, 390, 391, 392, 393, 394,
	395, 396, 1002, 452, 453, 397, 1003, 1004, 398, 399,
	454, 455, 1005, 400, 401, 402, 403, 1006, 1007, 404,
	405, 406, 408, 1008, 409, 1009, 407, 410, 411, 412,
	456, 457, 1010, 1011, 413, 458, 1012, 1013, 1014, 1015,
	414, 415, 459, 416, 417, 418, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2406, 212, 213, 214, 215, 933, 216, 934, 935,
	936, 937, 419, 938, 939, 940, 941, 217, 218, 219,
	420, 421, 220, 422, 221, 222, 423, 942, 223, 224,
	225, 226, 227, 228, 943, 944, 424, 425, 426, 945,
	229, 427, 946, 892, 947, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 948, 239, 0, 240, 241,
	949, 825, 242, 243, 244, 950, 951, 953, 952, 954,
	955, 956, 245, 246, 470, 247, 248, 249, 428, 429,
	957, 250, 958, 251, 959, 252, 960, 961, 253, 254,
	962, 255, 963, 0, 964, 430, 256, 257, 259, 260,
	258, 261, 431, 432, 965, 826, 966, 0, 0, 0,
	0, 262, 263, 433, 264, 265, 0, 266, 967, 267,
	968, 969, 827, 268, 970, 269, 434, 971, 435, 972,
	270, 271, 272, 273, 274, 275, 436, 437, 829, 973,
	277, 0, 0, 0, 284, 974, 276, 975, 828, 278,
	438, 280, 279, 281, 282, 283, 439, 976, 440, 977,
	285, 830, 831, 286, 287, 288, 832, 289, 290, 0,
	0, 291, 292, 293, 978, 295, 294, 979, 441, 833,
	296, 297, 834, 980, 298, 299, 981, 982, 300, 0,
	301, 894, 893, 302, 303, 305, 306, 304, 835, 307,
	308, 310, 309, 983, 984, 836, 985, 442, 311, 443,
	312, 313, 986, 314, 315, 987, 988, 316, 317, 989,
	990, 318, 444, 837, 319, 838, 445, 320, 321, 322,
	323, 324, 325, 326, 991, 327, 446, 328, 447, 329,
	992, 330, 331, 332, 333, 334, 448, 335, 336, 993,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 994, 349, 839, 995, 350, 351, 352,
	449, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	996, 369, 370, 364, 366, 367, 368, 365, 371, 372,
	997, 373, 354, 355, 374, 840, 375, 450, 376, 377,
	998, 386, 378, 379, 380, 356, 381, 384, 385, 382,
	999, 383, 451, 1000, 387, 388, 1001, 389, 390, 391,
	392, 393, 394, 395, 396, 1002, 452, 453, 397, 1003,
	1004, 398, 399, 454, 455, 1005, 400, 401, 402, 403,
	1006, 1007, 404, 405, 406, 408, 1008, 409, 1009, 407,
	410, 411, 412, 456, 457, 1010, 1011, 413, 458, 1012,
	1013, 1014, 1015, 414, 415, 459, 416, 417, 418, 928,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2289, 212, 213, 214, 215, 933,
	216, 934, 935, 936, 937, 419, 938, 939, 940, 941,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	942, 223, 224, 225, 226, 227, 228, 943, 944, 424,
	425, 426, 945, 229, 427, 946, 892, 947, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 948, 239,
	0, 240, 241, 949, 825, 242, 243, 244, 950, 951,
	953, 952, 954, 955, 956, 245, 246, 470, 247, 248,
	249, 428, 429, 957, 250, 958, 251, 959, 252, 960,
	961, 253, 254, 962, 255, 963, 0, 964, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 965, 826, 966,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 967, 267, 968, 969, 827, 268, 970, 269, 434,
	971, 435, 972, 270, 271, 272, 273, 274, 275, 436,
	437, 829, 973, 277, 0, 0, 0, 284, 974, 276,
	975, 828, 278, 438, 280, 279, 281, 282, 283, 439,
	976, 440, 977, 285, 830, 831, 286, 287, 288, 832,
	289, 290, 0, 0, 291, 292, 293, 978, 295, 294,
	979, 441, 833, 296, 297, 834, 980, 298, 299, 981,
	982, 300, 0, 301, 894, 893, 302, 303, 305, 306,
	304, 835, 307, 308, 310, 309, 983, 984, 836, 985,
	442, 311, 443, 312, 313, 986, 314, 315, 987, 988,
	316, 317, 989, 990, 318, 444, 837, 319, 838, 445,
	320, 321, 322, 323, 324, 325, 326, 991, 327, 446,
	328, 447, 329, 992, 330, 331, 332, 333, 334, 448,
	335, 336, 993, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 994, 349, 839, 995,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 996, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 997, 373, 354, 355, 374, 840, 375,
	450, 376, 377, 998, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 999, 383, 451, 1000, 387, 388, 1001,
	389, 390, 391, 392, 393, 394, 395, 396, 1002, 452,
	453, 397, 1003, 1004, 398, 399, 454, 455, 1005, 400,
	401, 402, 403, 1006, 1007, 404, 405, 406, 408, 1008,
	409, 1009, 407, 410, 411, 412, 456, 457, 1010, 1011,
	413, 458, 1012, 1013, 1014, 1015, 414, 415, 459, 416,
	417, 418, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1760, 212, 213,
	214, 215, 933, 216, 934, 935, 936, 937, 419, 938,
	939, 940, 941, 217, 218, 219, 420, 421, 220, 422,
	221, 222, 423, 942, 223, 224, 225, 226, 227, 228,
	943, 944, 424, 425, 426, 945, 229, 427, 946, 892,
	947, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 948, 239, 0, 240, 241, 949, 825, 242, 243,
	244, 950, 951, 953, 952, 954, 955, 956, 245, 246,
	470, 247, 248, 249, 428, 429, 957, 250, 958, 251,
	959, 252, 960, 961, 253, 254, 962, 255, 963, 0,
	964, 430, 256, 257, 259, 260, 258, 261, 431, 432,
	965, 826, 966, 0, 0, 0, 0, 262, 263, 433,
	264, 265, 0, 266, 967, 267, 968, 969, 827, 268,
	970, 269, 434, 971, 435, 972, 270, 271, 272, 273,
	274, 275, 436, 437, 829, 973, 277, 0, 0, 0,
	284, 974, 276, 975, 828, 278, 438, 280, 279, 281,
	282, 283, 439, 976, 440, 977, 285, 830, 831, 286,
	287, 288, 832, 289, 290, 0, 0, 291, 292, 293,
	978, 295, 294, 979, 441, 833, 296, 297, 834, 980,
	298, 299, 981, 982, 300, 0, 301, 894, 893, 302,
	303, 305, 306, 304, 835, 307, 308, 310, 309, 983,
	984, 836, 985, 442, 311, 443, 312, 313, 986, 314,
	315, 987, 988, 316, 317, 989, 990, 318, 444, 837,
	319, 838, 445, 320, 321, 322, 323, 324, 325, 326,
	991, 327, 446, 328, 447, 329, 992, 330, 331, 332,
	333, 334, 448, 335, 336, 993, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 994,
	349, 839, 995, 350, 351, 352, 449, 353, 0, 357,
	358, 359, 360, 361, 362, 363, 996, 369, 370, 364,
	366, 367, 368, 365, 371, 372, 997, 373, 354, 355,
	374, 840, 375, 450, 376, 377, 998, 386, 378, 379,
	380, 356, 381, 384, 385, 382, 999, 383, 451, 1000,
	387, 388, 1001, 389, 390, 391, 392, 393, 394, 395,
	396, 1002, 452, 453, 397, 1003, 1004, 398, 399, 454,
	455, 1005, 400, 401, 402, 403, 1006, 1007, 404, 405,
	406, 408, 1008, 409, 1009, 407, 410, 411, 412, 456,
	457, 1010, 1011, 413, 458, 1012, 1013, 1014, 1015, 414,
	415, 459, 416, 417, 418, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 212, 213, 214, 215, 933, 216, 934, 935, 936,
	937, 419, 938, 939, 940, 941, 217, 218, 219, 420,
	421, 220, 422, 221, 222, 423, 942, 223, 224, 225,
	226, 227, 228, 943, 944, 424, 425, 426, 945, 229,
	427, 946, 892, 947, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 948, 239, 0, 240, 241, 949,
	825, 242, 243, 244, 950, 951, 953, 952, 954, 955,
	956, 245, 246, 470, 247, 248, 249, 428, 429, 957,
	250, 958, 251, 959, 252, 960, 961, 253, 254, 962,
	255, 963, 0, 964, 430, 256, 257, 259, 260, 258,
	261, 431, 432, 965, 826, 966, 0, 0, 0, 0,
	262, 263, 433, 264, 265, 0, 266, 967, 267, 968,
	969, 827, 268, 970, 269, 434, 971, 435, 972, 270,
	271, 272, 273, 274, 275, 436, 437, 829, 973, 277,
	0, 0, 0, 284, 974, 276, 975, 828, 278, 438,
	280, 279, 281, 282, 283, 439, 976, 440, 977, 285,
	830, 831, 286, 287, 288, 832, 289, 290, 0, 0,
	291, 292, 293, 978, 295, 294, 979, 441, 833, 296,
	297, 834, 980, 298, 299, 981, 982, 300, 0, 301,
	894, 893, 302, 303, 305, 306, 304, 835, 307, 308,
	310, 309, 983, 984, 836, 985, 442, 311, 443, 312,
	313, 986, 314, 315, 987, 988, 316, 317, 989, 990,
	318, 444, 837, 319, 838, 445, 320, 321, 322, 323,
	324, 325, 326, 991, 327, 446, 328, 447, 329, 992,
	330, 331, 332, 333, 334, 448, 335, 336, 993, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 994, 349, 839, 995, 350, 351, 352, 449,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 996,
	369, 370, 364, 366, 367, 368, 365, 371, 372, 997,
	373, 354, 355, 374, 840, 375, 450, 376, 377, 998,
	386, 378, 379, 380, 356, 381, 384, 385, 382, 999,
	383, 451, 1000, 387, 388, 1001, 389, 390, 391, 392,
	393, 394, 395, 396, 1002, 452, 453, 397, 1003, 1004,
	398, 399, 454, 455, 1005, 400, 401, 402, 403, 1006,
	1007, 404, 405, 406, 408, 1008, 409, 1009, 407, 410,
	411, 412, 456, 457, 1010, 1011, 413, 458, 1012, 1013,
	1014, 1015, 414, 415, 459, 416, 417, 418, 692, 0,
	744, 732, 733, 730, 731, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 779, 724, 0, 0,
	0, 217, 218, 219, 420, 798, 764, 799, 752, 785,
	800, 0, 223, 754, 753, 226, 227, 228, 727, 778,
	801, 802, 426, 0, 229, 783, 0, 769, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 825, 242, 243, 244, 772,
	770, 771, 775, 0, 773, 774, 245, 246, 470, 247,
	786, 249, 803, 804, 710, 250, 0, 251, 0, 252,
	0, 0, 787, 254, 0, 255, 0, 0, 0, 715,
	256, 257, 259, 260, 258, 261, 805, 806, 739, 826,
	0, 0, 0, 0, 0, 262, 263, 807, 788, 789,
	0, 266, 0, 267, 0, 0, 827, 268, 0, 269,
	808, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	780, 782, 829, 0, 763, 0, 0, 0, 284, 0,
	276, 0, 828, 278, 809, 767, 790, 791, 792, 793,
	810, 0, 768, 0, 285, 830, 831, 286, 287, 288,
	832, 794, 795, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 811, 833, 296, 297, 834, 0, 298, 299,
	0, 0, 300, 0, 301, 712, 711, 302, 303, 305,
	756, 304, 835, 307, 308, 310, 309, 707, 0, 836,
	740, 781, 311, 812, 312, 313, 0, 765, 766, 0,
	0, 316, 317, 0, 0, 318, 444, 837, 319, 838,
	813, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	814, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	815, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 839,
	0, 350, 351, 352, 716, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 167, 369, 370, 757, 758, 759,
	760, 365, 371, 372, 776, 373, 354, 355, 374, 840,
	375, 816, 761, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 796, 382, 0, 383, 817, 0, 387, 388,
	169, 389, 390, 391, 392, 393, 394, 755, 396, 0,
	818, 819, 797, 0, 0, 398, 399, 820, 821, 738,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	777, 409, 0, 762, 410, 411, 412, 1102, 822, 0,
	0, 413, 458, 0, 0, 0, 161, 414, 415, 459,
	416, 417, 418, 708, 162, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 704, 705, 744, 732,
	733, 730, 731, 721, 0, 1308, 0, 0, 0, 0,
	0, 720, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 779, 724, 0, 0, 0, 217,
	218, 219, 420, 798, 764, 799, 752, 785, 800, 0,
	223, 754, 753, 226, 227, 228, 727, 778, 801, 802,
	426, 0, 229, 783, 0, 769, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 772, 770, 771,
	775, 0, 773, 774, 245, 246, 470, 247, 786, 249,
	803, 804, 710, 250, 0, 251, 0, 252, 0, 0,
	787, 254, 0, 255, 0, 0, 0, 715, 256, 257,
	259, 260, 258, 261, 805, 806, 739, 826, 0, 0,
	0, 0, 0, 262, 263, 807, 788, 789, 0, 266,
	0, 267, 0, 0, 827, 268, 0, 269, 808, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 780, 782,
	829, 0, 763, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 809, 767, 790, 791, 792, 793, 810, 0,
	768, 0, 285, 830, 831, 286, 287, 288, 832, 794,
	795, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	811, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 712, 711, 302, 303, 305, 756, 304,
	835, 307, 308, 310, 309, 707, 0, 836, 740, 781,
	311, 812, 312, 313, 0, 765, 766, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 813, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 814, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 815, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 716, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 167, 369, 370, 757, 758, 759, 760, 365,
	371, 372, 776, 373, 354, 355, 374, 840, 375, 816,
	761, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	796, 382, 0, 383, 817, 0, 387, 388, 169, 389,
	390, 391, 392, 393, 394, 755, 396, 0, 818, 819,
	797, 0, 0, 398, 399, 820, 821, 738, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 777, 409,
	0, 762, 410, 411, 412, 1102, 822, 0, 0, 413,
	458, 0, 0, 0, 161, 414, 415, 459, 416, 417,
	418, 708, 162, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 704, 705, 744, 732, 733, 730,
	731, 721, 0, 1308, 0, 0, 0, 0, 0, 720,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 779, 724, 0, 0, 0, 217, 218, 219,
	420, 798, 764, 799, 752, 785, 800, 1834, 223, 754,
	753, 226, 227, 228, 727, 778, 801, 802, 426, 0,
	229, 783, 0, 769, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 825, 242, 243, 244, 772, 770, 771, 775, 0,
	773, 774, 245, 246, 470, 247, 786, 249, 803, 804,
	710, 250, 0, 251, 0, 252, 0, 0, 787, 254,
	0, 255, 0, 0, 0, 715, 256, 257, 259, 260,
	258, 261, 805, 806, 739, 826, 0, 0, 0, 0,
	0, 262, 263, 807, 788, 789, 0, 266, 0, 267,
	0, 1839, 827, 268, 0, 269, 808, 0, 435, 0,
	270, 271, 272, 273, 274, 275, 780, 782, 829, 0,
	763, 0, 0, 0, 284, 0, 276, 0, 828, 278,
	809, 767, 790, 791, 792, 793, 810, 0, 768, 0,
	285, 830, 831, 286, 287, 288, 832, 794, 795, 0,
	0, 291, 292, 293, 0, 295, 294, 1835, 811, 833,
	296, 297, 834, 0, 298, 299, 0, 0, 300, 0,
	301, 712, 711, 302, 303, 305, 756, 304, 835, 307,
	308, 310, 309, 707, 0, 836, 740, 781, 311, 812,
	312, 313, 0, 765, 766, 0, 0, 316, 317, 0,
	0, 318, 444, 837, 319, 838, 813, 320, 321, 322,
	323, 324, 325, 326, 0, 327, 814, 328, 447, 329,
	0, 330, 331, 332, 333, 334, 815, 335, 336, 0,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 0, 349, 839, 0, 350, 351, 352,
	716, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	0, 369, 370, 757, 758, 759, 760, 365, 371, 372,
	776, 373, 354, 355, 374, 840, 375, 816, 761, 377,
	0, 386, 378, 379, 380, 356, 381, 384, 796, 382,
	0, 383, 817, 0, 387, 388, 0, 389, 390, 391,
	392, 393, 394, 755, 396, 0, 818, 819, 797, 0,
	1836, 398, 399, 820, 821, 738, 400, 401, 402, 403,
	0, 0, 404, 405, 406, 408, 777, 409, 0, 762,
	410, 411, 412, 456, 822, 0, 0, 413, 458, 0,
	0, 0, 0, 414, 415, 459, 416, 417, 418, 708,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 704, 705, 744, 732, 733, 730, 731, 721,
	0, 717, 0, 0, 0, 0, 0, 720, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	779, 724, 0, 0, 0, 217, 218, 219, 420, 798,
	764, 799, 752, 785, 800, 0, 223, 754, 753, 226,
	227, 228, 727, 778, 801, 802, 426, 0, 229, 783,
	0, 769, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 772, 770, 771, 775, 0, 773, 774,
	245, 246, 470, 247, 786, 249, 803, 804, 710, 250,
	0, 251, 0, 252, 0, 0, 787, 254, 0, 255,
	0, 0, 0, 715, 256, 257, 259, 260, 258, 261,
	805, 806, 739, 826, 0, 0, 0, 0, 0, 262,
	263, 807, 788, 789, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 808, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 780, 782, 829, 0, 763, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 809, 767,
	790, 791, 792, 793, 810, 0, 768, 0, 285, 830,
	831, 286, 287, 288, 832, 794, 795, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 811, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 712,
	711, 302, 303, 305, 756, 304, 835, 307, 308, 310,
	309, 707, 2573, 836, 740, 781, 311, 812, 312, 313,
	0, 765, 766, 0, 0, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 813, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 814, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 815, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 716, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 757, 758, 759, 760, 365, 371, 372, 776, 373,
	354, 355, 374, 840, 375, 816, 761, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 796, 382, 0, 383,
	817, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 755, 396, 0, 818, 819, 797, 0, 0, 398,
	399, 820, 821, 738, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 777, 409, 0, 762, 410, 411,
	412, 456, 822, 0, 0, 413, 458, 0, 0, 0,
	0, 414, 415, 459, 416, 417, 418, 708, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 1369, 744, 732, 733, 730, 731, 721, 717,
	0, 0, 0, 0, 0, 720, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 779,
	724, 0, 0, 0, 217, 218, 219, 420, 798, 764,
	799, 752, 785, 800, 0, 223, 754, 753, 226, 227,
	228, 727, 778, 801, 802, 426, 0, 229, 783, 0,
	769, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 825, 242,
	243, 244, 772, 770, 771, 775, 0, 773, 774, 245,
	246, 470, 247, 786, 249, 803, 804, 710, 250, 0,
	251, 0, 252, 0, 0, 787, 254, 0, 255, 0,
	0, 0, 715, 256, 257, 259, 260, 258, 261, 805,
	806, 739, 826, 0, 0, 0, 0, 0, 262, 263,
	807, 788, 789, 0, 266, 0, 267, 0, 0, 827,
	268, 0, 269, 808, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 780, 782, 829, 0, 763, 0, 0,
	0, 284, 1665, 276, 0, 828, 278, 809, 767, 790,
	791, 792, 793, 810, 0, 768, 0, 285, 830, 831,
	286, 287, 288, 832, 794, 795, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 811, 833, 296, 297, 834,
	0, 298, 299, 0, 0, 300, 0, 301, 712, 711,
	302, 303, 305, 756, 304, 835, 307, 308, 310, 309,
	707, 0, 836, 740, 781, 311, 812, 312, 313, 0,
	765, 766, 0, 0, 316, 317, 0, 0, 318, 444,
	837, 319, 838, 813, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 814, 328, 447, 329, 1664, 330, 331,
	332, 333, 334, 815, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 839, 0, 350, 351, 352, 716, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	757, 758, 759, 760, 365, 371, 372, 776, 373, 354,
	355, 374, 840, 375, 816, 761, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 796, 382, 0, 383, 817,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	755, 396, 0, 818, 819, 797, 0, 0, 398, 399,
	820, 821, 738, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 777, 409, 0, 762, 410, 411, 412,
	456, 822, 0, 0, 413, 458, 0, 0, 0, 0,
	414, 415, 459, 416, 417, 418, 708, 0, 0, 0,
	0, 0, 0, 0, 706, 0, 0, 0, 0, 704,
	705, 0, 0, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 700, 720, 744, 732, 733, 730, 731,
	721, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 779, 724, 0, 0, 0, 217, 218, 219, 420,
	798, 764, 799, 752, 785, 800, 0, 223, 754, 753,
	226, 227, 228, 727, 778, 801, 802, 426, 0, 229,
	783, 0, 769, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	825, 242, 243, 244, 772, 770, 771, 775, 0, 773,
	774, 245, 246, 470, 247, 786, 249, 803, 804, 710,
	250, 0, 251, 0, 252, 0, 0, 787, 254, 0,
	255, 0, 0, 0, 715, 256, 257, 259, 260, 258,
	261, 805, 806, 739, 826, 0, 0, 0, 0, 0,
	262, 263, 807, 788, 789, 0, 266, 0, 267, 0,
	0, 827, 268, 0, 269, 808, 0, 435, 0, 270,
	271, 272, 273, 274, 275, 780, 782, 829, 0, 763,
	0, 0, 0, 284, 0, 276, 0, 828, 278, 809,
	767, 790, 791, 792, 793, 810, 0, 768, 0, 285,
	830, 831, 286, 287, 288, 832, 794, 795, 0, 0,
	291, 292, 293, 0, 295, 294, 0, 811, 833, 296,
	297, 834, 0, 298, 299, 0, 0, 300, 0, 301,
	712, 711, 302, 303, 305, 756, 304, 835, 307, 308,
	310, 309, 707, 0, 836, 740, 781, 311, 812, 312,
	313, 0, 765, 766, 702, 0, 316, 317, 0, 0,
	318, 444, 837, 319, 838, 813, 320, 321, 322, 323,
	324, 325, 326, 0, 327, 814, 328, 447, 329, 0,
	330, 331, 332, 333, 334, 815, 335, 336, 0, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 0, 349, 839, 0, 350, 351, 352, 716,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 0,
	369, 370, 757, 758, 759, 760, 365, 371, 372, 776,
	373, 354, 355, 374, 840, 375, 816, 761, 377, 0,
	386, 378, 379, 380, 356, 381, 384, 796, 382, 0,
	383, 817, 0, 387, 388, 0, 389, 390, 391, 392,
	393, 394, 755, 396, 0, 818, 819, 797, 0, 0,
	398, 399, 820, 821, 738, 400, 401, 402, 403, 0,
	0, 404, 405, 406, 408, 777, 409, 0, 762, 410,
	411, 412, 456, 822, 0, 0, 413, 458, 0, 0,
	0, 0, 414, 415, 459, 416, 417, 418, 708, 0,
	0, 0, 0, 0, 0, 0, 706, 0, 0, 0,
	0, 704, 705, 744, 732, 733, 730, 731, 721, 0,
	717, 0, 0, 0, 0, 0, 720, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 779,
	724, 0, 0, 0, 217, 218, 219, 420, 798, 764,
	799, 752, 785, 800, 0, 223, 754, 753, 226, 227,
	228, 727, 778, 801, 802, 426, 0, 229, 783, 0,
	769, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 825, 242,
	243, 244, 772, 770, 771, 775, 0, 773, 774, 245,
	246, 470, 247, 786, 249, 803, 804, 710, 250, 0,
	251, 0, 252, 0, 0, 787, 254, 0, 255, 0,
	0, 0, 715, 256, 257, 259, 260, 258, 261, 805,
	806, 739, 826, 0, 0, 0, 0, 0, 262, 263,
	807, 788, 789, 0, 266, 0, 267, 0, 0, 827,
	268, 0, 269, 808, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 780, 782, 829, 0, 763, 0, 0,
	0, 284, 0, 276, 0, 828, 278, 809, 767, 790,
	791, 792, 793, 810, 0, 768, 0, 285, 830, 831,
	286, 287, 288, 832, 794, 795, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 811, 833, 296, 297, 834,
	0, 298, 299, 0, 0, 300, 0, 301, 712, 711,
	302, 303, 305, 756, 304, 835, 307, 308, 310, 309,
	707, 0, 836, 740, 781, 311, 812, 312, 313, 0,
	765, 766, 0, 0, 316, 317, 0, 0, 318, 444,
	837, 319, 838, 813, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 814, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 815, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 839, 0, 350, 351, 352, 716, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	757, 758, 759, 760, 365, 371, 372, 776, 373, 354,
	355, 374, 840, 375, 816, 761, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 796, 382, 0, 383, 817,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	755, 396, 0, 818, 819, 797, 0, 0, 398, 399,
	820, 821, 738, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 777, 409, 0, 762, 410, 411, 412,
	456, 822, 2408, 0, 413, 458, 0, 0, 0, 0,
	414, 415, 459, 416, 417, 418, 708, 0, 0, 0,
	0, 0, 0, 0, 706, 0, 0, 0, 0, 704,
	705, 744, 732, 733, 730, 731, 721, 0, 717, 0,
	0, 0, 0, 0, 720, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 779, 724, 0,
	0, 0, 217, 218, 219, 420, 798, 764, 799, 752,
	785, 800, 0, 223, 754, 753, 226, 227, 228, 727,
	778, 801, 802, 426, 0, 229, 783, 0, 769, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 825, 242, 243, 244,
	772, 770, 771, 775, 0, 773, 774, 245, 246, 470,
	247, 786, 249, 803, 804, 710, 250, 0, 251, 0,
	252, 0, 0, 787, 254, 0, 255, 0, 0, 0,
	715, 256, 257, 259, 260, 258, 261, 805, 806, 739,
	826, 0, 0, 0, 0, 0, 262, 263, 807, 788,
	789, 0, 266, 0, 267, 0, 0, 827, 268, 0,
	269, 808, 0, 435, 0, 270, 271, 272, 273, 274,
	275, 780, 782, 829, 0, 763, 0, 0, 0, 284,
	0, 276, 0, 828, 278, 809, 767, 790, 791, 792,
	793, 810, 0, 768, 0, 285, 830, 831, 286, 287,
	288, 832, 794, 795, 0, 0, 291, 292, 293, 0,
	295, 294, 0, 811, 833, 296, 297, 834, 0, 298,
	299, 0, 0, 300, 0, 301, 712, 711, 302, 303,
	305, 756, 304, 835, 307, 308, 310, 309, 707, 0,
	836, 740, 781, 311, 812, 312, 313, 0, 765, 766,
	702, 0, 316, 317, 0, 0, 318, 444, 837, 319,
	838, 813, 320, 321, 322, 323, 324, 325, 326, 0,
	327, 814, 328, 447, 329, 0, 330, 331, 332, 333,
	334, 815, 335, 336, 0, 337, 338, 339, 340, 341,
	0, 343, 344, 342, 345, 346, 347, 348, 0, 349,
	839, 0, 350, 351, 352, 716, 353, 0, 357, 358,
	359, 360, 361, 362, 363, 0, 369, 370, 757, 758,
	759, 760, 365, 371, 372, 776, 373, 354, 355, 374,
	840, 375, 816, 761, 377, 0, 386, 378, 379, 380,
	356, 381, 384, 796, 382, 0, 383, 817, 0, 387,
	388, 0, 389, 390, 391, 392, 393, 394, 755, 396,
	0, 818, 819, 797, 0, 0, 398, 399, 820, 821,
	738, 400, 401, 402, 403, 0, 0, 404, 405, 406,
	408, 777, 409, 0, 762, 410, 411, 412, 456, 822,
	0, 0, 413, 458, 0, 0, 0, 0, 414, 415,
	459, 416, 417, 418, 708, 0, 0, 0, 0, 0,
	0, 0, 706, 0, 0, 0, 0, 704, 705, 744,
	732, 733, 730, 731, 721, 0, 717, 0, 0, 0,
	0, 0, 720, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 779, 724, 0, 0, 0,
	217, 218, 219, 420, 798, 764, 799, 752, 785, 800,
	0, 223, 754, 753, 226, 227, 228, 727, 778, 801,
	802, 426, 0, 229, 783, 0, 769, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 825, 242, 243, 244, 772, 770,
	771, 775, 0, 773, 774, 245, 246, 470, 247, 786,
	249, 803, 804, 710, 250, 0, 251, 0, 252, 0,
	0, 787, 254, 0, 255, 0, 0, 0, 715, 256,
	257, 259, 260, 258, 261, 805, 806, 739, 826, 0,
	0, 0, 0, 0, 262, 263, 807, 788, 789, 0,
	266, 0, 267, 0, 0, 827, 268, 0, 269, 808,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 780,
	782, 829, 0, 763, 0, 0, 0, 284, 0, 276,
	0, 828, 278, 809, 767, 790, 791, 792, 793, 810,
	0, 768, 0, 285, 830, 831, 286, 287, 288, 832,
	794, 795, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 811, 833, 296, 297, 834, 0, 298, 299, 0,
	0, 300, 0, 301, 712, 711, 302, 303, 305, 756,
	304, 835, 307, 308, 310, 309, 707, 0, 836, 740,
	781, 311, 812, 312, 313, 0, 765, 766, 0, 0,
	316, 317, 0, 0, 318, 444, 837, 319, 838, 813,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 814,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 815,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 839, 0,
	350, 351, 352, 716, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 757, 758, 759, 760,
	365, 371, 372, 776, 373, 354, 355, 374, 840, 375,
	816, 761, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 796, 382, 0, 383, 817, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 755, 396, 0, 818,
	819, 797, 0, 0, 398, 399, 820, 821, 738, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 777,
	409, 0, 762, 410, 411, 412, 456, 822, 0, 0,
	413, 458, 0, 0, 0, 0, 414, 415, 459, 416,
	417, 418, 708, 0, 0, 0, 0, 0, 0, 0,
	706, 0, 0, 0, 0, 704, 705, 1369, 744, 732,
	733, 730, 731, 721, 717, 0, 0, 0, 0, 0,
	720, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 779, 724, 0, 0, 0, 217,
	218, 219, 420, 798, 764, 799, 752, 785, 800, 0,
	223, 754, 753, 226, 227, 228, 727, 778, 801, 802,
	426, 0, 229, 783, 0, 769, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 772, 770, 771,
	775, 0, 773, 774, 245, 246, 470, 247, 786, 249,
	803, 804, 710, 250, 0, 251, 0, 252, 0, 0,
	787, 254, 0, 255, 0, 0, 0, 715, 256, 257,
	259, 260, 258, 261, 805, 806, 739, 826, 0, 0,
	0, 0, 0, 262, 263, 807, 788, 789, 0, 266,
	0, 267, 0, 1839, 827, 268, 0, 269, 808, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 780, 782,
	829, 0, 763, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 809, 767, 790, 791, 792, 793, 810, 0,
	768, 0, 285, 830, 831, 286, 287, 288, 832, 794,
	795, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	811, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 712, 711, 302, 303, 305, 756, 304,
	835, 307, 308, 310, 309, 707, 0, 836, 740, 781,
	311, 812, 312, 313, 0, 765, 766, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 813, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 814, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 815, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 716, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 757, 758, 759, 760, 365,
	371, 372, 776, 373, 354, 355, 374, 840, 375, 816,
	761, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	796, 382, 0, 383, 817, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 755, 396, 0, 818, 819,
	797, 0, 0, 398, 399, 820, 821, 738, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 777, 409,
	0, 762, 410, 411, 412, 456, 822, 0, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 708, 0, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 704, 705, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 1873, 720,
	744, 732, 733, 730, 731, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 779, 724, 0, 0,
	0, 217, 218, 219, 420, 798, 764, 799, 752, 785,
	800, 0, 223, 754, 753, 226, 227, 228, 727, 778,
	801, 802, 426, 0, 229, 783, 0, 769, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 825, 242, 243, 244, 772,
	770, 771, 775, 0, 773, 774, 245, 246, 470, 247,
	786, 249, 803, 804, 710, 250, 0, 251, 0, 252,
	0, 0, 787, 254, 0, 255, 0, 0, 0, 715,
	256, 257, 259, 260, 258, 261, 805, 806, 739, 826,
	0, 0, 0, 0, 0, 262, 263, 807, 788, 789,
	0, 266, 0, 267, 0, 0, 827, 268, 0, 269,
	808, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	780, 782, 829, 0, 763, 0, 0, 0, 284, 0,
	276, 0, 828, 278, 809, 767, 790, 791, 792, 793,
	810, 0, 768, 0, 285, 830, 831, 286, 287, 288,
	832, 794, 795, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 811, 833, 296, 297, 834, 0, 298, 299,
	0, 0, 300, 0, 301, 712, 711, 302, 303, 305,
	756, 304, 835, 307, 308, 310, 309, 707, 0, 836,
	740, 781, 311, 812, 312, 313, 0, 765, 766, 0,
	0, 316, 317, 0, 0, 318, 444, 837, 319, 838,
	813, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	814, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	815, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 839,
	0, 350, 351, 352, 716, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 369, 370, 757, 758, 759,
	760, 365, 371, 372, 776, 373, 354, 355, 374, 840,
	375, 816, 761, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 796, 382, 0, 383, 817, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 755, 396, 0,
	818, 819, 797, 0, 0, 398, 399, 820, 821, 738,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	777, 409, 0, 762, 410, 411, 412, 456, 822, 0,
	0, 413, 458, 0, 0, 0, 0, 414, 415, 459,
	416, 417, 418, 708, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 704, 705, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	1827, 720, 744, 732, 733, 730, 731, 721, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 0, 216, 0, 0, 0, 0, 779, 724,
	0, 0, 0, 217, 218, 219, 420, 798, 764, 799,
	752, 785, 800, 0, 223, 754, 753, 226, 227, 228,
	727, 778, 801, 802, 426, 0, 229, 783, 0, 769,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 825, 242, 243,
	244, 772, 770, 771, 775, 0, 773, 774, 245, 246,
	470, 247, 786, 249, 803, 804, 710, 250, 0, 251,
	0, 252, 0, 0, 787, 254, 0, 255, 0, 0,
	0, 715, 256, 257, 259, 260, 258, 261, 805, 806,
	739, 826, 0, 0, 0, 0, 0, 262, 263, 807,
	788, 789, 0, 266, 0, 267, 0, 0, 827, 268,
	0, 269, 808, 0, 435, 0, 270, 271, 272, 273,
	274, 275, 780, 782, 829, 0, 763, 0, 0, 0,
	284, 0, 276, 0, 828, 278, 809, 767, 790, 791,
	792, 793, 810, 0, 768, 0, 285, 830, 831, 286,
	287, 288, 832, 794, 795, 0, 0, 291, 292, 293,
	0, 295, 294, 0, 811, 833, 296, 297, 834, 0,
	298, 299, 0, 0, 300, 0, 301, 712, 711, 302,
	303, 305, 756, 304, 835, 307, 308, 310, 309, 707,
	0, 836, 740, 781, 311, 812, 312, 313, 0, 765,
	766, 0, 0, 316, 317, 0, 0, 318, 444, 837,
	319, 838, 813, 320, 321, 322, 323, 324, 325, 326,
	0, 327, 814, 328, 447, 329, 0, 330, 331, 332,
	333, 334, 815, 335, 336, 0, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 0,
	349, 839, 0, 350, 351, 352, 716, 353, 0, 357,
	358, 359, 360, 361, 362, 363, 0, 369, 370, 757,
	758, 759, 760, 365, 371, 372, 776, 373, 354, 355,
	374, 840, 375, 816, 761, 377, 0, 386, 378, 379,
	380, 356, 381, 384, 796, 382, 0, 383, 817, 0,
	387, 388, 0, 389, 390, 391, 392, 393, 394, 755,
	396, 0, 818, 819, 797, 0, 0, 398, 399, 820,
	821, 738, 400, 401, 402, 403, 0, 0, 404, 405,
	406, 408, 777, 409, 0, 762, 410, 411, 412, 456,
	822, 0, 0, 413, 458, 0, 0, 0, 0, 414,
	415, 459, 416, 417, 418, 708, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 704, 705,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 1815, 720, 744, 732, 733, 730, 731, 721,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	779, 724, 0, 0, 0, 217, 218, 219, 420, 798,
	764, 799, 752, 785, 800, 0, 223, 754, 753, 226,
	227, 228, 727, 778, 801, 802, 426, 0, 229, 783,
	0, 769, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 772, 770, 771, 775, 0, 773, 774,
	245, 246, 470, 247, 786, 249, 803, 804, 710, 250,
	0, 251, 0, 252, 0, 0, 787, 254, 0, 255,
	0, 0, 0, 715, 256, 257, 259, 260, 258, 261,
	805, 806, 739, 826, 0, 0, 0, 0, 0, 262,
	263, 807, 788, 789, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 808, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 780, 782, 829, 0, 763, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 809, 767,
	790, 791, 792, 793, 810, 0, 768, 0, 285, 830,
	831, 286, 287, 288, 832, 794, 795, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 811, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 712,
	711, 302, 303, 305, 756, 304, 835, 307, 308, 310,
	309, 707, 0, 836, 740, 781, 311, 812, 312, 313,
	0, 765, 766, 0, 0, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 813, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 814, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 815, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 716, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 757, 758, 759, 760, 365, 371, 372, 776, 373,
	354, 355, 374, 840, 375, 816, 761, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 796, 382, 0, 383,
	817, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 755, 396, 0, 818, 819, 797, 0, 0, 398,
	399, 820, 821, 738, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 777, 409, 0, 762, 410, 411,
	412, 456, 822, 0, 0, 413, 458, 0, 0, 0,
	0, 414, 415, 459, 416, 417, 418, 708, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 1813, 720, 744, 732, 733, 730,
	731, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 779, 724, 0, 0, 0, 217, 218, 219,
	420, 798, 764, 799, 752, 785, 800, 0, 223, 754,
	753, 226, 227, 228, 727, 778, 801, 802, 426, 0,
	229, 783, 0, 769, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 825, 242, 243, 244, 772, 770, 771, 775, 0,
	773, 774, 245, 246, 470, 247, 786, 249, 803, 804,
	710, 250, 0, 251, 0, 252, 0, 0, 787, 254,
	0, 255, 0, 0, 0, 715, 256, 257, 259, 260,
	258, 261, 805, 806, 739, 826, 0, 0, 0, 0,
	0, 262, 263, 807, 788, 789, 0, 266, 0, 267,
	0, 0, 827, 268, 0, 269, 808, 0, 435, 0,
	270, 271, 272, 273, 274, 275, 780, 782, 829, 0,
	763, 0, 0, 0, 284, 0, 276, 0, 828, 278,
	809, 767, 790, 791, 792, 793, 810, 0, 768, 0,
	285, 830, 831, 286, 287, 288, 832, 794, 795, 0,
	0, 291, 292, 293, 0, 295, 294, 0, 811, 833,
	296, 297, 834, 0, 298, 299, 0, 0, 300, 0,
	301, 712, 711, 302, 303, 305, 756, 304, 835, 307,
	308, 310, 309, 707, 0, 836, 740, 781, 311, 812,
	312, 313, 0, 765, 766, 0, 0, 316, 317, 0,
	0, 318, 444, 837, 319, 838, 813, 320, 321, 322,
	323, 324, 325, 326, 0, 327, 814, 328, 447, 329,
	0, 330, 331, 332, 333, 334, 815, 335, 336, 0,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 0, 349, 839, 0, 350, 351, 352,
	716, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	0, 369, 370, 757, 758, 759, 760, 365, 371, 372,
	776, 373, 354, 355, 374, 840, 375, 816, 761, 377,
	0, 386, 378, 379, 380, 356, 381, 384, 796, 382,
	0, 383, 817, 0, 387, 388, 0, 389, 390, 391,
	392, 393, 394, 755, 396, 0, 818, 819, 797, 0,
	0, 398, 399, 820, 821, 738, 400, 401, 402, 403,
	0, 0, 404, 405, 406, 408, 777, 409, 0, 762,
	410, 411, 412, 456, 822, 0, 0, 413, 458, 0,
	0, 0, 0, 414, 415, 459, 416, 417, 418, 708,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 704, 705, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 1811, 720, 744, 732,
	733, 730, 731, 721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 779, 724, 0, 0, 0, 217,
	218, 219, 420, 798, 764, 799, 752, 785, 800, 0,
	223, 754, 753, 226, 227, 228, 727, 778, 801, 802,
	426, 0, 229, 783, 0, 769, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 772, 770, 771,
	775, 0, 773, 774, 245, 246, 470, 247, 786, 249,
	803, 804, 710, 250, 0, 251, 0, 252, 0, 0,
	787, 254, 0, 255, 0, 0, 0, 715, 256, 257,
	259, 260, 258, 261, 805, 806, 739, 826, 0, 0,
	0, 0, 0, 262, 263, 807, 788, 789, 0, 266,
	0, 267, 0, 0, 827, 268, 0, 269, 808, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 780, 782,
	829, 0, 763, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 809, 767, 790, 791, 792, 793, 810, 0,
	768, 0, 285, 830, 831, 286, 287, 288, 832, 794,
	795, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	811, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 712, 711, 302, 303, 305, 756, 304,
	835, 307, 308, 310, 309, 707, 0, 836, 740, 781,
	311, 812, 312, 313, 0, 765, 766, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 813, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 814, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 815, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 716, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 757, 758, 759, 760, 365,
	371, 372, 776, 373, 354, 355, 374, 840, 375, 816,
	761, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	796, 382, 0, 383, 817, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 755, 396, 0, 818, 819,
	797, 0, 0, 398, 399, 820, 821, 738, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 777, 409,
	0, 762, 410, 411, 412, 456, 822, 0, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 708, 0, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 704, 705, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 1808, 720,
	1800, 732, 733, 730, 731, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 779, 724, 0, 0,
	0, 217, 218, 219, 420, 798, 764, 799, 752, 785,
	800, 0, 223, 754, 753, 226, 227, 228, 727, 778,
	801, 802, 426, 0, 229, 783, 0, 769, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 825, 242, 243, 244, 772,
	770, 771, 775, 0, 773, 774, 245, 246, 470, 247,
	786, 1803, 803, 804, 710, 250, 0, 251, 0, 252,
	0, 0, 787, 254, 0, 255, 0, 0, 0, 715,
	256, 257, 259, 260, 258, 261, 805, 806, 739, 826,
	0, 0, 0, 0, 0, 262, 263, 807, 788, 789,
	0, 266, 0, 267, 0, 0, 827, 268, 0, 269,
	808, 0, 435, 0, 270, 271, 1804, 273, 274, 275,
	780, 782, 829, 0, 763, 0, 0, 0, 284, 0,
	276, 0, 828, 278, 809, 767, 790, 791, 792, 793,
	810, 0, 768, 0, 285, 830, 831, 286, 287, 288,
	832, 794, 795, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 811, 833, 296, 297, 834, 0, 298, 299,
	0, 0, 300, 0, 301, 712, 711, 1805, 1802, 305,
	756, 304, 835, 307, 308, 310, 309, 707, 0, 836,
	740, 781, 311, 812, 312, 313, 0, 765, 766, 0,
	0, 316, 317, 0, 0, 318, 444, 837, 319, 838,
	813, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	814, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	815, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 839,
	0, 350, 351, 352, 716, 353, 0, 357, 358, 359,
	360, 361, 362, 1806, 0, 369, 370, 757, 758, 759,
	760, 365, 371, 372, 776, 373, 354, 355, 374, 840,
	375, 816, 761, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 796, 382, 0, 383, 817, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 755, 396, 0,
	818, 819, 797, 0, 0, 398, 399, 820, 821, 738,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	777, 409, 0, 762, 410, 411, 412, 456, 822, 0,
	0, 413, 458, 0, 0, 0, 0, 414, 415, 459,
	416, 1801, 418, 708, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 704, 705, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	1797, 720, 1800, 732, 733, 730, 731, 721, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 0, 216, 0, 0, 0, 0, 779, 724,
	0, 0, 0, 217, 218, 219, 420, 798, 764, 799,
	752, 785, 800, 0, 223, 754, 753, 226, 227, 228,
	727, 778, 801, 802, 426, 0, 229, 783, 0, 769,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 825, 242, 243,
	244, 772, 770, 771, 775, 0, 773, 774, 245, 246,
	470, 247, 786, 1803, 803, 804, 710, 250, 0, 251,
	0, 252, 0, 0, 787, 254, 0, 255, 0, 0,
	0, 715, 256, 257, 259, 260, 258, 261, 805, 806,
	739, 826, 0, 0, 0, 0, 0, 262, 263, 807,
	788, 789, 0, 266, 0, 267, 0, 0, 827, 268,
	0, 269, 808, 0, 435, 0, 270, 271, 1804, 273,
	274, 275, 780, 782, 829, 0, 763, 0, 0, 0,
	284, 0, 276, 0, 828, 278, 809, 767, 790, 791,
	792, 793, 810, 0, 768, 0, 285, 830, 831, 286,
	287, 288, 832, 794, 795, 0, 0, 291, 292, 293,
	0, 295, 294, 0, 811, 833, 296, 297, 834, 0,
	298, 299, 0, 0, 300, 0, 301, 712, 711, 1805,
	1802, 305, 756, 304, 835, 307, 308, 310, 309, 707,
	0, 836, 740, 781, 311, 812, 312, 313, 0, 765,
	766, 0, 0, 316, 317, 0, 0, 318, 444, 837,
	319, 838, 813, 320, 321, 322, 323, 324, 325, 326,
	0, 327, 814, 328, 447, 329, 0, 330, 331, 332,
	333, 334, 815, 335, 336, 0, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 0,
	349, 839, 0, 350, 351, 352, 716, 353, 0, 357,
	358, 359, 360, 361, 362, 1806, 0, 369, 370, 757,
	758, 759, 760, 365, 371, 372, 776, 373, 354, 355,
	374, 840, 375, 816, 761, 377, 0, 386, 378, 379,
	380, 356, 381, 384, 796, 382, 0, 383, 817, 0,
	387, 388, 0, 389, 390, 391, 392, 393, 394, 755,
	396, 0, 818, 819, 797, 0, 0, 398, 399, 820,
	821, 738, 400, 401, 402, 403, 0, 0, 404, 405,
	406, 408, 777, 409, 0, 762, 410, 411, 412, 456,
	822, 0, 0, 413, 458, 0, 0, 0, 0, 414,
	415, 459, 416, 1801, 418, 708, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 704, 705,
	744, 732, 733, 730, 731, 721, 0, 717, 0, 0,
	0, 0, 0, 720, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 779, 724, 0, 0,
	0, 217, 218, 219, 420, 798, 764, 799, 752, 785,
	800, 0, 223, 754, 753, 226, 227, 228, 727, 778,
	801, 802, 426, 0, 229, 783, 0, 769, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 825, 242, 243, 244, 772,
	770, 771, 775, 0, 773, 774, 245, 246, 470, 247,
	786, 249, 803, 804, 710, 250, 0, 251, 0, 252,
	0, 0, 787, 254, 0, 255, 0, 0, 0, 715,
	256, 257, 259, 260, 258, 261, 805, 806, 739, 826,
	0, 0, 0, 0, 0, 262, 263, 807, 788, 789,
	0, 266, 0, 267, 0, 0, 827, 268, 0, 269,
	808, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	780, 782, 829, 0, 763, 0, 0, 0, 284, 0,
	276, 0, 828, 278, 809, 767, 790, 791, 792, 793,
	810, 0, 768, 0, 285, 830, 831, 286, 287, 288,
	832, 794, 795, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 811, 833, 296, 297, 834, 0, 298, 299,
	0, 0, 300, 0, 301, 712, 711, 302, 303, 305,
	756, 304, 835, 307, 308, 310, 309, 707, 0, 836,
	740, 781, 311, 812, 312, 313, 0, 765, 766, 0,
	0, 316, 317, 0, 0, 318, 444, 837, 319, 838,
	813, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	814, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	815, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 839,
	0, 350, 351, 352, 716, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 369, 370, 757, 758, 759,
	760, 365, 371, 372, 776, 373, 354, 355, 374, 840,
	375, 816, 761, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 796, 382, 0, 383, 817, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 755, 396, 0,
	818, 819, 797, 0, 0, 398, 399, 820, 821, 738,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	777, 409, 0, 762, 410, 411, 412, 456, 822, 0,
	0, 413, 458, 0, 0, 0, 0, 414, 415, 459,
	416, 417, 418, 708, 0, 0, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 704, 705, 0, 0,
	0, 0, 0, 1313, 0, 717, 0, 0, 0, 0,
	0, 720, 744, 732, 733, 730, 731, 721, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 1652, 216, 0, 0, 0, 0, 779, 724,
	0, 0, 0, 217, 218, 219, 420, 798, 764, 799,
	752, 785, 800, 0, 223, 754, 753, 226, 227, 228,
	727, 778, 801, 802, 426, 0, 229, 783, 0, 769,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 825, 242, 243,
	244, 772, 770, 771, 775, 0, 773, 774, 245, 246,
	470, 247, 786, 249, 803, 804, 710, 250, 0, 251,
	0, 252, 0, 0, 787, 254, 0, 255, 0, 0,
	0, 715, 256, 257, 259, 260, 258, 261, 805, 806,
	739, 826, 0, 0, 0, 0, 0, 262, 263, 807,
	788, 789, 0, 266, 0, 267, 0, 0, 827, 268,
	0, 269, 808, 0, 435, 0, 270, 271, 272, 273,
	274, 275, 780, 782, 829, 0, 763, 0, 0, 0,
	284, 0, 276, 0, 828, 278, 809, 767, 790, 791,
	792, 793, 810, 0, 768, 0, 285, 830, 831, 286,
	287, 288, 832, 794, 795, 0, 0, 291, 292, 293,
	0, 295, 294, 0, 811, 833, 296, 297, 834, 0,
	298, 299, 0, 0, 300, 0, 301, 712, 711, 302,
	303, 305, 756, 304, 835, 307, 308, 310, 309, 707,
	0, 836, 740, 781, 311, 812, 312, 313, 0, 765,
	766, 0, 0, 316, 317, 0, 0, 318, 444, 837,
	319, 838, 813, 320, 321, 322, 323, 324, 325, 326,
	0, 327, 814, 328, 447, 329, 0, 330, 331, 332,
	333, 334, 815, 335, 336, 0, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 0,
	349, 839, 0, 350, 351, 352, 716, 353, 0, 357,
	358, 359, 360, 361, 362, 363, 0, 369, 370, 757,
	758, 759, 760, 365, 371, 372, 776, 373, 354, 355,
	374, 840, 375, 816, 761, 377, 0, 386, 378, 379,
	380, 356, 381, 384, 796, 382, 0, 383, 817, 0,
	387, 388, 0, 389, 390, 391, 392, 393, 394, 755,
	396, 0, 818, 819, 797, 0, 0, 398, 399, 820,
	821, 738, 400, 401, 402, 403, 0, 0, 404, 405,
	406, 408, 777, 409, 0, 762, 410, 411, 412, 456,
	822, 0, 0, 413, 458, 0, 0, 0, 0, 414,
	415, 459, 416, 417, 418, 708, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 704, 705,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 1031, 720, 744, 732, 733, 730, 731, 721,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	779, 724, 0, 0, 0, 217, 218, 219, 420, 798,
	764, 799, 752, 785, 800, 0, 223, 754, 753, 226,
	227, 228, 727, 778, 801, 802, 426, 0, 229, 783,
	0, 769, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 772, 770, 771, 775, 0, 773, 774,
	245, 246, 470, 247, 786, 249, 803, 804, 710, 250,
	0, 251, 0, 252, 0, 0, 787, 254, 0, 255,
	0, 0, 0, 715, 256, 257, 259, 260, 258, 261,
	805, 806, 739, 826, 0, 0, 0, 0, 0, 262,
	263, 807, 788, 789, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 808, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 1030, 782, 829, 0, 763, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 809, 767,
	790, 791, 792, 793, 810, 0, 768, 0, 285, 830,
	831, 286, 287, 288, 832, 794, 795, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 811, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 712,
	711, 302, 303, 305, 756, 304, 835, 307, 308, 310,
	309, 707, 0, 836, 740, 781, 311, 812, 312, 313,
	0, 765, 766, 0, 0, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 813, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 814, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 815, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 716, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 757, 758, 759, 760, 365, 371, 372, 776, 373,
	354, 355, 374, 840, 375, 816, 761, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 796, 382, 0, 383,
	817, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 755, 396, 0, 818, 819, 797, 0, 0, 398,
	399, 820, 821, 738, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 777, 409, 0, 762, 410, 411,
	412, 456, 822, 0, 0, 413, 458, 0, 0, 0,
	0, 414, 415, 459, 416, 417, 418, 708, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 1028, 720, 744, 732, 733, 730,
	731, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 779, 724, 0, 0, 0, 217, 218, 219,
	420, 798, 764, 799, 752, 785, 800, 0, 223, 754,
	753, 226, 227, 228, 727, 778, 801, 802, 426, 0,
	229, 783, 0, 769, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 825, 242, 243, 244, 772, 770, 771, 775, 0,
	773, 774, 245, 246, 470, 247, 786, 249, 803, 804,
	710, 250, 0, 251, 0, 252, 0, 0, 787, 254,
	0, 255, 0, 0, 0, 715, 256, 257, 259, 260,
	258, 261, 805, 806, 739, 826, 0, 0, 0, 0,
	0, 262, 263, 807, 788, 789, 0, 266, 0, 267,
	0, 0, 827, 268, 0, 269, 808, 0, 435, 0,
	270, 271, 272, 273, 274, 275, 1027, 782, 829, 0,
	763, 0, 0, 0, 284, 0, 276, 0, 828, 278,
	809, 767, 790, 791, 792, 793, 810, 0, 768, 0,
	285, 830, 831, 286, 287, 288, 832, 794, 795, 0,
	0, 291, 292, 293, 0, 295, 294, 0, 811, 833,
	296, 297, 834, 0, 298, 299, 0, 0, 300, 0,
	301, 712, 711, 302, 303, 305, 756, 304, 835, 307,
	308, 310, 309, 707, 0, 836, 740, 781, 311, 812,
	312, 313, 0, 765, 766, 0, 0, 316, 317, 0,
	0, 318, 444, 837, 319, 838, 813, 320, 321, 322,
	323, 324, 325, 326, 0, 327, 814, 328, 447, 329,
	0, 330, 331, 332, 333, 334, 815, 335, 336, 0,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 0, 349, 839, 0, 350, 351, 352,
	716, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	0, 369, 370, 757, 758, 759, 760, 365, 371, 372,
	776, 373, 354, 355, 374, 840, 375, 816, 761, 377,
	0, 386, 378, 379, 380, 356, 381, 384, 796, 382,
	0, 383, 817, 0, 387, 388, 0, 389, 390, 391,
	392, 393, 394, 755, 396, 0, 818, 819, 797, 0,
	0, 398, 399, 820, 821, 738, 400, 401, 402, 403,
	0, 0, 404, 405, 406, 408, 777, 409, 0, 762,
	410, 411, 412, 456, 822, 0, 0, 413, 458, 0,
	0, 0, 0, 414, 415, 459, 416, 417, 418, 708,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 704, 705, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 1025, 720, 744, 732,
	733, 730, 731, 721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 779, 724, 0, 0, 0, 217,
	218, 219, 420, 798, 764, 799, 752, 785, 800, 0,
	223, 754, 753, 226, 227, 228, 727, 778, 801, 802,
	426, 0, 229, 783, 0, 769, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 772, 770, 771,
	775, 0, 773, 774, 245, 246, 470, 247, 786, 249,
	803, 804, 710, 250, 0, 251, 0, 252, 0, 0,
	787, 254, 0, 255, 0, 0, 0, 715, 256, 257,
	259, 260, 258, 261, 805, 806, 739, 826, 0, 0,
	0, 0, 0, 262, 263, 807, 788, 789, 0, 266,
	0, 267, 0, 0, 827, 268, 0, 269, 808, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 780, 782,
	829, 0, 763, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 809, 767, 790, 791, 792, 793, 810, 0,
	768, 0, 285, 830, 831, 286, 287, 288, 832, 794,
	795, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	811, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 712, 711, 302, 303, 305, 756, 304,
	835, 307, 308, 310, 309, 707, 0, 836, 740, 781,
	311, 812, 312, 313, 0, 765, 766, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 813, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 814, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 815, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 716, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 757, 758, 759, 760, 365,
	371, 372, 776, 373, 354, 355, 374, 840, 375, 816,
	761, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	796, 382, 0, 383, 817, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 755, 396, 0, 818, 819,
	797, 0, 0, 398, 399, 820, 821, 738, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 777, 409,
	0, 762, 410, 411, 412, 456, 822, 0, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 708, 0, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 704, 705, 744, 732, 733, 730,
	731, 721, 0, 717, 0, 0, 0, 0, 0, 720,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 779, 724, 0, 0, 0, 217, 218, 219,
	420, 798, 764, 799, 752, 785, 800, 0, 223, 754,
	753, 226, 227, 228, 727, 778, 801, 802, 426, 0,
	229, 783, 0, 769, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 825, 242, 243, 244, 772, 770, 771, 775, 0,
	773, 774, 245, 246, 470, 247, 786, 249, 803, 804,
	710, 250, 0, 251, 0, 252, 0, 0, 787, 254,
	0, 255, 0, 0, 0, 715, 256, 257, 259, 260,
	258, 261, 805, 806, 739, 826, 0, 0, 0, 0,
	0, 262, 263, 807, 788, 789, 0, 266, 0, 267,
	0, 0, 827, 268, 0, 269, 808, 0, 435, 0,
	270, 271, 272, 273, 274, 275, 780, 782, 829, 0,
	763, 0, 0, 0, 284, 0, 276, 0, 828, 278,
	809, 767, 790, 791, 792, 793, 810, 0, 768, 0,
	285, 830, 831, 286, 287, 288, 832, 794, 795, 0,
	0, 291, 292, 293, 0, 295, 294, 0, 811, 833,
	296, 297, 834, 0, 298, 299, 0, 0, 300, 0,
	301, 712, 711, 302, 303, 305, 756, 304, 835, 307,
	308, 310, 309, 707, 0, 836, 740, 781, 311, 812,
	312, 313, 0, 765, 766, 0, 0, 316, 317, 0,
	0, 318, 444, 837, 319, 838, 813, 320, 321, 322,
	323, 324, 325, 326, 0, 327, 814, 328, 447, 329,
	0, 330, 331, 332, 333, 334, 815, 335, 336, 0,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 0, 349, 839, 0, 350, 351, 352,
	716, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	0, 369, 370, 757, 758, 759, 760, 365, 371, 372,
	776, 373, 354, 355, 374, 840, 375, 816, 761, 377,
	0, 386, 378, 379, 380, 356, 381, 384, 796, 382,
	0, 383, 817, 0, 387, 388, 0, 389, 390, 391,
	392, 393, 394, 755, 396, 0, 818, 819, 797, 0,
	0, 398, 399, 820, 821, 738, 400, 401, 402, 403,
	0, 0, 404, 405, 406, 408, 777, 409, 0, 762,
	410, 411, 412, 456, 822, 0, 0, 413, 458, 0,
	0, 0, 0, 414, 415, 459, 416, 417, 418, 708,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 704, 705, 744, 732, 733, 730, 731, 721,
	0, 717, 0, 0, 0, 0, 0, 720, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	779, 724, 0, 0, 0, 217, 218, 219, 420, 798,
	764, 799, 752, 785, 800, 0, 223, 754, 753, 226,
	227, 228, 727, 778, 801, 802, 426, 0, 229, 783,
	0, 769, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 2956, 772, 770, 771, 775, 0, 773, 774,
	245, 246, 470, 247, 786, 249, 803, 804, 710, 250,
	0, 251, 0, 252, 0, 0, 787, 254, 0, 255,
	0, 0, 0, 715, 256, 257, 259, 260, 258, 261,
	805, 806, 739, 826, 0, 0, 0, 0, 0, 262,
	263, 807, 788, 789, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 808, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 780, 782, 829, 0, 763, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 809, 767,
	790, 791, 792, 793, 810, 0, 768, 0, 285, 830,
	831, 286, 287, 288, 832, 794, 795, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 811, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 712,
	711, 302, 303, 305, 756, 304, 835, 307, 308, 310,
	309, 707, 0, 836, 740, 781, 311, 812, 312, 313,
	0, 765, 766, 0, 0, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 813, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 814, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 815, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 716, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 757, 758, 759, 760, 365, 371, 372, 776, 373,
	354, 355, 374, 840, 375, 816, 761, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 796, 382, 0, 383,
	817, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 755, 396, 0, 818, 819, 797, 0, 0, 398,
	399, 820, 821, 738, 400, 401, 2955, 403, 0, 0,
	404, 405, 406, 408, 777, 409, 0, 762, 410, 411,
	412, 456, 822, 0, 0, 413, 458, 0, 0, 0,
	0, 414, 415, 459, 416, 417, 418, 708, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 744, 732, 733, 730, 731, 721, 0, 717,
	0, 0, 0, 0, 0, 720, 0, 0, 212, 213,
	214, 215, 0, 216, 0, 0, 0, 0, 779, 724,
	0, 0, 0, 217, 218, 219, 2954, 798, 764, 799,
	752, 785, 800, 0, 223, 754, 753, 226, 227, 228,
	727, 778, 801, 802, 426, 0, 229, 783, 0, 769,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 825, 242, 243,
	2956, 772, 770, 771, 775, 0, 773, 774, 245, 246,
	470, 247, 786, 249, 803, 804, 710, 250, 0, 251,
	0, 252, 0, 0, 787, 254, 0, 255, 0, 0,
	0, 715, 256, 257, 259, 260, 258, 261, 805, 806,
	739, 826, 0, 0, 0, 0, 0, 262, 263, 807,
	788, 789, 0, 266, 0, 267, 0, 0, 827, 268,
	0, 269, 808, 0, 435, 0, 270, 271, 272, 273,
	274, 275, 780, 782, 829, 0, 763, 0, 0, 0,
	284, 0, 276, 0, 828, 278, 809, 767, 790, 791,
	792, 793, 810, 0, 768, 0, 285, 830, 831, 286,
	287, 288, 832, 794, 795, 0, 0, 291, 292, 293,
	0, 295, 294, 0, 811, 833, 296, 297, 834, 0,
	298, 299, 0, 0, 300, 0, 301, 712, 711, 302,
	303, 305, 756, 304, 835, 307, 308, 310, 309, 707,
	0, 836, 740, 781, 311, 812, 312, 313, 0, 765,
	766, 0, 0, 316, 317, 0, 0, 318, 444, 837,
	319, 838, 813, 320, 321, 322, 323, 324, 325, 326,
	0, 327, 814, 328, 447, 329, 0, 330, 331, 332,
	333, 334, 815, 335, 336, 0, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 0,
	349, 839, 0, 350, 351, 352, 716, 353, 0, 357,
	358, 359, 360, 361, 362, 363, 0, 369, 370, 757,
	758, 759, 760, 365, 371, 372, 776, 373, 354, 355,
	374, 840, 375, 816, 761, 377, 0, 386, 378, 379,
	380, 356, 381, 384, 796, 382, 0, 383, 817, 0,
	387, 388, 0, 389, 390, 391, 392, 393, 394, 755,
	396, 0, 818, 819, 797, 0, 0, 398, 399, 820,
	821, 738, 400, 401, 2955, 403, 0, 0, 404, 405,
	406, 408, 777, 409, 0, 762, 410, 411, 412, 456,
	822, 0, 0, 413, 458, 0, 0, 0, 0, 414,
	415, 459, 416, 417, 418, 708, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 704, 705,
	744, 732, 733, 730, 731, 721, 0, 717, 0, 0,
	0, 0, 0, 720, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 779, 724, 0, 0,
	0, 217, 218, 219, 420, 798, 764, 799, 752, 785,
	800, 0, 223, 754, 753, 226, 227, 228, 727, 778,
	801, 802, 426, 0, 229, 783, 0, 769, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 825, 242, 243, 244, 772,
	770, 771, 775, 0, 773, 774, 245, 246, 470, 247,
	786, 249, 803, 804, 0, 250, 0, 251, 0, 252,
	0, 0, 787, 254, 0, 255, 0, 0, 0, 715,
	256, 257, 259, 260, 258, 261, 805, 806, 739, 826,
	0, 0, 0, 0, 0, 262, 263, 807, 788, 789,
	0, 266, 0, 267, 0, 0, 827, 268, 0, 269,
	808, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	780, 782, 829, 0, 763, 0, 0, 0, 284, 0,
	276, 0, 828, 278, 809, 767, 790, 791, 792, 793,
	810, 0, 768, 0, 285, 830, 831, 286, 287, 288,
	832, 794, 795, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 811, 833, 296, 297, 834, 0, 298, 299,
	0, 0, 300, 0, 301, 894, 893, 302, 303, 305,
	756, 304, 835, 307, 308, 310, 309, 0, 0, 836,
	740, 781, 311, 812, 312, 313, 0, 765, 766, 0,
	0, 316, 317, 0, 0, 318, 444, 837, 319, 838,
	813, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	814, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	815, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 839,
	0, 350, 351, 352, 1825, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 369, 370, 757, 758, 759,
	760, 365, 371, 372, 776, 373, 354, 355, 374, 840,
	375, 816, 761, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 796, 382, 0, 383, 817, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 755, 396, 0,
	818, 819, 797, 0, 0, 398, 399, 820, 821, 738,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	777, 409, 0, 762, 410, 411, 412, 456, 822, 0,
	0, 413, 458, 0, 0, 0, 0, 414, 415, 459,
	416, 417, 418, 744, 732, 733, 730, 731, 721, 0,
	0, 1823, 0, 0, 0, 0, 1821, 1822, 0, 212,
	213, 214, 215, 0, 216, 1824, 0, 0, 0, 779,
	724, 720, 0, 0, 217, 218, 219, 0, 798, 764,
	799, 752, 785, 800, 0, 223, 754, 753, 226, 227,
	228, 727, 778, 801, 802, 426, 0, 229, 783, 0,
	769, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 825, 242,
	243, 2956, 772, 770, 771, 775, 0, 773, 774, 245,
	246, 470, 247, 786, 249, 803, 804, 710, 250, 0,
	251, 0, 252, 0, 0, 787, 254, 0, 255, 0,
	0, 0, 715, 256, 257, 259, 260, 258, 261, 805,
	806, 739, 826, 0, 0, 0, 0, 0, 262, 263,
	807, 788, 789, 0, 266, 0, 267, 0, 0, 827,
	268, 0, 269, 808, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 780, 782, 0, 0, 763, 0, 0,
	0, 284, 0, 276, 0, 828, 278, 809, 767, 790,
	791, 792, 793, 810, 0, 768, 0, 285, 0, 0,
	286, 287, 288, 832, 794, 795, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 811, 833, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 712, 711,
	302, 303, 305, 756, 304, 835, 307, 308, 310, 309,
	707, 0, 0, 740, 781, 311, 812, 312, 313, 0,
	765, 766, 0, 0, 316, 317, 0, 0, 318, 444,
	837, 319, 838, 813, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 814, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 815, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 839, 0, 350, 351, 352, 716, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	757, 758, 759, 760, 365, 371, 372, 776, 373, 354,
	355, 374, 0, 375, 816, 761, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 796, 382, 0, 383, 817,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	755, 396, 0, 818, 819, 797, 0, 0, 398, 399,
	820, 821, 738, 400, 401, 2955, 403, 0, 0, 404,
	405, 406, 408, 777, 409, 0, 762, 410, 411, 412,
	456, 822, 0, 0, 413, 458, 0, 0, 0, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 692, 0, 890, 0, 0, 0, 0, 704,
	705, 0, 0, 0, 0, 0, 0, 0, 717, 0,
	212, 213, 214, 215, 720, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 892, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 0, 886, 887, 0, 0, 888, 889,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	805, 806, 0, 826, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 808, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 829, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 830,
	831, 286, 287, 288, 832, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 811, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 894,
	893, 302, 303, 305, 306, 304, 835, 307, 308, 310,
	309, 0, 0, 836, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 884, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 813, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 814, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 167, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 840, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	817, 0, 387, 388, 169, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 820, 821, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 1102, 457, 0, 0, 413, 458, 0, 0, 890,
	161, 414, 415, 459, 416, 417, 418, 0, 162, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 876, 0, 1393,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 892, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 825, 242, 243, 244, 0, 886,
	887, 0, 0, 888, 889, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 805, 806, 0, 826, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 827, 268, 0, 269, 808,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 829, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 828, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 830, 831, 286, 287, 288, 832,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 811, 833, 296, 297, 834, 0, 298, 299, 0,
	0, 300, 0, 301, 894, 893, 302, 303, 305, 306,
	304, 835, 307, 308, 310, 309, 0, 0, 836, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 884,
	316, 317, 0, 0, 318, 444, 837, 319, 838, 813,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 814,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 839, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 167, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 840, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 817, 0, 387, 388, 169,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 820, 821, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 1102, 457, 0, 0,
	413, 458, 0, 0, 890, 161, 414, 415, 459, 416,
	417, 418, 0, 162, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	779, 0, 876, 0, 1393, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 778, 424, 425, 426, 0, 229, 783,
	0, 769, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 772, 770, 771, 775, 0, 773, 774,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	805, 806, 0, 826, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 808, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 780, 782, 829, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 830,
	831, 286, 287, 288, 832, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 811, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 894,
	893, 302, 303, 305, 306, 304, 835, 307, 308, 310,
	309, 0, 0, 836, 0, 781, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 813, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 814, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 776, 373,
	354, 355, 374, 840, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	817, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 820, 821, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 777, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 2199, 0, 890,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 2509,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 892, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 825, 242, 243, 244, 0, 886,
	887, 0, 0, 888, 889, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 805, 806, 0, 826, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 827, 268, 0, 269, 808,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 829, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 828, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 830, 831, 286, 287, 288, 832,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 811, 833, 296, 297, 834, 0, 298, 299, 0,
	0, 300, 0, 301, 894, 893, 302, 303, 305, 306,
	304, 835, 307, 308, 310, 309, 0, 0, 836, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 884,
	316, 317, 0, 0, 318, 444, 837, 319, 838, 813,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 814,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 839, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 840, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 817, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 820, 821, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 875, 0, 890, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 876, 0, 882, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 892, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 0, 886, 887, 0, 0, 888, 889,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	805, 806, 0, 826, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 808, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 829, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 830,
	831, 286, 287, 288, 832, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 811, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 894,
	893, 302, 303, 305, 306, 304, 835, 307, 308, 310,
	309, 0, 0, 836, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 884, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 813, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 814, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 840, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	817, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 820, 821, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 0, 0, 890,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 876, 0, 882,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 892, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 825, 242, 243, 244, 0, 886,
	887, 0, 0, 888, 889, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 805, 806, 0, 826, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 827, 268, 0, 269, 808,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 829, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 828, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 830, 831, 286, 287, 288, 832,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 811, 833, 296, 297, 834, 0, 298, 299, 0,
	0, 300, 0, 301, 894, 893, 302, 303, 305, 306,
	304, 835, 307, 308, 310, 309, 0, 0, 836, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 884,
	316, 317, 0, 0, 318, 444, 837, 319, 838, 813,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 814,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 839, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 840, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 817, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 820, 821, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 1099, 0, 915, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 876, 0, 882, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 892, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 826, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 829, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 830,
	831, 286, 287, 288, 832, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 894,
	893, 302, 303, 305, 306, 304, 835, 307, 308, 310,
	309, 0, 0, 836, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 167, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 840, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 169, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 1102, 457, 0, 0, 413, 458, 692, 0, 209,
	161, 414, 415, 459, 416, 417, 418, 0, 162, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 134,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 167, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 169,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 1102, 457, 0, 0,
	413, 458, 0, 0, 0, 161, 414, 415, 459, 416,
	417, 418, 0, 162, 744, 732, 733, 730, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 134, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 798,
	764, 799, 752, 785, 800, 0, 223, 754, 753, 226,
	227, 228, 0, 0, 801, 802, 426, 0, 229, 427,
	0, 892, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 825,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 786, 249, 803, 804, 0, 250,
	0, 251, 0, 252, 0, 0, 787, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 739, 826, 0, 0, 0, 0, 0, 262,
	263, 807, 788, 789, 0, 266, 0, 267, 0, 0,
	827, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 829, 0, 763, 0,
	0, 0, 284, 0, 276, 0, 828, 278, 809, 767,
	790, 791, 792, 793, 810, 0, 768, 0, 285, 830,
	831, 286, 287, 288, 832, 794, 795, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 833, 296, 297,
	834, 0, 298, 299, 0, 0, 300, 0, 301, 894,
	893, 302, 303, 305, 756, 304, 835, 307, 308, 310,
	309, 0, 0, 836, 740, 442, 311, 812, 312, 313,
	0, 765, 766, 0, 0, 316, 317, 0, 0, 318,
	444, 837, 319, 838, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 815, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 839, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 757, 758, 759, 760, 365, 371, 372, 0, 373,
	354, 355, 374, 840, 375, 816, 761, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 796, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 755, 396, 0, 818, 819, 797, 0, 0, 398,
	399, 454, 455, 738, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 762, 410, 411,
	412, 456, 822, 209, 0, 413, 458, 0, 0, 0,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 0, 0, 209, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 1999, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 0, 0, 209, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 2423, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 0, 0, 0, 0,
	414, 415, 459, 416, 417, 418, 1170, 0, 915, 914,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 1397, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 892, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 826, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 827, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	829, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 830, 831, 286, 287, 288, 832, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 894, 893, 302, 303, 305, 306, 304,
	835, 307, 308, 310, 309, 0, 0, 836, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 840, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 1095, 0, 915, 914, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	892, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 825, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 826, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 827,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 1094, 437, 829, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 828, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 830, 831,
	286, 287, 288, 832, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 833, 296, 297, 834,
	0, 298, 299, 0, 0, 300, 0, 301, 894, 893,
	302, 303, 305, 306, 304, 835, 307, 308, 310, 309,
	0, 0, 836, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	837, 319, 838, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 839, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 840, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 0, 0, 0, 0,
	414, 415, 459, 416, 417, 418, 1091, 0, 915, 914,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 892, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 826, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 827, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 1090, 437,
	829, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 830, 831, 286, 287, 288, 832, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 894, 893, 302, 303, 305, 306, 304,
	835, 307, 308, 310, 309, 0, 0, 836, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 840, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 1052, 0, 915, 914, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	892, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 825, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 826, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 827,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 1051, 437, 829, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 828, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 830, 831,
	286, 287, 288, 832, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 833, 296, 297, 834,
	0, 298, 299, 0, 0, 300, 0, 301, 894, 893,
	302, 303, 305, 306, 304, 835, 307, 308, 310, 309,
	0, 0, 836, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	837, 319, 838, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 839, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 840, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 0, 0, 0, 0,
	414, 415, 459, 416, 417, 418, 1049, 0, 915, 914,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 892, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 825, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 826, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 827, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 1048, 437,
	829, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	828, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 830, 831, 286, 287, 288, 832, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 833, 296, 297, 834, 0, 298, 299, 0, 0,
	300, 0, 301, 894, 893, 302, 303, 305, 306, 304,
	835, 307, 308, 310, 309, 0, 0, 836, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 837, 319, 838, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 839, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 840, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 908, 0, 915, 914, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	892, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 825, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 826, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 827,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 910, 437, 829, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 828, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 830, 831,
	286, 287, 288, 832, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 833, 296, 297, 834,
	0, 298, 299, 0, 0, 300, 0, 301, 894, 893,
	302, 303, 305, 306, 304, 835, 307, 308, 310, 309,
	0, 0, 836, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	837, 319, 838, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 839, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 840, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 915, 914, 413, 458, 0, 912, 0, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 212, 213,
	214, 215, 0, 216, 0, 0, 0, 0, 419, 0,
	0, 0, 0, 217, 218, 219, 420, 421, 220, 422,
	221, 222, 423, 0, 223, 224, 225, 226, 227, 228,
	0, 0, 424, 425, 426, 0, 229, 427, 0, 892,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 825, 242, 243,
	244, 0, 0, 0, 0, 0, 0, 0, 245, 246,
	470, 247, 248, 249, 428, 429, 0, 250, 0, 251,
	0, 252, 0, 0, 253, 254, 0, 255, 0, 0,
	0, 430, 256, 257, 259, 260, 258, 261, 431, 432,
	0, 826, 0, 0, 0, 0, 0, 262, 263, 433,
	264, 265, 0, 266, 0, 267, 0, 0, 827, 268,
	0, 269, 434, 0, 435, 0, 270, 271, 272, 273,
	274, 275, 436, 437, 829, 0, 277, 0, 0, 0,
	284, 0, 276, 0, 828, 278, 438, 280, 279, 281,
	282, 283, 439, 0, 440, 0, 285, 830, 831, 286,
	287, 288, 832, 289, 290, 0, 0, 291, 292, 293,
	0, 295, 294, 0, 441, 833, 296, 297, 834, 0,
	298, 299, 0, 0, 300, 0, 301, 894, 893, 302,
	303, 305, 306, 304, 835, 307, 308, 310, 309, 0,
	0, 836, 0, 442, 311, 443, 312, 313, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 444, 837,
	319, 838, 445, 320, 321, 322, 323, 324, 325, 326,
	0, 327, 446, 328, 447, 329, 0, 330, 331, 332,
	333, 334, 448, 335, 336, 0, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 0,
	349, 839, 0, 350, 351, 352, 449, 353, 0, 357,
	358, 359, 360, 361, 362, 363, 0, 369, 370, 364,
	366, 367, 368, 365, 371, 372, 0, 373, 354, 355,
	374, 840, 375, 450, 376, 377, 0, 386, 378, 379,
	380, 356, 381, 384, 385, 382, 0, 383, 451, 0,
	387, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	396, 0, 452, 453, 397, 0, 0, 398, 399, 454,
	455, 0, 400, 401, 402, 403, 0, 0, 404, 405,
	406, 408, 0, 409, 0, 407, 410, 411, 412, 456,
	457, 915, 914, 413, 458, 0, 0, 0, 0, 414,
	415, 459, 416, 417, 418, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 419, 0, 0,
	0, 0, 217, 218, 219, 420, 421, 220, 422, 221,
	222, 423, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 424, 425, 426, 0, 229, 427, 0, 892, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 825, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 470,
	247, 248, 249, 428, 429, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	430, 256, 257, 259, 260, 258, 261, 431, 432, 0,
	826, 0, 0, 0, 0, 0, 262, 263, 433, 264,
	265, 0, 266, 0, 267, 0, 0, 827, 268, 0,
	269, 434, 0, 435, 0, 270, 271, 272, 273, 274,
	275, 436, 437, 829, 0, 277, 0, 0, 0, 284,
	0, 276, 0, 828, 278, 438, 280, 279, 281, 282,
	283, 439, 0, 440, 0, 285, 830, 831, 286, 287,
	288, 832, 289, 290, 0, 0, 291, 292, 293, 0,
	295, 294, 0, 441, 833, 296, 297, 834, 0, 298,
	299, 0, 0, 300, 0, 301, 894, 893, 302, 303,
	305, 306, 304, 835, 307, 308, 310, 309, 0, 0,
	836, 0, 442, 311, 443, 312, 313, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 444, 837, 319,
	838, 445, 320, 321, 322, 323, 324, 325, 326, 0,
	327, 446, 328, 447, 329, 0, 330, 331, 332, 333,
	334, 448, 335, 336, 0, 337, 338, 339, 340, 341,
	0, 343, 344, 342, 345, 346, 347, 348, 0, 349,
	839, 0, 350, 351, 352, 449, 353, 0, 357, 358,
	359, 360, 361, 362, 363, 0, 369, 370, 364, 366,
	367, 368, 365, 371, 372, 0, 373, 354, 355, 374,
	840, 375, 450, 376, 377, 0, 386, 378, 379, 380,
	356, 381, 384, 385, 382, 0, 383, 451, 0, 387,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 396,
	0, 452, 453, 397, 0, 0, 398, 399, 454, 455,
	0, 400, 401, 402, 403, 0, 0, 404, 405, 406,
	408, 0, 409, 0, 407, 410, 411, 412, 456, 457,
	915, 0, 413, 458, 0, 0, 0, 0, 414, 415,
	459, 416, 417, 418, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 217, 218, 219, 420, 421, 220, 422, 221, 222,
	423, 0, 223, 224, 225, 226, 227, 228, 0, 0,
	424, 425, 426, 0, 229, 427, 0, 892, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 825, 242, 243, 244, 0,
	0, 0, 0, 0, 0, 0, 245, 246, 470, 247,
	248, 249, 428, 429, 0, 250, 0, 251, 0, 252,
	0, 0, 253, 254, 0, 255, 0, 0, 0, 430,
	256, 257, 259, 260, 258, 261, 431, 432, 0, 826,
	0, 0, 0, 0, 0, 262, 263, 433, 264, 265,
	0, 266, 0, 267, 0, 0, 827, 268, 0, 269,
	434, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	436, 437, 829, 0, 277, 0, 0, 0, 284, 0,
	276, 0, 828, 278, 438, 280, 279, 281, 282, 283,
	439, 0, 440, 0, 285, 830, 831, 286, 287, 288,
	832, 289, 290, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 441, 833, 296, 297, 834, 0, 298, 299,
	0, 0, 300, 0, 301, 894, 893, 302, 303, 305,
	306, 304, 835, 307, 308, 310, 309, 0, 0, 836,
	0, 442, 311, 443, 312, 313, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 444, 837, 319, 838,
	445, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	446, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	448, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 839,
	0, 350, 351, 352, 449, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 369, 370, 364, 366, 367,
	368, 365, 371, 372, 0, 373, 354, 355, 374, 840,
	375, 450, 376, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 385, 382, 0, 383, 451, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 396, 0,
	452, 453, 397, 0, 0, 398, 399, 454, 455, 0,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	0, 409, 0, 407, 410, 411, 412, 456, 457, 209,
	0, 413, 458, 0, 0, 0, 0, 414, 415, 459,
	416, 417, 418, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 204, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 1619,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 203,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 564, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 208, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 204, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 203, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 201, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 208, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 204, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 203,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 209, 0,
	413, 458, 0, 0, 0, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 208, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 204, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 203, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 209, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 419, 0, 0, 208, 0, 217, 218,
	219, 420, 421, 220, 422, 221, 222, 423, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 424, 425, 426,
	0, 229, 427, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 470, 247, 248, 249, 428,
	429, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 430, 256, 257, 259,
	260, 258, 261, 431, 432, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 433, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 434, 0, 435,
	0, 270, 271, 272, 273, 274, 275, 436, 437, 0,
	0, 277, 0, 0, 0, 284, 0, 276, 0, 0,
	278, 438, 280, 279, 281, 282, 283, 439, 0, 440,
	0, 285, 0, 0, 286, 287, 288, 0, 289, 290,
	0, 0, 291, 292, 293, 0, 295, 294, 0, 441,
	0, 296, 297, 0, 0, 298, 299, 0, 0, 300,
	0, 301, 0, 0, 302, 303, 305, 306, 304, 0,
	307, 308, 310, 309, 0, 0, 0, 0, 442, 311,
	443, 312, 313, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 444, 0, 319, 0, 445, 320, 321,
	322, 323, 324, 325, 326, 0, 327, 446, 328, 447,
	329, 0, 330, 331, 332, 333, 334, 448, 335, 336,
	0, 337, 338, 339, 340, 341, 0, 343, 344, 342,
	345, 346, 347, 348, 0, 349, 0, 0, 350, 351,
	352, 449, 353, 0, 357, 358, 359, 360, 361, 362,
	363, 0, 369, 370, 364, 366, 367, 368, 365, 371,
	372, 0, 373, 354, 355, 374, 0, 375, 450, 376,
	377, 0, 386, 378, 379, 380, 356, 381, 384, 385,
	382, 0, 383, 451, 0, 387, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 396, 0, 452, 453, 397,
	0, 0, 398, 399, 454, 455, 0, 400, 401, 402,
	403, 0, 0, 404, 405, 406, 408, 0, 409, 0,
	407, 410, 411, 412, 456, 457, 209, 0, 413, 458,
	0, 0, 0, 0, 414, 415, 459, 416, 417, 418,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 419, 0, 0, 208, 0, 217, 218, 219,
	420, 421, 220, 422, 221, 222, 423, 0, 223, 224,
	225, 226, 227, 228, 0, 0, 424, 425, 426, 1896,
	229, 427, 0, 0, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 1893, 239, 0, 240, 241,
	0, 0, 242, 243, 244, 0, 0, 0, 0, 0,
	0, 0, 245, 246, 470, 247, 248, 249, 428, 429,
	0, 250, 0, 251, 0, 252, 0, 0, 253, 254,
	0, 255, 0, 0, 0, 430, 256, 257, 259, 260,
	258, 261, 431, 432, 0, 1970, 0, 0, 0, 0,
	0, 262, 263, 433, 264, 265, 0, 266, 0, 267,
	1899, 0, 0, 268, 0, 269, 434, 0, 435, 0,
	270, 271, 272, 273, 274, 275, 436, 437, 0, 0,
	277, 0, 0, 0, 284, 1968, 276, 0, 0, 278,
	438, 280, 279, 281, 282, 283, 439, 0, 440, 0,
	1967, 0, 0, 286, 287, 288, 0, 289, 290, 0,
	0, 291, 292, 293, 0, 295, 294, 0, 441, 0,
	296, 297, 0, 0, 298, 299, 0, 0, 300, 0,
	301, 0, 0, 302, 303, 305, 306, 304, 0, 307,
	308, 310, 309, 0, 0, 0, 0, 442, 311, 443,
	312, 313, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 444, 0, 319, 0, 445, 320, 321, 322,
	323, 324, 325, 326, 0, 327, 446, 328, 447, 329,
	1898, 330, 331, 332, 333, 334, 448, 335, 336, 0,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 0, 349, 0, 0, 350, 351, 352,
	449, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	0, 369, 370, 364, 366, 367, 368, 365, 371, 372,
	0, 373, 354, 355, 374, 0, 375, 450, 376, 377,
	0, 386, 378, 379, 380, 356, 381, 384, 385, 382,
	0, 383, 451, 0, 387, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 396, 0, 452, 453, 397, 0,
	0, 398, 399, 454, 455, 0, 400, 401, 402, 403,
	0, 1969, 404, 405, 406, 408, 0, 409, 0, 407,
	410, 411, 412, 456, 457, 209, 0, 413, 458, 0,
	0, 0, 0, 414, 415, 459, 416, 417, 418, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 419, 0, 0, 0, 0, 217, 218, 219, 420,
	421, 220, 422, 221, 222, 423, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 424, 425, 426, 1896, 229,
	427, 0, 0, 1890, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 1893, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 470, 247, 248, 249, 428, 429, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 430, 256, 257, 259, 260, 258,
	261, 431, 432, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 433, 264, 265, 0, 266, 0, 267, 1899,
	0, 0, 268, 0, 269, 434, 0, 435, 0, 270,
	271, 272, 273, 274, 275, 1889, 437, 0, 0, 277,
	0, 0, 0, 284, 0, 276, 0, 0, 278, 438,
	280, 279, 281, 282, 283, 439, 0, 440, 0, 285,
	0, 0, 286, 287, 288, 0, 289, 290, 0, 0,
	291, 292, 293, 0, 295, 294, 0, 441, 0, 296,
	297, 0, 0, 298, 299, 0, 0, 300, 0, 301,
	0, 0, 302, 303, 305, 306, 304, 0, 307, 308,
	310, 309, 0, 0, 0, 0, 442, 311, 443, 312,
	313, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 444, 0, 319, 0, 445, 320, 321, 322, 323,
	324, 325, 326, 0, 327, 446, 328, 447, 329, 1898,
	330, 331, 332, 333, 334, 448, 335, 336, 0, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 0, 349, 0, 0, 350, 351, 352, 449,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 0,
	369, 370, 364, 366, 367, 368, 365, 371, 372, 0,
	373, 354, 355, 374, 0, 375, 450, 376, 377, 0,
	386, 378, 379, 380, 356, 381, 384, 385, 382, 0,
	383, 451, 0, 387, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 396, 0, 452, 453, 397, 0, 0,
	398, 399, 454, 455, 0, 400, 401, 402, 403, 0,
	1897, 404, 405, 406, 408, 0, 409, 0, 407, 410,
	411, 412, 456, 457, 0, 0, 413, 458, 570, 0,
	209, 0, 414, 415, 459, 416, 417, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 569,
	551, 216, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 217, 218, 219, 420, 421, 220, 422, 221, 222,
	423, 0, 223, 224, 225, 226, 227, 228, 0, 0,
	424, 425, 426, 0, 229, 427, 0, 0, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 554, 0, 242, 243, 244, 0,
	0, 0, 0, 0, 0, 0, 245, 246, 470, 247,
	248, 249, 428, 429, 0, 250, 0, 251, 0, 252,
	0, 0, 253, 254, 0, 255, 0, 0, 0, 430,
	256, 257, 259, 260, 258, 261, 431, 432, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 433, 264, 265,
	0, 266, 0, 267, 0, 0, 0, 268, 555, 269,
	434, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	436, 437, 0, 0, 277, 0, 0, 0, 284, 0,
	276, 0, 0, 278, 438, 280, 279, 281, 282, 283,
	439, 0, 440, 0, 285, 0, 0, 286, 287, 288,
	0, 289, 290, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 441, 0, 296, 297, 0, 0, 298, 299,
	0, 0, 300, 0, 301, 0, 0, 302, 303, 305,
	306, 304, 0, 307, 308, 310, 309, 0, 0, 0,
	0, 442, 311, 443, 312, 313, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 444, 0, 319, 0,
	445, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	446, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	448, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 0,
	0, 350, 351, 352, 449, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 556, 369, 370, 364, 366, 367,
	368, 365, 371, 372, 0, 373, 354, 355, 374, 0,
	375, 450, 376, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 385, 382, 0, 383, 451, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 396, 0,
	452, 453, 397, 0, 0, 398, 399, 454, 455, 0,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	0, 409, 0, 407, 410, 411, 412, 456, 457, 0,
	0, 413, 458, 550, 0, 209, 0, 414, 415, 459,
	416, 417, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 551, 216, 0, 0, 0,
	0, 419, 0, 0, 0, 0, 217, 218, 219, 420,
	421, 220, 422, 221, 222, 423, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 424, 425, 426, 0, 229,
	427, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 554,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 470, 247, 248, 249, 428, 429, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 430, 256, 257, 259, 260, 258,
	261, 431, 432, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 433, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 555, 269, 434, 0, 435, 0, 270,
	271, 272, 273, 274, 275, 436, 437, 0, 0, 277,
	0, 0, 0, 284, 0, 276, 0, 0, 278, 438,
	280, 279, 281, 282, 283, 439, 0, 440, 0, 285,
	0, 0, 286, 287, 288, 0, 289, 290, 0, 0,
	291, 292, 293, 0, 295, 294, 0, 441, 0, 296,
	297, 0, 0, 298, 299, 0, 0, 300, 0, 301,
	0, 0, 302, 303, 305, 306, 304, 0, 307, 308,
	310, 309, 0, 0, 0, 0, 442, 311, 443, 312,
	313, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 444, 0, 319, 0, 445, 320, 321, 322, 323,
	324, 325, 326, 0, 327, 446, 328, 447, 329, 0,
	330, 331, 332, 333, 334, 448, 335, 336, 0, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 0, 349, 0, 0, 350, 351, 352, 449,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 556,
	369, 370, 364, 366, 367, 368, 365, 371, 372, 0,
	373, 354, 355, 374, 0, 375, 450, 376, 377, 0,
	386, 378, 379, 380, 356, 381, 384, 385, 382, 0,
	383, 451, 0, 387, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 396, 0, 452, 453, 397, 0, 0,
	398, 399, 454, 455, 0, 400, 401, 402, 403, 0,
	0, 404, 405, 406, 408, 0, 409, 0, 407, 410,
	411, 412, 456, 457, 209, 0, 413, 458, 0, 0,
	0, 0, 414, 415, 459, 416, 417, 418, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 554, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 555, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 556, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 1070, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 884,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 903, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 905, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 884, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 900, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 902,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 884,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 896, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 898, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 884, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 489, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 488,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 487, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 209, 0,
	413, 458, 0, 0, 0, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 1876, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 209, 2359, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 419, 0, 0, 0, 0, 217, 218,
	219, 420, 421, 220, 422, 221, 222, 423, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 424, 425, 426,
	0, 229, 427, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 470, 247, 248, 249, 428,
	429, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 430, 256, 257, 259,
	260, 258, 261, 431, 432, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 433, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 434, 0, 435,
	0, 270, 271, 272, 273, 274, 275, 436, 437, 0,
	0, 277, 0, 0, 0, 284, 0, 276, 0, 0,
	278, 438, 280, 279, 281, 282, 283, 439, 0, 440,
	0, 285, 0, 0, 286, 287, 288, 0, 289, 290,
	0, 0, 291, 292, 293, 0, 295, 294, 0, 441,
	0, 296, 297, 0, 0, 298, 299, 0, 0, 300,
	0, 301, 0, 0, 302, 303, 305, 306, 304, 0,
	307, 308, 310, 309, 0, 0, 0, 0, 442, 311,
	443, 312, 313, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 444, 0, 319, 0, 445, 320, 321,
	322, 323, 324, 325, 326, 0, 327, 446, 328, 447,
	329, 0, 330, 331, 332, 333, 334, 448, 335, 336,
	0, 337, 338, 339, 340, 341, 0, 343, 344, 342,
	345, 346, 347, 348, 0, 349, 0, 0, 350, 351,
	352, 449, 353, 0, 357, 358, 359, 360, 361, 362,
	363, 0, 369, 370, 364, 366, 367, 368, 365, 371,
	372, 0, 373, 354, 355, 374, 0, 375, 450, 376,
	377, 0, 386, 378, 379, 380, 356, 381, 384, 385,
	382, 0, 383, 451, 0, 387, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 396, 0, 452, 453, 397,
	0, 0, 398, 399, 454, 455, 0, 400, 401, 402,
	403, 0, 0, 404, 405, 406, 408, 0, 409, 0,
	407, 410, 411, 412, 456, 457, 209, 2359, 413, 458,
	0, 0, 0, 0, 414, 415, 459, 416, 417, 418,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 419, 0, 0, 0, 0, 217, 218, 219,
	420, 421, 220, 422, 221, 222, 423, 0, 223, 224,
	225, 226, 227, 228, 0, 0, 424, 425, 426, 0,
	229, 427, 0, 0, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 0, 242, 243, 244, 0, 0, 0, 0, 0,
	0, 0, 245, 246, 470, 247, 248, 249, 428, 429,
	0, 250, 0, 251, 0, 252, 0, 0, 253, 254,
	0, 255, 0, 0, 0, 430, 256, 257, 259, 260,
	258, 261, 431, 432, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 433, 264, 265, 0, 266, 0, 267,
	0, 0, 0, 268, 0, 269, 434, 0, 435, 0,
	270, 271, 272, 273, 274, 275, 436, 437, 0, 0,
	277, 0, 0, 0, 284, 0, 276, 0, 0, 278,
	438, 280, 279, 281, 282, 283, 439, 0, 440, 0,
	285, 0, 0, 286, 287, 288, 0, 289, 290, 0,
	0, 291, 292, 293, 0, 295, 294, 0, 441, 0,
	296, 297, 0, 0, 298, 299, 0, 0, 300, 0,
	301, 0, 0, 302, 303, 305, 306, 304, 0, 307,
	308, 310, 309, 0, 0, 0, 0, 442, 311, 443,
	312, 313, 0, 314, 315, 0, 0, 316, 2356, 0,
	0, 318, 444, 0, 319, 0, 445, 320, 321, 322,
	323, 324, 325, 326, 0, 327, 446, 328, 447, 329,
	0, 330, 331, 332, 333, 334, 448, 335, 336, 0,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 0, 349, 0, 0, 350, 351, 352,
	449, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	0, 369, 370, 364, 366, 367, 368, 365, 371, 372,
	0, 373, 354, 355, 374, 0, 375, 450, 376, 377,
	0, 386, 378, 379, 380, 356, 381, 384, 385, 382,
	0, 383, 451, 0, 387, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 396, 0, 452, 453, 397, 0,
	0, 398, 399, 454, 455, 0, 400, 401, 402, 403,
	0, 0, 404, 405, 406, 408, 0, 409, 0, 407,
	410, 411, 412, 456, 457, 209, 0, 413, 458, 0,
	0, 0, 0, 414, 415, 459, 416, 417, 418, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 419, 0, 0, 0, 0, 217, 218, 219, 420,
	421, 220, 422, 221, 222, 423, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 424, 425, 426, 0, 229,
	427, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 470, 247, 248, 249, 428, 429, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 430, 256, 257, 259, 260, 258,
	261, 431, 432, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 433, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 434, 0, 435, 0, 270,
	271, 272, 273, 274, 275, 436, 437, 0, 0, 277,
	0, 0, 0, 284, 0, 276, 0, 0, 278, 438,
	280, 279, 281, 282, 283, 439, 0, 440, 0, 285,
	0, 0, 286, 287, 288, 0, 289, 290, 0, 0,
	291, 292, 293, 0, 295, 294, 0, 441, 0, 296,
	297, 0, 0, 298, 299, 0, 0, 300, 0, 301,
	0, 0, 302, 303, 305, 306, 304, 0, 307, 308,
	310, 309, 0, 0, 0, 0, 442, 311, 443, 312,
	313, 0, 314, 315, 0, 884, 316, 317, 0, 0,
	318, 444, 0, 319, 0, 445, 320, 321, 322, 323,
	324, 325, 326, 0, 327, 446, 328, 447, 329, 0,
	330, 331, 332, 333, 334, 448, 335, 336, 0, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 0, 349, 0, 0, 350, 351, 352, 449,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 0,
	369, 370, 364, 366, 367, 368, 365, 371, 372, 0,
	373, 354, 355, 374, 0, 375, 450, 376, 377, 0,
	386, 378, 379, 380, 356, 381, 384, 385, 382, 0,
	383, 451, 0, 387, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 396, 0, 452, 453, 397, 0, 0,
	398, 399, 454, 455, 0, 400, 401, 402, 403, 0,
	0, 404, 405, 406, 408, 0, 409, 0, 407, 410,
	411, 412, 456, 457, 0, 0, 413, 458, 1641, 0,
	209, 0, 414, 415, 459, 416, 417, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 217, 218, 219, 420, 421, 220, 422, 221, 222,
	423, 0, 223, 224, 225, 226, 227, 228, 0, 0,
	424, 425, 426, 0, 229, 427, 0, 0, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 0, 242, 243, 244, 0,
	0, 0, 0, 0, 0, 0, 245, 246, 470, 247,
	248, 249, 428, 429, 0, 250, 0, 251, 0, 252,
	0, 0, 253, 254, 0, 255, 0, 0, 0, 430,
	256, 257, 259, 260, 258, 261, 431, 432, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 433, 264, 265,
	0, 266, 0, 267, 0, 0, 0, 268, 0, 269,
	434, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	436, 437, 0, 0, 277, 0, 0, 0, 284, 0,
	276, 0, 0, 278, 438, 280, 279, 281, 282, 283,
	439, 0, 440, 0, 285, 0, 0, 286, 287, 288,
	0, 289, 290, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 441, 0, 296, 297, 0, 0, 298, 299,
	0, 0, 300, 0, 301, 0, 0, 302, 303, 305,
	306, 304, 0, 307, 308, 310, 309, 0, 0, 0,
	0, 442, 311, 443, 312, 313, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 444, 0, 319, 0,
	445, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	446, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	448, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 0,
	0, 350, 351, 352, 449, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 369, 370, 364, 366, 367,
	368, 365, 371, 372, 0, 373, 354, 355, 374, 0,
	375, 450, 376, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 385, 382, 0, 383, 451, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 396, 0,
	452, 453, 397, 0, 0, 398, 399, 454, 455, 0,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	0, 409, 0, 407, 410, 411, 412, 456, 457, 0,
	0, 413, 458, 1639, 0, 209, 0, 414, 415, 459,
	416, 417, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 419, 0, 0, 0, 0, 217, 218, 219, 420,
	421, 220, 422, 221, 222, 423, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 424, 425, 426, 0, 229,
	427, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 470, 247, 248, 249, 428, 429, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 430, 256, 257, 259, 260, 258,
	261, 431, 432, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 433, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 434, 0, 435, 0, 270,
	271, 272, 273, 274, 275, 436, 437, 0, 0, 277,
	0, 0, 0, 284, 0, 276, 0, 0, 278, 438,
	280, 279, 281, 282, 283, 439, 0, 440, 0, 285,
	0, 0, 286, 287, 288, 0, 289, 290, 0, 0,
	291, 292, 293, 0, 295, 294, 0, 441, 0, 296,
	297, 0, 0, 298, 299, 0, 0, 300, 0, 301,
	0, 0, 302, 303, 305, 306, 304, 0, 307, 308,
	310, 309, 0, 0, 0, 0, 442, 311, 443, 312,
	313, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 444, 0, 319, 0, 445, 320, 321, 322, 323,
	324, 325, 326, 0, 327, 446, 328, 447, 329, 0,
	330, 331, 332, 333, 334, 448, 335, 336, 0, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 0, 349, 0, 0, 350, 351, 352, 449,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 0,
	369, 370, 364, 366, 367, 368, 365, 371, 372, 0,
	373, 354, 355, 374, 0, 375, 450, 376, 377, 0,
	386, 378, 379, 380, 356, 381, 384, 385, 382, 0,
	383, 451, 0, 387, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 396, 0, 452, 453, 397, 0, 0,
	398, 399, 454, 455, 0, 400, 401, 402, 403, 0,
	0, 404, 405, 406, 408, 0, 409, 0, 407, 410,
	411, 412, 456, 457, 0, 0, 413, 458, 1637, 0,
	209, 0, 414, 415, 459, 416, 417, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 217, 218, 219, 420, 421, 220, 422, 221, 222,
	423, 0, 223, 224, 225, 226, 227, 228, 0, 0,
	424, 425, 426, 0, 229, 427, 0, 0, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 0, 242, 243, 244, 0,
	0, 0, 0, 0, 0, 0, 245, 246, 470, 247,
	248, 249, 428, 429, 0, 250, 0, 251, 0, 252,
	0, 0, 253, 254, 0, 255, 0, 0, 0, 430,
	256, 257, 259, 260, 258, 261, 431, 432, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 433, 264, 265,
	0, 266, 0, 267, 0, 0, 0, 268, 0, 269,
	434, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	436, 437, 0, 0, 277, 0, 0, 0, 284, 0,
	276, 0, 0, 278, 438, 280, 279, 281, 282, 283,
	439, 0, 440, 0, 285, 0, 0, 286, 287, 288,
	0, 289, 290, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 441, 0, 296, 297, 0, 0, 298, 299,
	0, 0, 300, 0, 301, 0, 0, 302, 303, 305,
	306, 304, 0, 307, 308, 310, 309, 0, 0, 0,
	0, 442, 311, 443, 312, 313, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 444, 0, 319, 0,
	445, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	446, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	448, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 0,
	0, 350, 351, 352, 449, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 369, 370, 364, 366, 367,
	368, 365, 371, 372, 0, 373, 354, 355, 374, 0,
	375, 450, 376, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 385, 382, 0, 383, 451, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 396, 0,
	452, 453, 397, 0, 0, 398, 399, 454, 455, 0,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	0, 409, 0, 407, 410, 411, 412, 456, 457, 209,
	0, 413, 458, 0, 0, 0, 0, 414, 415, 459,
	416, 417, 418, 0, 0, 212, 213, 214, 215, 1615,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 1576, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 1574, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 596, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 1144, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 597, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 593, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 592, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 1474, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 1473,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 596, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 1144, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 597, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 593, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 592, 453, 397, 0, 0, 398,
	1145, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 596, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 586, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 436,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	597, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 593, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 1120, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 592,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 1088, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 1087, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 1084, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 1083,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 1081, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 1080, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 1078, 0, 209,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 1077,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 0, 0,
	413, 458, 1074, 0, 209, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 1073, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 323, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 333, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 353,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 209, 0, 413, 458, 0, 0, 0,
	0, 414, 415, 459, 416, 417, 418, 0, 0, 212,
	213, 214, 215, 1062, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 1060, 0, 209, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 1059, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 1054, 0, 209, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 1045, 0, 209, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 1044, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 1041, 0, 209, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 1037, 0, 209, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 1039, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 922, 0, 209, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 924, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 919, 0, 209, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 596, 0, 209, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 586, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 585, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 597, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 587, 353, 0,
	357, 358, 593, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 588, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 592, 453, 397, 0, 0, 398, 590,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 576, 0, 209, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 577, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 572, 0, 209, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 0, 0, 413, 458, 562, 0, 209, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 357, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 0, 0, 413,
	458, 511, 0, 209, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 0, 216, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 217, 218, 219, 420, 421, 220,
	422, 221, 222, 423, 0, 223, 224, 225, 226, 227,
	228, 0, 0, 424, 425, 426, 0, 229, 427, 0,
	0, 0, 230, 231, 232, 233, 234, 0, 236, 237,
	238, 235, 0, 239, 0, 240, 241, 0, 0, 242,
	243, 244, 0, 0, 0, 0, 0, 0, 0, 245,
	246, 470, 247, 248, 249, 428, 429, 0, 250, 0,
	251, 0, 252, 0, 0, 253, 254, 0, 255, 0,
	0, 0, 430, 256, 257, 259, 260, 258, 261, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	433, 264, 265, 0, 266, 0, 267, 0, 0, 0,
	268, 0, 269, 434, 0, 435, 0, 270, 271, 272,
	273, 274, 275, 436, 437, 0, 0, 277, 0, 0,
	0, 284, 0, 276, 0, 0, 278, 438, 280, 279,
	281, 282, 283, 439, 0, 440, 0, 285, 0, 0,
	286, 287, 288, 0, 289, 290, 0, 0, 291, 292,
	293, 0, 295, 294, 0, 441, 0, 296, 297, 0,
	0, 298, 299, 0, 0, 300, 0, 301, 0, 0,
	302, 303, 305, 306, 304, 0, 307, 308, 310, 309,
	0, 0, 0, 0, 442, 311, 443, 312, 313, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 444,
	0, 319, 0, 445, 320, 321, 322, 323, 324, 325,
	326, 0, 327, 446, 328, 447, 329, 0, 330, 331,
	332, 333, 334, 448, 335, 336, 0, 337, 338, 339,
	340, 341, 0, 343, 344, 342, 345, 346, 347, 348,
	0, 349, 0, 0, 350, 351, 352, 449, 353, 0,
	357, 358, 359, 360, 361, 362, 363, 0, 369, 370,
	364, 366, 367, 368, 365, 371, 372, 0, 373, 354,
	355, 374, 0, 375, 450, 376, 377, 0, 386, 378,
	379, 380, 356, 381, 384, 385, 382, 0, 383, 451,
	0, 387, 388, 0, 389, 390, 391, 392, 393, 394,
	395, 396, 0, 452, 453, 397, 0, 0, 398, 399,
	454, 455, 0, 400, 401, 402, 403, 0, 0, 404,
	405, 406, 408, 0, 409, 0, 407, 410, 411, 412,
	456, 457, 209, 0, 413, 458, 0, 0, 0, 0,
	414, 415, 459, 416, 417, 418, 0, 0, 212, 213,
	214, 215, 0, 216, 0, 0, 0, 0, 419, 0,
	0, 0, 0, 217, 218, 219, 420, 421, 220, 422,
	221, 222, 423, 0, 223, 224, 225, 226, 227, 228,
	0, 0, 424, 425, 426, 0, 229, 427, 0, 0,
	0, 230, 231, 232, 233, 234, 0, 236, 237, 238,
	235, 0, 239, 0, 240, 241, 0, 0, 242, 243,
	244, 0, 0, 0, 0, 0, 0, 0, 245, 246,
	470, 247, 248, 249, 428, 429, 0, 250, 0, 251,
	0, 252, 0, 0, 253, 254, 0, 255, 0, 0,
	0, 430, 256, 257, 259, 260, 258, 261, 431, 432,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 433,
	264, 265, 0, 266, 0, 267, 0, 0, 0, 268,
	0, 269, 434, 0, 435, 0, 270, 271, 272, 273,
	274, 275, 436, 437, 0, 0, 277, 0, 0, 0,
	284, 0, 276, 0, 0, 278, 438, 280, 279, 281,
	282, 283, 439, 0, 440, 0, 285, 0, 0, 286,
	287, 288, 0, 289, 290, 0, 0, 291, 292, 293,
	0, 295, 294, 0, 441, 0, 296, 297, 0, 0,
	298, 299, 0, 0, 300, 0, 301, 0, 0, 302,
	303, 305, 306, 304, 0, 307, 308, 310, 309, 0,
	0, 0, 0, 442, 311, 443, 312, 313, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 444, 0,
	319, 0, 445, 320, 321, 322, 323, 324, 325, 326,
	0, 327, 446, 328, 447, 329, 0, 330, 331, 332,
	333, 334, 448, 335, 336, 0, 337, 338, 339, 340,
	341, 0, 343, 344, 342, 345, 346, 347, 348, 0,
	349, 0, 0, 350, 351, 352, 449, 353, 0, 357,
	358, 359, 360, 361, 362, 363, 0, 369, 370, 364,
	366, 367, 368, 365, 371, 372, 0, 373, 354, 355,
	374, 0, 375, 450, 376, 377, 0, 386, 378, 379,
	380, 356, 381, 384, 385, 382, 0, 383, 451, 0,
	387, 388, 0, 389, 390, 391, 392, 393, 394, 395,
	396, 0, 452, 453, 397, 0, 0, 398, 399, 454,
	455, 0, 400, 401, 402, 403, 0, 0, 404, 405,
	406, 408, 0, 409, 0, 407, 410, 411, 412, 456,
	457, 209, 0, 413, 458, 0, 0, 0, 0, 414,
	415, 459, 416, 417, 418, 0, 0, 212, 213, 214,
	215, 0, 216, 0, 0, 0, 0, 419, 0, 0,
	0, 0, 217, 218, 219, 420, 421, 220, 422, 221,
	222, 423, 0, 223, 224, 225, 226, 227, 228, 0,
	0, 424, 425, 426, 0, 229, 427, 0, 0, 0,
	230, 231, 232, 233, 234, 0, 236, 237, 238, 235,
	0, 239, 0, 240, 241, 0, 0, 242, 243, 244,
	0, 0, 0, 0, 0, 0, 0, 245, 246, 470,
	247, 248, 249, 428, 429, 0, 250, 0, 251, 0,
	252, 0, 0, 253, 254, 0, 255, 0, 0, 0,
	430, 256, 257, 259, 260, 258, 261, 431, 432, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 433, 264,
	265, 0, 266, 0, 267, 0, 0, 0, 268, 0,
	269, 434, 0, 435, 0, 270, 271, 272, 273, 274,
	275, 2251, 437, 0, 0, 277, 0, 0, 0, 284,
	0, 276, 0, 0, 278, 438, 280, 279, 281, 282,
	283, 439, 0, 440, 0, 285, 0, 0, 286, 287,
	288, 0, 289, 290, 0, 0, 291, 292, 293, 0,
	295, 294, 0, 441, 0, 296, 297, 0, 0, 298,
	299, 0, 0, 300, 0, 301, 0, 0, 302, 303,
	305, 306, 304, 0, 307, 308, 310, 309, 0, 0,
	0, 0, 442, 311, 443, 312, 313, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 444, 0, 319,
	0, 445, 320, 321, 322, 323, 324, 325, 326, 0,
	327, 446, 328, 447, 329, 0, 330, 331, 332, 333,
	334, 448, 335, 336, 0, 337, 338, 339, 340, 341,
	0, 343, 344, 342, 345, 346, 347, 348, 0, 349,
	0, 0, 350, 351, 352, 449, 353, 0, 357, 358,
	359, 360, 361, 362, 363, 0, 369, 370, 364, 366,
	367, 368, 365, 371, 372, 0, 373, 354, 355, 374,
	0, 375, 450, 376, 377, 0, 386, 378, 379, 380,
	356, 381, 384, 385, 382, 0, 383, 451, 0, 387,
	388, 0, 389, 390, 391, 392, 393, 394, 395, 396,
	0, 452, 453, 397, 0, 0, 398, 399, 454, 455,
	0, 400, 401, 402, 403, 0, 0, 404, 405, 406,
	408, 0, 409, 0, 407, 410, 411, 412, 456, 457,
	209, 0, 413, 458, 0, 0, 0, 0, 414, 415,
	459, 416, 417, 418, 0, 0, 212, 213, 214, 215,
	0, 216, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 217, 218, 219, 420, 421, 220, 422, 221, 222,
	423, 0, 223, 224, 225, 226, 227, 228, 0, 0,
	424, 425, 426, 0, 229, 427, 0, 0, 0, 230,
	231, 232, 233, 234, 0, 236, 237, 238, 235, 0,
	239, 0, 240, 241, 0, 0, 242, 243, 244, 0,
	0, 0, 0, 0, 0, 0, 245, 246, 470, 247,
	248, 249, 428, 429, 0, 250, 0, 251, 0, 252,
	0, 0, 253, 254, 0, 255, 0, 0, 0, 430,
	256, 257, 259, 260, 258, 261, 431, 432, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 433, 264, 265,
	0, 266, 0, 267, 0, 0, 0, 268, 0, 269,
	434, 0, 435, 0, 270, 271, 272, 273, 274, 275,
	2249, 437, 0, 0, 277, 0, 0, 0, 284, 0,
	276, 0, 0, 278, 438, 280, 279, 281, 282, 283,
	439, 0, 440, 0, 285, 0, 0, 286, 287, 288,
	0, 289, 290, 0, 0, 291, 292, 293, 0, 295,
	294, 0, 441, 0, 296, 297, 0, 0, 298, 299,
	0, 0, 300, 0, 301, 0, 0, 302, 303, 305,
	306, 304, 0, 307, 308, 310, 309, 0, 0, 0,
	0, 442, 311, 443, 312, 313, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 444, 0, 319, 0,
	445, 320, 321, 322, 323, 324, 325, 326, 0, 327,
	446, 328, 447, 329, 0, 330, 331, 332, 333, 334,
	448, 335, 336, 0, 337, 338, 339, 340, 341, 0,
	343, 344, 342, 345, 346, 347, 348, 0, 349, 0,
	0, 350, 351, 352, 449, 353, 0, 357, 358, 359,
	360, 361, 362, 363, 0, 369, 370, 364, 366, 367,
	368, 365, 371, 372, 0, 373, 354, 355, 374, 0,
	375, 450, 376, 377, 0, 386, 378, 379, 380, 356,
	381, 384, 385, 382, 0, 383, 451, 0, 387, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 396, 0,
	452, 453, 397, 0, 0, 398, 399, 454, 455, 0,
	400, 401, 402, 403, 0, 0, 404, 405, 406, 408,
	0, 409, 0, 407, 410, 411, 412, 456, 457, 209,
	0, 413, 458, 0, 0, 0, 0, 414, 415, 459,
	416, 417, 418, 0, 0, 212, 213, 214, 215, 0,
	216, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	217, 218, 219, 420, 421, 220, 422, 221, 222, 423,
	0, 223, 224, 225, 226, 227, 228, 0, 0, 424,
	425, 426, 0, 229, 427, 0, 0, 0, 230, 231,
	232, 233, 234, 0, 236, 237, 238, 235, 0, 239,
	0, 240, 241, 0, 0, 242, 243, 244, 0, 0,
	0, 0, 0, 0, 0, 245, 246, 470, 247, 248,
	249, 428, 429, 0, 250, 0, 251, 0, 252, 0,
	0, 253, 254, 0, 255, 0, 0, 0, 430, 256,
	257, 259, 260, 258, 261, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 433, 264, 265, 0,
	266, 0, 267, 0, 0, 0, 268, 0, 269, 434,
	0, 435, 0, 270, 271, 272, 273, 274, 275, 2238,
	437, 0, 0, 277, 0, 0, 0, 284, 0, 276,
	0, 0, 278, 438, 280, 279, 281, 282, 283, 439,
	0, 440, 0, 285, 0, 0, 286, 287, 288, 0,
	289, 290, 0, 0, 291, 292, 293, 0, 295, 294,
	0, 441, 0, 296, 297, 0, 0, 298, 299, 0,
	0, 300, 0, 301, 0, 0, 302, 303, 305, 306,
	304, 0, 307, 308, 310, 309, 0, 0, 0, 0,
	442, 311, 443, 312, 313, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 444, 0, 319, 0, 445,
	320, 321, 322, 323, 324, 325, 326, 0, 327, 446,
	328, 447, 329, 0, 330, 331, 332, 333, 334, 448,
	335, 336, 0, 337, 338, 339, 340, 341, 0, 343,
	344, 342, 345, 346, 347, 348, 0, 349, 0, 0,
	350, 351, 352, 449, 353, 0, 357, 358, 359, 360,
	361, 362, 363, 0, 369, 370, 364, 366, 367, 368,
	365, 371, 372, 0, 373, 354, 355, 374, 0, 375,
	450, 376, 377, 0, 386, 378, 379, 380, 356, 381,
	384, 385, 382, 0, 383, 451, 0, 387, 388, 0,
	389, 390, 391, 392, 393, 394, 395, 396, 0, 452,
	453, 397, 0, 0, 398, 399, 454, 455, 0, 400,
	401, 402, 403, 0, 0, 404, 405, 406, 408, 0,
	409, 0, 407, 410, 411, 412, 456, 457, 209, 0,
	413, 458, 0, 0, 0, 0, 414, 415, 459, 416,
	417, 418, 0, 0, 212, 213, 214, 215, 0, 216,
	0, 0, 0, 0, 419, 0, 0, 0, 0, 217,
	218, 219, 420, 421, 220, 422, 221, 222, 423, 0,
	223, 224, 225, 226, 227, 228, 0, 0, 424, 425,
	426, 0, 229, 427, 0, 0, 0, 230, 231, 232,
	233, 234, 0, 236, 237, 238, 235, 0, 239, 0,
	240, 241, 0, 0, 242, 243, 244, 0, 0, 0,
	0, 0, 0, 0, 245, 246, 470, 247, 248, 249,
	428, 429, 0, 250, 0, 251, 0, 252, 0, 0,
	253, 254, 0, 255, 0, 0, 0, 430, 256, 257,
	259, 260, 258, 261, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 433, 264, 265, 0, 266,
	0, 267, 0, 0, 0, 268, 0, 269, 434, 0,
	435, 0, 270, 271, 272, 273, 274, 275, 436, 437,
	0, 0, 277, 0, 0, 0, 284, 0, 276, 0,
	0, 278, 438, 280, 279, 281, 282, 283, 439, 0,
	440, 0, 285, 0, 0, 286, 287, 288, 0, 289,
	290, 0, 0, 291, 292, 293, 0, 295, 294, 0,
	441, 0, 296, 297, 0, 0, 298, 299, 0, 0,
	300, 0, 301, 0, 0, 302, 303, 305, 306, 304,
	0, 307, 308, 310, 309, 0, 0, 0, 0, 442,
	311, 443, 312, 313, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 444, 0, 319, 0, 445, 320,
	321, 322, 323, 324, 325, 326, 0, 327, 446, 328,
	447, 329, 0, 330, 331, 332, 333, 334, 448, 335,
	336, 0, 337, 338, 339, 340, 341, 0, 343, 344,
	342, 345, 346, 347, 348, 0, 349, 0, 0, 350,
	351, 352, 449, 353, 0, 577, 358, 359, 360, 361,
	362, 363, 0, 369, 370, 364, 366, 367, 368, 365,
	371, 372, 0, 373, 354, 355, 374, 0, 375, 450,
	376, 377, 0, 386, 378, 379, 380, 356, 381, 384,
	385, 382, 0, 383, 451, 0, 387, 388, 0, 389,
	390, 391, 392, 393, 394, 395, 396, 0, 452, 453,
	397, 0, 0, 398, 399, 454, 455, 0, 400, 401,
	402, 403, 0, 0, 404, 405, 406, 408, 0, 409,
	0, 407, 410, 411, 412, 456, 457, 209, 0, 413,
	458, 0, 0, 0, 0, 414, 415, 459, 416, 417,
	418, 0, 0, 212, 213, 214, 215, 0, 216, 0,
	0, 0, 0, 419, 0, 1487, 0, 0, 217, 218,
	219, 420, 421, 220, 422, 221, 222, 423, 0, 223,
	224, 225, 226, 227, 228, 0, 0, 424, 425, 426,
	0, 229, 427, 0, 0, 0, 230, 231, 232, 233,
	234, 0, 236, 237, 238, 235, 0, 239, 0, 240,
	241, 0, 0, 242, 243, 244, 0, 0, 0, 0,
	0, 0, 0, 245, 246, 470, 247, 248, 249, 428,
	429, 0, 250, 0, 251, 0, 252, 0, 0, 253,
	254, 0, 255, 0, 0, 0, 430, 256, 257, 259,
	260, 258, 261, 431, 432, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 433, 264, 265, 0, 266, 0,
	267, 0, 0, 0, 268, 0, 269, 434, 0, 435,
	0, 270, 271, 272, 273, 274, 275, 436, 437, 0,
	0, 277, 0, 0, 0, 284, 0, 276, 0, 0,
	278, 438, 280, 279, 281, 282, 283, 439, 0, 440,
	0, 285, 0, 0, 286, 287, 288, 0, 289, 290,
	0, 0, 291, 292, 293, 0, 295, 294, 0, 441,
	0, 296, 297, 0, 0, 298, 299, 0, 0, 300,
	0, 301, 0, 0, 302, 303, 305, 306, 304, 0,
	307, 308, 310, 309, 0, 0, 0, 0, 442, 311,
	443, 312, 313, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 444, 0, 319, 0, 445, 320, 321,
	322, 323, 324, 325, 326, 0, 327, 446, 328, 447,
	329, 0, 330, 331, 332, 333, 334, 448, 335, 336,
	0, 337, 338, 339, 340, 341, 0, 343, 344, 342,
	345, 346, 347, 348, 0, 349, 0, 0, 350, 351,
	352, 449, 353, 0, 357, 358, 359, 360, 361, 362,
	363, 0, 369, 370, 364, 366, 367, 368, 365, 371,
	372, 0, 0, 354, 355, 374, 0, 375, 450, 376,
	377, 0, 386, 378, 379, 380, 356, 381, 384, 385,
	382, 0, 383, 451, 0, 387, 388, 0, 389, 390,
	391, 392, 393, 394, 395, 396, 0, 452, 453, 397,
	0, 0, 398, 399, 454, 455, 0, 400, 401, 402,
	403, 0, 0, 404, 405, 406, 408, 0, 409, 0,
	407, 410, 411, 412, 456, 457, 209, 0, 413, 458,
	0, 0, 0, 0, 414, 415, 459, 416, 417, 418,
	0, 0, 212, 213, 214, 215, 0, 216, 0, 0,
	0, 0, 419, 0, 0, 0, 0, 217, 218, 219,
	420, 421, 220, 422, 221, 222, 423, 0, 223, 224,
	225, 226, 227, 228, 0, 0, 424, 425, 426, 0,
	229, 427, 0, 0, 0, 230, 231, 232, 233, 234,
	0, 236, 237, 238, 235, 0, 239, 0, 240, 241,
	0, 0, 242, 243, 244, 0, 0, 0, 0, 0,
	0, 0, 245, 246, 470, 247, 248, 249, 428, 429,
	0, 250, 0, 251, 0, 252, 0, 0, 253, 254,
	0, 255, 0, 0, 0, 430, 256, 257, 259, 260,
	258, 261, 431, 432, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 433, 264, 265, 0, 266, 0, 267,
	0, 0, 0, 268, 0, 269, 434, 0, 435, 0,
	270, 271, 272, 273, 274, 275, 1478, 437, 0, 0,
	277, 0, 0, 0, 284, 0, 276, 0, 0, 278,
	438, 280, 279, 281, 282, 283, 439, 0, 440, 0,
	285, 0, 0, 286, 287, 288, 0, 289, 290, 0,
	0, 291, 292, 293, 0, 295, 294, 0, 441, 0,
	296, 297, 0, 0, 298, 299, 0, 0, 300, 0,
	301, 0, 0, 302, 303, 305, 306, 304, 0, 307,
	308, 310, 309, 0, 0, 0, 0, 442, 311, 443,
	312, 313, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 444, 0, 319, 0, 445, 320, 321, 322,
	323, 324, 325, 326, 0, 327, 446, 328, 447, 329,
	0, 330, 331, 332, 333, 334, 448, 335, 336, 0,
	337, 338, 339, 340, 341, 0, 343, 344, 342, 345,
	346, 347, 348, 0, 349, 0, 0, 350, 351, 352,
	449, 353, 0, 357, 358, 359, 360, 361, 362, 363,
	0, 369, 370, 364, 366, 367, 368, 365, 371, 372,
	0, 373, 354, 355, 374, 0, 375, 450, 376, 377,
	0, 386, 378, 379, 380, 356, 381, 384, 385, 382,
	0, 383, 451, 0, 387, 388, 0, 389, 390, 391,
	392, 393, 394, 395, 396, 0, 452, 453, 397, 0,
	0, 398, 399, 454, 455, 0, 400, 401, 402, 403,
	0, 0, 404, 405, 406, 408, 0, 409, 0, 407,
	410, 411, 412, 456, 457, 209, 0, 413, 458, 0,
	0, 0, 0, 414, 415, 459, 416, 417, 418, 0,
	0, 212, 213, 214, 215, 0, 216, 0, 0, 0,
	0, 419, 0, 0, 0, 0, 217, 218, 219, 420,
	421, 220, 422, 221, 222, 423, 0, 223, 224, 225,
	226, 227, 228, 0, 0, 424, 425, 426, 0, 229,
	427, 0, 0, 0, 230, 231, 232, 233, 234, 0,
	236, 237, 238, 235, 0, 239, 0, 240, 241, 0,
	0, 242, 243, 244, 0, 0, 0, 0, 0, 0,
	0, 245, 246, 470, 247, 248, 249, 428, 429, 0,
	250, 0, 251, 0, 252, 0, 0, 253, 254, 0,
	255, 0, 0, 0, 430, 256, 257, 259, 260, 258,
	261, 431, 432, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 433, 264, 265, 0, 266, 0, 267, 0,
	0, 0, 268, 0, 269, 434, 0, 435, 0, 270,
	271, 272, 273, 274, 275, 436, 437, 0, 0, 277,
	0, 0, 0, 284, 0, 276, 0, 0, 278, 438,
	280, 279, 281, 282, 283, 439, 0, 440, 0, 285,
	0, 0, 286, 287, 288, 0, 289, 290, 0, 0,
	291, 292, 293, 0, 295, 294, 0, 441, 0, 296,
	297, 0, 0, 298, 299, 0, 0, 300, 0, 301,
	0, 0, 302, 303, 305, 306, 304, 0, 307, 308,
	310, 309, 0, 0, 0, 0, 442, 311, 443, 312,
	313, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 444, 0, 319, 0, 445, 320, 321, 322, 323,
	324, 325, 326, 0, 327, 446, 328, 447, 329, 0,
	330, 331, 332, 333, 334, 448, 858, 336, 0, 337,
	338, 339, 340, 341, 0, 343, 344, 342, 345, 346,
	347, 348, 0, 349, 0, 0, 350, 351, 352, 449,
	353, 0, 357, 358, 359, 360, 361, 362, 363, 0,
	369, 370, 364, 366, 367, 368, 365, 371, 372, 0,
	373, 354, 355, 374, 0, 375, 450, 376, 377, 0,
	386, 378, 379, 380, 356, 381, 384, 385, 382, 0,
	383, 451, 0, 387, 388, 0, 389, 390, 391, 392,
	393, 394, 395, 396, 0, 452, 453, 397, 0, 0,
	398, 399, 454, 455, 0, 400, 401, 402, 403, 0,
	0, 404, 405, 406, 408, 0, 409, 0, 407, 410,
	411, 412, 456, 457, 209, 0, 413, 458, 0, 0,
	0, 0, 414, 415, 459, 416, 417, 418, 0, 0,
	212, 213, 214, 215, 0, 216, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 217, 218, 219, 420, 421,
	220, 422, 221, 222, 423, 0, 223, 224, 225, 226,
	227, 228, 0, 0, 424, 425, 426, 0, 229, 427,
	0, 0, 0, 230, 231, 232, 233, 234, 0, 236,
	237, 238, 235, 0, 239, 0, 240, 241, 0, 0,
	242, 243, 244, 0, 0, 0, 0, 0, 0, 0,
	245, 246, 470, 247, 248, 249, 428, 429, 0, 250,
	0, 251, 0, 252, 0, 0, 253, 254, 0, 255,
	0, 0, 0, 430, 256, 257, 259, 260, 258, 261,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 433, 264, 265, 0, 266, 0, 267, 0, 0,
	0, 268, 0, 269, 434, 0, 435, 0, 270, 271,
	272, 273, 274, 275, 436, 437, 0, 0, 277, 0,
	0, 0, 284, 0, 276, 0, 0, 278, 438, 280,
	279, 281, 282, 283, 439, 0, 440, 0, 285, 0,
	0, 286, 287, 288, 0, 289, 290, 0, 0, 291,
	292, 293, 0, 295, 294, 0, 441, 0, 296, 297,
	0, 0, 298, 299, 0, 0, 300, 0, 301, 0,
	0, 302, 303, 305, 306, 304, 0, 307, 308, 310,
	309, 0, 0, 0, 0, 442, 311, 443, 312, 313,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	444, 0, 319, 0, 445, 320, 321, 322, 0, 324,
	325, 326, 0, 327, 446, 328, 447, 329, 0, 330,
	331, 332, 0, 334, 448, 335, 336, 0, 337, 338,
	339, 340, 341, 0, 343, 344, 342, 345, 346, 347,
	348, 0, 349, 0, 0, 350, 351, 352, 449, 0,
	0, 357, 358, 359, 360, 361, 362, 363, 0, 369,
	370, 364, 366, 367, 368, 365, 371, 372, 0, 373,
	354, 355, 374, 0, 375, 450, 376, 377, 0, 386,
	378, 379, 380, 356, 381, 384, 385, 382, 0, 383,
	451, 0, 387, 388, 0, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 452, 453, 397, 0, 0, 398,
	399, 454, 455, 0, 400, 401, 402, 403, 0, 0,
	404, 405, 406, 408, 0, 409, 0, 407, 410, 411,
	412, 456, 457, 0, 0, 413, 458, 0, 0, 0,
	0, 414, 415, 459, 416, 417, 418, 1240, 1241, 0,
	1273, 1274, 1275, 1283, 1284, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 0, 0,
	0, 0, 1243, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1240, 1241, 0, 1273, 1274,
	1275, 1283, 1284, 1285, 0, 0, 0, 1242, 0, 0,
	0, 0, 0, 1276, 0, 1262, 0, 0, 0, 0,
	1243, 0, 1259, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1242, 0, 0, 0, 0,
	0, 0, 0, 1262, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 1266, 1267, 1268, 0, 0, 0, 0,
	0, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1280, 1290, 0, 1270, 1271, 1272, 0,
	1265, 1266, 1267, 1268, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 0, 0, 1286, 1287, 0, 0,
	0, 0, 0, 0, 1257, 1258, 0, 0, 0, 0,
	0, 1280, 1290, 0, 1270, 1271, 1272, 1278, 0, 0,
	0, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	1288, 0, 1257, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 1278, 0, 0, 0, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 0,
	1281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 0, 0, 1240, 1241, 0, 1273, 1274, 1275,
	1283, 1284, 1285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1276, 0, 0, 0, 0, 0, 0, 1243,
	0, 0, 1289, 0, 1279, 0, 0, 1254, 1255, 1261,
	1260, 1256, 1282, 0, 1253, 1251, 1252, 1244, 1245, 1246,
	1247, 1249, 1250, 0, 1242, 0, 0, 0, 0, 0,
	0, 2134, 1262, 0, 0, 0, 0, 0, 0, 1259,
	0, 0, 1279, 0, 0, 1254, 1255, 1261, 1260, 1256,
	1282, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249,
	1250, 0, 0, 0, 0, 2919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	1266, 1267, 1268, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1240,
	1241, 0, 1273, 1274, 1275, 1283, 1284, 1285, 0, 0,
	1280, 1290, 0, 1270, 1271, 1272, 0, 1276, 0, 0,
	0, 0, 0, 0, 1243, 0, 0, 1289, 0, 0,
	0, 0, 0, 1286, 1287, 0, 0, 0, 0, 0,
	0, 1257, 1258, 0, 0, 0, 0, 0, 0, 1242,
	0, 0, 0, 0, 1278, 0, 0, 1262, 0, 0,
	0, 1263, 0, 0, 1259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 1266, 1267, 1268, 0, 0,
	0, 0, 0, 1248, 0, 0, 0, 1269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1264, 1280, 1290, 0, 1270, 1271,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1286, 1287,
	0, 0, 0, 0, 0, 0, 1257, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 1263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1254, 1255, 1261, 1260, 1256, 1282,
	0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250,
	0, 0, 1269, 0, 2915, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1264,
	1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1276, 0,
	0, 0, 1281, 0, 0, 1243, 0, 0, 1289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1242, 0, 0, 0, 0, 0, 0, 0, 1262, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 0, 0,
	1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1276, 0,
	0, 0, 0, 0, 0, 1243, 1279, 0, 1289, 1254,
	1255, 1261, 1260, 1256, 1282, 0, 1253, 1251, 1252, 1244,
	1245, 1246, 1247, 1249, 1250, 1265, 1266, 1267, 1268, 2855,
	1242, 0, 0, 0, 1248, 0, 0, 0, 1262, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1280, 1290, 0, 1270,
	1271, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1286,
	1287, 0, 0, 0, 0, 0, 0, 1257, 1258, 0,
	0, 0, 0, 0, 0, 1265, 1266, 1267, 1268, 0,
	1278, 0, 0, 0, 1248, 0, 0, 1263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 0, 0, 1280, 1290, 0, 1270,
	1271, 1272, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1286,
	1287, 0, 0, 0, 0, 0, 0, 1257, 1258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1269, 0, 0, 0, 1263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1264, 0, 0, 1288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 1281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1264, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 1281, 0, 0, 1243, 1279, 0, 1289,
	1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251, 1252,
	1244, 1245, 1246, 1247, 1249, 1250, 0, 0, 0, 0,
	2804, 1242, 0, 0, 0, 0, 0, 0, 0, 1262,
	0, 0, 0, 0, 0, 0, 1259, 0, 0, 0,
	0, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 1243, 1279, 0, 1289,
	1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251, 1252,
	1244, 1245, 1246, 1247, 1249, 1250, 1265, 1266, 1267, 1268,
	2772, 1242, 0, 0, 0, 1248, 0, 0, 0, 1262,
	0, 0, 0, 0, 0, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 1290, 0,
	1270, 1271, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 1287, 0, 0, 0, 0, 0, 0, 1257, 1258,
	0, 0, 0, 0, 0, 0, 1265, 1266, 1267, 1268,
	0, 1278, 0, 0, 0, 1248, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 0, 0, 1280, 1290, 0,
	1270, 1271, 1272, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 1287, 0, 0, 0, 0, 0, 0, 1257, 1258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 1269, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1264, 0, 0, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1264, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1276, 0, 0, 0, 1281, 0, 0, 1243, 1279, 0,
	1289, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251,
	1252, 1244, 1245, 1246, 1247, 1249, 1250, 0, 0, 0,
	0, 2766, 1242, 0, 0, 0, 0, 0, 0, 0,
	1262, 0, 0, 0, 0, 0, 0, 1259, 0, 0,
	0, 0, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1276, 0, 0, 0, 0, 0, 0, 1243, 1279, 0,
	1289, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251,
	1252, 1244, 1245, 1246, 1247, 1249, 1250, 1265, 1266, 1267,
	1268, 2760, 1242, 0, 0, 0, 1248, 0, 0, 0,
	1262, 0, 0, 0, 0, 0, 0, 1259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 1290,
	0, 1270, 1271, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 1287, 0, 0, 0, 0, 0, 0, 1257,
	1258, 0, 0, 0, 0, 0, 0, 1265, 1266, 1267,
	1268, 0, 1278, 0, 0, 0, 1248, 0, 0, 1263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 1280, 1290,
	0, 1270, 1271, 1272, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 1287, 0, 0, 0, 0, 0, 0, 1257,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 1269, 0, 0, 0, 1263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1264, 0, 0, 1288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 1281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1264, 1240, 1241, 0, 1273, 1274, 1275, 1283,
	1284, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1276, 0, 0, 0, 1281, 0, 0, 1243, 1279,
	0, 1289, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253,
	1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 0, 0,
	0, 0, 2677, 1242, 0, 0, 0, 0, 0, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 1240, 1241, 0, 1273, 1274, 1275, 1283,
	1284, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1276, 0, 0, 0, 0, 0, 0, 1243, 1279,
	0, 1289, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253,
	1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 1265, 1266,
	1267, 1268, 2634, 1242, 0, 0, 0, 1248, 0, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	1290, 0, 1270, 1271, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 1287, 0, 0, 0, 0, 0, 0,
	1257, 1258, 0, 0, 0, 0, 0, 0, 1265, 1266,
	1267, 1268, 0, 1278, 0, 0, 0, 1248, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 0, 0, 1280,
	1290, 0, 1270, 1271, 1272, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 1287, 0, 0, 0, 0, 0, 0,
	1257, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 1269, 0, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1264, 0, 0, 1288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1264, 1240, 1241, 0, 1273, 1274, 1275,
	1283, 1284, 1285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1276, 0, 0, 0, 1281, 0, 0, 1243,
	1279, 0, 1289, 1254, 1255, 1261, 1260, 1256, 1282, 0,
	1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 0,
	0, 0, 0, 2633, 1242, 0, 0, 0, 0, 0,
	0, 0, 1262, 0, 0, 0, 0, 0, 0, 1259,
	0, 0, 0, 0, 1240, 1241, 0, 1273, 1274, 1275,
	1283, 1284, 1285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1276, 0, 0, 0, 0, 0, 0, 1243,
	1279, 0, 1289, 1254, 1255, 1261, 1260, 1256, 1282, 0,
	1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 1265,
	1266, 1267, 1268, 2605, 1242, 0, 0, 0, 1248, 0,
	0, 0, 1262, 0, 0, 0, 0, 0, 0, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1280, 1290, 0, 1270, 1271, 1272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 1287, 0, 0, 0, 0, 0,
	0, 1257, 1258, 0, 0, 0, 0, 0, 0, 1265,
	1266, 1267, 1268, 0, 1278, 0, 0, 0, 1248, 0,
	0, 1263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 0, 0,
	1280, 1290, 0, 1270, 1271, 1272, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1286, 1287, 0, 0, 0, 0, 0,
	0, 1257, 1258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 1269, 0, 0,
	0, 1263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1264, 0, 0, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 1281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1264, 1240, 1241, 0, 1273, 1274,
	1275, 1283, 1284, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 0, 0, 0, 1281, 0, 0,
	1243, 1279, 0, 1289, 1254, 1255, 1261, 1260, 1256, 1282,
	0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250,
	0, 0, 0, 0, 2427, 1242, 0, 0, 0, 0,
	0, 0, 0, 1262, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 1240, 1241, 0, 1273, 1274,
	1275, 1283, 1284, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	1243, 1279, 0, 1289, 1254, 1255, 1261, 1260, 1256, 1282,
	0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250,
	1265, 1266, 1267, 1268, 2400, 1242, 0, 0, 0, 1248,
	0, 0, 0, 1262, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 1290, 0, 1270, 1271, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	0, 0, 1257, 1258, 0, 0, 0, 0, 0, 0,
	1265, 1266, 1267, 1268, 0, 1278, 0, 0, 0, 1248,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	0, 1280, 1290, 0, 1270, 1271, 1272, 0, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	0, 0, 1257, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 1269, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 1279, 0, 0, 1254, 1255, 1261, 1260, 1256,
	1282, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249,
	1250, 0, 0, 0, 0, 1751, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 1243, 0, 0, 1289,
	0, 0, 1279, 0, 0, 1254, 1255, 1261, 1260, 1256,
	1282, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249,
	1250, 1242, 0, 2103, 0, 0, 0, 1240, 1241, 1262,
	1273, 1274, 1275, 1283, 1284, 1285, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 0, 0,
	0, 0, 1243, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
	0, 0, 0, 0, 0, 1262, 1265, 1266, 1267, 1268,
	0, 0, 1259, 0, 0, 1248, 2997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 1290, 0,
	1270, 1271, 1272, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 1287, 1265, 1266, 1267, 1268, 0, 0, 1257, 1258,
	0, 1248, 0, 2183, 0, 0, 2182, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 1280, 1290, 0, 1270, 1271, 1272, 0,
	0, 0, 0, 0, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 1287, 1277, 0,
	0, 0, 0, 0, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2996, 1278, 0, 0,
	0, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 0, 0, 0, 0, 0,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1264, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 0, 0, 1240, 1241, 0,
	1273, 1274, 1275, 1283, 1284, 1285, 0, 0, 0, 0,
	1269, 0, 0, 0, 0, 1276, 0, 0, 0, 0,
	2076, 0, 1243, 0, 0, 1289, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
	1281, 0, 0, 0, 0, 1262, 0, 0, 0, 0,
	0, 0, 1259, 0, 0, 0, 0, 0, 1279, 0,
	0, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251,
	1252, 1244, 1245, 1246, 1247, 1249, 1250, 0, 0, 2077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 1266, 1267, 1268, 0, 0, 0, 0,
	0, 1248, 0, 0, 1279, 0, 0, 1254, 1255, 1261,
	1260, 1256, 1282, 0, 1253, 1251, 1252, 1244, 1245, 1246,
	1247, 1249, 1250, 1280, 1290, 0, 1270, 1271, 1272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 1287, 0, 0,
	0, 0, 0, 0, 1257, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1849, 0, 0, 0, 0, 0, 1240, 1241, 0,
	1273, 1274, 1275, 1283, 1284, 1285, 0, 0, 0, 0,
	1269, 0, 0, 0, 0, 1276, 0, 0, 0, 1848,
	0, 0, 1243, 0, 0, 1289, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 1240, 1241, 0, 1273, 1274,
	1275, 1283, 1284, 1285, 0, 0, 0, 1242, 0, 0,
	1281, 0, 0, 1276, 0, 1262, 0, 0, 0, 0,
	1243, 0, 1259, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1242, 0, 0, 0, 0,
	0, 0, 0, 1262, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 1266, 1267, 1268, 0, 0, 0, 0,
	0, 1248, 0, 0, 1279, 0, 0, 1254, 1255, 1261,
	1260, 1256, 1282, 0, 1253, 1251, 1252, 1244, 1245, 1246,
	1247, 1249, 1250, 1280, 1290, 0, 1270, 1271, 1272, 0,
	1265, 1266, 1267, 1268, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 0, 0, 1286, 1287, 0, 0,
	0, 0, 0, 0, 1257, 1258, 0, 0, 0, 0,
	0, 1280, 1290, 0, 1270, 1271, 1272, 1278, 0, 0,
	0, 0, 0, 0, 1263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	1288, 0, 1257, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 1278, 0, 0, 0, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 1277, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 1240, 1241, 0, 1273, 1274,
	1275, 1283, 1284, 1285, 0, 0, 0, 0, 1269, 0,
	1281, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	1243, 0, 0, 1289, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1242, 0, 0, 1281, 0,
	0, 0, 0, 1262, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 1254, 1255, 1261,
	1260, 1256, 1282, 0, 1253, 1251, 1252, 1244, 1245, 1246,
	1247, 1249, 1250, 0, 0, 0, 0, 0, 0, 0,
	1265, 1266, 1267, 1268, 0, 0, 0, 0, 0, 1248,
	0, 0, 1279, 0, 0, 1254, 1255, 1261, 1260, 1256,
	1282, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249,
	1250, 1280, 1290, 0, 1270, 1271, 1272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	0, 0, 1257, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 0, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1240, 1241, 0, 1273, 1274,
	1275, 1283, 1284, 1285, 0, 0, 0, 0, 1269, 0,
	0, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	1243, 0, 0, 1289, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 1240, 1241, 0, 1273, 1274, 1275, 1283,
	1284, 1285, 0, 0, 0, 1242, 0, 0, 1281, 0,
	0, 1276, 0, 1262, 0, 2187, 0, 0, 1243, 0,
	1259, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2404, 0,
	0, 0, 0, 1242, 0, 0, 0, 0, 0, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 1266, 1267, 1268, 0, 0, 0, 0, 0, 1248,
	0, 0, 1279, 0, 2192, 1254, 1255, 1261, 1260, 1256,
	1282, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249,
	1250, 1280, 1290, 0, 1270, 1271, 1272, 0, 1265, 1266,
	1267, 1268, 0, 0, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 1286, 1287, 0, 0, 0, 0,
	0, 0, 1257, 1258, 0, 0, 0, 0, 0, 1280,
	1290, 0, 1270, 1271, 1272, 1278, 0, 0, 0, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 1287, 0, 0, 0, 0, 1288, 0,
	1257, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 1278, 0, 0, 0, 0, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 1240, 1241, 0, 1273, 1274, 1275, 1283,
	1284, 1285, 0, 0, 0, 0, 1269, 0, 1281, 0,
	0, 1276, 0, 0, 0, 0, 0, 0, 1243, 0,
	0, 1289, 0, 1264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1242, 0, 0, 1281, 0, 0, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 1254, 1255, 1261, 1260, 1256,
	1282, 0, 1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249,
	1250, 0, 0, 0, 0, 0, 0, 0, 1265, 1266,
	1267, 1268, 0, 0, 0, 0, 0, 1248, 0, 0,
	1279, 0, 0, 1254, 1255, 1261, 1260, 1256, 1282, 0,
	1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 1280,
	1290, 0, 1270, 1271, 1272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 1287, 0, 0, 0, 0, 0, 0,
	1257, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2149, 0, 0, 0, 0,
	0, 0, 0, 1240, 1241, 0, 1273, 1274, 1275, 1283,
	1284, 1285, 0, 0, 0, 0, 1269, 0, 0, 0,
	0, 1276, 0, 0, 0, 2133, 0, 0, 1243, 0,
	0, 1289, 0, 1264, 0, 0, 0, 0, 0, 0,
	0, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285,
	0, 0, 0, 1242, 0, 0, 1281, 0, 0, 1276,
	0, 1262, 0, 0, 0, 0, 1243, 0, 1259, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1242, 0, 0, 0, 0, 0, 0, 0, 1262,
	0, 0, 0, 0, 0, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 1266,
	1267, 1268, 0, 0, 0, 0, 0, 1248, 0, 0,
	1279, 0, 0, 1254, 1255, 1261, 1260, 1256, 1282, 0,
	1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 1280,
	1290, 0, 1270, 1271, 1272, 0, 1265, 1266, 1267, 1268,
	0, 0, 0, 0, 0, 1248, 0, 0, 0, 0,
	0, 0, 1286, 1287, 0, 0, 0, 0, 0, 0,
	1257, 1258, 0, 0, 0, 0, 0, 1280, 1290, 0,
	1270, 1271, 1272, 1278, 0, 0, 0, 0, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 1287, 0, 0, 0, 0, 1288, 0, 1257, 1258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 1278, 0, 0, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1269, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1264, 0, 0, 0, 0, 0, 0,
	0, 1240, 1241, 0, 1273, 1274, 1275, 1283, 1284, 1285,
	0, 0, 0, 0, 1269, 0, 1281, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 1243, 0, 0, 1289,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1242, 0, 0, 1281, 0, 0, 0, 0, 1262,
	0, 0, 0, 0, 0, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 1254, 1255, 1261, 1260, 1256, 1282, 0,
	1253, 1251, 1252, 1244, 1245, 1246, 1247, 1249, 1250, 0,
	0, 0, 0, 0, 0, 0, 1265, 1266, 1267, 1268,
	0, 0, 0, 0, 0, 1248, 0, 0, 1279, 0,
	0, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251,
	1252, 1244, 1245, 1246, 1247, 1249, 1250, 1280, 1290, 0,
	1270, 1271, 1272, 0, 0, 0, 0, 0, 0, 1240,
	1241, 0, 1273, 1274, 1275, 1283, 1284, 1285, 0, 0,
	1286, 1287, 0, 0, 0, 0, 0, 0, 1257, 1258,
	0, 0, 0, 0, 1243, 0, 0, 1289, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1242,
	0, 0, 0, 0, 1288, 0, 0, 1262, 0, 0,
	0, 0, 0, 0, 1259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 1266, 1267, 1268, 0, 0,
	0, 1264, 0, 1248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 1280, 1290, 1537, 1270, 1271,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1286, 1287,
	0, 0, 0, 0, 0, 0, 1257, 1258, 0, 0,
	0, 0, 1548, 1533, 1538, 1521, 1558, 1557, 0, 1278,
	1523, 1522, 0, 0, 0, 0, 1263, 1566, 1565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 0, 0, 0, 0, 0, 1279, 0,
	0, 1254, 1255, 1261, 1260, 1256, 1282, 0, 1253, 1251,
	1252, 1244, 1245, 1246, 1247, 1249, 1250, 1559, 0, 1555,
	1554, 0, 0, 0, 0, 0, 0, 0, 0, 1553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1552, 1550, 1551, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 1541, 1536, 1542, 1543, 1544, 1545, 1546, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 1563, 1564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1556, 0, 0, 0, 1534, 1535, 1279, 0, 0, 1254,
	1255, 1261, 1260, 1256, 1282, 0, 1253, 1251, 1252, 1244,
	1245, 1246, 1247, 1249, 1250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1549, 0, 0,
	0, 1672, 1670, 1671, 1674, 1673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1526, 1527, 1528, 1529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1547, 1530,
	0, 0, 1548, 1533, 1538, 1521, 1558, 1557, 0, 1568,
	1523, 1522, 0, 0, 0, 0, 0, 1566, 1565, 0,
	0, 0, 0, 0, 1524, 0, 0, 1560, 1561, 1562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 1567, 0, 1559, 0, 1555,
	1554, 0, 0, 0, 0, 0, 0, 0, 0, 1553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 653, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1552, 1550, 1551, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 0,
	0, 1532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1541, 1536, 1542, 1543, 1544, 1545, 1546, 628, 1540,
	0, 0, 0, 630, 0, 0, 0, 658, 1563, 1564,
	0, 0, 0, 636, 637, 0, 0, 0, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 631, 0, 0, 0, 1525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1556, 0, 0, 0, 1534, 1535, 652, 642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 632, 0, 0, 0, 1549, 0, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 633, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 640, 1526, 1527, 1528, 1529, 0, 0,
	635, 0, 0, 0, 0, 0, 0, 0, 1547, 1530,
	0, 0, 0, 639, 0, 0, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 655, 0, 0, 0, 0,
	0, 0, 0, 0, 1524, 0, 0, 1560, 1561, 1562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 1567, 0, 0, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 624, 643, 656, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 646, 0, 0, 644, 0, 0, 0, 651,
	0, 0, 0, 0, 657, 0, 0, 0, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 649,
}
var sqlPact = [...]int{

	3263, -1000, -5, -1000, -1000, -1000, 224, -1000, -1000, -1000,
	-1000, 223, 219, 218, -1000, 215, 212, 211, 208, 207,
	206, 205, 204, 201, 200, 199, -1000, -1000, 198, -1000,
	-1000, -1000, -1000, 197, 195, 194, -1000, 191, 1524, 29655,
	190, 188, 186, 1538, 46458, 1504, 185, 184, -1000, 182,
	1400, 34125, 1215, 1819, -1000, 181, 180, 1478, 46089, 2981,
	31881, 1312, 1868, 45714, 29280, 1855, 31506, 45339, -1000, -1000,
	1052, -1000, -1000, 44964, 179, 178, 176, 175, 170, -1000,
	169, 44589, 168, 165, 158, 144, 143, 138, 136, 133,
	128, 127, 119, 116, 114, 113, 111, 106, 105, 103,
	102, 100, -1000, 99, 88, 85, -1000, 55350, 83, 80,
	79, -1000, 1296, 78, 77, 72, 63, 60, -1000, -1000,
	59, 54, 53, 52, 51, 50, 125, 49, 48, 46,
	45, 44, -1000, 1138, 481, 1789, 12101, 1229, 1205, 1196,
	1193, 1192, 755, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49041, 46458, 42, -22, 40, -1000, 2377, 796, 22490,
	3263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 33750, 33375, 33000, 27429, 44214, 43839, 9711, 9711,
	915, -1000, -7, 30393, 46458, -1000, -1000, 285, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 18624, 18212, 17800, 411, -1000, 282,
	-1000, 1246, -1000, -1000, -1000, -1000, 43464, 43089, 42714, 27044,
	26659, 42339, 1709, 1704, 41964, -1000, -1000, 41589, -1000, -1000,
	2076, 1916, 1912, 32625, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41220, 40845, 40470, 40095, 39720, 26274, 25889,
	597, -1000, -1000, -1000, -1000, 23240, -1000, -1000, -1000, -1000,
	-1000, 38, -1000, 36, 27, -1000, 26, 25, 24, 23,
	22, 21, 20, 19, -1000, 18, 17, -1000, 14, 12,
	-1000, 10, -3, 1397, 1304, 1073, 39345, 1047, 1502, 39,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 46458, -1000, 19022,
	-1000, 595, -1000, 1946, -1000, 19022, -1000, 1499, 250, 1442,
	-1000, -1000, -1000, 1287, 1031, -1000, -1000, 46458, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2510, 1383, 593, 38970, -1000,
	1731, -1000, 721, 12897, -1000, 907, -1000, 12897, 281, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1581, 2094, 2471, 25504, 1431, 2301,
	2074, 2509, 1695, 2059, 2004, 1996, 1993, 1986, 2508, 1145,
	2507, 1017, 827, 2506, 1972, 1951, 2485, 1366, 858, 2505,
	2504, 1944, 1915, -1000, -1000, -1000, -1000, 1075, -1000, -1000,
	-1000, -1000, 35601, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1138, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1626, 2247, 2247, 2247, 2351,
	387, 384, -1000, 125, -1000, 1563, -1000, 1378, -1000, -1000,
	-1000, 54391, -1000, -1000, 19022, 19022, 19022, 19022, 19022, 1358,
	-1000, -1000, -1000, 618, -1000, 592, 591, 10494, -1000, -1000,
	2458, -1000, -1000, -1000, 405, -1000, -1000, 19022, -1000, 271,
	-1000, -1000, -1000, -1000, 582, 2496, -1000, 805, -1000, -1000,
	-1000, 722, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2011,
	532, 531, -1000, 530, 527, -1000, -1000, -1000, 580, 579,
	576, 575, 572, 570, -1000, -1000, -1000, 1340, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 775,
	-1000, 775, 775, 511, 511, 565, 562, 512, 561, -1000,
	-1000, 553, 511, 551, 550, -1000, -1000, 546, 729, 693,
	544, 540, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1372, -1000, -1000, 1372, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 914, 47934, -1000, -1000, -1000, -9, 46458, -1000,
	411, -9, -1000, -1000, 535, -1000, 13295, 13295, 13295, -1000,
	-1000, 1497, 19022, -1000, 1902, -1000, 3624, -171, 533, 677,
	677, -1000, 21365, 626, 25119, -1000, 532, 531, 530, 527,
	-1000, 263, -1000, -1000, -1000, -1000, -1000, 1453, 2143, 938,
	-1000, 1224, 2142, -1000, 1998, 2140, 1166, -1000, -1000, 757,
	2137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1353, -1000, -1000, 1559, 2127, -43, 2039, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1541, -1000, 27798, 30393,
	-7, -23, -1000, 9328, 54391, -1000, 54391, 691, -1000, 54391,
	689, -1000, 1913, 46458, 9711, 46458, 46458, -1000, 525, 1588,
	1496, -1000, -1000, 1998, 1585, -1000, -1000, 747, 1584, -1000,
	-1000, 1583, -1000, 411, -1000, -1000, 38595, 48672, 747, 1582,
	-1000, -1000, -1000, 35601, -1000, 46458, -1000, 46458, -1000, 1084,
	-1000, 48303, 139, 2126, -1000, -1000, 139, 2125, -1000, 139,
	2112, -1000, 137, 2110, -1000, -1000, 1486, 2105, -1000, -27,
	2104, -1000, -1000, -27, 2099, -1000, -1000, 19022, -26, -1000,
	-1000, -1000, 796, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	38220, 30024, 46458, 32250, 717, 54391, 2413, 55233, 27798, 54391,
	30024, 46458, 2010, -1000, 37845, 37470, 2324, 720, -1000, -1000,
	46458, -1000, 19022, -1000, 2411, 1600, -19, -1000, -1000, -1000,
	-1000, -1000, 1625, 1677, 867, 1044, -1000, 12897, 12897, 2208,
	-1000, 256, 9711, -1000, -1000, 1004, -1000, -1000, -1000, -1000,
	-1000, 37095, -1000, -1000, -1000, 1379, 46458, -1000, -1000, 28905,
	1962, -1000, 46458, -1000, 46458, -1000, 46458, -1000, 46458, -1000,
	46458, -1000, -1000, -1000, -1000, -1000, 2092, 1216, 1992, -1000,
	46458, -1000, 46458, -1000, -1000, -1000, 1617, -1000, -1000, -1000,
	36726, 36351, 35976, -1000, -1000, 1137, 988, -1000, -1000, 140,
	-1000, -1000, 1626, -1000, 1521, 1721, 17388, 1699, 19022, 125,
	-1000, -1000, 125, 125, 11689, -1000, -1000, -1000, 46458, -1000,
	54953, 55233, 9711, 933, 19022, 19022, 19022, 19022, 19022, 19022,
	19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022,
	19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022,
	19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022, 19022, 1719,
	19022, 913, 19022, 19022, 19022, 19022, 1141, -1000, -1000, 1339,
	441, 1346, -1000, 2457, 2457, 2457, 54799, 54799, 508, 618,
	-1000, 19022, -1000, 153, 19022, 384, 52305, -8, 10096, -1000,
	-1000, -1000, -1000, 16976, 770, 54391, 8945, 6594, -1000, 2479,
	1091, 1958, 1802, 524, 664, 663, 660, 657, 19022, 19022,
	19022, 19022, 19022, 19022, -1000, -1000, -1000, -1000, -1000, -1000,
	2458, -1000, 16578, 16166, -1000, 2478, 15754, 15342, -1000, 14930,
	20216, 14518, 922, 921, 920, 19022, 10892, -1000, -19, -1000,
	47934, -1000, 46458, -9, 2405, 19022, 225, -1000, 53277, -1000,
	225, 225, 523, -29, 54391, 1664, 1662, 22865, 1908, 1401,
	1401, 1401, -1000, 516, 615, 677, 7011, 14106, 34494, 1415,
	34494, 287, 382, 20990, 1902, -1000, -1000, 46458, 9711, -16,
	1250, -1000, 31131, 2266, 2249, 2250, 1074, -1000, 2340, 35601,
	2368, 153, 2273, 1907, 908, 35601, 1998, -1000, 55233, -1000,
	1730, 2336, 1024, 1064, 1024, 1024, 1026, 35601, 906, 1361,
	27798, 2272, 905, -17, 2364, 153, 2270, 1906, 899, -1000,
	-1000, 46458, 9711, 2261, 984, 640, -1000, 46458, 246, -1000,
	19022, 19022, 1022, -31, 245, 1671, 1655, 155, -1000, 30762,
	2403, 2096, 46458, -1000, 1998, 2086, -1000, 1359, -1000, 2084,
	2083, 2395, 1483, 1580, -1000, -1000, -1000, 1479, 1579, 942,
	2080, 762, 429, 2385, 429, 24369, -1000, 46458, -1000, 46458,
	-1000, -1000, 46458, -1000, 46458, -1000, 46458, -1000, 46458, 46458,
	-1000, 46458, 27798, 27798, 27798, -39, 3736, 28536, 891, -41,
	-1000, 794, 30762, 3878, -45, -1000, 904, -1000, -1000, -1000,
	216, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 775, 514,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 512, 1340, 511, 511, 511, -1000, -1000, -1000,
	729, 693, -1000, -1000, -1000, 775, 775, -1000, -1000, -188,
	1892, -23, 32250, 640, -1000, 640, -1000, 1984, -1000, 2280,
	703, -47, 825, -19, -1000, 1372, -1000, 1419, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2487, -1000, 2464, -1000, -1000, 2475, -10, -1000, -10,
	-1000, 9711, -1000, 46458, -1000, -1000, -1000, -1000, -1000, 46458,
	-1000, -1000, 46458, -1000, -1000, -1000, -1000, -1000, 674, -1000,
	1974, -1000, 3736, 234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 46458, 46458, 46458, -1000, 35601, -1000, -1000, -1000,
	-1000, 54391, -1000, 442, -1000, -1000, 54391, 1194, 1687, -1000,
	1687, -11, -1000, 53027, 1650, 46458, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 718, 573,
	573, 947, 947, 947, 947, 2409, 594, 3617, 883, 5154,
	5154, 5154, 5154, 5154, 5154, 5154, 5154, 509, 526, 526,
	509, 509, 509, 509, 509, 526, 526, 526, 5154, 5154,
	5154, 54799, 54641, 3656, 19022, 19022, 890, 1321, 441, 3656,
	19022, 3656, 3656, 3656, 3656, -1000, 1238, -1000, -1000, -1000,
	-1000, 1883, 506, 20216, 20216, -1000, -1000, -1000, 10494, 19022,
	-1000, -1000, -1000, -1000, 496, 19022, -1000, 52375, -234, 381,
	-159, -1000, 19022, 614, -46, -1000, 1038, -1000, 19022, 231,
	-1000, -1000, 1, 19022, 19022, 19022, 380, -1000, 376, -1000,
	887, -1000, 886, 882, 881, -1000, 495, 1395, 494, 493,
	19022, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54353,
	49787, 5981, 5846, 4943, -63, -65, 372, -1000, 1863, -159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 368, -1000, 367,
	-66, -1000, -72, -1000, 366, -1000, 54103, -159, 365, 4155,
	-1000, 20216, 20216, 20216, 10494, 492, 364, -1000, 52777, -1000,
	716, 708, 707, 53853, 13694, 13694, 13694, 363, 53815, 19022,
	-159, -1000, -1000, 491, -73, 762, 13295, 22115, 9711, -1000,
	762, 762, 19022, -1000, 19022, 22865, 22865, 1341, 1656, 22865,
	-1000, -1000, -1000, -1000, 34494, 637, 677, 34494, -1000, 2458,
	1681, -1000, 362, -1000, -1000, -1000, 46458, 411, -1000, -1000,
	677, 361, 230, 1149, 46458, 46458, 46458, -1000, -1000, 1577,
	47565, 1576, 55233, 46458, -1000, -1000, 490, 488, 1646, 1643,
	46458, 46458, 47196, 46827, 46458, 1330, 1447, 1352, 153, -1000,
	706, 487, 46458, 1162, -1000, -1000, -1000, -1000, -1000, 46458,
	-1000, -1000, 2473, -1000, 1024, -1000, -1000, -1000, 1024, 1998,
	1158, 46458, 27798, 753, 705, 46458, 1365, 153, -1000, 699,
	483, 9711, 1344, -1000, 696, 46458, 1771, -1000, 1532, -1000,
	8562, 54391, 54391, -1000, -1000, 9711, 1763, 1763, 9711, 360,
	-13, -1000, -1000, -1000, -1000, -1000, -1000, 1701, 46458, 606,
	46458, 153, 46458, 159, 46458, 27798, 27798, 27798, 153, 46458,
	2079, 46458, 2071, 2152, 646, 46458, 1433, 19022, 1176, -1000,
	23615, 782, 46458, 1148, 154, -1000, -1000, -1000, 33, 46458,
	-1000, -1000, 139, 139, 139, -1000, 137, 1486, -1000, -27,
	-27, -1000, -1000, -1000, 46458, 2434, 27798, -74, -1000, 797,
	885, 884, -1000, 55233, -1000, 607, 832, -1000, 2472, 480,
	2458, -1000, 745, 35232, 46458, 149, -1000, 750, 1540, -1000,
	12897, 12897, -1000, 1372, -1000, -1000, 1134, -1000, 1309, -1000,
	-1000, -1000, -1000, 12897, -1000, -1000, 1962, -23, -23, -1000,
	-1000, 507, -1000, 46458, -1000, -1000, -1000, -1000, 1194, -1000,
	19022, -1000, -1000, -1000, 11689, -1000, -1000, -1000, 46458, -143,
	19022, 3656, 3656, 19022, 20216, 20216, -1000, 3656, -1000, -1000,
	-1000, -1000, -1000, 1862, 479, 19022, 55233, 5221, 4692, -82,
	509, 19022, -14, -1000, 19022, -1000, 52024, -1000, -1000, 566,
	2148, -1000, 19022, 53565, 8179, 358, 12499, -1000, 53315, -36,
	-36, -1000, 2484, 1602, 1449, 1190, 1059, 2469, -1000, 24744,
	765, 1433, 51954, 54953, 55233, 19022, 19022, 19022, -1000, -1000,
	2458, -1000, 19022, -1000, -1000, -1000, -1000, -1000, 1860, 19022,
	-1000, 54953, 55233, 20216, 20216, 20216, 20216, 20216, 20216, 20216,
	20216, 20216, 20216, 20216, 20216, 20216, 20216, 20216, 20216, 20216,
	20216, 20216, 1645, 20216, 2452, 2452, 2452, -15, 19022, -1000,
	1871, 1860, 19022, 19022, -1000, -1000, -1000, 55233, 357, 356,
	354, -1000, 19022, -159, 3878, -1000, 1800, -1000, -94, -1000,
	1902, -1000, -1000, 1800, 1800, -83, 54391, -1000, 1341, -1000,
	477, 19022, 22865, -1000, 613, -1000, -84, -1000, 34494, -1000,
	610, -231, -1000, 671, -1000, 677, 411, -1000, 34494, -1000,
	9711, -1000, -1000, 880, 879, -1000, 2065, -1000, 1568, -1000,
	787, -1000, 1248, 19022, 21740, 473, 472, 1285, -1000, 2060,
	1486, 2054, 1486, -1000, -1000, 725, -1000, 464, 462, -1000,
	-16, 1234, -1000, 24000, 19022, -1000, 878, -1000, -1000, -1000,
	1998, 876, -1000, -1000, 1355, 24000, -1000, -1000, -1000, 24000,
	19022, -1000, -17, 874, 24000, 2025, 745, 1858, 1008, -1000,
	-1000, -1000, -1000, -1000, -1000, 229, 1720, 30762, 46458, 461,
	46458, 459, -1000, -1000, 458, 46458, 1998, -1000, 747, -1000,
	-1000, 792, 9711, 457, 9711, 1634, 646, 28167, -1000, 747,
	1721, 54391, -1000, 1148, 11290, 2248, -85, -1000, 227, -1000,
	-1000, -1000, 762, 24369, 22865, 19022, 2503, -91, -1000, -1000,
	-1000, -1000, -1000, -23, 1440, 2217, 2217, -1000, 2468, -1000,
	608, 352, 2458, 351, -1000, -18, 456, -1000, 668, 667,
	-23, 46458, -1000, 1436, 9711, 46458, 46458, 9711, 46458, -1000,
	-1000, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1446, 51673, -1000, 2256, 9711, 2444, 3656, 4187, 3699, 19022,
	55233, 286, -92, 19022, 19022, -1000, 350, 19022, 604, 54391,
	-1000, -1000, -1000, 54391, 19022, 160, -1000, 2483, 19022, 349,
	348, 341, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	340, -1000, -1000, 49410, -1000, 19022, 339, -1000, 338, 328,
	342, 51603, 51322, 321, 54391, 1871, 54391, -1000, -1000, 684,
	684, 1068, 1068, 1068, 1068, 2452, 248, 869, 927, 715,
	715, 715, 430, 564, 564, 715, 715, 715, 1831, 1651,
	455, 4894, 19022, 320, -1000, -1000, 54391, 54391, 313, -1000,
	-1000, -1000, -159, 307, 1794, 2327, -1000, 22865, 1794, 1794,
	-1000, -1000, 46458, 54391, -1000, -171, -1000, 2458, -1000, -1000,
	1681, -1000, 7408, 34494, -1000, -1000, 141, 46458, 46458, 46458,
	2051, -1000, 1685, -1000, 51252, -101, -1000, 2297, 2297, 19022,
	155, -1000, -1000, 454, 21740, 46458, -1000, 1696, 1694, 812,
	46458, -1000, 46458, -1000, -1000, 46458, 46458, 46458, 46458, 46458,
	-1000, 453, 155, -102, 46458, 46458, 27798, -1000, -1000, -104,
	9711, -1000, 2254, -1000, 27798, 872, 9711, 1365, 1764, -1000,
	451, 21740, 449, 46458, 30762, 2384, -1000, -1000, -1000, 448,
	1807, 1477, 21740, 1475, 1637, 646, 28167, -1000, 942, 1148,
	-1000, -1000, -20, -1000, 489, 153, 46458, 2501, 1433, -1000,
	-21, 54391, -1000, 649, -1000, 2187, -1000, 2186, 602, -1000,
	-1000, 305, -1000, 34863, 34863, 27798, 27798, -23, 1560, -1000,
	-1000, 1367, 1525, -1000, -1000, -1000, -1000, 2256, 19022, 19022,
	286, -120, -1000, 3656, 3656, -1000, 50971, -1000, 54391, 7796,
	-1000, 53315, -1000, -1000, -1000, -1000, 1371, -1000, 50901, -1000,
	-1000, -1000, 19022, -1000, -1000, -1000, -1000, 20216, 1826, 447,
	55233, 50620, -1000, -1000, -1000, 760, 19022, 19022, 1902, 760,
	760, -123, 677, -1000, -1000, -1000, 2458, -1000, 9711, -1000,
	-1000, -1000, 46458, -1000, 46458, -1000, 9711, 46458, 1808, 1556,
	-1000, -1000, 1642, 446, 20216, 46458, 719, -1000, 1266, 21740,
	2256, 9711, 2256, 50550, 6594, -125, -130, 1555, -1000, 1551,
	19022, -1000, 55233, 1486, 1486, -132, -133, -1000, 868, 862,
	19022, 837, -1000, -1000, -1000, 835, -1000, 694, -27, 24000,
	141, -1000, -1000, 1382, 21740, -135, 21740, -140, 303, 153,
	21740, -1000, 46458, -141, 46458, -1000, 646, 28167, -1000, 2152,
	-1000, 2159, 46458, 2231, -1000, -1000, -1000, 1721, 441, 438,
	437, -1000, -1000, -1000, -147, -1000, -1000, -40, -1000, 688,
	687, -1000, -1000, -1000, 9711, 956, -1000, 3656, 3656, -1000,
	-1000, -1000, -1000, 298, 1433, 2315, -1000, 50269, 5257, 20216,
	55233, -148, -1000, -1000, 46458, 54391, -159, -1000, -1000, -1000,
	34494, 601, -1000, 1552, -1000, -1000, -1000, 46458, 1561, -1000,
	-1000, 19022, 4894, 436, 19022, -1000, 1720, 435, -1000, -1000,
	-1000, -1000, -1000, -1000, 2297, 1, -1000, 1183, -1000, -1000,
	54391, 2295, -1000, -1000, 431, 428, 46458, 46458, -36, 427,
	417, 24000, -1000, 46458, -150, 1266, -158, -1000, 1720, -1000,
	-160, 792, -1000, 415, 28167, -1000, 1634, 948, -161, 46458,
	1148, -1000, 27798, 27798, -1000, 1560, -1000, 46458, -1000, 46458,
	-1000, 46458, -1000, 1132, 19022, -1000, 5257, -163, -1000, -64,
	-1000, 2380, -1000, -1000, -1000, -1000, 2050, 50134, 1607, 46458,
	49825, 1365, 46458, 2256, 294, 46458, 790, 9711, 1367, 1367,
	-1000, -1000, 292, 19022, 19022, -1000, 414, -1000, 1720, 1266,
	1365, 1266, 413, 21740, -1000, 1637, 1041, -1000, 762, -1000,
	-1000, -168, -169, -1000, -174, -179, -1000, 291, 19818, 19818,
	-159, -1000, 46458, 412, 2006, -1000, 1462, 1404, 290, 817,
	-1000, -180, -1000, -1000, 411, -1000, 19022, -1000, -181, -1000,
	781, -182, -1000, 780, 2483, -187, -190, 46458, 1365, 1720,
	-1000, 1720, 21740, -192, -1000, 24369, -1000, 745, 745, -1000,
	-1000, -1000, -1000, -1000, 20599, 1451, 1107, 52721, -1000, -1000,
	-1000, 46458, -1000, 1471, 1469, 1080, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1607, 54391, -1000, 1367, 1733, -1000, 1367,
	1815, -1000, -1000, -195, -1000, 1365, 1365, -197, -1000, -193,
	-1000, -1000, 2419, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2172, -1000, 803, 1327, 1327, 1462, -1000, 402, -1000, 399,
	1426, -1000, -1000, 1266, -1000, 19420, -1000, 2440, -1000, -1000,
	1686, -1000, -1000, 19022, 19022, -1000, -1000, -1000, 1720, -1000,
	-1000, -1000, -1000, -200, -202, 1365, 1365, 831, -1000, -1000,
	398, 19022, -207, 1365, -1000,
}
var sqlPgo = [...]int{

	0, 2957, 2956, 1880, 2954, 2414, 2953, 2951, 2950, 2949,
	2947, 2389, 2942, 2940, 2937, 2935, 2931, 2927, 2925, 2924,
	2923, 2921, 2920, 2919, 2918, 2916, 2914, 2912, 2911, 2910,
	2909, 2907, 2353, 2905, 2347, 2903, 2902, 2901, 2899, 2896,
	2894, 2889, 2888, 26, 2887, 2883, 2881, 2879, 2326, 2871,
	2867, 2293, 2865, 2863, 2287, 2862, 2860, 2285, 2275, 2859,
	2857, 2269, 2855, 2853, 2262, 2849, 2259, 2847, 2845, 2220,
	2841, 97, 110, 2210, 2839, 2837, 2205, 2189, 2181, 2834,
	2175, 2833, 2830, 2165, 2159, 2828, 105, 2826, 2823, 2820,
	2816, 2112, 2108, 2815, 2812, 2811, 176, 2810, 2101, 2809,
	2807, 2806, 2804, 2801, 2796, 2795, 2794, 2791, 2790, 2787,
	2786, 2783, 2782, 2779, 2778, 2777, 2776, 2774, 2769, 2768,
	2766, 2764, 2761, 2760, 181, 123, 2758, 2754, 2024, 1929,
	2752, 2750, 49, 47, 20, 63, 130, 189, 4291, 178,
	2748, 2747, 2742, 2741, 2739, 2737, 24, 126, 133, 122,
	124, 2735, 119, 2732, 2731, 58, 43, 27, 19, 75,
	2726, 2722, 2721, 1944, 84, 2719, 2718, 169, 172, 2717,
	36, 41, 87, 85, 91, 179, 48, 2715, 107, 14,
	2714, 152, 134, 2710, 69, 38, 22, 2684, 81, 79,
	88, 177, 129, 376, 2706, 174, 70, 148, 2701, 2699,
	2697, 51, 144, 3, 2, 132, 10, 2696, 8, 2695,
	11, 2694, 2693, 2692, 2691, 30, 117, 103, 32, 2690,
	28, 56, 2688, 142, 2687, 160, 2685, 76, 1817, 166,
	1, 86, 2683, 77, 15, 71, 2680, 2674, 98, 167,
	2673, 39, 127, 80, 93, 187, 154, 96, 155, 170,
	2672, 2671, 2670, 131, 2669, 146, 121, 2662, 2660, 118,
	29, 2658, 54, 159, 42, 2655, 2653, 111, 2651, 149,
	2650, 2648, 182, 112, 139, 5, 46, 90, 9, 158,
	99, 72, 66, 2647, 3665, 1336, 1315, 53, 2646, 102,
	60, 33, 73, 104, 168, 37, 2645, 2644, 156, 2641,
	2639, 2637, 2636, 2635, 138, 2631, 2630, 2629, 95, 55,
	83, 2628, 108, 44, 101, 157, 140, 171, 125, 2622,
	141, 109, 150, 2619, 92, 2618, 307, 2616, 143, 2615,
	2608, 2605, 2604, 34, 2603, 2600, 2593, 243, 2592, 100,
	2590, 147, 136, 137, 113, 120, 161, 165, 1321, 2587,
	145, 31, 2584, 225, 25, 0, 3249, 3098, 2581, 151,
	94, 2576, 2574, 2573, 2571, 35, 12, 7, 6, 13,
	17, 50, 23, 78, 2569, 2568, 89, 115, 2566, 180,
	164, 2563, 2562, 2561, 62, 2559, 21, 2548, 18, 2542,
	2540, 16, 4, 2534, 2532, 173, 2531, 114, 2407, 2525,
	2520, 2519, 1963, 2517, 2515, 57, 135,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 148, 148, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 399, 399, 150, 150, 149, 145,
	145, 152, 152, 152, 154, 154, 151, 151, 144, 144,
	32, 32, 84, 84, 84, 135, 77, 77, 77, 353,
	353, 354, 354, 131, 131, 132, 132, 132, 132, 133,
	133, 134, 134, 134, 46, 34, 34, 34, 34, 34,
	34, 34, 35, 35, 36, 36, 36, 37, 37, 37,
	44, 44, 125, 125, 47, 47, 47, 47, 47, 47,
	47, 47, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 57, 57, 58, 58, 59,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
	60, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 67, 67, 67, 68, 68, 68, 65, 65, 65,
	63, 63, 63, 62, 62, 62, 66, 66, 66, 64,
	64, 64, 229, 229, 69, 69, 69, 69, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 72, 72, 72, 72, 72, 72,
	72, 72, 323, 323, 70, 70, 296, 296, 73, 73,
	254, 254, 74, 74, 74, 74, 74, 75, 75, 75,
	75, 85, 85, 85, 85, 395, 395, 395, 398, 398,
	223, 223, 167, 167, 167, 167, 80, 80, 80, 80,
	81, 81, 81, 82, 82, 130, 130, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 38, 38, 38,
	39, 39, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 43, 92, 92, 92, 94, 91, 91, 91,
	93, 93, 93, 93, 95, 95, 96, 96, 96, 96,
	96, 96, 97, 97, 347, 347, 232, 232, 345, 345,
	346, 346, 199, 199, 199, 199, 199, 200, 200, 200,
	352, 352, 352, 352, 352, 352, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 114, 114, 114, 124, 124,
	124, 124, 124, 124, 124, 116, 116, 108, 108, 99,
	99, 105, 105, 105, 105, 105, 100, 100, 106, 106,
	107, 107, 107, 109, 109, 109, 109, 109, 109, 101,
	101, 101, 101, 111, 111, 111, 111, 110, 110, 120,
	120, 120, 120, 120, 120, 120, 311, 311, 115, 115,
	115, 115, 118, 118, 118, 118, 113, 113, 113, 117,
	117, 121, 121, 121, 121, 102, 102, 103, 103, 104,
	104, 122, 122, 112, 112, 123, 123, 123, 123, 123,
	123, 123, 119, 119, 119, 396, 396, 397, 397, 78,
	78, 52, 52, 53, 53, 201, 201, 202, 202, 277,
	277, 277, 277, 203, 203, 153, 153, 153, 206, 207,
	207, 204, 204, 205, 205, 205, 209, 209, 208, 211,
	211, 210, 276, 363, 363, 364, 364, 364, 364, 364,
	364, 364, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 361, 361, 361, 362, 359, 359, 360, 360,
	360, 360, 400, 400, 275, 275, 215, 215, 366, 366,
	366, 366, 367, 367, 367, 367, 367, 370, 369, 368,
	368, 368, 368, 368, 307, 307, 307, 56, 56, 56,
	243, 243, 242, 242, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 127, 127, 54,
	54, 54, 159, 159, 51, 51, 51, 55, 55, 50,
	50, 50, 50, 50, 260, 260, 258, 258, 220, 220,
	313, 313, 313, 171, 171, 146, 146, 146, 20, 22,
	22, 16, 16, 16, 16, 16, 16, 29, 29, 30,
	30, 26, 26, 259, 259, 261, 261, 79, 79, 83,
	83, 89, 89, 126, 126, 126, 126, 126, 126, 126,
	33, 33, 33, 33, 45, 45, 45, 45, 87, 403,
	403, 403, 88, 88, 402, 402, 166, 166, 166, 166,
	168, 168, 272, 272, 273, 273, 404, 404, 274, 274,
	274, 161, 160, 162, 162, 49, 49, 49, 155, 155,
	156, 156, 157, 157, 158, 158, 405, 405, 76, 76,
	76, 129, 129, 195, 195, 269, 269, 269, 216, 216,
	176, 176, 271, 271, 270, 270, 270, 241, 241, 241,
	128, 128, 226, 226, 234, 234, 235, 235, 319, 319,
	236, 86, 86, 138, 138, 136, 136, 136, 136, 136,
	136, 137, 137, 137, 139, 139, 139, 139, 139, 139,
	139, 142, 142, 142, 142, 143, 143, 143, 141, 141,
	377, 377, 377, 379, 379, 380, 376, 376, 378, 378,
	401, 401, 245, 245, 245, 213, 214, 212, 212, 218,
	218, 217, 219, 219, 312, 312, 312, 239, 239, 239,
	239, 264, 264, 262, 262, 263, 263, 265, 265, 266,
	266, 266, 267, 267, 268, 268, 238, 238, 292, 292,
	140, 140, 140, 225, 225, 225, 227, 227, 282, 282,
	282, 283, 283, 281, 281, 281, 281, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 393, 393, 393, 394,
	394, 310, 310, 315, 315, 315, 315, 315, 315, 308,
	308, 309, 309, 320, 321, 321, 248, 248, 248, 248,
	246, 246, 247, 247, 316, 316, 316, 316, 240, 240,
	317, 317, 317, 278, 278, 324, 324, 324, 339, 339,
	224, 224, 224, 334, 334, 325, 325, 325, 325, 325,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 328, 328, 328, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 338, 338, 338, 338, 338, 329, 329,
	335, 336, 330, 331, 337, 337, 337, 337, 341, 341,
	332, 332, 332, 332, 332, 332, 332, 333, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 256, 256, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 286, 286, 286, 286, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 371,
	371, 371, 371, 371, 371, 371, 371, 374, 374, 375,
	375, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 381, 381, 382, 382, 384, 384, 385,
	385, 386, 387, 387, 387, 388, 389, 389, 383, 383,
	390, 390, 390, 391, 391, 392, 392, 392, 392, 392,
	298, 298, 299, 300, 306, 306, 306, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 169, 169, 169, 169, 169, 231, 231,
	230, 230, 295, 295, 293, 293, 297, 297, 249, 249,
	340, 340, 340, 340, 340, 340, 340, 250, 250, 250,
	257, 251, 251, 252, 252, 252, 252, 252, 289, 290,
	253, 253, 253, 291, 291, 301, 305, 305, 304, 303,
	303, 302, 302, 279, 279, 280, 280, 237, 237, 406,
	406, 233, 233, 318, 318, 318, 318, 197, 197, 228,
	228, 196, 196, 191, 191, 191, 191, 221, 221, 222,
	222, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 342, 342, 342, 343, 344, 294, 186, 185,
	173, 174, 184, 183, 182, 172, 175, 179, 180, 181,
	177, 178, 189, 188, 187, 322, 192, 192, 193, 193,
	193, 194, 194, 194, 194, 170, 170, 190, 190, 190,
	163, 163, 163, 164, 164, 165, 165, 351, 351, 349,
	349, 349, 350, 350, 350, 350, 348, 348, 348, 348,
	348, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 1, 2, 1, 1, 3, 1, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 5, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 7, 3, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 3, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 3, 1, 1, 3,
	5, 4, 6, 4, 3, 0, 1, 3, 2, 4,
	2, 4, 1, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 2, 1,
	3, 1, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 3, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	6, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 5, 6, 5, 1, 0, 2, 3,
	3, 3, 6, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 2, 3, 2, 3, 7, 7, 8, 10, 7,
	4, 5, 5, 5, 5, 2, 0, 2, 0, 3,
	2, 8, 11, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 4, 7,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 7, 3,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 6, 3, 13,
	16, 9, 12, 4, 2, 0, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 2, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 5, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 5, 3, 1, 1, 3, 1,
	0, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 412, -4, -32, -34, -46, -44,
	-47, -74, -58, -59, -60, -73, -69, -75, -76, -77,
	-78, -70, -84, -83, -85, -89, -38, -86, -79, -80,
	-90, -98, -126, -127, -128, -129, -5, -11, 25, 36,
	-35, -36, -37, 50, 76, 64, -54, -51, -48, -57,
	78, 99, -378, 103, -61, -64, -66, 107, 114, 119,
	142, 151, 250, 257, 278, 280, 282, 291, -40, -39,
	115, -136, -138, 276, -81, -82, -91, -92, -93, -94,
	-130, 309, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, 312, -33, -45,
	-88, -87, 354, -6, -7, -8, -9, -10, -12, -22,
	-49, -50, -52, -53, -55, -56, -377, -62, -63, -65,
	-67, -68, -139, -137, 409, 277, 363, 37, 321, 65,
	110, 286, 20, -14, -15, -18, -17, -19, -16, -23,
	-25, -27, -24, -26, -28, -29, -30, -31, -20, -21,
	-13, 380, 388, -142, -140, -141, -143, 298, 371, 334,
	413, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 2, 334, 374, 299, 364, 92, 163, 262, 248,
	-395, 2, -228, 334, 92, -191, -190, -163, 402, 4,
	-355, -357, 20, 21, 22, 23, 25, 35, 36, 37,
	40, 42, 43, 46, 47, 48, 49, 50, 51, 58,
	63, 64, 65, 66, 67, 72, 69, 70, 71, 74,
	76, 77, 80, 81, 82, 90, 91, 93, 94, 95,
	99, 101, 103, 106, 107, 109, 114, 115, 118, 116,
	117, 119, 129, 130, 132, 133, 135, 137, 141, 143,
	148, 149, 150, 151, 152, 153, 164, 158, 167, 170,
	169, 171, 172, 173, 162, 178, 181, 182, 183, 185,
	186, 189, 190, 191, 194, 193, 198, 199, 202, 203,
	206, 208, 211, 212, 215, 213, 214, 217, 218, 220,
	219, 226, 228, 229, 231, 232, 235, 236, 239, 242,
	245, 246, 247, 248, 249, 250, 251, 253, 255, 257,
	259, 260, 261, 262, 263, 265, 266, 268, 269, 270,
	271, 272, 276, 274, 275, 277, 278, 279, 280, 282,
	285, 286, 287, 289, 310, 311, 323, 291, 292, 293,
	294, 295, 296, 297, 301, 305, 302, 303, 304, 299,
	300, 306, 307, 309, 312, 314, 316, 317, 320, 321,
	322, 324, 327, 329, 325, 326, 319, 332, 333, 335,
	336, 337, 338, 339, 340, 341, 342, 346, 349, 350,
	354, 355, 356, 357, 360, 361, 362, 367, 363, 365,
	368, 369, 370, 375, 381, 382, 384, 385, 386, 30,
	38, 39, 41, 44, 54, 55, 56, 59, 96, 97,
	113, 120, 121, 131, 144, 146, 154, 155, 168, 174,
	176, 196, 225, 227, 240, 244, 254, 256, 264, 288,
	315, 330, 344, 345, 351, 352, 371, 372, 376, 383,
	412, 412, 412, 2, 182, 261, 306, -187, -190, -163,
	92, 233, 412, 412, 412, 2, 334, 322, 299, 364,
	284, 374, -258, 178, 92, 359, -163, 257, 24, 2,
	101, 167, 362, 361, 24, 253, 300, 336, 338, 2,
	412, 412, 2, 374, 299, 334, 163, 92, 364, 284,
	-181, 2, -163, -72, 2, 409, -71, -5, -48, -57,
	-61, -73, -69, -11, -32, -34, -54, -51, -58, -64,
	-66, -77, -76, -78, -80, -84, -83, -86, -91, -92,
	-98, -128, -129, 78, 25, 107, 309, 115, -398, -223,
	2, 24, -167, -163, 78, 142, 298, 334, 2, 182,
	2, -181, 2, -395, 2, 182, 2, -398, -223, 23,
	2, -163, 2, 295, 312, -168, 2, 291, -163, 412,
	412, 412, 412, 412, 412, 203, 58, 288, 306, -96,
	350, -95, 344, 293, -97, -347, 2, 215, -163, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 2, -124, 306, 322, 149, 36, 58, 24,
	63, 93, 143, 163, 164, 190, 73, 74, 260, 203,
	183, -311, 117, 307, 335, 294, 332, 350, 78, 365,
	285, 339, 116, 4, 92, 215, 308, 344, 67, 412,
	412, 412, -401, 2, 334, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, -137, -139, -138, 412,
	412, 412, 412, 412, -217, -218, 358, 175, 112, 238,
	-136, -138, 2, -377, -124, 306, 2, 58, 24, -345,
	2, -284, 233, -286, 400, 401, 395, 221, 387, -298,
	98, 210, 209, -288, -301, 113, 288, 409, -194, -287,
	415, 9, -374, -138, 31, -299, -300, 52, -192, -163,
	7, 8, 5, 6, -170, -326, -294, -333, 353, 122,
	224, -371, -372, -193, 4, -355, -349, -327, -336, -331,
	-332, -334, 42, 48, 47, 341, 214, 301, 302, 303,
	304, 316, 367, 158, 40, 231, 232, 169, 176, 61,
	84, 85, 83, 88, 89, 86, 308, 364, 53, 30,
	154, 225, 155, 59, -373, 43, 94, 106, 132, 133,
	170, 171, 172, 173, 185, 186, 326, 346, 39, 41,
	44, 54, 55, 96, 97, 120, 121, 131, 144, 168,
	174, 196, 227, 244, 254, 264, 315, 330, 344, 345,
	351, 352, 372, -356, -337, 79, 123, 140, 166, 156,
	179, 180, 184, 197, 200, 216, 223, 241, 243, 283,
	313, -402, 2, 350, 350, 2, -402, 2, -402, 2,
	-166, 2, 350, 347, -403, 350, 383, -379, 265, -380,
	-181, -379, 412, 412, 414, 412, -212, -213, -214, 2,
	24, 104, 409, 2, -314, 2, 407, -316, -170, -373,
	-138, -315, 409, -187, 234, -193, 84, 85, 88, 89,
	4, -163, 61, 210, 209, -3, 2, -316, 154, -187,
	2, -316, 154, 2, -188, 154, -316, -190, 2, -353,
	154, -351, 9, -350, 5, 4, -355, -357, -356, 2,
	-172, -163, 2, -196, 154, -187, -184, -348, 4, -355,
	-357, -356, -358, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 52, 53, 57, 60, 62, 73, 78,
	83, 84, 86, 85, 87, 88, 89, 98, 100, 102,
	104, 105, 108, 110, 112, 122, 124, 136, 138, 139,
	142, 145, 147, 157, 163, 165, 175, 177, 192, 195,
	201, 204, 205, 221, 222, 224, 230, 233, 234, 237,
	238, 252, 258, 267, 281, 284, 298, 308, 318, 328,
	331, 334, 343, 347, 348, 353, 358, 359, 364, 366,
	373, 374, 377, 378, 379, 380, -185, -348, 347, 414,
	-228, -221, -163, 411, -284, 2, -284, 154, 2, -284,
	154, 2, -215, 409, 411, 334, 62, 2, -187, 154,
	-177, 2, -163, -188, 154, 2, -190, -353, 154, 2,
	-353, 154, 2, -189, 2, -187, 163, 163, -172, 154,
	2, -163, 24, 139, 2, 177, 2, 177, 2, -317,
	2, -316, -229, 154, 2, -187, -229, 154, 2, -229,
	154, 2, -197, 154, 2, -196, -172, 154, 2, -354,
	154, 2, -353, -354, 154, 2, -254, 409, -323, 2,
	-322, -350, 371, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	306, 233, 347, 414, -187, -284, -296, 409, 139, -284,
	233, 139, 235, 2, 92, 334, 386, 24, -163, 2,
	310, 2, 409, -96, 56, 350, -273, 2, -274, -160,
	-161, -162, 181, 259, 263, 386, -345, 347, 392, 139,
	-345, -232, 411, -124, 2, 136, 2, 7, 2, -353,
	2, 310, 2, 260, 307, 58, 139, 2, 2, 233,
	-396, 2, 139, 2, 139, 2, 139, 2, 139, 2,
	139, 2, 2, 260, 307, 2, 349, 191, 349, 2,
	139, 2, 139, 2, 5, 2, 181, 259, 323, 2,
	334, 374, 299, 2, 2, 139, 139, 386, 2, -240,
	-316, -217, -218, -239, -262, -263, 201, 124, 230, -245,
	24, 104, -245, -245, 46, 410, 410, -124, 310, 2,
	10, 11, 60, 35, 400, 401, 402, 403, 134, 404,
	405, 398, 399, 397, 390, 391, 394, 187, 188, 75,
	393, 392, 68, 207, 290, 125, 126, 127, 128, 273,
	159, 160, 161, 13, 14, 15, 28, 237, 200, 387,
	156, 313, 395, 16, 17, 18, 179, 180, 223, 38,
	157, -169, -198, -284, -284, -284, -284, -284, 243, -237,
	-279, 407, -138, 409, 409, -138, -284, -230, 409, -344,
	7, -138, -293, 407, -302, -284, 411, 409, 5, 409,
	5, -381, 381, 136, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 256, -341, 375, -341, -341, -328,
	409, -328, 409, 409, -329, 409, 409, 409, -328, 409,
	409, 409, 382, 382, 388, 409, 409, -272, -273, -272,
	347, -168, 414, -379, -215, 409, -233, -318, -284, 402,
	-233, -233, 233, -230, -284, 79, -248, 184, 216, 140,
	197, 283, 166, -344, -72, -281, 415, 409, -310, 388,
	-310, -138, -315, 409, -314, 402, -187, 409, 411, -148,
	274, -147, 22, 25, 107, 369, 118, -205, 248, 113,
	319, 340, 115, 292, 274, 113, -242, -244, 32, 90,
	218, 245, 49, 152, 209, 210, 321, 113, 274, 380,
	113, 115, 274, -150, 319, 340, 115, 292, 274, -149,
	-205, 113, 415, 115, 228, -353, -191, 414, -348, 402,
	113, 113, 139, -221, -348, -187, -192, -163, -193, 409,
	-215, 221, 233, -243, -242, 221, -159, -376, 380, 221,
	221, -215, -174, 154, 2, -164, -163, -174, 154, -376,
	221, -317, -195, -187, -195, 309, -181, 32, -152, 414,
	51, 279, 113, -152, 113, -152, 113, -152, 414, 113,
	-152, 113, 414, 113, 113, -230, 410, 414, -395, -221,
	-167, 78, 409, 32, -295, -324, -325, -326, -335, -330,
	-333, 42, 48, 47, 341, 214, 301, 302, 303, 304,
	316, 367, 158, 40, 231, 232, 169, 4, 41, -337,
	176, 168, 170, 171, 172, 173, 174, 315, 39, 264,
	132, 133, 131, 106, 97, 96, 227, 44, 43, 94,
	344, 345, 346, 185, 186, 55, 54, 372, 326, -354,
	-395, -221, 136, -172, 2, -187, 2, 69, 70, 386,
	-347, -230, 32, -273, 2, -404, 414, 199, -200, 206,
	220, 148, 234, 384, -352, 5, 4, -294, -307, 98,
	203, -333, 8, 401, -342, 7, 400, -346, -345, -346,
	82, 411, -348, 334, -347, 24, 311, 2, -187, 284,
	-395, -397, 136, -187, -187, -187, -187, -187, 136, 2,
	349, 2, 136, -163, -163, 199, -187, 2, -189, 2,
	-188, 2, 334, 163, 334, -152, 414, -239, -263, -262,
	-265, -284, 24, -268, 130, 217, -284, -286, -137, -137,
	-137, -219, -312, -284, 258, 163, -347, -339, -324, -338,
	269, 270, 268, 272, 271, -324, -186, -348, 344, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, 200, 156, 313, 38, 157, -284,
	347, -284, -284, -284, -284, 213, 221, 224, 353, 122,
	360, 104, 228, -406, 331, 34, -291, -138, 409, -306,
	29, 318, 24, -298, 288, 409, -279, -284, -280, -231,
	-230, 410, 414, -231, -297, -293, -305, -304, 377, -348,
	402, 410, -230, 373, 24, 104, 402, 2, 7, -255,
	385, 212, 95, 150, 211, -256, 297, -382, 129, 145,
	409, 410, 2, 410, 2, 410, 2, 410, 2, -284,
	-284, -284, -284, -284, -230, -344, -249, 2, -340, -230,
	4, 385, 212, 95, 150, 211, 297, -249, 2, 7,
	-230, 2, -230, 2, -250, 2, -284, -230, -251, -285,
	-286, 400, 401, 395, 409, 288, -252, 2, -284, -231,
	344, 344, 344, -284, 45, 195, 348, -253, -284, 139,
	-230, -168, -380, 32, -230, -225, 414, 139, 32, 4,
	-225, -225, 409, 410, 414, 184, 184, -314, -248, 184,
	-246, 241, -246, -246, -393, 409, 408, -310, -173, 407,
	416, -348, -231, 2, -309, -308, 32, -181, 239, -309,
	410, -187, -348, 414, 347, -259, 73, 62, -276, 154,
	62, -359, -175, 73, -360, -163, 57, 359, 258, 138,
	-259, 73, -259, 73, 73, 309, 46, -316, 35, -86,
	71, 139, 347, -316, -244, -324, 90, 209, 210, 46,
	-343, -342, 401, -343, 46, -343, -343, -343, 380, -188,
	-316, 347, 249, -353, 71, 347, 414, 35, -86, 71,
	139, 347, -196, -173, 71, 334, -321, -320, 389, -163,
	411, -284, -284, 324, 410, 411, 179, 179, 411, -201,
	-202, -163, -277, -276, -361, -362, -359, 178, 163, 359,
	123, 32, 113, -221, 113, 249, 113, 113, 32, 233,
	221, 233, 221, -155, 337, 113, -278, 378, -269, -86,
	409, 98, 32, -269, -234, -235, -319, -236, -175, 409,
	-181, -187, -229, -229, -229, -196, -197, -172, -353, -354,
	-354, 410, -72, -322, 347, 380, 366, -202, -71, 25,
	78, 107, 410, 414, -224, 31, 407, -255, 409, -341,
	409, -134, -320, 380, 139, -223, -321, -321, 136, 70,
	392, 347, 410, 350, -274, -199, 263, 317, 275, 305,
	8, 7, 7, 414, -348, -187, -222, -221, -221, 306,
	-72, 136, -72, 411, -187, -196, -187, -316, -266, -342,
	409, -267, 288, 289, 414, -146, 33, 102, 189, -187,
	386, -284, -284, 347, -406, 331, -291, -284, 213, 224,
	353, 122, 360, 104, 228, 139, 409, -285, -285, -230,
	-284, 409, -230, 408, 418, 410, -284, 408, 408, 414,
	-303, -304, 108, -284, 411, -218, 414, -217, -284, -230,
	-230, 410, 410, 347, 347, 347, 347, 409, -387, 242,
	409, 409, -284, 32, 414, 414, 414, 414, 410, 410,
	414, 410, 139, 410, 410, 410, 410, 410, -257, 252,
	410, 10, 11, 400, 401, 402, 403, 134, 404, 405,
	398, 399, 397, 390, 391, 392, 68, 207, 290, 13,
	14, 15, 179, 157, -285, -285, -285, -230, 409, 410,
	-289, -290, 139, 136, 386, 386, 386, 32, -253, -253,
	-253, 410, 139, -230, 409, 410, -278, -318, -227, 2,
	-314, -183, -348, -278, -278, -230, -284, -314, -314, -247,
	366, 233, 184, -314, -308, 410, -394, -344, -310, -309,
	-344, -283, -282, 137, 219, 410, -181, -215, -310, 410,
	411, -147, -187, -175, -182, -163, 221, -276, 154, -154,
	221, -324, -182, 409, 409, 189, 189, -175, -182, 154,
	-175, 154, -182, -182, -399, 263, 229, 202, 262, 222,
	-148, 274, -86, 386, 409, -189, 274, -192, -343, -343,
	-242, 274, -188, -353, 380, 386, -172, -149, -86, 386,
	409, -173, -150, 274, 386, -187, -131, 153, 228, 402,
	-348, -125, 5, 224, -125, -348, 410, 414, 163, -174,
	163, -180, -164, -86, -187, 139, -188, -353, -353, -353,
	-86, -187, 113, -187, 113, -156, 109, -405, 392, -172,
	-218, -284, -241, -271, 281, 233, -216, -176, -175, 371,
	-181, -241, -226, 414, 139, 392, 411, -216, -152, -152,
	-152, -152, -152, -221, 23, -353, 410, -324, 407, 408,
	7, 7, 409, -344, -134, -133, 236, -132, -163, 5,
	-221, 139, -41, 380, 262, 92, 334, 248, 163, -345,
	-345, -273, 357, 66, 263, -345, -397, 306, -72, -163,
	-267, -284, -312, -187, 415, -284, -284, -285, -285, 139,
	409, -284, -295, 28, 28, 410, -231, 414, -280, -284,
	410, -293, 110, -284, 343, -348, 402, 410, 373, -218,
	-218, -218, 5, 212, 150, 211, -256, 211, -256, -256,
	7, -388, -178, 409, -163, 378, -217, 410, -339, -324,
	-284, -284, -284, -344, -284, -289, -284, -339, -324, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, -285, -285, -285, -285, -285, -285, 104, 221,
	228, -285, 414, -231, -290, -289, -284, -284, -324, 410,
	410, 410, -230, -71, -238, 145, -321, 414, -238, -238,
	410, -247, 409, -284, -314, 408, 410, 414, -309, 408,
	414, 417, 392, -310, -215, -308, -348, 347, 347, 113,
	221, 368, -363, -360, -284, -220, -313, -175, -375, 409,
	-163, -371, -372, -170, 409, 409, -145, 107, 309, -261,
	113, -152, 113, -152, 384, 409, 409, 347, -259, 73,
	-287, -170, -163, -230, 347, 347, 249, -287, -287, -230,
	347, -287, 115, -134, 139, 333, 411, -203, 162, -277,
	-164, 409, -174, 409, 409, -215, -187, -243, -159, -260,
	366, -173, 409, -173, -157, 194, -405, -351, -376, -264,
	-262, -241, -233, 222, 72, 410, 414, 411, -278, -235,
	-227, -284, 2, 410, 235, -135, 80, -135, 7, 408,
	410, -344, 410, 414, 409, 392, 392, -221, 236, -184,
	-172, -187, -185, -196, 234, 410, -146, -173, 28, 28,
	-284, -295, 410, -284, -284, 410, -284, 408, -284, 411,
	5, -284, 410, 410, 410, 410, -389, -163, -284, 410,
	410, 410, 414, 410, 410, 410, -290, 139, 104, 228,
	409, -284, 410, 410, 410, -292, 147, 46, -314, -292,
	-292, -221, -281, -344, -282, -173, 407, -309, 411, -175,
	-182, -276, 113, -364, 73, -365, 60, 123, 78, 221,
	224, 359, 258, 57, 98, 267, 32, 410, 410, 414,
	-171, 60, -171, -284, 409, -220, -221, 221, 98, 221,
	98, 91, 355, -175, -182, -221, -221, -187, -175, -182,
	409, 410, -189, -188, -353, 410, -173, 71, -354, 344,
	-348, -204, -205, 157, 409, -220, 409, -221, -201, 32,
	409, 141, 233, -220, 233, -158, 193, -405, -351, -155,
	-241, -270, 409, 233, -86, -176, 2, -218, 392, 91,
	91, 408, 410, -132, -133, -353, -353, -42, -43, 163,
	73, 251, -207, -206, 248, 228, -146, -284, -284, 410,
	410, -348, 402, -218, -383, 248, 410, -284, -285, 139,
	409, -295, 410, -384, 379, -284, -230, -384, -384, 410,
	-310, -344, -276, -182, -186, -179, -163, 123, 154, 224,
	189, 409, -285, -187, 409, 2, -275, -400, 77, 329,
	-313, -146, -186, -146, 410, -230, 410, 410, 224, 224,
	-284, -324, -152, -152, 410, 410, 347, 347, -230, 347,
	347, 386, -287, 246, -220, 410, -220, 410, 410, -86,
	-220, -187, 410, -187, -405, -351, -156, 105, -221, 73,
	-264, -291, 409, 409, 410, 414, 24, 409, 24, 409,
	-185, 334, 410, -218, 46, 410, -285, -295, 410, -385,
	-386, -178, -309, 408, -365, -179, 221, -284, -165, 409,
	-284, -203, 409, -171, -218, 267, -151, 60, 409, 409,
	-175, -182, -218, 409, 409, -287, -187, 410, -275, 410,
	-203, 410, -260, 409, -351, -157, 361, 222, 410, -182,
	-241, -354, -354, -43, -221, -221, -187, -390, 262, 289,
	-230, 410, 414, 32, 113, 410, -366, 208, -163, 410,
	-204, -221, -146, 410, -187, -144, 366, -186, -209, -208,
	-206, -211, -210, -206, 410, -230, -230, 409, -203, -275,
	-204, -275, 409, -220, -158, 309, -278, 410, 410, 410,
	410, 410, -391, -392, 38, 356, 82, -284, -391, -386,
	-388, 123, -367, -370, -369, 233, 140, 247, 314, 410,
	328, 376, 410, -215, -284, 410, 414, 371, 410, 414,
	371, 410, 410, -221, -204, -203, -203, -220, 410, -234,
	-134, -134, -392, 255, 135, 288, 255, 135, -179, -369,
	233, -370, 233, 361, 101, -366, -208, 157, -210, 139,
	410, -204, -204, 410, -278, 28, -368, 218, 279, 51,
	309, -368, -367, 409, 409, -153, 51, 279, -275, -392,
	21, 224, 98, -230, -230, -203, 410, 410, -204, -204,
	347, 409, -230, 410, -204,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	175, 177, 179, 0, 0, 0, 194, 196, 198, 199,
	-2, 0, 0, 0, 225, 226, 228, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	0, 821, -2, 0, 346, 348, 357, 359, 361, 363,
	364, 0, 426, 428, 430, 432, 434, 436, 438, 440,
	442, 444, 446, 448, 450, 452, 454, 456, 458, 460,
	462, 464, 466, 467, 469, 471, 473, -2, 733, 735,
	737, 739, -2, 60, 62, 64, 66, 68, 70, 85,
	202, 204, 206, 208, 211, 213, 858, 231, 233, 235,
	237, 239, -2, 870, 0, 0, 0, -2, 0, -2,
	-2, -2, 751, 71, 72, 73, 74, 75, 76, 91,
	92, 93, 94, 95, 96, 78, 80, 81, 87, 88,
	90, 0, 0, 834, 836, 838, 840, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 44, 50, 52, 54,
	58, 59, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 335, 0, 1476, 1359, 1363, 1417, 1366, 1420,
	1421, 1422, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
	1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	176, 178, 180, 181, 0, 0, 0, 637, 1404, 1417,
	1476, 0, 195, 197, 200, 201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 696, 322, 1559, 324, 326,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 224,
	227, 229, 230, 0, 0, 0, 0, 0, 0, 0,
	321, 319, 1399, 264, 265, 0, 304, 305, 306, 307,
	308, 309, 311, 268, 270, 272, 273, 275, 277, 279,
	281, 283, 285, 287, 289, 290, 292, 294, 295, 297,
	299, 300, 302, 697, 0, 0, 0, 0, 0, 339,
	330, 338, 340, 342, 343, 344, 345, 0, 158, 0,
	570, 317, 315, 0, 154, 0, 730, 0, 339, 1444,
	334, 731, 732, 0, 0, 727, 728, 1587, 761, 347,
	349, 358, 360, 362, 365, -2, -2, 1679, -2, 388,
	-2, 396, 1682, 1589, 399, 0, 401, -2, 404, 427,
	429, 431, 433, 435, 437, 439, 441, 443, 445, 447,
	449, 451, 453, 455, 457, 459, 461, 463, 465, 468,
	470, 472, 474, 475, 0, 0, 0, 0, 0, 479,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 478, 480, 481, 482, 0, 526, 734,
	736, 738, 0, 678, 860, 61, 63, 65, 67, 69,
	203, 205, 207, 209, 212, 214, -2, 832, 833, 232,
	234, 236, 238, 240, -2, 0, 864, 864, 864, 0,
	0, 833, 831, 0, 350, 0, 352, 0, 479, 355,
	356, 408, 409, 1064, 0, 0, 0, 0, 0, 0,
	1142, -2, -2, 1174, 1176, 1660, 1679, 0, 1178, 1179,
	0, 1181, 1183, 1184, 0, 1187, 1188, 1342, 1411, 1406,
	1371, 1372, 1373, 1374, 0, 0, 1377, 0, 1379, 1380,
	1381, 1244, 1198, -2, -2, -2, 1415, 980, 981, 982,
	983, 984, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1690,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 0, 1649,
	1666, 1672, 1667, 1657, 1216, -2, -2, 1483, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1661, 1662, -2, 1664, -2,
	-2, 1671, -2, 1675, 1676, -2, -2, 1681, -2, -2,
	1684, 1685, -2, 1431, 1033, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1703, 1704, 1705, 1706, 1707,
	1708, 763, 741, 754, 763, 743, 744, 745, 746, 747,
	752, 753, 756, 0, 748, 749, 750, 850, 1565, 853,
	637, 851, 835, 837, 0, 839, 0, 0, 0, 844,
	867, 865, 0, 901, 848, 849, 859, 916, 0, 932,
	932, 923, 0, 954, 0, 1416, 0, 0, 0, 0,
	-2, 1417, 1690, 1701, 1702, 2, 77, 0, 1666, 954,
	79, 0, 1666, 82, 0, 1666, 0, -2, 86, 0,
	1666, 159, 160, 1427, 1428, 1432, 1433, 1434, 1435, 89,
	0, 1395, 97, 0, 1666, 1362, 0, 1392, 1436, 1437,
	1438, 1439, 1440, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 0, 1389, 0, 0,
	336, 337, 1367, 0, 182, 183, 184, 1666, 186, 187,
	1666, 189, 0, 0, 0, 0, 0, 210, 637, 1666,
	0, 216, 1400, 661, 1666, 659, 1403, -2, 1666, 681,
	684, 1666, 686, 637, 688, 1402, -2, 1424, 857, 1666,
	777, 323, 325, 0, 218, 0, 790, 0, 792, 0,
	811, 960, 143, 1666, 243, 262, 143, 1666, 246, 143,
	1666, 249, 143, 1666, 252, 1357, 143, 1666, 255, 256,
	1666, 258, 161, 259, 1666, 261, 318, 0, 0, -2,
	312, 1405, -2, 310, 269, 271, 274, 276, 278, 280,
	282, 284, 286, 288, 291, 293, 296, 298, 301, 303,
	-2, 0, 0, 0, 0, 569, 0, 0, 0, 729,
	0, 0, 0, 369, 0, 0, 0, 0, 760, 366,
	0, 385, 0, 387, 1656, -2, -2, 391, 764, 768,
	769, 770, 0, 0, 0, 0, 398, 0, 0, 0,
	402, 405, 0, 476, 477, 0, 486, 487, 488, 489,
	490, 0, 493, 515, 530, 0, 0, 497, 499, 0,
	568, 502, 0, 504, 0, 506, 0, 508, 0, 510,
	0, 512, 514, 516, 531, 518, 0, 0, 0, 529,
	0, 535, 0, 538, 539, 540, 0, 542, 543, 544,
	0, 0, 0, 552, 554, 0, 0, 483, 484, 143,
	958, -2, 0, 827, 879, 880, 0, 0, 0, 0,
	862, 863, 0, 0, 0, 823, 824, 351, 0, 354,
	0, 0, 0, 0, 1277, 1278, 1279, 1280, 1281, 1282,
	1285, 1286, 1283, 1284, 1287, 1288, 0, 0, 0, 0,
	0, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 1291, 1292, 0, 0, 1294, 0,
	1296, 0, 0, 0, 0, 0, 0, 1121, 1123, 1350,
	0, 0, 1293, 1069, 1070, 1071, 1106, 1107, 0, 1175,
	1347, 1346, 1177, 0, 1299, -2, 1300, 0, 0, 1180,
	1386, 1185, 1186, 1299, 0, 1341, 0, 0, 1376, 0,
	1061, 1246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 1031, 1038, 1035, 1034, 1019,
	0, 1018, 0, 0, 1016, 0, 0, 0, 1020, 0,
	1322, -2, 0, 0, 0, 0, 0, 740, -2, 742,
	0, 758, 0, 852, 0, 0, 905, 1351, 1355, 1356,
	905, 905, 0, 0, 1300, 0, 0, 0, 0, 951,
	951, 951, 949, 926, 0, 932, 0, -2, 942, 0,
	942, -2, 923, 0, 0, 955, 956, 0, 0, 98,
	724, 115, 0, 724, 724, 0, 0, 133, 0, 0,
	0, 0, 0, 111, 0, 0, 83, 662, 0, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 113, 0, 136,
	138, 0, 0, 0, 0, 945, 1360, 0, 1418, 1365,
	0, 0, 0, 0, 1418, 0, 0, 1406, 1407, 576,
	0, 0, 0, 657, 660, 0, 679, 0, 856, 0,
	0, 0, 0, 1666, 693, 1391, 1423, 0, 1666, 779,
	0, 964, 0, 793, 0, 0, 961, 0, 241, 0,
	141, 142, 0, 244, 0, 247, 0, 250, 0, 0,
	253, 0, 0, 0, 0, 0, 859, 0, 0, 328,
	341, 0, 0, 859, 0, 1302, 972, 975, 976, 977,
	1061, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1039, 1033,
	1047, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1029, 0, 1004, 1004, 1004, 1021, 1022, 1040,
	1041, 1043, 1045, 973, 974, 1039, 1039, 1036, 1037, 173,
	0, 332, 0, 945, 371, 945, 373, 0, 560, 0,
	0, 0, 0, -2, 393, 0, 766, 0, 771, 417,
	418, 419, 773, 774, 397, 420, 421, 422, 423, 424,
	425, 0, 654, 0, 656, 1382, 0, 394, 410, 395,
	400, 0, 406, 0, 491, 492, 494, 495, 496, 1370,
	565, 501, 0, 503, 505, 507, 509, 511, 859, 520,
	0, 522, 859, 533, 536, 541, 545, 546, 547, 548,
	549, 550, 0, 0, 0, 677, 0, 830, 877, 878,
	883, 887, 888, 891, 894, 895, 885, 1064, 845, 846,
	847, 871, 872, 707, 0, 0, 353, 1065, 968, 969,
	1023, 1024, 1025, 1026, 1027, 1066, 1067, 1388, 0, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, -2,
	-2, -2, -2, -2, -2, -2, -2, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, -2, -2,
	-2, 1104, 1105, -2, 1295, 1297, 0, 1350, 0, -2,
	0, -2, -2, -2, -2, 1118, 0, 1120, 1125, 1127,
	1129, 0, 0, 0, 0, 1349, 1139, 1333, 0, 0,
	1274, 1275, 1276, 1124, 0, 0, 1348, 1345, 0, 0,
	1298, 1182, 0, 0, 0, 1306, 1340, 1336, 0, 1408,
	1414, 1189, 870, 0, 0, 0, 0, 1196, 0, 1387,
	1048, 1049, 1050, 1051, 1052, 1053, 1062, 1254, 0, 0,
	0, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 0,
	0, 0, 0, 0, 0, 0, 0, 1226, 0, 1309,
	-2, -2, -2, -2, -2, -2, -2, 0, 1228, 0,
	0, 1240, 0, 1242, 0, 1230, 1300, 1319, 0, 0,
	1145, 0, 0, 0, 0, 1679, 0, 1233, 1300, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	1332, 757, 854, 0, 0, 964, 0, 0, 0, 1354,
	964, 964, 0, 900, 0, 0, 0, 0, 0, 0,
	946, 950, 947, 948, 0, 0, 932, 942, 913, 0,
	0, 1390, 0, 920, 921, 941, 0, 637, 931, 922,
	-2, 0, -2, 0, 0, 0, 0, 723, 117, 1666,
	0, 145, 0, 0, 627, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 663, 664, 666, 672, 674, 0,
	668, 1385, 0, 669, 0, 671, 673, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 1361, 0, 0, 164, 944, 0, 1368,
	0, 185, 188, 174, 636, 0, 0, 0, 0, 0,
	575, -2, 577, 579, 580, 581, 582, 1515, 1424, 0,
	1424, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 781, 787, 0, 870, 0, 809, 795,
	0, 0, 0, 809, 813, 814, 816, 817, 0, 0,
	962, 263, 143, 143, 143, 1358, 143, 143, 162, 257,
	260, 320, 266, 313, 0, 0, 0, 0, 314, 0,
	0, 0, 316, 0, 965, 967, 0, 978, 0, 1031,
	0, 152, 173, 0, 0, 0, 370, 375, 0, 561,
	0, 0, 386, 0, 765, 772, 0, 414, 0, 416,
	655, 1384, 1383, 0, 407, 485, 568, 1369, 567, 519,
	523, 859, 525, 0, 562, 563, 564, 959, 0, 889,
	0, 886, 892, 893, 0, 874, 705, 706, 0, 0,
	0, -2, -2, 0, 0, 0, 1140, -2, 1119, 1122,
	1126, 1128, 1130, 0, 0, 0, 0, 0, 0, 0,
	1141, 1299, 0, 1343, 1346, -2, 1301, 1304, 1305, 0,
	0, 1337, 0, 0, 0, 0, 0, 869, 870, 870,
	870, 1195, 0, 0, 0, 0, 0, 0, 1197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1215, 1002,
	0, 1225, 0, 1227, 1028, 1239, 1241, 1229, 0, 0,
	1231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 1149, 1150, 0, 1299, 1232,
	1325, 1326, 0, 0, 1042, 1044, 1046, 0, 0, 0,
	0, 1238, 0, 1331, 859, 902, 897, 1352, 945, 904,
	906, 1353, 1393, 897, 897, 0, 1301, 934, 0, 936,
	0, 0, 0, 938, 0, 927, 0, 929, 942, 918,
	0, 0, 911, 0, 910, 932, 637, 940, 0, 957,
	0, 116, 711, 0, 0, 1394, 0, 119, 1666, 127,
	0, 604, 0, 0, 0, 0, 0, 726, 128, 1666,
	143, 1666, 143, 129, 132, 0, 135, 0, 0, 595,
	99, 724, 102, 0, 0, 717, 0, 667, 670, 676,
	84, 0, 719, 709, 0, 0, 708, 137, 103, 0,
	0, 721, 101, 0, 0, 0, 173, 0, 0, 1364,
	1419, 190, 192, 193, 191, 1408, 584, 0, 1424, 0,
	1424, 0, 1398, 573, 637, 0, 661, 682, -2, 685,
	687, 695, 0, 0, 0, 783, 787, 0, 786, 857,
	882, 963, 788, 809, 0, 0, 0, 798, 800, 797,
	794, 791, 964, 0, 0, 0, 0, 0, 242, 245,
	248, 251, 254, 327, 0, 0, 0, 1303, 0, 970,
	0, 0, 0, 0, 153, 171, 1547, 169, 166, 168,
	331, 0, 372, 0, 0, 0, 0, 0, 0, 383,
	384, -2, 412, 413, 415, 411, 500, 521, 524, 532,
	0, 0, 873, 707, 0, 1068, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1334, 0, 0, 0, 1345,
	-2, 1307, 1335, 1339, 0, 1409, 1413, 1190, 0, 0,
	0, 0, 1378, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	0, 1252, 1253, 1257, 1401, 0, 0, 1201, 0, 0,
	0, 0, 0, 0, 1308, 1318, 1320, 1146, 1147, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, -2,
	-2, -2, 1164, 1165, 1166, -2, -2, -2, 0, 0,
	0, 1321, 0, 0, 1323, 1324, 1328, 1329, 0, 1235,
	1236, 1237, 1330, 0, 899, 0, 903, 0, 899, 899,
	866, 935, 0, 953, 937, 916, 928, 0, 925, 914,
	0, 915, 0, 942, 939, 924, -2, 0, 0, 0,
	0, 144, 602, 626, 0, 0, 698, 704, 704, 0,
	1396, 1199, 1200, 0, 0, 0, 121, 0, 0, 0,
	0, 125, 0, 131, 134, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 107, 110, 0,
	0, 106, 0, 150, 0, 0, 0, 592, 0, 578,
	0, 0, 0, 0, 576, 0, 215, 658, 680, 0,
	0, 0, 0, 0, 785, 787, 0, 778, 779, 809,
	881, 789, 807, 808, 806, 0, 0, 0, 870, 815,
	812, 818, 819, 0, 329, 0, 155, 0, 0, 971,
	979, 0, 1032, 0, 0, 0, 0, 333, 0, 555,
	556, 590, 0, 559, 884, 890, 875, 707, 0, 0,
	-2, 0, 1133, -2, -2, 1270, 1301, 1344, 1338, 0,
	1375, 870, 1191, 1193, 1194, 1063, 1259, 1256, 0, 1243,
	1210, 1211, 0, 1213, 1214, 1003, 1317, 0, 0, 0,
	0, 1301, 1272, 1234, 855, 1248, 0, 0, 907, 1248,
	1248, 0, 932, 930, 912, 908, 0, 919, 0, 713,
	715, 118, 0, 603, 0, 606, 0, 0, 0, 0,
	613, 614, 0, 0, 0, 0, 0, 628, 635, 0,
	707, 0, 707, 0, 0, 0, 0, 0, 140, 0,
	0, 725, 0, 143, 143, 0, 0, 712, 0, 0,
	0, 0, 718, 720, 710, 0, 722, 0, 163, 0,
	1409, 571, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 0, 775, 787, 0, 780, 781,
	217, 0, 0, 0, 796, 799, 801, 882, 0, 0,
	0, 966, 1030, 170, 0, 165, 167, 374, 376, 0,
	0, 382, 557, 589, 0, 0, 876, -2, -2, 1134,
	1271, 1410, 1412, 0, 870, 0, 1245, 0, -2, 0,
	0, 0, 1273, 841, 0, 898, 896, 842, 843, 952,
	942, 0, 120, 0, 607, 608, 1397, 610, 0, 612,
	615, 0, 617, 1426, 0, 621, 584, 0, 632, 633,
	699, 700, 703, 701, 704, 870, 630, 0, 122, 123,
	139, 147, 124, 130, 0, 0, 0, 0, 870, 0,
	0, 0, 943, 0, 0, 635, 0, 625, 584, 574,
	0, 695, 691, 0, 0, 782, 783, 0, 0, 0,
	809, 820, 0, 0, 172, 0, 378, 0, 380, 0,
	588, 0, 1192, 1262, 0, 1212, -2, 0, 1172, 1247,
	1249, 0, 917, 909, 605, 609, 0, 0, 641, 0,
	0, 592, 0, 707, 0, 0, 149, 0, 0, 0,
	714, 716, 0, 0, 0, 109, 0, 624, 584, 635,
	592, 635, 0, 0, 784, 785, 0, 803, 964, 805,
	810, 0, 0, 377, 0, 0, 558, 0, 0, 0,
	1258, 1173, 0, 0, 0, 616, 646, 0, 0, 0,
	629, 0, 702, 1190, 637, 126, 0, 146, 0, 596,
	0, 0, 599, 0, 0, 0, 0, 0, 592, 584,
	572, 584, 0, 0, 776, 0, 804, 173, 173, 379,
	381, 1255, 1260, 1263, -2, 1632, 1473, 0, 1261, 1250,
	1251, 0, 618, 642, 643, 0, 638, 639, 640, 1425,
	619, 620, 634, 641, 148, 593, 0, 0, 594, 0,
	0, 112, 114, 0, 622, 592, 592, 0, 692, 964,
	156, 157, 0, 1265, 1266, 1267, 1268, 1269, 611, 644,
	0, 645, 0, 0, 0, 646, 597, 0, 600, 0,
	587, 623, 689, 635, 802, 0, 647, 0, 650, 651,
	0, 648, 631, 0, 0, 583, 585, 586, 584, 1264,
	649, 652, 653, 0, 0, 592, 592, 0, 690, 598,
	0, 0, 0, 592, 601,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 398, 3, 404, 399, 3,
	409, 410, 402, 400, 414, 401, 411, 403, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 418, 413,
	390, 392, 391, 394, 415, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 407, 3, 408, 405, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 416, 397, 417, 395,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 393, 57733, 396, 57734, 406,
	57735, 412, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1067
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1122
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1156
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1193
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1229
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1235
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1241
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1250
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1259
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1268
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1280
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1351
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1374
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1384
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = nil
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1480
		{
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			return unimplemented(sqllex, "alter using")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1484
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.str = "CSV"
		}
	case 156:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1648
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1712
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1716
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.str = ""
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "CREATE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1743
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "DELETE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1807
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			return helpWith(sqllex, "DROP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1936
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "DELETE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "INSERT")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{ /* SKIP DOC */
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2035
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2059
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "GRANT")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			return helpWith(sqllex, "RESET")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2209
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "RESET")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "USE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2254
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2256
		{ /* SKIP DOC */
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			return helpWith(sqllex, "USE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			return unimplemented(sqllex, "set local")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2431
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			return unimplemented(sqllex, "set from current")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2463
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2471
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2475
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = tree.Low
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = tree.Normal
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.High
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2591
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2594
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			return helpWith(sqllex, "SHOW")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2622
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.str = "client_encoding"
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.str = "timezone"
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2671
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2704
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &tree.ShowRoleGrants{Roles: sqlDollar[5].union.nameList(), Grantees: sqlDollar[6].union.nameList()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &tree.ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2779
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2814
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2827
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2842
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = true
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = false
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2859
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2928
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2932
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2939
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2961
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2993
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3005
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3011
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3018
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3024
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3028
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3038
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3042
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.str = ""
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 598:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 601:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3400
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3404
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 622:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			return unimplemented(sqllex, "match full")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3537
		{
			return unimplemented(sqllex, "match partial")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			return unimplemented(sqllex, "match simple")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3539
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3630
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3638
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3660
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3670
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3687
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = nil
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = true
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = false
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = true
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = false
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3847
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3850
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = tree.Descending
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3902
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3904
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = true
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = false
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3947
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3948
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3981
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3985
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4006
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4038
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4040
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4059
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.str = ""
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4118
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4120
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 775:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.str = ""
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.str = ""
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.str = ""
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.str = ""
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4228
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			return helpWith(sqllex, "INSERT")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4342
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 810:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4395
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4420
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			return helpWith(sqllex, "SELECT")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4555
		{
			return helpWith(sqllex, "VALUES")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4556
		{
			return helpWith(sqllex, "TABLE")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4617
		{
			return helpWith(sqllex, "SELECT")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4661
		{
			return helpWith(sqllex, "TABLE")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4676
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4677
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4700
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4707
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4711
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = true
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = false
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = false
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = true
		}
	case 866:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4741
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4788
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4812
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4864
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4868
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			return helpWith(sqllex, "VALUES")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4929
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4944
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4966
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4982
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5044
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = nil
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = true
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = false
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5217
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5218
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5292
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5306
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5314
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5445
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = nil
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5524
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5608
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5660
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5661
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = tree.Year
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = tree.Month
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = tree.Day
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = tree.Month
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = nil
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = tree.Second
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5764
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5799
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6027
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6093
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6304
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6313
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6354
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6355
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6368
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6379
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6396
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6400
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6426
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6450
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6454
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6458
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6468
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6470
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6473
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6478
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6480
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6483
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6488
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6493
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6495
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6498
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6500
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6507
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6508
		{
			return unimplemented(sqllex, "treat")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6510
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6514
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6518
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6522
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6526
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6529
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6534
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6539
		{
			return unimplemented(sqllex, "within group")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6540
		{
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6544
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6548
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6555
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6559
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6565
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6575
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6583
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6587
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6591
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6598
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6617
		{
			sqlVAL.str = ""
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6623
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6627
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6637
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6638
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6639
		{
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6642
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6643
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6649
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6650
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6651
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6652
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6653
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6664
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6668
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6674
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6680
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6686
		{
			sqlVAL.union.val = tree.Any
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6690
		{
			sqlVAL.union.val = tree.Some
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6694
		{
			sqlVAL.union.val = tree.All
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6699
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6700
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6701
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6702
		{
			sqlVAL.union.val = tree.Div
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6703
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6704
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6705
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6706
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6707
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6708
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6709
		{
			sqlVAL.union.val = tree.LT
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6710
		{
			sqlVAL.union.val = tree.GT
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6711
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6712
		{
			sqlVAL.union.val = tree.LE
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6713
		{
			sqlVAL.union.val = tree.GE
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6714
		{
			sqlVAL.union.val = tree.NE
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6718
		{
			sqlVAL.union.val = tree.Like
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6719
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6720
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6721
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6739
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6749
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6759
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6763
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6769
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6779
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6783
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6805
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6809
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6813
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6819
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6826
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6830
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6847
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6851
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6855
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6859
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6863
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6869
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6875
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6881
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6885
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6889
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6895
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6899
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6910
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6917
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6927
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6933
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6937
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6944
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6950
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6954
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6961
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6967
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6976
		{
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6977
		{
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6981
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6991
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7000
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7004
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7008
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7016
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7026
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7036
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7043
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7065
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7069
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7073
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7079
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7089
		{
			sqlVAL.union.val = sqlDollar[1].union.nameList()
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7093
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7100
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7104
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7108
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7112
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7115
		{
			return unimplemented(sqllex, "func const")
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7117
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7121
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7124
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7126
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7130
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7134
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7141
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7145
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7154
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7165
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7175
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7271
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7278
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7282
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7286
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7300
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7304
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7308
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7321
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7333
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7337
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7341
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7355
		{
			sqlVAL.str = ""
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7361
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7365
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
