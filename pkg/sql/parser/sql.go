// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:55
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:564
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8571

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	428, 57,
	-2, 911,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	171, 746,
	188, 746,
	-2, 0,
	-1, 60,
	103, 911,
	177, 911,
	375, 911,
	376, 911,
	-2, 0,
	-1, 74,
	116, 885,
	129, 885,
	185, 885,
	212, 885,
	240, 885,
	248, 885,
	372, 885,
	-2, 874,
	-1, 108,
	121, 555,
	201, 555,
	362, 555,
	-2, 0,
	-1, 113,
	4, 913,
	21, 913,
	22, 913,
	23, 913,
	24, 913,
	26, 913,
	31, 913,
	36, 913,
	37, 913,
	38, 913,
	39, 913,
	40, 913,
	41, 913,
	42, 913,
	43, 913,
	44, 913,
	45, 913,
	47, 913,
	48, 913,
	49, 913,
	50, 913,
	51, 913,
	52, 913,
	53, 913,
	56, 913,
	57, 913,
	58, 913,
	59, 913,
	61, 913,
	62, 913,
	66, 913,
	67, 913,
	68, 913,
	69, 913,
	70, 913,
	72, 913,
	73, 913,
	74, 913,
	75, 913,
	77, 913,
	79, 913,
	80, 913,
	83, 913,
	84, 913,
	92, 913,
	93, 913,
	94, 913,
	95, 913,
	96, 913,
	97, 913,
	98, 913,
	99, 913,
	101, 913,
	103, 913,
	105, 913,
	108, 913,
	109, 913,
	110, 913,
	112, 913,
	114, 913,
	115, 913,
	117, 913,
	118, 913,
	119, 913,
	120, 913,
	121, 913,
	122, 913,
	123, 913,
	124, 913,
	125, 913,
	126, 913,
	134, 913,
	135, 913,
	136, 913,
	137, 913,
	138, 913,
	139, 913,
	141, 913,
	143, 913,
	147, 913,
	149, 913,
	150, 913,
	152, 913,
	153, 913,
	155, 913,
	156, 913,
	157, 913,
	158, 913,
	159, 913,
	160, 913,
	161, 913,
	162, 913,
	163, 913,
	166, 913,
	167, 913,
	172, 913,
	173, 913,
	174, 913,
	177, 913,
	178, 913,
	179, 913,
	180, 913,
	181, 913,
	182, 913,
	183, 913,
	184, 913,
	186, 913,
	188, 913,
	191, 913,
	192, 913,
	193, 913,
	195, 913,
	196, 913,
	199, 913,
	200, 913,
	201, 913,
	203, 913,
	204, 913,
	206, 913,
	207, 913,
	209, 913,
	210, 913,
	213, 913,
	214, 913,
	217, 913,
	219, 913,
	222, 913,
	223, 913,
	224, 913,
	225, 913,
	226, 913,
	228, 913,
	229, 913,
	230, 913,
	231, 913,
	236, 913,
	237, 913,
	238, 913,
	239, 913,
	241, 913,
	242, 913,
	244, 913,
	245, 913,
	246, 913,
	249, 913,
	250, 913,
	252, 913,
	254, 913,
	255, 913,
	256, 913,
	257, 913,
	258, 913,
	259, 913,
	260, 913,
	261, 913,
	263, 913,
	264, 913,
	265, 913,
	266, 913,
	267, 913,
	269, 913,
	270, 913,
	271, 913,
	272, 913,
	273, 913,
	274, 913,
	275, 913,
	276, 913,
	277, 913,
	279, 913,
	280, 913,
	281, 913,
	282, 913,
	283, 913,
	285, 913,
	286, 913,
	287, 913,
	288, 913,
	289, 913,
	290, 913,
	291, 913,
	293, 913,
	295, 913,
	296, 913,
	297, 913,
	298, 913,
	299, 913,
	300, 913,
	302, 913,
	303, 913,
	304, 913,
	305, 913,
	306, 913,
	307, 913,
	308, 913,
	310, 913,
	311, 913,
	312, 913,
	313, 913,
	314, 913,
	315, 913,
	316, 913,
	317, 913,
	318, 913,
	320, 913,
	321, 913,
	322, 913,
	323, 913,
	325, 913,
	326, 913,
	327, 913,
	328, 913,
	330, 913,
	331, 913,
	332, 913,
	333, 913,
	334, 913,
	335, 913,
	336, 913,
	337, 913,
	338, 913,
	339, 913,
	340, 913,
	341, 913,
	343, 913,
	344, 913,
	346, 913,
	347, 913,
	348, 913,
	349, 913,
	350, 913,
	351, 913,
	352, 913,
	353, 913,
	354, 913,
	356, 913,
	357, 913,
	358, 913,
	359, 913,
	362, 913,
	363, 913,
	364, 913,
	365, 913,
	367, 913,
	368, 913,
	370, 913,
	371, 913,
	374, 913,
	375, 913,
	376, 913,
	377, 913,
	379, 913,
	381, 913,
	382, 913,
	383, 913,
	384, 913,
	385, 913,
	386, 913,
	387, 913,
	389, 913,
	390, 913,
	391, 913,
	396, 913,
	397, 913,
	398, 913,
	399, 913,
	400, 913,
	401, 913,
	-2, 0,
	-1, 135,
	116, 884,
	129, 884,
	185, 884,
	212, 884,
	240, 884,
	248, 884,
	372, 884,
	-2, 877,
	-1, 140,
	1, 807,
	191, 807,
	269, 807,
	274, 807,
	427, 807,
	428, 807,
	-2, 0,
	-1, 142,
	1, 807,
	427, 807,
	428, 807,
	-2, 0,
	-1, 143,
	1, 807,
	427, 807,
	428, 807,
	-2, 0,
	-1, 144,
	1, 811,
	427, 811,
	428, 811,
	-2, 0,
	-1, 172,
	4, 920,
	5, 920,
	6, 920,
	7, 920,
	8, 920,
	9, 920,
	10, 920,
	21, 920,
	22, 920,
	23, 920,
	24, 920,
	26, 920,
	31, 920,
	32, 920,
	36, 920,
	37, 920,
	38, 920,
	39, 920,
	40, 920,
	41, 920,
	42, 920,
	43, 920,
	44, 920,
	45, 920,
	47, 920,
	48, 920,
	49, 920,
	50, 920,
	51, 920,
	52, 920,
	53, 920,
	54, 920,
	55, 920,
	56, 920,
	57, 920,
	58, 920,
	59, 920,
	61, 920,
	62, 920,
	64, 920,
	66, 920,
	67, 920,
	68, 920,
	69, 920,
	70, 920,
	72, 920,
	73, 920,
	74, 920,
	75, 920,
	77, 920,
	79, 920,
	80, 920,
	82, 920,
	83, 920,
	84, 920,
	85, 920,
	86, 920,
	87, 920,
	88, 920,
	89, 920,
	90, 920,
	91, 920,
	92, 920,
	93, 920,
	94, 920,
	95, 920,
	96, 920,
	97, 920,
	98, 920,
	99, 920,
	100, 920,
	101, 920,
	103, 920,
	105, 920,
	108, 920,
	109, 920,
	110, 920,
	112, 920,
	114, 920,
	115, 920,
	117, 920,
	118, 920,
	119, 920,
	120, 920,
	121, 920,
	122, 920,
	123, 920,
	124, 920,
	125, 920,
	126, 920,
	127, 920,
	128, 920,
	134, 920,
	135, 920,
	136, 920,
	137, 920,
	138, 920,
	139, 920,
	141, 920,
	143, 920,
	146, 920,
	147, 920,
	149, 920,
	150, 920,
	152, 920,
	153, 920,
	155, 920,
	156, 920,
	157, 920,
	158, 920,
	159, 920,
	160, 920,
	161, 920,
	162, 920,
	163, 920,
	164, 920,
	166, 920,
	167, 920,
	172, 920,
	173, 920,
	174, 920,
	176, 920,
	177, 920,
	178, 920,
	179, 920,
	180, 920,
	181, 920,
	182, 920,
	183, 920,
	184, 920,
	186, 920,
	188, 920,
	189, 920,
	190, 920,
	191, 920,
	192, 920,
	193, 920,
	194, 920,
	195, 920,
	196, 920,
	199, 920,
	200, 920,
	201, 920,
	203, 920,
	204, 920,
	206, 920,
	207, 920,
	208, 920,
	209, 920,
	210, 920,
	211, 920,
	213, 920,
	214, 920,
	217, 920,
	219, 920,
	220, 920,
	221, 920,
	222, 920,
	223, 920,
	224, 920,
	225, 920,
	226, 920,
	227, 920,
	228, 920,
	229, 920,
	230, 920,
	231, 920,
	232, 920,
	234, 920,
	235, 920,
	236, 920,
	237, 920,
	238, 920,
	239, 920,
	241, 920,
	242, 920,
	245, 920,
	246, 920,
	249, 920,
	250, 920,
	251, 920,
	252, 920,
	253, 920,
	254, 920,
	255, 920,
	256, 920,
	257, 920,
	258, 920,
	259, 920,
	260, 920,
	261, 920,
	263, 920,
	264, 920,
	265, 920,
	266, 920,
	267, 920,
	269, 920,
	270, 920,
	271, 920,
	272, 920,
	273, 920,
	274, 920,
	275, 920,
	276, 920,
	277, 920,
	279, 920,
	280, 920,
	281, 920,
	282, 920,
	283, 920,
	285, 920,
	286, 920,
	287, 920,
	288, 920,
	289, 920,
	290, 920,
	291, 920,
	293, 920,
	294, 920,
	295, 920,
	296, 920,
	297, 920,
	298, 920,
	299, 920,
	300, 920,
	302, 920,
	303, 920,
	304, 920,
	305, 920,
	306, 920,
	307, 920,
	308, 920,
	310, 920,
	311, 920,
	312, 920,
	313, 920,
	314, 920,
	315, 920,
	316, 920,
	317, 920,
	318, 920,
	319, 920,
	320, 920,
	321, 920,
	322, 920,
	323, 920,
	324, 920,
	325, 920,
	326, 920,
	327, 920,
	328, 920,
	330, 920,
	331, 920,
	332, 920,
	333, 920,
	334, 920,
	335, 920,
	336, 920,
	337, 920,
	338, 920,
	339, 920,
	340, 920,
	341, 920,
	343, 920,
	344, 920,
	346, 920,
	347, 920,
	348, 920,
	349, 920,
	350, 920,
	351, 920,
	352, 920,
	353, 920,
	354, 920,
	356, 920,
	357, 920,
	358, 920,
	359, 920,
	362, 920,
	363, 920,
	364, 920,
	365, 920,
	366, 920,
	367, 920,
	368, 920,
	370, 920,
	371, 920,
	374, 920,
	375, 920,
	376, 920,
	377, 920,
	378, 920,
	379, 920,
	381, 920,
	382, 920,
	383, 920,
	384, 920,
	385, 920,
	386, 920,
	387, 920,
	389, 920,
	390, 920,
	391, 920,
	396, 920,
	397, 920,
	398, 920,
	399, 920,
	400, 920,
	401, 920,
	402, 920,
	410, 920,
	415, 920,
	416, 920,
	417, 920,
	424, 920,
	430, 920,
	-2, 0,
	-1, 175,
	1, 57,
	428, 57,
	-2, 911,
	-1, 208,
	426, 1516,
	429, 1516,
	-2, 598,
	-1, 209,
	426, 1518,
	429, 1518,
	-2, 599,
	-1, 210,
	426, 1517,
	429, 1517,
	-2, 600,
	-1, 211,
	429, 1468,
	-2, 601,
	-1, 626,
	145, 1636,
	360, 1636,
	407, 1636,
	426, 1636,
	-2, 0,
	-1, 627,
	145, 1556,
	360, 1556,
	407, 1556,
	426, 1556,
	-2, 0,
	-1, 629,
	145, 1709,
	360, 1709,
	407, 1709,
	426, 1709,
	-2, 0,
	-1, 631,
	145, 1737,
	360, 1737,
	407, 1737,
	426, 1737,
	-2, 0,
	-1, 638,
	145, 1641,
	360, 1641,
	407, 1641,
	426, 1641,
	-2, 432,
	-1, 671,
	1, 528,
	423, 528,
	425, 528,
	427, 528,
	428, 528,
	-2, 0,
	-1, 672,
	1, 597,
	142, 597,
	423, 597,
	425, 597,
	427, 597,
	428, 597,
	-2, 0,
	-1, 678,
	1, 542,
	423, 542,
	425, 542,
	427, 542,
	428, 542,
	-2, 0,
	-1, 680,
	1, 546,
	423, 546,
	425, 546,
	427, 546,
	428, 546,
	-2, 0,
	-1, 682,
	1, 556,
	423, 556,
	425, 556,
	427, 556,
	428, 556,
	-2, 0,
	-1, 683,
	1, 562,
	423, 562,
	425, 562,
	427, 562,
	428, 562,
	-2, 0,
	-1, 684,
	1, 565,
	423, 565,
	425, 565,
	427, 565,
	428, 565,
	-2, 0,
	-1, 688,
	1, 579,
	423, 579,
	425, 579,
	427, 579,
	428, 579,
	-2, 0,
	-1, 689,
	1, 581,
	423, 581,
	425, 581,
	427, 581,
	428, 581,
	-2, 0,
	-1, 717,
	129, 924,
	212, 924,
	240, 924,
	-2, 880,
	-1, 725,
	129, 923,
	212, 923,
	240, 923,
	-2, 878,
	-1, 752,
	424, 1814,
	-2, 1217,
	-1, 753,
	424, 1815,
	-2, 1218,
	-1, 781,
	424, 1510,
	-2, 1501,
	-1, 787,
	5, 1046,
	-2, 1546,
	-1, 788,
	5, 1047,
	-2, 1551,
	-1, 789,
	5, 1048,
	-2, 1550,
	-1, 790,
	5, 1049,
	-2, 1734,
	-1, 791,
	5, 1050,
	-2, 1643,
	-1, 792,
	5, 1051,
	-2, 1702,
	-1, 793,
	5, 1052,
	-2, 1704,
	-1, 794,
	5, 1053,
	-2, 1714,
	-1, 795,
	5, 1054,
	-2, 1705,
	-1, 796,
	5, 1055,
	-2, 1706,
	-1, 797,
	5, 1056,
	-2, 1545,
	-1, 798,
	5, 1057,
	-2, 1745,
	-1, 799,
	5, 1058,
	-2, 1612,
	-1, 800,
	5, 1059,
	-2, 1650,
	-1, 801,
	5, 1060,
	-2, 1651,
	-1, 802,
	5, 1061,
	-2, 1616,
	-1, 803,
	5, 1062,
	424, 1525,
	-2, 1516,
	-1, 804,
	5, 1115,
	424, 1115,
	-2, 1780,
	-1, 809,
	424, 1526,
	-2, 1517,
	-1, 811,
	5, 1066,
	-2, 1778,
	-1, 812,
	5, 1067,
	-2, 1779,
	-1, 813,
	5, 1068,
	-2, 1615,
	-1, 814,
	5, 1069,
	-2, 1791,
	-1, 815,
	5, 1070,
	-2, 1617,
	-1, 816,
	5, 1071,
	-2, 1618,
	-1, 817,
	5, 1072,
	-2, 1619,
	-1, 818,
	5, 1073,
	-2, 1760,
	-1, 819,
	5, 1074,
	-2, 1789,
	-1, 820,
	5, 1075,
	-2, 1598,
	-1, 821,
	5, 1076,
	-2, 1599,
	-1, 822,
	5, 1090,
	-2, 1772,
	-1, 824,
	5, 1065,
	-2, 1768,
	-1, 825,
	5, 1065,
	-2, 1767,
	-1, 826,
	5, 1065,
	-2, 1784,
	-1, 827,
	5, 1082,
	-2, 1762,
	-1, 828,
	5, 1083,
	-2, 1547,
	-1, 829,
	5, 1093,
	-2, 1761,
	-1, 830,
	5, 1095,
	-2, 1799,
	-1, 832,
	5, 1106,
	-2, 1575,
	-1, 833,
	5, 1107,
	-2, 1793,
	-1, 834,
	5, 1109,
	-2, 1794,
	-1, 835,
	5, 1111,
	-2, 1795,
	-1, 836,
	5, 1113,
	-2, 1735,
	-1, 837,
	5, 1034,
	-2, 1625,
	-1, 838,
	5, 1035,
	-2, 1626,
	-1, 858,
	5, 1101,
	-2, 1724,
	-1, 876,
	5, 1100,
	-2, 1800,
	-1, 877,
	5, 1102,
	390, 1102,
	-2, 1763,
	-1, 878,
	5, 1103,
	390, 1103,
	-2, 1764,
	-1, 939,
	424, 1525,
	-2, 1516,
	-1, 954,
	285, 1498,
	417, 1498,
	-2, 1497,
	-1, 1103,
	259, 909,
	-2, 725,
	-1, 1115,
	243, 1520,
	-2, 0,
	-1, 1158,
	1, 299,
	423, 299,
	427, 299,
	428, 299,
	-2, 883,
	-1, 1161,
	4, 1798,
	11, 1798,
	12, 1798,
	14, 1798,
	15, 1798,
	16, 1798,
	17, 1798,
	18, 1798,
	19, 1798,
	21, 1798,
	22, 1798,
	23, 1798,
	24, 1798,
	26, 1798,
	29, 1798,
	31, 1798,
	33, 1798,
	36, 1798,
	37, 1798,
	38, 1798,
	39, 1798,
	40, 1798,
	41, 1798,
	42, 1798,
	43, 1798,
	44, 1798,
	45, 1798,
	47, 1798,
	48, 1798,
	49, 1798,
	50, 1798,
	51, 1798,
	52, 1798,
	53, 1798,
	56, 1798,
	57, 1798,
	58, 1798,
	59, 1798,
	61, 1798,
	62, 1798,
	63, 1798,
	66, 1798,
	67, 1798,
	68, 1798,
	69, 1798,
	70, 1798,
	71, 1798,
	72, 1798,
	73, 1798,
	74, 1798,
	75, 1798,
	77, 1798,
	78, 1798,
	79, 1798,
	80, 1798,
	82, 1798,
	83, 1798,
	84, 1798,
	92, 1798,
	93, 1798,
	94, 1798,
	95, 1798,
	96, 1798,
	97, 1798,
	98, 1798,
	99, 1798,
	101, 1798,
	103, 1798,
	105, 1798,
	108, 1798,
	109, 1798,
	110, 1798,
	112, 1798,
	114, 1798,
	115, 1798,
	117, 1798,
	118, 1798,
	119, 1798,
	120, 1798,
	121, 1798,
	122, 1798,
	123, 1798,
	124, 1798,
	125, 1798,
	126, 1798,
	130, 1798,
	131, 1798,
	132, 1798,
	133, 1798,
	134, 1798,
	135, 1798,
	136, 1798,
	137, 1798,
	138, 1798,
	139, 1798,
	140, 1798,
	141, 1798,
	143, 1798,
	146, 1798,
	147, 1798,
	149, 1798,
	150, 1798,
	152, 1798,
	153, 1798,
	155, 1798,
	156, 1798,
	157, 1798,
	158, 1798,
	159, 1798,
	160, 1798,
	161, 1798,
	162, 1798,
	163, 1798,
	164, 1798,
	165, 1798,
	166, 1798,
	167, 1798,
	168, 1798,
	169, 1798,
	170, 1798,
	172, 1798,
	173, 1798,
	174, 1798,
	176, 1798,
	177, 1798,
	178, 1798,
	179, 1798,
	180, 1798,
	181, 1798,
	182, 1798,
	183, 1798,
	184, 1798,
	186, 1798,
	188, 1798,
	189, 1798,
	190, 1798,
	191, 1798,
	192, 1798,
	193, 1798,
	194, 1798,
	195, 1798,
	196, 1798,
	197, 1798,
	198, 1798,
	199, 1798,
	200, 1798,
	201, 1798,
	203, 1798,
	204, 1798,
	206, 1798,
	207, 1798,
	208, 1798,
	209, 1798,
	210, 1798,
	211, 1798,
	213, 1798,
	214, 1798,
	217, 1798,
	218, 1798,
	219, 1798,
	222, 1798,
	223, 1798,
	224, 1798,
	225, 1798,
	226, 1798,
	227, 1798,
	228, 1798,
	229, 1798,
	230, 1798,
	231, 1798,
	234, 1798,
	236, 1798,
	237, 1798,
	238, 1798,
	239, 1798,
	241, 1798,
	242, 1798,
	245, 1798,
	246, 1798,
	247, 1798,
	249, 1798,
	250, 1798,
	252, 1798,
	254, 1798,
	255, 1798,
	256, 1798,
	257, 1798,
	258, 1798,
	259, 1798,
	260, 1798,
	261, 1798,
	263, 1798,
	264, 1798,
	265, 1798,
	266, 1798,
	267, 1798,
	269, 1798,
	270, 1798,
	271, 1798,
	272, 1798,
	273, 1798,
	274, 1798,
	275, 1798,
	276, 1798,
	277, 1798,
	279, 1798,
	280, 1798,
	281, 1798,
	282, 1798,
	283, 1798,
	284, 1798,
	285, 1798,
	286, 1798,
	287, 1798,
	288, 1798,
	289, 1798,
	290, 1798,
	291, 1798,
	293, 1798,
	294, 1798,
	295, 1798,
	296, 1798,
	297, 1798,
	298, 1798,
	299, 1798,
	300, 1798,
	301, 1798,
	302, 1798,
	303, 1798,
	304, 1798,
	305, 1798,
	306, 1798,
	307, 1798,
	308, 1798,
	310, 1798,
	311, 1798,
	312, 1798,
	313, 1798,
	314, 1798,
	315, 1798,
	316, 1798,
	317, 1798,
	318, 1798,
	320, 1798,
	321, 1798,
	322, 1798,
	323, 1798,
	324, 1798,
	325, 1798,
	326, 1798,
	327, 1798,
	328, 1798,
	330, 1798,
	331, 1798,
	332, 1798,
	333, 1798,
	334, 1798,
	335, 1798,
	336, 1798,
	337, 1798,
	338, 1798,
	339, 1798,
	340, 1798,
	341, 1798,
	343, 1798,
	344, 1798,
	346, 1798,
	347, 1798,
	348, 1798,
	349, 1798,
	350, 1798,
	351, 1798,
	352, 1798,
	353, 1798,
	354, 1798,
	356, 1798,
	357, 1798,
	358, 1798,
	359, 1798,
	362, 1798,
	363, 1798,
	364, 1798,
	365, 1798,
	367, 1798,
	368, 1798,
	370, 1798,
	371, 1798,
	374, 1798,
	375, 1798,
	376, 1798,
	377, 1798,
	379, 1798,
	381, 1798,
	382, 1798,
	383, 1798,
	384, 1798,
	385, 1798,
	386, 1798,
	387, 1798,
	389, 1798,
	390, 1798,
	391, 1798,
	396, 1798,
	397, 1798,
	398, 1798,
	399, 1798,
	400, 1798,
	401, 1798,
	402, 1798,
	403, 1798,
	405, 1798,
	406, 1798,
	407, 1798,
	408, 1798,
	409, 1798,
	410, 1798,
	412, 1798,
	413, 1798,
	414, 1798,
	415, 1798,
	416, 1798,
	417, 1798,
	418, 1798,
	419, 1798,
	420, 1798,
	422, 1798,
	425, 1798,
	426, 1798,
	429, 1798,
	430, 1798,
	-2, 0,
	-1, 1180,
	145, 1709,
	360, 1709,
	407, 1709,
	426, 1709,
	-2, 0,
	-1, 1210,
	145, 1737,
	360, 1737,
	407, 1737,
	426, 1737,
	-2, 0,
	-1, 1211,
	191, 819,
	269, 819,
	274, 819,
	-2, 419,
	-1, 1282,
	1, 1752,
	423, 1752,
	425, 1752,
	426, 1752,
	427, 1752,
	428, 1752,
	-2, 577,
	-1, 1283,
	1, 1707,
	423, 1707,
	425, 1707,
	426, 1707,
	427, 1707,
	428, 1707,
	-2, 578,
	-1, 1293,
	129, 923,
	212, 923,
	240, 923,
	-2, 881,
	-1, 1383,
	116, 885,
	129, 885,
	185, 885,
	212, 885,
	240, 885,
	248, 885,
	372, 885,
	-2, 1271,
	-1, 1433,
	425, 1403,
	-2, 0,
	-1, 1437,
	191, 819,
	269, 819,
	274, 819,
	-2, 814,
	-1, 1471,
	116, 885,
	129, 885,
	185, 885,
	212, 885,
	240, 885,
	248, 885,
	372, 885,
	-2, 993,
	-1, 1646,
	424, 1105,
	-2, 1093,
	-1, 1693,
	191, 819,
	269, 819,
	274, 819,
	-2, 421,
	-1, 1793,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1150,
	-1, 1794,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1151,
	-1, 1795,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1152,
	-1, 1796,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1153,
	-1, 1797,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1154,
	-1, 1798,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1155,
	-1, 1799,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1156,
	-1, 1800,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1157,
	-1, 1812,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1169,
	-1, 1813,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1170,
	-1, 1814,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1171,
	-1, 1817,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1176,
	-1, 1823,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1180,
	-1, 1825,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1188,
	-1, 1826,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1189,
	-1, 1827,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1190,
	-1, 1828,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1191,
	-1, 1916,
	5, 1062,
	145, 1414,
	424, 1525,
	-2, 1516,
	-1, 1917,
	145, 1415,
	-2, 1756,
	-1, 1918,
	145, 1416,
	-2, 1640,
	-1, 1919,
	145, 1417,
	-2, 1576,
	-1, 1920,
	145, 1418,
	-2, 1607,
	-1, 1921,
	145, 1419,
	-2, 1639,
	-1, 1922,
	145, 1420,
	-2, 1701,
	-1, 1991,
	1, 994,
	82, 994,
	116, 994,
	129, 994,
	146, 994,
	151, 994,
	154, 994,
	176, 994,
	185, 994,
	194, 994,
	208, 994,
	212, 994,
	227, 994,
	240, 994,
	243, 994,
	248, 994,
	292, 994,
	294, 994,
	372, 994,
	380, 994,
	393, 994,
	394, 994,
	404, 994,
	423, 994,
	425, 994,
	427, 994,
	428, 994,
	429, 994,
	-2, 993,
	-1, 1996,
	424, 1502,
	-2, 1514,
	-1, 2080,
	425, 1473,
	429, 1473,
	-2, 1489,
	-1, 2166,
	424, 1104,
	-2, 1094,
	-1, 2218,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1178,
	-1, 2219,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1182,
	-1, 2225,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1184,
	-1, 2461,
	259, 909,
	-2, 725,
	-1, 2533,
	191, 819,
	269, 819,
	274, 819,
	-2, 418,
	-1, 2551,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1186,
	-1, 2558,
	189, 0,
	190, 0,
	234, 0,
	-2, 1205,
	-1, 2619,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1235,
	-1, 2620,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1236,
	-1, 2621,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1237,
	-1, 2625,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1241,
	-1, 2626,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1242,
	-1, 2627,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1243,
	-1, 2669,
	424, 1503,
	-2, 1515,
	-1, 2786,
	189, 0,
	190, 0,
	234, 0,
	-2, 1206,
	-1, 2789,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1209,
	-1, 2790,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1211,
	-1, 2933,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1210,
	-1, 2934,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1212,
	-1, 2944,
	189, 0,
	-2, 1244,
	-1, 3031,
	189, 0,
	-2, 1245,
	-1, 3128,
	39, 0,
	164, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1759,
}

const sqlPrivate = 57344

const sqlLast = 61363

var sqlAct = [...]int{

	809, 1453, 2887, 3127, 2972, 3194, 3137, 3104, 2714, 2113,
	3106, 3091, 2961, 2121, 2589, 3103, 3138, 3035, 1951, 3139,
	1087, 2902, 3126, 1610, 2211, 2678, 2923, 958, 2732, 2727,
	1061, 1780, 2858, 1840, 1983, 2843, 1148, 2737, 2479, 2471,
	2375, 210, 2246, 2473, 726, 2679, 500, 2484, 2078, 495,
	2326, 2082, 1144, 500, 1109, 1296, 1616, 951, 2244, 2110,
	500, 2364, 1464, 500, 500, 2122, 500, 210, 2146, 500,
	500, 2821, 974, 594, 2148, 2948, 500, 1561, 1560, 1445,
	2008, 1557, 1466, 968, 500, 2081, 932, 1572, 2351, 1999,
	1984, 2325, 551, 1569, 1503, 2340, 3036, 1777, 1979, 2642,
	1391, 734, 129, 547, 1869, 1852, 2063, 1772, 2442, 1526,
	2207, 2483, 1484, 805, 73, 1558, 1986, 1482, 1718, 1446,
	1837, 1213, 1520, 1880, 1948, 2888, 586, 2064, 1403, 2036,
	2079, 924, 1863, 960, 2037, 2115, 1159, 1141, 1131, 211,
	1554, 742, 212, 906, 2085, 927, 1971, 1455, 1372, 1853,
	616, 1912, 1956, 1437, 1297, 135, 766, 2382, 1295, 1617,
	636, 1717, 129, 136, 1578, 1128, 1065, 500, 500, 1495,
	904, 929, 663, 1301, 1436, 1112, 544, 1543, 589, 725,
	2658, 2242, 601, 2659, 497, 1611, 1586, 630, 206, 1465,
	2114, 1586, 3224, 496, 2065, 609, 1965, 730, 1586, 500,
	500, 500, 963, 500, 500, 977, 977, 1157, 3217, 3216,
	2546, 2523, 1965, 1965, 500, 500, 3191, 3189, 3186, 1598,
	2857, 2857, 1535, 3157, 3156, 480, 2490, 1965, 1965, 3153,
	730, 3150, 3147, 3154, 483, 3151, 1535, 3124, 808, 3123,
	1529, 1535, 3122, 1535, 1086, 3121, 1598, 2491, 2455, 1598,
	954, 480, 731, 3086, 2065, 603, 971, 2159, 740, 3072,
	483, 3066, 3064, 1535, 3062, 2857, 2857, 3060, 2857, 3033,
	3001, 2857, 1080, 2159, 1535, 1381, 2999, 129, 1965, 2645,
	2857, 3087, 1474, 907, 907, 718, 2990, 145, 3019, 1598,
	1535, 2989, 39, 717, 2982, 1535, 2981, 2954, 1535, 1958,
	2857, 1535, 2935, 40, 140, 2916, 2159, 1196, 2882, 2505,
	2878, 735, 1965, 2856, 1965, 2788, 1535, 2857, 44, 2159,
	2298, 2299, 2751, 2743, 2664, 2654, 2744, 2744, 2665, 2655,
	944, 948, 953, 46, 142, 2648, 2582, 2512, 908, 1965,
	1535, 2447, 2337, 2261, 2293, 45, 1965, 51, 1965, 2262,
	2292, 2288, 2144, 1067, 1965, 1965, 1066, 2273, 2179, 2158,
	1866, 2274, 1965, 2159, 2141, 2138, 2074, 52, 1603, 1965,
	1535, 54, 1183, 1964, 807, 2645, 58, 1965, 1965, 143,
	2313, 2055, 1957, 1602, 59, 72, 1535, 1603, 1696, 60,
	61, 910, 1068, 911, 2052, 1997, 2505, 2095, 480, 2447,
	2210, 2190, 1534, 1085, 1441, 1064, 175, 483, 2492, 1903,
	1179, 2245, 1178, 935, 62, 1177, 1176, 2298, 2299, 1175,
	1867, 1174, 1715, 1587, 63, 1173, 1172, 2493, 1587, 1171,
	1170, 1079, 1169, 764, 1168, 1587, 1167, 1166, 1165, 1901,
	1164, 1184, 2025, 1163, 912, 909, 724, 1312, 1313, 2304,
	723, 722, 721, 720, 716, 715, 548, 921, 714, 713,
	712, 711, 710, 709, 2298, 2299, 708, 2316, 2317, 2318,
	2118, 707, 1315, 767, 706, 702, 701, 700, 1584, 661,
	579, 660, 550, 659, 172, 1868, 1865, 658, 657, 656,
	1071, 40, 1075, 2836, 1081, 1184, 655, 654, 653, 1314,
	652, 651, 650, 649, 648, 647, 44, 646, 645, 500,
	500, 644, 500, 963, 963, 500, 500, 500, 643, 500,
	174, 642, 500, 641, 2313, 640, 64, 2314, 500, 1382,
	1990, 2490, 1535, 65, 625, 578, 1074, 624, 500, 500,
	500, 500, 500, 963, 963, 172, 2304, 623, 622, 934,
	963, 172, 831, 75, 138, 66, 621, 67, 620, 68,
	173, 1102, 1594, 144, 580, 1113, 1113, 1585, 69, 1099,
	166, 1870, 59, 582, 1756, 172, 1320, 60, 167, 172,
	1152, 174, 500, 1957, 500, 535, 83, 174, 534, 108,
	506, 1184, 733, 2304, 505, 963, 500, 504, 141, 137,
	1188, 486, 1117, 485, 1342, 1343, 1344, 1193, 936, 484,
	2315, 174, 63, 196, 195, 174, 194, 193, 2320, 500,
	192, 173, 191, 190, 2314, 1145, 189, 173, 188, 187,
	500, 166, 186, 113, 185, 184, 742, 166, 183, 167,
	742, 182, 2319, 139, 181, 167, 180, 179, 178, 177,
	176, 173, 2800, 2745, 1335, 173, 2662, 1181, 2378, 1130,
	137, 166, 1467, 1864, 731, 166, 137, 2267, 963, 167,
	2257, 2314, 2199, 167, 2298, 2299, 2075, 1135, 1138, 172,
	172, 2068, 1899, 1160, 1308, 3144, 579, 2164, 500, 2103,
	137, 1382, 1114, 4, 137, 1721, 1897, 40, 1895, 1481,
	1397, 1227, 1089, 1613, 500, 1070, 3125, 2315, 1393, 579,
	3026, 3022, 44, 3020, 64, 174, 174, 3002, 2971, 2921,
	40, 2309, 2307, 2308, 2300, 2301, 2302, 2303, 2305, 2306,
	2917, 2680, 2820, 2910, 2450, 44, 2819, 1336, 2807, 2806,
	2805, 578, 138, 66, 2804, 67, 2798, 1365, 1366, 1367,
	1368, 1369, 2797, 1221, 2315, 173, 173, 1225, 2796, 2795,
	1293, 2767, 1294, 172, 578, 166, 2766, 1612, 2764, 2668,
	580, 2639, 2638, 167, 581, 2637, 1384, 108, 59, 582,
	2566, 1396, 2562, 60, 2446, 1211, 2373, 2333, 2324, 2297,
	2294, 2291, 2289, 580, 2117, 137, 1393, 2272, 172, 174,
	2251, 59, 582, 2304, 2250, 2243, 60, 2145, 1991, 1874,
	2298, 2299, 1308, 920, 1380, 1540, 1307, 1208, 63, 2307,
	2308, 2300, 2301, 2302, 2303, 2305, 2306, 1538, 3222, 1716,
	2038, 1394, 1902, 1392, 174, 1292, 1566, 1228, 2206, 173,
	3202, 63, 3201, 172, 1088, 2591, 3117, 2104, 3115, 166,
	1324, 1316, 1317, 1318, 1319, 1321, 1322, 167, 2310, 2311,
	2312, 2516, 1900, 3110, 3057, 2309, 2307, 2308, 2300, 2301,
	2302, 2303, 2305, 2306, 173, 3056, 3053, 2161, 549, 174,
	3052, 3047, 3044, 3018, 166, 3017, 1843, 2967, 2946, 731,
	718, 2900, 167, 2896, 2892, 2890, 2835, 2818, 717, 172,
	781, 500, 1304, 1305, 2721, 2720, 500, 2718, 2696, 1309,
	2695, 2685, 2684, 137, 2909, 1447, 1447, 1447, 2650, 173,
	64, 1849, 2557, 2518, 2506, 2465, 2431, 2414, 1443, 166,
	2392, 2391, 500, 2336, 2271, 174, 2270, 167, 1452, 2304,
	2256, 2234, 1404, 64, 1401, 3038, 2357, 2168, 138, 66,
	2167, 67, 1994, 1976, 1405, 1406, 1312, 1313, 137, 1963,
	1893, 1376, 1549, 1480, 1444, 1435, 1434, 1433, 1432, 172,
	1431, 138, 66, 1430, 67, 173, 1429, 1428, 1427, 1425,
	581, 1315, 1424, 108, 1423, 166, 1422, 2392, 1421, 1420,
	1419, 1418, 172, 167, 1449, 1450, 1417, 2298, 2299, 2102,
	1416, 1415, 1414, 581, 1413, 174, 108, 1377, 1314, 1312,
	1313, 1375, 1475, 1207, 137, 1191, 1162, 2314, 1156, 2920,
	2792, 2763, 907, 2657, 2653, 129, 2260, 1463, 174, 1977,
	2298, 2299, 1394, 2514, 1315, 1373, 1476, 1224, 2178, 2474,
	2915, 2660, 2508, 731, 2507, 173, 1614, 1715, 2065, 1467,
	1410, 1440, 1408, 1202, 1702, 166, 1411, 1290, 1409, 2995,
	2435, 1314, 2430, 167, 963, 500, 1438, 1502, 173, 2425,
	1490, 977, 2413, 1715, 1472, 938, 1442, 1715, 166, 1611,
	2302, 2303, 2305, 2306, 137, 2177, 167, 2040, 2278, 500,
	977, 500, 500, 2277, 2276, 1399, 1866, 1527, 1469, 500,
	2315, 2275, 2216, 1689, 1220, 1898, 2694, 137, 902, 1562,
	3023, 2949, 3021, 2525, 1550, 2424, 500, 1312, 1313, 1896,
	1516, 1894, 1420, 500, 2114, 500, 2304, 500, 2593, 2265,
	1565, 500, 1881, 2166, 1420, 3145, 1426, 1407, 1320, 3155,
	2970, 1522, 1315, 903, 3152, 2486, 2674, 3100, 2728, 2152,
	201, 543, 3179, 1232, 2870, 3180, 1867, 2535, 513, 1747,
	2180, 3221, 3071, 963, 2010, 935, 2994, 935, 2993, 1314,
	2886, 896, 894, 892, 729, 1601, 2992, 2991, 2708, 2001,
	898, 500, 963, 210, 500, 500, 963, 3146, 1745, 2703,
	2699, 2702, 2001, 963, 2671, 1575, 210, 500, 2670, 1462,
	500, 500, 2255, 2000, 1067, 1546, 500, 1066, 889, 1703,
	2254, 2309, 2307, 2308, 2300, 2301, 2302, 2303, 2305, 2306,
	2253, 1868, 1865, 1892, 742, 742, 1691, 1567, 977, 1679,
	2252, 1533, 2220, 1379, 542, 919, 2143, 963, 963, 2058,
	500, 512, 2051, 728, 2047, 500, 1320, 1582, 2013, 480,
	210, 500, 1222, 500, 1130, 500, 2028, 500, 483, 500,
	1824, 1439, 1063, 1891, 1890, 1889, 1782, 2162, 2111, 500,
	3025, 500, 2538, 704, 1091, 2062, 2515, 1754, 1723, 2713,
	500, 2073, 2020, 1683, 1753, 2974, 615, 1839, 1577, 1198,
	1730, 1580, 1311, 1230, 1496, 524, 1160, 614, 1266, 1223,
	1761, 934, 1766, 934, 3070, 3119, 730, 1870, 1773, 2019,
	1581, 500, 1206, 2540, 615, 977, 1870, 2539, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1759, 1823, 1714, 1825, 1826, 1827, 1828,
	936, 1607, 936, 1608, 1693, 1322, 1690, 480, 1208, 525,
	1604, 1606, 2012, 2196, 1681, 1851, 483, 1707, 1265, 3171,
	480, 1199, 1277, 1839, 1680, 1719, 3141, 1847, 2481, 483,
	1384, 1518, 1845, 1261, 1875, 1854, 1855, 2421, 977, 1864,
	1727, 2300, 2301, 2302, 2303, 2305, 2306, 2576, 2687, 1485,
	1881, 2416, 1486, 1854, 765, 1318, 1319, 1321, 1322, 1240,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 3179, 1515, 1201,
	727, 2298, 2299, 1931, 480, 1942, 1944, 1949, 1736, 2306,
	500, 1262, 500, 483, 1911, 1500, 1915, 1915, 1925, 1927,
	1932, 1758, 1854, 1757, 1716, 2038, 1289, 718, 1752, 2534,
	718, 718, 3049, 1955, 2044, 1768, 977, 500, 1769, 1770,
	2536, 1776, 1778, 1779, 2697, 2925, 500, 2011, 1497, 500,
	1716, 2038, 977, 1982, 1716, 2038, 500, 1998, 2208, 2209,
	731, 1402, 2704, 1870, 500, 1878, 1487, 3142, 2098, 1995,
	2048, 2573, 500, 731, 3204, 1494, 2482, 731, 1489, 1523,
	1992, 510, 1492, 2866, 1586, 500, 1492, 2929, 963, 1746,
	1850, 1316, 1317, 1318, 1319, 1321, 1322, 1498, 1499, 500,
	977, 1231, 890, 890, 891, 500, 500, 2002, 900, 1264,
	2069, 899, 2071, 2434, 1876, 2975, 1370, 1978, 1744, 518,
	500, 1988, 1989, 500, 1090, 2481, 500, 1519, 907, 1491,
	2304, 2940, 2997, 516, 954, 3143, 2574, 527, 526, 890,
	2924, 1274, 2045, 541, 2269, 500, 2014, 2016, 3170, 1217,
	1923, 2059, 500, 1943, 500, 1953, 500, 1972, 731, 500,
	1952, 500, 1476, 500, 2222, 500, 500, 2030, 500, 963,
	963, 963, 1961, 1962, 963, 1969, 1973, 1974, 1987, 507,
	1729, 1310, 500, 500, 1589, 500, 705, 1591, 2688, 1472,
	1593, 2527, 1706, 1705, 1596, 2022, 1715, 1712, 2060, 2142,
	2005, 1205, 1200, 2029, 2298, 2299, 2136, 2137, 2314, 2039,
	2041, 2042, 2043, 1934, 1492, 2864, 2046, 2132, 1492, 1275,
	540, 730, 1870, 2030, 3084, 2183, 1229, 1218, 692, 533,
	2926, 1694, 1219, 510, 2031, 1623, 1873, 2185, 2108, 2769,
	1821, 2410, 2404, 2753, 1067, 1525, 1197, 2066, 692, 739,
	1888, 2134, 528, 500, 1212, 1454, 2151, 1241, 975, 1062,
	1838, 1846, 2776, 1524, 1711, 935, 2096, 2186, 2530, 739,
	2127, 518, 3169, 2169, 129, 2406, 2139, 2403, 2154, 2184,
	3140, 3178, 935, 3176, 1276, 516, 2120, 129, 1709, 480,
	1521, 2315, 977, 1248, 500, 2408, 3007, 2129, 483, 2130,
	2092, 2131, 2899, 2133, 500, 1242, 500, 1160, 1239, 1968,
	2140, 3205, 1498, 1499, 1648, 2153, 2469, 3197, 693, 1458,
	513, 1587, 2865, 500, 500, 500, 2163, 500, 2106, 1552,
	1451, 1195, 1182, 2304, 2407, 511, 1504, 503, 693, 1488,
	1755, 1299, 1300, 3082, 543, 2930, 500, 1485, 2439, 1461,
	1486, 1531, 2816, 2628, 1508, 2529, 1623, 1623, 509, 538,
	2173, 3211, 2174, 1405, 1406, 1819, 1822, 1456, 2443, 2526,
	508, 3083, 2984, 2983, 1649, 2965, 2201, 2170, 1701, 2172,
	3041, 1459, 2673, 1458, 2470, 2388, 2384, 2181, 2107, 1576,
	2218, 2219, 1564, 515, 539, 1505, 2225, 938, 519, 938,
	1457, 934, 1710, 512, 2308, 2300, 2301, 2302, 2303, 2305,
	2306, 2314, 1818, 1461, 514, 2239, 2240, 1563, 934, 1559,
	1217, 1875, 536, 1551, 1298, 2869, 2223, 542, 2365, 2247,
	2572, 1970, 2868, 3092, 1487, 1648, 1648, 1299, 537, 2733,
	1699, 1764, 2528, 1217, 500, 1459, 1489, 2248, 2249, 1750,
	694, 1697, 1300, 2266, 1700, 2966, 1370, 2903, 2203, 2394,
	936, 2258, 1509, 1724, 2393, 2279, 2214, 1460, 2205, 2354,
	694, 1967, 513, 2032, 1966, 2077, 737, 936, 692, 2629,
	750, 2194, 2076, 2195, 2817, 2630, 2094, 511, 1115, 1127,
	529, 1125, 728, 3195, 2315, 2715, 3210, 1491, 1218, 739,
	2448, 1574, 3183, 1219, 744, 1116, 584, 2889, 577, 36,
	509, 2438, 2221, 607, 541, 2366, 2822, 1949, 1949, 1949,
	1298, 1218, 508, 1510, 1511, 1820, 1219, 2643, 731, 1447,
	977, 1460, 1506, 1765, 1249, 738, 2338, 2348, 530, 2335,
	1886, 2345, 2346, 695, 3, 515, 500, 600, 1623, 500,
	519, 3185, 2347, 2945, 3196, 512, 500, 2963, 1507, 500,
	500, 977, 1548, 695, 2867, 2328, 514, 2815, 693, 500,
	500, 500, 2712, 2264, 531, 500, 532, 2368, 500, 2898,
	696, 1287, 1492, 2361, 3198, 500, 500, 500, 500, 500,
	2964, 540, 2405, 2369, 2370, 576, 35, 2327, 2444, 500,
	696, 2033, 2034, 1716, 1713, 2556, 500, 2501, 2300, 2301,
	2302, 2303, 2305, 2306, 575, 32, 2290, 1271, 500, 963,
	1269, 2259, 500, 2233, 2377, 1259, 2385, 1648, 2171, 977,
	2360, 1257, 806, 500, 1485, 1512, 2356, 1486, 1255, 977,
	2330, 2331, 2332, 1253, 2372, 2057, 977, 2339, 2027, 574,
	79, 2376, 487, 2415, 1251, 1542, 1885, 1479, 500, 1288,
	500, 1245, 500, 573, 78, 963, 500, 1102, 500, 963,
	963, 963, 2367, 481, 1126, 2422, 1124, 500, 498, 2897,
	2379, 197, 1192, 500, 36, 520, 2478, 2456, 500, 1743,
	500, 583, 546, 1490, 1513, 590, 597, 500, 546, 481,
	694, 590, 612, 605, 606, 2426, 1123, 1488, 619, 888,
	2409, 570, 23, 2198, 500, 543, 639, 1102, 1490, 2417,
	942, 1487, 963, 963, 1286, 2459, 2477, 2432, 2476, 2488,
	538, 2420, 2427, 1489, 2197, 2390, 2389, 598, 599, 2504,
	2418, 2193, 500, 2396, 2419, 2400, 2401, 2452, 1527, 742,
	742, 2449, 2433, 3136, 2175, 1527, 2445, 2710, 571, 24,
	1270, 1733, 742, 1268, 2521, 539, 2475, 935, 1258, 1682,
	500, 35, 1412, 202, 1256, 935, 935, 1098, 2543, 935,
	1530, 1254, 1773, 3089, 1491, 500, 1252, 2006, 2547, 2548,
	32, 736, 2551, 695, 2840, 2731, 2554, 1250, 542, 546,
	546, 2692, 731, 935, 1244, 2558, 2487, 937, 2494, 537,
	2690, 2342, 2672, 129, 2565, 2500, 2468, 2348, 2112, 2349,
	2350, 2584, 2359, 2355, 1835, 79, 2362, 2100, 977, 1742,
	696, 498, 498, 498, 2099, 969, 498, 2585, 977, 78,
	500, 2097, 488, 489, 2091, 1833, 481, 1069, 1600, 1122,
	203, 2006, 893, 895, 2599, 2600, 1599, 2601, 2602, 2603,
	1597, 2559, 2604, 1595, 1592, 1590, 2531, 2532, 2606, 1492,
	569, 30, 568, 21, 1588, 1541, 2568, 2569, 2570, 2537,
	566, 20, 1539, 2125, 2594, 2542, 1528, 23, 2544, 2513,
	1517, 2502, 1514, 1501, 1493, 2472, 1483, 567, 19, 2634,
	2635, 916, 3011, 934, 2533, 556, 15, 2212, 3180, 2919,
	2918, 934, 934, 1720, 3013, 934, 2006, 2018, 2564, 2522,
	491, 490, 2742, 2640, 917, 2651, 2884, 938, 2575, 2577,
	2578, 500, 2061, 2583, 24, 2056, 2590, 205, 2050, 934,
	557, 16, 1829, 500, 938, 2026, 2632, 2176, 2597, 977,
	1830, 204, 3051, 1831, 1687, 1688, 1836, 2605, 2661, 565,
	57, 1302, 936, 2677, 2859, 2656, 2607, 492, 493, 2001,
	936, 936, 1243, 3028, 936, 2001, 2823, 2213, 585, 2035,
	2017, 2021, 1306, 564, 56, 2700, 2015, 2053, 2633, 200,
	555, 55, 563, 12, 1488, 2854, 2023, 2705, 936, 2641,
	3088, 2895, 2706, 2701, 2667, 918, 2119, 2709, 129, 2649,
	1778, 2598, 2101, 2519, 2520, 2646, 2647, 2644, 500, 500,
	2707, 500, 2851, 2090, 198, 2844, 500, 1954, 1778, 2608,
	1692, 2711, 1615, 2663, 554, 50, 561, 47, 2842, 977,
	500, 2676, 1303, 2846, 963, 2722, 30, 608, 21, 2681,
	1623, 562, 48, 1447, 3193, 2503, 20, 201, 3209, 2636,
	1382, 500, 2852, 2793, 2749, 2762, 1312, 1313, 199, 2746,
	2698, 2735, 2579, 19, 553, 49, 500, 500, 963, 963,
	963, 15, 500, 500, 1832, 2030, 2734, 2298, 2299, 2739,
	2845, 1315, 1834, 2517, 500, 1312, 1313, 977, 500, 500,
	977, 500, 2738, 2716, 2759, 2188, 2717, 2188, 2187, 500,
	2725, 2724, 1312, 1313, 2719, 2189, 16, 977, 1314, 1234,
	2595, 2780, 2781, 2736, 1536, 1233, 2747, 2785, 2786, 1648,
	2773, 2740, 2789, 2790, 1887, 57, 1862, 2729, 2571, 2794,
	2778, 498, 1097, 1544, 498, 2755, 1380, 498, 498, 498,
	2754, 969, 2791, 2774, 1120, 2760, 2761, 2748, 2799, 56,
	498, 1378, 500, 935, 1314, 2803, 55, 2957, 12, 2770,
	498, 498, 498, 498, 969, 2913, 1620, 2750, 2495, 2496,
	2497, 2771, 2498, 2499, 2787, 2726, 2466, 560, 7, 559,
	6, 558, 38, 1273, 2847, 2464, 1272, 2848, 2105, 1568,
	1285, 935, 1284, 1623, 1267, 1263, 1260, 2652, 552, 37,
	50, 1246, 47, 1204, 639, 2779, 597, 875, 786, 1695,
	901, 500, 703, 2973, 1279, 2689, 2814, 48, 498, 3099,
	2850, 977, 690, 977, 2402, 1732, 1247, 1553, 1734, 2358,
	2853, 500, 500, 500, 1975, 3081, 2801, 2268, 3034, 2939,
	49, 1203, 1884, 202, 2861, 1385, 500, 1398, 53, 1390,
	775, 500, 639, 500, 857, 2841, 500, 500, 500, 500,
	500, 2768, 2675, 500, 500, 963, 2834, 2084, 1623, 977,
	2862, 1722, 1648, 963, 2860, 2083, 2828, 980, 2825, 2826,
	2830, 500, 500, 1704, 2839, 780, 2165, 1620, 1620, 934,
	935, 2381, 977, 1914, 1619, 963, 2006, 783, 1621, 785,
	784, 1622, 1400, 782, 2891, 500, 2395, 1618, 2398, 2885,
	498, 2093, 2376, 1102, 1623, 1623, 2123, 2879, 681, 2831,
	203, 2880, 2905, 1708, 1844, 2849, 498, 934, 1879, 2263,
	2894, 2681, 1623, 1623, 2342, 1395, 2907, 2904, 755, 777,
	2928, 1877, 1190, 754, 2932, 2933, 2934, 1648, 936, 2477,
	2363, 2914, 2912, 7, 2765, 6, 2906, 38, 1781, 2480,
	2666, 977, 2908, 1623, 2931, 2681, 1763, 2883, 2204, 1760,
	2942, 2943, 517, 2295, 37, 1155, 1940, 1933, 1929, 1291,
	1371, 2124, 1226, 758, 2950, 1842, 936, 1387, 2827, 2838,
	2901, 2238, 2374, 1648, 1648, 2489, 2160, 977, 1771, 915,
	914, 500, 2951, 500, 913, 977, 500, 205, 3105, 2485,
	2872, 1648, 1648, 2936, 500, 3102, 2927, 2877, 2485, 938,
	977, 204, 1698, 2863, 2182, 1364, 934, 938, 938, 771,
	2985, 938, 2343, 2873, 2874, 2947, 2960, 2691, 2451, 2693,
	1095, 1882, 1648, 2977, 935, 2979, 3050, 1363, 2996, 897,
	3043, 2978, 2958, 1216, 1215, 938, 1214, 2387, 2893, 200,
	500, 2952, 2953, 2976, 935, 963, 3203, 2686, 171, 168,
	500, 2955, 170, 169, 2437, 82, 2998, 34, 3000, 1620,
	33, 107, 3004, 935, 106, 936, 3006, 105, 2824, 104,
	977, 2829, 3009, 103, 198, 102, 1548, 101, 100, 99,
	98, 3016, 97, 96, 2681, 95, 3010, 3008, 94, 3015,
	500, 93, 3014, 92, 91, 90, 500, 935, 89, 88,
	3024, 87, 86, 619, 500, 1996, 85, 201, 546, 3042,
	2738, 84, 3045, 635, 632, 81, 3040, 2681, 199, 2681,
	80, 3046, 2477, 2681, 3027, 31, 26, 2681, 111, 1470,
	3037, 937, 500, 500, 498, 3039, 112, 3058, 500, 25,
	2959, 77, 76, 3032, 3061, 29, 18, 11, 500, 963,
	17, 3063, 22, 3048, 500, 134, 133, 132, 963, 963,
	934, 131, 500, 130, 500, 14, 500, 13, 126, 128,
	2986, 1623, 127, 125, 124, 3065, 3068, 2854, 123, 3069,
	934, 2231, 122, 121, 10, 500, 3077, 3085, 500, 3095,
	500, 8, 977, 3074, 3075, 3076, 110, 9, 2922, 934,
	2524, 3107, 2229, 70, 2851, 71, 3113, 3112, 27, 3114,
	3111, 3116, 43, 3097, 42, 3108, 3109, 41, 109, 936,
	162, 161, 3120, 3101, 3131, 3131, 3131, 3012, 500, 160,
	159, 3118, 155, 934, 154, 158, 935, 156, 157, 936,
	153, 120, 3149, 3135, 2852, 3134, 3132, 3133, 2956, 164,
	1648, 500, 1151, 163, 3159, 151, 148, 147, 936, 3148,
	500, 3160, 150, 3161, 152, 3163, 149, 481, 146, 935,
	3131, 935, 3168, 3165, 165, 935, 119, 500, 118, 935,
	117, 3162, 116, 3164, 115, 3166, 3167, 114, 5, 3174,
	3055, 1069, 936, 498, 1547, 2, 3177, 1, 3175, 2226,
	3181, 498, 3107, 3187, 3188, 3184, 3190, 3182, 0, 0,
	2227, 3073, 0, 2232, 0, 3192, 0, 0, 1573, 2006,
	0, 0, 0, 0, 0, 498, 3199, 498, 3200, 498,
	0, 0, 0, 546, 3206, 3131, 3207, 3208, 0, 3078,
	0, 3079, 2681, 0, 2681, 2191, 0, 0, 0, 0,
	0, 501, 0, 0, 0, 3214, 3215, 3218, 3219, 3220,
	3212, 3213, 2125, 0, 0, 3096, 0, 3225, 0, 0,
	0, 0, 934, 0, 0, 1767, 2847, 0, 0, 2848,
	0, 3223, 0, 639, 0, 481, 1069, 590, 0, 0,
	0, 0, 209, 0, 0, 938, 0, 0, 481, 1069,
	0, 0, 969, 498, 0, 934, 0, 934, 639, 0,
	0, 934, 2850, 0, 0, 934, 0, 0, 209, 0,
	0, 1848, 2853, 0, 0, 0, 0, 0, 3158, 0,
	0, 936, 1623, 938, 0, 0, 0, 0, 0, 1385,
	0, 2228, 639, 0, 0, 0, 0, 498, 0, 2230,
	0, 810, 481, 498, 956, 498, 0, 498, 0, 498,
	0, 498, 0, 0, 936, 0, 936, 1312, 1313, 0,
	936, 1748, 0, 1749, 936, 0, 0, 0, 0, 0,
	0, 0, 498, 1939, 1623, 0, 0, 0, 0, 0,
	2987, 2988, 1315, 0, 935, 0, 935, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 1935, 0, 0,
	0, 1648, 0, 639, 0, 0, 0, 2849, 0, 1314,
	930, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 0,
	572, 28, 2837, 0, 2006, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 978, 978, 0, 0,
	1623, 1620, 2871, 1648, 0, 1458, 494, 0, 0, 0,
	2876, 2782, 0, 0, 0, 0, 1312, 1313, 0, 0,
	0, 0, 0, 2344, 0, 0, 1337, 1338, 1339, 1340,
	0, 0, 0, 2006, 0, 1461, 1320, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 2371, 0, 2485, 0, 0, 0,
	0, 2235, 2236, 0, 1342, 1343, 1344, 1459, 1314, 0,
	934, 0, 934, 0, 0, 0, 0, 0, 0, 1648,
	0, 0, 619, 0, 546, 0, 1457, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 979, 979, 0, 937,
	0, 0, 2353, 0, 0, 0, 0, 0, 0, 546,
	0, 0, 0, 0, 1335, 0, 937, 0, 546, 0,
	0, 498, 0, 0, 0, 0, 938, 0, 2009, 936,
	0, 936, 2441, 0, 0, 0, 498, 0, 0, 2441,
	0, 0, 0, 0, 498, 1320, 938, 0, 0, 0,
	0, 0, 2006, 1460, 1620, 0, 28, 498, 0, 946,
	2321, 2322, 2323, 0, 973, 938, 0, 0, 0, 0,
	0, 498, 0, 1342, 1343, 1344, 0, 481, 2067, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2080, 0, 0, 1069, 0, 1336, 498, 938,
	0, 0, 0, 0, 0, 1103, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1573, 0, 0,
	0, 0, 0, 1335, 2009, 0, 546, 0, 498, 1620,
	0, 498, 0, 498, 0, 498, 0, 498, 498, 2352,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2149, 597, 0, 2009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1620, 1620, 0, 0, 0,
	2298, 2299, 0, 2316, 2317, 2318, 0, 1186, 0, 0,
	0, 0, 0, 1620, 1620, 0, 0, 0, 2784, 0,
	0, 0, 0, 3054, 964, 964, 1336, 0, 1325, 1323,
	1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0, 0,
	0, 2581, 0, 0, 1620, 590, 0, 0, 1939, 1939,
	0, 2587, 0, 0, 964, 964, 0, 0, 938, 0,
	2313, 964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1935, 1935, 0, 0, 0, 0, 0, 0,
	1235, 0, 0, 0, 0, 0, 498, 0, 0, 0,
	0, 938, 0, 938, 0, 0, 1069, 938, 1069, 0,
	0, 938, 0, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 498, 498, 498, 0, 498,
	0, 0, 0, 0, 965, 965, 0, 0, 0, 2304,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 0,
	1316, 1317, 1318, 1319, 1321, 1322, 0, 1939, 1939, 1939,
	0, 2125, 0, 0, 965, 965, 0, 0, 0, 0,
	0, 965, 2669, 0, 0, 2552, 2553, 0, 0, 0,
	0, 1935, 1935, 1935, 0, 0, 0, 0, 2319, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	1073, 0, 1078, 0, 1084, 1111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 2314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 1134,
	1134, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 2609, 2610, 2611, 2612, 2613, 2614,
	2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624,
	2625, 2626, 2627, 0, 2631, 0, 0, 0, 0, 0,
	0, 0, 1620, 0, 0, 0, 1187, 0, 0, 965,
	0, 0, 0, 2298, 2299, 0, 2316, 2317, 2318, 0,
	2315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1189, 2783, 0, 0, 0, 0, 0, 1194, 0, 0,
	975, 0, 0, 1062, 0, 0, 938, 0, 938, 0,
	0, 937, 0, 0, 0, 0, 0, 0, 0, 937,
	937, 0, 0, 937, 0, 0, 0, 0, 546, 0,
	0, 546, 0, 2313, 0, 0, 0, 0, 546, 0,
	0, 546, 546, 0, 0, 0, 0, 1470, 0, 0,
	0, 498, 2009, 2383, 0, 0, 0, 2009, 1278, 0,
	2383, 0, 0, 0, 0, 0, 0, 2009, 2383, 2009,
	2383, 2383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 0, 2310, 2311, 2312, 0, 1547, 0,
	0, 2309, 2307, 2308, 2300, 2301, 2302, 2303, 2305, 2306,
	498, 0, 2304, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 498, 0, 0, 0, 0,
	0, 0, 1939, 1939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2833, 0, 0, 0,
	1573, 0, 1573, 0, 498, 0, 1935, 1935, 498, 0,
	498, 2319, 0, 0, 0, 0, 0, 0, 0, 498,
	0, 0, 0, 0, 0, 969, 1532, 0, 0, 0,
	2009, 0, 546, 0, 0, 0, 0, 0, 0, 2009,
	2314, 0, 0, 0, 0, 776, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939,
	1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939,
	0, 1939, 0, 1620, 1069, 1935, 1935, 1935, 1935, 1935,
	1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
	1935, 1935, 1935, 1935, 0, 1935, 74, 0, 0, 0,
	0, 0, 2541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2315, 0, 964, 0, 498, 0, 0,
	0, 0, 978, 0, 2937, 1620, 0, 0, 0, 0,
	0, 0, 0, 0, 1605, 0, 0, 0, 1609, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	2937, 0, 0, 0, 0, 719, 0, 0, 1781, 0,
	0, 0, 2592, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1781, 0, 0, 0, 0, 0, 1725,
	1726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1620, 0, 0, 0, 0, 0, 0, 0, 0,
	925, 74, 0, 0, 964, 965, 0, 2310, 2311, 2312,
	0, 0, 979, 0, 2309, 2307, 2308, 2300, 2301, 2302,
	2303, 2305, 2306, 964, 209, 0, 0, 964, 0, 0,
	0, 979, 0, 0, 964, 0, 0, 209, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 546, 0, 0, 0, 0, 0, 2298,
	2299, 0, 2316, 2317, 2318, 546, 0, 0, 0, 978,
	0, 0, 0, 0, 0, 0, 0, 2561, 964, 964,
	0, 0, 0, 0, 0, 2683, 0, 0, 0, 2944,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1545, 0, 0, 965, 0, 0, 0, 0, 1556,
	0, 0, 0, 0, 1312, 1313, 0, 0, 0, 2313,
	0, 0, 0, 965, 0, 0, 2968, 965, 0, 0,
	0, 0, 0, 0, 965, 1579, 0, 1579, 0, 1315,
	2009, 1573, 0, 1573, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 0, 0, 0, 978, 0, 0, 0,
	0, 0, 498, 0, 0, 1781, 1314, 0, 0, 979,
	0, 0, 0, 0, 1334, 0, 0, 0, 965, 965,
	0, 0, 0, 2009, 937, 0, 0, 0, 2304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2149, 2149,
	0, 0, 0, 0, 597, 597, 0, 0, 0, 0,
	0, 1685, 0, 0, 0, 0, 1069, 0, 2555, 3031,
	969, 498, 0, 498, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 1337, 1338, 1339, 1340, 2319, 0, 978,
	0, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1731, 979, 0, 0, 0,
	2049, 1737, 0, 1738, 0, 1739, 2314, 1740, 0, 1741,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2802, 0, 0, 0, 0, 0,
	1751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 74, 0, 74,
	0, 1335, 0, 978, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 979,
	0, 2135, 0, 1069, 0, 0, 0, 0, 0, 2315,
	0, 0, 0, 0, 0, 0, 1939, 0, 1470, 964,
	0, 0, 0, 2009, 2383, 2009, 0, 0, 0, 0,
	0, 978, 0, 0, 0, 732, 0, 2683, 1069, 0,
	1935, 0, 0, 2009, 0, 2383, 0, 1341, 1069, 1069,
	498, 2009, 2383, 1939, 0, 498, 498, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 979, 0, 0,
	0, 2683, 0, 1069, 2080, 0, 0, 1935, 0, 0,
	0, 0, 0, 979, 0, 74, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 2009, 0, 0,
	964, 964, 964, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 2310, 2311, 2312, 0, 0, 0, 965,
	2309, 2307, 2308, 2300, 2301, 2302, 2303, 2305, 2306, 2298,
	2299, 979, 2316, 2317, 2318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1939, 2560, 0, 1993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1935, 0, 0, 0, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 2024, 0, 0, 2313,
	0, 0, 0, 2009, 0, 2383, 0, 0, 2962, 973,
	965, 965, 965, 0, 0, 965, 498, 0, 0, 0,
	2683, 0, 0, 2054, 0, 0, 0, 0, 0, 0,
	719, 0, 2155, 978, 0, 0, 1556, 0, 0, 0,
	2070, 0, 2072, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 1374, 2683, 0, 2683, 0, 0, 44, 2683,
	0, 0, 498, 2683, 0, 0, 2128, 0, 2304, 1134,
	1383, 1134, 1069, 1134, 1389, 973, 973, 0, 0, 2116,
	0, 2116, 0, 0, 0, 0, 0, 2156, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2592, 0, 0, 0, 2157, 2319, 546, 0,
	0, 1315, 0, 0, 0, 582, 2962, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2314, 0, 1314, 0,
	0, 0, 0, 0, 2009, 2383, 1334, 0, 0, 0,
	498, 0, 0, 0, 63, 0, 0, 0, 0, 0,
	498, 0, 0, 0, 0, 0, 2383, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 1069, 0, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2550, 0, 0, 0, 2192, 0, 0, 3093, 0, 0,
	1069, 0, 498, 0, 0, 1337, 1338, 1339, 1340, 74,
	0, 0, 1468, 0, 1471, 1320, 0, 2298, 2299, 2315,
	2316, 2317, 2318, 2200, 973, 2202, 0, 0, 0, 0,
	0, 0, 0, 0, 2298, 2299, 0, 2316, 2317, 2318,
	2592, 0, 0, 1342, 1343, 1344, 2215, 0, 0, 0,
	0, 2423, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 978, 0, 1069, 0, 0, 0, 0, 2683, 0,
	2683, 0, 2009, 0, 0, 0, 0, 2313, 0, 0,
	0, 0, 0, 0, 138, 66, 0, 67, 0, 2962,
	0, 0, 978, 1335, 2313, 0, 0, 2457, 0, 0,
	0, 2460, 2461, 2462, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 108,
	0, 0, 0, 2310, 2311, 2312, 0, 1312, 1313, 0,
	2309, 2307, 2308, 2300, 2301, 2302, 2303, 2305, 2306, 0,
	0, 174, 0, 0, 0, 0, 2304, 0, 0, 0,
	964, 0, 1315, 0, 2510, 2511, 0, 0, 0, 1341,
	978, 979, 0, 2304, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 1336, 978, 0, 1314,
	0, 173, 0, 0, 0, 0, 0, 1334, 0, 0,
	0, 166, 979, 0, 0, 2319, 964, 0, 0, 167,
	964, 964, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 2314, 0, 0, 0, 0, 0,
	0, 2549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2314, 0, 0, 0, 0, 1337, 1338, 1339, 1340,
	965, 1312, 1313, 964, 964, 0, 1320, 1355, 1356, 1357,
	979, 0, 0, 0, 0, 0, 0, 0, 0, 2380,
	979, 0, 0, 0, 0, 0, 1315, 979, 0, 1361,
	0, 0, 0, 0, 1342, 1343, 1344, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 965, 0, 0, 1111,
	965, 965, 965, 1314, 0, 0, 0, 2315, 0, 0,
	0, 1334, 0, 0, 2411, 0, 2412, 0, 0, 0,
	0, 0, 0, 0, 2315, 0, 0, 0, 0, 0,
	0, 0, 0, 2436, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2428, 0, 2429, 0, 0, 0,
	0, 0, 0, 965, 965, 0, 0, 0, 0, 978,
	0, 0, 2454, 0, 0, 0, 2458, 0, 0, 978,
	1337, 1338, 1339, 1340, 0, 0, 0, 2467, 0, 0,
	1320, 2453, 0, 0, 0, 0, 0, 719, 0, 0,
	719, 719, 2463, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 1352, 1362, 0, 0, 1342, 1343,
	1344, 2310, 2311, 2312, 0, 0, 0, 1336, 2309, 2307,
	2308, 2300, 2301, 2302, 2303, 2305, 2306, 0, 2310, 2311,
	2312, 0, 0, 0, 0, 2309, 2307, 2308, 2300, 2301,
	2302, 2303, 2305, 2306, 0, 0, 0, 0, 1841, 0,
	0, 1350, 0, 0, 0, 0, 0, 0, 1335, 979,
	0, 732, 0, 0, 0, 1312, 1313, 0, 0, 979,
	0, 0, 0, 0, 1383, 0, 0, 0, 1383, 0,
	978, 0, 0, 0, 0, 2545, 0, 0, 1312, 1313,
	1315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2756, 2757, 2758, 1315, 0, 0, 0, 1314, 0, 0,
	0, 0, 0, 0, 1341, 1334, 0, 0, 1325, 1323,
	1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0, 0,
	1314, 1336, 925, 0, 0, 0, 0, 1312, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 1353, 0, 0, 0, 0, 2224,
	978, 0, 1315, 0, 0, 964, 0, 0, 0, 0,
	979, 74, 0, 0, 1337, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 0, 1320, 0, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 964,
	964, 964, 0, 1312, 1313, 0, 0, 1320, 0, 0,
	0, 0, 1342, 1343, 1344, 74, 0, 74, 978, 0,
	0, 978, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 1351, 0, 0, 1342, 1343, 1344, 978, 0,
	1354, 0, 1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321,
	1322, 0, 0, 0, 74, 1314, 74, 0, 0, 0,
	979, 0, 1335, 1334, 0, 965, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 74, 0, 0, 1342, 1343, 1344, 2881, 0, 965,
	965, 965, 0, 0, 0, 0, 0, 2217, 0, 0,
	0, 0, 0, 0, 0, 0, 2723, 0, 979, 0,
	0, 979, 1337, 1338, 1339, 1340, 0, 0, 1341, 0,
	2730, 0, 1320, 0, 0, 0, 0, 0, 979, 0,
	0, 0, 0, 0, 1335, 1336, 0, 0, 0, 1312,
	1313, 0, 978, 0, 978, 0, 0, 0, 0, 0,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 2752, 0, 0, 0, 0, 0, 0, 2772,
	0, 973, 0, 0, 0, 0, 964, 0, 0, 2775,
	978, 1314, 0, 0, 964, 0, 0, 0, 0, 1334,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 964, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 979, 0, 1325, 1323, 1324, 1316,
	1317, 1318, 1319, 1321, 1322, 0, 0, 0, 1337, 1338,
	1339, 1340, 0, 0, 0, 0, 1341, 0, 1320, 1325,
	1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0,
	0, 0, 978, 1336, 0, 0, 965, 0, 1841, 0,
	979, 0, 0, 0, 965, 0, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1383,
	0, 0, 0, 979, 0, 0, 965, 0, 978, 0,
	0, 0, 0, 0, 0, 0, 978, 0, 0, 1323,
	1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0, 0,
	0, 978, 0, 0, 0, 0, 1335, 0, 2875, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 1325, 1323, 1324, 1316, 1317, 1318,
	1319, 1321, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 1341, 0, 2911, 0, 0, 0, 979, 0,
	0, 0, 0, 0, 925, 0, 979, 0, 0, 1336,
	0, 0, 925, 925, 0, 0, 925, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 74,
	964, 74, 0, 0, 0, 0, 0, 0, 0, 964,
	964, 0, 0, 0, 2969, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 0, 0,
	1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0,
	3005, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3003, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	965, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3059, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1861, 0, 803, 761, 762, 763, 759, 760, 773,
	3098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 1858, 264, 0, 0, 0, 0,
	850, 778, 0, 0, 0, 265, 266, 267, 216, 818,
	797, 829, 787, 828, 827, 0, 271, 272, 789, 788,
	275, 276, 277, 779, 849, 278, 877, 878, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 832, 298, 825, 824, 751,
	299, 0, 300, 0, 301, 1859, 0, 302, 823, 304,
	0, 305, 74, 306, 307, 0, 756, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 769, 860, 0, 0,
	925, 0, 0, 317, 318, 319, 822, 820, 821, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 799, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 811, 802, 813,
	815, 816, 817, 812, 0, 804, 0, 343, 864, 865,
	344, 345, 346, 866, 837, 838, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 753,
	752, 361, 362, 364, 791, 363, 869, 366, 367, 369,
	368, 748, 0, 870, 770, 854, 826, 370, 371, 0,
	800, 801, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 925, 388, 389,
	390, 391, 392, 393, 819, 394, 395, 74, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 757, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 792, 793, 795, 796, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 814, 794, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 858, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 790, 0, 833, 834, 835, 836, 0,
	0, 458, 459, 886, 887, 768, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	798, 470, 471, 472, 255, 830, 876, 1857, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 1860, 0, 0, 0,
	0, 925, 0, 774, 1856, 0, 0, 0, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1841, 260, 261, 262, 263, 981, 264, 982, 983,
	984, 985, 215, 986, 987, 988, 989, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 990, 271, 272,
	273, 274, 275, 276, 277, 991, 992, 278, 220, 221,
	222, 993, 279, 223, 994, 966, 995, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 996, 289, 0,
	290, 291, 997, 859, 292, 293, 998, 999, 1001, 1000,
	1002, 1003, 1004, 294, 295, 502, 296, 297, 298, 224,
	225, 1005, 299, 1006, 300, 1007, 301, 1008, 1009, 302,
	303, 304, 1010, 305, 1011, 306, 307, 1012, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 1013, 860,
	1014, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 1015, 323, 1016, 1017, 861, 324, 1018,
	325, 230, 1019, 231, 326, 1020, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 863, 1021, 238, 334, 0,
	0, 0, 1022, 333, 335, 342, 1023, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 1024, 237, 1025, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 1026, 353, 352, 1027, 354, 239, 867,
	355, 356, 868, 1028, 357, 358, 1029, 1030, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 1031, 1032, 870, 1033, 240, 241, 370,
	371, 1034, 372, 373, 1035, 1036, 374, 375, 1037, 1038,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 1039, 385, 244, 386, 245, 387, 1040,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 1041,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 1042, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	1043, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	1044, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	1045, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 1046, 448, 449, 1047, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 1048, 250, 251, 252,
	457, 1049, 1050, 458, 459, 253, 254, 1051, 460, 461,
	0, 462, 463, 1052, 1053, 464, 465, 466, 468, 1054,
	469, 1055, 467, 470, 471, 472, 255, 256, 257, 1056,
	474, 473, 258, 1057, 1058, 1059, 1060, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 1980, 0, 0, 0, 0, 0, 0,
	0, 0, 1981, 260, 261, 262, 263, 981, 264, 982,
	983, 984, 985, 215, 986, 987, 988, 989, 265, 266,
	267, 216, 217, 268, 218, 269, 270, 219, 990, 271,
	272, 273, 274, 275, 276, 277, 991, 992, 278, 220,
	221, 222, 993, 279, 223, 994, 966, 995, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 996, 289,
	0, 290, 291, 997, 859, 292, 293, 998, 999, 1001,
	1000, 1002, 1003, 1004, 294, 295, 502, 296, 297, 298,
	224, 225, 1005, 299, 1006, 300, 1007, 301, 1008, 1009,
	302, 303, 304, 1010, 305, 1011, 306, 307, 1012, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 1013,
	860, 1014, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 1015, 323, 1016, 1017, 861, 324,
	1018, 325, 230, 1019, 231, 326, 1020, 327, 328, 329,
	330, 331, 332, 232, 233, 234, 863, 1021, 238, 334,
	0, 0, 0, 1022, 333, 335, 342, 1023, 862, 336,
	235, 338, 337, 339, 340, 341, 236, 1024, 237, 1025,
	343, 864, 865, 344, 345, 346, 866, 347, 348, 0,
	0, 349, 350, 351, 1026, 353, 352, 1027, 354, 239,
	867, 355, 356, 868, 1028, 357, 358, 1029, 1030, 359,
	0, 360, 941, 940, 361, 362, 364, 365, 363, 869,
	366, 367, 369, 368, 1031, 1032, 870, 1033, 240, 241,
	370, 371, 1034, 372, 373, 1035, 1036, 374, 375, 1037,
	1038, 376, 242, 871, 377, 872, 243, 378, 379, 380,
	381, 382, 383, 384, 1039, 385, 244, 386, 245, 387,
	1040, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	1041, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 1042, 408, 873, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 1043, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 1044, 433, 414, 415, 434, 874, 435, 248, 436,
	437, 1045, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 1046, 448, 449, 1047, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 1048, 250, 251,
	252, 457, 1049, 1050, 458, 459, 253, 254, 1051, 460,
	461, 0, 462, 463, 1052, 1053, 464, 465, 466, 468,
	1054, 469, 1055, 467, 470, 471, 472, 255, 256, 257,
	1056, 474, 473, 258, 1057, 1058, 1059, 1060, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2832, 260, 261, 262, 263, 981,
	264, 982, 983, 984, 985, 215, 986, 987, 988, 989,
	265, 266, 267, 216, 217, 268, 218, 269, 270, 219,
	990, 271, 272, 273, 274, 275, 276, 277, 991, 992,
	278, 220, 221, 222, 993, 279, 223, 994, 966, 995,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	996, 289, 0, 290, 291, 997, 859, 292, 293, 998,
	999, 1001, 1000, 1002, 1003, 1004, 294, 295, 502, 296,
	297, 298, 224, 225, 1005, 299, 1006, 300, 1007, 301,
	1008, 1009, 302, 303, 304, 1010, 305, 1011, 306, 307,
	1012, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 1013, 860, 1014, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 1015, 323, 1016, 1017,
	861, 324, 1018, 325, 230, 1019, 231, 326, 1020, 327,
	328, 329, 330, 331, 332, 232, 233, 234, 863, 1021,
	238, 334, 0, 0, 0, 1022, 333, 335, 342, 1023,
	862, 336, 235, 338, 337, 339, 340, 341, 236, 1024,
	237, 1025, 343, 864, 865, 344, 345, 346, 866, 347,
	348, 0, 0, 349, 350, 351, 1026, 353, 352, 1027,
	354, 239, 867, 355, 356, 868, 1028, 357, 358, 1029,
	1030, 359, 0, 360, 941, 940, 361, 362, 364, 365,
	363, 869, 366, 367, 369, 368, 1031, 1032, 870, 1033,
	240, 241, 370, 371, 1034, 372, 373, 1035, 1036, 374,
	375, 1037, 1038, 376, 242, 871, 377, 872, 243, 378,
	379, 380, 381, 382, 383, 384, 1039, 385, 244, 386,
	245, 387, 1040, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 1041, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 1042, 408, 873, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 1043, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 1044, 433, 414, 415, 434, 874, 435,
	248, 436, 437, 1045, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 1046, 448, 449, 1047,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 1048,
	250, 251, 252, 457, 1049, 1050, 458, 459, 253, 254,
	1051, 460, 461, 0, 462, 463, 1052, 1053, 464, 465,
	466, 468, 1054, 469, 1055, 467, 470, 471, 472, 255,
	256, 257, 1056, 474, 473, 258, 1057, 1058, 1059, 1060,
	475, 476, 259, 477, 478, 479, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2938, 0, 260, 261, 262, 263, 981, 264, 982,
	983, 984, 985, 215, 986, 987, 988, 989, 265, 266,
	267, 216, 217, 268, 218, 269, 270, 219, 990, 271,
	272, 273, 274, 275, 276, 277, 991, 992, 278, 220,
	221, 222, 993, 279, 223, 994, 966, 995, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 996, 289,
	0, 290, 291, 997, 859, 292, 293, 998, 999, 1001,
	1000, 1002, 1003, 1004, 294, 295, 502, 296, 297, 298,
	224, 225, 1005, 299, 1006, 300, 1007, 301, 1008, 1009,
	302, 303, 304, 1010, 305, 1011, 306, 307, 1012, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 1013,
	860, 1014, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 1015, 323, 1016, 1017, 861, 324,
	1018, 325, 230, 1019, 231, 326, 1020, 327, 328, 329,
	330, 331, 332, 232, 233, 234, 863, 1021, 238, 334,
	0, 0, 0, 1022, 333, 335, 342, 1023, 862, 336,
	235, 338, 337, 339, 340, 341, 236, 1024, 237, 1025,
	343, 864, 865, 344, 345, 346, 866, 347, 348, 0,
	0, 349, 350, 351, 1026, 353, 352, 1027, 354, 239,
	867, 355, 356, 868, 1028, 357, 358, 1029, 1030, 359,
	0, 360, 941, 940, 361, 362, 364, 365, 363, 869,
	366, 367, 369, 368, 1031, 1032, 870, 1033, 240, 241,
	370, 371, 1034, 372, 373, 1035, 1036, 374, 375, 1037,
	1038, 376, 242, 871, 377, 872, 243, 378, 379, 380,
	381, 382, 383, 384, 1039, 385, 244, 386, 245, 387,
	1040, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	1041, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 1042, 408, 873, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 1043, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 1044, 433, 414, 415, 434, 874, 435, 248, 436,
	437, 1045, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 1046, 448, 449, 1047, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 1048, 250, 251,
	252, 457, 1049, 1050, 458, 459, 253, 254, 1051, 460,
	461, 0, 462, 463, 1052, 1053, 464, 465, 466, 468,
	1054, 469, 1055, 467, 470, 471, 472, 255, 256, 257,
	1056, 474, 473, 258, 1057, 1058, 1059, 1060, 475, 476,
	259, 477, 478, 479, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2588,
	0, 260, 261, 262, 263, 981, 264, 982, 983, 984,
	985, 215, 986, 987, 988, 989, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 990, 271, 272, 273,
	274, 275, 276, 277, 991, 992, 278, 220, 221, 222,
	993, 279, 223, 994, 966, 995, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 996, 289, 0, 290,
	291, 997, 859, 292, 293, 998, 999, 1001, 1000, 1002,
	1003, 1004, 294, 295, 502, 296, 297, 298, 224, 225,
	1005, 299, 1006, 300, 1007, 301, 1008, 1009, 302, 303,
	304, 1010, 305, 1011, 306, 307, 1012, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 1013, 860, 1014,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 1015, 323, 1016, 1017, 861, 324, 1018, 325,
	230, 1019, 231, 326, 1020, 327, 328, 329, 330, 331,
	332, 232, 233, 234, 863, 1021, 238, 334, 0, 0,
	0, 1022, 333, 335, 342, 1023, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 1024, 237, 1025, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 1026, 353, 352, 1027, 354, 239, 867, 355,
	356, 868, 1028, 357, 358, 1029, 1030, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 1031, 1032, 870, 1033, 240, 241, 370, 371,
	1034, 372, 373, 1035, 1036, 374, 375, 1037, 1038, 376,
	242, 871, 377, 872, 243, 378, 379, 380, 381, 382,
	383, 384, 1039, 385, 244, 386, 245, 387, 1040, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 1041, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 1042, 408, 873, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 1043,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 1044,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 1045,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 1046, 448, 449, 1047, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 1048, 250, 251, 252, 457,
	1049, 1050, 458, 459, 253, 254, 1051, 460, 461, 0,
	462, 463, 1052, 1053, 464, 465, 466, 468, 1054, 469,
	1055, 467, 470, 471, 472, 255, 256, 257, 1056, 474,
	473, 258, 1057, 1058, 1059, 1060, 475, 476, 259, 477,
	478, 479, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2580, 0, 260,
	261, 262, 263, 981, 264, 982, 983, 984, 985, 215,
	986, 987, 988, 989, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 990, 271, 272, 273, 274, 275,
	276, 277, 991, 992, 278, 220, 221, 222, 993, 279,
	223, 994, 966, 995, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 996, 289, 0, 290, 291, 997,
	859, 292, 293, 998, 999, 1001, 1000, 1002, 1003, 1004,
	294, 295, 502, 296, 297, 298, 224, 225, 1005, 299,
	1006, 300, 1007, 301, 1008, 1009, 302, 303, 304, 1010,
	305, 1011, 306, 307, 1012, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 1013, 860, 1014, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	1015, 323, 1016, 1017, 861, 324, 1018, 325, 230, 1019,
	231, 326, 1020, 327, 328, 329, 330, 331, 332, 232,
	233, 234, 863, 1021, 238, 334, 0, 0, 0, 1022,
	333, 335, 342, 1023, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 1024, 237, 1025, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	1026, 353, 352, 1027, 354, 239, 867, 355, 356, 868,
	1028, 357, 358, 1029, 1030, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	1031, 1032, 870, 1033, 240, 241, 370, 371, 1034, 372,
	373, 1035, 1036, 374, 375, 1037, 1038, 376, 242, 871,
	377, 872, 243, 378, 379, 380, 381, 382, 383, 384,
	1039, 385, 244, 386, 245, 387, 1040, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 1041, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	1042, 408, 873, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 1043, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 1044, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 1045, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	1046, 448, 449, 1047, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 1048, 250, 251, 252, 457, 1049, 1050,
	458, 459, 253, 254, 1051, 460, 461, 0, 462, 463,
	1052, 1053, 464, 465, 466, 468, 1054, 469, 1055, 467,
	470, 471, 472, 255, 256, 257, 1056, 474, 473, 258,
	1057, 1058, 1059, 1060, 475, 476, 259, 477, 478, 479,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2440, 0, 260, 261, 262,
	263, 981, 264, 982, 983, 984, 985, 215, 986, 987,
	988, 989, 265, 266, 267, 216, 217, 268, 218, 269,
	270, 219, 990, 271, 272, 273, 274, 275, 276, 277,
	991, 992, 278, 220, 221, 222, 993, 279, 223, 994,
	966, 995, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 996, 289, 0, 290, 291, 997, 859, 292,
	293, 998, 999, 1001, 1000, 1002, 1003, 1004, 294, 295,
	502, 296, 297, 298, 224, 225, 1005, 299, 1006, 300,
	1007, 301, 1008, 1009, 302, 303, 304, 1010, 305, 1011,
	306, 307, 1012, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 1013, 860, 1014, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 1015, 323,
	1016, 1017, 861, 324, 1018, 325, 230, 1019, 231, 326,
	1020, 327, 328, 329, 330, 331, 332, 232, 233, 234,
	863, 1021, 238, 334, 0, 0, 0, 1022, 333, 335,
	342, 1023, 862, 336, 235, 338, 337, 339, 340, 341,
	236, 1024, 237, 1025, 343, 864, 865, 344, 345, 346,
	866, 347, 348, 0, 0, 349, 350, 351, 1026, 353,
	352, 1027, 354, 239, 867, 355, 356, 868, 1028, 357,
	358, 1029, 1030, 359, 0, 360, 941, 940, 361, 362,
	364, 365, 363, 869, 366, 367, 369, 368, 1031, 1032,
	870, 1033, 240, 241, 370, 371, 1034, 372, 373, 1035,
	1036, 374, 375, 1037, 1038, 376, 242, 871, 377, 872,
	243, 378, 379, 380, 381, 382, 383, 384, 1039, 385,
	244, 386, 245, 387, 1040, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 1041, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 1042, 408,
	873, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 1043, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 1044, 433, 414, 415, 434,
	874, 435, 248, 436, 437, 1045, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 1046, 448,
	449, 1047, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 1048, 250, 251, 252, 457, 1049, 1050, 458, 459,
	253, 254, 1051, 460, 461, 0, 462, 463, 1052, 1053,
	464, 465, 466, 468, 1054, 469, 1055, 467, 470, 471,
	472, 255, 256, 257, 1056, 474, 473, 258, 1057, 1058,
	1059, 1060, 475, 476, 259, 477, 478, 479, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1883, 0, 260, 261, 262, 263, 981,
	264, 982, 983, 984, 985, 215, 986, 987, 988, 989,
	265, 266, 267, 216, 217, 268, 218, 269, 270, 219,
	990, 271, 272, 273, 274, 275, 276, 277, 991, 992,
	278, 220, 221, 222, 993, 279, 223, 994, 966, 995,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	996, 289, 0, 290, 291, 997, 859, 292, 293, 998,
	999, 1001, 1000, 1002, 1003, 1004, 294, 295, 502, 296,
	297, 298, 224, 225, 1005, 299, 1006, 300, 1007, 301,
	1008, 1009, 302, 303, 304, 1010, 305, 1011, 306, 307,
	1012, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 1013, 860, 1014, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 1015, 323, 1016, 1017,
	861, 324, 1018, 325, 230, 1019, 231, 326, 1020, 327,
	328, 329, 330, 331, 332, 232, 233, 234, 863, 1021,
	238, 334, 0, 0, 0, 1022, 333, 335, 342, 1023,
	862, 336, 235, 338, 337, 339, 340, 341, 236, 1024,
	237, 1025, 343, 864, 865, 344, 345, 346, 866, 347,
	348, 0, 0, 349, 350, 351, 1026, 353, 352, 1027,
	354, 239, 867, 355, 356, 868, 1028, 357, 358, 1029,
	1030, 359, 0, 360, 941, 940, 361, 362, 364, 365,
	363, 869, 366, 367, 369, 368, 1031, 1032, 870, 1033,
	240, 241, 370, 371, 1034, 372, 373, 1035, 1036, 374,
	375, 1037, 1038, 376, 242, 871, 377, 872, 243, 378,
	379, 380, 381, 382, 383, 384, 1039, 385, 244, 386,
	245, 387, 1040, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 1041, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 1042, 408, 873, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 1043, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 1044, 433, 414, 415, 434, 874, 435,
	248, 436, 437, 1045, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 1046, 448, 449, 1047,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 1048,
	250, 251, 252, 457, 1049, 1050, 458, 459, 253, 254,
	1051, 460, 461, 0, 462, 463, 1052, 1053, 464, 465,
	466, 468, 1054, 469, 1055, 467, 470, 471, 472, 255,
	256, 257, 1056, 474, 473, 258, 1057, 1058, 1059, 1060,
	475, 476, 259, 477, 478, 479, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 0, 260, 261, 262, 263, 981, 264, 982,
	983, 984, 985, 215, 986, 987, 988, 989, 265, 266,
	267, 216, 217, 268, 218, 269, 270, 219, 990, 271,
	272, 273, 274, 275, 276, 277, 991, 992, 278, 220,
	221, 222, 993, 279, 223, 994, 966, 995, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 996, 289,
	0, 290, 291, 997, 859, 292, 293, 998, 999, 1001,
	1000, 1002, 1003, 1004, 294, 295, 502, 296, 297, 298,
	224, 225, 1005, 299, 1006, 300, 1007, 301, 1008, 1009,
	302, 303, 304, 1010, 305, 1011, 306, 307, 1012, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 1013,
	860, 1014, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 1015, 323, 1016, 1017, 861, 324,
	1018, 325, 230, 1019, 231, 326, 1020, 327, 328, 329,
	330, 331, 332, 232, 233, 234, 863, 1021, 238, 334,
	0, 0, 0, 1022, 333, 335, 342, 1023, 862, 336,
	235, 338, 337, 339, 340, 341, 236, 1024, 237, 1025,
	343, 864, 865, 344, 345, 346, 866, 347, 348, 0,
	0, 349, 350, 351, 1026, 353, 352, 1027, 354, 239,
	867, 355, 356, 868, 1028, 357, 358, 1029, 1030, 359,
	0, 360, 941, 940, 361, 362, 364, 365, 363, 869,
	366, 367, 369, 368, 1031, 1032, 870, 1033, 240, 241,
	370, 371, 1034, 372, 373, 1035, 1036, 374, 375, 1037,
	1038, 376, 242, 871, 377, 872, 243, 378, 379, 380,
	381, 382, 383, 384, 1039, 385, 244, 386, 245, 387,
	1040, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	1041, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 1042, 408, 873, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 1043, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 1044, 433, 414, 415, 434, 874, 435, 248, 436,
	437, 1045, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 1046, 448, 449, 1047, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 1048, 250, 251,
	252, 457, 1049, 1050, 458, 459, 253, 254, 1051, 460,
	461, 0, 462, 463, 1052, 1053, 464, 465, 466, 468,
	1054, 469, 1055, 467, 470, 471, 472, 255, 256, 257,
	1056, 474, 473, 258, 1057, 1058, 1059, 1060, 475, 476,
	259, 477, 478, 479, 733, 0, 803, 761, 762, 763,
	759, 760, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 0, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 298,
	825, 824, 751, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 0, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 329,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 0, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 0, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 753, 752, 361, 362, 364, 791, 363, 869,
	366, 367, 369, 368, 748, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 0, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 172, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 174, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 0, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 1161, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 166, 475, 476,
	259, 477, 478, 479, 749, 167, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 803,
	761, 762, 763, 759, 760, 773, 1388, 1386, 0, 0,
	0, 0, 772, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 850, 778, 0, 0,
	0, 265, 266, 267, 216, 818, 797, 829, 787, 828,
	827, 0, 271, 272, 789, 788, 275, 276, 277, 779,
	849, 278, 877, 878, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 832, 298, 825, 824, 751, 299, 0, 300, 0,
	301, 0, 0, 302, 823, 304, 0, 305, 0, 306,
	307, 0, 756, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 769, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 822, 820, 821, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 863,
	0, 853, 799, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 811, 802, 813, 815, 816, 817, 812,
	0, 804, 0, 343, 864, 865, 344, 345, 346, 866,
	837, 838, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 753, 752, 361, 362, 364,
	791, 363, 869, 366, 367, 369, 368, 748, 0, 870,
	770, 854, 826, 370, 371, 0, 800, 801, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	819, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 757, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 172, 429, 430, 792, 793, 795,
	796, 425, 431, 432, 847, 433, 414, 415, 434, 874,
	435, 814, 794, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 858, 442, 443, 444, 885, 0, 448, 449,
	174, 450, 451, 452, 453, 454, 312, 455, 313, 790,
	0, 833, 834, 835, 836, 0, 0, 458, 459, 886,
	887, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 798, 470, 471, 472,
	1161, 830, 876, 0, 474, 473, 258, 0, 0, 0,
	166, 475, 476, 259, 477, 478, 479, 749, 167, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 803, 761, 762, 763, 759, 760, 773, 1388,
	2237, 0, 0, 0, 0, 772, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	778, 0, 0, 0, 265, 266, 267, 216, 818, 797,
	829, 787, 828, 827, 0, 271, 272, 789, 788, 275,
	276, 277, 779, 849, 278, 877, 878, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 832, 298, 825, 824, 751, 299,
	0, 300, 0, 301, 0, 0, 302, 823, 304, 0,
	305, 0, 306, 307, 0, 756, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 769, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 822, 820, 821, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 799, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 811, 802, 813, 815,
	816, 817, 812, 0, 804, 0, 343, 864, 865, 344,
	345, 346, 866, 837, 838, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 753, 752,
	361, 362, 364, 791, 363, 869, 366, 367, 369, 368,
	748, 0, 870, 770, 854, 826, 370, 371, 0, 800,
	801, 0, 0, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 819, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 757, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 172, 429, 430,
	792, 793, 795, 796, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 814, 794, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 858, 442, 443, 444, 885,
	0, 448, 449, 174, 450, 451, 452, 453, 454, 312,
	455, 313, 790, 0, 833, 834, 835, 836, 0, 0,
	458, 459, 886, 887, 768, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 798,
	470, 471, 472, 1161, 830, 876, 0, 474, 473, 258,
	0, 0, 0, 166, 475, 476, 259, 477, 478, 479,
	749, 167, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 803, 761, 762, 763, 759,
	760, 773, 1388, 1386, 0, 0, 0, 0, 772, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 850, 778, 0, 0, 0, 265, 266, 267,
	216, 818, 797, 829, 787, 828, 827, 1945, 271, 272,
	789, 788, 275, 276, 277, 779, 849, 278, 877, 878,
	222, 0, 279, 856, 0, 839, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 842, 840, 841, 846,
	844, 843, 845, 294, 295, 502, 296, 832, 298, 825,
	824, 751, 299, 0, 300, 0, 301, 0, 0, 302,
	823, 304, 0, 305, 0, 306, 307, 0, 756, 308,
	309, 311, 314, 310, 315, 316, 879, 880, 769, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 822, 820,
	821, 0, 322, 0, 323, 0, 1950, 861, 324, 0,
	325, 881, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 851, 852, 855, 863, 0, 853, 799, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 811,
	802, 813, 815, 816, 817, 812, 0, 804, 0, 343,
	864, 865, 344, 345, 346, 866, 837, 838, 0, 0,
	349, 350, 351, 0, 353, 352, 1946, 354, 882, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 753, 752, 361, 362, 364, 791, 363, 869, 366,
	367, 369, 368, 748, 0, 870, 770, 854, 826, 370,
	371, 0, 800, 801, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 883, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 884, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 819, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	757, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 792, 793, 795, 796, 425, 431, 432,
	847, 433, 414, 415, 434, 874, 435, 814, 794, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 858, 442,
	443, 444, 885, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 790, 0, 833, 834, 835,
	836, 0, 1947, 458, 459, 886, 887, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 848,
	469, 0, 798, 470, 471, 472, 255, 830, 876, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 803, 761,
	762, 763, 759, 760, 773, 774, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 850, 778, 0, 0, 0,
	265, 266, 267, 216, 818, 797, 829, 787, 828, 827,
	0, 271, 272, 789, 788, 275, 276, 277, 779, 849,
	278, 877, 878, 222, 0, 279, 856, 0, 839, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 859, 292, 293, 842,
	840, 841, 846, 844, 843, 845, 294, 295, 502, 296,
	832, 298, 825, 824, 751, 299, 0, 300, 0, 301,
	0, 0, 302, 823, 304, 0, 305, 0, 306, 307,
	0, 756, 308, 309, 311, 314, 310, 315, 316, 879,
	880, 769, 860, 0, 0, 0, 0, 0, 317, 318,
	319, 822, 820, 821, 0, 322, 0, 323, 0, 0,
	861, 324, 0, 325, 881, 0, 231, 326, 0, 327,
	328, 329, 330, 331, 332, 851, 852, 855, 863, 0,
	853, 799, 0, 0, 0, 0, 333, 335, 342, 0,
	862, 336, 811, 802, 813, 815, 816, 817, 812, 0,
	804, 0, 343, 864, 865, 344, 345, 346, 866, 837,
	838, 0, 0, 349, 350, 351, 0, 353, 352, 0,
	354, 882, 867, 355, 356, 868, 0, 357, 358, 0,
	0, 359, 0, 360, 753, 752, 361, 362, 364, 791,
	363, 869, 366, 367, 369, 368, 748, 2741, 870, 770,
	854, 826, 370, 371, 0, 800, 801, 0, 0, 374,
	375, 0, 0, 376, 242, 871, 377, 872, 883, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 884, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 819,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 873, 409,
	410, 411, 412, 757, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 792, 793, 795, 796,
	425, 431, 432, 847, 433, 414, 415, 434, 874, 435,
	814, 794, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 858, 442, 443, 444, 885, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 790, 0,
	833, 834, 835, 836, 0, 0, 458, 459, 886, 887,
	768, 460, 461, 0, 462, 463, 0, 0, 464, 465,
	466, 468, 848, 469, 0, 798, 470, 471, 472, 255,
	830, 876, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 1448, 0, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 0, 0, 772, 803, 761, 762, 763, 759,
	760, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 850, 778, 0, 0, 0, 265, 266, 267,
	216, 818, 797, 829, 787, 828, 827, 0, 271, 272,
	789, 788, 275, 276, 277, 779, 849, 278, 877, 878,
	222, 0, 279, 856, 0, 839, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 842, 840, 841, 846,
	844, 843, 845, 294, 295, 502, 296, 832, 298, 825,
	824, 751, 299, 0, 300, 0, 301, 0, 0, 302,
	823, 304, 0, 305, 0, 306, 307, 0, 756, 308,
	309, 311, 314, 310, 315, 316, 879, 880, 769, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 822, 820,
	821, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 881, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 851, 852, 855, 863, 0, 853, 799, 0,
	0, 0, 1775, 333, 335, 342, 0, 862, 336, 811,
	802, 813, 815, 816, 817, 812, 0, 804, 0, 343,
	864, 865, 344, 345, 346, 866, 837, 838, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 882, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 753, 752, 361, 362, 364, 791, 363, 869, 366,
	367, 369, 368, 748, 0, 870, 770, 854, 826, 370,
	371, 0, 800, 801, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 883, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 884, 386, 245, 387, 1774,
	388, 389, 390, 391, 392, 393, 819, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	757, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 792, 793, 795, 796, 425, 431, 432,
	847, 433, 414, 415, 434, 874, 435, 814, 794, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 858, 442,
	443, 444, 885, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 790, 0, 833, 834, 835,
	836, 0, 0, 458, 459, 886, 887, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 848,
	469, 0, 798, 470, 471, 472, 255, 830, 876, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 0, 0,
	0, 0, 0, 0, 0, 774, 0, 0, 0, 0,
	741, 772, 803, 761, 762, 763, 759, 760, 773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	778, 0, 0, 0, 265, 266, 267, 216, 818, 797,
	829, 787, 828, 827, 0, 271, 272, 789, 788, 275,
	276, 277, 779, 849, 278, 877, 878, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 832, 298, 825, 824, 751, 299,
	0, 300, 0, 301, 0, 0, 302, 823, 304, 0,
	305, 0, 306, 307, 0, 756, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 769, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 822, 820, 821, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 799, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 811, 802, 813, 815,
	816, 817, 812, 0, 804, 0, 343, 864, 865, 344,
	345, 346, 866, 837, 838, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 753, 752,
	361, 362, 364, 791, 363, 869, 366, 367, 369, 368,
	748, 0, 870, 770, 854, 826, 370, 371, 0, 800,
	801, 743, 0, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 819, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 757, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	792, 793, 795, 796, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 814, 794, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 858, 442, 443, 444, 885,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 790, 0, 833, 834, 835, 836, 0, 0,
	458, 459, 886, 887, 768, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 798,
	470, 471, 472, 255, 830, 876, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 803, 761, 762, 763, 759,
	760, 773, 774, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 850, 778, 0, 0, 0, 265, 266, 267,
	216, 818, 797, 829, 787, 828, 827, 0, 271, 272,
	789, 788, 275, 276, 277, 779, 849, 278, 877, 878,
	222, 0, 279, 856, 0, 839, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 842, 840, 841, 846,
	844, 843, 845, 294, 295, 502, 296, 832, 298, 825,
	824, 751, 299, 0, 300, 0, 301, 0, 0, 302,
	823, 304, 0, 305, 0, 306, 307, 0, 756, 308,
	309, 311, 314, 310, 315, 316, 879, 880, 769, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 822, 820,
	821, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 881, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 851, 852, 855, 863, 0, 853, 799, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 811,
	802, 813, 815, 816, 817, 812, 0, 804, 0, 343,
	864, 865, 344, 345, 346, 866, 837, 838, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 882, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 753, 752, 361, 362, 364, 791, 363, 869, 366,
	367, 369, 368, 748, 0, 870, 770, 854, 826, 370,
	371, 0, 800, 801, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 883, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 884, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 819, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	757, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 792, 793, 795, 796, 425, 431, 432,
	847, 433, 414, 415, 434, 874, 435, 814, 794, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 858, 442,
	443, 444, 885, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 790, 0, 833, 834, 835,
	836, 0, 0, 458, 459, 886, 887, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 848,
	469, 0, 798, 470, 471, 472, 255, 830, 876, 2567,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 803, 761,
	762, 763, 759, 760, 773, 774, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 850, 778, 0, 0, 0,
	265, 266, 267, 216, 818, 797, 829, 787, 828, 827,
	0, 271, 272, 789, 788, 275, 276, 277, 779, 849,
	278, 877, 878, 222, 0, 279, 856, 0, 839, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 859, 292, 293, 842,
	840, 841, 846, 844, 843, 845, 294, 295, 502, 296,
	832, 298, 825, 824, 751, 299, 0, 300, 0, 301,
	0, 0, 302, 823, 304, 0, 305, 0, 306, 307,
	0, 756, 308, 309, 311, 314, 310, 315, 316, 879,
	880, 769, 860, 0, 0, 0, 0, 0, 317, 318,
	319, 822, 820, 821, 0, 322, 0, 323, 0, 0,
	861, 324, 0, 325, 881, 0, 231, 326, 0, 327,
	328, 329, 330, 331, 332, 851, 852, 855, 863, 0,
	853, 799, 0, 0, 0, 0, 333, 335, 342, 0,
	862, 336, 811, 802, 813, 815, 816, 817, 812, 0,
	804, 0, 343, 864, 865, 344, 345, 346, 866, 837,
	838, 0, 0, 349, 350, 351, 0, 353, 352, 0,
	354, 882, 867, 355, 356, 868, 0, 357, 358, 0,
	0, 359, 0, 360, 753, 752, 361, 362, 364, 791,
	363, 869, 366, 367, 369, 368, 748, 0, 870, 770,
	854, 826, 370, 371, 0, 800, 801, 743, 0, 374,
	375, 0, 0, 376, 242, 871, 377, 872, 883, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 884, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 819,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 873, 409,
	410, 411, 412, 757, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 792, 793, 795, 796,
	425, 431, 432, 847, 433, 414, 415, 434, 874, 435,
	814, 794, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 858, 442, 443, 444, 885, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 790, 0,
	833, 834, 835, 836, 0, 0, 458, 459, 886, 887,
	768, 460, 461, 0, 462, 463, 0, 0, 464, 465,
	466, 468, 848, 469, 0, 798, 470, 471, 472, 255,
	830, 876, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 803, 761, 762, 763, 759, 760, 773, 774, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 850, 778,
	0, 0, 0, 265, 266, 267, 216, 818, 797, 829,
	787, 828, 827, 0, 271, 272, 789, 788, 275, 276,
	277, 779, 849, 278, 877, 878, 222, 0, 279, 856,
	0, 839, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 842, 840, 841, 846, 844, 843, 845, 294,
	295, 502, 296, 832, 298, 825, 824, 751, 299, 0,
	300, 0, 301, 0, 0, 302, 823, 304, 0, 305,
	0, 306, 307, 0, 756, 308, 309, 311, 314, 310,
	315, 316, 879, 880, 769, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 822, 820, 821, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 881, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 851, 852,
	855, 863, 0, 853, 799, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 811, 802, 813, 815, 816,
	817, 812, 0, 804, 0, 343, 864, 865, 344, 345,
	346, 866, 837, 838, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 882, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 753, 752, 361,
	362, 364, 791, 363, 869, 366, 367, 369, 368, 748,
	0, 870, 770, 854, 826, 370, 371, 0, 800, 801,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 883, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 884, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 819, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 757, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 792,
	793, 795, 796, 425, 431, 432, 847, 433, 414, 415,
	434, 874, 435, 814, 794, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 858, 442, 443, 444, 885, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 790, 0, 833, 834, 835, 836, 0, 0, 458,
	459, 886, 887, 768, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 848, 469, 0, 798, 470,
	471, 472, 255, 830, 876, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 1448, 0, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 0, 0, 772, 803, 761,
	762, 763, 759, 760, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 850, 778, 0, 0, 0,
	265, 266, 267, 216, 818, 797, 829, 787, 828, 827,
	0, 271, 272, 789, 788, 275, 276, 277, 779, 849,
	278, 877, 878, 222, 0, 279, 856, 0, 839, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 859, 292, 293, 842,
	840, 841, 846, 844, 843, 845, 294, 295, 502, 296,
	832, 298, 825, 824, 751, 299, 0, 300, 0, 301,
	0, 0, 302, 823, 304, 0, 305, 0, 306, 307,
	0, 756, 308, 309, 311, 314, 310, 315, 316, 879,
	880, 769, 860, 0, 0, 0, 0, 0, 317, 318,
	319, 822, 820, 821, 0, 322, 0, 323, 0, 1950,
	861, 324, 0, 325, 881, 0, 231, 326, 0, 327,
	328, 329, 330, 331, 332, 851, 852, 855, 863, 0,
	853, 799, 0, 0, 0, 0, 333, 335, 342, 0,
	862, 336, 811, 802, 813, 815, 816, 817, 812, 0,
	804, 0, 343, 864, 865, 344, 345, 346, 866, 837,
	838, 0, 0, 349, 350, 351, 0, 353, 352, 0,
	354, 882, 867, 355, 356, 868, 0, 357, 358, 0,
	0, 359, 0, 360, 753, 752, 361, 362, 364, 791,
	363, 869, 366, 367, 369, 368, 748, 0, 870, 770,
	854, 826, 370, 371, 0, 800, 801, 0, 0, 374,
	375, 0, 0, 376, 242, 871, 377, 872, 883, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 884, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 819,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 873, 409,
	410, 411, 412, 757, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 792, 793, 795, 796,
	425, 431, 432, 847, 433, 414, 415, 434, 874, 435,
	814, 794, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 858, 442, 443, 444, 885, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 790, 0,
	833, 834, 835, 836, 0, 0, 458, 459, 886, 887,
	768, 460, 461, 0, 462, 463, 0, 0, 464, 465,
	466, 468, 848, 469, 0, 798, 470, 471, 472, 255,
	830, 876, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 803, 761, 762, 763, 759, 760, 773, 774, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 850, 778,
	0, 0, 0, 265, 266, 267, 216, 818, 797, 829,
	787, 828, 827, 0, 271, 272, 789, 788, 275, 276,
	277, 779, 849, 278, 877, 878, 222, 0, 279, 856,
	0, 839, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 842, 840, 841, 846, 844, 843, 845, 294,
	295, 502, 296, 832, 298, 825, 824, 751, 299, 0,
	300, 0, 301, 0, 0, 302, 823, 304, 0, 305,
	0, 306, 307, 0, 756, 308, 309, 311, 314, 310,
	315, 316, 879, 880, 769, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 822, 820, 821, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 881, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 851, 852,
	855, 863, 0, 853, 799, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 811, 802, 813, 815, 816,
	817, 812, 0, 804, 0, 343, 864, 865, 344, 345,
	346, 866, 837, 838, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 882, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 753, 752, 361,
	362, 364, 791, 363, 869, 366, 367, 369, 368, 748,
	0, 870, 770, 854, 826, 370, 371, 0, 800, 801,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 883, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 884, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 819, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 757, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 792,
	793, 795, 796, 425, 431, 432, 847, 433, 414, 415,
	434, 874, 435, 814, 794, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 858, 442, 443, 444, 885, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 790, 0, 833, 834, 835, 836, 0, 0, 458,
	459, 886, 887, 768, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 848, 469, 0, 798, 470,
	471, 472, 255, 830, 876, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 0, 0, 0, 0, 0, 0,
	0, 774, 1386, 0, 0, 0, 1941, 772, 803, 761,
	762, 763, 759, 760, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 850, 778, 0, 0, 0,
	265, 266, 267, 216, 818, 797, 829, 787, 828, 827,
	0, 271, 272, 789, 788, 275, 276, 277, 779, 849,
	278, 877, 878, 222, 0, 279, 856, 0, 839, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 859, 292, 293, 842,
	840, 841, 846, 844, 843, 845, 294, 295, 502, 296,
	832, 298, 825, 824, 751, 299, 0, 300, 0, 301,
	0, 0, 302, 823, 304, 0, 305, 0, 306, 307,
	0, 756, 308, 309, 311, 314, 310, 315, 316, 879,
	880, 769, 860, 0, 0, 0, 0, 0, 317, 318,
	319, 822, 820, 821, 0, 322, 0, 323, 0, 0,
	861, 324, 0, 325, 881, 0, 231, 326, 0, 327,
	328, 329, 330, 331, 332, 851, 852, 855, 863, 0,
	853, 799, 0, 0, 0, 0, 333, 335, 342, 0,
	862, 336, 811, 802, 813, 815, 816, 817, 812, 0,
	804, 0, 343, 864, 865, 344, 345, 346, 866, 837,
	838, 0, 0, 349, 350, 351, 0, 353, 352, 0,
	354, 882, 867, 355, 356, 868, 0, 357, 358, 0,
	0, 359, 0, 360, 753, 752, 361, 362, 364, 791,
	363, 869, 366, 367, 369, 368, 748, 0, 870, 770,
	854, 826, 370, 371, 0, 800, 801, 0, 0, 374,
	375, 0, 0, 376, 242, 871, 377, 872, 883, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 884, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 819,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 873, 409,
	410, 411, 412, 757, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 792, 793, 795, 796,
	425, 431, 432, 847, 433, 414, 415, 434, 874, 435,
	814, 794, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 858, 442, 443, 444, 885, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 790, 0,
	833, 834, 835, 836, 0, 0, 458, 459, 886, 887,
	768, 460, 461, 0, 462, 463, 0, 0, 464, 465,
	466, 468, 848, 469, 0, 798, 470, 471, 472, 255,
	830, 876, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 0, 1930, 772, 803, 761, 762, 763, 759,
	760, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 850, 778, 0, 0, 0, 265, 266, 267,
	216, 818, 797, 829, 787, 828, 827, 0, 271, 272,
	789, 788, 275, 276, 277, 779, 849, 278, 877, 878,
	222, 0, 279, 856, 0, 839, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 842, 840, 841, 846,
	844, 843, 845, 294, 295, 502, 296, 832, 298, 825,
	824, 751, 299, 0, 300, 0, 301, 0, 0, 302,
	823, 304, 0, 305, 0, 306, 307, 0, 756, 308,
	309, 311, 314, 310, 315, 316, 879, 880, 769, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 822, 820,
	821, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 881, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 851, 852, 855, 863, 0, 853, 799, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 811,
	802, 813, 815, 816, 817, 812, 0, 804, 0, 343,
	864, 865, 344, 345, 346, 866, 837, 838, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 882, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 753, 752, 361, 362, 364, 791, 363, 869, 366,
	367, 369, 368, 748, 0, 870, 770, 854, 826, 370,
	371, 0, 800, 801, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 883, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 884, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 819, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	757, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 792, 793, 795, 796, 425, 431, 432,
	847, 433, 414, 415, 434, 874, 435, 814, 794, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 858, 442,
	443, 444, 885, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 790, 0, 833, 834, 835,
	836, 0, 0, 458, 459, 886, 887, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 848,
	469, 0, 798, 470, 471, 472, 255, 830, 876, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 0, 0,
	0, 0, 0, 0, 0, 774, 0, 0, 0, 0,
	1928, 772, 803, 761, 762, 763, 759, 760, 773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	778, 0, 0, 0, 265, 266, 267, 216, 818, 797,
	829, 787, 828, 827, 0, 271, 272, 789, 788, 275,
	276, 277, 779, 849, 278, 877, 878, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 832, 298, 825, 824, 751, 299,
	0, 300, 0, 301, 0, 0, 302, 823, 304, 0,
	305, 0, 306, 307, 0, 756, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 769, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 822, 820, 821, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 799, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 811, 802, 813, 815,
	816, 817, 812, 0, 804, 0, 343, 864, 865, 344,
	345, 346, 866, 837, 838, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 753, 752,
	361, 362, 364, 791, 363, 869, 366, 367, 369, 368,
	748, 0, 870, 770, 854, 826, 370, 371, 0, 800,
	801, 0, 0, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 819, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 757, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	792, 793, 795, 796, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 814, 794, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 858, 442, 443, 444, 885,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 790, 0, 833, 834, 835, 836, 0, 0,
	458, 459, 886, 887, 768, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 798,
	470, 471, 472, 255, 830, 876, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 774, 0, 0, 0, 0, 1926, 772, 803,
	761, 762, 763, 759, 760, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 850, 778, 0, 0,
	0, 265, 266, 267, 216, 818, 797, 829, 787, 828,
	827, 0, 271, 272, 789, 788, 275, 276, 277, 779,
	849, 278, 877, 878, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 832, 298, 825, 824, 751, 299, 0, 300, 0,
	301, 0, 0, 302, 823, 304, 0, 305, 0, 306,
	307, 0, 756, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 769, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 822, 820, 821, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 863,
	0, 853, 799, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 811, 802, 813, 815, 816, 817, 812,
	0, 804, 0, 343, 864, 865, 344, 345, 346, 866,
	837, 838, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 753, 752, 361, 362, 364,
	791, 363, 869, 366, 367, 369, 368, 748, 0, 870,
	770, 854, 826, 370, 371, 0, 800, 801, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	819, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 757, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 792, 793, 795,
	796, 425, 431, 432, 847, 433, 414, 415, 434, 874,
	435, 814, 794, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 858, 442, 443, 444, 885, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 790,
	0, 833, 834, 835, 836, 0, 0, 458, 459, 886,
	887, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 798, 470, 471, 472,
	255, 830, 876, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 0, 0, 0, 0, 0, 0, 0, 774,
	0, 0, 0, 0, 1924, 772, 1916, 761, 762, 763,
	759, 760, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 0, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 1919,
	825, 824, 751, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 0, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 1920,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 0, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 0, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 753, 752, 1921, 1918, 364, 791, 363, 869,
	366, 367, 369, 368, 748, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 0, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	1922, 0, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 0, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 255, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 1917, 479, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 0,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	0, 1913, 772, 1916, 761, 762, 763, 759, 760, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 778, 0, 0, 0, 265, 266, 267, 216, 818,
	797, 829, 787, 828, 827, 0, 271, 272, 789, 788,
	275, 276, 277, 779, 849, 278, 877, 878, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 832, 1919, 825, 824, 751,
	299, 0, 300, 0, 301, 0, 0, 302, 823, 304,
	0, 305, 0, 306, 307, 0, 756, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 769, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 822, 820, 821, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 1920, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 799, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 811, 802, 813,
	815, 816, 817, 812, 0, 804, 0, 343, 864, 865,
	344, 345, 346, 866, 837, 838, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 753,
	752, 1921, 1918, 364, 791, 363, 869, 366, 367, 369,
	368, 748, 0, 870, 770, 854, 826, 370, 371, 0,
	800, 801, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 819, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 757, 413,
	0, 417, 418, 419, 420, 421, 422, 1922, 0, 429,
	430, 792, 793, 795, 796, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 814, 794, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 858, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 790, 0, 833, 834, 835, 836, 0,
	0, 458, 459, 886, 887, 768, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	798, 470, 471, 472, 255, 830, 876, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 1917,
	479, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 803, 761, 762, 763,
	759, 760, 773, 774, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 0, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 298,
	825, 824, 751, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 0, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 329,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 0, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 0, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 753, 752, 361, 362, 364, 791, 363, 869,
	366, 367, 369, 368, 748, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 0, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 0, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 255, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 0,
	0, 0, 0, 0, 1394, 0, 774, 0, 0, 0,
	0, 0, 772, 803, 761, 762, 763, 759, 760, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 1762, 264, 0, 0, 0, 0,
	850, 778, 0, 0, 0, 265, 266, 267, 216, 818,
	797, 829, 787, 828, 827, 0, 271, 272, 789, 788,
	275, 276, 277, 779, 849, 278, 877, 878, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 832, 298, 825, 824, 751,
	299, 0, 300, 0, 301, 0, 0, 302, 823, 304,
	0, 305, 0, 306, 307, 0, 756, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 769, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 822, 820, 821, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 799, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 811, 802, 813,
	815, 816, 817, 812, 0, 804, 0, 343, 864, 865,
	344, 345, 346, 866, 837, 838, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 753,
	752, 361, 362, 364, 791, 363, 869, 366, 367, 369,
	368, 748, 0, 870, 770, 854, 826, 370, 371, 0,
	800, 801, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 819, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 757, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 792, 793, 795, 796, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 814, 794, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 858, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 790, 0, 833, 834, 835, 836, 0,
	0, 458, 459, 886, 887, 768, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	798, 470, 471, 472, 255, 830, 876, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 0, 1083, 772,
	803, 761, 762, 763, 759, 760, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 850, 778, 0,
	0, 0, 265, 266, 267, 216, 818, 797, 829, 787,
	828, 827, 0, 271, 272, 789, 788, 275, 276, 277,
	779, 849, 278, 877, 878, 222, 0, 279, 856, 0,
	839, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	293, 842, 840, 841, 846, 844, 843, 845, 294, 295,
	502, 296, 832, 298, 825, 824, 751, 299, 0, 300,
	0, 301, 0, 0, 302, 823, 304, 0, 305, 0,
	306, 307, 0, 756, 308, 309, 311, 314, 310, 315,
	316, 879, 880, 769, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 822, 820, 821, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 881, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 1082, 852, 855,
	863, 0, 853, 799, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 811, 802, 813, 815, 816, 817,
	812, 0, 804, 0, 343, 864, 865, 344, 345, 346,
	866, 837, 838, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 882, 867, 355, 356, 868, 0, 357,
	358, 0, 0, 359, 0, 360, 753, 752, 361, 362,
	364, 791, 363, 869, 366, 367, 369, 368, 748, 0,
	870, 770, 854, 826, 370, 371, 0, 800, 801, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	883, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	884, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 819, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 757, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 792, 793,
	795, 796, 425, 431, 432, 847, 433, 414, 415, 434,
	874, 435, 814, 794, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 858, 442, 443, 444, 885, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	790, 0, 833, 834, 835, 836, 0, 0, 458, 459,
	886, 887, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 848, 469, 0, 798, 470, 471,
	472, 255, 830, 876, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 0, 0, 0, 0, 0, 0, 0,
	774, 0, 0, 0, 0, 1077, 772, 803, 761, 762,
	763, 759, 760, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 850, 778, 0, 0, 0, 265,
	266, 267, 216, 818, 797, 829, 787, 828, 827, 0,
	271, 272, 789, 788, 275, 276, 277, 779, 849, 278,
	877, 878, 222, 0, 279, 856, 0, 839, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 859, 292, 293, 842, 840,
	841, 846, 844, 843, 845, 294, 295, 502, 296, 832,
	298, 825, 824, 751, 299, 0, 300, 0, 301, 0,
	0, 302, 823, 304, 0, 305, 0, 306, 307, 0,
	756, 308, 309, 311, 314, 310, 315, 316, 879, 880,
	769, 860, 0, 0, 0, 0, 0, 317, 318, 319,
	822, 820, 821, 0, 322, 0, 323, 0, 0, 861,
	324, 0, 325, 881, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 1076, 852, 855, 863, 0, 853,
	799, 0, 0, 0, 0, 333, 335, 342, 0, 862,
	336, 811, 802, 813, 815, 816, 817, 812, 0, 804,
	0, 343, 864, 865, 344, 345, 346, 866, 837, 838,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	882, 867, 355, 356, 868, 0, 357, 358, 0, 0,
	359, 0, 360, 753, 752, 361, 362, 364, 791, 363,
	869, 366, 367, 369, 368, 748, 0, 870, 770, 854,
	826, 370, 371, 0, 800, 801, 0, 0, 374, 375,
	0, 0, 376, 242, 871, 377, 872, 883, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 884, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 819, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 873, 409, 410,
	411, 412, 757, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 792, 793, 795, 796, 425,
	431, 432, 847, 433, 414, 415, 434, 874, 435, 814,
	794, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	858, 442, 443, 444, 885, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 790, 0, 833,
	834, 835, 836, 0, 0, 458, 459, 886, 887, 768,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 848, 469, 0, 798, 470, 471, 472, 255, 830,
	876, 0, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 0, 1072, 772, 803, 761, 762, 763, 759, 760,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 850, 778, 0, 0, 0, 265, 266, 267, 216,
	818, 797, 829, 787, 828, 827, 0, 271, 272, 789,
	788, 275, 276, 277, 779, 849, 278, 877, 878, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 832, 298, 825, 824,
	751, 299, 0, 300, 0, 301, 0, 0, 302, 823,
	304, 0, 305, 0, 306, 307, 0, 756, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 769, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 822, 820, 821,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 799, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 811, 802,
	813, 815, 816, 817, 812, 0, 804, 0, 343, 864,
	865, 344, 345, 346, 866, 837, 838, 0, 0, 349,
	350, 351, 0, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	753, 752, 361, 362, 364, 791, 363, 869, 366, 367,
	369, 368, 748, 0, 870, 770, 854, 826, 370, 371,
	0, 800, 801, 0, 0, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 819, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 757,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 792, 793, 795, 796, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 814, 794, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 858, 442, 443,
	444, 885, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 790, 0, 833, 834, 835, 836,
	0, 0, 458, 459, 886, 887, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 798, 470, 471, 472, 255, 830, 876, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 803, 761, 762,
	763, 759, 760, 773, 774, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 850, 778, 0, 0, 0, 265,
	266, 267, 216, 818, 797, 829, 787, 828, 827, 0,
	271, 272, 789, 788, 275, 276, 277, 779, 849, 278,
	877, 878, 222, 0, 279, 856, 0, 839, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 859, 292, 293, 842, 840,
	841, 846, 844, 843, 845, 294, 295, 502, 296, 832,
	298, 825, 824, 751, 299, 0, 300, 0, 301, 0,
	0, 302, 823, 304, 0, 305, 0, 306, 307, 0,
	756, 308, 309, 311, 314, 310, 315, 316, 879, 880,
	769, 860, 0, 0, 0, 0, 0, 317, 318, 319,
	822, 820, 821, 0, 322, 0, 323, 0, 0, 861,
	324, 0, 325, 881, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 851, 852, 855, 863, 0, 853,
	799, 0, 0, 0, 0, 333, 335, 342, 0, 862,
	336, 811, 802, 813, 815, 816, 817, 812, 0, 804,
	0, 343, 864, 865, 344, 345, 346, 866, 837, 838,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	882, 867, 355, 356, 868, 0, 357, 358, 0, 0,
	359, 0, 360, 753, 752, 361, 362, 364, 791, 363,
	869, 366, 367, 369, 368, 748, 0, 870, 770, 854,
	826, 370, 371, 0, 800, 801, 0, 0, 374, 375,
	0, 0, 376, 242, 871, 377, 872, 883, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 884, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 819, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 873, 409, 410,
	411, 412, 757, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 792, 793, 795, 796, 425,
	431, 432, 847, 433, 414, 415, 434, 874, 435, 814,
	794, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	858, 442, 443, 444, 885, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 790, 0, 833,
	834, 835, 836, 0, 0, 458, 459, 886, 887, 768,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 848, 469, 0, 798, 470, 471, 472, 255, 830,
	876, 0, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	803, 761, 762, 763, 759, 760, 773, 774, 0, 0,
	0, 0, 0, 772, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 850, 778, 0,
	0, 0, 265, 266, 267, 216, 818, 797, 829, 787,
	828, 827, 0, 271, 272, 789, 788, 275, 276, 277,
	779, 849, 278, 877, 878, 222, 0, 279, 856, 0,
	839, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	3130, 842, 840, 841, 846, 844, 843, 845, 294, 295,
	502, 296, 832, 298, 825, 824, 751, 299, 0, 300,
	0, 301, 0, 0, 302, 823, 304, 0, 305, 0,
	306, 307, 0, 756, 308, 309, 311, 314, 310, 315,
	316, 879, 880, 769, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 822, 820, 821, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 881, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 851, 852, 855,
	863, 0, 853, 799, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 811, 802, 813, 815, 816, 817,
	812, 0, 804, 0, 343, 864, 865, 344, 345, 346,
	866, 837, 838, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 882, 867, 355, 356, 868, 0, 357,
	358, 0, 0, 359, 0, 360, 753, 752, 361, 362,
	364, 791, 363, 869, 366, 367, 369, 368, 748, 0,
	870, 770, 854, 826, 370, 371, 0, 800, 801, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	883, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	884, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 819, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 757, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 792, 793,
	795, 796, 425, 431, 432, 847, 433, 414, 415, 434,
	874, 435, 814, 794, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 858, 442, 443, 444, 885, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	790, 0, 833, 834, 835, 836, 0, 0, 458, 459,
	886, 887, 768, 460, 461, 0, 3129, 463, 0, 0,
	464, 465, 466, 468, 848, 469, 0, 798, 470, 471,
	472, 255, 830, 876, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 803, 761, 762, 763, 759, 760, 773,
	774, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 778, 0, 0, 0, 265, 266, 267, 3128, 818,
	797, 829, 787, 828, 827, 0, 271, 272, 789, 788,
	275, 276, 277, 779, 849, 278, 877, 878, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 3130, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 832, 298, 825, 824, 751,
	299, 0, 300, 0, 301, 0, 0, 302, 823, 304,
	0, 305, 0, 306, 307, 0, 756, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 769, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 822, 820, 821, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 799, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 811, 802, 813,
	815, 816, 817, 812, 0, 804, 0, 343, 864, 865,
	344, 345, 346, 866, 837, 838, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 753,
	752, 361, 362, 364, 791, 363, 869, 366, 367, 369,
	368, 748, 0, 870, 770, 854, 826, 370, 371, 0,
	800, 801, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 819, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 757, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 792, 793, 795, 796, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 814, 794, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 858, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 790, 0, 833, 834, 835, 836, 0,
	0, 458, 459, 886, 887, 768, 460, 461, 0, 3129,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	798, 470, 471, 472, 255, 830, 876, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 803, 761, 762, 763,
	759, 760, 773, 774, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 0, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 298,
	825, 824, 0, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 0, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 329,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 0, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 0, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 941, 940, 361, 362, 364, 791, 363, 869,
	366, 367, 369, 368, 0, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 0, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 0, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 255, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 1938, 0, 0, 0, 0, 1936, 1937, 803,
	761, 762, 763, 759, 760, 773, 774, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 850, 778, 0, 0,
	0, 265, 266, 267, 0, 818, 797, 829, 787, 828,
	827, 0, 271, 272, 789, 788, 275, 276, 277, 779,
	849, 278, 877, 878, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 3130,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 832, 298, 825, 824, 751, 299, 0, 300, 0,
	301, 0, 0, 302, 823, 304, 0, 305, 0, 306,
	307, 0, 756, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 769, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 822, 820, 821, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 0,
	0, 853, 799, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 811, 802, 813, 815, 816, 817, 812,
	0, 804, 0, 343, 0, 0, 344, 345, 346, 866,
	837, 838, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 753, 752, 361, 362, 364,
	791, 363, 869, 366, 367, 369, 368, 748, 0, 0,
	770, 854, 826, 370, 371, 0, 800, 801, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	819, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 757, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 792, 793, 795,
	796, 425, 431, 432, 847, 433, 414, 415, 434, 0,
	435, 814, 794, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 858, 442, 443, 444, 885, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 790,
	0, 833, 834, 835, 836, 0, 0, 458, 459, 886,
	887, 768, 460, 461, 0, 3129, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 798, 470, 471, 472,
	255, 830, 876, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 733, 0, 939, 0, 0, 0, 0, 0,
	745, 746, 0, 0, 0, 0, 0, 0, 0, 774,
	0, 260, 261, 262, 263, 772, 264, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 849, 278, 220, 221, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 297, 298, 224, 225,
	0, 299, 0, 300, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 0, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 334, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 0, 237, 0, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 926, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 0, 0, 870, 0, 854, 241, 370, 371,
	0, 372, 373, 0, 931, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 247,
	933, 0, 417, 418, 419, 420, 421, 422, 423, 172,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 885, 0, 448, 449, 174, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 0, 250, 251, 252, 457,
	0, 0, 458, 459, 886, 887, 0, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 467, 470, 471, 472, 1161, 256, 257, 0, 474,
	473, 258, 0, 939, 0, 166, 475, 476, 259, 477,
	478, 479, 0, 167, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 0, 923, 0, 1473, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 849, 278, 220, 221, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 926, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 854, 241, 370, 371, 0,
	372, 373, 0, 931, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 933,
	0, 417, 418, 419, 420, 421, 422, 423, 172, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	885, 0, 448, 449, 174, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 886, 887, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	467, 470, 471, 472, 1161, 256, 257, 0, 474, 473,
	258, 2341, 0, 939, 166, 475, 476, 259, 477, 478,
	479, 0, 167, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 923, 0, 1473, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 849, 278, 220, 221, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 926, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 854, 241, 370, 371, 0,
	372, 373, 0, 931, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 933,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 886, 887, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 922, 0, 939, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 923, 0, 928, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 849, 278, 220, 221, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 926, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 854, 241, 370, 371, 0,
	372, 373, 0, 931, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 933,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 886, 887, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 939, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	0, 923, 0, 928, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 849, 278, 220, 221, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 297, 298, 224, 225, 0, 299,
	0, 300, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 0, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 334, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 0, 237, 0, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	926, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	0, 0, 870, 0, 854, 241, 370, 371, 0, 372,
	373, 0, 931, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 247, 933, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 885,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 0, 250, 251, 252, 457, 0, 0,
	458, 459, 886, 887, 0, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 467,
	470, 471, 472, 255, 256, 257, 0, 474, 473, 258,
	0, 939, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 850, 0,
	923, 0, 928, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 849, 278, 220, 221, 222, 0, 279, 856,
	0, 839, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 842, 840, 841, 846, 844, 843, 845, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 879, 880, 0, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 881, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 851, 852,
	855, 863, 0, 853, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 864, 865, 344, 345,
	346, 866, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 882, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 941, 940, 361,
	362, 364, 365, 363, 869, 366, 367, 369, 368, 0,
	0, 870, 0, 854, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 883, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 884, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 847, 433, 414, 415,
	434, 874, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 885, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 886, 887, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 848, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 0,
	939, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 850, 0, 0,
	0, 2682, 265, 266, 267, 216, 217, 268, 218, 269,
	270, 219, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 849, 278, 220, 221, 222, 0, 279, 856, 0,
	839, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	293, 842, 840, 841, 846, 844, 843, 845, 294, 295,
	502, 296, 297, 298, 224, 225, 0, 299, 0, 300,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 879, 880, 0, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 881, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 851, 852, 855,
	863, 0, 853, 334, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 235, 338, 337, 339, 340, 341,
	236, 0, 237, 0, 343, 864, 865, 344, 345, 346,
	866, 347, 348, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 882, 867, 355, 356, 868, 0, 357,
	358, 0, 0, 359, 0, 360, 941, 940, 361, 362,
	364, 365, 363, 869, 366, 367, 369, 368, 0, 0,
	870, 0, 854, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	883, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	884, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 247, 933, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 847, 433, 414, 415, 434,
	874, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 885, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 0, 250, 251, 252, 457, 0, 0, 458, 459,
	886, 887, 0, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 848, 469, 0, 467, 470, 471,
	472, 255, 256, 257, 0, 474, 473, 258, 1158, 0,
	962, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 215, 0, 0,
	1375, 0, 265, 266, 267, 216, 217, 268, 218, 269,
	270, 219, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 0, 278, 220, 221, 222, 0, 279, 223, 0,
	966, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 294, 295,
	502, 296, 297, 298, 224, 225, 0, 299, 0, 300,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 230, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 232, 233, 234,
	863, 0, 238, 334, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 235, 338, 337, 339, 340, 341,
	236, 0, 237, 0, 343, 864, 865, 344, 345, 346,
	866, 347, 348, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 239, 867, 355, 356, 868, 0, 357,
	358, 0, 0, 359, 0, 360, 941, 940, 361, 362,
	364, 365, 363, 869, 366, 367, 369, 368, 0, 0,
	870, 0, 240, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 172, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	874, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 174, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 0, 250, 251, 252, 457, 0, 0, 458, 459,
	253, 254, 0, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 1161, 256, 257, 0, 474, 473, 258, 0, 0,
	0, 166, 475, 476, 259, 477, 478, 479, 0, 167,
	0, 0, 0, 0, 962, 961, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 0, 278, 220, 221, 222,
	0, 279, 223, 0, 966, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 0, 0, 0, 0, 0,
	0, 0, 294, 295, 502, 296, 297, 298, 224, 225,
	0, 299, 0, 300, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	230, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 232, 233, 234, 863, 0, 238, 334, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 0, 237, 0, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 0, 353, 352, 0, 354, 239, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 0, 0, 870, 0, 240, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 0, 250, 251, 252, 457,
	0, 0, 458, 459, 253, 254, 0, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 255, 256, 257, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 962, 961, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 2509, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 939, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	0, 0, 0, 1185, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 849, 278, 220, 221, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 297, 298, 224, 225, 0, 299,
	0, 300, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 0, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 334, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 0, 237, 0, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	0, 0, 870, 0, 854, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 885,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 0, 250, 251, 252, 457, 0, 0,
	458, 459, 886, 887, 0, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 467,
	470, 471, 472, 255, 256, 257, 0, 474, 473, 258,
	733, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 0, 278, 220, 221, 222, 0, 279,
	223, 0, 0, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	0, 292, 293, 0, 0, 0, 0, 0, 0, 0,
	294, 295, 502, 296, 297, 298, 224, 225, 0, 299,
	0, 300, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 232,
	233, 234, 0, 0, 238, 334, 0, 0, 0, 0,
	333, 335, 342, 0, 0, 336, 235, 338, 337, 339,
	340, 341, 236, 0, 237, 0, 343, 0, 0, 344,
	345, 346, 0, 347, 348, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 239, 0, 355, 356, 0,
	0, 357, 358, 0, 0, 359, 0, 360, 0, 0,
	361, 362, 364, 365, 363, 0, 366, 367, 369, 368,
	0, 0, 0, 0, 240, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 172, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 174, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 0, 250, 251, 252, 457, 0, 0,
	458, 459, 253, 254, 0, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 1161, 256, 257, 0, 474, 473, 258,
	0, 499, 0, 166, 475, 476, 259, 477, 478, 479,
	0, 167, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 137, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 0,
	499, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 215, 0, 0,
	0, 2126, 265, 266, 267, 216, 217, 268, 218, 269,
	270, 219, 0, 271, 272, 273, 274, 275, 276, 277,
	0, 0, 278, 220, 221, 222, 0, 279, 223, 0,
	0, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 0, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 294, 295,
	502, 296, 297, 298, 224, 225, 0, 299, 0, 300,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 0,
	306, 307, 0, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 0, 323,
	0, 0, 0, 324, 0, 325, 230, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 232, 233, 234,
	0, 0, 238, 334, 0, 0, 0, 0, 333, 335,
	342, 0, 0, 336, 235, 338, 337, 339, 340, 341,
	236, 0, 237, 0, 343, 0, 0, 344, 345, 346,
	0, 347, 348, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 239, 0, 355, 356, 0, 0, 357,
	358, 0, 0, 359, 0, 360, 0, 0, 361, 362,
	364, 365, 363, 0, 366, 367, 369, 368, 0, 0,
	0, 0, 240, 241, 370, 371, 0, 372, 373, 0,
	0, 374, 375, 0, 0, 376, 242, 0, 377, 0,
	243, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	244, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	0, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 0, 433, 414, 415, 434,
	0, 435, 248, 436, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 0, 250, 251, 252, 457, 0, 0, 458, 459,
	253, 254, 0, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 255, 256, 257, 0, 474, 473, 258, 0, 499,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	2591, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 1238, 0, 962, 961, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 1237, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 1236, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 1154, 0, 962, 961, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	1153, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 1150, 0, 962, 961, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	1149, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 1108, 0, 962, 961, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	1107, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 1105, 0, 962, 961, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	1104, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 955, 0, 962, 961, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	957, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 962, 961, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 966, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 863, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 864, 865, 344, 345,
	346, 866, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 941, 940, 361,
	362, 364, 365, 363, 869, 366, 367, 369, 368, 0,
	0, 870, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 874, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 962,
	961, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 966,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 863,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 864, 865, 344, 345, 346, 866,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 941, 940, 361, 362, 364,
	365, 363, 869, 366, 367, 369, 368, 0, 0, 870,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 874,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 962, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 966, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 604, 0, 208, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 214, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 213, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 207, 0, 208, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 482, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 214, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 213, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 208, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 482, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 214, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 1735, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 213, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 208, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	482, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 214, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 213, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 482, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 482, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 2010, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 2007, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 2089, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 2013,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 2087, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 2086, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 2012, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 2088, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 499, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 2010,
	279, 223, 0, 0, 2004, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 2007, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 2013, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	2003, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 2012, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 2011, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 611, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 610, 588, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	591, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 592, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 593, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 587, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 588, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	591, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 592, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 593, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 499, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 591, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 592, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 593, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 0, 474, 473, 258, 1280, 0, 499, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 1283, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 1281, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 0, 1282, 473, 258, 1129, 0, 499, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 931, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 0, 474, 473, 258, 950, 0, 499, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 952, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 931, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 0, 474, 473, 258, 947, 0, 499, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 949, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 931, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 0, 474, 473, 258, 943, 0, 499, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 945, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 931, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 0, 474, 473, 258, 596, 0, 499, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 595, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 0, 474, 473, 258, 523, 0, 499, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 522, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	521, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 499, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	1985, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 499,
	2150, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 499, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 931, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 499, 2150, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 2147, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 1728, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1686, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1684, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 637, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	1209, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 638, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 634, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 633, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1571, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1570, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	1555, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 637, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 1209, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 638, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 634,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 633, 251, 252, 457, 0, 0, 458, 1210, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 637, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 627, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 638, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 634,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 1180, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 633, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1147, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1146, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1143, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1142, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1140, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1139, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1137, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1136, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1133, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1132, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 499, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 1121, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 1119, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	1118, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 1110, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 1101, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	1100, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 1096, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 1092, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	1094, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 970, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	972, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 967, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 637, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	627, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 626, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 638, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 628, 413,
	0, 417, 418, 634, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 629, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 633, 251, 252, 457, 0,
	0, 458, 631, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 617, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 618, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 613, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 602, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 545, 0, 499, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 499, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 499, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 2399, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 2397, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 2386, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 499, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	2109, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 499, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 618, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 499, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	1583, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 0, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 905, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 0, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 0, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 0, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 0, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 1312, 1313, 0,
	1345, 1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 1312,
	1313, 0, 1345, 1346, 1347, 1355, 1356, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 1315, 0, 0, 1361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 1338, 1339, 1340,
	0, 1314, 0, 0, 0, 0, 1320, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 1362, 0, 0, 1342, 1343, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 1359, 0, 0, 0,
	0, 0, 0, 1329, 1330, 0, 0, 0, 1337, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 1350, 1320, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1360, 0, 1352, 1362, 0, 0, 1342, 1343, 1344, 0,
	0, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1358, 1359, 0,
	0, 0, 0, 0, 0, 1329, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	1341, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 1360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 0, 0, 0, 0, 0, 1351, 0,
	0, 1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323,
	1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0, 0,
	0, 2810, 0, 0, 0, 2809, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 1313,
	0, 1345, 1346, 1347, 1355, 1356, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 1361, 0, 0, 0,
	1351, 0, 0, 1326, 1327, 1333, 1332, 1328, 1354, 0,
	1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0,
	1314, 0, 0, 2284, 0, 0, 0, 2285, 1334, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	1312, 1313, 0, 1345, 1346, 1347, 1355, 1356, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 1361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 1338, 1339,
	1340, 0, 1314, 0, 0, 0, 0, 1320, 0, 0,
	1334, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1362, 0, 0, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1358, 1359, 0, 0,
	0, 0, 0, 0, 1329, 1330, 0, 0, 0, 1337,
	1338, 1339, 1340, 0, 0, 0, 0, 0, 1350, 1320,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1360, 0, 1352, 1362, 0, 0, 1342, 1343, 1344,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 1359,
	0, 0, 0, 0, 0, 0, 1329, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 1341, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 1360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 1312, 1313, 0, 1345, 1346, 1347, 1355, 1356,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 1353, 0, 0, 0, 1315, 0, 1351,
	1361, 0, 1326, 1327, 1333, 1332, 1328, 1354, 0, 1325,
	1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0,
	0, 0, 1871, 0, 1314, 0, 1872, 0, 0, 0,
	0, 0, 1334, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 1351, 1361, 0, 1326, 1327, 1333, 1332, 1328, 1354,
	0, 1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322,
	0, 1337, 1338, 1339, 1340, 0, 1314, 0, 2808, 0,
	0, 1320, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1362, 0, 0, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1358, 1359, 0, 0, 0, 0, 0, 0, 1329, 1330,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 1350, 1320, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1360, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1350, 1341, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 1360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 1353, 0, 0,
	0, 1315, 0, 1351, 1361, 0, 1326, 1327, 1333, 1332,
	1328, 1354, 0, 1325, 1323, 1324, 1316, 1317, 1318, 1319,
	1321, 1322, 0, 0, 0, 0, 0, 0, 1314, 0,
	2563, 0, 0, 0, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 1312, 1313,
	0, 1345, 1346, 1347, 1355, 1356, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 0, 0, 1315, 0, 1351, 1361, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 1337, 1338, 1339, 1340, 0,
	1314, 0, 2287, 0, 0, 1320, 0, 0, 1334, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 1337, 1338, 1339,
	1340, 0, 0, 0, 0, 0, 1350, 1320, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1360,
	0, 1352, 1362, 0, 0, 1342, 1343, 1344, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1358, 1359, 0, 0,
	0, 0, 0, 0, 1329, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1350, 1341,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 1360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	1312, 1313, 0, 1345, 1346, 1347, 1355, 1356, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	0, 1353, 0, 0, 0, 1315, 0, 1351, 1361, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 0, 0, 0, 0,
	0, 0, 1314, 0, 2286, 0, 0, 0, 0, 0,
	1334, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 1312, 1313, 0, 1345, 1346, 1347, 1355, 1356,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 1315, 0, 1351,
	1361, 0, 1326, 1327, 1333, 1332, 1328, 1354, 0, 1325,
	1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 1337,
	1338, 1339, 1340, 0, 1314, 0, 2283, 0, 0, 1320,
	0, 0, 1334, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 1362, 0, 0, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 1359,
	0, 0, 0, 0, 0, 0, 1329, 1330, 0, 0,
	0, 1337, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	1350, 1320, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1360, 0, 1352, 1362, 0, 0, 1342,
	1343, 1344, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1358, 1359, 0, 0, 0, 0, 0, 0, 1329, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1350, 1341, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 1360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 1353, 0, 0, 0, 1315,
	0, 1351, 1361, 0, 1326, 1327, 1333, 1332, 1328, 1354,
	0, 1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322,
	0, 0, 0, 0, 0, 0, 1314, 0, 2282, 0,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 1351, 1361, 0, 1326, 1327, 1333, 1332,
	1328, 1354, 0, 1325, 1323, 1324, 1316, 1317, 1318, 1319,
	1321, 1322, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	2281, 0, 0, 1320, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 1351, 0, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 1872, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1361, 0, 0, 0, 0, 1351, 0, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 1314, 0, 0, 0,
	3094, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	0, 0, 0, 1320, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 1351, 0, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 3090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1361, 0, 0, 0, 0, 1351, 0, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 1314, 0, 0, 0,
	3030, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	0, 0, 0, 1320, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 1351, 0, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 3029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1361, 0, 0, 0, 0, 1351, 0, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 1314, 0, 0, 0,
	2980, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	0, 0, 0, 1320, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 1351, 0, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 2941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1361, 0, 0, 0, 0, 1351, 0, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 1314, 0, 0, 0,
	2855, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	0, 0, 0, 1320, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 1351, 0, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 2813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1361, 0, 0, 0, 0, 1351, 0, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 1314, 0, 0, 0,
	2812, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	0, 0, 0, 1320, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 1351, 0, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 2811, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1361, 0, 0, 0, 0, 1351, 0, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 1314, 0, 0, 0,
	2777, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	0, 0, 0, 1320, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 1351, 0, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 2596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1361, 0, 0, 0, 0, 1351, 0, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 1314, 0, 2241, 0,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1312, 1313, 0, 1345,
	1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 1314, 0,
	0, 0, 0, 1320, 3173, 0, 1334, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 1337, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 1350, 1320, 0, 2328, 0, 0,
	2327, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1352,
	1362, 0, 0, 1342, 1343, 1344, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1358, 1359, 0, 0, 3172, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1341, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 1312, 1313,
	0, 1345, 1346, 1347, 1355, 1356, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 1353,
	0, 2212, 0, 1315, 0, 1351, 1361, 0, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 0, 0, 0, 0, 0, 1334, 0,
	0, 0, 0, 1960, 0, 1331, 0, 0, 0, 0,
	1312, 1313, 0, 1345, 1346, 1347, 1355, 1356, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	0, 2213, 1959, 0, 0, 1315, 0, 1351, 1361, 0,
	1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1322, 0, 1337, 1338, 1339,
	1340, 0, 1314, 0, 0, 0, 0, 1320, 0, 0,
	1334, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 1362, 0, 0, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1358, 1359, 0, 0,
	0, 0, 0, 0, 1329, 1330, 0, 0, 0, 1337,
	1338, 1339, 1340, 0, 0, 0, 0, 0, 1350, 1320,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1360, 0, 1352, 1362, 0, 0, 1342, 1343, 1344,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 1359,
	0, 0, 0, 0, 0, 0, 1329, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 1341, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 1360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 1312, 1313, 0, 1345, 1346, 1347, 1355, 1356,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 1353, 0, 0, 0, 1315, 0, 1351,
	1361, 0, 1326, 1327, 1333, 1332, 1328, 1354, 0, 1325,
	1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 0, 1334, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347,
	1355, 1356, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 1315,
	0, 1351, 1361, 0, 1326, 1327, 1333, 1332, 1328, 1354,
	0, 1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322,
	0, 1337, 1338, 1339, 1340, 0, 1314, 0, 0, 0,
	0, 1320, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 1362, 0, 0, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1358, 1359, 0, 0, 0, 0, 0, 0, 1329, 1330,
	0, 0, 0, 1337, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 1350, 1320, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1360, 0, 1352, 1362, 0,
	0, 1342, 1343, 1344, 0, 0, 0, 0, 1349, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1329, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1350, 1341, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 1360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 1312, 1313, 0,
	1345, 1346, 1347, 1355, 1356, 1357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 1353, 0, 0,
	0, 0, 1315, 1351, 0, 1361, 1326, 1327, 1333, 1332,
	1328, 1354, 0, 1325, 1323, 1324, 1316, 1317, 1318, 1319,
	1321, 1322, 0, 0, 0, 0, 0, 0, 2586, 1314,
	0, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 1312,
	1313, 0, 1345, 1346, 1347, 1355, 1356, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 2329, 0, 0, 1315, 1351, 0, 1361, 1326, 1327,
	1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317,
	1318, 1319, 1321, 1322, 0, 0, 1337, 1338, 1339, 1340,
	0, 1314, 0, 0, 0, 0, 1320, 0, 0, 1334,
	0, 2334, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 1362, 0, 0, 1342, 1343, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 1359, 0, 0, 0,
	0, 0, 0, 1329, 1330, 0, 0, 0, 1337, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 1350, 1320, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1360, 0, 1352, 1362, 0, 0, 1342, 1343, 1344, 0,
	0, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1358, 1359, 0,
	0, 0, 0, 0, 0, 1329, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	1341, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 1360, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 1312, 1313, 0, 1345, 1346, 1347, 1355, 1356, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 0, 1353, 0, 0, 0, 1315, 0, 1351, 1361,
	0, 1326, 1327, 1333, 1332, 1328, 1354, 0, 1325, 1323,
	1324, 1316, 1317, 1318, 1319, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 0, 0, 0, 0,
	0, 1334, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1351, 0, 0, 1326, 1327, 1333, 1332, 1328, 1354, 0,
	1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0,
	1337, 1338, 1339, 1340, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	1313, 0, 1345, 1346, 1347, 1355, 1356, 1357, 0, 0,
	0, 0, 0, 0, 1352, 1362, 0, 1348, 1342, 1343,
	1344, 2280, 0, 0, 1315, 0, 0, 1361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1358,
	1359, 0, 0, 0, 0, 0, 0, 1329, 1330, 0,
	0, 1314, 0, 0, 0, 0, 0, 0, 0, 1334,
	0, 1350, 0, 0, 0, 0, 1331, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2296, 0, 0, 0, 0, 0, 1337, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 0, 1320, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 1352, 1362, 0, 0, 1342, 1343, 1344, 0,
	0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347, 1355,
	1356, 1357, 0, 0, 1353, 0, 0, 1358, 1359, 0,
	0, 1348, 0, 0, 0, 1329, 1330, 0, 1315, 0,
	0, 1361, 0, 0, 0, 0, 0, 0, 0, 1350,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 0, 0, 0, 0,
	0, 0, 1360, 1334, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1351, 0, 0, 1326, 1327, 1333, 1332, 1328,
	1354, 0, 1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321,
	1322, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 1338, 1339, 1340, 0, 0, 0, 1336,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 1313, 0, 1345, 1346, 1347, 1355, 1356, 1357,
	0, 0, 1353, 0, 0, 0, 1352, 1362, 0, 1348,
	1342, 1343, 1344, 0, 0, 0, 1315, 0, 0, 1361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1358, 1359, 0, 0, 0, 0, 0, 0, 1329,
	1330, 0, 0, 1314, 0, 0, 0, 0, 0, 0,
	0, 1334, 0, 1350, 0, 0, 0, 0, 1331, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1360, 0, 0, 0,
	1351, 0, 0, 1326, 1327, 1333, 1332, 1328, 1354, 1349,
	1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 1338, 1339, 1340, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 1352, 1362, 0, 0, 1342, 1343,
	1344, 0, 0, 0, 0, 1312, 1313, 0, 1345, 1346,
	1347, 1355, 1356, 1357, 0, 0, 1353, 0, 0, 1358,
	1359, 0, 0, 0, 0, 0, 0, 1329, 1330, 0,
	1315, 0, 0, 1361, 0, 0, 0, 0, 0, 0,
	0, 1350, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 1314, 0, 0,
	0, 0, 0, 0, 1360, 1334, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 0, 0, 1326, 1327, 1333,
	1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317, 1318,
	1319, 1321, 1322, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 1338, 1339, 1340, 0, 0,
	0, 1336, 0, 0, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 1313, 0, 1345, 1346, 1347, 1355,
	1356, 1357, 0, 0, 1353, 0, 0, 0, 1352, 1362,
	0, 0, 1342, 1343, 1344, 0, 0, 0, 1315, 0,
	0, 1361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1358, 1359, 0, 0, 0, 0, 0,
	0, 1329, 1330, 0, 0, 1314, 0, 0, 0, 0,
	0, 0, 0, 1334, 0, 1350, 0, 0, 0, 0,
	1331, 0, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1360, 0,
	0, 0, 1351, 0, 0, 1326, 1327, 1333, 1332, 1328,
	1354, 0, 1325, 1323, 1324, 1316, 1317, 1318, 1319, 1321,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 1645, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 1352, 1362, 0, 0,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1353, 0,
	0, 0, 1657, 1639, 1646, 1629, 1667, 1666, 0, 1329,
	1330, 1631, 1630, 0, 0, 0, 0, 0, 0, 1677,
	1678, 0, 0, 1350, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1668, 0,
	1664, 1663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1662, 0, 0, 0, 0, 1351, 0, 0, 1326,
	1327, 1333, 1332, 1328, 1354, 0, 1325, 1323, 1324, 1316,
	1317, 1318, 1319, 1321, 1322, 0, 1341, 0, 0, 1661,
	1659, 1660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 662, 0, 692, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1641,
	0, 0, 0, 0, 0, 0, 1353, 0, 669, 0,
	1650, 1644, 1652, 1654, 1655, 1656, 1651, 0, 1649, 0,
	667, 0, 0, 0, 0, 0, 0, 1673, 1674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 670,
	0, 0, 0, 697, 0, 0, 0, 1633, 0, 676,
	677, 0, 0, 0, 687, 0, 0, 0, 0, 1665,
	0, 0, 0, 1642, 1643, 0, 0, 693, 671, 0,
	0, 0, 0, 0, 1351, 0, 0, 1326, 1327, 1333,
	1332, 1328, 1354, 0, 1325, 1323, 1324, 1316, 1317, 1318,
	1319, 1321, 1322, 691, 0, 0, 0, 1658, 0, 0,
	0, 1626, 1624, 1625, 1628, 1627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 1634, 1635, 1637, 1638, 0, 0,
	0, 0, 0, 0, 673, 674, 0, 0, 1653, 1636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1676,
	0, 0, 0, 0, 0, 0, 680, 0, 0, 0,
	0, 0, 0, 675, 0, 0, 1632, 0, 1669, 1670,
	1671, 1672, 0, 0, 0, 0, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 1640, 0, 0, 0, 0, 1647, 1675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 684, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 682, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 683,
	0, 0, 0, 698, 699, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 688,
}
var sqlPact = [...]int{

	266, -1000, -22, -1000, -1000, -1000, 223, -1000, -1000, -1000,
	-1000, 222, 221, 220, -1000, 219, 217, 214, 211, 208,
	207, 205, 202, 201, 199, 196, 195, -1000, -1000, 193,
	-1000, -1000, -1000, -1000, 190, 189, 187, -1000, 186, 2109,
	32259, 182, 176, 174, 2080, 50123, 1524, 170, 167, -1000,
	163, 1607, 38073, 1192, 1657, -1000, 161, 158, 1850, 49739,
	454, 1934, 34959, 37683, 1975, 49349, 31869, 1941, 34569, 48959,
	-1000, -1000, 991, -1000, -1000, 48569, 131, 129, 121, 120,
	110, -1000, 107, 48179, 98, 96, 94, 91, 84, 81,
	-1000, 80, 78, 77, 76, 75, 74, 73, 71, 70,
	69, 62, 61, 60, 56, 54, 52, -1000, 60983, 50,
	49, 48, -1000, 1271, 47, 44, 39, 36, 35, -1000,
	-1000, -1000, 34, 33, 32, 31, -1000, 28, 27, 371,
	26, 25, 24, 23, 19, -1000, 1058, 590, 1904, 13198,
	1206, 1171, 1170, 1169, 1178, 745, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52811, 50123, 18, -36,
	17, -1000, 2329, 811, 23599, 266, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37293, 36903,
	36513, 30309, 47789, 47399, 10292, 10292, 902, -1000, -1000, -1000,
	-1000, -1000, -24, 33411, 50123, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 279, -1000, -1000, -1000, -1000, -1000, -1000, 19960, 534,
	19533, 270, 19106, 242, 420, -1000, -1000, -1000, 276, -1000,
	-1000, -1000, -1000, 1209, -1000, -1000, -1000, -1000, 47009, 46619,
	2065, 46229, 29909, 29509, 45839, 50123, 50123, 1747, 45449, -1000,
	-1000, 45059, -1000, -1000, 2134, 1919, 1917, 36123, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44675, 44285, 43895,
	43505, 43115, 29109, 28709, 594, -1000, -1000, -1000, -1000, 25156,
	592, -1000, -1000, -1000, -1000, -1000, 16, -1000, 13, 11,
	-1000, 10, 9, 7, 5, 3, 2, -1, -2, -1000,
	-6, -8, -1000, -11, -12, -1000, -15, -17, 1455, 2589,
	1479, 42725, 963, 50123, -1000, 1519, 12, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 25959, 50123, -1000, -1000, 20373, 489,
	-1000, 591, -1000, 1967, -1000, 20373, 489, -1000, 1518, 162,
	1431, -1000, -1000, -1000, 1287, 1028, -1000, -1000, 50123, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2641, 1310, 589, 42335,
	-1000, 1682, -1000, 703, 14024, -1000, 892, -1000, 14024, 275,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1654, 1151, 2547, 28309, 1417, 2341,
	2089, 2639, 1721, 2082, 2071, 2066, 2059, 2053, 2634, 1123,
	2633, 1177, 2632, 2048, 2045, 2621, 1380, 35733, 2630, 2628,
	2009, 1944, -1000, -1000, -1000, -1000, 1055, -1000, -1000, -1000,
	-1000, -1000, -1000, 39229, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1058, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1642, 2366, 2366, 2366,
	2364, 391, 387, -1000, 371, -1000, 1674, -1000, 1290, -1000,
	-1000, -1000, 60242, -1000, -1000, 20373, 20373, 20373, 20373, 20373,
	1293, -1000, -1000, -1000, 613, -1000, 587, 537, -1000, -1000,
	-1000, -1000, -1000, -1000, 583, 2586, -1000, 809, -1000, -1000,
	-1000, -1000, 2482, -1000, 11518, -1000, -1000, -1000, 409, 20373,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 274, 699, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 520, 1225, 518, 518, 518, -1000, -1000, 747,
	-1000, -1000, -1000, 655, -1000, 653, -1000, -1000, -1000, 2060,
	580, 578, -1000, 577, 576, 572, -1000, -1000, -1000, 567,
	566, 565, 564, 562, 560, 558, 555, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 746, -1000, -1000, -1000, 554,
	553, 552, 549, 546, 544, 543, 542, 541, 1388, -1000,
	-1000, 1388, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 901,
	52043, -1000, -1000, -1000, -25, 50123, -1000, 420, -25, -1000,
	-1000, 540, -1000, 14437, 14437, 14437, -1000, -1000, 1517, 20373,
	-1000, 1603, -1000, 683, -241, 646, 24766, -1000, 22819, 646,
	619, 27905, -1000, 1942, -1000, -1000, 539, 273, -1000, -1000,
	-1000, -1000, -1000, -1000, 2041, 2207, 1175, -1000, 1160, 2206,
	-1000, 1733, 2205, 1143, -1000, -1000, 725, 2203, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1272, -1000,
	-1000, 1390, 2199, -190, 2091, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1543, -1000, 30707, 33411, -27, -1000, -1000, -113, -1000,
	9894, 60242, -1000, -1000, -1000, 60242, 710, -1000, -1000, 2195,
	-1000, 60242, 698, -1000, -1000, 2188, -1000, 1940, 50123, 10292,
	50123, 50123, -1000, 538, 1621, 1516, -1000, -1000, 41945, 1733,
	1617, -1000, -1000, 714, 1615, -1000, -1000, 1590, -1000, 420,
	-1000, -1000, 803, -1000, 2627, 41561, 1760, 714, 1587, -1000,
	-1000, -1000, 39229, -1000, 50123, -1000, 50123, -1000, 990, -1000,
	52427, 138, 2187, -1000, -1000, 138, 2178, -1000, 138, 2177,
	-1000, 133, 2176, -1000, -1000, 1461, 2173, -1000, -140, 2169,
	-1000, -1000, -140, 2161, -1000, -1000, 20373, -42, -1000, -1000,
	-1000, 811, 31479, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41171, 30707, 33027, 50123, 35343, 30707, 684, 622, 60242, -1000,
	2429, 60832, 30707, 60242, -1000, 33027, 50123, 2057, -1000, 40781,
	40391, 2312, 702, -1000, -1000, 50123, -1000, 20373, -1000, 2427,
	1659, -41, -1000, -1000, -1000, -1000, -1000, 1671, 1653, 810,
	1618, -1000, 14024, 14024, 2259, -1000, 269, 10292, -1000, -1000,
	933, 1698, -1000, -1000, -1000, -1000, 30707, 30707, -1000, 40001,
	-1000, -1000, -1000, 1288, 50123, -1000, -1000, 2049, -1000, 32643,
	50123, -1000, 50123, -1000, 50123, -1000, 50123, -1000, 50123, -1000,
	-1000, -1000, -1000, -1000, 2117, 1186, 1157, -1000, 50123, -1000,
	50123, -1000, -1000, -1000, 1669, -1000, -1000, -1000, -1000, 50123,
	-1000, -1000, -1000, -1000, -1000, -1000, 1113, -1000, 932, -1000,
	-1000, 145, -1000, -1000, 1642, -1000, 1532, 1738, 18679, 1735,
	20373, 371, -1000, -1000, 371, 371, 12771, -1000, -1000, -1000,
	50123, -1000, 60832, 60832, 10292, 910, 20373, 20373, 20373, 20373,
	20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373,
	20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373,
	20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373, 20373,
	20373, 1631, 20373, 900, 20373, 20373, 20373, 20373, 2148, -1000,
	-1000, 1348, 462, 1362, -1000, 2514, 2514, 2514, 60544, 60544,
	497, 613, -1000, 20373, -1000, 489, 20373, 6419, -1000, 2558,
	999, -1000, -1000, 387, 54017, 1633, -1000, 384, 10692, -1000,
	-1000, -1000, 11518, 537, 18252, 740, 60242, 9496, 1951, 1819,
	-1000, 2556, -1000, -1000, 2482, -1000, -1000, -1000, 909, 908,
	907, 867, 536, 696, 694, 680, 437, 407, 20373, 20373,
	20373, 20373, 20373, 20373, 20373, 20373, -1000, 17839, 17412, 16985,
	16558, 16131, 21612, 15704, 20373, 11931, -1000, -41, -1000, 52043,
	-1000, 50123, -25, 2424, 20373, 154, -1000, 58919, -1000, 154,
	154, 535, -52, 60242, 1710, 1707, 23988, 1667, 1336, 1336,
	1336, -1000, 529, 606, 646, 7091, 38457, 1359, 646, 646,
	104, 259, 383, 22430, 1603, 38457, -1000, -1000, 50123, 528,
	6419, 10292, -34, 1127, -1000, 34179, 2340, 2334, 2271, 989,
	-1000, 949, 2363, 39229, 2390, 236, 2301, 1933, -1000, -1000,
	896, 39229, 1733, -1000, 60832, -1000, 1811, 2361, 1065, 1039,
	1065, 1065, 1069, -1000, 39229, 884, 1241, 30707, 2294, 882,
	-35, 2381, 175, 2291, 1930, 879, -1000, -1000, 50123, 10292,
	2288, 930, 644, -27, 33411, 50123, 255, -1000, 20373, 489,
	20373, 489, 946, -59, 250, 1723, 1716, 104, -1000, 33795,
	2420, 2157, 50123, 1729, -32, 50123, -1000, -1000, 1733, 2154,
	-1000, 1239, -1000, 2147, 2140, 2409, 575, 2626, -1000, 1515,
	1586, -1000, -1000, -1000, 51659, 920, 2131, 731, 370, 2403,
	370, 27127, -1000, 50123, -1000, 50123, -1000, -1000, 50123, -1000,
	50123, -1000, 50123, -1000, 50123, 50123, -1000, 50123, 30707, 30707,
	30707, -60, 660, 31479, -61, 684, 876, -43, -1000, 382,
	-1000, 39617, 50123, 769, 33795, 4906, -66, -1000, 845, -1000,
	-1000, -1000, -1000, 263, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 743, 526, 523, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 520, 1225, 518, 518, 518, -1000, -1000, -1000, 655,
	-1000, 653, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -210,
	1913, -113, 35343, 644, -1000, 644, -1000, 2042, -1000, 2304,
	678, -67, 797, -41, -1000, 1388, -1000, 1381, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2571, -1000, 2529, -1000, -1000, 2537, -28, -1000, -28,
	-1000, 10292, -1000, 50123, 2029, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 50123, -1000, 50123, -1000, -1000, -1000, -1000,
	-1000, -1000, 1056, -1000, 2022, -1000, 2001, -1000, 246, -1000,
	-1000, -1000, 50123, 50123, 50123, -1000, 39229, -1000, -1000, -1000,
	-1000, 60242, -1000, 414, -1000, -1000, 60242, 1189, 1737, -1000,
	1737, -29, -1000, 58847, 1697, 50123, -1000, -1000, -1000, -1000,
	-1000, -1000, 701, 998, 998, 945, 945, 945, 945, 2485,
	436, 3425, 5646, 5350, 5350, 5350, 5350, 5350, 5350, 5350,
	5350, 5587, 1106, 1106, 5587, 5587, 5587, 5587, 5587, 1106,
	1106, 1106, 5350, 5350, 5350, 60544, 60380, 5712, 20373, 20373,
	872, 1252, 462, 5564, 20373, 5858, 5858, 5858, 5858, -1000,
	2935, -1000, -1000, -1000, -1000, 1908, 517, 21612, 21612, -1000,
	-1000, -1000, -1000, 11105, 20373, -1000, -1000, -1000, -1000, 15277,
	-1000, 58125, -252, 380, -151, -18, -1000, 20373, 20373, 20373,
	379, -1000, 375, -1000, 870, -1000, 860, 850, 842, -1000,
	516, 244, 20373, 50123, -1000, 55473, 603, -80, -1000, 1018,
	-1000, 20373, 241, -1000, 1322, 512, 510, 372, -68, 700,
	693, 692, 687, 20373, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 60078, 55181, 55109, 54817, 53658, 54745,
	54453, -74, 367, -1000, 1901, -151, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 366, -1000, -75, -1000, -81, -1000, 365,
	-1000, 59940, -151, 364, 453, -1000, 21612, 21612, 21612, -1000,
	363, -1000, 58555, -1000, 59648, 14864, 14864, 14864, 362, 59576,
	20373, -151, -1000, -1000, 509, -83, 731, 14437, 23209, 10292,
	-1000, 731, 731, 20373, -1000, 20373, 23988, 23988, 3279, 1705,
	23988, -1000, -1000, -1000, -1000, 38457, 521, 646, 38457, -1000,
	2482, 1715, -1000, -1000, -1000, 50123, 420, -1000, 38457, 38457,
	10292, 646, -1000, 361, 26348, -18, 232, 1754, 50123, 50123,
	50123, -1000, -1000, 1584, 51275, 1583, 60832, 50123, -1000, -1000,
	507, 506, 1695, 1690, 50123, 50123, 50891, 50507, 50123, 1433,
	20373, 1492, 1386, 489, -1000, 489, 671, 503, 50123, 1126,
	-1000, -1000, -1000, -1000, -1000, 50123, -1000, -1000, 2527, -1000,
	1065, -1000, -1000, -1000, 1065, 1733, 1112, 50123, 30707, 720,
	668, 50123, 1254, 489, -1000, 489, 661, 502, 10292, 1258,
	-1000, 659, 50123, 1781, -1000, 1540, -1000, -1000, 9098, 60242,
	-1000, 60242, -1000, -1000, -1000, 10292, 1793, 1793, 359, -30,
	-1000, -1000, -1000, -1000, -1000, -1000, 1759, 50123, 563, 50123,
	489, 50123, 103, 684, 30707, 50123, -32, 50123, 30707, 30707,
	30707, 489, 2623, 501, 2614, -1000, 50123, 2129, 1503, 1582,
	2213, 632, 50123, 1403, 20373, 1263, -1000, 26738, 760, 50123,
	1096, 102, -1000, -1000, -1000, 1, 50123, -1000, -1000, 138,
	138, 138, -1000, 133, 1461, -1000, -140, -140, -1000, -1000,
	-1000, 660, 1892, 50123, 2461, 684, -33, 500, -1000, 637,
	635, 25560, 30707, -88, -1000, 772, 863, 856, -1000, 60832,
	-1000, 611, 853, -1000, 2515, 499, -1000, 2482, 2482, -1000,
	684, 50123, 66, -1000, 718, 1527, -1000, 14024, 14024, -1000,
	1388, -1000, -1000, 1088, -1000, 1196, -1000, -1000, -1000, -1000,
	14024, -1000, -1000, 927, -113, -113, -1000, 1000, 996, 50123,
	-1000, -1000, -1000, -1000, 1189, -1000, 20373, -1000, -1000, -1000,
	12771, -1000, -1000, -1000, 50123, -220, 20373, 20373, 5226, 4985,
	20373, 21612, 21612, -1000, 20373, 4473, -1000, -1000, -1000, -1000,
	-1000, 1890, 498, 20373, 60832, 4828, 4418, -1000, 357, 54381,
	5587, -1000, 20373, -1000, 355, 13611, -1000, 59211, -51, -51,
	-1000, 2563, 1637, 1344, 1185, 1008, 2494, 8700, -151, -89,
	-1000, -1000, 610, 2138, -1000, 20373, 59283, 8302, -1000, 27516,
	735, 1403, -1000, -1000, 2482, -1000, -1000, -1000, -1000, 58053,
	60832, 60832, 20373, 20373, -1000, 20373, 20373, 20373, -1000, -1000,
	20373, -1000, -1000, -1000, -1000, 1882, 20373, -1000, 60832, 60832,
	21612, 21612, 21612, 21612, 21612, 21612, 21612, 21612, 21612, 21612,
	21612, 21612, 21612, 21612, 21612, 21612, 21612, 21612, 21612, 1677,
	21612, 2506, 2506, 2506, -1000, 1853, 1882, 20373, 20373, 60832,
	350, 347, 346, -1000, 20373, -151, 4906, -1000, 1806, -1000,
	-150, -1000, 1603, -1000, -1000, 1806, 1806, -90, 60242, -1000,
	3279, -1000, 494, 20373, 23988, -1000, 601, -1000, -100, -1000,
	38457, -1000, 600, -249, -1000, 634, -1000, 420, -1000, -1000,
	-1000, 230, 38457, -1000, -101, -1000, 2401, 344, 10292, -1000,
	-1000, 838, 834, -1000, 2125, -1000, 1580, -1000, 764, -1000,
	1104, 20373, 24377, 488, 487, 1298, -1000, 2123, 1461, 2114,
	1461, -1000, -1000, 707, -1000, 60242, 486, 484, -1000, -34,
	1114, -1000, -1000, 20373, 20373, -1000, 831, -1000, -1000, -1000,
	1733, 829, -1000, -1000, 1233, 20373, -1000, -1000, -1000, -1000,
	20373, 20373, -1000, -35, 818, 20373, 2068, 684, 1857, 935,
	-1000, -1000, -1000, -1000, -1000, -1000, 1751, 33795, 50123, 483,
	50123, 481, -1000, -1000, 480, 50123, -1000, -1000, -1000, 1733,
	-1000, 714, -1000, -1000, -1000, 2613, -1000, 768, 10292, 50123,
	2108, 1665, 632, 31095, -1000, 714, 1738, -1000, 60242, -1000,
	1096, 12344, 2277, -102, -1000, 227, -1000, -1000, -1000, 731,
	27127, 23988, 20373, 2605, -103, -1000, -1000, -1000, -1000, -1000,
	-1000, 489, -113, 1428, -1000, 38845, 38845, 30707, 30707, 30707,
	684, 50123, 50123, -1000, 2487, -1000, 598, 343, 2482, 341,
	336, -1000, -113, 50123, -1000, 1423, 10292, 50123, 50123, 10292,
	50123, -1000, -1000, -41, -1000, -1000, -1000, -1000, 50123, -1000,
	-1000, -1000, 1448, 57695, -1000, 2303, 10292, 2531, 5858, 20373,
	20373, 3316, 3972, 3689, 5858, 20373, 20373, 60832, 60682, -110,
	20373, 20373, -1000, 20373, 597, 60242, 2488, 20373, 334, 333,
	327, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 321,
	-1000, -1000, -1000, -1000, -1000, 60242, 20373, 226, -1000, -1000,
	-1000, 53195, -1000, 20373, 319, 315, -1000, 314, 313, 54089,
	53586, 57623, 57265, 57193, 60242, 1853, 60242, -1000, -1000, 663,
	663, 1019, 1019, 1019, 1019, 2506, 1420, 1623, 406, 309,
	309, 309, 799, 986, 986, 309, 309, 309, 1852, 1676,
	473, 5116, -1000, -1000, 60242, 60242, 311, -1000, -1000, -1000,
	-151, 307, 1792, 2358, -1000, 23988, 1792, 1792, -1000, -1000,
	50123, 60242, -1000, -241, -1000, 2482, -1000, -1000, 1715, -1000,
	7502, -1000, 10292, -1000, -1000, 26348, -1000, 472, -1000, 67,
	50123, 50123, 50123, 2107, -1000, 2392, -1000, 56835, -112, -1000,
	2331, 2331, 20373, 104, 24377, 50123, -1000, 1413, 1762, 786,
	50123, -1000, 50123, -1000, -1000, 50123, 50123, 50123, 50123, 50123,
	60242, -115, 50123, 50123, 30707, 60242, 60242, -117, 10292, 60242,
	2282, -1000, 30707, 814, 1254, 1772, -1000, 471, 24377, 470,
	50123, 33795, 2398, -1000, -1000, -1000, -1000, 469, 1962, 1489,
	467, 10292, 1684, 632, 31095, -1000, 920, 1096, -1000, -1000,
	-47, -1000, 490, 489, 50123, 2603, 1403, -1000, -54, 60242,
	-1000, 633, -1000, -1000, -1000, -120, -1000, -1000, 305, -1000,
	2247, 2246, 596, -1000, -1000, 294, -1000, -1000, -113, 1399,
	-1000, -1000, 1259, 1537, -1000, -1000, -1000, -1000, -1000, 2303,
	5858, 5858, 20373, 20373, 20373, 5858, 60682, -123, -1000, 5858,
	5858, -151, -1000, -1000, 59211, -1000, -1000, -1000, -1000, 60242,
	7904, 1303, -1000, 56763, -1000, -1000, -1000, -1000, 20373, 20373,
	-1000, -1000, -1000, -1000, -1000, 21612, 1838, 464, 60832, -1000,
	-1000, 717, 20373, 20373, 1603, 717, 717, -128, 646, -1000,
	-1000, -1000, 2482, 67, -1000, 2595, 10292, -1000, -1000, -1000,
	50123, -1000, 50123, -1000, 10292, 50123, 1859, 1570, -1000, -1000,
	1686, 463, 21612, 50123, 716, -1000, 1205, 24377, 2303, 10292,
	2303, 56405, -129, -131, 1568, -1000, -1000, 1567, 20373, -1000,
	60832, 1461, 1461, -134, -139, -1000, 817, 816, 808, -1000,
	-1000, -1000, 806, -1000, 658, -140, 20373, -1000, -1000, 1306,
	24377, -149, 24377, -155, 292, 489, 24377, -1000, -1000, 50123,
	24377, 1483, -1000, 632, 31095, -1000, 2213, -1000, 2225, 50123,
	2268, -1000, -1000, -1000, 1738, 462, -1000, 684, 461, 459,
	-1000, -1000, -141, -1000, 688, 686, -1000, -1000, -1000, 10292,
	925, -1000, 5858, 5858, 5858, -1000, 285, -1000, -1000, 1403,
	2355, -1000, 56333, 55975, 5133, 21612, 60832, -156, -1000, 50123,
	60242, -151, -1000, -1000, -1000, 38457, 522, -1000, -1000, 3004,
	-1000, -1000, -1000, 50123, 1578, -1000, -1000, 20373, 5116, 458,
	20373, -1000, 1751, 457, -1000, -1000, -1000, -1000, -1000, -1000,
	2331, -1000, 1184, -1000, -1000, 60242, 2319, -1000, -1000, 456,
	452, 50123, 50123, 451, 440, 20373, 60242, 50123, -158, 1205,
	-161, -1000, 1751, -1000, -163, 768, -164, 50123, 31095, -1000,
	1665, 929, -166, 50123, 1096, -1000, -1000, 30707, 30707, 1399,
	-1000, 50123, -1000, 50123, -1000, 50123, -1000, 1501, 20373, -1000,
	-1000, 5133, -172, -1000, -148, -1000, 2397, -1000, -1000, -1000,
	-1000, 2096, 55903, 1644, 50123, 55545, 1254, 50123, 2303, 50123,
	767, 10292, 1259, 1259, -1000, -1000, 20373, 20373, 60242, 439,
	-1000, 1751, 1205, 1254, 1205, 424, 1205, 422, -1000, 1684,
	985, -1000, 731, -1000, -1000, -180, -183, -1000, -186, -188,
	-1000, 281, 21199, 21199, 21199, -151, -1000, 50123, 421, 2055,
	-1000, 1467, 1240, 260, 796, -1000, -193, -1000, 420, -1000,
	20373, -1000, -194, -1000, 759, -196, -1000, 754, -201, -202,
	50123, 1254, 1751, -1000, 1751, 24377, 1751, 24377, -1000, 27127,
	-1000, 684, 684, -1000, -1000, -1000, -1000, -1000, 22025, 1437,
	1080, 58483, -1000, -1000, -1000, -1000, 50123, -1000, 1470, 1468,
	1052, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1644, 60242,
	-1000, 1259, 1767, -1000, 1259, 1836, -1000, -1000, -207, -1000,
	1254, 1254, -208, 1254, -209, -203, -1000, -1000, 2455, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2235, -1000, 777, 1694,
	1694, 1467, -1000, 418, -1000, 416, 1451, -1000, -1000, 1205,
	-1000, 1205, -1000, 20786, -1000, 2466, -1000, -1000, 1691, -1000,
	-1000, 20373, 20373, -1000, -1000, -1000, 1751, 1751, -1000, -1000,
	-1000, -1000, -216, -217, 1254, 1254, 1254, 801, -1000, -1000,
	-1000, 404, 20373, -233, 1254, -1000,
}
var sqlPgo = [...]int{

	0, 3157, 3155, 1974, 3148, 2638, 3147, 3144, 3142, 3140,
	3138, 2621, 3136, 3134, 3128, 3126, 3124, 3122, 3117, 3116,
	3115, 3113, 3109, 3101, 3100, 3098, 3097, 3095, 3094, 3092,
	3090, 3089, 3081, 3080, 2619, 3078, 2617, 3077, 3074, 3072,
	3068, 3065, 3063, 3060, 3058, 26, 3057, 3056, 3051, 3044,
	3043, 2504, 3042, 3038, 2481, 3034, 3033, 2466, 3032, 3029,
	2464, 3028, 2422, 3027, 3025, 2420, 3023, 3021, 2413, 3017,
	2389, 3016, 3015, 2370, 3012, 92, 103, 3010, 2335, 3007,
	3006, 2327, 2310, 2302, 3005, 2300, 3002, 3001, 2188, 2141,
	2999, 3400, 2996, 2988, 2986, 2985, 2093, 2079, 2980, 2975,
	2974, 187, 2973, 2044, 2971, 2966, 2962, 2961, 2959, 2958,
	2955, 2954, 2953, 2951, 2948, 2945, 2943, 2942, 2940, 2939,
	2938, 2937, 2935, 2933, 2929, 2927, 2924, 2921, 172, 108,
	2920, 2917, 2025, 1938, 2915, 2914, 74, 68, 23, 73,
	114, 163, 4195, 155, 2913, 2912, 2909, 2908, 2907, 24,
	112, 117, 109, 122, 478, 2906, 2897, 59, 39, 28,
	21, 78, 2896, 2894, 2893, 2062, 87, 2890, 2889, 178,
	150, 2887, 433, 2886, 32, 83, 98, 93, 731, 47,
	2880, 96, 12, 2878, 116, 157, 2872, 72, 30, 31,
	3380, 57, 175, 54, 49, 193, 184, 142, 139, 113,
	900, 2869, 164, 52, 137, 2865, 2864, 2862, 48, 130,
	8, 2, 125, 7, 2856, 15, 2855, 10, 2848, 2844,
	2840, 2839, 20, 111, 42, 44, 2838, 25, 177, 126,
	2836, 152, 2835, 95, 2832, 166, 140, 138, 18, 149,
	2831, 2827, 2825, 2823, 2822, 79, 13, 65, 2821, 2820,
	99, 158, 2819, 38, 115, 81, 94, 173, 146, 88,
	147, 151, 2818, 2817, 2816, 124, 2815, 132, 104, 2813,
	2812, 29, 55, 154, 37, 2809, 2808, 110, 2806, 135,
	2802, 2800, 2799, 174, 153, 121, 4, 51, 85, 9,
	148, 105, 62, 61, 2790, 1, 1643, 1934, 2783, 91,
	50, 33, 71, 100, 156, 56, 2782, 2781, 1910, 2779,
	2778, 2775, 2769, 123, 2768, 2764, 2763, 90, 34, 82,
	2758, 107, 45, 282, 171, 40, 145, 131, 165, 119,
	2756, 127, 106, 2751, 136, 207, 159, 2747, 1414, 2743,
	128, 2742, 2741, 2740, 2739, 473, 2738, 2737, 552, 2734,
	97, 2733, 2726, 134, 129, 275, 118, 161, 160, 1483,
	2725, 133, 27, 2723, 3112, 36, 0, 3311, 3211, 2717,
	144, 80, 2715, 2707, 2702, 2695, 35, 11, 6, 5,
	19, 16, 374, 238, 2694, 2690, 86, 77, 101, 2688,
	170, 143, 2687, 2682, 2679, 75, 2678, 17, 2677, 14,
	2676, 2675, 22, 3, 2674, 2669, 188, 2668, 2667, 2666,
	2665, 2408, 2664, 169, 2662, 2659, 89, 2655, 2654, 2653,
	2652, 2139, 2650, 2649, 43, 58, 2648, 2647, 120,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 413, 413,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 412, 412, 153, 153, 152, 148,
	148, 415, 415, 154, 154, 154, 156, 156, 34, 34,
	89, 89, 89, 139, 82, 82, 82, 82, 82, 82,
	82, 77, 77, 364, 364, 365, 365, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 129, 129, 49, 49, 49, 49,
	49, 49, 49, 49, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 60,
	60, 50, 408, 408, 236, 236, 333, 333, 62, 62,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 237, 237, 73, 73, 73, 73, 73,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 76, 76, 76, 76,
	76, 76, 76, 76, 335, 335, 74, 74, 306, 306,
	78, 78, 266, 266, 79, 79, 79, 79, 79, 80,
	80, 80, 80, 90, 90, 90, 90, 411, 411, 229,
	229, 169, 169, 169, 169, 85, 85, 85, 85, 86,
	86, 86, 87, 87, 134, 134, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 40, 40, 40, 41,
	41, 42, 42, 43, 43, 44, 44, 45, 45, 45,
	45, 45, 97, 97, 97, 99, 96, 96, 96, 98,
	98, 98, 98, 100, 100, 101, 101, 101, 101, 101,
	101, 102, 102, 358, 358, 244, 244, 356, 356, 357,
	357, 206, 206, 206, 206, 206, 207, 207, 207, 363,
	363, 363, 363, 363, 363, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 119, 119, 119, 128, 128, 128, 128, 128,
	128, 128, 121, 121, 121, 112, 112, 104, 104, 104,
	104, 108, 108, 108, 108, 108, 105, 105, 109, 109,
	111, 111, 113, 113, 113, 113, 113, 113, 106, 106,
	106, 106, 115, 115, 115, 115, 114, 114, 124, 124,
	124, 124, 124, 124, 320, 320, 120, 120, 120, 120,
	123, 123, 123, 123, 118, 118, 118, 122, 122, 125,
	125, 125, 125, 107, 107, 107, 418, 418, 418, 126,
	126, 117, 117, 127, 127, 127, 127, 127, 127, 127,
	116, 116, 116, 414, 414, 110, 409, 409, 406, 406,
	406, 406, 406, 406, 406, 407, 407, 410, 410, 83,
	83, 83, 55, 55, 56, 56, 208, 208, 209, 209,
	288, 288, 288, 288, 210, 210, 155, 155, 155, 213,
	214, 214, 211, 211, 212, 212, 212, 216, 216, 215,
	218, 218, 217, 287, 374, 374, 375, 375, 375, 375,
	375, 375, 375, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 372, 372, 372, 373, 370, 370, 371,
	371, 371, 371, 419, 419, 286, 286, 222, 222, 377,
	377, 377, 377, 378, 378, 378, 378, 378, 381, 380,
	379, 379, 379, 379, 379, 316, 316, 316, 59, 59,
	59, 255, 255, 254, 254, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 131,
	131, 57, 57, 57, 161, 161, 54, 54, 54, 58,
	58, 61, 61, 61, 61, 61, 61, 53, 53, 53,
	53, 53, 271, 271, 271, 270, 270, 227, 227, 322,
	322, 322, 173, 173, 174, 174, 149, 149, 149, 21,
	23, 23, 16, 16, 16, 16, 16, 16, 31, 31,
	32, 32, 27, 27, 416, 416, 417, 417, 84, 84,
	88, 88, 88, 94, 94, 130, 130, 130, 130, 130,
	130, 130, 35, 35, 35, 35, 47, 47, 47, 47,
	92, 422, 422, 422, 93, 93, 421, 421, 168, 168,
	168, 168, 170, 170, 283, 283, 284, 284, 423, 423,
	285, 285, 285, 163, 162, 164, 164, 52, 52, 52,
	157, 157, 158, 158, 159, 159, 160, 160, 424, 424,
	81, 81, 81, 133, 133, 202, 202, 279, 279, 279,
	223, 223, 179, 179, 282, 282, 280, 280, 280, 253,
	253, 253, 132, 132, 232, 232, 246, 246, 247, 247,
	330, 330, 248, 91, 91, 142, 142, 140, 140, 140,
	140, 140, 140, 141, 141, 141, 143, 143, 143, 143,
	143, 143, 143, 146, 146, 146, 146, 147, 147, 147,
	145, 145, 388, 388, 388, 390, 390, 391, 387, 387,
	389, 389, 420, 420, 257, 257, 257, 220, 221, 219,
	219, 425, 425, 225, 225, 224, 226, 226, 321, 321,
	321, 251, 251, 251, 251, 274, 274, 272, 272, 273,
	273, 275, 275, 276, 276, 276, 277, 277, 278, 278,
	250, 250, 302, 302, 144, 144, 144, 231, 231, 231,
	233, 233, 293, 293, 293, 294, 294, 292, 292, 292,
	292, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	324, 324, 234, 234, 325, 281, 281, 404, 404, 404,
	405, 405, 319, 319, 326, 326, 326, 326, 326, 326,
	317, 317, 318, 318, 331, 332, 332, 260, 260, 260,
	260, 258, 258, 259, 259, 327, 327, 327, 327, 252,
	252, 328, 328, 328, 289, 289, 336, 336, 336, 336,
	350, 230, 230, 230, 426, 426, 337, 337, 337, 337,
	337, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 340, 340, 340, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 349, 349, 349, 349, 349, 341,
	341, 346, 346, 347, 347, 347, 342, 343, 348, 348,
	348, 348, 427, 427, 352, 352, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 345, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	268, 268, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 297, 297,
	297, 297, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 382, 382, 382, 382,
	382, 382, 382, 382, 385, 385, 386, 386, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 392, 392, 393,
	393, 395, 395, 396, 396, 397, 398, 398, 398, 399,
	400, 400, 394, 394, 401, 401, 401, 401, 402, 402,
	403, 403, 403, 403, 403, 308, 308, 309, 309, 315,
	315, 315, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 171, 171,
	171, 171, 171, 242, 242, 240, 240, 240, 243, 243,
	241, 241, 239, 239, 238, 238, 305, 305, 303, 303,
	307, 307, 261, 261, 351, 351, 351, 351, 351, 351,
	351, 262, 262, 262, 269, 263, 263, 264, 264, 264,
	264, 264, 299, 300, 265, 265, 265, 301, 301, 310,
	314, 314, 313, 312, 312, 311, 311, 290, 290, 291,
	291, 249, 249, 428, 428, 245, 245, 329, 329, 329,
	329, 204, 204, 235, 235, 203, 203, 197, 197, 198,
	198, 198, 198, 228, 228, 353, 353, 353, 354, 355,
	304, 189, 188, 176, 177, 187, 186, 185, 175, 178,
	182, 183, 184, 180, 181, 193, 192, 191, 190, 334,
	199, 199, 200, 200, 200, 201, 201, 201, 201, 172,
	172, 194, 194, 195, 196, 196, 165, 165, 165, 166,
	166, 167, 167, 362, 362, 360, 360, 360, 361, 361,
	361, 361, 359, 359, 359, 359, 359, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 1, 2, 1, 2, 7,
	3, 6, 1, 2, 1, 3, 2, 0, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 6, 3,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 3, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	4, 7, 2, 6, 4, 7, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 3, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 6, 3, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 3, 1, 3, 2, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 5, 4,
	6, 4, 6, 4, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 3, 4, 3, 1, 1, 1, 2,
	3, 2, 3, 7, 7, 8, 10, 7, 4, 5,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 8, 11, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 4,
	7, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 7,
	3, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 6,
	3, 6, 7, 6, 5, 3, 4, 13, 16, 13,
	16, 4, 2, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 1, 2, 2, 2, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 26,
	37, -37, -38, -39, 52, 79, 67, -57, -54, -51,
	-60, 81, 101, -389, 105, -65, -68, -70, 110, 118,
	123, 124, 148, 158, 260, 267, 289, 291, 293, 302,
	-42, -41, 119, -140, -142, 287, -86, -87, -96, -97,
	-98, -99, -134, 320, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 323, -35,
	-47, -93, -92, 367, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -388,
	-66, -67, -69, -71, -72, -143, -141, 424, 288, 377,
	38, 332, 68, 113, 297, 21, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 395, 403, -146, -144,
	-145, -147, 309, 385, 345, 428, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 2, 345, 389,
	310, 378, 94, 171, 272, 258, -406, 2, 4, -368,
	-366, -198, -197, 345, 94, 31, 39, 40, 42, 45,
	57, 58, 59, 62, 98, 99, 117, 125, 126, 137,
	150, 152, 161, 162, 163, 178, 184, 186, 166, 207,
	236, 237, 250, 254, 264, 266, 275, 299, 326, 341,
	356, 357, 358, 364, 365, 385, 386, 387, 391, 398,
	21, 22, 23, 24, 26, 36, 37, 38, 41, 43,
	44, 47, 48, 49, 50, 51, 52, 53, 56, 61,
	66, 67, 68, 69, 70, 75, 72, 73, 74, 77,
	79, 80, 83, 84, 92, 93, 95, 96, 97, 101,
	103, 105, 108, 109, 110, 112, 114, 115, 118, 119,
	122, 120, 351, 353, 121, 123, 124, 134, 135, 136,
	138, 139, 141, 143, 147, 149, 153, 155, 156, 157,
	158, 159, 160, 172, 167, 173, 177, 180, 179, 181,
	182, 183, 174, 188, 191, 192, 193, 195, 196, 199,
	200, 201, 204, 203, 206, 209, 210, 213, 214, 217,
	219, 222, 223, 226, 224, 225, 228, 229, 231, 230,
	238, 239, 241, 242, 245, 246, 249, 252, 255, 256,
	257, 258, 259, 260, 261, 263, 265, 267, 269, 270,
	271, 272, 273, 274, 276, 277, 279, 280, 281, 282,
	283, 287, 285, 286, 288, 289, 290, 291, 293, 295,
	296, 297, 298, 300, 321, 322, 334, 302, 303, 304,
	305, 306, 307, 308, 312, 316, 313, 314, 315, 310,
	311, 317, 318, 320, 323, 325, 327, 328, 331, 332,
	333, 335, 338, 339, 340, 336, 337, 330, 343, 344,
	346, 347, 348, 349, 350, 352, 354, 359, 362, 363,
	367, 368, 370, 371, 374, 375, 376, 381, 377, 379,
	382, 383, 384, 390, 389, 396, 397, 399, 400, 401,
	-196, -165, 417, -195, 427, 427, 427, 2, 192, 193,
	271, 270, 317, 318, -190, -194, -195, -196, -165, 4,
	-366, -368, 94, 243, 427, 427, 427, 2, 345, 333,
	56, 310, 378, 295, 389, 368, 108, -270, 94, 373,
	-165, 267, 25, 2, 103, 177, 376, 375, 25, 263,
	311, 347, 349, 2, 427, 427, 2, 389, 310, 345,
	171, 94, 378, 295, -184, 2, -165, -76, 2, 424,
	28, -75, -5, -51, -60, -65, -78, -73, -11, -34,
	-36, -57, -54, -62, -68, -70, -82, -81, -83, -85,
	-89, -88, -91, -96, -97, -103, -132, -133, 81, 26,
	110, 320, 119, 187, 2, -411, -229, 2, 25, -169,
	-165, 81, 148, 309, -139, 345, 2, -165, 192, 193,
	2, -184, 2, -406, 2, 192, 193, 2, -411, -229,
	24, 2, -165, 2, 306, 323, -170, 2, 302, -165,
	427, 427, 427, 427, 427, 427, 214, 61, 299, 317,
	-101, 363, -100, 356, 304, -102, -358, 2, 226, -165,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 2, -128, 317, 333, 156, 37, 61, 25,
	66, 95, 149, 171, 172, 200, 76, 77, 270, 214,
	193, -320, 318, 346, 305, 343, 363, 81, 379, 296,
	-414, 120, 4, 94, 226, 319, 356, 70, 350, 351,
	427, 427, 427, -420, 2, 345, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, -141, -143, -142,
	427, 427, 427, 427, 427, -224, -225, 372, 185, 116,
	248, -140, -142, 2, -388, -128, 317, 2, 61, 25,
	-356, 2, -295, 243, -297, 415, 416, 410, 232, 402,
	-308, 100, 221, 220, -298, -310, 117, 299, -243, 8,
	9, 5, 6, 7, -172, -338, -304, -345, 366, 127,
	235, -201, 430, 10, 424, -385, -142, -309, 32, 54,
	-360, -200, -339, -347, -343, -344, -426, 43, 50, 49,
	354, 225, 312, 313, 327, 314, 315, 41, 381, 167,
	241, 242, 179, 4, 186, -199, -165, -382, -383, -366,
	-367, 178, 184, 180, 326, 181, 182, 183, 40, 275,
	138, 139, 137, 109, 99, 98, 237, 45, 44, 42,
	386, -348, 96, 356, 357, 358, 359, 195, 196, 64,
	86, 87, 85, 90, 89, 91, 88, 319, 378, 55,
	31, 161, 162, 166, 236, 163, 62, -384, 337, 82,
	128, 146, 176, 164, 189, 190, 194, 208, 211, 227,
	234, 251, 253, 294, 324, -427, 387, 57, 58, 125,
	126, 150, 207, 254, 264, 341, 364, 365, -421, 2,
	363, 363, 2, -421, 2, -421, 2, -168, 2, 363,
	360, -422, 363, 398, -390, 276, -391, -184, -390, 427,
	427, 429, 427, -219, -220, -221, 2, 25, 106, 424,
	2, -323, 2, 422, -327, -142, 202, -326, 424, -324,
	-190, 244, -386, 300, -382, -383, -172, -165, -200, 4,
	221, 220, -3, 2, -327, 161, -190, 2, -327, 161,
	2, -191, 161, -327, -194, 2, -364, 161, -362, 10,
	-361, 5, 4, -366, -368, -367, 64, 2, -175, -165,
	2, -203, 161, -190, -187, -359, 4, -366, -368, -367,
	-369, 25, 27, 28, 29, 30, 32, 33, 34, 35,
	46, 54, 55, 60, 63, 65, 76, 81, 85, 86,
	88, 87, 89, 90, 91, 100, 102, 104, 106, 107,
	111, 113, 116, 127, 129, 142, 144, 145, 148, 151,
	154, 165, 171, 175, 185, 187, 202, 205, 212, 215,
	216, 232, 233, 235, 240, 243, 244, 247, 248, 262,
	268, 278, 292, 309, 319, 329, 342, 345, 355, 360,
	361, 366, 372, 373, 378, 380, 388, 392, 393, 394,
	395, -188, -359, 360, 429, -235, -197, -198, -228, -165,
	426, -295, 2, -91, 2, -295, 161, 2, -91, 161,
	2, -295, 161, 2, -91, 161, 2, -222, 424, 426,
	345, 65, 2, -190, 161, -180, 2, -165, 142, -191,
	161, 2, -194, -364, 161, 2, -364, 161, 2, -193,
	2, -190, -192, -194, -192, 171, 188, -175, 161, 2,
	-165, 25, 145, 2, 187, 2, 187, 2, -328, 2,
	-327, -237, 161, 2, -190, -237, 161, 2, -237, 161,
	2, -204, 161, 2, -203, -175, 161, 2, -365, 161,
	2, -364, -365, 161, 2, -266, 424, -335, 2, -334,
	-361, 385, 424, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	317, -139, 243, 360, 429, 424, -364, -190, -295, -91,
	-306, 424, 145, -295, -91, 243, 145, 245, 2, 94,
	345, 401, 25, -165, 2, 321, 2, 424, -101, 59,
	363, -284, 2, -285, -162, -163, -164, 191, 269, 274,
	401, -356, 360, 407, 145, -356, -244, 426, -128, 2,
	142, 380, 2, 8, 2, -364, 273, 134, 2, 321,
	2, 270, 318, 61, 145, 2, 2, -409, 2, 243,
	145, 2, 145, 2, 145, 2, 145, 2, 145, 2,
	2, 270, 318, 2, 362, 201, 121, 2, 145, 2,
	145, 2, 5, 2, 191, 269, 334, 2, -190, -418,
	2, 345, 389, 310, 2, 2, 145, 2, 145, 401,
	2, -252, -327, -224, -225, -251, -272, -273, 212, 129,
	240, -257, 25, 106, -257, -257, 48, 425, 425, -128,
	321, 2, 11, 12, 63, 36, 415, 416, 417, 418,
	140, 419, 420, 413, 414, 412, 405, 406, 409, 197,
	198, 78, 408, 407, 71, 218, 301, 130, 131, 132,
	133, 284, 168, 169, 170, 14, 15, 16, 29, 247,
	211, 402, 164, 324, 410, 17, 18, 19, 189, 190,
	234, 39, 165, -171, -205, -295, -295, -295, -295, -295,
	253, -249, -290, 422, -142, 424, 424, 424, 5, 424,
	5, -355, 8, -142, -295, -308, 425, -241, 424, -142,
	-308, -303, 424, 299, 422, -311, -295, 426, -392, 396,
	-341, 424, 266, -340, 424, -340, -340, 390, 397, 403,
	397, 403, 142, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 390, 424, 424, 424,
	424, 424, 424, 424, 424, 424, -283, -284, -283, 360,
	-170, 429, -390, -222, 424, -245, -329, -295, 417, -245,
	-245, 243, -238, -295, 82, -260, 194, 227, 146, 208,
	294, 176, -355, -76, -292, 430, -319, 403, -142, -324,
	-165, -142, -326, 424, -323, -319, 417, -190, 424, 145,
	424, 426, -151, 285, -150, 23, 26, 110, 383, 122,
	-212, 173, 258, 117, 330, -413, 119, 303, 352, 353,
	285, 117, -254, -256, 33, 92, 229, 255, 51, 159,
	220, 221, 332, 391, 117, 285, 395, 117, 119, 285,
	-153, 330, -413, 119, 303, 285, -152, -212, 117, 430,
	119, 238, -364, -235, 429, 429, -359, 417, 117, 117,
	117, 117, 145, -228, -359, -190, -199, -165, -200, 424,
	-222, 232, 243, -408, -236, 345, -190, -255, -254, 232,
	-161, -387, 395, 232, 232, -222, 33, 424, 2, -177,
	161, 2, -166, -165, 171, -387, 232, -328, -202, -190,
	-202, 320, -184, 33, -154, 429, 53, 290, 117, -154,
	117, -154, 117, -154, 429, 117, -154, 117, 429, 117,
	117, -238, 425, 429, -335, -364, -406, -228, -169, -364,
	-138, 395, 145, 81, 424, 33, -305, -336, -337, -349,
	-338, -346, -342, -345, 280, 281, 279, 283, 282, 43,
	50, 49, 354, 225, 312, 313, 327, 314, 315, 41,
	381, 167, 241, 242, 179, 4, 42, 386, -348, 186,
	178, 184, 180, 326, 181, 182, 183, 40, 275, 138,
	139, 137, 109, 99, 98, 237, 45, 44, 96, 356,
	357, 358, 359, 195, 196, 387, 337, 57, 58, -365,
	-406, -228, 142, -175, 2, -190, 2, 72, 73, 401,
	-358, -238, 33, -284, 2, -423, 429, 210, -207, 217,
	231, 155, 244, 399, -363, 5, 4, -304, -316, 100,
	214, -345, 9, 416, -353, 8, 415, -357, -356, -357,
	84, 426, -359, 345, 195, -364, -364, -358, 25, 322,
	2, -190, -410, 142, -407, 295, -406, -190, -190, -190,
	-190, -190, 142, 2, 362, 2, 362, 2, -165, -165,
	210, -190, 345, 171, 345, -154, 429, -251, -273, -272,
	-275, -295, 25, -278, 136, 228, -295, -297, -141, -141,
	-141, -226, -321, -295, 268, 171, -358, -350, -336, -336,
	-189, -359, 356, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, 211, 164,
	324, 39, 165, -295, 360, -295, -295, -295, -295, 224,
	232, 235, 366, 127, 374, 106, 238, -428, 342, 35,
	-301, -142, -242, 424, -315, 30, 329, 25, -308, 424,
	-290, -295, -291, -239, -238, -238, 425, 388, 25, 106,
	417, 2, 8, -267, 400, 223, 97, 157, 222, -268,
	308, 425, 429, 33, 425, -295, -239, -307, -303, -314,
	-313, 392, -359, 417, -393, 135, 151, 8, -355, 356,
	356, 356, 356, 424, 425, 2, 425, 2, 425, 2,
	425, 2, 425, 2, -295, -295, -295, -295, -295, -295,
	-295, -238, -261, 2, -351, -238, 4, 400, 223, 97,
	157, 222, 308, -261, 2, -238, 2, -238, 2, -262,
	2, -295, -238, -263, -296, -297, 415, 416, 410, -308,
	-264, 2, -295, -239, -295, 46, 205, 361, -265, -295,
	145, -238, -170, -391, 33, -238, -231, 429, 145, 33,
	4, -231, -231, 424, 425, 429, 194, 194, -323, -260,
	194, -258, 251, -258, -258, -404, 424, 423, -319, -176,
	422, 431, -359, -318, -317, 33, -184, 249, -319, -319,
	426, 425, -318, -190, 424, -238, -359, 429, 360, -416,
	76, 65, -287, 161, 65, -370, -178, 76, -371, -165,
	60, 373, 268, 144, -416, 76, -416, 76, 76, 320,
	333, 48, -327, 36, -91, 206, 74, 145, 360, -327,
	-256, -336, 92, 220, 221, 48, -354, -353, 416, -354,
	48, -354, -354, -354, 395, -191, -327, 360, 259, -364,
	74, 360, 429, 36, -91, 206, 74, 145, 360, -203,
	-176, 74, 345, -332, -331, 404, -197, -165, 426, -295,
	-91, -295, -91, 335, 425, 426, 189, 189, -208, -209,
	-165, -288, -287, -372, -373, -370, 188, 171, 373, 128,
	33, 117, -228, -333, 187, 429, -236, 117, 259, 117,
	117, 33, 424, 114, 272, 2, 243, 232, -177, 161,
	-157, 348, 117, -289, 393, -279, -91, 424, 100, 33,
	-279, -246, -247, -330, -248, -178, 424, -184, -190, -237,
	-237, -237, -203, -204, -175, -364, -365, -365, 425, -76,
	-334, 425, -138, 360, 395, 425, -137, 246, -136, -165,
	5, -139, 380, -209, -75, 26, 81, 110, 425, 429,
	-230, 32, 422, -267, 424, -352, 390, 424, 424, -138,
	-331, 145, -229, -332, -332, 142, 73, 407, 360, 425,
	363, -285, -206, 274, 328, 286, 316, 9, 8, 8,
	429, -359, -190, 142, -228, -228, 317, 142, 142, 426,
	-190, -203, -190, -327, -276, -353, 424, -277, 299, 300,
	429, -149, 34, 104, 199, -190, 401, 115, -295, -295,
	360, -428, 342, -301, 115, -295, 224, 235, 366, 127,
	374, 106, 238, 145, 424, -296, -296, 425, -240, -295,
	-295, 423, 433, 425, -425, 429, -224, -295, -238, -238,
	425, 425, 360, 360, 360, 360, 424, 426, -238, -228,
	423, 423, 429, -312, -313, 111, -295, 426, -398, 252,
	424, 424, 425, 425, 429, 401, 401, 401, 401, -295,
	33, 429, 429, 429, 425, 429, 429, 429, 425, 425,
	145, 425, 425, 425, 425, -269, 262, 425, 11, 12,
	415, 416, 417, 418, 140, 419, 420, 413, 414, 412,
	405, 406, 407, 71, 218, 301, 14, 15, 16, 189,
	165, -296, -296, -296, 425, -299, -300, 145, 142, 33,
	-265, -265, -265, 425, 145, -238, 424, 425, -289, -329,
	-233, 2, -323, -186, -359, -289, -289, -238, -295, -323,
	-323, -259, 380, 243, 194, -323, -317, 425, -405, -355,
	-319, -318, -355, -294, -293, 143, 230, -184, -222, -318,
	-318, -359, -319, 425, -234, -325, -386, -425, 426, -150,
	-190, -178, -185, -165, 232, -287, 161, -156, 232, -336,
	-185, 424, 424, 199, 199, -178, -185, 161, -178, 161,
	-185, -185, -412, 274, 239, -295, 213, 272, 233, -151,
	285, -91, -91, 401, 424, -193, 285, -199, -354, -354,
	-254, 285, -191, -364, 395, 401, -175, -152, -91, -91,
	401, 424, -176, -153, 285, 401, -190, -135, 160, 238,
	417, -359, -129, 5, 235, -129, 425, 429, 171, -177,
	171, -183, -166, -91, -190, 145, -138, -364, -190, -191,
	-364, -364, -364, -91, 2, 424, 2, -190, 117, 243,
	232, -158, 112, -424, 407, -175, -225, -224, -295, -253,
	-282, 292, 243, -223, -179, -178, 385, -184, -253, -232,
	429, 145, 407, 426, -223, -154, -154, -154, -154, -154,
	-76, 145, -228, 24, -138, 429, 424, 407, 407, 424,
	-364, -364, 425, -336, 422, 423, 8, 8, 424, -355,
	-355, -138, -228, 145, -43, 395, 272, 94, 345, 258,
	171, -356, -356, -284, 371, 69, 274, -356, 345, 317,
	317, -165, -277, -295, -321, -190, 430, -295, -295, 115,
	115, -295, -296, -296, -295, 115, 145, 424, -295, -305,
	29, 29, 425, 429, -291, -295, 425, 388, -425, -425,
	-425, 5, 223, 157, 222, -268, 222, -268, -268, 8,
	417, -359, 425, -303, 113, -295, 355, -359, 417, -399,
	-181, 424, -165, 393, -224, -355, 425, -350, -336, -295,
	-295, -295, -295, -295, -295, -299, -295, -350, -336, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, 106, 232,
	238, -296, -300, -299, -295, -295, -336, 425, 425, 425,
	-238, -75, -250, 151, -332, 429, -250, -250, 425, -259,
	424, -295, -323, 423, 425, 429, -318, 423, 429, 432,
	407, -222, 426, -317, 425, 429, -281, 33, 425, -359,
	360, 360, 117, 232, 382, -374, -371, -295, -227, -322,
	-178, -386, 424, -165, 424, 424, -148, 110, 320, -417,
	117, -154, 117, -154, 399, 424, 424, 360, -416, 76,
	-295, -238, 360, 360, 259, -295, -295, -238, 360, -295,
	119, -138, 145, 344, -210, 174, -288, -166, 424, -177,
	424, 424, -222, -190, -255, -161, 2, -271, 380, -176,
	-190, 117, -159, 204, -424, -362, -387, -274, -272, -253,
	-245, 233, 75, 425, 429, 426, -289, -247, -233, -295,
	2, 425, -91, 245, -136, -137, -364, -364, -364, -138,
	-139, -139, 8, 423, 425, -355, 425, 425, -228, 246,
	-187, -175, -190, -188, -203, -190, 244, 425, -149, -176,
	-295, -295, 115, 29, 29, -295, -295, -305, 425, -295,
	-295, -238, 423, 5, -295, 425, 425, 425, 425, -295,
	426, -400, -165, -295, 425, 425, 425, 425, 429, 429,
	425, 425, 425, 425, -300, 145, 106, 238, 424, 425,
	425, -302, 154, 48, -323, -302, -302, -228, -292, -355,
	-293, -176, 422, -359, -325, 424, 426, -178, -185, -287,
	117, -375, 76, -376, 63, 128, 81, 232, 235, 373,
	268, 60, 100, 278, 33, 425, 425, 429, -174, 63,
	-174, -295, -227, -228, 232, 339, 100, 232, 100, 93,
	368, -178, -185, -228, -228, -190, -178, -185, 425, -193,
	-191, -364, 425, -176, 74, -365, 356, -211, -212, 165,
	424, -227, 424, -228, -208, 33, 424, 147, 47, 243,
	424, -176, -160, 203, -424, -362, -157, -253, -280, 424,
	243, -91, -179, 2, -225, 407, 425, 425, 93, 93,
	423, 425, -44, -45, 171, 76, 261, -214, -213, 258,
	238, -149, -295, -295, -295, 425, -425, -359, 417, -394,
	258, 425, -295, -295, -296, 145, 424, -305, -395, 394,
	-295, -238, -395, -395, 425, -319, -355, 2, -287, -185,
	-189, -182, -165, 128, 161, 235, 199, 424, -296, -190,
	424, 2, -286, -419, 80, 340, -322, -149, -189, -149,
	425, 425, 425, 235, 235, -295, -336, -154, -154, 425,
	425, 360, 360, 360, 360, 401, -295, 256, -227, 425,
	-227, 425, 425, -91, -227, -190, -227, 243, -424, -362,
	-158, 107, -228, 76, -274, -301, -138, 424, 424, 429,
	25, 424, 25, 424, -188, 345, 425, -225, 48, 425,
	425, -296, -305, 425, -396, -397, -181, -318, 423, -376,
	-182, 232, -295, -167, 424, -295, -210, 424, -174, 278,
	-173, 63, 424, 424, -178, -185, 424, 424, -295, -190,
	425, -286, 425, -210, 425, -271, 425, -190, -362, -159,
	375, 233, 425, -185, -253, -365, -365, -45, -228, -228,
	-190, -401, 272, 300, 153, -238, 425, 429, 33, 117,
	425, -377, 219, -165, 425, -211, -228, -149, -190, -415,
	380, -189, -216, -215, -213, -218, -217, -213, -238, -238,
	424, -210, -286, -211, -286, 424, -286, 424, -160, 320,
	-289, 425, 425, 425, 425, 425, -402, -403, 39, 370,
	84, -295, -402, -402, -397, -399, 128, -378, -381, -380,
	243, 146, 257, 325, 425, 339, 391, 425, -222, -295,
	425, 429, 385, 425, 429, 385, 425, 425, -228, -211,
	-210, -210, -227, -210, -227, -246, -138, -138, -403, 265,
	141, 299, 265, 141, -182, -380, 243, -381, 243, 375,
	103, -377, -215, 165, -217, 145, 425, -211, -211, 425,
	-211, 425, -289, 29, -379, 229, 290, 53, 320, -379,
	-378, 424, 424, -155, 53, 290, -286, -286, -403, 22,
	235, 100, -238, -238, -210, -210, 425, 425, -211, -211,
	-211, 360, 424, -238, 425, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 189, 191, 193, 0, 0, 0, 216, 218, 220,
	221, -2, 0, 0, 0, 256, 257, 259, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 397, 0, 873, -2, 0, 375, 377, 386, 388,
	390, 392, 393, 0, 455, 457, 459, 461, 463, 465,
	467, 468, 470, 472, 474, 476, 478, 480, 482, 484,
	486, 488, 490, 492, 494, 496, 498, 500, -2, 785,
	787, 789, 791, -2, 62, 64, 66, 68, 70, 72,
	88, 224, 225, 227, 229, 231, 234, 235, 237, 910,
	262, 264, 266, 268, 270, -2, 924, 0, 0, 0,
	-2, 0, -2, -2, -2, 803, 73, 74, 75, 76,
	77, 78, 79, 94, 95, 96, 97, 98, 99, 100,
	81, 83, 84, 90, 91, 93, 0, 0, 886, 888,
	890, 892, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, -2, -2,
	-2, -2, 0, 0, 1573, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1469, 1513, 1472, 1467, 190, 192, 194, 195, 0, 0,
	0, 0, 0, 0, 678, 1498, 1511, 1512, 1513, 1516,
	1517, 1518, 1573, 0, 217, 219, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 745,
	354, 1665, 356, 358, 0, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 258, 260, 261, 0, 0, 0,
	0, 0, 0, 0, 353, 351, 1492, 295, 296, 0,
	0, 336, 337, 338, 339, 340, 341, 343, 300, 302,
	304, 305, 307, 309, 311, 313, 315, 317, 319, 321,
	322, 324, 326, 327, 329, 331, 332, 334, 746, 0,
	0, 0, 0, 0, 172, 0, 368, 362, 367, 369,
	371, 372, 373, 374, 0, 0, 170, 163, 0, 0,
	611, 349, 347, 0, 162, 0, 0, 782, 0, 368,
	1540, 366, 783, 784, 0, 0, 778, 779, 1695, 813,
	376, 378, 387, 389, 391, 394, -2, -2, 1790, -2,
	417, -2, 425, 1793, 1697, 428, 0, 430, -2, 433,
	456, 458, 460, 462, 464, 466, 469, 471, 473, 475,
	477, 479, 481, 483, 485, 487, 489, 491, 493, 495,
	497, 499, 501, 502, 0, 0, 0, 0, 0, 506,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 505, 507, 508, 509, 0, 554, 593, 594,
	786, 788, 790, 0, 720, 912, 63, 65, 67, 69,
	71, 226, 228, 230, 232, 236, 238, -2, 884, 885,
	263, 265, 267, 269, 271, -2, 0, 916, 916, 916,
	0, 0, 885, 883, 0, 379, 0, 381, 0, 506,
	384, 385, 437, 438, 1132, 0, 0, 0, 0, 0,
	1367, 1216, -2, -2, 1248, 1250, 1769, 1790, 1366, 1252,
	1253, 1254, 1255, 1256, 0, 0, 1259, 0, 1261, 1262,
	1263, 1264, 0, 1266, 0, 1270, 1271, 1272, 0, 1446,
	1509, -2, 1041, 1042, 1043, 1044, 1045, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1505, 1500, 1338, 1285, -2,
	1527, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1581, -2, -2, -2, -2, -2, -2,
	-2, 1097, -2, -2, -2, -2, -2, -2, -2, 1803,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 0,
	1758, 1775, 1776, 1781, 1783, 1777, 1766, 1308, -2, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1816,
	1817, 1818, 1819, 1820, 1821, 1098, -2, -2, -2, 1770,
	1771, 1773, 1782, 1786, 1787, 1792, 1796, 1797, 815, 793,
	806, 815, 795, 796, 797, 798, 799, 804, 805, 808,
	0, 800, 801, 802, 902, 1672, 905, 678, 903, 887,
	889, 0, 891, 0, 0, 0, 896, 919, 917, 0,
	955, 900, 901, 911, 970, 993, 0, 975, 0, 993,
	1015, 0, 980, 1691, 1286, 1287, 0, 1513, 1510, -2,
	1814, 1815, 2, 80, 0, 1775, 1015, 82, 0, 1775,
	85, 0, 1775, 0, -2, 89, 0, 1775, 173, 174,
	1523, 1524, 1528, 1529, 1530, 1531, 1803, 92, 0, 1488,
	101, 0, 1775, 1466, 0, 1485, 1532, 1533, 1534, 1535,
	1536, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 0, 1482, 0, 0, 603, 1463, 1468, 604, 1473,
	0, 196, 197, 198, 199, 200, 1775, 202, 203, 0,
	205, 206, 1775, 208, 209, 0, 211, 0, 0, 0,
	0, 0, 233, 678, 1775, 0, 240, 1493, 0, 702,
	1775, 700, 1497, -2, 1775, 723, 726, 1775, 728, 678,
	730, 1495, 735, 1496, 0, -2, 0, 909, 1775, 829,
	355, 357, 0, 249, 0, 842, 0, 844, 0, 863,
	1021, 155, 1775, 274, 293, 155, 1775, 277, 155, 1775,
	280, 155, 1775, 283, 1461, 155, 1775, 286, 287, 1775,
	289, 175, 290, 1775, 292, 350, 0, 0, -2, 344,
	1499, -2, 0, 342, 301, 303, 306, 308, 310, 312,
	314, 316, 318, 320, 323, 325, 328, 330, 333, 335,
	-2, 0, 0, 0, 0, 0, 187, 0, 609, 610,
	0, 0, 0, 780, 781, 0, 0, 0, 398, 0,
	0, 0, 0, 812, 395, 0, 414, 0, 416, 1765,
	-2, -2, 420, 816, 820, 821, 822, 0, 0, 0,
	0, 427, 0, 0, 0, 431, 434, 0, 503, 504,
	0, 0, 514, 515, 516, 517, 1670, 1595, 520, 0,
	523, 544, 558, 0, 0, 527, 529, 608, 531, 0,
	0, 533, 0, 535, 0, 537, 0, 539, 0, 541,
	543, 545, 559, 547, 0, 0, 0, 557, 0, 563,
	0, 566, 567, 568, 0, 570, 571, 572, 573, 0,
	575, 576, -2, -2, 580, 582, 0, 592, 0, 510,
	511, 155, 1019, -2, 0, 879, 933, 934, 0, 0,
	0, 0, 914, 915, 0, 0, 0, 875, 876, 380,
	0, 383, 0, 0, 0, 0, 1372, 1373, 1374, 1375,
	1376, 1377, 1380, 1381, 1378, 1379, 1382, 1383, 0, 0,
	0, 0, 0, 1384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1385, 1386, 1387, 0, 0,
	1389, 0, 1391, 0, 0, 0, 0, 0, 0, 1195,
	1197, 1454, 0, 0, 1388, 1137, 1138, 1139, 1174, 1175,
	0, 1249, 1451, 1450, 1251, 0, 1403, 0, 1258, 0,
	1129, 1265, 1479, -2, 0, 1367, 1398, 0, 0, 1273,
	1274, 1275, 0, 0, 1403, 0, 1445, 0, 1340, 0,
	1077, 0, 1078, 1079, 0, 1080, 1081, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 1426, -2, 0, 0, 792, -2, 794, 0,
	810, 0, 904, 0, 0, 959, 1455, 1459, 1460, 959,
	959, 0, 0, 1404, 0, 0, 0, 0, 1012, 1012,
	1012, 1010, 987, 0, 993, 0, 1003, 0, 993, 993,
	0, -2, 975, 0, 0, 1003, 1016, 1017, 0, 0,
	0, 0, 102, 775, 123, 0, 775, 775, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 119, 108, 109,
	0, 0, 86, 703, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 121, 0, 146, 148, 0, 0,
	0, 0, 1006, 602, 0, 0, 1514, 1471, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 1500, 1501, 617,
	0, 0, 0, 247, 242, 0, 244, 698, 701, 0,
	721, 0, 908, 0, 0, 0, 0, 0, 736, 0,
	1775, 741, 1484, 1519, 1520, 831, 0, 1025, 0, 845,
	0, 0, 1022, 0, 272, 0, 153, 154, 0, 275,
	0, 278, 0, 281, 0, 0, 284, 0, 0, 0,
	0, 0, 911, 0, 0, 187, 0, 360, 370, 0,
	165, 0, 0, 0, 0, 911, 0, 1406, 1033, 1029,
	1036, 1037, 1038, 1129, 1084, 1085, 1086, 1087, 1088, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, -2, 1095, 1097, 1115,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1090, 0, 1065, 1065, 1065, 1082, 1083, 1106, 1107,
	1109, 1111, 1113, 1034, 1035, 1100, 1101, 1102, 1103, 187,
	0, 364, 0, 1006, 400, 1006, 402, 0, 588, 0,
	0, 0, 0, -2, 422, 0, 818, 0, 823, 446,
	447, 448, 825, 826, 426, 449, 450, 451, 452, 453,
	454, 0, 695, 0, 697, 1475, 0, 423, 439, 424,
	429, 0, 435, 0, 0, 518, 519, 521, 522, 524,
	525, 526, 530, 0, 596, 1687, 606, 532, 534, 536,
	538, 540, 0, 549, 0, 551, 0, 553, 561, 564,
	569, 574, 0, 0, 0, 719, 0, 882, 931, 932,
	937, 941, 942, 945, 948, 949, 939, 1132, 897, 898,
	899, 925, 926, 758, 0, 0, 382, 1133, 1030, 1134,
	1135, 1481, 0, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, -2, -2, -2, -2, -2, -2, -2,
	-2, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, -2, -2, -2, 1172, 1173, -2, 1390, 1392,
	0, 1454, 0, -2, 0, -2, -2, -2, -2, 1192,
	0, 1194, 1199, 1201, 1203, 0, 0, 0, 0, 1453,
	1213, 1437, 1438, 0, 0, 1369, 1370, 1371, 1198, 0,
	1452, 1449, 0, 0, 1402, 922, 1276, 0, 0, 0,
	0, 1283, 0, 1480, 1116, 1117, 1118, 1119, 1120, 1121,
	1130, 1269, 1400, 0, 1399, 0, 0, 0, 1410, 1444,
	1440, 0, 1502, 1508, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1320, 0, 1413, -2, -2, -2, -2,
	-2, -2, -2, 0, 1322, 0, 1334, 0, 1336, 0,
	1324, 1404, 1423, 0, 0, 1219, 0, 0, 0, 1367,
	0, 1327, 1404, 1431, 0, 0, 0, 0, 0, 1404,
	0, 1436, 809, 906, 0, 0, 1025, 0, 0, 0,
	1458, 1025, 1025, 0, 954, 0, 0, 0, 0, 0,
	0, 1007, 1011, 1008, 1009, 0, 0, 993, 1003, 967,
	0, 0, 1483, 973, 1002, 0, 678, 992, 1003, 1003,
	0, -2, 977, 0, 0, 922, -2, 0, 0, 0,
	0, 774, 125, 1775, 0, 157, 0, 0, 668, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	704, 705, 707, 713, 715, 0, 709, 1478, 0, 710,
	0, 712, 714, 716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	1465, 0, 0, 178, 1005, 0, 1464, 1474, 0, 201,
	204, 207, 210, 188, 677, 0, 0, 0, 0, 616,
	-2, 618, 620, 621, 622, 623, 1621, 1520, 0, 1520,
	0, 0, 0, 187, 0, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 1775,
	833, 839, 0, 924, 0, 861, 847, 0, 0, 0,
	861, 865, 866, 868, 869, 0, 0, 1023, 294, 155,
	155, 155, 1462, 155, 155, 176, 288, 291, 352, 297,
	345, 911, 0, 0, 0, 187, 185, 1653, 183, 180,
	182, 0, 0, 0, 346, 0, 0, 0, 348, 0,
	1026, 1028, 0, 1039, 0, 0, -2, 0, 0, 160,
	187, 0, 0, 399, 404, 0, 589, 0, 0, 415,
	0, 817, 824, 0, 443, 0, 445, 696, 1477, 1476,
	0, 436, 512, 0, 607, 605, 548, 0, 0, 0,
	590, 591, 595, 1020, 0, 943, 0, 940, 946, 947,
	0, 928, 756, 757, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 1214, 0, -2, 1193, 1196, 1200, 1202,
	1204, 0, 0, 0, 0, 0, 0, 1393, 0, 1395,
	1215, 1447, 1450, 1365, 0, 0, 921, 922, 922, 922,
	1282, 0, 0, 0, 0, 0, 0, 0, 1401, 0,
	1408, 1409, 0, 0, 1441, 0, 0, 0, 1284, 0,
	0, 0, 1089, 1063, 0, 1108, 1110, 1112, 1114, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 1307, 1319,
	0, 1321, 1333, 1335, 1323, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1222, 1223, 1224, 1326, 1429, 1430, 0, 0, 0,
	0, 0, 0, 1332, 0, 1435, 911, 956, 951, 1456,
	1006, 958, 960, 1457, 1486, 951, 951, 0, 1405, 995,
	0, 997, 0, 0, 0, 999, 0, 988, 0, 990,
	1003, 972, 0, 0, 965, 0, 964, 678, 1001, 974,
	978, 1502, 0, 1018, 0, 982, 985, 0, 0, 124,
	762, 0, 0, 1487, 0, 127, 1775, 136, 0, 645,
	0, 0, 0, 0, 0, 777, 137, 1775, 155, 1775,
	155, 138, 141, 0, 145, 143, 0, 0, 636, 103,
	775, 106, 112, 0, 0, 768, 0, 708, 711, 717,
	87, 0, 770, 760, 0, 0, 759, 147, 107, 113,
	0, 0, 772, 105, 0, 0, 0, 187, 0, 0,
	1470, 1515, 212, 214, 215, 213, 625, 0, 1520, 0,
	1520, 0, 1491, 614, 678, 0, 241, 246, 245, 702,
	724, -2, 727, 729, 731, 0, 733, 744, 0, 0,
	0, 835, 839, 0, 838, 909, 936, 923, 1024, 840,
	861, 0, 0, 0, 850, 852, 849, 846, 843, 1025,
	0, 0, 0, 0, 0, 273, 276, 279, 282, 285,
	298, 0, 359, 0, 164, 0, 0, 0, 0, 0,
	187, 0, 0, 1407, 0, 1031, 0, 0, 0, 0,
	0, 161, 363, 0, 401, 0, 0, 0, 0, 0,
	0, 412, 413, -2, 441, 442, 444, 440, 0, 550,
	552, 560, 0, 0, 927, 758, 0, 1136, 1177, 0,
	0, -2, 0, 0, 1181, 0, 0, 0, -2, 0,
	0, 0, 1394, 1396, 0, 1449, 1277, 0, 0, 0,
	0, 1260, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 0,
	1267, 1268, 1368, 1411, 1439, 1443, 0, 1503, 1507, 1346,
	1347, 1351, 1494, 0, 0, 0, 1288, 0, 0, 0,
	0, 0, 0, 0, 1412, 1422, 1424, 1220, 1221, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, -2,
	-2, -2, 1238, 1239, 1240, -2, -2, -2, 0, 0,
	0, 1425, 1427, 1428, 1432, 1433, 0, 1329, 1330, 1331,
	1434, 0, 953, 0, 957, 0, 953, 953, 918, 996,
	0, 1014, 998, 970, 989, 0, 979, 968, 0, 969,
	0, 1000, 0, 976, 981, 0, 984, 0, 1277, -2,
	0, 0, 0, 0, 156, 643, 667, 0, 0, 747,
	755, 755, 0, 1489, 0, 0, 129, 0, 0, 0,
	0, 134, 0, 140, 144, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 115, 118, 0, 0, 114,
	0, 158, 0, 0, 633, 0, 619, 0, 0, 0,
	0, 617, 0, 239, 699, 722, 732, 0, 0, 0,
	0, 0, 837, 839, 0, 830, 831, 861, 935, 841,
	859, 860, 858, 0, 0, 0, 924, 867, 864, 870,
	871, 0, 171, 361, 184, 0, 179, 181, 0, 167,
	0, 0, 0, 1032, 1040, 0, 1092, 1096, 365, 0,
	583, 584, 631, 0, 587, 513, 938, 944, 929, 758,
	1179, 1183, 0, 0, 0, 1185, -2, 0, 1207, -2,
	-2, 1397, 1448, 1257, 922, 1278, 1280, 1281, 1131, 1442,
	0, 1353, 1350, 0, 1337, 1064, 1298, 1299, 0, 0,
	1302, 1304, 1305, 1306, 1421, 0, 0, 0, 0, 1328,
	907, 1342, 0, 0, 961, 1342, 1342, 0, 993, 991,
	966, 962, 0, 1503, 983, 0, 0, 764, 766, 126,
	0, 644, 0, 647, 0, 0, 0, 0, 654, 655,
	0, 0, 0, 0, 0, 669, 676, 0, 758, 0,
	758, 0, 0, 0, 0, 131, 150, 0, 0, 776,
	0, 155, 155, 0, 0, 763, 0, 0, 0, 769,
	771, 761, 0, 773, 0, 177, 0, 612, 632, 0,
	0, 0, 0, 0, 0, 0, 0, 742, 743, 0,
	0, 0, 827, 839, 0, 832, 833, 248, 0, 0,
	0, 848, 851, 853, 936, 0, 186, 187, 0, 0,
	1027, 1091, 403, 405, 0, 0, 411, 585, 630, 0,
	0, 930, 1187, -2, -2, 1208, 0, 1504, 1506, 924,
	0, 1339, 0, 0, -2, 0, 0, 0, 893, 0,
	952, 950, 894, 895, 1013, 1003, 0, 986, 128, 0,
	648, 649, 1490, 651, 0, 653, 656, 0, 658, 1522,
	0, 662, 625, 0, 673, 674, 748, 749, 754, 750,
	755, 671, 0, 130, 132, 149, 753, 133, 139, 0,
	0, 0, 0, 0, 0, 0, 1004, 0, 0, 676,
	0, 666, 625, 615, 0, 744, 0, 0, 0, 834,
	835, 0, 0, 0, 861, 872, 166, 0, 0, 0,
	407, 0, 409, 0, 629, 0, 1279, 1357, 0, 1300,
	1301, -2, 0, 1246, 1341, 1343, 0, 971, 963, 646,
	650, 0, 0, 682, 0, 0, 633, 0, 758, 0,
	152, 0, 0, 0, 765, 767, 0, 0, 117, 0,
	665, 625, 676, 633, 676, 0, 676, 0, 836, 837,
	0, 855, 1025, 857, 862, 0, 0, 406, 0, 0,
	586, 0, 0, 0, 0, 1352, 1247, 0, 0, 0,
	657, 687, 0, 0, 0, 670, 0, 751, 678, 135,
	0, 752, 0, 637, 0, 0, 640, 0, 0, 0,
	0, 633, 625, 613, 625, 0, 625, 0, 828, 0,
	856, 187, 187, 408, 410, 1349, 1354, 1358, -2, 1740,
	1570, 0, 1355, 1356, 1344, 1345, 0, 659, 683, 684,
	0, 679, 680, 681, 1521, 660, 661, 675, 682, 151,
	634, 0, 0, 635, 0, 0, 120, 122, 0, 663,
	633, 633, 0, 633, 0, 1025, 168, 169, 0, 1360,
	1361, 1362, 1363, 1364, 652, 685, 0, 686, 0, 0,
	0, 687, 638, 0, 641, 0, 628, 664, 737, 676,
	739, 676, 854, 0, 688, 0, 691, 692, 0, 689,
	672, 0, 0, 624, 626, 627, 625, 625, 1359, 690,
	693, 694, 0, 0, 633, 633, 633, 0, 738, 740,
	639, 0, 0, 0, 633, 642,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1025
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1031
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1040
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1077
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1086
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1226
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1234
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1256
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1266
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1273
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1280
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1314
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1324
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1337
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1349
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1359
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1414
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1417
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1529
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1546
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1550
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1554
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1564
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1623
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1627
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1674
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1685
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1705
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1743
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1747
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1757
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1767
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1771
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1774
		{
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1778
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1790
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1791
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1792
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1793
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1811
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1816
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1826
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1843
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1845
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1849
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1862
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1871
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1879
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1881
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1885
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1892
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1897
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1903
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1904
		{
			sqlVAL.str = ""
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1914
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1916
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1921
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1923
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1924
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1926
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1927
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1928
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1929
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1946
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1950
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1960
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1964
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1970
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1981
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1985
		{

			sqlVAL.union.val = nil
		}
	case 248:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return helpWith(sqllex, "DELETE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2019
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2020
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2022
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2032
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2033
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2034
		{
			return helpWith(sqllex, "DROP")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2037
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2039
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2040
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2041
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2049
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2053
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2064
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2068
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2071
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2079
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2094
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2102
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2109
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2132
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2166
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2191
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2194
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2196
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2200
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2210
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2211
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2213
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2214
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2215
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2217
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2218
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2219
		{
			return helpWith(sqllex, "INSERT")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2220
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2222
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2223
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2225
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2228
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2229
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2231
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2232
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2240
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2241
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2266
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2270
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2274
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2284
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2290
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2296
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2300
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2314
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2318
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2322
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2325
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2345
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2353
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2356
		{
			return helpWith(sqllex, "GRANT")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2376
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2387
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2392
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2396
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2407
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2425
		{
			return helpWith(sqllex, "RESET")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2426
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2434
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2438
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "RESET")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2452
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2466
		{
			return helpWith(sqllex, "USE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2470
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2471
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2472
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2473
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2474
		{
			return helpWith(sqllex, "USE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2475
		{
			return unimplemented(sqllex, "set local")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2491
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2509
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2527
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2535
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2539
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2543
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2549
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2567
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2571
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2575
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2590
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2593
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2599
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2615
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2619
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2641
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2644
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2646
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2649
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2653
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2664
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2681
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2688
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2694
		{
			return unimplemented(sqllex, "set from current")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2695
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2703
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2708
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2715
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2725
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2736
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2742
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2774
		{
			sqlVAL.union.val = tree.Low
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2778
		{
			sqlVAL.union.val = tree.Normal
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2782
		{
			sqlVAL.union.val = tree.High
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2793
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2797
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2801
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2806
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2810
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2825
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2826
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2827
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2829
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2830
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2831
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2832
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2833
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2836
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2838
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2839
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2840
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2843
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2844
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SHOW")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2866
		{
			sqlVAL.str = "client_encoding"
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2869
		{
			sqlVAL.str = "timezone"
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2884
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2888
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2891
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2902
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2925
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2933
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2940
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2957
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2959
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2962
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2970
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2973
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2981
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2984
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2997
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3005
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3016
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3021
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3023
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3034
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3039
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3055
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3059
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3069
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3089
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3091
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3095
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3098
		{
			sqlVAL.union.val = true
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3099
		{
			sqlVAL.union.val = false
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3107
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3110
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3112
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3116
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3144
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3147
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3154
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3168
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3180
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3185
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3190
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3206
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3223
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3234
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3241
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3246
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3251
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3258
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3266
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3273
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3278
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3294
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3297
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3305
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3312
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3317
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3437
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3441
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3445
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3484
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3488
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3493
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3497
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3506
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3513
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3517
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3541
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3603
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3614
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3656
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3664
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3671
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3676
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3681
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3687
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3694
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3701
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3721
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3727
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3737
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3747
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3768
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3789
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3793
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3797
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3801
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3805
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3809
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3831
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3835
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3839
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3843
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3867
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3871
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 663:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3910
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3922
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3927
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3933
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3939
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3950
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3998
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4003
		{
			return unimplemented(sqllex, "match full")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4004
		{
			return unimplemented(sqllex, "match partial")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4005
		{
			return unimplemented(sqllex, "match simple")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4006
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4017
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4021
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4025
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4029
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4049
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4053
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4061
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4065
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4075
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4100
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4108
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4116
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4123
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4127
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4128
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4130
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4131
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4132
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4135
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4137
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4139
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4141
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4142
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4145
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4147
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4149
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4160
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4168
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4172
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4175
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4179
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4183
		{
			sqlVAL.union.val = nil
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4193
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4197
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4200
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4208
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4215
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4223
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4225
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4227
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4229
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4231
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4233
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4262
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4276
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4289
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4302
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4307
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4311
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4315
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4321
		{
			sqlVAL.union.val = true
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4325
		{
			sqlVAL.union.val = false
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4344
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4347
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4348
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4351
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.str = ""
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4355
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4356
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4360
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4364
		{
			sqlVAL.union.val = tree.Descending
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4368
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4374
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4381
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4391
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4395
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4399
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4407
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4409
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4413
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4417
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4423
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4433
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4437
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4442
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4443
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4447
		{
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4455
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4458
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4477
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4480
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4488
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4491
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4495
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4497
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4513
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4516
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4518
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4521
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4534
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4536
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4539
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4543
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4548
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4549
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4550
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4558
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4565
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4568
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4569
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4573
		{
			sqlVAL.str = ""
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4577
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4581
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4585
		{
			sqlVAL.str = ""
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4591
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4605
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4611
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4615
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4628
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4630
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4634
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4638
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4642
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4648
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4654
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4660
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4664
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 827:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4674
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4684
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4694
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4698
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4702
		{
			sqlVAL.str = ""
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4708
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4712
		{
			sqlVAL.str = ""
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4718
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4722
		{
			sqlVAL.str = ""
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4728
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4732
		{
			sqlVAL.str = ""
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4737
		{
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4738
		{
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4750
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4764
		{
			return helpWith(sqllex, "INSERT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4775
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4782
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4786
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4794
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4800
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4804
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4814
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4838
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4842
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4846
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4852
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4856
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4864
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4869
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4873
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 862:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4890
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4901
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4905
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4906
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4910
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4927
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4930
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4934
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4977
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4983
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5002
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5010
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5014
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5018
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5022
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5029
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5064
		{
			return helpWith(sqllex, "SELECT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5065
		{
			return helpWith(sqllex, "VALUES")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5066
		{
			return helpWith(sqllex, "TABLE")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5088
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5101
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5115
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5127
		{
			return helpWith(sqllex, "SELECT")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5131
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5140
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5149
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5171
		{
			return helpWith(sqllex, "TABLE")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5183
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5186
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5187
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5191
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5201
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5209
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5210
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5214
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5217
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5220
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5221
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5225
		{
			sqlVAL.union.val = true
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5229
		{
			sqlVAL.union.val = false
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5233
		{
			sqlVAL.union.val = false
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = true
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5245
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5250
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5251
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5254
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5255
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5259
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5269
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5275
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5285
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5289
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5293
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5302
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5311
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5322
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5326
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5335
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5341
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5348
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5355
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5364
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5368
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5372
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5378
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5379
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5382
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5383
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5400
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5404
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5410
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5414
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5433
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5436
		{
			return helpWith(sqllex, "VALUES")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5438
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5450
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5453
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5455
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5461
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5471
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5475
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5481
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5487
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5492
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5504
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5516
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5543
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5557
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5566
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5573
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5583
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5588
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5610
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5620
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5626
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5632
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5634
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = nil
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5638
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5643
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5653
		{
			sqlVAL.union.val = true
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = false
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5677
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5681
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5685
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5689
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5693
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5697
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5703
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5707
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5714
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5720
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5733
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5737
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5741
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5745
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5751
		{
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5752
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5763
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5767
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5772
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5773
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5774
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5775
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5779
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5783
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5796
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5800
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5804
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5810
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5814
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5826
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5840
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5849
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5858
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5864
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5871
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5873
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5882
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5893
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5910
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5914
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5918
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5922
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5926
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5930
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5934
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5942
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5946
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5950
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5954
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5958
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5962
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5974
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5978
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5998
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6002
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6006
		{
			sqlVAL.union.val = nil
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6013
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6017
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6021
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6025
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6029
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6033
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6037
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6041
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6045
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6049
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6061
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6065
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6072
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6079
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6097
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6101
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6105
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6109
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6119
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6140
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6146
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6168
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6187
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6191
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6195
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6199
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = true
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6209
		{
			sqlVAL.union.val = false
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6214
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6226
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6230
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6251
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = tree.Year
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6261
		{
			sqlVAL.union.val = tree.Month
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6265
		{
			sqlVAL.union.val = tree.Day
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6269
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6273
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6277
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = tree.Month
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6291
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6299
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6303
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = nil
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6317
		{
			sqlVAL.union.val = tree.Second
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6320
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6355
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6364
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6489
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6493
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6505
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6509
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6513
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6517
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6521
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6533
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6537
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6608
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6666
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6670
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6674
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6691
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6695
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6699
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6714
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6718
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6722
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6726
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6730
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6734
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6738
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6742
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6746
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6750
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6754
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6758
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6762
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6766
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6770
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6774
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6782
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6790
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6794
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6798
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6802
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6806
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6810
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6814
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6880
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6884
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6888
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6892
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6896
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6901
		{
			return unimplemented(sqllex, "func const")
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6910
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6912
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6924
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6928
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6959
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6987
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6988
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7001
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7012
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7029
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7033
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7053
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7118
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7121
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7126
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7131
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7133
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7136
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7138
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7141
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7143
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7146
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7151
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7156
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7165
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7166
		{
			return unimplemented(sqllex, "treat")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7168
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7176
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7180
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7187
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7192
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7197
		{
			return unimplemented(sqllex, "within group")
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7198
		{
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7223
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7233
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7241
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7249
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7256
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7276
		{
			sqlVAL.str = ""
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7282
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7286
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7297
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7318
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7324
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7337
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7365
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7369
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7373
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7411
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7423
		{
			sqlVAL.union.val = tree.Any
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = tree.Some
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7431
		{
			sqlVAL.union.val = tree.All
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7436
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7437
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7439
		{
			sqlVAL.union.val = tree.Div
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7440
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7441
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7443
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7445
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = tree.LT
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7447
		{
			sqlVAL.union.val = tree.GT
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7449
		{
			sqlVAL.union.val = tree.LE
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = tree.GE
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7451
		{
			sqlVAL.union.val = tree.NE
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = tree.Like
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7457
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7491
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7495
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7499
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7531
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7537
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7547
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7567
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7577
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7603
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7611
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7617
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7624
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7645
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7649
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7657
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7661
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7667
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7673
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7679
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7683
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7687
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7693
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7705
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7728
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7732
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7739
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7762
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7771
		{
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7772
		{
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7776
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7795
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7799
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7803
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7811
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7821
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7825
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7831
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7838
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7880
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7892
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7896
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7907
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7918
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7928
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8063
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8104
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8108
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8122
		{
			sqlVAL.str = ""
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8128
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8132
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
