// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:554
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8260

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 894,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	167, 731,
	-2, 0,
	-1, 60,
	101, 894,
	173, 894,
	373, 894,
	374, 894,
	-2, 0,
	-1, 74,
	113, 868,
	127, 868,
	181, 868,
	207, 868,
	238, 868,
	246, 868,
	370, 868,
	-2, 857,
	-1, 110,
	197, 548,
	360, 548,
	-2, 0,
	-1, 115,
	4, 896,
	20, 896,
	21, 896,
	22, 896,
	23, 896,
	25, 896,
	30, 896,
	35, 896,
	36, 896,
	37, 896,
	38, 896,
	39, 896,
	40, 896,
	41, 896,
	42, 896,
	43, 896,
	44, 896,
	46, 896,
	47, 896,
	48, 896,
	49, 896,
	50, 896,
	51, 896,
	54, 896,
	55, 896,
	56, 896,
	58, 896,
	59, 896,
	63, 896,
	64, 896,
	65, 896,
	66, 896,
	67, 896,
	69, 896,
	70, 896,
	71, 896,
	72, 896,
	74, 896,
	76, 896,
	77, 896,
	80, 896,
	81, 896,
	82, 896,
	90, 896,
	91, 896,
	92, 896,
	93, 896,
	94, 896,
	95, 896,
	96, 896,
	97, 896,
	99, 896,
	101, 896,
	103, 896,
	106, 896,
	107, 896,
	109, 896,
	110, 896,
	114, 896,
	115, 896,
	116, 896,
	117, 896,
	118, 896,
	119, 896,
	120, 896,
	121, 896,
	122, 896,
	123, 896,
	124, 896,
	132, 896,
	133, 896,
	134, 896,
	135, 896,
	136, 896,
	138, 896,
	140, 896,
	144, 896,
	146, 896,
	147, 896,
	149, 896,
	151, 896,
	152, 896,
	153, 896,
	154, 896,
	155, 896,
	156, 896,
	157, 896,
	158, 896,
	159, 896,
	162, 896,
	163, 896,
	168, 896,
	169, 896,
	170, 896,
	173, 896,
	174, 896,
	175, 896,
	176, 896,
	177, 896,
	178, 896,
	179, 896,
	180, 896,
	182, 896,
	184, 896,
	187, 896,
	188, 896,
	189, 896,
	191, 896,
	192, 896,
	195, 896,
	196, 896,
	197, 896,
	199, 896,
	200, 896,
	202, 896,
	204, 896,
	205, 896,
	208, 896,
	209, 896,
	212, 896,
	214, 896,
	217, 896,
	218, 896,
	219, 896,
	220, 896,
	221, 896,
	222, 896,
	223, 896,
	225, 896,
	226, 896,
	227, 896,
	228, 896,
	233, 896,
	234, 896,
	235, 896,
	236, 896,
	237, 896,
	239, 896,
	240, 896,
	242, 896,
	243, 896,
	244, 896,
	247, 896,
	248, 896,
	250, 896,
	252, 896,
	253, 896,
	254, 896,
	255, 896,
	256, 896,
	257, 896,
	258, 896,
	259, 896,
	261, 896,
	262, 896,
	263, 896,
	264, 896,
	265, 896,
	267, 896,
	268, 896,
	269, 896,
	270, 896,
	271, 896,
	272, 896,
	273, 896,
	274, 896,
	276, 896,
	277, 896,
	278, 896,
	279, 896,
	280, 896,
	282, 896,
	283, 896,
	284, 896,
	285, 896,
	286, 896,
	287, 896,
	288, 896,
	290, 896,
	292, 896,
	293, 896,
	294, 896,
	295, 896,
	296, 896,
	297, 896,
	299, 896,
	300, 896,
	301, 896,
	302, 896,
	303, 896,
	304, 896,
	305, 896,
	307, 896,
	308, 896,
	309, 896,
	310, 896,
	311, 896,
	312, 896,
	313, 896,
	314, 896,
	315, 896,
	317, 896,
	318, 896,
	319, 896,
	320, 896,
	322, 896,
	323, 896,
	324, 896,
	325, 896,
	327, 896,
	328, 896,
	329, 896,
	330, 896,
	331, 896,
	332, 896,
	333, 896,
	334, 896,
	335, 896,
	336, 896,
	337, 896,
	338, 896,
	340, 896,
	341, 896,
	343, 896,
	344, 896,
	345, 896,
	346, 896,
	347, 896,
	348, 896,
	349, 896,
	350, 896,
	351, 896,
	352, 896,
	354, 896,
	355, 896,
	356, 896,
	357, 896,
	360, 896,
	361, 896,
	362, 896,
	363, 896,
	365, 896,
	366, 896,
	368, 896,
	369, 896,
	372, 896,
	373, 896,
	374, 896,
	375, 896,
	377, 896,
	379, 896,
	380, 896,
	381, 896,
	382, 896,
	383, 896,
	384, 896,
	387, 896,
	388, 896,
	393, 896,
	394, 896,
	395, 896,
	396, 896,
	397, 896,
	398, 896,
	-2, 0,
	-1, 136,
	113, 867,
	127, 867,
	181, 867,
	207, 867,
	238, 867,
	246, 867,
	370, 867,
	-2, 860,
	-1, 141,
	1, 790,
	187, 790,
	267, 790,
	271, 790,
	424, 790,
	425, 790,
	-2, 0,
	-1, 143,
	1, 790,
	424, 790,
	425, 790,
	-2, 0,
	-1, 144,
	1, 790,
	424, 790,
	425, 790,
	-2, 0,
	-1, 145,
	1, 794,
	424, 794,
	425, 794,
	-2, 0,
	-1, 171,
	4, 903,
	5, 903,
	6, 903,
	7, 903,
	8, 903,
	9, 903,
	20, 903,
	21, 903,
	22, 903,
	23, 903,
	25, 903,
	30, 903,
	31, 903,
	35, 903,
	36, 903,
	37, 903,
	38, 903,
	39, 903,
	40, 903,
	41, 903,
	42, 903,
	43, 903,
	44, 903,
	46, 903,
	47, 903,
	48, 903,
	49, 903,
	50, 903,
	51, 903,
	52, 903,
	53, 903,
	54, 903,
	55, 903,
	56, 903,
	58, 903,
	59, 903,
	61, 903,
	63, 903,
	64, 903,
	65, 903,
	66, 903,
	67, 903,
	69, 903,
	70, 903,
	71, 903,
	72, 903,
	74, 903,
	76, 903,
	77, 903,
	79, 903,
	80, 903,
	81, 903,
	82, 903,
	83, 903,
	84, 903,
	85, 903,
	86, 903,
	87, 903,
	88, 903,
	89, 903,
	90, 903,
	91, 903,
	92, 903,
	93, 903,
	94, 903,
	95, 903,
	96, 903,
	97, 903,
	98, 903,
	99, 903,
	101, 903,
	103, 903,
	106, 903,
	107, 903,
	109, 903,
	110, 903,
	114, 903,
	115, 903,
	116, 903,
	117, 903,
	118, 903,
	119, 903,
	120, 903,
	121, 903,
	122, 903,
	123, 903,
	124, 903,
	125, 903,
	126, 903,
	132, 903,
	133, 903,
	134, 903,
	135, 903,
	136, 903,
	138, 903,
	140, 903,
	143, 903,
	144, 903,
	146, 903,
	147, 903,
	149, 903,
	151, 903,
	152, 903,
	153, 903,
	154, 903,
	155, 903,
	156, 903,
	157, 903,
	158, 903,
	159, 903,
	160, 903,
	162, 903,
	163, 903,
	168, 903,
	169, 903,
	170, 903,
	172, 903,
	173, 903,
	174, 903,
	175, 903,
	176, 903,
	177, 903,
	178, 903,
	179, 903,
	180, 903,
	182, 903,
	184, 903,
	185, 903,
	186, 903,
	187, 903,
	188, 903,
	189, 903,
	190, 903,
	191, 903,
	192, 903,
	195, 903,
	196, 903,
	197, 903,
	199, 903,
	200, 903,
	202, 903,
	203, 903,
	204, 903,
	205, 903,
	206, 903,
	208, 903,
	209, 903,
	212, 903,
	214, 903,
	215, 903,
	216, 903,
	217, 903,
	218, 903,
	219, 903,
	220, 903,
	221, 903,
	222, 903,
	223, 903,
	224, 903,
	225, 903,
	226, 903,
	227, 903,
	228, 903,
	229, 903,
	231, 903,
	232, 903,
	233, 903,
	234, 903,
	235, 903,
	236, 903,
	237, 903,
	239, 903,
	240, 903,
	243, 903,
	244, 903,
	247, 903,
	248, 903,
	249, 903,
	250, 903,
	251, 903,
	252, 903,
	253, 903,
	254, 903,
	255, 903,
	256, 903,
	257, 903,
	258, 903,
	259, 903,
	261, 903,
	262, 903,
	263, 903,
	264, 903,
	265, 903,
	267, 903,
	268, 903,
	269, 903,
	270, 903,
	271, 903,
	272, 903,
	273, 903,
	274, 903,
	276, 903,
	277, 903,
	278, 903,
	279, 903,
	280, 903,
	282, 903,
	283, 903,
	284, 903,
	285, 903,
	286, 903,
	287, 903,
	288, 903,
	290, 903,
	291, 903,
	292, 903,
	293, 903,
	294, 903,
	295, 903,
	296, 903,
	297, 903,
	299, 903,
	300, 903,
	301, 903,
	302, 903,
	303, 903,
	304, 903,
	305, 903,
	307, 903,
	308, 903,
	309, 903,
	310, 903,
	311, 903,
	312, 903,
	313, 903,
	314, 903,
	315, 903,
	316, 903,
	317, 903,
	318, 903,
	319, 903,
	320, 903,
	321, 903,
	322, 903,
	323, 903,
	324, 903,
	325, 903,
	327, 903,
	328, 903,
	329, 903,
	330, 903,
	331, 903,
	332, 903,
	333, 903,
	334, 903,
	335, 903,
	336, 903,
	337, 903,
	338, 903,
	340, 903,
	341, 903,
	343, 903,
	344, 903,
	345, 903,
	346, 903,
	347, 903,
	348, 903,
	349, 903,
	350, 903,
	351, 903,
	352, 903,
	354, 903,
	355, 903,
	356, 903,
	357, 903,
	360, 903,
	361, 903,
	362, 903,
	363, 903,
	364, 903,
	365, 903,
	366, 903,
	368, 903,
	369, 903,
	372, 903,
	373, 903,
	374, 903,
	375, 903,
	376, 903,
	377, 903,
	379, 903,
	380, 903,
	381, 903,
	382, 903,
	383, 903,
	384, 903,
	387, 903,
	388, 903,
	393, 903,
	394, 903,
	395, 903,
	396, 903,
	397, 903,
	398, 903,
	399, 903,
	407, 903,
	412, 903,
	413, 903,
	414, 903,
	421, 903,
	427, 903,
	-2, 0,
	-1, 174,
	1, 57,
	425, 57,
	-2, 894,
	-1, 207,
	423, 1472,
	426, 1472,
	-2, 591,
	-1, 208,
	423, 1474,
	426, 1474,
	-2, 592,
	-1, 209,
	423, 1473,
	426, 1473,
	-2, 593,
	-1, 210,
	426, 1414,
	-2, 594,
	-1, 617,
	142, 1587,
	358, 1587,
	404, 1587,
	423, 1587,
	-2, 0,
	-1, 618,
	142, 1510,
	358, 1510,
	404, 1510,
	423, 1510,
	-2, 0,
	-1, 620,
	142, 1662,
	358, 1662,
	404, 1662,
	423, 1662,
	-2, 0,
	-1, 622,
	142, 1691,
	358, 1691,
	404, 1691,
	423, 1691,
	-2, 0,
	-1, 629,
	142, 1594,
	358, 1594,
	404, 1594,
	423, 1594,
	-2, 422,
	-1, 664,
	1, 520,
	420, 520,
	422, 520,
	424, 520,
	425, 520,
	-2, 0,
	-1, 665,
	1, 590,
	139, 590,
	420, 590,
	422, 590,
	424, 590,
	425, 590,
	-2, 0,
	-1, 671,
	1, 534,
	420, 534,
	422, 534,
	424, 534,
	425, 534,
	-2, 0,
	-1, 673,
	1, 538,
	420, 538,
	422, 538,
	424, 538,
	425, 538,
	-2, 0,
	-1, 676,
	1, 549,
	420, 549,
	422, 549,
	424, 549,
	425, 549,
	-2, 0,
	-1, 677,
	1, 555,
	420, 555,
	422, 555,
	424, 555,
	425, 555,
	-2, 0,
	-1, 678,
	1, 558,
	420, 558,
	422, 558,
	424, 558,
	425, 558,
	-2, 0,
	-1, 682,
	1, 572,
	420, 572,
	422, 572,
	424, 572,
	425, 572,
	-2, 0,
	-1, 683,
	1, 574,
	420, 574,
	422, 574,
	424, 574,
	425, 574,
	-2, 0,
	-1, 711,
	127, 907,
	207, 907,
	238, 907,
	-2, 863,
	-1, 719,
	127, 906,
	207, 906,
	238, 906,
	-2, 861,
	-1, 746,
	421, 1766,
	-2, 1186,
	-1, 747,
	421, 1767,
	-2, 1187,
	-1, 776,
	421, 1466,
	-2, 1457,
	-1, 777,
	5, 1042,
	421, 1481,
	-2, 1472,
	-1, 778,
	421, 1482,
	-2, 1473,
	-1, 785,
	5, 1026,
	-2, 1502,
	-1, 786,
	5, 1027,
	-2, 1506,
	-1, 787,
	5, 1028,
	-2, 1505,
	-1, 788,
	5, 1029,
	-2, 1687,
	-1, 789,
	5, 1030,
	-2, 1596,
	-1, 790,
	5, 1031,
	-2, 1655,
	-1, 791,
	5, 1032,
	-2, 1657,
	-1, 792,
	5, 1033,
	-2, 1658,
	-1, 793,
	5, 1034,
	-2, 1659,
	-1, 794,
	5, 1035,
	-2, 1667,
	-1, 795,
	5, 1036,
	-2, 1699,
	-1, 796,
	5, 1037,
	-2, 1564,
	-1, 797,
	5, 1038,
	-2, 1501,
	-1, 798,
	5, 1039,
	-2, 1604,
	-1, 799,
	5, 1040,
	-2, 1605,
	-1, 800,
	5, 1041,
	-2, 1568,
	-1, 801,
	5, 1090,
	421, 1090,
	-2, 1733,
	-1, 821,
	5, 1063,
	-2, 1503,
	-1, 822,
	5, 1081,
	-2, 1530,
	-1, 824,
	5, 1055,
	-2, 1551,
	-1, 825,
	5, 1056,
	-2, 1552,
	-1, 826,
	5, 1047,
	-2, 1567,
	-1, 827,
	5, 1048,
	-2, 1569,
	-1, 828,
	5, 1049,
	-2, 1570,
	-1, 829,
	5, 1050,
	-2, 1571,
	-1, 830,
	5, 1014,
	-2, 1577,
	-1, 831,
	5, 1015,
	-2, 1578,
	-1, 832,
	5, 1078,
	-2, 1677,
	-1, 833,
	5, 1088,
	-2, 1689,
	-1, 834,
	5, 1053,
	-2, 1713,
	-1, 835,
	5, 1080,
	-2, 1714,
	-1, 836,
	5, 1062,
	-2, 1715,
	-1, 837,
	5, 1080,
	-2, 1716,
	-1, 838,
	5, 1080,
	-2, 1717,
	-1, 839,
	5, 1045,
	-2, 1720,
	-1, 840,
	5, 1045,
	-2, 1721,
	-1, 843,
	5, 1070,
	-2, 1725,
	-1, 845,
	5, 1046,
	-2, 1731,
	-1, 846,
	5, 1051,
	-2, 1732,
	-1, 848,
	5, 1045,
	-2, 1737,
	-1, 851,
	5, 1054,
	-2, 1742,
	-1, 852,
	5, 1052,
	-2, 1744,
	-1, 854,
	5, 1082,
	-2, 1746,
	-1, 855,
	5, 1084,
	-2, 1747,
	-1, 856,
	5, 1086,
	-2, 1748,
	-1, 859,
	5, 1077,
	-2, 1752,
	-1, 929,
	421, 1481,
	-2, 1472,
	-1, 946,
	282, 1454,
	414, 1454,
	-2, 1453,
	-1, 1095,
	257, 892,
	-2, 717,
	-1, 1104,
	241, 1476,
	-2, 0,
	-1, 1147,
	1, 289,
	420, 289,
	422, 289,
	424, 289,
	425, 289,
	-2, 866,
	-1, 1150,
	4, 1751,
	10, 1751,
	11, 1751,
	13, 1751,
	14, 1751,
	15, 1751,
	16, 1751,
	17, 1751,
	18, 1751,
	20, 1751,
	21, 1751,
	22, 1751,
	23, 1751,
	25, 1751,
	28, 1751,
	30, 1751,
	32, 1751,
	35, 1751,
	36, 1751,
	37, 1751,
	38, 1751,
	39, 1751,
	40, 1751,
	41, 1751,
	42, 1751,
	43, 1751,
	44, 1751,
	46, 1751,
	47, 1751,
	48, 1751,
	49, 1751,
	50, 1751,
	51, 1751,
	54, 1751,
	55, 1751,
	56, 1751,
	58, 1751,
	59, 1751,
	60, 1751,
	63, 1751,
	64, 1751,
	65, 1751,
	66, 1751,
	67, 1751,
	68, 1751,
	69, 1751,
	70, 1751,
	71, 1751,
	72, 1751,
	74, 1751,
	75, 1751,
	76, 1751,
	77, 1751,
	79, 1751,
	80, 1751,
	81, 1751,
	82, 1751,
	90, 1751,
	91, 1751,
	92, 1751,
	93, 1751,
	94, 1751,
	95, 1751,
	96, 1751,
	97, 1751,
	99, 1751,
	101, 1751,
	103, 1751,
	106, 1751,
	107, 1751,
	109, 1751,
	110, 1751,
	114, 1751,
	115, 1751,
	116, 1751,
	117, 1751,
	118, 1751,
	119, 1751,
	120, 1751,
	121, 1751,
	122, 1751,
	123, 1751,
	124, 1751,
	128, 1751,
	129, 1751,
	130, 1751,
	131, 1751,
	132, 1751,
	133, 1751,
	134, 1751,
	135, 1751,
	136, 1751,
	137, 1751,
	138, 1751,
	140, 1751,
	143, 1751,
	144, 1751,
	146, 1751,
	147, 1751,
	149, 1751,
	151, 1751,
	152, 1751,
	153, 1751,
	154, 1751,
	155, 1751,
	156, 1751,
	157, 1751,
	158, 1751,
	159, 1751,
	160, 1751,
	161, 1751,
	162, 1751,
	163, 1751,
	164, 1751,
	165, 1751,
	166, 1751,
	168, 1751,
	169, 1751,
	170, 1751,
	172, 1751,
	173, 1751,
	174, 1751,
	175, 1751,
	176, 1751,
	177, 1751,
	178, 1751,
	179, 1751,
	180, 1751,
	182, 1751,
	184, 1751,
	185, 1751,
	186, 1751,
	187, 1751,
	188, 1751,
	189, 1751,
	190, 1751,
	191, 1751,
	192, 1751,
	193, 1751,
	194, 1751,
	195, 1751,
	196, 1751,
	197, 1751,
	199, 1751,
	200, 1751,
	202, 1751,
	203, 1751,
	204, 1751,
	205, 1751,
	206, 1751,
	208, 1751,
	209, 1751,
	212, 1751,
	213, 1751,
	214, 1751,
	217, 1751,
	218, 1751,
	219, 1751,
	220, 1751,
	221, 1751,
	222, 1751,
	223, 1751,
	224, 1751,
	225, 1751,
	226, 1751,
	227, 1751,
	228, 1751,
	231, 1751,
	233, 1751,
	234, 1751,
	235, 1751,
	236, 1751,
	237, 1751,
	239, 1751,
	240, 1751,
	243, 1751,
	244, 1751,
	245, 1751,
	247, 1751,
	248, 1751,
	250, 1751,
	252, 1751,
	253, 1751,
	254, 1751,
	255, 1751,
	256, 1751,
	257, 1751,
	258, 1751,
	259, 1751,
	261, 1751,
	262, 1751,
	263, 1751,
	264, 1751,
	265, 1751,
	267, 1751,
	268, 1751,
	269, 1751,
	270, 1751,
	271, 1751,
	272, 1751,
	273, 1751,
	274, 1751,
	276, 1751,
	277, 1751,
	278, 1751,
	279, 1751,
	280, 1751,
	281, 1751,
	282, 1751,
	283, 1751,
	284, 1751,
	285, 1751,
	286, 1751,
	287, 1751,
	288, 1751,
	290, 1751,
	291, 1751,
	292, 1751,
	293, 1751,
	294, 1751,
	295, 1751,
	296, 1751,
	297, 1751,
	298, 1751,
	299, 1751,
	300, 1751,
	301, 1751,
	302, 1751,
	303, 1751,
	304, 1751,
	305, 1751,
	307, 1751,
	308, 1751,
	309, 1751,
	310, 1751,
	311, 1751,
	312, 1751,
	313, 1751,
	314, 1751,
	315, 1751,
	317, 1751,
	318, 1751,
	319, 1751,
	320, 1751,
	321, 1751,
	322, 1751,
	323, 1751,
	324, 1751,
	325, 1751,
	327, 1751,
	328, 1751,
	329, 1751,
	330, 1751,
	331, 1751,
	332, 1751,
	333, 1751,
	334, 1751,
	335, 1751,
	336, 1751,
	337, 1751,
	338, 1751,
	340, 1751,
	341, 1751,
	343, 1751,
	344, 1751,
	345, 1751,
	346, 1751,
	347, 1751,
	348, 1751,
	349, 1751,
	350, 1751,
	351, 1751,
	352, 1751,
	354, 1751,
	355, 1751,
	356, 1751,
	357, 1751,
	360, 1751,
	361, 1751,
	362, 1751,
	363, 1751,
	365, 1751,
	366, 1751,
	368, 1751,
	369, 1751,
	372, 1751,
	373, 1751,
	374, 1751,
	375, 1751,
	377, 1751,
	379, 1751,
	380, 1751,
	381, 1751,
	382, 1751,
	383, 1751,
	384, 1751,
	387, 1751,
	388, 1751,
	393, 1751,
	394, 1751,
	395, 1751,
	396, 1751,
	397, 1751,
	398, 1751,
	399, 1751,
	400, 1751,
	402, 1751,
	403, 1751,
	404, 1751,
	405, 1751,
	406, 1751,
	407, 1751,
	409, 1751,
	410, 1751,
	411, 1751,
	412, 1751,
	413, 1751,
	414, 1751,
	415, 1751,
	416, 1751,
	417, 1751,
	419, 1751,
	422, 1751,
	423, 1751,
	426, 1751,
	427, 1751,
	-2, 0,
	-1, 1168,
	142, 1662,
	358, 1662,
	404, 1662,
	423, 1662,
	-2, 0,
	-1, 1199,
	142, 1691,
	358, 1691,
	404, 1691,
	423, 1691,
	-2, 0,
	-1, 1200,
	187, 802,
	267, 802,
	271, 802,
	-2, 409,
	-1, 1277,
	127, 906,
	207, 906,
	238, 906,
	-2, 864,
	-1, 1361,
	113, 868,
	127, 868,
	181, 868,
	207, 868,
	238, 868,
	246, 868,
	370, 868,
	-2, 1229,
	-1, 1411,
	422, 1349,
	-2, 0,
	-1, 1419,
	187, 802,
	267, 802,
	271, 802,
	-2, 797,
	-1, 1448,
	422, 1349,
	-2, 0,
	-1, 1456,
	113, 868,
	127, 868,
	181, 868,
	207, 868,
	238, 868,
	246, 868,
	370, 868,
	-2, 973,
	-1, 1657,
	187, 802,
	267, 802,
	271, 802,
	-2, 411,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1125,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1126,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1127,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1128,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1129,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1130,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1131,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1132,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1144,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1145,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1146,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1151,
	-1, 1795,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1153,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1157,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1158,
	-1, 1799,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1159,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1160,
	-1, 1881,
	5, 1042,
	142, 1360,
	421, 1481,
	-2, 1472,
	-1, 1882,
	142, 1361,
	-2, 1709,
	-1, 1883,
	142, 1362,
	-2, 1591,
	-1, 1884,
	142, 1363,
	-2, 1531,
	-1, 1885,
	142, 1364,
	-2, 1559,
	-1, 1886,
	142, 1365,
	-2, 1590,
	-1, 1887,
	142, 1366,
	-2, 1654,
	-1, 1955,
	422, 1349,
	-2, 0,
	-1, 1965,
	1, 974,
	79, 974,
	113, 974,
	127, 974,
	143, 974,
	148, 974,
	150, 974,
	172, 974,
	181, 974,
	190, 974,
	203, 974,
	207, 974,
	224, 974,
	238, 974,
	241, 974,
	246, 974,
	289, 974,
	291, 974,
	370, 974,
	378, 974,
	390, 974,
	391, 974,
	401, 974,
	420, 974,
	422, 974,
	424, 974,
	425, 974,
	426, 974,
	-2, 973,
	-1, 1967,
	421, 1458,
	-2, 1470,
	-1, 2049,
	422, 1419,
	426, 1419,
	-2, 1446,
	-1, 2171,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1152,
	-1, 2172,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1154,
	-1, 2177,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1155,
	-1, 2406,
	257, 892,
	-2, 717,
	-1, 2471,
	187, 802,
	267, 802,
	271, 802,
	-2, 408,
	-1, 2486,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1156,
	-1, 2491,
	185, 0,
	186, 0,
	231, 0,
	-2, 1174,
	-1, 2552,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1204,
	-1, 2553,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1205,
	-1, 2554,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1206,
	-1, 2558,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1210,
	-1, 2559,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1211,
	-1, 2560,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1212,
	-1, 2599,
	421, 1459,
	-2, 1471,
	-1, 2713,
	185, 0,
	186, 0,
	231, 0,
	-2, 1175,
	-1, 2716,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1178,
	-1, 2717,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1180,
	-1, 2862,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1179,
	-1, 2863,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1181,
	-1, 2873,
	185, 0,
	-2, 1213,
	-1, 2962,
	185, 0,
	-2, 1214,
	-1, 3060,
	38, 0,
	160, 0,
	206, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1712,
}

const sqlPrivate = 57344

const sqlLast = 59541

var sqlAct = [...]int{

	778, 3059, 2815, 2648, 2901, 3068, 2075, 3122, 3035, 3022,
	3036, 3038, 3070, 3069, 2083, 2522, 1524, 2890, 2966, 2830,
	3058, 1752, 1079, 1137, 2853, 950, 2666, 2661, 2421, 2769,
	1812, 2877, 2205, 1280, 1053, 2072, 1587, 2165, 2671, 720,
	754, 209, 2784, 2609, 2207, 1959, 495, 2426, 2413, 2445,
	2443, 2103, 770, 495, 1133, 2415, 2047, 2314, 1169, 2051,
	495, 1446, 1427, 495, 965, 2084, 495, 209, 2272, 495,
	495, 2290, 2747, 1538, 1539, 1970, 495, 2032, 1535, 2050,
	1101, 1544, 2301, 1960, 495, 1140, 1366, 1979, 959, 490,
	1949, 2575, 728, 130, 1485, 544, 2271, 1743, 2967, 1852,
	1369, 1824, 1455, 1738, 2161, 1682, 1588, 1501, 943, 2331,
	1507, 1547, 2425, 1419, 1962, 761, 1466, 1459, 2389, 1464,
	1428, 1825, 73, 541, 2006, 2608, 1918, 1536, 2007, 1834,
	1809, 2033, 1202, 1399, 1846, 1130, 914, 579, 2048, 210,
	2077, 1397, 952, 211, 919, 2054, 1148, 1941, 2816, 820,
	1926, 1437, 492, 130, 896, 1877, 491, 136, 1356, 1281,
	627, 205, 1279, 137, 775, 1681, 495, 495, 582, 769,
	607, 1120, 1554, 621, 538, 1117, 1477, 894, 1057, 656,
	592, 1285, 719, 2591, 2192, 1418, 2592, 2104, 1078, 1560,
	1562, 1562, 1562, 475, 774, 724, 2034, 478, 495, 495,
	495, 955, 495, 495, 968, 968, 600, 3149, 1072, 2076,
	724, 1935, 3143, 495, 495, 1447, 1935, 2034, 3142, 475,
	3119, 1574, 1935, 478, 2783, 3116, 2484, 2461, 594, 1516,
	1060, 565, 28, 3094, 3088, 3087, 3084, 2783, 1935, 1935,
	3085, 2433, 2578, 3081, 3078, 2432, 734, 3082, 1516, 3056,
	3055, 3054, 3053, 1516, 1516, 1574, 1574, 962, 3017, 3004,
	2997, 725, 2114, 1516, 2783, 1935, 2995, 130, 1296, 1297,
	2783, 2402, 1510, 2993, 1339, 1340, 1341, 2783, 2964, 2198,
	897, 897, 2114, 2610, 1928, 2199, 948, 3018, 712, 946,
	1849, 911, 1185, 1299, 711, 2947, 1345, 2937, 2932, 2687,
	2930, 2783, 1516, 2920, 2783, 2919, 2912, 1516, 2911, 1516,
	1516, 2883, 2783, 2864, 2950, 1516, 2810, 2114, 1298, 729,
	1935, 2806, 1574, 917, 861, 1935, 1318, 2782, 900, 2715,
	901, 2783, 768, 2114, 936, 940, 945, 2685, 2677, 1174,
	1826, 2678, 2678, 1077, 898, 2587, 2581, 2500, 1850, 2588,
	1935, 1516, 1059, 2495, 2451, 2287, 1058, 1935, 2394, 1935,
	2239, 1516, 2238, 1071, 1935, 475, 1935, 2244, 2245, 478,
	2232, 2106, 2231, 2132, 2233, 1935, 1935, 1935, 2113, 2100,
	2043, 1934, 2114, 1935, 1516, 1935, 1321, 1322, 1323, 1324,
	2206, 2578, 1927, 1660, 1578, 1304, 2244, 2245, 1579, 2262,
	2263, 2264, 2687, 2022, 171, 1516, 28, 1175, 1968, 2394,
	2164, 2143, 1851, 1848, 2712, 1515, 1423, 1829, 1336, 1346,
	1056, 174, 1326, 1327, 1328, 2434, 1563, 1563, 1563, 1167,
	1166, 1165, 1164, 1163, 1162, 1161, 1160, 171, 1159, 1158,
	173, 1157, 1156, 1155, 2435, 2762, 1952, 1154, 1153, 1152,
	1151, 902, 899, 718, 2259, 717, 716, 2244, 2245, 715,
	2262, 2263, 2264, 767, 1334, 714, 1679, 710, 709, 708,
	707, 1319, 706, 173, 705, 2711, 704, 703, 702, 701,
	700, 172, 696, 695, 694, 654, 653, 652, 651, 650,
	165, 649, 171, 648, 2250, 647, 2244, 2245, 166, 646,
	1853, 645, 644, 643, 495, 495, 642, 495, 955, 955,
	495, 1175, 171, 495, 172, 2259, 495, 641, 640, 138,
	639, 638, 495, 2250, 637, 2432, 636, 635, 173, 634,
	633, 632, 495, 495, 495, 495, 495, 955, 955, 1325,
	631, 616, 615, 614, 955, 613, 612, 611, 173, 572,
	529, 528, 138, 2244, 2245, 1516, 1320, 501, 776, 500,
	40, 1141, 499, 1367, 2397, 1570, 1561, 1722, 1927, 172,
	2260, 2265, 481, 480, 44, 495, 1175, 479, 165, 1337,
	1296, 1297, 195, 194, 2250, 193, 166, 192, 495, 172,
	191, 190, 1847, 1095, 1098, 189, 1094, 188, 165, 2260,
	187, 1106, 571, 186, 185, 1299, 166, 138, 184, 183,
	495, 182, 181, 1066, 180, 1091, 2119, 179, 178, 1867,
	177, 495, 176, 2250, 1134, 175, 1958, 138, 2720, 1865,
	1298, 573, 2265, 727, 2679, 2596, 2327, 915, 2204, 2194,
	59, 575, 2153, 2044, 2037, 60, 1685, 1463, 1863, 1373,
	966, 1054, 1861, 1216, 1454, 2261, 1859, 1335, 1119, 1081,
	2260, 955, 1062, 3075, 3057, 1338, 725, 1309, 1307, 1308,
	1300, 1301, 1302, 1303, 1305, 1306, 1292, 3040, 63, 3029,
	2250, 2080, 2957, 2953, 2261, 2933, 1149, 2851, 2746, 2951,
	2900, 2745, 2739, 2838, 1296, 1297, 2732, 2731, 495, 2260,
	2730, 2726, 2725, 2724, 1124, 1127, 2723, 1304, 2698, 2696,
	2595, 2572, 2571, 2570, 2508, 2393, 1065, 2326, 1070, 1299,
	1076, 2317, 2283, 2270, 2243, 2240, 2237, 1296, 1297, 2236,
	2234, 1210, 923, 2212, 2211, 1214, 1200, 2193, 2244, 2245,
	1965, 1292, 1820, 1521, 1298, 2261, 1224, 1519, 910, 1584,
	1291, 1278, 1299, 3147, 3130, 1377, 1277, 3129, 1296, 1297,
	1080, 1329, 1330, 1331, 1339, 1340, 1341, 2253, 2254, 2246,
	2247, 2248, 2249, 2251, 2252, 2524, 1332, 1298, 1370, 3048,
	1359, 3043, 64, 1299, 2261, 1318, 1345, 2999, 2256, 2257,
	2258, 2990, 2989, 2985, 1197, 2255, 2253, 2254, 2246, 2247,
	2248, 2249, 2251, 2252, 2984, 2978, 2975, 2969, 1298, 139,
	66, 2949, 67, 2948, 1814, 2896, 1318, 2875, 2341, 2244,
	2245, 1304, 1178, 1315, 2825, 2820, 2818, 2805, 2788, 1183,
	171, 2744, 2688, 2664, 1276, 2655, 2654, 1217, 2477, 2652,
	2629, 574, 2628, 2618, 110, 1321, 1322, 1323, 1324, 2256,
	2257, 2258, 2617, 2583, 1304, 2490, 2255, 2253, 2254, 2246,
	2247, 2248, 2249, 2251, 2252, 2250, 173, 1821, 2455, 2457,
	2378, 1680, 2008, 2837, 2362, 725, 1321, 1322, 1323, 1324,
	2160, 1326, 1327, 1328, 2341, 1304, 712, 2340, 2286, 171,
	2221, 495, 711, 2220, 2217, 1360, 495, 2254, 2246, 2247,
	2248, 2249, 2251, 2252, 1288, 1289, 2186, 172, 1336, 1346,
	1293, 1400, 1326, 1327, 1328, 1405, 165, 171, 2121, 1955,
	1425, 1946, 1933, 495, 166, 173, 1296, 1297, 1857, 1530,
	1319, 1385, 1384, 1342, 1343, 1383, 1382, 171, 1381, 1448,
	1426, 1313, 1314, 1417, 1416, 138, 2250, 1411, 1410, 1409,
	1407, 1299, 1406, 173, 1334, 2246, 2247, 2248, 2249, 2251,
	2252, 1319, 1403, 1296, 1297, 1402, 172, 1431, 1432, 1393,
	1392, 1391, 1390, 173, 1401, 165, 1298, 1395, 2307, 1344,
	1398, 1389, 1408, 166, 1302, 1303, 1305, 1306, 1299, 1388,
	1387, 1370, 1386, 1333, 172, 1374, 1359, 1196, 1325, 1180,
	1444, 1145, 2850, 165, 2079, 2718, 130, 2695, 2244, 2245,
	897, 166, 2590, 1298, 172, 1320, 2586, 2197, 2116, 1947,
	1453, 2453, 2260, 165, 2244, 2245, 1357, 1679, 1460, 1325,
	2416, 166, 138, 2131, 2843, 2034, 2690, 1445, 1213, 1866,
	2689, 2593, 1414, 725, 1454, 1679, 1320, 1412, 1415, 1864,
	1388, 1191, 138, 1413, 1388, 1679, 955, 495, 2926, 2382,
	2377, 1422, 1274, 968, 2373, 1457, 1450, 1420, 1862, 1337,
	917, 1484, 1860, 1424, 2361, 2278, 1858, 2277, 2276, 2130,
	2954, 495, 968, 495, 495, 1472, 2952, 2275, 2170, 1653,
	1304, 209, 1585, 1364, 2010, 1209, 1300, 1301, 1302, 1303,
	1305, 1306, 2627, 892, 1379, 495, 495, 2261, 1531, 2899,
	2104, 1508, 495, 1540, 495, 1666, 495, 1326, 1327, 1328,
	495, 1478, 2463, 2372, 1543, 1497, 1309, 1307, 1308, 1300,
	1301, 1302, 1303, 1305, 1306, 2250, 2878, 893, 2202, 1503,
	3076, 1513, 2248, 2249, 2251, 2252, 2076, 1335, 2526, 1835,
	1310, 1311, 1317, 1316, 1312, 1338, 1396, 1309, 1307, 1308,
	1300, 1301, 1302, 1303, 1305, 1306, 1319, 909, 2191, 495,
	955, 1376, 3086, 3083, 209, 495, 495, 2428, 2604, 1221,
	3032, 1551, 955, 2662, 2107, 209, 495, 1549, 200, 495,
	495, 1582, 3077, 1267, 537, 495, 1059, 3110, 508, 1527,
	1058, 518, 1645, 3109, 2797, 1643, 1849, 888, 3003, 475,
	2133, 2260, 2473, 478, 886, 723, 1253, 968, 2255, 2253,
	2254, 2246, 2247, 2248, 2249, 2251, 2252, 495, 1265, 1707,
	1972, 1252, 495, 1593, 1558, 1514, 1467, 209, 495, 1468,
	495, 2632, 495, 475, 495, 3146, 495, 478, 1119, 2925,
	1434, 1320, 1534, 2924, 1211, 1580, 495, 2922, 495, 2921,
	2073, 2642, 1675, 2637, 1850, 2636, 495, 495, 495, 1667,
	2601, 2600, 1266, 519, 2814, 884, 882, 1647, 536, 879,
	2216, 2454, 507, 722, 2215, 2214, 2213, 1553, 1556, 2173,
	2105, 1981, 2062, 2027, 2021, 495, 2261, 2017, 1998, 968,
	1212, 1972, 1670, 1669, 1479, 1679, 1676, 1796, 1421, 1055,
	1913, 1912, 1971, 1657, 1565, 1725, 1219, 1567, 1911, 1910,
	1569, 1469, 1754, 1719, 1572, 2956, 475, 1187, 1851, 1848,
	478, 1476, 2476, 1306, 1471, 1581, 698, 475, 1678, 2031,
	2647, 478, 1197, 1083, 1583, 1720, 1644, 1714, 724, 1593,
	1593, 3002, 588, 1480, 1481, 1654, 2042, 1094, 1687, 1991,
	606, 3051, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305,
	1306, 605, 1692, 1811, 968, 1984, 1716, 2903, 1683, 1671,
	1449, 1818, 1990, 1473, 915, 2136, 1816, 1689, 606, 475,
	1557, 1248, 1853, 478, 1251, 2515, 1673, 2138, 1698, 1811,
	2620, 2793, 3014, 1744, 1751, 2518, 2117, 2423, 2162, 2163,
	2246, 2247, 2248, 2249, 2251, 2252, 1853, 1188, 1460, 1835,
	3101, 2369, 495, 3072, 495, 1190, 2364, 2139, 3132, 3015,
	2014, 2252, 1680, 2008, 1496, 2424, 1474, 1482, 1249, 2137,
	1724, 1723, 2981, 712, 1295, 1562, 712, 712, 968, 1734,
	1680, 2008, 1735, 1736, 495, 1742, 495, 1195, 1273, 2516,
	1680, 2008, 2381, 495, 968, 1721, 2474, 2355, 495, 3109,
	1474, 1832, 721, 521, 520, 923, 495, 1206, 196, 923,
	1613, 1394, 725, 2423, 495, 1499, 1577, 1876, 725, 2357,
	1227, 2353, 1830, 1853, 2638, 2064, 495, 2018, 1718, 955,
	1983, 1964, 3100, 1474, 530, 1612, 2859, 1674, 1847, 1517,
	495, 968, 2869, 1590, 1822, 2472, 495, 495, 2928, 1354,
	2219, 2465, 2700, 1963, 1942, 2352, 2630, 1973, 1525, 2356,
	3125, 495, 2791, 1909, 495, 3073, 1828, 1655, 897, 1593,
	724, 2914, 2691, 2707, 1985, 1987, 1235, 1853, 1186, 1948,
	2061, 3071, 1264, 1956, 1957, 1220, 1938, 1207, 495, 1888,
	495, 1208, 495, 890, 2028, 495, 889, 495, 201, 495,
	1953, 495, 495, 880, 495, 955, 955, 955, 1923, 2000,
	955, 725, 1931, 1932, 2019, 946, 495, 1706, 917, 1943,
	1944, 1939, 1922, 2001, 535, 1470, 2468, 1969, 201, 2098,
	2099, 2029, 3074, 1457, 2015, 1982, 527, 2855, 917, 1284,
	2621, 2860, 1993, 1976, 1658, 1201, 2009, 2011, 2012, 2013,
	1999, 1612, 1612, 1082, 762, 2094, 502, 3099, 522, 1590,
	1590, 2000, 2016, 1467, 880, 881, 1468, 2904, 880, 2792,
	1807, 3108, 1529, 202, 3106, 2829, 744, 495, 2827, 2070,
	1500, 2068, 1533, 1433, 1184, 1059, 1173, 512, 498, 2035,
	2097, 1805, 2096, 1686, 3133, 476, 1504, 1189, 475, 534,
	493, 130, 478, 202, 2089, 2742, 699, 514, 2175, 130,
	505, 1563, 2109, 1817, 540, 2467, 968, 583, 495, 1691,
	540, 476, 587, 583, 603, 2122, 495, 2082, 495, 2464,
	610, 2854, 2101, 2386, 1810, 3123, 1364, 2095, 630, 1995,
	1680, 1677, 2147, 1512, 2148, 1839, 512, 3138, 1469, 495,
	495, 495, 1149, 495, 2108, 2126, 2102, 2127, 2118, 2390,
	2913, 1471, 204, 2894, 1875, 2024, 2091, 1261, 2092, 505,
	2093, 1793, 495, 1880, 1880, 1753, 203, 1891, 1893, 511,
	1898, 1977, 2039, 2120, 2041, 1354, 1228, 1801, 1921, 1283,
	1294, 1401, 204, 1408, 2780, 1802, 3124, 1925, 1803, 2972,
	2603, 2466, 1808, 1194, 2155, 2123, 203, 2337, 1170, 2561,
	1473, 1398, 2333, 199, 2125, 1236, 2078, 1440, 2078, 2777,
	540, 540, 2134, 2856, 537, 2071, 3126, 130, 930, 1206,
	1206, 130, 2069, 1229, 1552, 1474, 1226, 2743, 511, 532,
	1665, 1612, 1542, 199, 1977, 1541, 1443, 1262, 197, 1590,
	1836, 1537, 493, 493, 493, 2176, 960, 493, 2150, 495,
	2778, 1506, 2152, 2315, 1940, 2796, 1532, 476, 1061, 1282,
	1730, 2087, 2795, 2514, 533, 2195, 1283, 1441, 197, 1505,
	3023, 3137, 200, 1711, 686, 2002, 1900, 508, 2159, 2157,
	1661, 2667, 198, 1791, 1794, 523, 2831, 1474, 2895, 1977,
	1284, 1663, 506, 2343, 733, 2342, 1502, 2168, 536, 1207,
	1207, 1263, 200, 1208, 1208, 1688, 2304, 1664, 531, 1937,
	1936, 2046, 198, 2359, 535, 504, 2045, 722, 1480, 1481,
	1804, 2649, 915, 2395, 2562, 598, 3, 503, 1806, 1790,
	1967, 2563, 524, 1105, 591, 1104, 508, 1172, 1171, 2183,
	2316, 738, 915, 3113, 2174, 2817, 1282, 570, 36, 2892,
	968, 506, 1731, 2288, 2385, 1442, 513, 725, 2295, 2296,
	2181, 507, 687, 1116, 569, 35, 495, 2748, 525, 495,
	526, 509, 568, 32, 504, 2576, 2391, 495, 495, 968,
	2893, 2773, 495, 2201, 2774, 1856, 503, 2826, 1114, 534,
	495, 495, 495, 2794, 1271, 3115, 495, 2874, 2741, 495,
	2003, 2004, 1218, 577, 686, 2324, 495, 495, 495, 495,
	495, 2646, 1470, 2273, 2311, 513, 2489, 923, 2776, 495,
	507, 2442, 2320, 2321, 733, 1258, 495, 2779, 2235, 2185,
	509, 567, 79, 2124, 566, 78, 2026, 923, 495, 955,
	1997, 1523, 495, 482, 1792, 563, 23, 1272, 968, 2306,
	1593, 1181, 495, 2309, 2274, 2334, 2178, 2312, 968, 564,
	24, 2151, 2280, 2281, 2282, 968, 2292, 2179, 2289, 2146,
	2310, 2184, 562, 30, 2299, 2300, 2128, 495, 2305, 495,
	1708, 495, 1695, 955, 495, 955, 955, 955, 2325, 495,
	1646, 495, 687, 688, 1705, 495, 2323, 2318, 917, 2363,
	495, 934, 495, 1380, 2338, 2328, 917, 917, 2339, 495,
	917, 596, 597, 1256, 537, 1855, 2345, 3067, 2349, 2350,
	589, 590, 36, 2775, 2371, 495, 495, 1094, 955, 532,
	2374, 2430, 1246, 2358, 1270, 2418, 2644, 1472, 2379, 35,
	2419, 2365, 2448, 1511, 1115, 495, 2370, 32, 493, 1089,
	1244, 493, 2144, 2375, 493, 2366, 2380, 960, 2396, 2367,
	1109, 2460, 1472, 2368, 533, 1257, 493, 1242, 2403, 1113,
	2405, 2406, 2407, 1094, 495, 2189, 493, 493, 493, 493,
	960, 878, 1364, 2417, 576, 2392, 689, 1593, 3020, 495,
	2399, 1508, 2404, 561, 21, 2459, 2766, 1508, 536, 2180,
	559, 20, 2209, 2210, 560, 19, 79, 2182, 531, 78,
	549, 15, 2625, 2450, 2780, 968, 2429, 1240, 2623, 630,
	23, 2436, 725, 688, 690, 968, 550, 16, 2458, 483,
	484, 1704, 493, 2602, 24, 558, 57, 2412, 2410, 2777,
	495, 2452, 2770, 2492, 1238, 2074, 2360, 30, 2066, 2065,
	1232, 557, 56, 1255, 1192, 2768, 2469, 2470, 2063, 1593,
	2772, 2510, 2511, 2512, 130, 630, 2060, 2471, 1576, 2475,
	548, 55, 1245, 1112, 2330, 2376, 1921, 1921, 1921, 1977,
	2778, 2285, 1575, 2480, 1573, 1571, 2527, 1568, 2482, 2344,
	1243, 2347, 1566, 1564, 2297, 2478, 1593, 1593, 556, 12,
	1522, 2437, 2438, 2439, 1520, 2440, 2441, 1241, 2771, 486,
	485, 2400, 1509, 1498, 2496, 1495, 689, 1593, 1593, 2408,
	2502, 1483, 1612, 1475, 2503, 883, 885, 547, 50, 2414,
	1590, 495, 1090, 2942, 2517, 2519, 2520, 906, 2523, 3110,
	2536, 2529, 493, 2849, 2848, 1684, 495, 1286, 968, 2944,
	1744, 2530, 1593, 1989, 690, 487, 488, 1239, 2538, 907,
	2565, 2166, 2540, 554, 47, 2676, 2597, 2812, 21, 555,
	48, 1744, 2541, 546, 49, 20, 2589, 553, 7, 19,
	552, 6, 1972, 2427, 1237, 15, 2030, 2025, 2577, 2566,
	1231, 2129, 2427, 1988, 578, 2020, 2294, 551, 38, 130,
	1996, 16, 2574, 2582, 545, 37, 2569, 2579, 2580, 2983,
	57, 2773, 915, 1111, 2774, 495, 495, 1972, 495, 1363,
	915, 915, 2633, 495, 915, 2322, 56, 1287, 1986, 2598,
	2167, 968, 2785, 968, 2639, 1230, 955, 2959, 2640, 908,
	2594, 2749, 2585, 2643, 2656, 55, 2005, 2606, 2776, 1651,
	1652, 1992, 1290, 495, 2023, 2631, 2645, 2779, 2680, 1612,
	1994, 2669, 3019, 599, 1296, 1297, 2823, 1590, 2081, 2067,
	3121, 2673, 2672, 12, 917, 2059, 1924, 1656, 1586, 2449,
	3136, 1367, 495, 2000, 2694, 968, 495, 495, 968, 495,
	2668, 2244, 2245, 2521, 2650, 1296, 1297, 495, 2699, 2653,
	2660, 2658, 50, 2659, 2388, 968, 2674, 923, 2141, 2140,
	2456, 2388, 2670, 2141, 1298, 923, 923, 1436, 2681, 923,
	2142, 2663, 2704, 2665, 1890, 2682, 2615, 2651, 1845, 2692,
	2693, 1612, 1223, 1467, 2721, 610, 1468, 1222, 47, 1590,
	540, 2709, 2513, 2705, 48, 495, 1377, 2714, 49, 2701,
	1296, 1297, 7, 2775, 1375, 6, 2614, 2624, 2841, 2626,
	2684, 1452, 1269, 1593, 2697, 930, 1268, 493, 1612, 1612,
	1260, 2292, 38, 1259, 2702, 1299, 1590, 1590, 1254, 37,
	1250, 1440, 1247, 1233, 1529, 1193, 1659, 891, 697, 1612,
	1612, 2902, 3031, 2982, 684, 2710, 2351, 1590, 1590, 1694,
	1298, 1234, 1696, 917, 495, 2308, 1945, 3013, 2727, 2218,
	1443, 2965, 2868, 1854, 968, 495, 1378, 968, 1469, 53,
	2753, 495, 495, 495, 1612, 2611, 757, 2740, 1438, 2767,
	2605, 1471, 1590, 2053, 2052, 971, 1668, 779, 1879, 495,
	1745, 1441, 781, 1591, 495, 2573, 495, 784, 783, 495,
	495, 495, 495, 495, 782, 2790, 1592, 495, 495, 955,
	2759, 2499, 1439, 968, 1404, 2800, 2801, 955, 2754, 2756,
	780, 2506, 2751, 2752, 2786, 495, 495, 1589, 1146, 2303,
	1473, 2085, 2765, 674, 1672, 1815, 1833, 2200, 1371, 955,
	2813, 2821, 749, 1831, 2686, 2755, 1179, 748, 1977, 495,
	2313, 476, 2422, 2836, 2757, 1729, 2158, 1726, 495, 495,
	955, 955, 2622, 510, 2833, 2241, 2750, 1144, 2760, 1906,
	2835, 1899, 1895, 2635, 1275, 1061, 2834, 493, 1528, 1442,
	2824, 2764, 2822, 1355, 2858, 476, 2087, 2807, 2086, 2641,
	2842, 968, 1215, 2832, 2809, 2419, 2840, 1094, 917, 1548,
	1548, 2431, 2115, 2811, 1737, 2799, 493, 2844, 493, 2845,
	493, 905, 2804, 2789, 540, 904, 2808, 1474, 2861, 903,
	3037, 3034, 2857, 1662, 2135, 2867, 1348, 753, 2293, 2398,
	1087, 495, 1347, 968, 887, 2974, 1205, 495, 915, 495,
	1204, 968, 495, 1465, 2599, 2846, 2847, 1203, 2819, 2336,
	495, 2876, 2615, 2881, 2882, 3131, 968, 2619, 170, 167,
	2828, 169, 2889, 630, 168, 2384, 2302, 1593, 476, 1061,
	583, 82, 34, 33, 109, 2616, 2886, 2907, 108, 476,
	1061, 107, 2614, 960, 493, 1612, 106, 2615, 105, 630,
	104, 103, 2906, 1590, 2908, 2634, 2887, 2905, 495, 2615,
	495, 102, 101, 955, 100, 99, 98, 2634, 495, 97,
	96, 2634, 95, 94, 93, 2885, 2634, 2614, 92, 91,
	1593, 630, 90, 89, 2943, 2927, 493, 2884, 2940, 2614,
	968, 476, 493, 923, 493, 88, 493, 87, 493, 86,
	493, 85, 1470, 84, 2946, 626, 2672, 623, 2888, 495,
	1709, 2945, 1710, 2941, 2763, 495, 1977, 2939, 81, 80,
	493, 493, 493, 495, 2955, 31, 26, 915, 113, 114,
	923, 25, 77, 76, 2916, 2977, 29, 2798, 2958, 2839,
	2971, 966, 2963, 2419, 1054, 2803, 18, 11, 2970, 630,
	923, 17, 495, 495, 22, 135, 134, 133, 1593, 495,
	2968, 132, 923, 131, 14, 2994, 923, 2996, 13, 1977,
	955, 923, 128, 2980, 2929, 495, 2931, 129, 2615, 955,
	955, 2935, 2979, 495, 127, 495, 2988, 495, 126, 125,
	124, 123, 2427, 10, 2998, 3000, 8, 2991, 3001, 3010,
	112, 3011, 3007, 3008, 3006, 3009, 495, 9, 2614, 495,
	3026, 2852, 495, 2615, 968, 2615, 2462, 70, 2917, 2918,
	2615, 71, 923, 27, 43, 3027, 3039, 42, 3044, 3046,
	3045, 1819, 3047, 41, 111, 3033, 161, 160, 159, 158,
	154, 3052, 1363, 2614, 157, 2614, 155, 3028, 156, 495,
	2614, 3050, 153, 122, 163, 162, 151, 148, 150, 152,
	149, 147, 2987, 164, 121, 3066, 3064, 3065, 120, 1435,
	119, 118, 915, 2761, 495, 117, 610, 3090, 540, 3091,
	1977, 3092, 495, 3079, 3005, 2934, 116, 1905, 5, 2,
	3089, 1, 3098, 930, 0, 0, 3095, 0, 495, 1612,
	0, 731, 0, 686, 0, 0, 0, 1590, 540, 0,
	540, 2616, 3105, 930, 3107, 3104, 0, 493, 0, 3111,
	2880, 3112, 1980, 733, 3117, 3118, 3039, 3114, 0, 0,
	493, 0, 3120, 0, 0, 3096, 3097, 0, 493, 0,
	0, 0, 0, 0, 0, 0, 2616, 3128, 3127, 1486,
	493, 0, 1612, 3135, 3134, 3049, 0, 732, 2616, 2910,
	1590, 0, 2110, 0, 493, 0, 1490, 923, 3141, 0,
	476, 2036, 0, 40, 3144, 3145, 2923, 0, 0, 0,
	0, 1436, 3150, 0, 0, 2049, 0, 44, 1061, 0,
	0, 687, 0, 0, 2615, 0, 0, 2865, 0, 0,
	0, 0, 1296, 1297, 3093, 0, 923, 1487, 0, 0,
	736, 0, 1980, 0, 540, 2111, 493, 0, 0, 493,
	0, 493, 0, 493, 2614, 493, 493, 1299, 960, 0,
	1612, 0, 0, 0, 0, 2986, 1733, 0, 1590, 2865,
	1980, 923, 0, 2615, 2112, 1440, 0, 1753, 0, 0,
	0, 0, 1298, 923, 575, 0, 0, 0, 0, 0,
	0, 0, 1753, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 2614, 1443, 0, 0, 2616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1367, 0,
	0, 63, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 0, 0, 0, 1441, 572, 0, 2634, 0,
	0, 0, 2616, 0, 2616, 0, 0, 40, 0, 2616,
	0, 0, 688, 0, 0, 0, 1439, 0, 0, 1304,
	3016, 44, 1492, 1493, 0, 0, 1054, 0, 0, 0,
	0, 0, 493, 1488, 0, 0, 0, 0, 0, 0,
	1061, 0, 1061, 0, 0, 0, 1326, 1327, 1328, 571,
	3041, 3042, 1901, 0, 0, 2087, 0, 0, 0, 0,
	1489, 0, 923, 493, 493, 493, 0, 493, 0, 0,
	0, 2244, 2245, 0, 2262, 2263, 2264, 0, 573, 0,
	0, 0, 0, 1442, 0, 64, 493, 59, 575, 2494,
	0, 0, 60, 923, 0, 1319, 0, 923, 0, 923,
	0, 0, 0, 730, 923, 689, 0, 0, 0, 0,
	2634, 0, 139, 66, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 2259,
	0, 0, 0, 171, 496, 0, 1494, 0, 0, 0,
	0, 0, 0, 690, 574, 0, 0, 110, 0, 0,
	1753, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 1061, 0, 208, 1905, 1905, 0, 0,
	1320, 0, 0, 2616, 0, 0, 0, 0, 0, 0,
	3139, 3140, 860, 0, 0, 0, 0, 0, 2250, 0,
	0, 208, 0, 0, 0, 923, 0, 0, 3148, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 64,
	0, 0, 2616, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 1067, 2265, 1073, 138, 0,
	0, 0, 0, 0, 0, 0, 139, 66, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1905,
	1905, 1905, 0, 930, 2260, 0, 0, 171, 923, 0,
	489, 930, 930, 0, 0, 930, 0, 0, 574, 0,
	540, 110, 572, 540, 1300, 1301, 1302, 1303, 1305, 1306,
	0, 540, 540, 40, 0, 0, 540, 0, 0, 0,
	0, 0, 0, 173, 493, 1980, 2332, 44, 0, 0,
	1980, 0, 0, 2332, 0, 0, 0, 923, 0, 0,
	1980, 2332, 1980, 2332, 2332, 956, 0, 0, 969, 969,
	0, 0, 0, 493, 0, 571, 0, 0, 0, 1177,
	1528, 0, 0, 0, 172, 0, 1182, 0, 0, 2261,
	0, 0, 493, 165, 0, 0, 960, 0, 0, 0,
	0, 166, 0, 0, 573, 0, 493, 0, 0, 0,
	2244, 2245, 0, 59, 575, 736, 2187, 2188, 60, 736,
	0, 0, 138, 957, 0, 0, 970, 970, 0, 0,
	0, 1548, 0, 1548, 0, 493, 0, 0, 493, 0,
	0, 0, 0, 493, 0, 493, 0, 0, 0, 960,
	0, 63, 0, 0, 1980, 0, 540, 0, 0, 0,
	0, 0, 938, 1980, 0, 0, 0, 964, 2259, 0,
	0, 0, 0, 1296, 1297, 0, 0, 0, 0, 2446,
	1061, 1901, 1901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2256, 2257, 2258, 0, 0, 1299, 1061,
	2255, 2253, 2254, 2246, 2247, 2248, 2249, 2251, 2252, 2267,
	2268, 2269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 2479, 1349,
	1350, 1351, 1352, 1353, 0, 0, 0, 2250, 0, 0,
	0, 0, 1362, 493, 0, 0, 0, 0, 0, 0,
	1372, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1905, 1905, 0, 1901, 1901, 1901, 0, 0, 0,
	0, 0, 139, 66, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 2525, 0, 0, 0, 0, 0,
	1304, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 2149, 0, 2260, 574, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 1327, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 1905, 1905, 1905, 1905, 1905, 1905, 1905,
	1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,
	1905, 1905, 0, 1905, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 956, 0, 0, 1319, 0, 0, 930,
	172, 0, 0, 0, 0, 540, 0, 0, 0, 165,
	0, 0, 0, 1429, 1429, 1429, 0, 166, 2261, 0,
	540, 956, 956, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 2613, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 957, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 1452, 0, 0, 0, 0, 1452, 0, 957,
	957, 1320, 0, 0, 0, 0, 957, 0, 1085, 1980,
	1548, 0, 1548, 0, 1103, 0, 0, 493, 0, 0,
	0, 2487, 2488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 1123, 1123, 964,
	0, 0, 0, 0, 0, 0, 0, 1980, 930, 2255,
	2253, 2254, 2246, 2247, 2248, 2249, 2251, 2252, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	960, 493, 0, 493, 0, 0, 1901, 1901, 0, 0,
	0, 493, 1176, 2542, 2543, 2544, 2545, 2546, 2547, 2548,
	2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558,
	2559, 2560, 0, 2564, 1308, 1300, 1301, 1302, 1303, 1305,
	1306, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1901, 1901,
	1901, 1901, 1901, 1901, 1901, 1901, 1901, 1901, 1901, 1901,
	1901, 1901, 1901, 1901, 1901, 1901, 1901, 0, 1901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 0, 0, 0, 0, 1061, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	0, 0, 0, 0, 0, 1980, 2332, 1980, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2613, 1061, 0, 0, 0, 0, 1980, 0,
	2332, 736, 736, 1061, 1061, 493, 1980, 2332, 0, 0,
	0, 493, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2613, 0, 1061,
	2049, 0, 0, 0, 0, 0, 0, 0, 0, 2613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1980, 0, 0, 0, 0, 0, 0,
	0, 0, 2446, 2446, 0, 0, 0, 0, 0, 0,
	0, 0, 1727, 0, 1732, 0, 0, 0, 0, 0,
	1739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 0, 1795, 0, 1797, 1798,
	1799, 1800, 0, 0, 0, 540, 0, 0, 1905, 0,
	0, 1980, 0, 2332, 0, 0, 2891, 1823, 0, 0,
	0, 0, 0, 0, 493, 1362, 0, 0, 2613, 0,
	542, 0, 0, 0, 0, 0, 0, 2244, 2245, 0,
	2262, 2263, 2264, 0, 0, 1905, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 572, 0, 2493, 0, 1461, 0, 1452,
	0, 0, 0, 2613, 40, 2613, 0, 0, 0, 1897,
	2613, 1908, 493, 0, 493, 0, 1914, 1919, 44, 0,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 2259, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 2525, 0, 208, 0, 0, 0, 540,
	0, 0, 0, 0, 0, 573, 0, 2891, 0, 0,
	0, 1905, 0, 0, 59, 575, 0, 0, 957, 60,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 2250, 0, 1980, 2332, 0, 0,
	0, 1452, 0, 493, 970, 0, 0, 0, 0, 2038,
	0, 2040, 63, 0, 0, 0, 0, 0, 0, 2332,
	0, 0, 0, 0, 0, 0, 0, 1061, 0, 1061,
	0, 493, 0, 0, 956, 0, 0, 0, 208, 0,
	0, 0, 2265, 0, 0, 0, 956, 1526, 2873, 208,
	3024, 0, 0, 1061, 0, 0, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2260, 0, 0, 0, 2613, 0, 0, 0, 1555, 0,
	1555, 969, 0, 0, 0, 2897, 0, 0, 0, 0,
	0, 0, 957, 2525, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 1901, 0, 0, 64, 0, 1061, 0,
	0, 0, 0, 2613, 0, 0, 1980, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 2891, 139, 66, 0, 67, 0, 0, 0,
	1901, 0, 0, 0, 1649, 2261, 0, 0, 0, 0,
	0, 0, 0, 969, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 0, 0, 110, 0,
	0, 2962, 758, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1693, 0, 0, 0,
	173, 0, 1699, 0, 1700, 0, 1701, 0, 1702, 0,
	1703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	1712, 1103, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 172, 0, 74, 0, 0, 1901, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 0, 0, 166, 2256,
	2257, 2258, 0, 0, 0, 0, 2255, 2253, 2254, 2246,
	2247, 2248, 2249, 2251, 2252, 0, 0, 0, 0, 543,
	2171, 2172, 0, 0, 0, 0, 2177, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 970, 0, 0, 39,
	0, 0, 0, 0, 0, 2190, 0, 0, 0, 0,
	40, 141, 969, 713, 0, 0, 0, 0, 0, 2196,
	0, 726, 0, 0, 44, 2203, 0, 0, 969, 0,
	2208, 0, 0, 0, 0, 0, 0, 0, 46, 143,
	0, 0, 0, 0, 0, 0, 0, 2222, 0, 0,
	45, 0, 51, 0, 0, 0, 918, 74, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 52, 0, 969, 0, 54, 0, 0,
	0, 58, 0, 0, 0, 144, 970, 0, 0, 0,
	59, 72, 0, 0, 0, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 1919, 1919, 1919, 0, 0,
	0, 2244, 2245, 0, 2262, 2263, 2264, 1429, 0, 62,
	0, 957, 0, 0, 0, 2298, 0, 1966, 63, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 956,
	956, 956, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 572, 2244, 2245, 0, 2262, 2263, 2264, 0, 2259,
	0, 0, 40, 0, 964, 0, 0, 0, 0, 0,
	0, 2354, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 957, 957,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 0, 0, 0, 0,
	2259, 0, 0, 0, 0, 0, 2090, 0, 0, 1123,
	0, 1123, 64, 1123, 0, 964, 964, 0, 2250, 65,
	0, 0, 0, 573, 0, 0, 0, 0, 0, 0,
	969, 0, 59, 575, 0, 0, 0, 60, 75, 139,
	66, 0, 67, 0, 68, 0, 2420, 0, 145, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 0, 2265, 0, 0, 2250,
	63, 83, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 1296, 1297, 970, 0,
	0, 0, 0, 2266, 2260, 0, 173, 0, 0, 0,
	736, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 736, 0, 0, 0, 2265, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	2481, 0, 2145, 0, 1739, 0, 1298, 172, 0, 0,
	2485, 0, 0, 2486, 0, 2260, 165, 74, 0, 74,
	0, 74, 0, 0, 166, 2491, 0, 0, 0, 0,
	0, 0, 2497, 2154, 964, 2156, 0, 0, 0, 0,
	0, 0, 2504, 0, 64, 138, 2298, 0, 4, 2261,
	0, 0, 0, 0, 0, 0, 2169, 0, 0, 0,
	0, 0, 0, 0, 0, 2531, 2532, 0, 2533, 2534,
	2535, 139, 66, 0, 67, 2537, 726, 0, 0, 0,
	0, 0, 2539, 1304, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 2244, 2245, 0, 2262, 2263, 2264, 0,
	2261, 0, 0, 574, 0, 0, 110, 0, 0, 0,
	1326, 1327, 1328, 2567, 2568, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 173, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2584, 969, 0, 0, 0, 0, 0,
	0, 2259, 0, 2256, 2257, 2258, 0, 0, 0, 1319,
	2255, 2253, 2254, 2246, 2247, 2248, 2249, 2251, 2252, 172,
	0, 0, 0, 969, 0, 0, 0, 0, 165, 0,
	2607, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 2256, 2257, 2258, 138, 0, 0,
	0, 2255, 2253, 2254, 2246, 2247, 2248, 2249, 2251, 2252,
	2250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 1320, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 969,
	0, 713, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2683, 0, 0, 956, 0, 956,
	956, 956, 0, 1358, 2329, 1361, 0, 0, 0, 0,
	0, 957, 1368, 0, 0, 0, 2260, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 1103, 0, 0, 0, 970, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 2713,
	0, 0, 0, 2716, 2717, 957, 0, 957, 957, 957,
	0, 0, 0, 0, 0, 2719, 2383, 0, 0, 2722,
	0, 0, 0, 0, 0, 0, 1307, 1308, 1300, 1301,
	1302, 1303, 1305, 1306, 0, 0, 2729, 0, 0, 0,
	0, 0, 0, 0, 0, 2401, 0, 0, 0, 0,
	957, 2261, 0, 2409, 0, 2411, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339,
	1340, 1341, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 1332, 0, 0, 0, 0, 0, 0, 1299, 969,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 74, 0, 0, 1451,
	0, 1318, 2787, 1456, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 2483, 0, 2256, 2257, 2258, 0, 0,
	0, 0, 2255, 2253, 2254, 2246, 2247, 2248, 2249, 2251,
	2252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 1323, 1324, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 1336, 1346, 0, 0, 1326, 1327, 1328,
	0, 2862, 2863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 1343,
	0, 0, 0, 2871, 2872, 0, 1313, 1314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2879, 1334,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 969, 1333, 0,
	956, 0, 0, 0, 0, 2915, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 1320, 969, 970, 0, 970, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2973, 970, 0, 2976,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2703, 1335, 964, 0, 1310, 1311, 1317, 1316, 1312,
	1338, 2706, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305,
	1306, 0, 0, 0, 0, 2735, 0, 0, 969, 2734,
	0, 969, 0, 0, 0, 0, 0, 0, 713, 0,
	0, 713, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 3063, 3063, 0, 969, 0, 0,
	0, 956, 0, 0, 0, 0, 970, 0, 0, 970,
	0, 0, 3080, 0, 0, 0, 0, 0, 0, 1813,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 0, 0, 0, 0, 1361, 0,
	3063, 0, 0, 0, 956, 956, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 970, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 2802, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3063, 957, 957, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 1456, 0, 970, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 74, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 74, 0, 74, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 2898, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 1296,
	1297, 74, 1329, 1330, 1331, 1339, 1340, 1341, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 970, 0, 1299, 0, 0, 1345, 0, 0,
	0, 0, 2936, 0, 2938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 1298,
	0, 0, 0, 956, 956, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 957, 0, 0, 0, 0, 1321, 1322, 1323,
	1324, 0, 0, 0, 0, 0, 1304, 74, 0, 0,
	0, 74, 0, 2992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 1336,
	1346, 0, 0, 1326, 1327, 1328, 0, 0, 0, 0,
	0, 3012, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 1343, 0, 0, 0, 0,
	0, 0, 1313, 1314, 0, 0, 3030, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1813, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 0, 0, 1361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 0, 0, 918,
	918, 0, 0, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309, 1307,
	1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 0, 0,
	0, 2227, 0, 0, 0, 2228, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 494, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 74,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 918, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 918, 403, 0, 404,
	405, 406, 407, 246, 408, 74, 412, 413, 414, 415,
	416, 417, 418, 171, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 173,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	1150, 255, 0, 0, 469, 256, 0, 0, 0, 165,
	470, 471, 257, 472, 473, 474, 0, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1813, 258, 259, 260,
	261, 972, 262, 973, 974, 975, 976, 214, 977, 978,
	979, 980, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 981, 269, 270, 271, 272, 273, 274, 982,
	983, 219, 220, 221, 984, 275, 222, 985, 931, 986,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	987, 285, 0, 286, 287, 988, 862, 288, 289, 290,
	989, 990, 992, 991, 993, 994, 995, 291, 292, 497,
	293, 294, 295, 223, 224, 996, 296, 997, 297, 998,
	298, 999, 1000, 299, 300, 1001, 301, 302, 1002, 0,
	1003, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1004, 863, 1005, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1006, 318, 1007, 1008,
	864, 319, 1009, 320, 229, 1010, 230, 1011, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 866, 1012, 237,
	328, 0, 0, 0, 1013, 327, 329, 336, 1014, 865,
	330, 234, 332, 331, 333, 334, 335, 235, 1015, 236,
	1016, 337, 867, 868, 338, 339, 340, 869, 341, 342,
	0, 0, 343, 344, 345, 1017, 347, 346, 1018, 238,
	870, 348, 349, 871, 1019, 350, 351, 1020, 1021, 352,
	0, 353, 933, 932, 354, 355, 356, 357, 359, 360,
	358, 872, 361, 362, 364, 363, 1022, 1023, 873, 1024,
	239, 365, 240, 366, 367, 1025, 368, 369, 1026, 1027,
	370, 371, 1028, 1029, 372, 241, 874, 373, 875, 242,
	374, 375, 376, 377, 378, 379, 380, 1030, 381, 243,
	382, 244, 383, 1031, 384, 385, 386, 387, 388, 245,
	389, 390, 1032, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 1033, 403, 876, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 1034, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 1035, 428, 409, 410, 429, 877, 430,
	247, 431, 432, 1036, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 1037, 443, 444, 1038,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	1039, 249, 250, 251, 453, 1040, 1041, 454, 455, 252,
	253, 1042, 456, 457, 0, 458, 459, 1043, 1044, 460,
	461, 462, 464, 1045, 465, 1046, 463, 466, 467, 468,
	254, 255, 1047, 1048, 469, 256, 1049, 1050, 1051, 1052,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 1950, 0, 0, 0,
	0, 0, 0, 0, 0, 1951, 258, 259, 260, 261,
	972, 262, 973, 974, 975, 976, 214, 977, 978, 979,
	980, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 981, 269, 270, 271, 272, 273, 274, 982, 983,
	219, 220, 221, 984, 275, 222, 985, 931, 986, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 987,
	285, 0, 286, 287, 988, 862, 288, 289, 290, 989,
	990, 992, 991, 993, 994, 995, 291, 292, 497, 293,
	294, 295, 223, 224, 996, 296, 997, 297, 998, 298,
	999, 1000, 299, 300, 1001, 301, 302, 1002, 0, 1003,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1004, 863, 1005, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1006, 318, 1007, 1008, 864,
	319, 1009, 320, 229, 1010, 230, 1011, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 866, 1012, 237, 328,
	0, 0, 0, 1013, 327, 329, 336, 1014, 865, 330,
	234, 332, 331, 333, 334, 335, 235, 1015, 236, 1016,
	337, 867, 868, 338, 339, 340, 869, 341, 342, 0,
	0, 343, 344, 345, 1017, 347, 346, 1018, 238, 870,
	348, 349, 871, 1019, 350, 351, 1020, 1021, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	872, 361, 362, 364, 363, 1022, 1023, 873, 1024, 239,
	365, 240, 366, 367, 1025, 368, 369, 1026, 1027, 370,
	371, 1028, 1029, 372, 241, 874, 373, 875, 242, 374,
	375, 376, 377, 378, 379, 380, 1030, 381, 243, 382,
	244, 383, 1031, 384, 385, 386, 387, 388, 245, 389,
	390, 1032, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 1033, 403, 876, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 1034, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 1035, 428, 409, 410, 429, 877, 430, 247,
	431, 432, 1036, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 1037, 443, 444, 1038, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 1039,
	249, 250, 251, 453, 1040, 1041, 454, 455, 252, 253,
	1042, 456, 457, 0, 458, 459, 1043, 1044, 460, 461,
	462, 464, 1045, 465, 1046, 463, 466, 467, 468, 254,
	255, 1047, 1048, 469, 256, 1049, 1050, 1051, 1052, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2758, 258, 259, 260, 261,
	972, 262, 973, 974, 975, 976, 214, 977, 978, 979,
	980, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 981, 269, 270, 271, 272, 273, 274, 982, 983,
	219, 220, 221, 984, 275, 222, 985, 931, 986, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 987,
	285, 0, 286, 287, 988, 862, 288, 289, 290, 989,
	990, 992, 991, 993, 994, 995, 291, 292, 497, 293,
	294, 295, 223, 224, 996, 296, 997, 297, 998, 298,
	999, 1000, 299, 300, 1001, 301, 302, 1002, 0, 1003,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1004, 863, 1005, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1006, 318, 1007, 1008, 864,
	319, 1009, 320, 229, 1010, 230, 1011, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 866, 1012, 237, 328,
	0, 0, 0, 1013, 327, 329, 336, 1014, 865, 330,
	234, 332, 331, 333, 334, 335, 235, 1015, 236, 1016,
	337, 867, 868, 338, 339, 340, 869, 341, 342, 0,
	0, 343, 344, 345, 1017, 347, 346, 1018, 238, 870,
	348, 349, 871, 1019, 350, 351, 1020, 1021, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	872, 361, 362, 364, 363, 1022, 1023, 873, 1024, 239,
	365, 240, 366, 367, 1025, 368, 369, 1026, 1027, 370,
	371, 1028, 1029, 372, 241, 874, 373, 875, 242, 374,
	375, 376, 377, 378, 379, 380, 1030, 381, 243, 382,
	244, 383, 1031, 384, 385, 386, 387, 388, 245, 389,
	390, 1032, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 1033, 403, 876, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 1034, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 1035, 428, 409, 410, 429, 877, 430, 247,
	431, 432, 1036, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 1037, 443, 444, 1038, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 1039,
	249, 250, 251, 453, 1040, 1041, 454, 455, 252, 253,
	1042, 456, 457, 0, 458, 459, 1043, 1044, 460, 461,
	462, 464, 1045, 465, 1046, 463, 466, 467, 468, 254,
	255, 1047, 1048, 469, 256, 1049, 1050, 1051, 1052, 470,
	471, 257, 472, 473, 474, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2866, 258, 259, 260, 261, 972, 262, 973, 974, 975,
	976, 214, 977, 978, 979, 980, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 981, 269, 270, 271,
	272, 273, 274, 982, 983, 219, 220, 221, 984, 275,
	222, 985, 931, 986, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 987, 285, 0, 286, 287, 988,
	862, 288, 289, 290, 989, 990, 992, 991, 993, 994,
	995, 291, 292, 497, 293, 294, 295, 223, 224, 996,
	296, 997, 297, 998, 298, 999, 1000, 299, 300, 1001,
	301, 302, 1002, 0, 1003, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1004, 863, 1005, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	1006, 318, 1007, 1008, 864, 319, 1009, 320, 229, 1010,
	230, 1011, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 866, 1012, 237, 328, 0, 0, 0, 1013, 327,
	329, 336, 1014, 865, 330, 234, 332, 331, 333, 334,
	335, 235, 1015, 236, 1016, 337, 867, 868, 338, 339,
	340, 869, 341, 342, 0, 0, 343, 344, 345, 1017,
	347, 346, 1018, 238, 870, 348, 349, 871, 1019, 350,
	351, 1020, 1021, 352, 0, 353, 933, 932, 354, 355,
	356, 357, 359, 360, 358, 872, 361, 362, 364, 363,
	1022, 1023, 873, 1024, 239, 365, 240, 366, 367, 1025,
	368, 369, 1026, 1027, 370, 371, 1028, 1029, 372, 241,
	874, 373, 875, 242, 374, 375, 376, 377, 378, 379,
	380, 1030, 381, 243, 382, 244, 383, 1031, 384, 385,
	386, 387, 388, 245, 389, 390, 1032, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	1033, 403, 876, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 1034, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 1035, 428, 409,
	410, 429, 877, 430, 247, 431, 432, 1036, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	1037, 443, 444, 1038, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 1039, 249, 250, 251, 453, 1040,
	1041, 454, 455, 252, 253, 1042, 456, 457, 0, 458,
	459, 1043, 1044, 460, 461, 462, 464, 1045, 465, 1046,
	463, 466, 467, 468, 254, 255, 1047, 1048, 469, 256,
	1049, 1050, 1051, 1052, 470, 471, 257, 472, 473, 474,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2507, 258, 259, 260, 261,
	972, 262, 973, 974, 975, 976, 214, 977, 978, 979,
	980, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 981, 269, 270, 271, 272, 273, 274, 982, 983,
	219, 220, 221, 984, 275, 222, 985, 931, 986, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 987,
	285, 0, 286, 287, 988, 862, 288, 289, 290, 989,
	990, 992, 991, 993, 994, 995, 291, 292, 497, 293,
	294, 295, 223, 224, 996, 296, 997, 297, 998, 298,
	999, 1000, 299, 300, 1001, 301, 302, 1002, 0, 1003,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1004, 863, 1005, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1006, 318, 1007, 1008, 864,
	319, 1009, 320, 229, 1010, 230, 1011, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 866, 1012, 237, 328,
	0, 0, 0, 1013, 327, 329, 336, 1014, 865, 330,
	234, 332, 331, 333, 334, 335, 235, 1015, 236, 1016,
	337, 867, 868, 338, 339, 340, 869, 341, 342, 0,
	0, 343, 344, 345, 1017, 347, 346, 1018, 238, 870,
	348, 349, 871, 1019, 350, 351, 1020, 1021, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	872, 361, 362, 364, 363, 1022, 1023, 873, 1024, 239,
	365, 240, 366, 367, 1025, 368, 369, 1026, 1027, 370,
	371, 1028, 1029, 372, 241, 874, 373, 875, 242, 374,
	375, 376, 377, 378, 379, 380, 1030, 381, 243, 382,
	244, 383, 1031, 384, 385, 386, 387, 388, 245, 389,
	390, 1032, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 1033, 403, 876, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 1034, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 1035, 428, 409, 410, 429, 877, 430, 247,
	431, 432, 1036, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 1037, 443, 444, 1038, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 1039,
	249, 250, 251, 453, 1040, 1041, 454, 455, 252, 253,
	1042, 456, 457, 0, 458, 459, 1043, 1044, 460, 461,
	462, 464, 1045, 465, 1046, 463, 466, 467, 468, 254,
	255, 1047, 1048, 469, 256, 1049, 1050, 1051, 1052, 470,
	471, 257, 472, 473, 474, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2498, 258, 259, 260, 261, 972, 262, 973, 974, 975,
	976, 214, 977, 978, 979, 980, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 981, 269, 270, 271,
	272, 273, 274, 982, 983, 219, 220, 221, 984, 275,
	222, 985, 931, 986, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 987, 285, 0, 286, 287, 988,
	862, 288, 289, 290, 989, 990, 992, 991, 993, 994,
	995, 291, 292, 497, 293, 294, 295, 223, 224, 996,
	296, 997, 297, 998, 298, 999, 1000, 299, 300, 1001,
	301, 302, 1002, 0, 1003, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1004, 863, 1005, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	1006, 318, 1007, 1008, 864, 319, 1009, 320, 229, 1010,
	230, 1011, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 866, 1012, 237, 328, 0, 0, 0, 1013, 327,
	329, 336, 1014, 865, 330, 234, 332, 331, 333, 334,
	335, 235, 1015, 236, 1016, 337, 867, 868, 338, 339,
	340, 869, 341, 342, 0, 0, 343, 344, 345, 1017,
	347, 346, 1018, 238, 870, 348, 349, 871, 1019, 350,
	351, 1020, 1021, 352, 0, 353, 933, 932, 354, 355,
	356, 357, 359, 360, 358, 872, 361, 362, 364, 363,
	1022, 1023, 873, 1024, 239, 365, 240, 366, 367, 1025,
	368, 369, 1026, 1027, 370, 371, 1028, 1029, 372, 241,
	874, 373, 875, 242, 374, 375, 376, 377, 378, 379,
	380, 1030, 381, 243, 382, 244, 383, 1031, 384, 385,
	386, 387, 388, 245, 389, 390, 1032, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	1033, 403, 876, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 1034, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 1035, 428, 409,
	410, 429, 877, 430, 247, 431, 432, 1036, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	1037, 443, 444, 1038, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 1039, 249, 250, 251, 453, 1040,
	1041, 454, 455, 252, 253, 1042, 456, 457, 0, 458,
	459, 1043, 1044, 460, 461, 462, 464, 1045, 465, 1046,
	463, 466, 467, 468, 254, 255, 1047, 1048, 469, 256,
	1049, 1050, 1051, 1052, 470, 471, 257, 472, 473, 474,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2387, 258, 259, 260, 261,
	972, 262, 973, 974, 975, 976, 214, 977, 978, 979,
	980, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 981, 269, 270, 271, 272, 273, 274, 982, 983,
	219, 220, 221, 984, 275, 222, 985, 931, 986, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 987,
	285, 0, 286, 287, 988, 862, 288, 289, 290, 989,
	990, 992, 991, 993, 994, 995, 291, 292, 497, 293,
	294, 295, 223, 224, 996, 296, 997, 297, 998, 298,
	999, 1000, 299, 300, 1001, 301, 302, 1002, 0, 1003,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1004, 863, 1005, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1006, 318, 1007, 1008, 864,
	319, 1009, 320, 229, 1010, 230, 1011, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 866, 1012, 237, 328,
	0, 0, 0, 1013, 327, 329, 336, 1014, 865, 330,
	234, 332, 331, 333, 334, 335, 235, 1015, 236, 1016,
	337, 867, 868, 338, 339, 340, 869, 341, 342, 0,
	0, 343, 344, 345, 1017, 347, 346, 1018, 238, 870,
	348, 349, 871, 1019, 350, 351, 1020, 1021, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	872, 361, 362, 364, 363, 1022, 1023, 873, 1024, 239,
	365, 240, 366, 367, 1025, 368, 369, 1026, 1027, 370,
	371, 1028, 1029, 372, 241, 874, 373, 875, 242, 374,
	375, 376, 377, 378, 379, 380, 1030, 381, 243, 382,
	244, 383, 1031, 384, 385, 386, 387, 388, 245, 389,
	390, 1032, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 1033, 403, 876, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 1034, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 1035, 428, 409, 410, 429, 877, 430, 247,
	431, 432, 1036, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 1037, 443, 444, 1038, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 1039,
	249, 250, 251, 453, 1040, 1041, 454, 455, 252, 253,
	1042, 456, 457, 0, 458, 459, 1043, 1044, 460, 461,
	462, 464, 1045, 465, 1046, 463, 466, 467, 468, 254,
	255, 1047, 1048, 469, 256, 1049, 1050, 1051, 1052, 470,
	471, 257, 472, 473, 474, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1837, 258, 259, 260, 261, 972, 262, 973, 974, 975,
	976, 214, 977, 978, 979, 980, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 981, 269, 270, 271,
	272, 273, 274, 982, 983, 219, 220, 221, 984, 275,
	222, 985, 931, 986, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 987, 285, 0, 286, 287, 988,
	862, 288, 289, 290, 989, 990, 992, 991, 993, 994,
	995, 291, 292, 497, 293, 294, 295, 223, 224, 996,
	296, 997, 297, 998, 298, 999, 1000, 299, 300, 1001,
	301, 302, 1002, 0, 1003, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1004, 863, 1005, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	1006, 318, 1007, 1008, 864, 319, 1009, 320, 229, 1010,
	230, 1011, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 866, 1012, 237, 328, 0, 0, 0, 1013, 327,
	329, 336, 1014, 865, 330, 234, 332, 331, 333, 334,
	335, 235, 1015, 236, 1016, 337, 867, 868, 338, 339,
	340, 869, 341, 342, 0, 0, 343, 344, 345, 1017,
	347, 346, 1018, 238, 870, 348, 349, 871, 1019, 350,
	351, 1020, 1021, 352, 0, 353, 933, 932, 354, 355,
	356, 357, 359, 360, 358, 872, 361, 362, 364, 363,
	1022, 1023, 873, 1024, 239, 365, 240, 366, 367, 1025,
	368, 369, 1026, 1027, 370, 371, 1028, 1029, 372, 241,
	874, 373, 875, 242, 374, 375, 376, 377, 378, 379,
	380, 1030, 381, 243, 382, 244, 383, 1031, 384, 385,
	386, 387, 388, 245, 389, 390, 1032, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	1033, 403, 876, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 1034, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 1035, 428, 409,
	410, 429, 877, 430, 247, 431, 432, 1036, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	1037, 443, 444, 1038, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 1039, 249, 250, 251, 453, 1040,
	1041, 454, 455, 252, 253, 1042, 456, 457, 0, 458,
	459, 1043, 1044, 460, 461, 462, 464, 1045, 465, 1046,
	463, 466, 467, 468, 254, 255, 1047, 1048, 469, 256,
	1049, 1050, 1051, 1052, 470, 471, 257, 472, 473, 474,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 258, 259, 260, 261,
	972, 262, 973, 974, 975, 976, 214, 977, 978, 979,
	980, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 981, 269, 270, 271, 272, 273, 274, 982, 983,
	219, 220, 221, 984, 275, 222, 985, 931, 986, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 987,
	285, 0, 286, 287, 988, 862, 288, 289, 290, 989,
	990, 992, 991, 993, 994, 995, 291, 292, 497, 293,
	294, 295, 223, 224, 996, 296, 997, 297, 998, 298,
	999, 1000, 299, 300, 1001, 301, 302, 1002, 0, 1003,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 1004, 863, 1005, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 1006, 318, 1007, 1008, 864,
	319, 1009, 320, 229, 1010, 230, 1011, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 866, 1012, 237, 328,
	0, 0, 0, 1013, 327, 329, 336, 1014, 865, 330,
	234, 332, 331, 333, 334, 335, 235, 1015, 236, 1016,
	337, 867, 868, 338, 339, 340, 869, 341, 342, 0,
	0, 343, 344, 345, 1017, 347, 346, 1018, 238, 870,
	348, 349, 871, 1019, 350, 351, 1020, 1021, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	872, 361, 362, 364, 363, 1022, 1023, 873, 1024, 239,
	365, 240, 366, 367, 1025, 368, 369, 1026, 1027, 370,
	371, 1028, 1029, 372, 241, 874, 373, 875, 242, 374,
	375, 376, 377, 378, 379, 380, 1030, 381, 243, 382,
	244, 383, 1031, 384, 385, 386, 387, 388, 245, 389,
	390, 1032, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 1033, 403, 876, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 1034, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 1035, 428, 409, 410, 429, 877, 430, 247,
	431, 432, 1036, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 1037, 443, 444, 1038, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 1039,
	249, 250, 251, 453, 1040, 1041, 454, 455, 252, 253,
	1042, 456, 457, 0, 458, 459, 1043, 1044, 460, 461,
	462, 464, 1045, 465, 1046, 463, 466, 467, 468, 254,
	255, 1047, 1048, 469, 256, 1049, 1050, 1051, 1052, 470,
	471, 257, 472, 473, 474, 1844, 0, 777, 765, 766,
	763, 764, 756, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 1841, 262, 0,
	0, 0, 0, 813, 759, 0, 0, 0, 263, 264,
	265, 215, 834, 797, 835, 785, 821, 836, 0, 269,
	787, 786, 272, 273, 274, 760, 812, 837, 838, 221,
	0, 275, 819, 0, 802, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 862, 288, 289, 290, 805, 803, 804, 809,
	807, 806, 808, 291, 292, 497, 293, 822, 295, 839,
	840, 745, 296, 0, 297, 0, 298, 1842, 0, 823,
	300, 0, 301, 302, 0, 0, 0, 750, 306, 303,
	304, 307, 310, 305, 311, 312, 841, 842, 772, 863,
	0, 0, 0, 0, 0, 313, 314, 843, 824, 825,
	0, 317, 0, 318, 0, 0, 864, 319, 0, 320,
	844, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	814, 815, 818, 866, 0, 816, 796, 0, 0, 0,
	0, 327, 329, 336, 0, 865, 330, 845, 800, 826,
	827, 828, 829, 846, 0, 801, 0, 337, 867, 868,
	338, 339, 340, 869, 830, 831, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 847, 870, 348, 349, 871,
	0, 350, 351, 0, 0, 352, 0, 353, 747, 746,
	354, 355, 356, 357, 359, 789, 358, 872, 361, 362,
	364, 363, 742, 0, 873, 773, 817, 365, 848, 366,
	367, 0, 798, 799, 0, 0, 370, 371, 0, 0,
	372, 241, 874, 373, 875, 849, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 850, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 851, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 876, 404, 405, 406, 407, 751,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 790, 791, 792, 793, 420, 426, 427, 810,
	428, 409, 410, 429, 877, 430, 852, 794, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 832, 437, 438,
	439, 853, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 788, 452, 0, 854, 855, 856,
	833, 0, 0, 454, 455, 857, 858, 771, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 811,
	465, 0, 795, 466, 467, 468, 254, 859, 1840, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 743, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 739, 740, 1843, 0, 0,
	0, 0, 0, 0, 752, 1838, 0, 0, 0, 727,
	755, 777, 765, 766, 763, 764, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 813, 759, 0,
	0, 0, 263, 264, 265, 215, 834, 797, 835, 785,
	821, 836, 0, 269, 787, 786, 272, 273, 274, 760,
	812, 837, 838, 221, 0, 275, 819, 0, 802, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	805, 803, 804, 809, 807, 806, 808, 291, 292, 497,
	293, 822, 295, 839, 840, 745, 296, 0, 297, 0,
	298, 0, 0, 823, 300, 0, 301, 302, 0, 0,
	0, 750, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 772, 863, 0, 0, 0, 0, 0, 313,
	314, 843, 824, 825, 0, 317, 0, 318, 0, 0,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 814, 815, 818, 866, 0, 816,
	796, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 845, 800, 826, 827, 828, 829, 846, 0, 801,
	0, 337, 867, 868, 338, 339, 340, 869, 830, 831,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 747, 746, 354, 355, 356, 357, 359, 789,
	358, 872, 361, 362, 364, 363, 742, 0, 873, 773,
	817, 365, 848, 366, 367, 0, 798, 799, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 851,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 751, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 171, 424, 425, 790, 791, 792, 793,
	420, 426, 427, 810, 428, 409, 410, 429, 877, 430,
	852, 794, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 832, 437, 438, 439, 853, 0, 443, 444, 173,
	445, 446, 447, 448, 449, 308, 450, 309, 788, 452,
	0, 854, 855, 856, 833, 0, 0, 454, 455, 857,
	858, 771, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 811, 465, 0, 795, 466, 467, 468,
	1150, 859, 0, 0, 469, 256, 0, 0, 0, 165,
	470, 471, 257, 472, 473, 474, 743, 166, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 739,
	740, 777, 765, 766, 763, 764, 756, 0, 1365, 0,
	0, 0, 0, 0, 755, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 813, 759, 0,
	0, 0, 263, 264, 265, 215, 834, 797, 835, 785,
	821, 836, 0, 269, 787, 786, 272, 273, 274, 760,
	812, 837, 838, 221, 0, 275, 819, 0, 802, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	805, 803, 804, 809, 807, 806, 808, 291, 292, 497,
	293, 822, 295, 839, 840, 745, 296, 0, 297, 0,
	298, 0, 0, 823, 300, 0, 301, 302, 0, 0,
	0, 750, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 772, 863, 0, 0, 0, 0, 0, 313,
	314, 843, 824, 825, 0, 317, 0, 318, 0, 0,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 814, 815, 818, 866, 0, 816,
	796, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 845, 800, 826, 827, 828, 829, 846, 0, 801,
	0, 337, 867, 868, 338, 339, 340, 869, 830, 831,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 747, 746, 354, 355, 356, 357, 359, 789,
	358, 872, 361, 362, 364, 363, 742, 0, 873, 773,
	817, 365, 848, 366, 367, 0, 798, 799, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 851,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 751, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 171, 424, 425, 790, 791, 792, 793,
	420, 426, 427, 810, 428, 409, 410, 429, 877, 430,
	852, 794, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 832, 437, 438, 439, 853, 0, 443, 444, 173,
	445, 446, 447, 448, 449, 308, 450, 309, 788, 452,
	0, 854, 855, 856, 833, 0, 0, 454, 455, 857,
	858, 771, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 811, 465, 0, 795, 466, 467, 468,
	1150, 859, 0, 0, 469, 256, 0, 0, 0, 165,
	470, 471, 257, 472, 473, 474, 743, 166, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 739,
	740, 777, 765, 766, 763, 764, 756, 0, 1365, 0,
	0, 0, 0, 0, 755, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 813, 759, 0,
	0, 0, 263, 264, 265, 215, 834, 797, 835, 785,
	821, 836, 1915, 269, 787, 786, 272, 273, 274, 760,
	812, 837, 838, 221, 0, 275, 819, 0, 802, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	805, 803, 804, 809, 807, 806, 808, 291, 292, 497,
	293, 822, 295, 839, 840, 745, 296, 0, 297, 0,
	298, 0, 0, 823, 300, 0, 301, 302, 0, 0,
	0, 750, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 772, 863, 0, 0, 0, 0, 0, 313,
	314, 843, 824, 825, 0, 317, 0, 318, 0, 1920,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 814, 815, 818, 866, 0, 816,
	796, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 845, 800, 826, 827, 828, 829, 846, 0, 801,
	0, 337, 867, 868, 338, 339, 340, 869, 830, 831,
	0, 0, 343, 344, 345, 0, 347, 346, 1916, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 747, 746, 354, 355, 356, 357, 359, 789,
	358, 872, 361, 362, 364, 363, 742, 0, 873, 773,
	817, 365, 848, 366, 367, 0, 798, 799, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 851,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 751, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 790, 791, 792, 793,
	420, 426, 427, 810, 428, 409, 410, 429, 877, 430,
	852, 794, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 832, 437, 438, 439, 853, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 788, 452,
	0, 854, 855, 856, 833, 0, 1917, 454, 455, 857,
	858, 771, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 811, 465, 0, 795, 466, 467, 468,
	254, 859, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 743, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 739,
	740, 777, 765, 766, 763, 764, 756, 0, 752, 0,
	0, 0, 0, 0, 755, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 813, 759, 0,
	0, 0, 263, 264, 265, 215, 834, 797, 835, 785,
	821, 836, 0, 269, 787, 786, 272, 273, 274, 760,
	812, 837, 838, 221, 0, 275, 819, 0, 802, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	805, 803, 804, 809, 807, 806, 808, 291, 292, 497,
	293, 822, 295, 839, 840, 745, 296, 0, 297, 0,
	298, 0, 0, 823, 300, 0, 301, 302, 0, 0,
	0, 750, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 772, 863, 0, 0, 0, 0, 0, 313,
	314, 843, 824, 825, 0, 317, 0, 318, 0, 0,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 814, 815, 818, 866, 0, 816,
	796, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 845, 800, 826, 827, 828, 829, 846, 0, 801,
	0, 337, 867, 868, 338, 339, 340, 869, 830, 831,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 747, 746, 354, 355, 356, 357, 359, 789,
	358, 872, 361, 362, 364, 363, 742, 2675, 873, 773,
	817, 365, 848, 366, 367, 0, 798, 799, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 851,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 751, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 790, 791, 792, 793,
	420, 426, 427, 810, 428, 409, 410, 429, 877, 430,
	852, 794, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 832, 437, 438, 439, 853, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 788, 452,
	0, 854, 855, 856, 833, 0, 0, 454, 455, 857,
	858, 771, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 811, 465, 0, 795, 466, 467, 468,
	254, 859, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 743, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 739,
	740, 1430, 777, 765, 766, 763, 764, 756, 752, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 813, 759,
	0, 0, 0, 263, 264, 265, 215, 834, 797, 835,
	785, 821, 836, 0, 269, 787, 786, 272, 273, 274,
	760, 812, 837, 838, 221, 0, 275, 819, 0, 802,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 862, 288, 289,
	290, 805, 803, 804, 809, 807, 806, 808, 291, 292,
	497, 293, 822, 295, 839, 840, 745, 296, 0, 297,
	0, 298, 0, 0, 823, 300, 0, 301, 302, 0,
	0, 0, 750, 306, 303, 304, 307, 310, 305, 311,
	312, 841, 842, 772, 863, 0, 0, 0, 0, 0,
	313, 314, 843, 824, 825, 0, 317, 0, 318, 0,
	0, 864, 319, 0, 320, 844, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 814, 815, 818, 866, 0,
	816, 796, 0, 0, 0, 1741, 327, 329, 336, 0,
	865, 330, 845, 800, 826, 827, 828, 829, 846, 0,
	801, 0, 337, 867, 868, 338, 339, 340, 869, 830,
	831, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	847, 870, 348, 349, 871, 0, 350, 351, 0, 0,
	352, 0, 353, 747, 746, 354, 355, 356, 357, 359,
	789, 358, 872, 361, 362, 364, 363, 742, 0, 873,
	773, 817, 365, 848, 366, 367, 0, 798, 799, 0,
	0, 370, 371, 0, 0, 372, 241, 874, 373, 875,
	849, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	850, 382, 244, 383, 1740, 384, 385, 386, 387, 388,
	851, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 876,
	404, 405, 406, 407, 751, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 790, 791, 792,
	793, 420, 426, 427, 810, 428, 409, 410, 429, 877,
	430, 852, 794, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 832, 437, 438, 439, 853, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 788,
	452, 0, 854, 855, 856, 833, 0, 0, 454, 455,
	857, 858, 771, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 811, 465, 0, 795, 466, 467,
	468, 254, 859, 0, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 743, 0, 0,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 0,
	739, 740, 0, 0, 0, 0, 0, 0, 0, 752,
	0, 0, 0, 0, 735, 755, 777, 765, 766, 763,
	764, 756, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 813, 759, 0, 0, 0, 263, 264, 265,
	215, 834, 797, 835, 785, 821, 836, 0, 269, 787,
	786, 272, 273, 274, 760, 812, 837, 838, 221, 0,
	275, 819, 0, 802, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 862, 288, 289, 290, 805, 803, 804, 809, 807,
	806, 808, 291, 292, 497, 293, 822, 295, 839, 840,
	745, 296, 0, 297, 0, 298, 0, 0, 823, 300,
	0, 301, 302, 0, 0, 0, 750, 306, 303, 304,
	307, 310, 305, 311, 312, 841, 842, 772, 863, 0,
	0, 0, 0, 0, 313, 314, 843, 824, 825, 0,
	317, 0, 318, 0, 0, 864, 319, 0, 320, 844,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 814,
	815, 818, 866, 0, 816, 796, 0, 0, 0, 0,
	327, 329, 336, 0, 865, 330, 845, 800, 826, 827,
	828, 829, 846, 0, 801, 0, 337, 867, 868, 338,
	339, 340, 869, 830, 831, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 847, 870, 348, 349, 871, 0,
	350, 351, 0, 0, 352, 0, 353, 747, 746, 354,
	355, 356, 357, 359, 789, 358, 872, 361, 362, 364,
	363, 742, 0, 873, 773, 817, 365, 848, 366, 367,
	0, 798, 799, 737, 0, 370, 371, 0, 0, 372,
	241, 874, 373, 875, 849, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 850, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 851, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 876, 404, 405, 406, 407, 751, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 790, 791, 792, 793, 420, 426, 427, 810, 428,
	409, 410, 429, 877, 430, 852, 794, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 832, 437, 438, 439,
	853, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 788, 452, 0, 854, 855, 856, 833,
	0, 0, 454, 455, 857, 858, 771, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 811, 465,
	0, 795, 466, 467, 468, 254, 859, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 743, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 739, 740, 777, 765, 766, 763,
	764, 756, 0, 752, 0, 0, 0, 0, 0, 755,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 813, 759, 0, 0, 0, 263, 264, 265,
	215, 834, 797, 835, 785, 821, 836, 0, 269, 787,
	786, 272, 273, 274, 760, 812, 837, 838, 221, 0,
	275, 819, 0, 802, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 862, 288, 289, 290, 805, 803, 804, 809, 807,
	806, 808, 291, 292, 497, 293, 822, 295, 839, 840,
	745, 296, 0, 297, 0, 298, 0, 0, 823, 300,
	0, 301, 302, 0, 0, 0, 750, 306, 303, 304,
	307, 310, 305, 311, 312, 841, 842, 772, 863, 0,
	0, 0, 0, 0, 313, 314, 843, 824, 825, 0,
	317, 0, 318, 0, 0, 864, 319, 0, 320, 844,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 814,
	815, 818, 866, 0, 816, 796, 0, 0, 0, 0,
	327, 329, 336, 0, 865, 330, 845, 800, 826, 827,
	828, 829, 846, 0, 801, 0, 337, 867, 868, 338,
	339, 340, 869, 830, 831, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 847, 870, 348, 349, 871, 0,
	350, 351, 0, 0, 352, 0, 353, 747, 746, 354,
	355, 356, 357, 359, 789, 358, 872, 361, 362, 364,
	363, 742, 0, 873, 773, 817, 365, 848, 366, 367,
	0, 798, 799, 0, 0, 370, 371, 0, 0, 372,
	241, 874, 373, 875, 849, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 850, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 851, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 876, 404, 405, 406, 407, 751, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 790, 791, 792, 793, 420, 426, 427, 810, 428,
	409, 410, 429, 877, 430, 852, 794, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 832, 437, 438, 439,
	853, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 788, 452, 0, 854, 855, 856, 833,
	0, 0, 454, 455, 857, 858, 771, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 811, 465,
	0, 795, 466, 467, 468, 254, 859, 2509, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 743, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 739, 740, 777, 765, 766, 763,
	764, 756, 0, 752, 0, 0, 0, 0, 0, 755,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 813, 759, 0, 0, 0, 263, 264, 265,
	215, 834, 797, 835, 785, 821, 836, 0, 269, 787,
	786, 272, 273, 274, 760, 812, 837, 838, 221, 0,
	275, 819, 0, 802, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 862, 288, 289, 290, 805, 803, 804, 809, 807,
	806, 808, 291, 292, 497, 293, 822, 295, 839, 840,
	745, 296, 0, 297, 0, 298, 0, 0, 823, 300,
	0, 301, 302, 0, 0, 0, 750, 306, 303, 304,
	307, 310, 305, 311, 312, 841, 842, 772, 863, 0,
	0, 0, 0, 0, 313, 314, 843, 824, 825, 0,
	317, 0, 318, 0, 0, 864, 319, 0, 320, 844,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 814,
	815, 818, 866, 0, 816, 796, 0, 0, 0, 0,
	327, 329, 336, 0, 865, 330, 845, 800, 826, 827,
	828, 829, 846, 0, 801, 0, 337, 867, 868, 338,
	339, 340, 869, 830, 831, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 847, 870, 348, 349, 871, 0,
	350, 351, 0, 0, 352, 0, 353, 747, 746, 354,
	355, 356, 357, 359, 789, 358, 872, 361, 362, 364,
	363, 742, 0, 873, 773, 817, 365, 848, 366, 367,
	0, 798, 799, 737, 0, 370, 371, 0, 0, 372,
	241, 874, 373, 875, 849, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 850, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 851, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 876, 404, 405, 406, 407, 751, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 790, 791, 792, 793, 420, 426, 427, 810, 428,
	409, 410, 429, 877, 430, 852, 794, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 832, 437, 438, 439,
	853, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 788, 452, 0, 854, 855, 856, 833,
	0, 0, 454, 455, 857, 858, 771, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 811, 465,
	0, 795, 466, 467, 468, 254, 859, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 743, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 739, 740, 0, 0, 0, 0,
	0, 0, 0, 752, 0, 0, 0, 0, 2319, 755,
	777, 765, 766, 763, 764, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 813, 759, 0, 0,
	0, 263, 264, 265, 215, 834, 797, 835, 785, 821,
	836, 0, 269, 787, 786, 272, 273, 274, 760, 812,
	837, 838, 221, 0, 275, 819, 0, 802, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 862, 288, 289, 290, 805,
	803, 804, 809, 807, 806, 808, 291, 292, 497, 293,
	822, 295, 839, 840, 745, 296, 0, 297, 0, 298,
	0, 0, 823, 300, 0, 301, 302, 0, 0, 0,
	750, 306, 303, 304, 307, 310, 305, 311, 312, 841,
	842, 772, 863, 0, 0, 0, 0, 0, 313, 314,
	843, 824, 825, 0, 317, 0, 318, 0, 0, 864,
	319, 0, 320, 844, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 814, 815, 818, 866, 0, 816, 796,
	0, 0, 0, 0, 327, 329, 336, 0, 865, 330,
	845, 800, 826, 827, 828, 829, 846, 0, 801, 0,
	337, 867, 868, 338, 339, 340, 869, 830, 831, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 847, 870,
	348, 349, 871, 0, 350, 351, 0, 0, 352, 0,
	353, 747, 746, 354, 355, 356, 357, 359, 789, 358,
	872, 361, 362, 364, 363, 742, 0, 873, 773, 817,
	365, 848, 366, 367, 0, 798, 799, 0, 0, 370,
	371, 0, 0, 372, 241, 874, 373, 875, 849, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 850, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 851, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 876, 404, 405,
	406, 407, 751, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 790, 791, 792, 793, 420,
	426, 427, 810, 428, 409, 410, 429, 877, 430, 852,
	794, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	832, 437, 438, 439, 853, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 788, 452, 0,
	854, 855, 856, 833, 0, 0, 454, 455, 857, 858,
	771, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 811, 465, 0, 795, 466, 467, 468, 254,
	859, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 743, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 739, 740,
	777, 765, 766, 763, 764, 756, 0, 752, 0, 0,
	0, 0, 0, 755, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 813, 759, 0, 0,
	0, 263, 264, 265, 215, 834, 797, 835, 785, 821,
	836, 0, 269, 787, 786, 272, 273, 274, 760, 812,
	837, 838, 221, 0, 275, 819, 0, 802, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 862, 288, 289, 290, 805,
	803, 804, 809, 807, 806, 808, 291, 292, 497, 293,
	822, 295, 839, 840, 745, 296, 0, 297, 0, 298,
	0, 0, 823, 300, 0, 301, 302, 0, 0, 0,
	750, 306, 303, 304, 307, 310, 305, 311, 312, 841,
	842, 772, 863, 0, 0, 0, 0, 0, 313, 314,
	843, 824, 825, 0, 317, 0, 318, 0, 0, 864,
	319, 0, 320, 844, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 814, 815, 818, 866, 0, 816, 796,
	0, 0, 0, 0, 327, 329, 336, 0, 865, 330,
	845, 800, 826, 827, 828, 829, 846, 0, 801, 0,
	337, 867, 868, 338, 339, 340, 869, 830, 831, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 847, 870,
	348, 349, 871, 0, 350, 351, 0, 0, 352, 0,
	353, 747, 746, 354, 355, 356, 357, 359, 789, 358,
	872, 361, 362, 364, 363, 742, 0, 873, 773, 817,
	365, 848, 366, 367, 0, 798, 799, 0, 0, 370,
	371, 0, 0, 372, 241, 874, 373, 875, 849, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 850, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 851, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 876, 404, 405,
	406, 407, 751, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 790, 791, 792, 793, 420,
	426, 427, 810, 428, 409, 410, 429, 877, 430, 852,
	794, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	832, 437, 438, 439, 853, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 788, 452, 0,
	854, 855, 856, 833, 0, 0, 454, 455, 857, 858,
	771, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 811, 465, 0, 795, 466, 467, 468, 254,
	859, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 743, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 739, 740,
	1430, 777, 765, 766, 763, 764, 756, 752, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 813, 759, 0,
	0, 0, 263, 264, 265, 215, 834, 797, 835, 785,
	821, 836, 0, 269, 787, 786, 272, 273, 274, 760,
	812, 837, 838, 221, 0, 275, 819, 0, 802, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	805, 803, 804, 809, 807, 806, 808, 291, 292, 497,
	293, 822, 295, 839, 840, 745, 296, 0, 297, 0,
	298, 0, 0, 823, 300, 0, 301, 302, 0, 0,
	0, 750, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 772, 863, 0, 0, 0, 0, 0, 313,
	314, 843, 824, 825, 0, 317, 0, 318, 0, 1920,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 814, 815, 818, 866, 0, 816,
	796, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 845, 800, 826, 827, 828, 829, 846, 0, 801,
	0, 337, 867, 868, 338, 339, 340, 869, 830, 831,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 747, 746, 354, 355, 356, 357, 359, 789,
	358, 872, 361, 362, 364, 363, 742, 0, 873, 773,
	817, 365, 848, 366, 367, 0, 798, 799, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 851,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 751, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 790, 791, 792, 793,
	420, 426, 427, 810, 428, 409, 410, 429, 877, 430,
	852, 794, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 832, 437, 438, 439, 853, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 788, 452,
	0, 854, 855, 856, 833, 0, 0, 454, 455, 857,
	858, 771, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 811, 465, 0, 795, 466, 467, 468,
	254, 859, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 743, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 739,
	740, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 1954, 755, 777, 765, 766, 763, 764,
	756, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 813, 759, 0, 0, 0, 263, 264, 265, 215,
	834, 797, 835, 785, 821, 836, 0, 269, 787, 786,
	272, 273, 274, 760, 812, 837, 838, 221, 0, 275,
	819, 0, 802, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 290, 805, 803, 804, 809, 807, 806,
	808, 291, 292, 497, 293, 822, 295, 839, 840, 745,
	296, 0, 297, 0, 298, 0, 0, 823, 300, 0,
	301, 302, 0, 0, 0, 750, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 772, 863, 0, 0,
	0, 0, 0, 313, 314, 843, 824, 825, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 814, 815,
	818, 866, 0, 816, 796, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 845, 800, 826, 827, 828,
	829, 846, 0, 801, 0, 337, 867, 868, 338, 339,
	340, 869, 830, 831, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 747, 746, 354, 355,
	356, 357, 359, 789, 358, 872, 361, 362, 364, 363,
	742, 0, 873, 773, 817, 365, 848, 366, 367, 0,
	798, 799, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 851, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 751, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	790, 791, 792, 793, 420, 426, 427, 810, 428, 409,
	410, 429, 877, 430, 852, 794, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 832, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 788, 452, 0, 854, 855, 856, 833, 0,
	0, 454, 455, 857, 858, 771, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 811, 465, 0,
	795, 466, 467, 468, 254, 859, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	743, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 739, 740, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 1907, 755, 777,
	765, 766, 763, 764, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 813, 759, 0, 0, 0,
	263, 264, 265, 215, 834, 797, 835, 785, 821, 836,
	0, 269, 787, 786, 272, 273, 274, 760, 812, 837,
	838, 221, 0, 275, 819, 0, 802, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 862, 288, 289, 290, 805, 803,
	804, 809, 807, 806, 808, 291, 292, 497, 293, 822,
	295, 839, 840, 745, 296, 0, 297, 0, 298, 0,
	0, 823, 300, 0, 301, 302, 0, 0, 0, 750,
	306, 303, 304, 307, 310, 305, 311, 312, 841, 842,
	772, 863, 0, 0, 0, 0, 0, 313, 314, 843,
	824, 825, 0, 317, 0, 318, 0, 0, 864, 319,
	0, 320, 844, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 814, 815, 818, 866, 0, 816, 796, 0,
	0, 0, 0, 327, 329, 336, 0, 865, 330, 845,
	800, 826, 827, 828, 829, 846, 0, 801, 0, 337,
	867, 868, 338, 339, 340, 869, 830, 831, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 847, 870, 348,
	349, 871, 0, 350, 351, 0, 0, 352, 0, 353,
	747, 746, 354, 355, 356, 357, 359, 789, 358, 872,
	361, 362, 364, 363, 742, 0, 873, 773, 817, 365,
	848, 366, 367, 0, 798, 799, 0, 0, 370, 371,
	0, 0, 372, 241, 874, 373, 875, 849, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 850, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 851, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 876, 404, 405, 406,
	407, 751, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 790, 791, 792, 793, 420, 426,
	427, 810, 428, 409, 410, 429, 877, 430, 852, 794,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 832,
	437, 438, 439, 853, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 788, 452, 0, 854,
	855, 856, 833, 0, 0, 454, 455, 857, 858, 771,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 811, 465, 0, 795, 466, 467, 468, 254, 859,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 743, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 739, 740, 0,
	0, 0, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 1896, 755, 777, 765, 766, 763, 764, 756, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 813,
	759, 0, 0, 0, 263, 264, 265, 215, 834, 797,
	835, 785, 821, 836, 0, 269, 787, 786, 272, 273,
	274, 760, 812, 837, 838, 221, 0, 275, 819, 0,
	802, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 862, 288,
	289, 290, 805, 803, 804, 809, 807, 806, 808, 291,
	292, 497, 293, 822, 295, 839, 840, 745, 296, 0,
	297, 0, 298, 0, 0, 823, 300, 0, 301, 302,
	0, 0, 0, 750, 306, 303, 304, 307, 310, 305,
	311, 312, 841, 842, 772, 863, 0, 0, 0, 0,
	0, 313, 314, 843, 824, 825, 0, 317, 0, 318,
	0, 0, 864, 319, 0, 320, 844, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 814, 815, 818, 866,
	0, 816, 796, 0, 0, 0, 0, 327, 329, 336,
	0, 865, 330, 845, 800, 826, 827, 828, 829, 846,
	0, 801, 0, 337, 867, 868, 338, 339, 340, 869,
	830, 831, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 847, 870, 348, 349, 871, 0, 350, 351, 0,
	0, 352, 0, 353, 747, 746, 354, 355, 356, 357,
	359, 789, 358, 872, 361, 362, 364, 363, 742, 0,
	873, 773, 817, 365, 848, 366, 367, 0, 798, 799,
	0, 0, 370, 371, 0, 0, 372, 241, 874, 373,
	875, 849, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 850, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 851, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	876, 404, 405, 406, 407, 751, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 790, 791,
	792, 793, 420, 426, 427, 810, 428, 409, 410, 429,
	877, 430, 852, 794, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 832, 437, 438, 439, 853, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	788, 452, 0, 854, 855, 856, 833, 0, 0, 454,
	455, 857, 858, 771, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 811, 465, 0, 795, 466,
	467, 468, 254, 859, 0, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 743, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 739, 740, 0, 0, 0, 0, 0, 0, 0,
	752, 0, 0, 0, 0, 1894, 755, 777, 765, 766,
	763, 764, 756, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 813, 759, 0, 0, 0, 263, 264,
	265, 215, 834, 797, 835, 785, 821, 836, 0, 269,
	787, 786, 272, 273, 274, 760, 812, 837, 838, 221,
	0, 275, 819, 0, 802, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 862, 288, 289, 290, 805, 803, 804, 809,
	807, 806, 808, 291, 292, 497, 293, 822, 295, 839,
	840, 745, 296, 0, 297, 0, 298, 0, 0, 823,
	300, 0, 301, 302, 0, 0, 0, 750, 306, 303,
	304, 307, 310, 305, 311, 312, 841, 842, 772, 863,
	0, 0, 0, 0, 0, 313, 314, 843, 824, 825,
	0, 317, 0, 318, 0, 0, 864, 319, 0, 320,
	844, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	814, 815, 818, 866, 0, 816, 796, 0, 0, 0,
	0, 327, 329, 336, 0, 865, 330, 845, 800, 826,
	827, 828, 829, 846, 0, 801, 0, 337, 867, 868,
	338, 339, 340, 869, 830, 831, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 847, 870, 348, 349, 871,
	0, 350, 351, 0, 0, 352, 0, 353, 747, 746,
	354, 355, 356, 357, 359, 789, 358, 872, 361, 362,
	364, 363, 742, 0, 873, 773, 817, 365, 848, 366,
	367, 0, 798, 799, 0, 0, 370, 371, 0, 0,
	372, 241, 874, 373, 875, 849, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 850, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 851, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 876, 404, 405, 406, 407, 751,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 790, 791, 792, 793, 420, 426, 427, 810,
	428, 409, 410, 429, 877, 430, 852, 794, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 832, 437, 438,
	439, 853, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 788, 452, 0, 854, 855, 856,
	833, 0, 0, 454, 455, 857, 858, 771, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 811,
	465, 0, 795, 466, 467, 468, 254, 859, 0, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 743, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 739, 740, 0, 0, 0,
	0, 0, 0, 0, 752, 0, 0, 0, 0, 1892,
	755, 777, 765, 766, 763, 764, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 813, 759, 0,
	0, 0, 263, 264, 265, 215, 834, 797, 835, 785,
	821, 836, 0, 269, 787, 786, 272, 273, 274, 760,
	812, 837, 838, 221, 0, 275, 819, 0, 802, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	805, 803, 804, 809, 807, 806, 808, 291, 292, 497,
	293, 822, 295, 839, 840, 745, 296, 0, 297, 0,
	298, 0, 0, 823, 300, 0, 301, 302, 0, 0,
	0, 750, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 772, 863, 0, 0, 0, 0, 0, 313,
	314, 843, 824, 825, 0, 317, 0, 318, 0, 0,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 814, 815, 818, 866, 0, 816,
	796, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 845, 800, 826, 827, 828, 829, 846, 0, 801,
	0, 337, 867, 868, 338, 339, 340, 869, 830, 831,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 747, 746, 354, 355, 356, 357, 359, 789,
	358, 872, 361, 362, 364, 363, 742, 0, 873, 773,
	817, 365, 848, 366, 367, 0, 798, 799, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 851,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 751, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 790, 791, 792, 793,
	420, 426, 427, 810, 428, 409, 410, 429, 877, 430,
	852, 794, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 832, 437, 438, 439, 853, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 788, 452,
	0, 854, 855, 856, 833, 0, 0, 454, 455, 857,
	858, 771, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 811, 465, 0, 795, 466, 467, 468,
	254, 859, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 743, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 739,
	740, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 1889, 755, 1881, 765, 766, 763, 764,
	756, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 813, 759, 0, 0, 0, 263, 264, 265, 215,
	834, 797, 835, 785, 821, 836, 0, 269, 787, 786,
	272, 273, 274, 760, 812, 837, 838, 221, 0, 275,
	819, 0, 802, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 290, 805, 803, 804, 809, 807, 806,
	808, 291, 292, 497, 293, 822, 1884, 839, 840, 745,
	296, 0, 297, 0, 298, 0, 0, 823, 300, 0,
	301, 302, 0, 0, 0, 750, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 772, 863, 0, 0,
	0, 0, 0, 313, 314, 843, 824, 825, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 1885, 324, 325, 326, 814, 815,
	818, 866, 0, 816, 796, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 845, 800, 826, 827, 828,
	829, 846, 0, 801, 0, 337, 867, 868, 338, 339,
	340, 869, 830, 831, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 747, 746, 1886, 1883,
	356, 357, 359, 789, 358, 872, 361, 362, 364, 363,
	742, 0, 873, 773, 817, 365, 848, 366, 367, 0,
	798, 799, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 851, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 751, 408, 0,
	412, 413, 414, 415, 416, 417, 1887, 0, 424, 425,
	790, 791, 792, 793, 420, 426, 427, 810, 428, 409,
	410, 429, 877, 430, 852, 794, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 832, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 788, 452, 0, 854, 855, 856, 833, 0,
	0, 454, 455, 857, 858, 771, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 811, 465, 0,
	795, 466, 467, 468, 254, 859, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 1882, 474,
	743, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 739, 740, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 1878, 755, 1881,
	765, 766, 763, 764, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 813, 759, 0, 0, 0,
	263, 264, 265, 215, 834, 797, 835, 785, 821, 836,
	0, 269, 787, 786, 272, 273, 274, 760, 812, 837,
	838, 221, 0, 275, 819, 0, 802, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 862, 288, 289, 290, 805, 803,
	804, 809, 807, 806, 808, 291, 292, 497, 293, 822,
	1884, 839, 840, 745, 296, 0, 297, 0, 298, 0,
	0, 823, 300, 0, 301, 302, 0, 0, 0, 750,
	306, 303, 304, 307, 310, 305, 311, 312, 841, 842,
	772, 863, 0, 0, 0, 0, 0, 313, 314, 843,
	824, 825, 0, 317, 0, 318, 0, 0, 864, 319,
	0, 320, 844, 0, 230, 0, 321, 322, 1885, 324,
	325, 326, 814, 815, 818, 866, 0, 816, 796, 0,
	0, 0, 0, 327, 329, 336, 0, 865, 330, 845,
	800, 826, 827, 828, 829, 846, 0, 801, 0, 337,
	867, 868, 338, 339, 340, 869, 830, 831, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 847, 870, 348,
	349, 871, 0, 350, 351, 0, 0, 352, 0, 353,
	747, 746, 1886, 1883, 356, 357, 359, 789, 358, 872,
	361, 362, 364, 363, 742, 0, 873, 773, 817, 365,
	848, 366, 367, 0, 798, 799, 0, 0, 370, 371,
	0, 0, 372, 241, 874, 373, 875, 849, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 850, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 851, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 876, 404, 405, 406,
	407, 751, 408, 0, 412, 413, 414, 415, 416, 417,
	1887, 0, 424, 425, 790, 791, 792, 793, 420, 426,
	427, 810, 428, 409, 410, 429, 877, 430, 852, 794,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 832,
	437, 438, 439, 853, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 788, 452, 0, 854,
	855, 856, 833, 0, 0, 454, 455, 857, 858, 771,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 811, 465, 0, 795, 466, 467, 468, 254, 859,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 1882, 474, 743, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 739, 740, 777,
	765, 766, 763, 764, 756, 0, 752, 0, 0, 0,
	0, 0, 755, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 813, 759, 0, 0, 0,
	263, 264, 265, 215, 834, 797, 835, 785, 821, 836,
	0, 269, 787, 786, 272, 273, 274, 760, 812, 837,
	838, 221, 0, 275, 819, 0, 802, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 862, 288, 289, 290, 805, 803,
	804, 809, 807, 806, 808, 291, 292, 497, 293, 822,
	295, 839, 840, 745, 296, 0, 297, 0, 298, 0,
	0, 823, 300, 0, 301, 302, 0, 0, 0, 750,
	306, 303, 304, 307, 310, 305, 311, 312, 841, 842,
	772, 863, 0, 0, 0, 0, 0, 313, 314, 843,
	824, 825, 0, 317, 0, 318, 0, 0, 864, 319,
	0, 320, 844, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 814, 815, 818, 866, 0, 816, 796, 0,
	0, 0, 0, 327, 329, 336, 0, 865, 330, 845,
	800, 826, 827, 828, 829, 846, 0, 801, 0, 337,
	867, 868, 338, 339, 340, 869, 830, 831, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 847, 870, 348,
	349, 871, 0, 350, 351, 0, 0, 352, 0, 353,
	747, 746, 354, 355, 356, 357, 359, 789, 358, 872,
	361, 362, 364, 363, 742, 0, 873, 773, 817, 365,
	848, 366, 367, 0, 798, 799, 0, 0, 370, 371,
	0, 0, 372, 241, 874, 373, 875, 849, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 850, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 851, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 876, 404, 405, 406,
	407, 751, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 790, 791, 792, 793, 420, 426,
	427, 810, 428, 409, 410, 429, 877, 430, 852, 794,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 832,
	437, 438, 439, 853, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 788, 452, 0, 854,
	855, 856, 833, 0, 0, 454, 455, 857, 858, 771,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 811, 465, 0, 795, 466, 467, 468, 254, 859,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 743, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 739, 740, 0,
	0, 0, 0, 0, 1370, 0, 752, 0, 0, 0,
	0, 0, 755, 777, 765, 766, 763, 764, 756, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 1728, 262, 0, 0, 0, 0, 813,
	759, 0, 0, 0, 263, 264, 265, 215, 834, 797,
	835, 785, 821, 836, 0, 269, 787, 786, 272, 273,
	274, 760, 812, 837, 838, 221, 0, 275, 819, 0,
	802, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 862, 288,
	289, 290, 805, 803, 804, 809, 807, 806, 808, 291,
	292, 497, 293, 822, 295, 839, 840, 745, 296, 0,
	297, 0, 298, 0, 0, 823, 300, 0, 301, 302,
	0, 0, 0, 750, 306, 303, 304, 307, 310, 305,
	311, 312, 841, 842, 772, 863, 0, 0, 0, 0,
	0, 313, 314, 843, 824, 825, 0, 317, 0, 318,
	0, 0, 864, 319, 0, 320, 844, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 814, 815, 818, 866,
	0, 816, 796, 0, 0, 0, 0, 327, 329, 336,
	0, 865, 330, 845, 800, 826, 827, 828, 829, 846,
	0, 801, 0, 337, 867, 868, 338, 339, 340, 869,
	830, 831, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 847, 870, 348, 349, 871, 0, 350, 351, 0,
	0, 352, 0, 353, 747, 746, 354, 355, 356, 357,
	359, 789, 358, 872, 361, 362, 364, 363, 742, 0,
	873, 773, 817, 365, 848, 366, 367, 0, 798, 799,
	0, 0, 370, 371, 0, 0, 372, 241, 874, 373,
	875, 849, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 850, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 851, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	876, 404, 405, 406, 407, 751, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 790, 791,
	792, 793, 420, 426, 427, 810, 428, 409, 410, 429,
	877, 430, 852, 794, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 832, 437, 438, 439, 853, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	788, 452, 0, 854, 855, 856, 833, 0, 0, 454,
	455, 857, 858, 771, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 811, 465, 0, 795, 466,
	467, 468, 254, 859, 0, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 743, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 739, 740, 0, 0, 0, 0, 0, 0, 0,
	752, 0, 0, 0, 0, 1075, 755, 777, 765, 766,
	763, 764, 756, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 813, 759, 0, 0, 0, 263, 264,
	265, 215, 834, 797, 835, 785, 821, 836, 0, 269,
	787, 786, 272, 273, 274, 760, 812, 837, 838, 221,
	0, 275, 819, 0, 802, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 862, 288, 289, 290, 805, 803, 804, 809,
	807, 806, 808, 291, 292, 497, 293, 822, 295, 839,
	840, 745, 296, 0, 297, 0, 298, 0, 0, 823,
	300, 0, 301, 302, 0, 0, 0, 750, 306, 303,
	304, 307, 310, 305, 311, 312, 841, 842, 772, 863,
	0, 0, 0, 0, 0, 313, 314, 843, 824, 825,
	0, 317, 0, 318, 0, 0, 864, 319, 0, 320,
	844, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1074, 815, 818, 866, 0, 816, 796, 0, 0, 0,
	0, 327, 329, 336, 0, 865, 330, 845, 800, 826,
	827, 828, 829, 846, 0, 801, 0, 337, 867, 868,
	338, 339, 340, 869, 830, 831, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 847, 870, 348, 349, 871,
	0, 350, 351, 0, 0, 352, 0, 353, 747, 746,
	354, 355, 356, 357, 359, 789, 358, 872, 361, 362,
	364, 363, 742, 0, 873, 773, 817, 365, 848, 366,
	367, 0, 798, 799, 0, 0, 370, 371, 0, 0,
	372, 241, 874, 373, 875, 849, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 850, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 851, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 876, 404, 405, 406, 407, 751,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 790, 791, 792, 793, 420, 426, 427, 810,
	428, 409, 410, 429, 877, 430, 852, 794, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 832, 437, 438,
	439, 853, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 788, 452, 0, 854, 855, 856,
	833, 0, 0, 454, 455, 857, 858, 771, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 811,
	465, 0, 795, 466, 467, 468, 254, 859, 0, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 743, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 739, 740, 0, 0, 0,
	0, 0, 0, 0, 752, 0, 0, 0, 0, 1069,
	755, 777, 765, 766, 763, 764, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 813, 759, 0,
	0, 0, 263, 264, 265, 215, 834, 797, 835, 785,
	821, 836, 0, 269, 787, 786, 272, 273, 274, 760,
	812, 837, 838, 221, 0, 275, 819, 0, 802, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	805, 803, 804, 809, 807, 806, 808, 291, 292, 497,
	293, 822, 295, 839, 840, 745, 296, 0, 297, 0,
	298, 0, 0, 823, 300, 0, 301, 302, 0, 0,
	0, 750, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 772, 863, 0, 0, 0, 0, 0, 313,
	314, 843, 824, 825, 0, 317, 0, 318, 0, 0,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1068, 815, 818, 866, 0, 816,
	796, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 845, 800, 826, 827, 828, 829, 846, 0, 801,
	0, 337, 867, 868, 338, 339, 340, 869, 830, 831,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 747, 746, 354, 355, 356, 357, 359, 789,
	358, 872, 361, 362, 364, 363, 742, 0, 873, 773,
	817, 365, 848, 366, 367, 0, 798, 799, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 851,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 751, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 790, 791, 792, 793,
	420, 426, 427, 810, 428, 409, 410, 429, 877, 430,
	852, 794, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 832, 437, 438, 439, 853, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 788, 452,
	0, 854, 855, 856, 833, 0, 0, 454, 455, 857,
	858, 771, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 811, 465, 0, 795, 466, 467, 468,
	254, 859, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 743, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 739,
	740, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 1064, 755, 777, 765, 766, 763, 764,
	756, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 813, 759, 0, 0, 0, 263, 264, 265, 215,
	834, 797, 835, 785, 821, 836, 0, 269, 787, 786,
	272, 273, 274, 760, 812, 837, 838, 221, 0, 275,
	819, 0, 802, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 290, 805, 803, 804, 809, 807, 806,
	808, 291, 292, 497, 293, 822, 295, 839, 840, 745,
	296, 0, 297, 0, 298, 0, 0, 823, 300, 0,
	301, 302, 0, 0, 0, 750, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 772, 863, 0, 0,
	0, 0, 0, 313, 314, 843, 824, 825, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 814, 815,
	818, 866, 0, 816, 796, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 845, 800, 826, 827, 828,
	829, 846, 0, 801, 0, 337, 867, 868, 338, 339,
	340, 869, 830, 831, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 747, 746, 354, 355,
	356, 357, 359, 789, 358, 872, 361, 362, 364, 363,
	742, 0, 873, 773, 817, 365, 848, 366, 367, 0,
	798, 799, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 851, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 751, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	790, 791, 792, 793, 420, 426, 427, 810, 428, 409,
	410, 429, 877, 430, 852, 794, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 832, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 788, 452, 0, 854, 855, 856, 833, 0,
	0, 454, 455, 857, 858, 771, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 811, 465, 0,
	795, 466, 467, 468, 254, 859, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	743, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 739, 740, 777, 765, 766, 763, 764,
	756, 0, 752, 0, 0, 0, 0, 0, 755, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 813, 759, 0, 0, 0, 263, 264, 265, 215,
	834, 797, 835, 785, 821, 836, 0, 269, 787, 786,
	272, 273, 274, 760, 812, 837, 838, 221, 0, 275,
	819, 0, 802, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 290, 805, 803, 804, 809, 807, 806,
	808, 291, 292, 497, 293, 822, 295, 839, 840, 745,
	296, 0, 297, 0, 298, 0, 0, 823, 300, 0,
	301, 302, 0, 0, 0, 750, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 772, 863, 0, 0,
	0, 0, 0, 313, 314, 843, 824, 825, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 814, 815,
	818, 866, 0, 816, 796, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 845, 800, 826, 827, 828,
	829, 846, 0, 801, 0, 337, 867, 868, 338, 339,
	340, 869, 830, 831, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 747, 746, 354, 355,
	356, 357, 359, 789, 358, 872, 361, 362, 364, 363,
	742, 0, 873, 773, 817, 365, 848, 366, 367, 0,
	798, 799, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 851, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 751, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	790, 791, 792, 793, 420, 426, 427, 810, 428, 409,
	410, 429, 877, 430, 852, 794, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 832, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 788, 452, 0, 854, 855, 856, 833, 0,
	0, 454, 455, 857, 858, 771, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 811, 465, 0,
	795, 466, 467, 468, 254, 859, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	743, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 739, 740, 777, 765, 766, 763, 764,
	756, 0, 752, 0, 0, 0, 0, 0, 755, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 813, 759, 0, 0, 0, 263, 264, 265, 215,
	834, 797, 835, 785, 821, 836, 0, 269, 787, 786,
	272, 273, 274, 760, 812, 837, 838, 221, 0, 275,
	819, 0, 802, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 3062, 805, 803, 804, 809, 807, 806,
	808, 291, 292, 497, 293, 822, 295, 839, 840, 745,
	296, 0, 297, 0, 298, 0, 0, 823, 300, 0,
	301, 302, 0, 0, 0, 750, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 772, 863, 0, 0,
	0, 0, 0, 313, 314, 843, 824, 825, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 814, 815,
	818, 866, 0, 816, 796, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 845, 800, 826, 827, 828,
	829, 846, 0, 801, 0, 337, 867, 868, 338, 339,
	340, 869, 830, 831, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 747, 746, 354, 355,
	356, 357, 359, 789, 358, 872, 361, 362, 364, 363,
	742, 0, 873, 773, 817, 365, 848, 366, 367, 0,
	798, 799, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 851, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 751, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	790, 791, 792, 793, 420, 426, 427, 810, 428, 409,
	410, 429, 877, 430, 852, 794, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 832, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 788, 452, 0, 854, 855, 856, 833, 0,
	0, 454, 455, 857, 858, 771, 456, 457, 0, 3061,
	459, 0, 0, 460, 461, 462, 464, 811, 465, 0,
	795, 466, 467, 468, 254, 859, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	743, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 739, 740, 777, 765, 766, 763, 764,
	756, 0, 752, 0, 0, 0, 0, 0, 755, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 813, 759, 0, 0, 0, 263, 264, 265, 3060,
	834, 797, 835, 785, 821, 836, 0, 269, 787, 786,
	272, 273, 274, 760, 812, 837, 838, 221, 0, 275,
	819, 0, 802, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 3062, 805, 803, 804, 809, 807, 806,
	808, 291, 292, 497, 293, 822, 295, 839, 840, 745,
	296, 0, 297, 0, 298, 0, 0, 823, 300, 0,
	301, 302, 0, 0, 0, 750, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 772, 863, 0, 0,
	0, 0, 0, 313, 314, 843, 824, 825, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 814, 815,
	818, 866, 0, 816, 796, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 845, 800, 826, 827, 828,
	829, 846, 0, 801, 0, 337, 867, 868, 338, 339,
	340, 869, 830, 831, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 747, 746, 354, 355,
	356, 357, 359, 789, 358, 872, 361, 362, 364, 363,
	742, 0, 873, 773, 817, 365, 848, 366, 367, 0,
	798, 799, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 851, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 751, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	790, 791, 792, 793, 420, 426, 427, 810, 428, 409,
	410, 429, 877, 430, 852, 794, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 832, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 788, 452, 0, 854, 855, 856, 833, 0,
	0, 454, 455, 857, 858, 771, 456, 457, 0, 3061,
	459, 0, 0, 460, 461, 462, 464, 811, 465, 0,
	795, 466, 467, 468, 254, 859, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	743, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 739, 740, 777, 765, 766, 763, 764,
	756, 0, 752, 0, 0, 0, 0, 0, 755, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 813, 759, 0, 0, 0, 263, 264, 265, 215,
	834, 797, 835, 785, 821, 836, 0, 269, 787, 786,
	272, 273, 274, 760, 812, 837, 838, 221, 0, 275,
	819, 0, 802, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 290, 805, 803, 804, 809, 807, 806,
	808, 291, 292, 497, 293, 822, 295, 839, 840, 0,
	296, 0, 297, 0, 298, 0, 0, 823, 300, 0,
	301, 302, 0, 0, 0, 750, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 772, 863, 0, 0,
	0, 0, 0, 313, 314, 843, 824, 825, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 814, 815,
	818, 866, 0, 816, 796, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 845, 800, 826, 827, 828,
	829, 846, 0, 801, 0, 337, 867, 868, 338, 339,
	340, 869, 830, 831, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 933, 932, 354, 355,
	356, 357, 359, 789, 358, 872, 361, 362, 364, 363,
	0, 0, 873, 773, 817, 365, 848, 366, 367, 0,
	798, 799, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 851, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 751, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	790, 791, 792, 793, 420, 426, 427, 810, 428, 409,
	410, 429, 877, 430, 852, 794, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 832, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 788, 452, 0, 854, 855, 856, 833, 0,
	0, 454, 455, 857, 858, 771, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 811, 465, 0,
	795, 466, 467, 468, 254, 859, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	777, 765, 766, 763, 764, 756, 0, 0, 1904, 0,
	0, 0, 0, 1902, 1903, 0, 258, 259, 260, 261,
	0, 262, 752, 0, 0, 0, 813, 759, 755, 0,
	0, 263, 264, 265, 0, 834, 797, 835, 785, 821,
	836, 0, 269, 787, 786, 272, 273, 274, 760, 812,
	837, 838, 221, 0, 275, 819, 0, 802, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 862, 288, 289, 3062, 805,
	803, 804, 809, 807, 806, 808, 291, 292, 497, 293,
	822, 295, 839, 840, 745, 296, 0, 297, 0, 298,
	0, 0, 823, 300, 0, 301, 302, 0, 0, 0,
	750, 306, 303, 304, 307, 310, 305, 311, 312, 841,
	842, 772, 863, 0, 0, 0, 0, 0, 313, 314,
	843, 824, 825, 0, 317, 0, 318, 0, 0, 864,
	319, 0, 320, 844, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 814, 815, 818, 0, 0, 816, 796,
	0, 0, 0, 0, 327, 329, 336, 0, 865, 330,
	845, 800, 826, 827, 828, 829, 846, 0, 801, 0,
	337, 0, 0, 338, 339, 340, 869, 830, 831, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 847, 870,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 747, 746, 354, 355, 356, 357, 359, 789, 358,
	872, 361, 362, 364, 363, 742, 0, 0, 773, 817,
	365, 848, 366, 367, 0, 798, 799, 0, 0, 370,
	371, 0, 0, 372, 241, 874, 373, 875, 849, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 850, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 851, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 876, 404, 405,
	406, 407, 751, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 790, 791, 792, 793, 420,
	426, 427, 810, 428, 409, 410, 429, 0, 430, 852,
	794, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	832, 437, 438, 439, 853, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 788, 452, 0,
	854, 855, 856, 833, 0, 0, 454, 455, 857, 858,
	771, 456, 457, 0, 3061, 459, 0, 0, 460, 461,
	462, 464, 811, 465, 0, 795, 466, 467, 468, 254,
	859, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 727, 0, 929, 0, 0, 0, 0, 739, 740,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 258,
	259, 260, 261, 755, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	931, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 862, 288,
	289, 290, 0, 924, 925, 0, 927, 926, 928, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 841, 842, 0, 863, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 864, 319, 0, 320, 844, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 866,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 865, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 867, 868, 338, 339, 340, 869,
	341, 342, 0, 0, 343, 344, 345, 916, 347, 346,
	0, 847, 870, 348, 349, 871, 0, 350, 351, 0,
	0, 352, 0, 353, 933, 932, 354, 355, 356, 357,
	359, 360, 358, 872, 361, 362, 364, 363, 0, 0,
	873, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 922, 370, 371, 0, 0, 372, 241, 874, 373,
	875, 849, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 850, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	876, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 171, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	877, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 853, 0, 443,
	444, 173, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 857, 858, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 1150, 255, 0, 0, 469, 256, 0, 0,
	929, 165, 470, 471, 257, 472, 473, 474, 0, 166,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 913, 0,
	1458, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 931, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 862, 288, 289, 290, 0,
	924, 925, 0, 927, 926, 928, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 841,
	842, 0, 863, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 864,
	319, 0, 320, 844, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 866, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 865, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 867, 868, 338, 339, 340, 869, 341, 342, 0,
	0, 343, 344, 345, 916, 347, 346, 0, 847, 870,
	348, 349, 871, 0, 350, 351, 0, 0, 352, 0,
	353, 933, 932, 354, 355, 356, 357, 359, 360, 358,
	872, 361, 362, 364, 363, 0, 0, 873, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 922, 370,
	371, 0, 0, 372, 241, 874, 373, 875, 849, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 850, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 876, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 171, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 877, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 853, 0, 443, 444, 173, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 857, 858,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 1150,
	255, 0, 0, 469, 256, 0, 0, 929, 165, 470,
	471, 257, 472, 473, 474, 0, 166, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 813, 0, 913, 0, 1458, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 812, 219, 220, 221,
	0, 275, 819, 0, 802, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 862, 288, 289, 290, 805, 803, 804, 809,
	807, 806, 808, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 841, 842, 0, 863,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 864, 319, 0, 320,
	844, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	814, 815, 818, 866, 0, 816, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 865, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 867, 868,
	338, 339, 340, 869, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 847, 870, 348, 349, 871,
	0, 350, 351, 0, 0, 352, 0, 353, 933, 932,
	354, 355, 356, 357, 359, 360, 358, 872, 361, 362,
	364, 363, 0, 0, 873, 0, 817, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 874, 373, 875, 849, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 850, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 876, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 810,
	428, 409, 410, 429, 877, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 853, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 857, 858, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 811,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 2291, 0, 929, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 2612, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 931, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 862,
	288, 289, 290, 0, 924, 925, 0, 927, 926, 928,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 841, 842, 0, 863, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 864, 319, 0, 320, 844, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	866, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 865, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 867, 868, 338, 339, 340,
	869, 341, 342, 0, 0, 343, 344, 345, 916, 347,
	346, 0, 847, 870, 348, 349, 871, 0, 350, 351,
	0, 0, 352, 0, 353, 933, 932, 354, 355, 356,
	357, 359, 360, 358, 872, 361, 362, 364, 363, 0,
	0, 873, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 922, 370, 371, 0, 0, 372, 241, 874,
	373, 875, 849, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 850, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 876, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 877, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 853, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 857, 858, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 912,
	0, 929, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 913,
	0, 920, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 931, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	0, 924, 925, 0, 927, 926, 928, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	841, 842, 0, 863, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	864, 319, 0, 320, 844, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 866, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 867, 868, 338, 339, 340, 869, 341, 342,
	0, 0, 343, 344, 345, 916, 347, 346, 0, 847,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 933, 932, 354, 355, 356, 357, 359, 360,
	358, 872, 361, 362, 364, 363, 0, 0, 873, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 922,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 849,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 850,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 877, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 853, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 857,
	858, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 0, 0, 929, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 913, 0, 920, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 931, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 862, 288, 289, 290, 0, 924, 925,
	0, 927, 926, 928, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 841, 842, 0,
	863, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 864, 319, 0,
	320, 844, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 866, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 865, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 867,
	868, 338, 339, 340, 869, 341, 342, 0, 0, 343,
	344, 345, 916, 347, 346, 0, 847, 870, 348, 349,
	871, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 872, 361,
	362, 364, 363, 0, 0, 873, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 922, 370, 371, 0,
	0, 372, 241, 874, 373, 875, 849, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 850, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 876, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 877, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 853, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 857, 858, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 0, 0, 929, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 913, 0, 920, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 931, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 290, 0, 924, 925, 0, 927, 926,
	928, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 841, 842, 0, 863, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 844, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 866, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 867, 868, 338, 339,
	340, 869, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 847, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 933, 932, 354, 355,
	356, 357, 359, 360, 358, 872, 361, 362, 364, 363,
	0, 0, 873, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 849, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 850, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 877, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 853,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 857, 858, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	1147, 0, 954, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 1359, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 931,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 862, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 863, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 864, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 866, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	865, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 867, 868, 338, 339, 340, 869, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 870, 348, 349, 871, 0, 350, 351, 0, 0,
	352, 0, 353, 933, 932, 354, 355, 356, 357, 359,
	360, 358, 872, 361, 362, 364, 363, 0, 0, 873,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 874, 373, 875,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 876,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 171, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 877,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	173, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 1150, 255, 0, 0, 469, 256, 0, 0, 0,
	165, 470, 471, 257, 472, 473, 474, 0, 166, 777,
	765, 766, 763, 764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 138,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 834, 797, 835, 785, 821, 836,
	0, 269, 787, 786, 272, 273, 274, 0, 0, 837,
	838, 221, 0, 275, 222, 0, 931, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 862, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 822,
	295, 839, 840, 0, 296, 0, 297, 0, 298, 0,
	0, 823, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	772, 863, 0, 0, 0, 0, 0, 313, 314, 843,
	824, 825, 0, 317, 0, 318, 0, 0, 864, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 866, 0, 237, 796, 0,
	0, 0, 0, 327, 329, 336, 0, 865, 330, 845,
	800, 826, 827, 828, 829, 846, 0, 801, 0, 337,
	867, 868, 338, 339, 340, 869, 830, 831, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 870, 348,
	349, 871, 0, 350, 351, 0, 0, 352, 0, 353,
	933, 932, 354, 355, 356, 357, 359, 789, 358, 872,
	361, 362, 364, 363, 0, 0, 873, 773, 239, 365,
	848, 366, 367, 0, 798, 799, 0, 0, 370, 371,
	0, 0, 372, 241, 874, 373, 875, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 851, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 876, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 790, 791, 792, 793, 420, 426,
	427, 0, 428, 409, 410, 429, 877, 430, 852, 794,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 832,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 788, 452, 0, 854,
	855, 856, 833, 0, 0, 454, 455, 252, 253, 771,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 795, 466, 467, 468, 254, 859,
	494, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 0, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 2088, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 0, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 2524, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 1225,
	0, 954, 953, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 1462, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 931, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 862, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 863, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	864, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 866, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 865,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 867, 868, 338, 339, 340, 869, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	870, 348, 349, 871, 0, 350, 351, 0, 0, 352,
	0, 353, 933, 932, 354, 355, 356, 357, 359, 360,
	358, 872, 361, 362, 364, 363, 0, 0, 873, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 874, 373, 875, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 876, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 877, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 1143, 0, 954, 953,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 931, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 862, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	863, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 864, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 1142, 232, 233, 866, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 865, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 867,
	868, 338, 339, 340, 869, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 870, 348, 349,
	871, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 872, 361,
	362, 364, 363, 0, 0, 873, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 874, 373, 875, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 876, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 877, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 1139, 0, 954, 953, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 931, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	862, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 863, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 864, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1138, 232,
	233, 866, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 865, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 867, 868, 338, 339,
	340, 869, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 870, 348, 349, 871, 0, 350,
	351, 0, 0, 352, 0, 353, 933, 932, 354, 355,
	356, 357, 359, 360, 358, 872, 361, 362, 364, 363,
	0, 0, 873, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	874, 373, 875, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 876, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 877, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	1100, 0, 954, 953, 0, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 931,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 862, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 863, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 864, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1099, 232, 233, 866, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	865, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 867, 868, 338, 339, 340, 869, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 870, 348, 349, 871, 0, 350, 351, 0, 0,
	352, 0, 353, 933, 932, 354, 355, 356, 357, 359,
	360, 358, 872, 361, 362, 364, 363, 0, 0, 873,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 874, 373, 875,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 876,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 877,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 1097, 0, 954,
	953, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 931, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 862, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 863, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 864, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1096, 232, 233, 866, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 865, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	867, 868, 338, 339, 340, 869, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 870, 348,
	349, 871, 0, 350, 351, 0, 0, 352, 0, 353,
	933, 932, 354, 355, 356, 357, 359, 360, 358, 872,
	361, 362, 364, 363, 0, 0, 873, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 874, 373, 875, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 876, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 877, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 947, 0, 954, 953, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 931, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 862, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 863, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 864, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 949,
	232, 233, 866, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 865, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 867, 868, 338,
	339, 340, 869, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 870, 348, 349, 871, 0,
	350, 351, 0, 0, 352, 0, 353, 933, 932, 354,
	355, 356, 357, 359, 360, 358, 872, 361, 362, 364,
	363, 0, 0, 873, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 874, 373, 875, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 876, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 877, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 954, 953, 469,
	256, 0, 951, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 931, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 862, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 863,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 864, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 866, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 865, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 867, 868,
	338, 339, 340, 869, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 870, 348, 349, 871,
	0, 350, 351, 0, 0, 352, 0, 353, 933, 932,
	354, 355, 356, 357, 359, 360, 358, 872, 361, 362,
	364, 363, 0, 0, 873, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 874, 373, 875, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 876, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 877, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 954, 953,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 931, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 862, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	863, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 864, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 866, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 865, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 867,
	868, 338, 339, 340, 869, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 870, 348, 349,
	871, 0, 350, 351, 0, 0, 352, 0, 353, 933,
	932, 354, 355, 356, 357, 359, 360, 358, 872, 361,
	362, 364, 363, 0, 0, 873, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 874, 373, 875, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 876, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 877, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 954,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 931, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 862, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 863, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 864, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 866, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 865, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	867, 868, 338, 339, 340, 869, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 870, 348,
	349, 871, 0, 350, 351, 0, 0, 352, 0, 353,
	933, 932, 354, 355, 356, 357, 359, 360, 358, 872,
	361, 362, 364, 363, 0, 0, 873, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 874, 373, 875, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 876, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 877, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 595, 0, 207, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 213, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 212, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 206, 0, 207, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 477, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 213, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 212, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 207, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 477, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 213, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 1697, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 212, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 207, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 477, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 213, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 212, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 494, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 477, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 494, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 477, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	1981, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 1978, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 2058,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 1984, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	2056, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 2055, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 1983,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 2057, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 494, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 1981, 275, 222, 0, 0, 1975, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 1978, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 1984, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 1974, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	1983, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 1982, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 602, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 601, 581, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 584,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 585, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 586, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	580, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 581, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 584, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 585, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 586, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 494, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 584, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 585, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 586, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 1118, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 922, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 942, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	944, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 922, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 939, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 941, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 922, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 935,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 937, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 922,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 517, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 516, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 515,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 494,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 1961, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	494, 2447, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 494, 2447, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 2444, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 494, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	922, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 1717, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 1715, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 1713, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 494, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 1690, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 1650,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 1648, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 628, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 1198, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 629, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 625, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 624, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	1546, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 1545, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 628, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 1198, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 629, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 625, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 624,
	250, 251, 453, 0, 0, 454, 1199, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 628, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	618, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 629, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 625, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 1168, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 624, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 1136, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1135, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 1132, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1131, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 1129, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1128, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 1126, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 1125, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 1122,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1121, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 494, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 258, 259,
	260, 261, 1110, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 1108, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1107, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 1102, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 1093, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1092, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 1088, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 231, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 1084, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1086, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 961, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 963, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 958,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 628, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 618, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 231, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 617, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 629, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	619, 408, 0, 412, 413, 625, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 620, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 624, 250,
	251, 453, 0, 0, 454, 622, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 608, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	609, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	604, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 593, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 539, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 0, 0, 219, 220, 221, 0,
	275, 222, 0, 0, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 0, 288, 289, 290, 0, 0, 0, 0, 0,
	0, 0, 291, 292, 497, 293, 294, 295, 223, 224,
	0, 296, 0, 297, 0, 298, 0, 0, 299, 300,
	0, 301, 302, 0, 0, 0, 225, 306, 303, 304,
	307, 310, 305, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 228, 315, 316, 0,
	317, 0, 318, 0, 0, 0, 319, 0, 320, 229,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 231,
	232, 233, 0, 0, 237, 328, 0, 0, 0, 0,
	327, 329, 336, 0, 0, 330, 234, 332, 331, 333,
	334, 335, 235, 0, 236, 0, 337, 0, 0, 338,
	339, 340, 0, 341, 342, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 238, 0, 348, 349, 0, 0,
	350, 351, 0, 0, 352, 0, 353, 0, 0, 354,
	355, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 494, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 497, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 494, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 0, 0, 219, 220,
	221, 0, 275, 222, 0, 0, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 0, 288, 289, 290, 0, 0, 0,
	0, 0, 0, 0, 291, 292, 497, 293, 294, 295,
	223, 224, 0, 296, 0, 297, 0, 298, 0, 0,
	299, 300, 0, 301, 302, 0, 0, 0, 225, 306,
	303, 304, 307, 310, 305, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 228, 315,
	316, 0, 317, 0, 318, 0, 0, 0, 319, 0,
	320, 229, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 2348, 232, 233, 0, 0, 237, 328, 0, 0,
	0, 0, 327, 329, 336, 0, 0, 330, 234, 332,
	331, 333, 334, 335, 235, 0, 236, 0, 337, 0,
	0, 338, 339, 340, 0, 341, 342, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 238, 0, 348, 349,
	0, 0, 350, 351, 0, 0, 352, 0, 353, 0,
	0, 354, 355, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 494,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 497, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 2346, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	494, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 0, 0,
	219, 220, 221, 0, 275, 222, 0, 0, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 0, 288, 289, 290, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 497, 293,
	294, 295, 223, 224, 0, 296, 0, 297, 0, 298,
	0, 0, 299, 300, 0, 301, 302, 0, 0, 0,
	225, 306, 303, 304, 307, 310, 305, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	228, 315, 316, 0, 317, 0, 318, 0, 0, 0,
	319, 0, 320, 229, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 2335, 232, 233, 0, 0, 237, 328,
	0, 0, 0, 0, 327, 329, 336, 0, 0, 330,
	234, 332, 331, 333, 334, 335, 235, 0, 236, 0,
	337, 0, 0, 338, 339, 340, 0, 341, 342, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 238, 0,
	348, 349, 0, 0, 350, 351, 0, 0, 352, 0,
	353, 0, 0, 354, 355, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 494, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 497,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 609, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 494, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	1559, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	0, 0, 219, 220, 221, 0, 275, 222, 0, 0,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 0, 288, 289,
	290, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	497, 293, 294, 295, 223, 224, 0, 296, 0, 297,
	0, 298, 0, 0, 299, 300, 0, 301, 302, 0,
	0, 0, 225, 306, 303, 304, 307, 310, 305, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 228, 315, 316, 0, 317, 0, 318, 0,
	0, 0, 319, 0, 320, 229, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 231, 232, 233, 0, 0,
	237, 328, 0, 0, 0, 0, 327, 329, 336, 0,
	0, 330, 234, 332, 331, 333, 334, 335, 235, 0,
	236, 0, 337, 0, 0, 338, 339, 340, 0, 341,
	342, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	238, 0, 348, 349, 0, 0, 350, 351, 0, 0,
	352, 0, 353, 0, 0, 354, 355, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 0, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 494, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 497, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1550, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 494, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 0, 0, 219, 220, 221, 0, 275, 222,
	0, 0, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 0,
	288, 289, 290, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 497, 293, 294, 295, 223, 224, 0, 296,
	0, 297, 0, 298, 0, 0, 299, 300, 0, 301,
	302, 0, 0, 0, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 0,
	318, 0, 0, 0, 319, 0, 320, 229, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	0, 0, 237, 328, 0, 0, 0, 0, 327, 329,
	336, 0, 0, 330, 234, 332, 331, 333, 334, 335,
	235, 0, 236, 0, 337, 0, 0, 338, 339, 340,
	0, 341, 342, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 238, 0, 348, 349, 0, 0, 350, 351,
	0, 0, 352, 0, 353, 0, 0, 354, 355, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 245, 895, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 494, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 497, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 0, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 0, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 0, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 1324, 1298, 0, 0, 0, 0, 1304, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 1346, 0, 0, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 1343, 0, 0, 0,
	0, 0, 0, 1313, 1314, 0, 0, 0, 0, 0,
	1321, 1322, 1323, 1324, 0, 0, 1334, 0, 0, 1304,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 1336, 1346, 0, 0, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1343, 0,
	0, 0, 0, 0, 0, 1313, 1314, 0, 0, 1296,
	1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 1334, 0,
	0, 1325, 0, 0, 0, 1319, 0, 1332, 0, 0,
	0, 0, 0, 0, 1299, 0, 0, 1345, 1320, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 1298,
	0, 1337, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 1323,
	1324, 0, 0, 1337, 0, 0, 1304, 0, 0, 1335,
	0, 0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309,
	1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 1336,
	1346, 0, 0, 1326, 1327, 1328, 2733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 1343, 0, 0, 0, 0,
	0, 0, 1313, 1314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 1335, 1319, 0, 1310, 1311, 1317, 1316, 1312, 1338,
	0, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306,
	1344, 0, 0, 0, 0, 0, 0, 0, 2230, 0,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 1297, 0,
	1329, 1330, 1331, 1339, 1340, 1341, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 1345, 0, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	1337, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 1323, 1324, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 1335, 0,
	0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309, 1307,
	1308, 1300, 1301, 1302, 1303, 1305, 1306, 1336, 1346, 0,
	0, 1326, 1327, 1328, 0, 2229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 1343, 0, 0, 0, 0, 0, 0,
	1313, 1314, 0, 0, 1296, 1297, 0, 1329, 1330, 1331,
	1339, 1340, 1341, 1334, 0, 0, 0, 0, 0, 0,
	1319, 0, 1332, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 1345, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 1296, 1297, 0, 1329,
	1330, 1331, 1339, 1340, 1341, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 1345, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 1323, 1324, 1298, 0, 1337, 0,
	0, 1304, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 1346, 0, 0, 1326, 1327,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	1343, 0, 0, 0, 0, 0, 0, 1313, 1314, 0,
	0, 0, 0, 0, 1321, 1322, 1323, 1324, 0, 0,
	1334, 0, 0, 1304, 0, 0, 1335, 1319, 0, 1310,
	1311, 1317, 1316, 1312, 1338, 0, 1309, 1307, 1308, 1300,
	1301, 1302, 1303, 1305, 1306, 1344, 1336, 1346, 0, 0,
	1326, 1327, 1328, 2226, 0, 0, 0, 0, 0, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 1343, 0, 0, 0, 0, 0, 0, 1313,
	1314, 0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339,
	1340, 1341, 1334, 0, 0, 1325, 0, 0, 0, 1319,
	0, 1332, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 1345, 1320, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 1298, 0, 1337, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 1323, 1324, 0, 0, 1337, 0, 0,
	1304, 0, 0, 1335, 0, 0, 1310, 1311, 1317, 1316,
	1312, 1338, 0, 1309, 1307, 1308, 1300, 1301, 1302, 1303,
	1305, 1306, 0, 1336, 1346, 0, 0, 1326, 1327, 1328,
	2225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 1343,
	0, 0, 0, 0, 0, 0, 1313, 1314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 0, 1335, 1319, 0, 1310, 1311,
	1317, 1316, 1312, 1338, 0, 1309, 1307, 1308, 1300, 1301,
	1302, 1303, 1305, 1306, 1344, 0, 0, 0, 0, 0,
	0, 0, 2224, 0, 0, 0, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340,
	1341, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	1345, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1298, 0, 1337, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 1297, 0, 1329,
	1330, 1331, 1339, 1340, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 1323, 1324, 0, 0, 1298, 0, 0, 1304,
	0, 0, 1335, 0, 1318, 1310, 1311, 1317, 1316, 1312,
	1338, 1315, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305,
	1306, 0, 1336, 1346, 0, 3025, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1343, 0,
	0, 0, 0, 0, 0, 1313, 1314, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 1323, 1324, 1334, 0,
	0, 0, 0, 1304, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 1336, 1346, 0, 0,
	1326, 1327, 1328, 0, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 1343, 0, 0, 0, 0, 0, 0, 1313,
	1314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1334, 1325, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 1297, 0, 1329, 1330,
	1331, 1339, 1340, 1341, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 1345, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1298, 0, 1337, 0, 0,
	0, 1335, 0, 1318, 1310, 1311, 1317, 1316, 1312, 1338,
	1315, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306,
	0, 0, 0, 0, 3021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 1323, 1324, 0, 0, 0,
	0, 0, 1304, 0, 0, 1335, 0, 0, 1310, 1311,
	1317, 1316, 1312, 1338, 0, 1309, 1307, 1308, 1300, 1301,
	1302, 1303, 1305, 1306, 0, 1336, 1346, 0, 2961, 1326,
	1327, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 1343, 0, 0, 0, 0, 0, 0, 1313, 1314,
	0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340,
	1341, 1334, 0, 0, 0, 0, 0, 0, 1319, 0,
	1332, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	1345, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 1296, 1297, 0, 1329, 1330, 1331,
	1339, 1340, 1341, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 1345, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 1323, 1324, 1298, 0, 1337, 0, 0, 1304,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 1346, 0, 0, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1343, 0,
	0, 0, 0, 0, 0, 1313, 1314, 0, 0, 0,
	0, 0, 1321, 1322, 1323, 1324, 0, 0, 1334, 0,
	0, 1304, 0, 0, 1335, 1319, 0, 1310, 1311, 1317,
	1316, 1312, 1338, 0, 1309, 1307, 1308, 1300, 1301, 1302,
	1303, 1305, 1306, 1344, 1336, 1346, 0, 2960, 1326, 1327,
	1328, 0, 0, 0, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	1343, 0, 0, 0, 0, 0, 0, 1313, 1314, 0,
	0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341,
	1334, 0, 0, 1325, 0, 0, 0, 1319, 0, 1332,
	0, 0, 0, 0, 0, 0, 1299, 0, 0, 1345,
	1320, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 1298, 0, 1337, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 1323, 1324, 0, 0, 1337, 0, 0, 1304, 0,
	0, 1335, 0, 0, 1310, 1311, 1317, 1316, 1312, 1338,
	0, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306,
	0, 1336, 1346, 0, 2909, 1326, 1327, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 1343, 0, 0,
	0, 0, 0, 0, 1313, 1314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	0, 0, 0, 1335, 1319, 0, 1310, 1311, 1317, 1316,
	1312, 1338, 0, 1309, 1307, 1308, 1300, 1301, 1302, 1303,
	1305, 1306, 1344, 0, 0, 0, 2870, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 1345, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 1337, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 1296, 1297, 0, 1329, 1330, 1331,
	1339, 1340, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 1324, 0, 0, 1298, 0, 0, 1304, 0, 0,
	1335, 0, 1318, 1310, 1311, 1317, 1316, 1312, 1338, 1315,
	1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 0,
	1336, 1346, 0, 2781, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 1343, 0, 0, 0,
	0, 0, 0, 1313, 1314, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 1323, 1324, 1334, 0, 0, 0,
	0, 1304, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 1336, 1346, 0, 0, 1326, 1327,
	1328, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	1343, 0, 0, 0, 0, 0, 0, 1313, 1314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1325, 0, 0, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339,
	1340, 1341, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 1345, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 1337, 0, 0, 0, 1335,
	0, 1318, 1310, 1311, 1317, 1316, 1312, 1338, 1315, 1309,
	1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 0,
	0, 0, 2738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 1323, 1324, 0, 0, 0, 0, 0,
	1304, 0, 0, 1335, 0, 0, 1310, 1311, 1317, 1316,
	1312, 1338, 0, 1309, 1307, 1308, 1300, 1301, 1302, 1303,
	1305, 1306, 0, 1336, 1346, 0, 2737, 1326, 1327, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 1343,
	0, 0, 0, 0, 0, 0, 1313, 1314, 0, 0,
	1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 1334,
	0, 0, 0, 0, 0, 0, 1319, 0, 1332, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 1345, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340,
	1341, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	1345, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 1324, 1298, 0, 1337, 0, 0, 1304, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 1346, 0, 0, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 1343, 0, 0, 0,
	0, 0, 0, 1313, 1314, 0, 0, 0, 0, 0,
	1321, 1322, 1323, 1324, 0, 0, 1334, 0, 0, 1304,
	0, 0, 1335, 1319, 0, 1310, 1311, 1317, 1316, 1312,
	1338, 0, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305,
	1306, 1344, 1336, 1346, 0, 2736, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1343, 0,
	0, 0, 0, 0, 0, 1313, 1314, 0, 0, 1296,
	1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 1334, 0,
	0, 1325, 0, 0, 0, 1319, 0, 1332, 0, 0,
	0, 0, 0, 0, 1299, 0, 0, 1345, 1320, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 1298,
	0, 1337, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 1323,
	1324, 0, 0, 1337, 0, 0, 1304, 0, 0, 1335,
	0, 0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309,
	1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 1336,
	1346, 0, 2708, 1326, 1327, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 1343, 0, 0, 0, 0,
	0, 0, 1313, 1314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 1335, 1319, 0, 1310, 1311, 1317, 1316, 1312, 1338,
	0, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306,
	1344, 0, 0, 0, 2528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 1297,
	0, 1329, 1330, 1331, 1339, 1340, 1341, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 1345, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1298, 0,
	1337, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 1322, 1323, 1324,
	0, 0, 1298, 0, 0, 1304, 0, 0, 1335, 0,
	1318, 1310, 1311, 1317, 1316, 1312, 1338, 1315, 1309, 1307,
	1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 1336, 1346,
	0, 2501, 1326, 1327, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 1343, 0, 0, 0, 0, 0,
	0, 1313, 1314, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 1323, 1324, 1334, 0, 0, 0, 0, 1304,
	3103, 1319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 1336, 1346, 0, 0, 1326, 1327, 1328, 0,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1343, 0,
	0, 0, 0, 0, 0, 1313, 1314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1325,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3102, 0, 0, 0, 0,
	0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 1299, 0, 0, 1345,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 0, 1337, 0, 0, 0, 1335, 0, 1318,
	1310, 1311, 1317, 1316, 1312, 1338, 1315, 1309, 1307, 1308,
	1300, 1301, 1302, 1303, 1305, 1306, 0, 0, 0, 0,
	1827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 1323, 1324, 0, 0, 0, 0, 0, 1304, 0,
	2274, 1335, 0, 2273, 1310, 1311, 1317, 1316, 1312, 1338,
	0, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306,
	0, 1336, 1346, 0, 0, 1326, 1327, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 1343, 0, 0,
	0, 0, 0, 0, 1313, 1314, 0, 0, 1296, 1297,
	0, 1329, 1330, 1331, 1339, 1340, 1341, 1334, 0, 0,
	0, 0, 0, 0, 1319, 0, 1332, 0, 0, 0,
	0, 2166, 0, 1299, 0, 0, 1345, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 1315, 1930, 0, 0, 0, 0, 0,
	1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 1332, 0,
	2167, 0, 1929, 0, 0, 1299, 0, 0, 1345, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 1322, 1323, 1324,
	1298, 0, 1337, 0, 0, 1304, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 1346,
	0, 0, 1326, 1327, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 1343, 0, 0, 0, 0, 0,
	0, 1313, 1314, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 1324, 0, 0, 1334, 0, 0, 1304, 0, 0,
	1335, 1319, 0, 1310, 1311, 1317, 1316, 1312, 1338, 0,
	1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 1344,
	1336, 1346, 0, 0, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 1343, 0, 0, 0,
	0, 0, 0, 1313, 1314, 0, 0, 1296, 1297, 0,
	1329, 1330, 1331, 1339, 1340, 1341, 1334, 0, 0, 1325,
	0, 0, 0, 1319, 0, 1332, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 1345, 1320, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 0, 1298, 0, 1337,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 1323, 1324, 0,
	0, 1337, 0, 0, 1304, 0, 0, 1335, 0, 0,
	1310, 1311, 1317, 1316, 1312, 1338, 0, 1309, 1307, 1308,
	1300, 1301, 1302, 1303, 1305, 1306, 0, 1336, 1346, 0,
	0, 1326, 1327, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 1343, 0, 0, 0, 0, 0, 0,
	1313, 1314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 1335,
	1319, 0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309,
	1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 724, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 1297, 0, 1329, 1330,
	1331, 1339, 1340, 1341, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 1345, 0, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 1337, 0,
	0, 0, 0, 1318, 0, 0, 0, 0, 0, 0,
	1315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 1323, 1324, 0, 0, 0,
	0, 0, 1304, 0, 0, 0, 1335, 0, 0, 1310,
	1311, 1317, 1316, 1312, 1338, 0, 1309, 1307, 1308, 1300,
	1301, 1302, 1303, 1305, 1306, 1336, 1346, 0, 0, 1326,
	1327, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 1343, 0, 0, 0, 0, 0, 0, 1313, 1314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339,
	1340, 1341, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 1299, 0,
	0, 1345, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 1337, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 1323, 1324, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 1335, 2284, 0, 1310, 1311, 1317,
	1316, 1312, 1338, 0, 1309, 1307, 1308, 1300, 1301, 1302,
	1303, 1305, 1306, 1336, 1346, 0, 0, 1326, 1327, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 1343,
	0, 0, 0, 0, 0, 0, 1313, 1314, 0, 0,
	1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 1334,
	0, 0, 0, 0, 0, 0, 1319, 0, 1332, 0,
	0, 0, 2279, 0, 0, 1299, 0, 0, 1345, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 1296, 1297, 0, 1329, 1330, 1331, 1339, 1340,
	1341, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	1345, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 1324, 1298, 0, 1337, 0, 0, 1304, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 1346, 0, 0, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 1343, 0, 0, 0,
	0, 0, 0, 1313, 1314, 0, 0, 0, 0, 0,
	1321, 1322, 1323, 1324, 0, 0, 1334, 0, 0, 1304,
	0, 0, 1335, 1319, 0, 1310, 1311, 1317, 1316, 1312,
	1338, 0, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305,
	1306, 1344, 1336, 1346, 0, 0, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1343, 0,
	0, 0, 0, 0, 0, 1313, 1314, 0, 0, 1296,
	1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 1334, 0,
	0, 1325, 0, 0, 0, 1319, 0, 1332, 0, 0,
	0, 2223, 0, 0, 1299, 0, 0, 1345, 1320, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 0, 1298,
	0, 1337, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 0, 2242, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 1323,
	1324, 0, 0, 1337, 0, 0, 1304, 0, 0, 1335,
	0, 0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309,
	1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 1336,
	1346, 0, 0, 1326, 1327, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 1343, 0, 0, 0, 0,
	0, 0, 1313, 1314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 0, 0, 0,
	0, 1335, 1319, 0, 1310, 1311, 1317, 1316, 1312, 1338,
	0, 1309, 1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 1297, 0,
	1329, 1330, 1331, 1339, 1340, 1341, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 1345, 0, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	1337, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 1323, 1324, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 1335, 0,
	0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309, 1307,
	1308, 1300, 1301, 1302, 1303, 1305, 1306, 1336, 1346, 0,
	0, 1326, 1327, 1328, 0, 0, 0, 0, 0, 1296,
	1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 0, 0,
	0, 0, 1342, 1343, 0, 0, 0, 1332, 0, 0,
	1313, 1314, 0, 0, 1299, 0, 0, 1345, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 1318, 1344, 0,
	0, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 0, 1333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 1323,
	1324, 0, 0, 0, 0, 1320, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 1297,
	0, 1329, 1330, 1331, 1339, 1340, 1341, 0, 1337, 1336,
	1346, 0, 0, 1326, 1327, 1328, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 1342, 1343, 0, 0, 0, 0,
	0, 0, 1313, 1314, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1334, 1318, 0, 0, 0,
	0, 0, 1319, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 1335, 0, 0, 1310,
	1311, 1317, 1316, 1312, 1338, 0, 1309, 1307, 1308, 1300,
	1301, 1302, 1303, 1305, 1306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 1322, 1323, 1324,
	0, 0, 0, 0, 0, 1304, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1320, 1336, 1346,
	0, 0, 1326, 1327, 1328, 0, 0, 0, 0, 0,
	1296, 1297, 0, 1329, 1330, 1331, 1339, 1340, 1341, 0,
	1337, 0, 0, 1342, 1343, 0, 0, 0, 0, 0,
	0, 1313, 1314, 0, 0, 1299, 0, 0, 1345, 0,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 1319, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 1318, 1344,
	0, 0, 0, 0, 0, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309, 1307,
	1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 1324, 0, 0, 0, 0, 1320, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	1336, 1346, 0, 0, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 1314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	1310, 1311, 1317, 1316, 1312, 1338, 0, 1309, 1307, 1308,
	1300, 1301, 1302, 1303, 1305, 1306, 0, 0, 0, 0,
	0, 0, 0, 0, 1610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	1610, 0, 0, 0, 0, 0, 0, 0, 1320, 1621,
	1606, 1611, 1594, 1631, 1630, 0, 0, 1596, 1595, 0,
	0, 0, 0, 0, 1640, 1639, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 1621, 1606, 1611, 1594, 1631,
	1630, 0, 0, 1596, 1595, 0, 0, 0, 0, 0,
	1640, 1639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1632, 0, 1628, 1627, 0, 0,
	0, 0, 0, 0, 0, 0, 1626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1632, 0, 1628, 1627, 0, 0, 0, 0, 0, 0,
	0, 0, 1626, 0, 1625, 1623, 1624, 0, 0, 1335,
	0, 0, 1310, 1311, 1317, 1316, 1312, 1338, 0, 1309,
	1307, 1308, 1300, 1301, 1302, 1303, 1305, 1306, 0, 0,
	1625, 1623, 1624, 1605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1614, 1609, 1615, 1616, 1617, 1618,
	1619, 0, 1613, 0, 0, 0, 0, 0, 0, 1605,
	0, 1637, 1638, 0, 0, 0, 0, 0, 0, 0,
	1614, 1609, 1615, 1616, 1617, 1618, 1619, 0, 1613, 0,
	0, 0, 0, 0, 0, 0, 0, 1637, 1638, 0,
	0, 0, 1598, 0, 0, 655, 0, 686, 0, 0,
	0, 0, 0, 0, 0, 1629, 0, 0, 0, 1607,
	1608, 0, 0, 0, 0, 0, 0, 662, 1598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 1629, 0, 0, 0, 1607, 1608, 0, 0, 0,
	0, 0, 1622, 0, 0, 0, 1748, 1746, 1747, 1750,
	1749, 661, 0, 0, 0, 0, 663, 0, 0, 0,
	691, 0, 0, 0, 0, 0, 669, 670, 1622, 0,
	0, 681, 0, 0, 0, 0, 0, 0, 0, 1599,
	1600, 1601, 1602, 0, 0, 687, 664, 0, 0, 0,
	0, 0, 0, 1620, 1603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1642, 1599, 1600, 1601, 1602, 0,
	0, 685, 675, 0, 0, 0, 0, 0, 0, 1620,
	1603, 1597, 0, 0, 1633, 1634, 1635, 1636, 0, 0,
	1642, 0, 0, 0, 0, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 0, 659, 0, 1597, 0, 1604,
	1633, 1634, 1635, 1636, 1641, 0, 0, 0, 0, 0,
	666, 667, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1604, 0, 0, 0, 0,
	1641, 0, 673, 0, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 683, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 657, 676, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 677, 0, 0, 0,
	692, 693, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	682,
}
var sqlPact = [...]int{

	4824, -1000, -4, -1000, -1000, -1000, 201, -1000, -1000, -1000,
	-1000, 198, 196, 194, -1000, 193, 190, 188, 187, 185,
	184, 180, 179, 176, 173, 171, 167, -1000, -1000, 166,
	-1000, -1000, -1000, -1000, 163, 161, 159, -1000, 158, 1476,
	31759, 153, 149, 148, 2021, 49483, 1417, 138, 135, -1000,
	133, 1624, 36754, 1100, 1604, -1000, 127, 126, 1502, 49102,
	4408, 1981, 34438, 1350, 1912, 48715, 31372, 1903, 34051, 48328,
	-1000, -1000, 1068, -1000, -1000, 47941, 123, 122, 121, 119,
	118, -1000, 117, 47554, 116, 107, 106, 105, 103, 102,
	100, 97, -1000, 96, 94, 93, 82, 79, 78, 77,
	75, 71, 69, 67, 65, 64, 63, 62, 61, -1000,
	59163, 60, 59, 58, -1000, 1334, 56, 55, 54, 53,
	52, -1000, -1000, 50, 48, 46, 45, 44, 43, -1000,
	131, 41, 35, 32, 31, 29, -1000, 1102, 631, 3069,
	13622, 1277, 1274, 1273, 1212, 1205, 742, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52150, 49483, 28, -96, 27,
	-1000, 2315, 746, 24747, 4824, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36367, 35980, 35593,
	29842, 47167, 46780, 10736, 10736, 951, -1000, -1000, -1000, -1000,
	-1000, -6, 32902, 49483, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 239, -1000, -1000, -1000,
	-1000, -1000, -1000, 20761, 611, 20337, 206, 19913, 186, 339,
	-1000, -1000, -1000, 236, -1000, -1000, -1000, -1000, 1281, -1000,
	-1000, -1000, -1000, 46393, 46006, 2203, 45619, 29445, 29048, 45232,
	1748, 1746, 44845, -1000, -1000, 44458, -1000, -1000, 2251, 1966,
	1941, 35206, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44077, 43690, 43303, 42916, 42529, 28651, 28254, 580, -1000,
	-1000, -1000, -1000, 25908, -1000, -1000, -1000, -1000, -1000, 26,
	-1000, 25, 24, -1000, 23, 19, 18, 17, 15, 14,
	12, 11, -1000, 10, 9, -1000, 8, 7, -1000, 6,
	5, 1565, 1506, 1802, 42142, 1040, 1698, -1000, 1415, -19,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 49483, -1000, 21171,
	98, -1000, 578, -1000, 1889, -1000, 21171, 98, -1000, 1413,
	150, 1305, -1000, -1000, -1000, 1325, 1027, -1000, -1000, 49483,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2563, 1455, 576,
	41755, -1000, 1613, -1000, 697, 14442, -1000, 896, -1000, 14442,
	230, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1980, 1177, 2510,
	27857, 1488, 2357, 2228, 2561, 1544, 2222, 2195, 2145, 2128,
	2110, 2560, 1123, 2558, 1034, 856, 2556, 2091, 2003, 2548,
	1550, 886, 2544, 2540, 1972, 1885, -1000, -1000, -1000, -1000,
	1060, -1000, -1000, -1000, -1000, -1000, -1000, 38278, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1102, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1632, 2303, 2303, 2303, 2386, 328, 319, -1000, 131, -1000,
	1850, -1000, 1442, -1000, -1000, -1000, 58217, -1000, -1000, 21171,
	21171, 21171, 21171, 21171, 1268, -1000, -1000, -1000, 607, -1000,
	575, 474, 11967, -1000, -1000, 2454, -1000, -1000, -1000, 359,
	21171, -1000, 226, -1000, -1000, -1000, -1000, 574, 2529, -1000,
	750, -1000, -1000, -1000, 711, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1944, 517, 515, -1000, 514, 511, 510, -1000,
	-1000, -1000, 571, 569, 568, 560, 551, 550, 549, 548,
	-1000, -1000, -1000, 1217, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 769, -1000, 769, 769, 490,
	490, 544, 541, 494, 531, -1000, -1000, 529, 490, 528,
	527, -1000, -1000, 526, 653, -1000, 648, 523, 522, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1290, -1000,
	-1000, 1290, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 950,
	51007, -1000, -1000, -1000, -10, 49483, -1000, 339, -10, -1000,
	-1000, 519, -1000, 15276, 15276, 15276, -1000, -1000, 1412, 21171,
	-1000, 3072, -1000, 3251, -212, 518, 25521, 644, 644, -1000,
	23586, 614, 27460, -1000, 517, 515, 514, 511, 510, -1000,
	224, -1000, -1000, -1000, -1000, -1000, 2491, 2189, 1004, -1000,
	1155, 2187, -1000, 3087, 2181, 1152, -1000, -1000, 733, 2179,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1368,
	-1000, -1000, 1549, 2178, -155, 2006, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1477, -1000, 30223, 32902, -11, -1000, -1000,
	-65, -1000, 10341, 58217, -1000, -1000, -1000, 58217, 633, -1000,
	-1000, 2170, -1000, 58217, 629, -1000, -1000, 2166, -1000, 1879,
	49483, 10736, 49483, 49483, -1000, 508, 1607, 1411, -1000, -1000,
	32521, 3087, 1592, -1000, -1000, 721, 1586, -1000, -1000, 1583,
	-1000, 339, -1000, -1000, 41368, 51769, 721, 1575, -1000, -1000,
	-1000, 38278, -1000, 49483, -1000, 49483, -1000, 1073, -1000, 51388,
	140, 2159, -1000, -1000, 140, 2158, -1000, 140, 2153, -1000,
	139, 2151, -1000, -1000, 1394, 2150, -1000, -104, 2148, -1000,
	-1000, -104, 2134, -1000, -1000, 21171, -28, -1000, -1000, -1000,
	746, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40981, 30223,
	-1000, -1000, -1000, 32521, 49483, 34819, 671, 58217, -1000, 2426,
	58966, 30223, 58217, -1000, 32521, 49483, 1931, -1000, 40594, 40207,
	2360, 691, -1000, -1000, 49483, -1000, 21171, -1000, 2425, 1612,
	-33, -1000, -1000, -1000, -1000, -1000, 1655, 1659, 873, 1298,
	-1000, 14442, 14442, 2243, -1000, 223, 10736, -1000, -1000, 1016,
	1694, -1000, -1000, -1000, -1000, -1000, 39820, -1000, -1000, -1000,
	1370, 49483, -1000, -1000, 1923, -1000, 32140, 49483, -1000, 49483,
	-1000, 49483, -1000, 49483, -1000, 49483, -1000, -1000, -1000, -1000,
	-1000, 2072, 1227, 1921, -1000, 49483, -1000, 49483, -1000, -1000,
	-1000, 1648, -1000, -1000, -1000, 39439, 39052, 38665, -1000, -1000,
	1156, -1000, 1003, -1000, -1000, 141, -1000, -1000, 1632, -1000,
	1371, 1719, 19489, 1707, 21171, 131, -1000, -1000, 131, 131,
	13198, -1000, -1000, -1000, 49483, -1000, 58940, 58966, 10736, 968,
	21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171,
	21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171,
	21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171, 21171,
	21171, 21171, 21171, 21171, 21171, 1703, 21171, 949, 21171, 21171,
	21171, 21171, 1536, -1000, -1000, 1365, 393, 1357, -1000, 2465,
	2465, 2465, 58518, 58518, 446, 607, -1000, 21171, -1000, 98,
	21171, 319, 56218, 1504, -9, 11557, -1000, -1000, -1000, -1000,
	19065, 760, 58217, 9946, 11133, -1000, 2501, 1111, 1963, 1817,
	507, 654, 650, 646, 627, 617, 21171, 21171, 21171, 21171,
	21171, 21171, 21171, 21171, -1000, -1000, -1000, -1000, -1000, -1000,
	2454, -1000, 18655, 18231, -1000, 2497, 17807, 17383, -1000, 16959,
	22401, 16535, 965, 964, 957, 956, 21171, 12377, -1000, -33,
	-1000, 51007, -1000, 49483, -10, 2424, 21171, 142, -1000, 56810,
	-1000, 142, 142, 501, -41, 58217, 1700, 1699, 25134, 1644,
	1275, 1275, 1275, -1000, 500, 599, 644, 7557, 16111, 498,
	644, 644, 203, 37135, 1276, 37135, 254, 318, 23199, 3072,
	-1000, -1000, 49483, 10736, -18, 1239, -1000, 33664, 2335, 2300,
	2260, 1065, -1000, 1029, 2385, 38278, 2405, 98, 2309, 1878,
	-1000, -1000, 940, 38278, 3087, -1000, 58966, -1000, 1765, 2380,
	1020, 1048, 1020, 1020, 1038, 38278, 939, 1240, 30223, 2304,
	936, -23, 2399, 98, 2296, 1874, 935, -1000, -1000, 49483,
	10736, 2295, 997, 634, -11, 32902, 49483, 221, -1000, 21171,
	98, 21171, 98, 1024, -42, 220, 1711, 1706, 203, -1000,
	33283, 2423, 2132, 49483, 934, -1000, 3087, 2124, -1000, 1238,
	-1000, 2115, 2114, 2417, 1410, 1573, -1000, -1000, -1000, 1408,
	1566, 915, 2111, 756, 583, 2416, 583, 26686, -1000, 49483,
	-1000, 49483, -1000, -1000, 49483, -1000, 49483, -1000, 49483, -1000,
	49483, 49483, -1000, 49483, 30223, 30223, 30223, -43, 4986, 30985,
	718, 932, -21, -1000, 806, 33283, 3107, -44, -1000, 987,
	-1000, -1000, -1000, 195, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 769, 497, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 494, 1217, 490, 490, 490,
	-1000, -1000, -1000, 653, -1000, 648, -1000, -1000, -1000, 769,
	769, -1000, -1000, -205, 1871, -65, 34819, 634, -1000, 634,
	-1000, 1917, -1000, 2301, 675, -49, 849, -33, -1000, 1290,
	-1000, 1114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2521, -1000, 2481, -1000, -1000,
	2493, -15, -1000, -15, -1000, 10736, -1000, 49483, 1910, -1000,
	-1000, -1000, -1000, -1000, -1000, 49483, -1000, 49483, -1000, -1000,
	-1000, -1000, -1000, -1000, 3547, -1000, 1902, -1000, 4986, 219,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49483, 49483,
	49483, -1000, 38278, -1000, -1000, -1000, -1000, 58217, -1000, 459,
	-1000, -1000, 58217, 1112, 1716, -1000, 1716, -16, -1000, 56738,
	1682, 49483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 690, 570, 570, 916, 916, 916,
	916, 2520, 3713, 3162, 5146, 258, 258, 258, 258, 258,
	258, 258, 258, 953, 684, 684, 953, 953, 953, 953,
	953, 684, 684, 684, 258, 258, 258, 58518, 58379, 717,
	21171, 21171, 931, 1339, 393, 717, 21171, 717, 717, 717,
	717, -1000, 1815, -1000, -1000, -1000, -1000, 1867, 485, 22401,
	22401, -1000, -1000, -1000, 11967, 21171, -1000, -1000, -1000, -1000,
	474, 21171, -1000, 748, -246, 315, -161, 216, 49483, 21171,
	597, -141, -1000, 1030, -1000, 21171, 215, -1000, -1000, -36,
	21171, 21171, 21171, 312, -1000, 311, -1000, 928, -1000, 927,
	926, 922, -1000, 473, 1270, 472, 469, 21171, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 57959, 53696,
	53624, 53437, 6299, 53179, 52992, -50, -52, 308, -1000, 1866,
	-161, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 307, -1000,
	304, -60, -1000, -62, -1000, 303, -1000, 57772, -161, 302,
	5002, -1000, 22401, 22401, 22401, -1000, 301, -1000, 56551, -1000,
	689, 680, 679, 677, 57700, 15687, 15687, 15687, 300, 57513,
	21171, -161, -1000, -1000, 467, -67, 756, 15276, 24360, 10736,
	-1000, 756, 756, 21171, -1000, 21171, 25134, 25134, 2418, 1696,
	25134, -1000, -1000, -1000, -1000, 37135, 556, 644, 37135, -1000,
	2454, 1693, -1000, 299, -1000, 14866, 37135, 37135, 10736, -1000,
	-1000, 49483, 339, -1000, -1000, 644, 295, 213, 1214, 49483,
	49483, 49483, -1000, -1000, 1553, 50626, 1548, 58966, 49483, -1000,
	-1000, 466, 463, 1680, 1678, 49483, 49483, 50245, 49864, 49483,
	1254, 21171, 1259, 1611, 98, -1000, 676, 453, 49483, 1144,
	-1000, -1000, -1000, -1000, -1000, 49483, -1000, -1000, 2486, -1000,
	1020, -1000, -1000, -1000, 1020, 3087, 1139, 49483, 30223, 731,
	666, 49483, 1247, 98, -1000, 662, 449, 10736, 1180, -1000,
	661, 49483, 1778, -1000, 1467, -1000, -1000, 9551, 58217, -1000,
	58217, -1000, -1000, -1000, 10736, 1724, 1724, 293, -17, -1000,
	-1000, -1000, -1000, -1000, -1000, 1736, 49483, 397, 49483, 98,
	49483, 129, 30223, 49483, 30223, 30223, 30223, 98, 49483, 2104,
	49483, 2103, 2199, 626, 49483, 1294, 21171, 1194, -1000, 6877,
	794, 49483, 1118, 99, -1000, -1000, -1000, 21, 49483, -1000,
	-1000, 140, 140, 140, -1000, 139, 1394, -1000, -104, -104,
	-1000, -1000, -1000, 1859, 37897, 49483, 2436, 30223, -68, -1000,
	812, 906, 902, -1000, 58966, -1000, 602, 861, -1000, 2483,
	448, 2454, -1000, 718, 49483, 85, -1000, 730, 1429, -1000,
	14442, 14442, -1000, 1290, -1000, -1000, 1146, -1000, 1195, -1000,
	-1000, -1000, -1000, 14442, -1000, -1000, 990, -65, -65, -1000,
	-1000, 524, -1000, 49483, -1000, -1000, -1000, -1000, 1112, -1000,
	21171, -1000, -1000, -1000, 13198, -1000, -1000, -1000, 49483, -201,
	21171, 717, 717, 21171, 22401, 22401, -1000, 717, -1000, -1000,
	-1000, -1000, -1000, 1854, 434, 21171, 58966, 4407, 3341, -69,
	953, -1000, 21171, -1000, 9156, -75, 55959, -1000, -1000, 572,
	2193, -1000, 21171, 57255, 8761, 292, 14032, -1000, 56997, -51,
	-51, -1000, 2517, 1625, 1242, 1188, 1087, 2466, -1000, 27073,
	758, 1294, 55772, 58940, 58966, 21171, 21171, -1000, 21171, 21171,
	21171, -1000, -1000, 2454, -1000, 21171, -1000, -1000, -1000, -1000,
	-1000, 1851, 21171, -1000, 58940, 58966, 22401, 22401, 22401, 22401,
	22401, 22401, 22401, 22401, 22401, 22401, 22401, 22401, 22401, 22401,
	22401, 22401, 22401, 22401, 22401, 1675, 22401, 2461, 2461, 2461,
	-1000, 1895, 1851, 21171, 21171, -1000, -1000, -1000, -1000, 58966,
	291, 290, 289, -1000, 21171, -161, 3107, -1000, 1807, -1000,
	-184, -1000, 3072, -1000, -1000, 1807, 1807, -76, 58217, -1000,
	2418, -1000, 432, 21171, 25134, -1000, 596, -1000, -77, -1000,
	37135, -1000, 592, -243, -1000, 637, -1000, 644, 288, -1000,
	-1000, -1000, 212, 339, -1000, 37135, -1000, 10736, -1000, -1000,
	913, 912, -1000, 2099, -1000, 1541, -1000, 798, -1000, 1234,
	21171, 23973, 431, 422, 1293, -1000, 2084, 1394, 2078, 1394,
	-1000, -1000, 706, -1000, 58217, 421, 419, -1000, -18, 1168,
	-1000, 26305, 21171, -1000, 907, -1000, -1000, -1000, 3087, 905,
	-1000, -1000, 1237, 26305, -1000, -1000, -1000, 26305, 21171, -1000,
	-23, 903, 26305, 1999, 718, 1849, 999, -1000, -1000, -1000,
	-1000, -1000, -1000, 1731, 33283, 49483, 418, 49483, 415, -1000,
	-1000, 414, 49483, 634, 3087, -1000, 721, -1000, -1000, 805,
	10736, 412, 10736, 1661, 626, 30604, -1000, 721, 1719, -1000,
	58217, -1000, 1118, 12787, 2273, -84, -1000, 211, -1000, -1000,
	-1000, 756, 26686, 25134, 21171, 2538, -85, -1000, -1000, -1000,
	-1000, -1000, 98, -24, 411, -1000, 636, 632, -65, 1299,
	1698, 1698, -1000, 2457, -1000, 587, 287, 2454, 286, -1000,
	-65, 49483, -1000, 1278, 10736, 49483, 49483, 10736, 49483, -1000,
	-1000, -33, -1000, -1000, -1000, -1000, 49483, -1000, -1000, -1000,
	1301, 55700, -1000, 2308, 10736, 2434, 717, 447, 386, 21171,
	58966, 58680, -93, 21171, 21171, -1000, 585, 58217, -1000, -1000,
	-1000, -1000, -1000, -1000, 58217, 21171, 205, -1000, 2509, 21171,
	284, 281, 280, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 279, -1000, -1000, 52531, -1000, 21171, 278, -1000, 275,
	274, 52920, 5583, 55513, 55254, 55180, 270, 58217, 1895, 58217,
	-1000, -1000, 728, 728, 1014, 1014, 1014, 1014, 2461, 486,
	998, 357, 3650, 3650, 3650, 809, 543, 543, 3650, 3650,
	3650, 1836, 1571, 410, 4951, -1000, -1000, 58217, 58217, 269,
	-1000, -1000, -1000, -161, 266, 1797, 2375, -1000, 25134, 1797,
	1797, -1000, -1000, 49483, 58217, -1000, -212, -1000, 2454, -1000,
	-1000, 1693, -1000, 7966, 37135, 644, 10736, -1000, -1000, 22,
	49483, 49483, 49483, 2062, -1000, 2162, -1000, 54921, -95, -1000,
	2352, 2352, 21171, 203, -1000, -1000, 407, 23973, 49483, -1000,
	1303, 1744, 838, 49483, -1000, 49483, -1000, -1000, 49483, 49483,
	49483, 49483, 49483, -1000, 406, -101, 49483, 49483, 30223, -1000,
	-1000, -106, 10736, -1000, 2276, -1000, 30223, 920, 1247, 1764,
	-1000, 405, 23973, 404, 49483, 33283, 2414, -1000, 718, -1000,
	-1000, 403, 1823, 1407, 23973, 1404, 1667, 626, 30604, -1000,
	915, 1118, -1000, -1000, -34, -1000, 452, 98, 49483, 2536,
	1294, -1000, -35, 58217, -1000, 630, -1000, 37516, 37516, 30223,
	30223, -1000, 2233, 2232, 582, -1000, -1000, 265, -1000, -65,
	1534, -1000, -1000, 1250, 1375, -1000, -1000, -1000, -1000, -1000,
	2308, 21171, 21171, 58680, -109, -1000, 717, 717, -1000, 58217,
	8366, -1000, 56997, -1000, -1000, -1000, -1000, 1256, -1000, 54734,
	-1000, -1000, -1000, 21171, 21171, -1000, -1000, -1000, -1000, -1000,
	-1000, 22401, 1835, 396, 58966, -1000, -1000, 745, 21171, 21171,
	3072, 745, 745, -111, 644, -1000, -1000, -1000, 2454, -1000,
	37135, 22, 10736, -1000, -1000, -1000, 49483, -1000, 49483, -1000,
	10736, 49483, 1803, 1501, -1000, -1000, 1673, 394, 22401, 49483,
	688, -1000, 1300, 23973, 2308, 10736, 2308, 54662, 11133, -114,
	-116, 1498, -1000, -1000, 1309, 21171, -1000, 58966, 1394, 1394,
	-117, -119, -1000, 901, 899, 21171, 895, -1000, -1000, -1000,
	891, -1000, 660, -104, 26305, -1000, -1000, 1264, 23973, -122,
	23973, -124, 263, 98, -1000, 23973, -1000, 49483, -125, 49483,
	-1000, 626, 30604, -1000, 2199, -1000, 2208, 49483, 2256, -1000,
	-1000, -1000, 1719, 393, -1000, -127, -1000, -1000, 392, 390,
	-1000, -1000, -112, -1000, 665, 659, -1000, -1000, -1000, 10736,
	983, -1000, 717, 717, -1000, -1000, -1000, 260, 1294, 2371,
	-1000, 54475, 54216, 5283, 22401, 58966, -144, -1000, 49483, 58217,
	-161, -1000, -1000, -1000, 37135, 387, -1000, -1000, 1732, -1000,
	-1000, -1000, 49483, 1540, -1000, -1000, 21171, 4951, 385, 21171,
	-1000, 1731, 384, -1000, -1000, -1000, -1000, -1000, -1000, 2352,
	-36, -1000, 1167, -1000, -1000, 58217, 2329, -1000, -1000, 383,
	372, 49483, 49483, -51, 371, 370, 26305, -1000, 49483, -149,
	1300, -156, -1000, 1731, -1000, -162, 805, -1000, 366, 30604,
	-1000, 1661, 978, -163, 49483, 1118, -1000, -1000, 30223, 30223,
	1534, -1000, 49483, -1000, 49483, -1000, 49483, -1000, 1132, 21171,
	-1000, -1000, 5283, -164, -1000, -139, -1000, 2410, -1000, -1000,
	-1000, -1000, 2054, 54142, 1636, 49483, 53883, 1247, 49483, 2308,
	257, 49483, 802, 10736, 1250, 1250, -1000, -1000, 255, 21171,
	21171, -1000, 360, -1000, 1731, 1300, 1247, 1300, 358, 23973,
	-1000, 1667, 1044, -1000, 756, -1000, -1000, -170, -171, -1000,
	-172, -173, -1000, 242, 21991, 21991, -161, -1000, 49483, 354,
	1971, -1000, 1310, 1280, 241, 804, -1000, -178, -1000, -1000,
	339, -1000, 21171, -1000, -179, -1000, 790, -186, -1000, 789,
	2509, -187, -188, 49483, 1247, 1731, -1000, 1731, 23973, -189,
	-1000, 26686, -1000, 718, 718, -1000, -1000, -1000, -1000, -1000,
	22796, 1364, 1124, 56292, -1000, -1000, -1000, 49483, -1000, 1403,
	1400, 1096, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1636,
	58217, -1000, 1250, 1762, -1000, 1250, 1833, -1000, -1000, -197,
	-1000, 1247, 1247, -202, -1000, -181, -1000, -1000, 2422, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2218, -1000, 830, 1479,
	1479, 1310, -1000, 336, -1000, 333, 1377, -1000, -1000, 1300,
	-1000, 21581, -1000, 2439, -1000, -1000, 1619, -1000, -1000, 21171,
	21171, -1000, -1000, -1000, 1731, -1000, -1000, -1000, -1000, -204,
	-210, 1247, 1247, 887, -1000, -1000, 332, 21171, -215, 1247,
	-1000,
}
var sqlPgo = [...]int{

	0, 3061, 3059, 1906, 3058, 2384, 3056, 3045, 3041, 3040,
	3038, 2377, 3034, 3033, 3031, 3030, 3029, 3028, 3027, 3026,
	3025, 3024, 3023, 3022, 3018, 3016, 3014, 3010, 3009, 3008,
	3007, 3006, 2360, 3004, 2357, 3003, 2997, 2994, 2993, 2991,
	2987, 2986, 2981, 24, 2977, 2970, 2966, 2963, 2353, 2961,
	2960, 2349, 2959, 2958, 2343, 2954, 2947, 2942, 2307, 2278,
	2938, 2934, 2250, 2933, 2931, 2231, 2927, 2215, 2926, 2925,
	2206, 2924, 95, 123, 2921, 2190, 2917, 2916, 2184, 2180,
	2173, 2906, 2052, 2903, 2902, 2039, 2025, 2901, 231, 2899,
	2898, 2896, 2895, 2014, 2011, 2889, 2888, 2877, 173, 2875,
	1952, 2873, 2871, 2869, 2867, 2865, 2853, 2852, 2849, 2848,
	2844, 2843, 2842, 2840, 2839, 2836, 2835, 2834, 2832, 2831,
	2821, 2820, 2818, 2816, 2811, 2808, 2804, 179, 118, 2803,
	2802, 1944, 1927, 2801, 2795, 49, 50, 51, 58, 122,
	163, 4732, 157, 2794, 2791, 2789, 2788, 2787, 37, 116,
	119, 110, 107, 2787, 189, 2785, 2779, 35, 48, 26,
	19, 73, 2777, 2770, 2766, 1624, 111, 2765, 2764, 168,
	170, 2762, 463, 42, 88, 90, 81, 283, 47, 2760,
	98, 17, 2759, 114, 109, 2758, 64, 34, 21, 3514,
	108, 80, 89, 156, 152, 143, 139, 115, 558, 2757,
	172, 54, 135, 2756, 2754, 2753, 56, 138, 3, 2,
	148, 10, 2752, 8, 2751, 11, 2750, 2749, 2745, 2741,
	22, 112, 44, 39, 2734, 125, 16, 137, 2732, 150,
	2731, 71, 178, 171, 340, 121, 2722, 62, 14, 65,
	2718, 2713, 91, 162, 2704, 28, 127, 78, 94, 181,
	147, 82, 151, 155, 2702, 2701, 2699, 126, 2697, 134,
	99, 2695, 2693, 75, 27, 2692, 33, 159, 38, 2687,
	2686, 104, 2685, 140, 2683, 2682, 185, 113, 132, 4,
	59, 79, 6, 158, 101, 61, 57, 2680, 3039, 1856,
	1921, 40, 2677, 96, 68, 30, 72, 100, 169, 36,
	2676, 2673, 1646, 2672, 2668, 2667, 129, 2666, 2665, 2664,
	83, 45, 102, 2663, 103, 43, 117, 144, 136, 175,
	120, 2661, 131, 77, 146, 2658, 106, 2657, 332, 2650,
	133, 2644, 2636, 2634, 2628, 52, 2627, 2623, 2622, 324,
	2620, 97, 2618, 141, 128, 124, 86, 105, 165, 160,
	446, 2617, 142, 25, 2616, 85, 23, 0, 3472, 3414,
	2615, 145, 87, 2614, 2613, 2610, 2609, 29, 9, 5,
	7, 12, 13, 194, 164, 149, 2606, 2605, 74, 92,
	2599, 177, 154, 2596, 2593, 2592, 31, 2591, 18, 2589,
	15, 2588, 2587, 20, 1, 2586, 2585, 161, 2582, 2581,
	2579, 2374, 2576, 176, 2574, 2573, 2572, 2571, 2568, 2161,
	2567, 2566, 55, 32, 130,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 403, 403, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	402, 402, 152, 152, 151, 147, 147, 405, 405, 406,
	406, 154, 154, 154, 156, 156, 153, 153, 32, 32,
	86, 86, 86, 138, 138, 138, 79, 79, 79, 74,
	74, 355, 355, 356, 356, 134, 134, 135, 135, 135,
	135, 136, 136, 137, 137, 137, 46, 34, 34, 34,
	34, 34, 34, 34, 35, 35, 35, 35, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 37, 37,
	44, 44, 128, 128, 47, 47, 47, 47, 47, 47,
	47, 47, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 58, 58, 56, 59,
	59, 60, 60, 60, 60, 60, 60, 61, 61, 61,
	61, 61, 61, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 68, 68, 68, 69, 69, 69, 66,
	66, 66, 64, 64, 64, 63, 63, 63, 67, 67,
	67, 65, 65, 65, 233, 233, 70, 70, 70, 70,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 73, 73, 73, 73,
	73, 73, 73, 73, 325, 325, 71, 71, 300, 300,
	75, 75, 258, 258, 76, 76, 76, 76, 76, 77,
	77, 77, 77, 87, 87, 87, 87, 401, 401, 227,
	227, 169, 169, 169, 169, 82, 82, 82, 82, 83,
	83, 83, 84, 84, 133, 133, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 38, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 43, 43, 43,
	43, 43, 94, 94, 94, 96, 93, 93, 93, 95,
	95, 95, 95, 97, 97, 98, 98, 98, 98, 98,
	98, 99, 99, 349, 349, 236, 236, 347, 347, 348,
	348, 204, 204, 204, 204, 204, 205, 205, 205, 354,
	354, 354, 354, 354, 354, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 118, 118, 118, 127,
	127, 127, 127, 127, 127, 127, 120, 120, 120, 111,
	111, 101, 101, 107, 107, 107, 107, 107, 102, 102,
	108, 108, 110, 110, 112, 112, 112, 112, 112, 112,
	103, 103, 103, 103, 114, 114, 114, 114, 113, 113,
	123, 123, 123, 123, 123, 123, 123, 313, 313, 119,
	119, 119, 119, 122, 122, 122, 122, 117, 117, 117,
	121, 121, 124, 124, 124, 124, 104, 104, 105, 105,
	106, 106, 125, 125, 116, 116, 126, 126, 126, 126,
	126, 126, 126, 115, 115, 115, 404, 404, 109, 399,
	399, 397, 397, 397, 397, 397, 397, 397, 398, 398,
	400, 400, 80, 80, 80, 52, 52, 53, 53, 206,
	206, 207, 207, 281, 281, 281, 281, 208, 208, 155,
	155, 155, 211, 212, 212, 209, 209, 210, 210, 210,
	214, 214, 213, 216, 216, 215, 280, 365, 365, 366,
	366, 366, 366, 366, 366, 366, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 363, 363, 363, 364,
	361, 361, 362, 362, 362, 362, 407, 407, 279, 279,
	220, 220, 368, 368, 368, 368, 369, 369, 369, 369,
	369, 372, 371, 370, 370, 370, 370, 370, 309, 309,
	309, 57, 57, 57, 247, 247, 246, 246, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 130, 130, 54, 54, 54, 161, 161, 51, 51,
	51, 55, 55, 50, 50, 50, 50, 50, 264, 264,
	262, 262, 225, 225, 315, 315, 315, 173, 173, 148,
	148, 148, 20, 22, 22, 16, 16, 16, 16, 16,
	16, 29, 29, 30, 30, 26, 26, 263, 263, 265,
	265, 81, 81, 85, 85, 85, 91, 91, 129, 129,
	129, 129, 129, 129, 129, 33, 33, 33, 33, 45,
	45, 45, 45, 89, 410, 410, 410, 90, 90, 409,
	409, 168, 168, 168, 168, 170, 170, 276, 276, 277,
	277, 411, 411, 278, 278, 278, 163, 162, 164, 164,
	49, 49, 49, 157, 157, 158, 158, 159, 159, 160,
	160, 412, 412, 78, 78, 78, 132, 132, 200, 200,
	273, 273, 273, 221, 221, 178, 178, 275, 275, 274,
	274, 274, 245, 245, 245, 131, 131, 230, 230, 238,
	238, 239, 239, 321, 321, 240, 88, 88, 141, 141,
	139, 139, 139, 139, 139, 139, 140, 140, 140, 142,
	142, 142, 142, 142, 142, 142, 145, 145, 145, 145,
	146, 146, 146, 144, 144, 379, 379, 379, 381, 381,
	382, 378, 378, 380, 380, 408, 408, 249, 249, 249,
	218, 219, 217, 217, 413, 413, 223, 223, 222, 224,
	224, 314, 314, 314, 243, 243, 243, 243, 268, 268,
	266, 266, 267, 267, 269, 269, 270, 270, 270, 271,
	271, 272, 272, 242, 242, 296, 296, 143, 143, 143,
	229, 229, 229, 231, 231, 286, 286, 286, 287, 287,
	285, 285, 285, 285, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 395, 395, 395,
	396, 396, 312, 312, 317, 317, 317, 317, 317, 317,
	310, 310, 311, 311, 322, 323, 323, 252, 252, 252,
	252, 250, 250, 251, 251, 318, 318, 318, 318, 244,
	244, 319, 319, 319, 282, 282, 326, 326, 326, 341,
	341, 228, 228, 228, 336, 336, 327, 327, 327, 327,
	327, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 330, 330, 330, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 340, 340, 340, 340, 340, 331,
	331, 337, 338, 332, 333, 339, 339, 339, 339, 343,
	343, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	335, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 260, 260, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 290, 290, 290,
	290, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 373, 373, 373, 373, 373, 373,
	373, 373, 376, 376, 377, 377, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 383, 383, 384, 384, 386,
	386, 387, 387, 388, 389, 389, 389, 390, 391, 391,
	385, 385, 392, 392, 392, 393, 393, 394, 394, 394,
	394, 394, 302, 302, 308, 308, 308, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 171, 171, 171, 171, 171, 235, 235,
	234, 234, 299, 299, 297, 297, 301, 301, 253, 253,
	342, 342, 342, 342, 342, 342, 342, 254, 254, 254,
	261, 255, 255, 256, 256, 256, 256, 256, 293, 294,
	257, 257, 257, 295, 295, 303, 307, 307, 306, 305,
	305, 304, 304, 283, 283, 284, 284, 241, 241, 414,
	414, 237, 237, 320, 320, 320, 320, 202, 202, 232,
	232, 201, 201, 195, 195, 196, 196, 196, 196, 226,
	226, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 344, 344, 344, 345, 346, 298, 188, 187,
	175, 176, 186, 185, 184, 174, 177, 181, 182, 183,
	179, 180, 191, 190, 189, 324, 197, 197, 198, 198,
	198, 199, 199, 199, 199, 172, 172, 192, 192, 193,
	194, 194, 165, 165, 165, 166, 166, 167, 167, 353,
	353, 351, 351, 351, 352, 352, 352, 352, 350, 350,
	350, 350, 350, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 2,
	0, 1, 1, 0, 2, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 1, 1, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 7, 3, 8, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 2, 2, 5, 3,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 3, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	4, 7, 2, 6, 4, 7, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 3, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 6, 3, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 3, 1, 3, 2, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 7, 3, 3,
	3, 3, 3, 4, 4, 3, 4, 4, 4, 3,
	2, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 2, 3, 3, 3, 2, 3,
	5, 4, 6, 4, 5, 6, 5, 1, 0, 2,
	3, 3, 3, 6, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 2, 3, 2, 3, 7, 7, 8, 10,
	7, 4, 5, 5, 5, 3, 1, 1, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 8, 11, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 4, 7, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 7, 3, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 6, 3, 13, 16, 9, 12, 4, 2, 0,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 7, 3, 4,
	3, 4, 3, 4, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 2, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 5, 5, 3, 1, 1,
	2, 2, 1, 5, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -380, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 258, 265, 286, 288, 290, 299,
	-40, -39, 117, -139, -141, 284, -83, -84, -93, -94,
	-95, -96, -133, 317, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	320, -33, -45, -90, -89, 365, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-379, -63, -64, -66, -68, -69, -142, -140, 421, 285,
	375, 37, 329, 65, 111, 294, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 392, 400, -145, -143, -144,
	-146, 306, 383, 342, 425, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 2, 342, 386, 307,
	376, 92, 167, 270, 256, -397, 2, 4, -359, -357,
	-196, -195, 342, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 159, 174, 180, 182, 162, 202, 233,
	235, 248, 252, 262, 264, 272, 296, 323, 338, 354,
	355, 356, 362, 363, 383, 384, 388, 395, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 348, 350,
	119, 121, 122, 132, 133, 135, 136, 138, 140, 144,
	146, 151, 152, 153, 154, 155, 156, 168, 163, 169,
	173, 176, 175, 177, 178, 179, 170, 184, 187, 188,
	189, 191, 192, 195, 196, 197, 200, 199, 204, 205,
	208, 209, 212, 214, 217, 218, 219, 220, 223, 221,
	222, 225, 226, 228, 227, 234, 236, 237, 239, 240,
	243, 244, 247, 250, 253, 254, 255, 256, 257, 258,
	259, 261, 263, 265, 267, 268, 269, 270, 271, 273,
	274, 276, 277, 278, 279, 280, 284, 282, 283, 285,
	286, 287, 288, 290, 292, 293, 294, 295, 297, 318,
	319, 331, 299, 300, 301, 302, 303, 304, 305, 309,
	313, 310, 311, 312, 307, 308, 314, 315, 317, 320,
	322, 324, 325, 328, 329, 330, 332, 335, 336, 337,
	333, 334, 327, 340, 341, 343, 344, 345, 346, 347,
	349, 351, 352, 357, 360, 361, 365, 366, 368, 369,
	372, 373, 374, 379, 375, 377, 380, 381, 382, 387,
	393, 394, 396, 397, 398, -194, -165, 414, -193, 424,
	424, 424, 2, 188, 189, 269, 268, 314, 315, -189,
	-192, -193, -194, -165, 4, -357, -359, 92, 241, 424,
	424, 424, 2, 342, 330, 115, 307, 376, 292, 386,
	-262, 184, 92, 371, -165, 265, 24, 2, 101, 173,
	374, 373, 24, 261, 308, 344, 346, 2, 424, 424,
	2, 386, 307, 342, 167, 92, 376, 292, -183, 2,
	-165, -73, 2, 421, -72, -5, -48, -58, -62, -75,
	-70, -11, -32, -34, -54, -51, -59, -65, -67, -79,
	-78, -80, -82, -86, -85, -88, -93, -94, -100, -131,
	-132, 78, 25, 107, 317, 117, 183, 2, -401, -227,
	2, 24, -169, -165, 78, 145, 306, 342, 2, 188,
	189, 2, -183, 2, -397, 2, 188, 189, 2, -401,
	-227, 23, 2, -165, 2, 303, 320, -170, 2, 299,
	-165, 424, 424, 424, 424, 424, 424, 209, 58, 296,
	314, -98, 361, -97, 354, 301, -99, -349, 2, 223,
	-165, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 2, -127, 314, 330, 152,
	36, 58, 24, 63, 93, 146, 167, 168, 196, 73,
	74, 268, 209, 189, -313, 119, 315, 343, 302, 340,
	361, 78, 377, 293, -404, 118, 4, 92, 223, 316,
	354, 67, 347, 348, 424, 424, 424, -408, 2, 342,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, -140, -142, -141, 424, 424, 424, 424, 424, -222,
	-223, 370, 181, 113, 246, -139, -141, 2, -379, -127,
	314, 2, 58, 24, -347, 2, -288, 241, -290, 412,
	413, 407, 229, 399, -302, 98, 216, 215, -292, -303,
	114, 296, 421, -199, -291, 427, 9, -376, -141, 31,
	52, -197, -165, 7, 8, 5, 6, -172, -328, -298,
	-335, 364, 125, 232, -373, -374, -198, 4, -357, -351,
	-329, -338, -333, -334, -336, 42, 48, 47, 351, 222,
	309, 310, 311, 312, 324, 379, 163, 40, 239, 240,
	175, 182, 61, 84, 85, 83, 88, 87, 89, 86,
	316, 376, 53, 30, 157, 158, 162, 233, 159, 59,
	-375, 43, 94, 106, 135, 136, 176, 177, 178, 179,
	191, 192, 334, 357, 39, 41, 44, 54, 55, 96,
	97, 123, 124, 134, 147, 174, 180, 202, 235, 252,
	262, 272, 323, 338, 354, 355, 356, 362, 363, 384,
	-358, -339, 79, 126, 143, 172, 160, 185, 186, 190,
	203, 206, 224, 231, 249, 251, 291, 321, -409, 2,
	361, 361, 2, -409, 2, -409, 2, -168, 2, 361,
	358, -410, 361, 395, -381, 273, -382, -183, -381, 424,
	424, 426, 424, -217, -218, -219, 2, 24, 104, 421,
	2, -316, 2, 419, -318, -172, 198, -375, -141, -317,
	421, -189, 242, -198, 84, 85, 88, 87, 89, 4,
	-165, 61, 216, 215, -3, 2, -318, 157, -189, 2,
	-318, 157, 2, -190, 157, -318, -192, 2, -355, 157,
	-353, 9, -352, 5, 4, -357, -359, -358, 2, -174,
	-165, 2, -201, 157, -189, -186, -350, 4, -357, -359,
	-358, -360, 24, 26, 27, 28, 29, 31, 32, 33,
	34, 45, 52, 53, 57, 60, 62, 73, 78, 83,
	84, 86, 85, 87, 88, 89, 98, 100, 102, 104,
	105, 108, 111, 113, 125, 127, 139, 141, 142, 145,
	148, 150, 161, 167, 171, 181, 183, 198, 201, 207,
	210, 211, 229, 230, 232, 238, 241, 242, 245, 246,
	260, 266, 275, 289, 306, 316, 326, 339, 342, 353,
	358, 359, 364, 370, 371, 376, 378, 385, 386, 389,
	390, 391, 392, -187, -350, 358, 426, -232, -195, -196,
	-226, -165, 423, -288, 2, -88, 2, -288, 157, 2,
	-88, 157, 2, -288, 157, 2, -88, 157, 2, -220,
	421, 423, 342, 62, 2, -189, 157, -179, 2, -165,
	109, -190, 157, 2, -192, -355, 157, 2, -355, 157,
	2, -191, 2, -189, 167, 167, -174, 157, 2, -165,
	24, 142, 2, 183, 2, 183, 2, -319, 2, -318,
	-233, 157, 2, -189, -233, 157, 2, -233, 157, 2,
	-202, 157, 2, -201, -174, 157, 2, -356, 157, 2,
	-355, -356, 157, 2, -258, 421, -325, 2, -324, -352,
	383, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 314, -138,
	80, 220, 219, 241, 358, 426, -189, -288, -88, -300,
	421, 142, -288, -88, 241, 142, 243, 2, 92, 342,
	398, 24, -165, 2, 318, 2, 421, -98, 56, 361,
	-277, 2, -278, -162, -163, -164, 187, 267, 271, 398,
	-347, 358, 404, 142, -347, -236, 423, -127, 2, 139,
	378, 2, 7, 2, -355, 2, 318, 2, 268, 315,
	58, 142, 2, 2, -399, 2, 241, 142, 2, 142,
	2, 142, 2, 142, 2, 142, 2, 2, 268, 315,
	2, 360, 197, 360, 2, 142, 2, 142, 2, 5,
	2, 187, 267, 331, 2, 342, 386, 307, 2, 2,
	142, 2, 142, 398, 2, -244, -318, -222, -223, -243,
	-266, -267, 207, 127, 238, -249, 24, 104, -249, -249,
	46, 422, 422, -127, 318, 2, 10, 11, 60, 35,
	412, 413, 414, 415, 137, 416, 417, 410, 411, 409,
	402, 403, 406, 193, 194, 75, 405, 404, 68, 213,
	298, 128, 129, 130, 131, 281, 164, 165, 166, 13,
	14, 15, 28, 245, 206, 399, 160, 321, 407, 16,
	17, 18, 185, 186, 231, 38, 161, -171, -203, -288,
	-288, -288, -288, -288, 251, -241, -283, 419, -141, 421,
	421, -141, -288, -302, -234, 421, -346, 7, -141, -297,
	419, -304, -288, 423, 421, 5, 421, 5, -383, 393,
	139, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 264, -343, 387, -343, -343, -330,
	421, -330, 421, 421, -331, 421, 421, 421, -330, 421,
	421, 421, 394, 400, 394, 400, 421, 421, -276, -277,
	-276, 358, -170, 426, -381, -220, 421, -237, -320, -288,
	414, -237, -237, 241, -234, -288, 79, -252, 190, 224,
	143, 203, 291, 172, -346, -73, -285, 427, 421, -172,
	-375, -141, -165, -312, 400, -312, -141, -317, 421, -316,
	414, -189, 421, 423, -150, 282, -149, 22, 25, 107,
	381, 120, -210, 169, 256, 114, 327, -403, 117, 300,
	349, 350, 282, 114, -246, -248, 32, 90, 226, 253,
	49, 155, 215, 216, 329, 114, 282, 392, 114, 117,
	282, -152, 327, -403, 117, 300, 282, -151, -210, 114,
	427, 117, 236, -355, -232, 426, 426, -350, 414, 114,
	114, 114, 114, 142, -226, -350, -189, -197, -165, -198,
	421, -220, 229, 241, -397, -247, -246, 229, -161, -378,
	392, 229, 229, -220, -176, 157, 2, -166, -165, -176,
	157, -378, 229, -319, -200, -189, -200, 317, -183, 32,
	-154, 426, 51, 287, 114, -154, 114, -154, 114, -154,
	426, 114, -154, 114, 426, 114, 114, -234, 422, 426,
	-355, -397, -226, -169, 78, 421, 32, -299, -326, -327,
	-328, -337, -332, -335, 42, 48, 47, 351, 222, 309,
	310, 311, 312, 324, 379, 163, 40, 239, 240, 175,
	4, 41, -339, 182, 174, 176, 177, 178, 179, 180,
	323, 39, 272, 135, 136, 134, 106, 97, 96, 235,
	44, 43, 94, 354, 355, 356, 357, 191, 192, 55,
	54, 384, 334, -356, -397, -226, 139, -174, 2, -189,
	2, 69, 70, 398, -349, -234, 32, -277, 2, -411,
	426, 205, -205, 212, 228, 151, 242, 396, -354, 5,
	4, -298, -309, 98, 209, -335, 8, 413, -344, 7,
	412, -348, -347, -348, 82, 423, -350, 342, 191, -349,
	24, 319, 2, -189, -400, 139, -398, 292, -397, -189,
	-189, -189, -189, -189, 139, 2, 360, 2, 139, -165,
	-165, 205, -189, 2, -191, 2, -190, 2, 342, 167,
	342, -154, 426, -243, -267, -266, -269, -288, 24, -272,
	133, 225, -288, -290, -140, -140, -140, -224, -314, -288,
	266, 167, -349, -341, -326, -340, 277, 278, 276, 280,
	279, -326, -188, -350, 354, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	206, 160, 321, 38, 161, -288, 358, -288, -288, -288,
	-288, 221, 229, 232, 364, 125, 372, 104, 236, -414,
	339, 34, -295, -141, 421, -308, 29, 326, 24, -302,
	296, 421, -283, -288, -284, -235, -234, 422, 32, 426,
	-235, -301, -297, -307, -306, 389, -350, 414, 422, -234,
	385, 24, 104, 414, 2, 7, -259, 397, 218, 95,
	153, 217, -260, 305, -384, 132, 148, 421, 422, 2,
	422, 2, 422, 2, 422, 2, 422, 2, -288, -288,
	-288, -288, -288, -288, -288, -234, -346, -253, 2, -342,
	-234, 4, 397, 218, 95, 153, 217, 305, -253, 2,
	7, -234, 2, -234, 2, -254, 2, -288, -234, -255,
	-289, -290, 412, 413, 407, -302, -256, 2, -288, -235,
	354, 354, 354, 354, -288, 45, 201, 359, -257, -288,
	142, -234, -170, -382, 32, -234, -229, 426, 142, 32,
	4, -229, -229, 421, 422, 426, 190, 190, -316, -252,
	190, -250, 249, -250, -250, -395, 421, 420, -312, -175,
	419, 428, -350, -235, 2, 421, -312, -312, 423, -311,
	-310, 32, -183, 247, -311, 422, -189, -350, 426, 358,
	-263, 73, 62, -280, 157, 62, -361, -177, 73, -362,
	-165, 57, 371, 266, 141, -263, 73, -263, 73, 73,
	317, 330, 46, -318, 35, -88, 71, 142, 358, -318,
	-248, -326, 90, 215, 216, 46, -345, -344, 413, -345,
	46, -345, -345, -345, 392, -190, -318, 358, 257, -355,
	71, 358, 426, 35, -88, 71, 142, 358, -201, -175,
	71, 342, -323, -322, 401, -195, -165, 423, -288, -88,
	-288, -88, 332, 422, 423, 185, 185, -206, -207, -165,
	-281, -280, -363, -364, -361, 184, 167, 371, 126, 32,
	114, -226, 358, 114, 257, 114, 114, 32, 241, 229,
	241, 229, -157, 345, 114, -282, 390, -273, -88, 421,
	98, 32, -273, -238, -239, -321, -240, -177, 421, -183,
	-189, -233, -233, -233, -201, -202, -174, -355, -356, -356,
	422, -73, -324, -137, 392, 358, 392, 378, -207, -72,
	25, 78, 107, 422, 426, -228, 31, 419, -259, 421,
	-343, 421, -137, -322, 142, -227, -323, -323, 139, 70,
	404, 358, 422, 361, -278, -204, 271, 325, 283, 313,
	8, 7, 7, 426, -350, -189, 139, -226, -226, 314,
	-73, 139, -73, 423, -189, -201, -189, -318, -270, -344,
	421, -271, 296, 297, 426, -148, 33, 102, 195, -189,
	398, -288, -288, 358, -414, 339, -295, -288, 221, 232,
	364, 125, 372, 104, 236, 142, 421, -289, -289, -234,
	-288, 420, 430, 422, 423, -226, -288, 420, 420, 426,
	-305, -306, 108, -288, 423, -413, 426, -222, -288, -234,
	-234, 422, 422, 358, 358, 358, 358, 421, -389, 250,
	421, 421, -288, 32, 426, 426, 426, 422, 426, 426,
	426, 422, 422, 426, 422, 142, 422, 422, 422, 422,
	422, -261, 260, 422, 10, 11, 412, 413, 414, 415,
	137, 416, 417, 410, 411, 409, 402, 403, 404, 68,
	213, 298, 13, 14, 15, 185, 161, -289, -289, -289,
	422, -293, -294, 142, 139, 398, 398, 398, 398, 32,
	-257, -257, -257, 422, 142, -234, 421, 422, -282, -320,
	-231, 2, -316, -185, -350, -282, -282, -234, -288, -316,
	-316, -251, 378, 241, 190, -316, -310, 422, -396, -346,
	-312, -311, -346, -287, -286, 140, 227, 422, -235, 2,
	-311, -311, -350, -183, -220, -312, 422, 423, -149, -189,
	-177, -184, -165, 229, -280, 157, -156, 229, -326, -184,
	421, 421, 195, 195, -177, -184, 157, -177, 157, -184,
	-184, -402, 271, 237, -288, 208, 270, 230, -150, 282,
	-88, 398, 421, -191, 282, -197, -345, -345, -246, 282,
	-190, -355, 392, 398, -174, -151, -88, 398, 421, -175,
	-152, 282, 398, -189, -134, 156, 236, 414, -350, -128,
	5, 232, -128, 422, 426, 167, -176, 167, -182, -166,
	-88, -189, 142, -355, -190, -355, -355, -355, -88, -189,
	114, -189, 114, -158, 110, -412, 404, -174, -223, -222,
	-288, -245, -275, 289, 241, -221, -178, -177, 383, -183,
	-245, -230, 426, 142, 404, 423, -221, -154, -154, -154,
	-154, -154, 142, -136, 244, -135, -165, 5, -226, 23,
	-355, 422, -326, 419, 420, 7, 7, 421, -346, -137,
	-226, 142, -41, 392, 270, 92, 342, 256, 167, -347,
	-347, -277, 369, 66, 271, -347, 342, 314, -73, -165,
	-271, -288, -314, -189, 427, -288, -288, -289, -289, 142,
	421, -288, -299, 28, 28, 422, -284, -288, 414, -350,
	422, 422, -297, 111, -288, 353, -350, 414, 422, 385,
	-413, -413, -413, 5, 218, 153, 217, -260, 217, -260,
	-260, 7, -390, -180, 421, -165, 390, -222, 422, -341,
	-326, -288, -288, -288, -288, -288, -346, -288, -293, -288,
	-341, -326, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, 104, 229, 236, -289, -294, -293, -288, -288, -326,
	422, 422, 422, -234, -72, -242, 148, -323, 426, -242,
	-242, 422, -251, 421, -288, -316, 420, 422, 426, -311,
	420, 426, 429, 404, -312, 422, 423, -220, -310, -350,
	358, 358, 114, 229, 380, -365, -362, -288, -225, -315,
	-177, -377, 421, -165, -373, -374, -172, 421, 421, -147,
	107, 317, -265, 114, -154, 114, -154, 396, 421, 421,
	358, -263, 73, -291, -172, -234, 358, 358, 257, -291,
	-291, -234, 358, -291, 117, -137, 142, 341, -208, 170,
	-281, -166, 421, -176, 421, 421, -220, -189, -323, -247,
	-161, -264, 378, -175, 421, -175, -159, 200, -412, -353,
	-378, -268, -266, -245, -237, 230, 72, 422, 426, 423,
	-282, -239, -231, -288, 2, 422, -88, 426, 421, 404,
	404, 243, -138, -138, 7, 420, 422, -346, 422, -226,
	244, -186, -174, -189, -187, -201, -189, 242, 422, -148,
	-175, 28, 28, -288, -299, 422, -288, -288, 420, -288,
	423, 5, -288, 422, 422, 422, 422, -391, -165, -288,
	422, 422, 422, 426, 426, 422, 422, 422, 422, 422,
	-294, 142, 104, 236, 421, 422, 422, -296, 150, 46,
	-316, -296, -296, -226, -285, -346, -286, -175, 419, -311,
	-312, -350, 423, -177, -184, -280, 114, -366, 73, -367,
	60, 126, 78, 229, 232, 371, 266, 57, 98, 275,
	32, 422, 422, 426, -173, 60, -173, -288, 421, -225,
	-226, 229, 336, 98, 229, 98, 91, 366, -177, -184,
	-226, -226, -189, -177, -184, 421, 422, -191, -190, -355,
	422, -175, 71, -356, 354, -209, -210, 161, 421, -225,
	421, -226, -206, 32, -137, 421, 144, 241, -225, 241,
	-160, 199, -412, -353, -157, -245, -274, 421, 241, -88,
	-178, 2, -223, 404, -135, -136, -355, -355, 91, 91,
	420, 422, -42, -43, 167, 73, 259, -212, -211, 256,
	236, -148, -288, -288, 422, -350, 414, -413, -385, 256,
	422, -288, -288, -289, 142, 421, -299, -386, 391, -288,
	-234, -386, -386, 422, -312, -346, -311, -280, -184, -188,
	-181, -165, 126, 157, 232, 195, 421, -289, -189, 421,
	2, -279, -407, 77, 337, -315, -148, -188, -148, 422,
	-234, 422, 422, 232, 232, -288, -326, -154, -154, 422,
	422, 358, 358, -234, 358, 358, 398, -291, 254, -225,
	422, -225, 422, 422, -88, -225, -189, 422, -189, -412,
	-353, -158, 105, -226, 73, -268, -295, 422, 421, 421,
	426, 24, 421, 24, 421, -187, 342, 422, -223, 46,
	422, 422, -289, -299, 422, -387, -388, -180, -311, 420,
	-367, -181, 229, -288, -167, 421, -288, -208, 421, -173,
	-413, 275, -405, 60, 421, 421, -177, -184, -413, 421,
	421, -291, -189, 422, -279, 422, -208, 422, -264, 421,
	-353, -159, 373, 230, 422, -184, -245, -356, -356, -43,
	-226, -226, -189, -392, 270, 297, -234, 422, 426, 32,
	114, 422, -368, 214, -165, 422, -209, -226, -148, 422,
	-189, -406, 378, -188, -214, -213, -211, -216, -215, -211,
	422, -234, -234, 421, -208, -279, -209, -279, 421, -225,
	-160, 317, -282, 422, 422, 422, 422, 422, -393, -394,
	38, 368, 82, -288, -393, -388, -390, 126, -369, -372,
	-371, 241, 143, 255, 322, 422, 336, 388, 422, -220,
	-288, 422, 426, 383, 422, 426, 383, 422, 422, -226,
	-209, -208, -208, -225, 422, -238, -137, -137, -394, 263,
	138, 296, 263, 138, -181, -371, 241, -372, 241, 373,
	101, -368, -213, 161, -215, 142, 422, -209, -209, 422,
	-282, 28, -370, 226, 287, 51, 317, -370, -369, 421,
	421, -155, 51, 287, -279, -394, 21, 232, 98, -234,
	-234, -208, 422, 422, -209, -209, 358, 421, -234, 422,
	-209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 247, 248, 250, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 387, 0, 856, -2, 0, 365, 367, 376, 378,
	380, 382, 383, 0, 445, 447, 449, 451, 453, 455,
	457, 459, 461, 462, 464, 466, 468, 470, 472, 474,
	476, 478, 480, 482, 484, 486, 488, 490, 492, 494,
	-2, 768, 770, 772, 774, -2, 62, 64, 66, 68,
	70, 72, 87, 222, 224, 226, 228, 231, 233, 235,
	893, 253, 255, 257, 259, 261, -2, 907, 0, 0,
	0, -2, 0, -2, -2, -2, 786, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 869, 871, 873,
	875, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, -2, -2, -2,
	-2, 0, 0, 1528, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1415, 1469, 1418, 1413, 188,
	190, 192, 193, 0, 0, 0, 0, 0, 0, 671,
	1454, 1467, 1468, 1469, 1472, 1473, 1474, 1528, 0, 215,
	217, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 344, 1619, 346, 348, 0, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 249, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 343, 341,
	1449, 286, 287, 0, 326, 327, 328, 329, 330, 331,
	333, 290, 292, 294, 295, 297, 299, 301, 303, 305,
	307, 309, 311, 312, 314, 316, 317, 319, 321, 322,
	324, 731, 0, 0, 0, 0, 0, 170, 0, 358,
	352, 357, 359, 361, 362, 363, 364, 0, 168, 0,
	0, 604, 339, 337, 0, 162, 0, 0, 765, 0,
	358, 1496, 356, 766, 767, 0, 0, 761, 762, 1648,
	796, 366, 368, 377, 379, 381, 384, -2, -2, 1743,
	-2, 407, -2, 415, 1746, 1650, 418, 0, 420, -2,
	423, 446, 448, 450, 452, 454, 456, 458, 460, 463,
	465, 467, 469, 471, 473, 475, 477, 479, 481, 483,
	485, 487, 489, 491, 493, 495, 496, 0, 0, 0,
	0, 0, 500, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, -2, 0,
	0, 0, -2, -2, 0, 0, 499, 501, 502, 503,
	0, 547, 586, 587, 769, 771, 773, 0, 712, 895,
	63, 65, 67, 69, 71, 223, 225, 227, 229, 232,
	234, -2, 867, 868, 254, 256, 258, 260, 262, -2,
	0, 899, 899, 899, 0, 0, 868, 866, 0, 369,
	0, 371, 0, 500, 374, 375, 427, 428, 1107, 0,
	0, 0, 0, 0, 1232, 1185, -2, -2, 1217, 1219,
	1722, 1743, 0, 1221, 1222, 0, 1224, 1228, 1229, 0,
	1392, 1461, 1456, 1421, 1422, 1423, 1424, 0, 0, 1427,
	0, 1429, 1430, 1431, 1296, 1243, -2, -2, -2, 1465,
	1021, 1022, 1023, 1024, 1025, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1755, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 0, 1711, 1728, 1729, 1734, 1736, 1730, 1719,
	1266, -2, -2, 1535, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1723, 1724, -2, 1726, -2, -2, 1735, -2, 1739,
	1740, -2, -2, 1745, -2, -2, -2, 1749, 1750, -2,
	1483, 1074, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1768, 1769, 1770, 1771, 1772, 1773, 798, 776,
	789, 798, 778, 779, 780, 781, 782, 787, 788, 791,
	0, 783, 784, 785, 885, 1625, 888, 671, 886, 870,
	872, 0, 874, 0, 0, 0, 879, 902, 900, 0,
	938, 883, 884, 894, 953, 0, 0, 973, 973, 964,
	0, 995, 0, 1466, 0, 0, 0, 0, 0, -2,
	1469, 1755, 1766, 1767, 2, 79, 0, 1728, 995, 81,
	0, 1728, 84, 0, 1728, 0, -2, 88, 0, 1728,
	171, 172, 1479, 1480, 1484, 1485, 1486, 1487, 91, 0,
	1445, 99, 0, 1728, 1412, 0, 1442, 1488, 1489, 1490,
	1491, 1492, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 0, 1439, 0, 0, 596, 1409, 1414,
	597, 1419, 0, 194, 195, 196, 197, 198, 1728, 200,
	201, 0, 203, 204, 1728, 206, 207, 0, 209, 0,
	0, 0, 0, 0, 230, 671, 1728, 0, 237, 1450,
	0, 695, 1728, 693, 1453, -2, 1728, 715, 718, 1728,
	720, 671, 722, 1452, -2, 1476, 892, 1728, 812, 345,
	347, 0, 240, 0, 825, 0, 827, 0, 846, 1001,
	153, 1728, 265, 284, 153, 1728, 268, 153, 1728, 271,
	153, 1728, 274, 1407, 153, 1728, 277, 278, 1728, 280,
	173, 281, 1728, 283, 340, 0, 0, -2, 334, 1455,
	-2, 332, 291, 293, 296, 298, 300, 302, 304, 306,
	308, 310, 313, 315, 318, 320, 323, 325, -2, 0,
	163, 164, 165, 0, 0, 0, 0, 602, 603, 0,
	0, 0, 763, 764, 0, 0, 0, 388, 0, 0,
	0, 0, 795, 385, 0, 404, 0, 406, 1718, -2,
	-2, 410, 799, 803, 804, 805, 0, 0, 0, 0,
	417, 0, 0, 0, 421, 424, 0, 497, 498, 0,
	0, 508, 509, 510, 511, 512, 0, 515, 536, 551,
	0, 0, 519, 521, 601, 523, 0, 0, 525, 0,
	527, 0, 529, 0, 531, 0, 533, 535, 537, 552,
	539, 0, 0, 0, 550, 0, 556, 0, 559, 560,
	561, 0, 563, 564, 565, 0, 0, 0, 573, 575,
	0, 585, 0, 504, 505, 153, 999, -2, 0, 862,
	916, 917, 0, 0, 0, 0, 897, 898, 0, 0,
	0, 858, 859, 370, 0, 373, 0, 0, 0, 0,
	1327, 1328, 1329, 1330, 1331, 1332, 1335, 1336, 1333, 1334,
	1337, 1338, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	1341, 1342, 0, 0, 1344, 0, 1346, 0, 0, 0,
	0, 0, 0, 1164, 1166, 1400, 0, 0, 1343, 1112,
	1113, 1114, 1149, 1150, 0, 1218, 1397, 1396, 1220, 0,
	1349, -2, 1350, 1232, 0, 0, 1223, 1436, 1230, 1231,
	1349, 0, 1391, 0, 0, 1426, 0, 1104, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 1072, 1079, 1076, 1075, 1060,
	0, 1059, 0, 0, 1057, 0, 0, 0, 1061, 0,
	1372, -2, 0, 0, 0, 0, 0, 0, 775, -2,
	777, 0, 793, 0, 887, 0, 0, 942, 1401, 1405,
	1406, 942, 942, 0, 0, 1350, 0, 0, 0, 0,
	992, 992, 992, 990, 967, 0, 973, 0, -2, 0,
	973, 973, 0, 983, 0, 983, -2, 964, 0, 0,
	996, 997, 0, 0, 100, 758, 119, 0, 758, 758,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 115,
	107, 108, 0, 0, 85, 696, 0, 699, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 117, 0, 142, 144, 0,
	0, 0, 0, 986, 595, 0, 0, 1470, 1417, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 1456, 1457,
	610, 0, 0, 0, 0, 691, 694, 0, 713, 0,
	891, 0, 0, 0, 0, 1728, 727, 1441, 1475, 0,
	1728, 814, 0, 1005, 0, 828, 0, 0, 1002, 0,
	263, 0, 151, 152, 0, 266, 0, 269, 0, 272,
	0, 0, 275, 0, 0, 0, 0, 0, 894, 0,
	185, 0, 350, 360, 0, 0, 894, 0, 1352, 1013,
	1016, 1017, 1018, 1104, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1080, 1074, 1090, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1070, 0, 1045, 1045, 1045,
	1062, 1063, 1081, 1082, 1084, 1086, 1088, 1014, 1015, 1080,
	1080, 1077, 1078, 185, 0, 354, 0, 986, 390, 986,
	392, 0, 581, 0, 0, 0, 0, -2, 412, 0,
	801, 0, 806, 436, 437, 438, 808, 809, 416, 439,
	440, 441, 442, 443, 444, 0, 688, 0, 690, 1432,
	0, 413, 429, 414, 419, 0, 425, 0, 0, 513,
	514, 516, 517, 518, 522, 0, 589, 1640, 599, 524,
	526, 528, 530, 532, 894, 541, 0, 543, 894, 554,
	557, 562, 566, 567, 568, 569, 570, 571, 0, 0,
	0, 711, 0, 865, 914, 915, 920, 924, 925, 928,
	931, 932, 922, 1107, 880, 881, 882, 908, 909, 741,
	0, 0, 372, 1108, 1009, 1010, 1064, 1065, 1066, 1067,
	1068, 1109, 1110, 1438, 0, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, -2, -2, -2, -2, -2,
	-2, -2, -2, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, -2, -2, -2, 1147, 1148, -2,
	1345, 1347, 0, 1400, 0, -2, 0, -2, -2, -2,
	-2, 1161, 0, 1163, 1168, 1170, 1172, 0, 0, 0,
	0, 1399, 1182, 1383, 0, 0, 1324, 1325, 1326, 1167,
	0, 0, 1398, 1395, 0, 0, 1348, 1227, 0, 0,
	0, 0, 1356, 1390, 1386, 0, 1458, 1464, 1234, 905,
	0, 0, 0, 0, 1241, 0, 1437, 1091, 1092, 1093,
	1094, 1095, 1096, 1105, 1306, 0, 0, 0, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	1359, -2, -2, -2, -2, -2, -2, -2, 0, 1280,
	0, 0, 1292, 0, 1294, 0, 1282, 1350, 1369, 0,
	0, 1188, 0, 0, 0, 1232, 0, 1285, 1350, 1377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	0, 1382, 792, 889, 0, 0, 1005, 0, 0, 0,
	1404, 1005, 1005, 0, 937, 0, 0, 0, 0, 0,
	0, 987, 991, 988, 989, 0, 0, 973, 983, 950,
	0, 0, 1440, 0, 958, -2, 983, 983, 0, 960,
	982, 0, 671, 972, 962, -2, 0, -2, 0, 0,
	0, 0, 757, 121, 1728, 0, 155, 0, 0, 661,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	697, 698, 700, 706, 708, 0, 702, 1435, 0, 703,
	0, 705, 707, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 1411,
	0, 0, 176, 985, 0, 1410, 1420, 0, 199, 202,
	205, 208, 186, 670, 0, 0, 0, 0, 609, -2,
	611, 613, 614, 615, 616, 1573, 1476, 0, 1476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 822, 0, 907, 0, 844, 830, 0,
	0, 0, 844, 848, 849, 851, 852, 0, 0, 1003,
	285, 153, 153, 153, 1408, 153, 153, 174, 279, 282,
	342, 288, 335, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 0, 338, 0, 1006, 1008, 0, 1019, 0,
	1072, 0, 160, 185, 0, 0, 389, 394, 0, 582,
	0, 0, 405, 0, 800, 807, 0, 433, 0, 435,
	689, 1434, 1433, 0, 426, 506, 0, 600, 598, 540,
	544, 894, 546, 0, 583, 584, 588, 1000, 0, 926,
	0, 923, 929, 930, 0, 911, 739, 740, 0, 0,
	0, -2, -2, 0, 0, 0, 1183, -2, 1162, 1165,
	1169, 1171, 1173, 0, 0, 0, 0, 0, 0, 0,
	1184, 1393, 1396, 1322, 0, 0, 1351, 1354, 1355, 0,
	0, 1387, 0, 0, 0, 0, 0, 904, 905, 905,
	905, 1240, 0, 0, 0, 0, 0, 0, 1242, 0,
	0, 0, 0, 0, 0, 0, 0, 1261, 0, 0,
	0, 1265, 1043, 0, 1277, 0, 1279, 1069, 1291, 1293,
	1281, 0, 0, 1283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1191, 1192, 1193,
	1284, 1375, 1376, 0, 0, 1083, 1085, 1087, 1089, 0,
	0, 0, 0, 1290, 0, 1381, 894, 939, 934, 1402,
	986, 941, 943, 1403, 1443, 934, 934, 0, 1351, 975,
	0, 977, 0, 0, 0, 979, 0, 968, 0, 970,
	983, 955, 0, 0, 948, 0, 947, 973, 0, 959,
	961, 963, 1458, 671, 981, 0, 998, 0, 120, 745,
	0, 0, 1444, 0, 123, 1728, 132, 0, 638, 0,
	0, 0, 0, 0, 760, 133, 1728, 153, 1728, 153,
	134, 137, 0, 141, 139, 0, 0, 629, 101, 758,
	104, 0, 0, 751, 0, 701, 704, 710, 86, 0,
	753, 743, 0, 0, 742, 143, 105, 0, 0, 755,
	103, 0, 0, 0, 185, 0, 0, 1416, 1471, 210,
	212, 213, 211, 618, 0, 1476, 0, 1476, 0, 1448,
	607, 671, 0, 986, 695, 716, -2, 719, 721, 729,
	0, 0, 0, 818, 822, 0, 821, 892, 919, 906,
	1004, 823, 844, 0, 0, 0, 833, 835, 832, 829,
	826, 1005, 0, 0, 0, 0, 0, 264, 267, 270,
	273, 276, 0, 183, 1607, 181, 178, 180, 349, 0,
	0, 0, 1353, 0, 1011, 0, 0, 0, 0, 161,
	353, 0, 391, 0, 0, 0, 0, 0, 0, 402,
	403, -2, 431, 432, 434, 430, 0, 542, 545, 553,
	0, 0, 910, 741, 0, 1111, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1384, 0, 1395, 1225, 1226,
	1233, 1323, 1357, 1385, 1389, 0, 1459, 1463, 1235, 0,
	0, 0, 0, 1428, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 0, 1304, 1305, 1309, 1451, 0, 0, 1246, 0,
	0, 0, 0, 0, 0, 0, 0, 1358, 1368, 1370,
	1189, 1190, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, -2, -2, -2, 1207, 1208, 1209, -2, -2,
	-2, 0, 0, 0, 1371, 1373, 1374, 1378, 1379, 0,
	1287, 1288, 1289, 1380, 0, 936, 0, 940, 0, 936,
	936, 901, 976, 0, 994, 978, 953, 969, 0, 966,
	951, 0, 952, 0, 983, 973, 0, 980, 965, -2,
	0, 0, 0, 0, 154, 636, 660, 0, 0, 732,
	738, 738, 0, 1446, 1244, 1245, 0, 0, 0, 125,
	0, 0, 0, 0, 130, 0, 136, 140, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 111,
	114, 0, 0, 110, 0, 158, 0, 0, 626, 0,
	612, 0, 0, 0, 0, 610, 0, 236, 185, 692,
	714, 0, 0, 0, 0, 0, 820, 822, 0, 813,
	814, 844, 918, 824, 842, 843, 841, 0, 0, 0,
	907, 850, 847, 853, 854, 0, 169, 0, 0, 0,
	0, 351, 0, 0, 0, 1012, 1020, 0, 1073, 355,
	0, 576, 577, 624, 0, 580, 507, 921, 927, 912,
	741, 0, 0, -2, 0, 1176, -2, -2, 1394, 1388,
	0, 1425, 905, 1236, 1238, 1239, 1106, 1311, 1308, 0,
	1295, 1256, 1257, 0, 0, 1260, 1262, 1263, 1264, 1044,
	1367, 0, 0, 0, 0, 1286, 890, 1300, 0, 0,
	944, 1300, 1300, 0, 973, 971, 949, 945, 0, 956,
	983, 1459, 0, 747, 749, 122, 0, 637, 0, 640,
	0, 0, 0, 0, 647, 648, 0, 0, 0, 0,
	0, 662, 669, 0, 741, 0, 741, 0, 0, 0,
	0, 0, 127, 146, 0, 0, 759, 0, 153, 153,
	0, 0, 746, 0, 0, 0, 0, 752, 754, 744,
	0, 756, 0, 175, 0, 605, 625, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 728, 0, 0, 0,
	810, 822, 0, 815, 816, 239, 0, 0, 0, 831,
	834, 836, 919, 0, 182, 0, 177, 179, 0, 0,
	1007, 1071, 393, 395, 0, 0, 401, 578, 623, 0,
	0, 913, -2, -2, 1177, 1460, 1462, 0, 907, 0,
	1297, 0, 0, -2, 0, 0, 0, 876, 0, 935,
	933, 877, 878, 993, 983, 0, 957, 124, 0, 641,
	642, 1447, 644, 0, 646, 649, 0, 651, 1478, 0,
	655, 618, 0, 666, 667, 733, 734, 737, 735, 738,
	905, 664, 0, 126, 128, 145, 148, 129, 135, 0,
	0, 0, 0, 905, 0, 0, 0, 984, 0, 0,
	669, 0, 659, 618, 608, 0, 729, 725, 0, 0,
	817, 818, 0, 0, 0, 844, 855, 184, 0, 0,
	0, 397, 0, 399, 0, 622, 0, 1237, 1314, 0,
	1258, 1259, -2, 0, 1215, 1299, 1301, 0, 954, 946,
	639, 643, 0, 0, 675, 0, 0, 626, 0, 741,
	0, 0, 150, 0, 0, 0, 748, 750, 0, 0,
	0, 113, 0, 658, 618, 669, 626, 669, 0, 0,
	819, 820, 0, 838, 1005, 840, 845, 0, 0, 396,
	0, 0, 579, 0, 0, 0, 1310, 1216, 0, 0,
	0, 650, 680, 0, 0, 0, 663, 0, 736, 1235,
	671, 131, 0, 147, 0, 630, 0, 0, 633, 0,
	0, 0, 0, 0, 626, 618, 606, 618, 0, 0,
	811, 0, 839, 185, 185, 398, 400, 1307, 1312, 1315,
	-2, 1694, 1525, 0, 1313, 1302, 1303, 0, 652, 676,
	677, 0, 672, 673, 674, 1477, 653, 654, 668, 675,
	149, 627, 0, 0, 628, 0, 0, 116, 118, 0,
	656, 626, 626, 0, 726, 1005, 166, 167, 0, 1317,
	1318, 1319, 1320, 1321, 645, 678, 0, 679, 0, 0,
	0, 680, 631, 0, 634, 0, 621, 657, 723, 669,
	837, 0, 681, 0, 684, 685, 0, 682, 665, 0,
	0, 617, 619, 620, 618, 1316, 683, 686, 687, 0,
	0, 626, 626, 0, 724, 632, 0, 0, 0, 626,
	635,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1012
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1024
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1033
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1156
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1160
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1171
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1212
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1222
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1226
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1238
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1244
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1255
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1262
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1272
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1282
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1292
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1337
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1382
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1408
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1427
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1437
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1497
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1501
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1508
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1509
		{
			sqlVAL.str = ""
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1513
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1522
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1532
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1536
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1541
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1542
		{
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1569
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1599
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1603
		{
			sqlVAL.str = "CSV"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1607
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1611
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1641
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1645
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1648
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1665
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1668
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1672
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1676
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1696
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1710
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1714
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1720
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1730
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1734
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1737
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1741
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1753
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1754
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1755
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1756
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1766
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1774
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1798
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1806
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1812
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1815
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1825
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1834
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1842
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1848
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1851
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1855
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1860
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1866
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1867
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1879
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1880
		{
			return helpWith(sqllex, "CREATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1883
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1890
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1901
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1912
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				AsOf:    sqlDollar[7].union.asOfClause(),
				Options: sqlDollar[8].union.kvOptions(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1944
		{
			return helpWith(sqllex, "DELETE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1954
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return helpWith(sqllex, "DROP")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1984
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1988
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1991
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2014
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2029
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2037
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2060
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2067
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2075
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2079
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2082
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2094
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2097
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2101
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2138
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2141
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2146
		{
			return helpWith(sqllex, "DELETE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2148
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2149
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "INSERT")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2151
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2156
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2159
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2160
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2171
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2172
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2176
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2190
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2197
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2201
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2205
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2215
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2221
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2227
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2231
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2253
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2256
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2276
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2280
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2284
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2287
		{
			return helpWith(sqllex, "GRANT")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2307
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2318
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2323
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2327
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2338
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2356
		{
			return helpWith(sqllex, "RESET")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2357
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2369
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2372
		{
			return helpWith(sqllex, "RESET")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2383
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2394
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2397
		{
			return helpWith(sqllex, "USE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2401
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2402
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2403
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2404
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2405
		{
			return helpWith(sqllex, "USE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return unimplemented(sqllex, "set local")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2422
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2437
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2440
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2458
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2466
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2470
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2474
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2480
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2517
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2524
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2546
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2550
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2575
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2580
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2584
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2594
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2610
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2617
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2623
		{
			return unimplemented(sqllex, "set from current")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2624
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2632
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2637
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2644
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2648
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2654
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2665
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2671
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2681
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2685
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2689
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2693
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2697
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = tree.Low
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2707
		{
			sqlVAL.union.val = tree.Normal
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2711
		{
			sqlVAL.union.val = tree.High
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2722
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2726
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2730
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2739
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2751
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2753
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2754
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2762
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2785
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2797
		{
			sqlVAL.str = "client_encoding"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2800
		{
			sqlVAL.str = "timezone"
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2815
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2833
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2849
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2852
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2862
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2869
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2871
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2874
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2882
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2885
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2893
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2896
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2909
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2917
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2925
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2928
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2930
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2933
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2935
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2938
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2946
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2949
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2951
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2954
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2962
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2965
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2967
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2981
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2984
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2994
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2997
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3002
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3008
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3012
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3018
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3019
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3027
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3032
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3055
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3067
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3074
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3078
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3088
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3092
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3100
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3105
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3110
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3122
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3125
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3133
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3136
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3143
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3146
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3154
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3157
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3165
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3168
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3172
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3177
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3182
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3189
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3197
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3204
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3209
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3221
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3225
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3228
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3236
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3243
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3248
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3368
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3372
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3376
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3415
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3419
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3424
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3428
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3437
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3444
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3448
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3472
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3520
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3559
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3565
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3575
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3581
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3595
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3602
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3607
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3612
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3618
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3625
		{
			sqlVAL.str = ""
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3632
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3645
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3652
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3658
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3668
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3678
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3688
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3699
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3710
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3714
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3720
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3724
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3728
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3732
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3736
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3740
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3744
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3770
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3778
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3794
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3798
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3802
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3809
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3831
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3853
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3858
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3870
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3881
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3891
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3915
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3919
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3925
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3929
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3934
		{
			return unimplemented(sqllex, "match full")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3935
		{
			return unimplemented(sqllex, "match partial")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3936
		{
			return unimplemented(sqllex, "match simple")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3937
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3944
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3952
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3956
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3972
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3992
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3996
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4002
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4028
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4036
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4044
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4048
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4051
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4055
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4056
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4058
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4059
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4060
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4063
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4065
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4067
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4069
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4070
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4072
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4073
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4075
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4084
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4087
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4095
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4099
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4102
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4110
		{
			sqlVAL.union.val = nil
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4127
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4135
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4142
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4160
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4173
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4187
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4196
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4205
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4210
		{
			sqlVAL.union.val = true
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4214
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4220
		{
			sqlVAL.union.val = true
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4224
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4230
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4243
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4246
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4247
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4250
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4251
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4255
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = tree.Descending
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4269
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4276
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4280
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4302
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4304
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4308
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4312
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4318
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4322
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4328
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = true
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = false
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4359
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4369
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4378
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4381
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4389
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4392
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4396
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4397
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4398
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4414
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4417
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4419
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4422
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4432
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4435
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4437
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4440
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4444
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4449
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4450
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4451
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4459
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4466
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4469
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4470
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4474
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4478
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4482
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.str = ""
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4492
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4496
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4502
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4506
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4512
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4516
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4529
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4531
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4535
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4539
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4543
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4549
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4561
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 810:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4575
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4585
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4595
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4599
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4603
		{
			sqlVAL.str = ""
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4609
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.str = ""
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4619
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4623
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4629
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4638
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4639
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4651
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4665
		{
			return helpWith(sqllex, "INSERT")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4676
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4683
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4687
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4695
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4701
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4709
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4715
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4739
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4743
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4747
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4753
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4757
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4759
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4765
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4770
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 845:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4791
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4802
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4806
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4807
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4811
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4828
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4831
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4835
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4888
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4903
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4907
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4911
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4915
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4919
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4923
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4930
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4965
		{
			return helpWith(sqllex, "SELECT")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4966
		{
			return helpWith(sqllex, "VALUES")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4967
		{
			return helpWith(sqllex, "TABLE")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4989
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5002
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5016
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5028
		{
			return helpWith(sqllex, "SELECT")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5032
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5041
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5050
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5065
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5072
		{
			return helpWith(sqllex, "TABLE")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5084
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5087
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5088
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5092
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5102
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5110
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5111
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5115
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5118
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5121
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5122
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5126
		{
			sqlVAL.union.val = true
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5130
		{
			sqlVAL.union.val = false
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5134
		{
			sqlVAL.union.val = false
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5140
		{
			sqlVAL.union.val = true
		}
	case 901:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5146
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5151
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5152
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5155
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5156
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5160
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5176
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5186
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5190
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5194
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5203
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5212
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5223
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5227
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5236
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5242
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5249
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5256
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5265
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5269
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5273
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5279
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5280
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5283
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5284
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5301
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5311
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5315
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5337
		{
			return helpWith(sqllex, "VALUES")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5339
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5351
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5354
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5356
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5362
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5372
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5376
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5382
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5388
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5393
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5416
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5420
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5424
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5428
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5455
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5476
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5477
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5478
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5480
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5483
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5485
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5488
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5490
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5494
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5514
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5519
		{
			sqlVAL.union.val = nil
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5520
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5521
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5525
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5535
		{
			sqlVAL.union.val = true
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5539
		{
			sqlVAL.union.val = false
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5567
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5585
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5596
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5609
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5615
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5619
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5623
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5627
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5633
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5634
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5654
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5655
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5656
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5678
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5686
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5692
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5708
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5722
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5731
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5742
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5746
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5753
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5755
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5764
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5768
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5772
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5781
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5799
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5803
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5807
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5811
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5831
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5835
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5839
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5843
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5847
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5851
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5855
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5859
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5863
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5883
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5887
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5891
		{
			sqlVAL.union.val = nil
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5898
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5902
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5910
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5914
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5918
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5922
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5926
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5930
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5934
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5942
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5952
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5956
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5965
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5974
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5994
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5998
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6002
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6006
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6010
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6016
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6020
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6026
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6037
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6043
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6061
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6065
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6069
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6073
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6079
		{
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6084
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6092
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6096
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6100
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6104
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6108
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6112
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6121
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6127
		{
			sqlVAL.union.val = tree.Year
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = tree.Month
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = tree.Day
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6153
		{
			sqlVAL.union.val = tree.Month
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6169
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6173
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6177
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = nil
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6187
		{
			sqlVAL.union.val = tree.Second
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6190
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6214
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6225
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6258
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6262
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6270
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6274
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6278
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6282
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6330
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6334
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6338
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6354
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6358
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6374
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6378
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6386
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6390
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6402
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6406
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6453
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6515
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6519
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6559
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6563
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6567
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6607
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6611
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6619
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6623
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6627
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6631
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6647
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6725
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6730
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6739
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6765
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6769
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6774
		{
			t := sqlDollar[2].union.tuple()
			t.Labels = sqlDollar[4].union.nameList()
			sqlVAL.union.val = &t
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6785
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6792
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6793
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6806
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6817
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6824
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6833
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6834
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6838
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6858
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6862
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6872
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6880
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6884
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6888
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6892
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6896
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6908
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6912
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6926
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6931
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6936
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6941
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6946
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6948
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6951
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6956
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6961
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6970
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6971
		{
			return unimplemented(sqllex, "treat")
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6992
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6997
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7002
		{
			return unimplemented(sqllex, "within group")
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7003
		{
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7011
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7018
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7038
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7046
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7050
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7080
		{
			sqlVAL.str = ""
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7086
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7090
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7100
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7101
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7102
		{
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7105
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7106
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7112
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7113
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7114
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7115
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7116
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = tree.Any
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = tree.Some
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = tree.All
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7151
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = tree.Div
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7155
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7156
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7158
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7160
		{
			sqlVAL.union.val = tree.LT
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7161
		{
			sqlVAL.union.val = tree.GT
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.LE
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7164
		{
			sqlVAL.union.val = tree.GE
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7165
		{
			sqlVAL.union.val = tree.NE
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7169
		{
			sqlVAL.union.val = tree.Like
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7171
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7190
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7200
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7220
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7230
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7234
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7256
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7260
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7270
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7277
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7281
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7298
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7302
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7306
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7314
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7332
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7412
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7427
		{
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7428
		{
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7432
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7436
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7451
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7459
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7494
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7536
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7540
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7547
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7551
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7555
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7559
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7562
		{
			return unimplemented(sqllex, "func const")
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7568
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7571
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7573
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7577
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7588
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7612
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7622
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7725
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7768
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7814
		{
			sqlVAL.str = ""
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7820
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7824
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
