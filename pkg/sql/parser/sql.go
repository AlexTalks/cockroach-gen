// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) unresolvedObjectNames() []*tree.UnresolvedObjectName {
	return u.val.([]*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}
func (u *sqlSymUnion) typeReference() tree.ResolvableTypeReference {
	return u.val.(tree.ResolvableTypeReference)
}
func (u *sqlSymUnion) typeReferences() []tree.ResolvableTypeReference {
	return u.val.([]tree.ResolvableTypeReference)
}
func (u *sqlSymUnion) alterTypeAddValuePlacement() *tree.AlterTypeAddValuePlacement {
	return u.val.(*tree.AlterTypeAddValuePlacement)
}

//line sql-gen.y:655
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AFTER = lex.AFTER
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const ATTRIBUTE = lex.ATTRIBUTE
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEFORE = lex.BEFORE
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CBRT = lex.CBRT
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OWNER = lex.OWNER
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SQRT = lex.SQRT
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const GENERATED_ALWAYS = lex.GENERATED_ALWAYS
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEFORE",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CBRT",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SQRT",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"GENERATED_ALWAYS",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10699

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 29,
	-2, 1173,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 76,
	199, 997,
	211, 997,
	226, 276,
	320, 276,
	329, 795,
	357, 276,
	366, 795,
	403, 795,
	427, 276,
	452, 795,
	-2, 0,
	-1, 81,
	226, 280,
	-2, 0,
	-1, 82,
	118, 1173,
	205, 1173,
	437, 1173,
	438, 1173,
	-2, 0,
	-1, 94,
	131, 1144,
	148, 1144,
	161, 1144,
	208, 1144,
	238, 1144,
	280, 1144,
	290, 1144,
	432, 1144,
	-2, 1115,
	-1, 126,
	138, 704,
	225, 704,
	323, 684,
	371, 684,
	420, 704,
	-2, 0,
	-1, 127,
	4, 1175,
	21, 1175,
	22, 1175,
	23, 1175,
	24, 1175,
	25, 1175,
	26, 1175,
	28, 1175,
	29, 1175,
	35, 1175,
	40, 1175,
	41, 1175,
	42, 1175,
	43, 1175,
	44, 1175,
	45, 1175,
	46, 1175,
	47, 1175,
	48, 1175,
	50, 1175,
	51, 1175,
	52, 1175,
	54, 1175,
	55, 1175,
	56, 1175,
	57, 1175,
	58, 1175,
	62, 1175,
	63, 1175,
	64, 1175,
	65, 1175,
	67, 1175,
	68, 1175,
	69, 1175,
	73, 1175,
	74, 1175,
	75, 1175,
	76, 1175,
	77, 1175,
	78, 1175,
	79, 1175,
	82, 1175,
	83, 1175,
	84, 1175,
	85, 1175,
	87, 1175,
	89, 1175,
	90, 1175,
	91, 1175,
	93, 1175,
	95, 1175,
	96, 1175,
	104, 1175,
	105, 1175,
	106, 1175,
	107, 1175,
	109, 1175,
	110, 1175,
	111, 1175,
	113, 1175,
	114, 1175,
	115, 1175,
	117, 1175,
	118, 1175,
	120, 1175,
	123, 1175,
	124, 1175,
	125, 1175,
	127, 1175,
	129, 1175,
	130, 1175,
	132, 1175,
	133, 1175,
	134, 1175,
	135, 1175,
	136, 1175,
	137, 1175,
	138, 1175,
	139, 1175,
	140, 1175,
	141, 1175,
	142, 1175,
	143, 1175,
	144, 1175,
	145, 1175,
	147, 1175,
	153, 1175,
	154, 1175,
	155, 1175,
	156, 1175,
	160, 1175,
	162, 1175,
	166, 1175,
	167, 1175,
	168, 1175,
	169, 1175,
	170, 1175,
	171, 1175,
	173, 1175,
	174, 1175,
	176, 1175,
	177, 1175,
	179, 1175,
	180, 1175,
	181, 1175,
	182, 1175,
	183, 1175,
	184, 1175,
	185, 1175,
	186, 1175,
	187, 1175,
	189, 1175,
	190, 1175,
	192, 1175,
	193, 1175,
	194, 1175,
	195, 1175,
	199, 1175,
	200, 1175,
	201, 1175,
	202, 1175,
	205, 1175,
	206, 1175,
	207, 1175,
	209, 1175,
	211, 1175,
	213, 1175,
	215, 1175,
	216, 1175,
	217, 1175,
	219, 1175,
	223, 1175,
	224, 1175,
	225, 1175,
	226, 1175,
	227, 1175,
	229, 1175,
	230, 1175,
	232, 1175,
	233, 1175,
	235, 1175,
	236, 1175,
	239, 1175,
	240, 1175,
	241, 1175,
	244, 1175,
	245, 1175,
	246, 1175,
	247, 1175,
	249, 1175,
	250, 1175,
	251, 1175,
	252, 1175,
	253, 1175,
	254, 1175,
	255, 1175,
	256, 1175,
	257, 1175,
	258, 1175,
	259, 1175,
	261, 1175,
	263, 1175,
	264, 1175,
	265, 1175,
	266, 1175,
	267, 1175,
	269, 1175,
	271, 1175,
	273, 1175,
	275, 1175,
	276, 1175,
	277, 1175,
	278, 1175,
	279, 1175,
	282, 1175,
	285, 1175,
	286, 1175,
	287, 1175,
	288, 1175,
	291, 1175,
	292, 1175,
	293, 1175,
	295, 1175,
	297, 1175,
	298, 1175,
	299, 1175,
	300, 1175,
	301, 1175,
	302, 1175,
	303, 1175,
	304, 1175,
	305, 1175,
	306, 1175,
	307, 1175,
	309, 1175,
	310, 1175,
	311, 1175,
	312, 1175,
	313, 1175,
	314, 1175,
	315, 1175,
	316, 1175,
	317, 1175,
	319, 1175,
	321, 1175,
	322, 1175,
	323, 1175,
	324, 1175,
	325, 1175,
	326, 1175,
	327, 1175,
	328, 1175,
	329, 1175,
	330, 1175,
	337, 1175,
	339, 1175,
	340, 1175,
	341, 1175,
	342, 1175,
	343, 1175,
	344, 1175,
	345, 1175,
	346, 1175,
	348, 1175,
	350, 1175,
	351, 1175,
	352, 1175,
	353, 1175,
	354, 1175,
	355, 1175,
	357, 1175,
	358, 1175,
	359, 1175,
	360, 1175,
	361, 1175,
	362, 1175,
	363, 1175,
	364, 1175,
	366, 1175,
	367, 1175,
	368, 1175,
	369, 1175,
	370, 1175,
	371, 1175,
	373, 1175,
	374, 1175,
	375, 1175,
	376, 1175,
	377, 1175,
	379, 1175,
	380, 1175,
	381, 1175,
	383, 1175,
	385, 1175,
	386, 1175,
	387, 1175,
	388, 1175,
	389, 1175,
	390, 1175,
	391, 1175,
	392, 1175,
	393, 1175,
	394, 1175,
	395, 1175,
	396, 1175,
	397, 1175,
	399, 1175,
	400, 1175,
	402, 1175,
	404, 1175,
	405, 1175,
	406, 1175,
	407, 1175,
	408, 1175,
	409, 1175,
	410, 1175,
	412, 1175,
	413, 1175,
	414, 1175,
	415, 1175,
	416, 1175,
	418, 1175,
	420, 1175,
	421, 1175,
	422, 1175,
	423, 1175,
	424, 1175,
	426, 1175,
	427, 1175,
	428, 1175,
	430, 1175,
	431, 1175,
	434, 1175,
	435, 1175,
	436, 1175,
	437, 1175,
	438, 1175,
	439, 1175,
	440, 1175,
	442, 1175,
	445, 1175,
	446, 1175,
	447, 1175,
	448, 1175,
	449, 1175,
	450, 1175,
	452, 1175,
	453, 1175,
	454, 1175,
	459, 1175,
	460, 1175,
	461, 1175,
	462, 1175,
	463, 1175,
	464, 1175,
	-2, 0,
	-1, 128,
	1, 1049,
	215, 1049,
	319, 1049,
	327, 1049,
	467, 1049,
	491, 1049,
	-2, 0,
	-1, 130,
	1, 1049,
	491, 1049,
	-2, 0,
	-1, 131,
	1, 1049,
	491, 1049,
	-2, 0,
	-1, 132,
	1, 1049,
	417, 1049,
	491, 1049,
	-2, 0,
	-1, 159,
	131, 1143,
	148, 1143,
	161, 1143,
	208, 1143,
	238, 1143,
	280, 1143,
	290, 1143,
	432, 1143,
	-2, 1118,
	-1, 192,
	4, 1182,
	5, 1182,
	6, 1182,
	7, 1182,
	8, 1182,
	9, 1182,
	10, 1182,
	21, 1182,
	22, 1182,
	23, 1182,
	24, 1182,
	25, 1182,
	26, 1182,
	28, 1182,
	29, 1182,
	35, 1182,
	36, 1182,
	40, 1182,
	41, 1182,
	42, 1182,
	43, 1182,
	44, 1182,
	45, 1182,
	46, 1182,
	47, 1182,
	48, 1182,
	50, 1182,
	51, 1182,
	52, 1182,
	54, 1182,
	55, 1182,
	56, 1182,
	57, 1182,
	58, 1182,
	59, 1182,
	60, 1182,
	61, 1182,
	62, 1182,
	63, 1182,
	64, 1182,
	65, 1182,
	67, 1182,
	68, 1182,
	69, 1182,
	71, 1182,
	73, 1182,
	74, 1182,
	75, 1182,
	76, 1182,
	77, 1182,
	78, 1182,
	79, 1182,
	82, 1182,
	83, 1182,
	84, 1182,
	85, 1182,
	87, 1182,
	89, 1182,
	90, 1182,
	91, 1182,
	93, 1182,
	94, 1182,
	95, 1182,
	96, 1182,
	97, 1182,
	98, 1182,
	99, 1182,
	100, 1182,
	101, 1182,
	102, 1182,
	103, 1182,
	104, 1182,
	105, 1182,
	106, 1182,
	107, 1182,
	108, 1182,
	109, 1182,
	110, 1182,
	111, 1182,
	112, 1182,
	113, 1182,
	114, 1182,
	115, 1182,
	117, 1182,
	118, 1182,
	120, 1182,
	123, 1182,
	124, 1182,
	125, 1182,
	127, 1182,
	129, 1182,
	130, 1182,
	132, 1182,
	133, 1182,
	134, 1182,
	135, 1182,
	136, 1182,
	137, 1182,
	138, 1182,
	139, 1182,
	140, 1182,
	141, 1182,
	142, 1182,
	143, 1182,
	144, 1182,
	145, 1182,
	146, 1182,
	147, 1182,
	153, 1182,
	154, 1182,
	155, 1182,
	156, 1182,
	160, 1182,
	162, 1182,
	165, 1182,
	166, 1182,
	167, 1182,
	168, 1182,
	169, 1182,
	170, 1182,
	171, 1182,
	173, 1182,
	174, 1182,
	176, 1182,
	177, 1182,
	179, 1182,
	180, 1182,
	181, 1182,
	182, 1182,
	183, 1182,
	184, 1182,
	185, 1182,
	186, 1182,
	187, 1182,
	188, 1182,
	189, 1182,
	190, 1182,
	192, 1182,
	193, 1182,
	194, 1182,
	195, 1182,
	199, 1182,
	200, 1182,
	201, 1182,
	202, 1182,
	204, 1182,
	205, 1182,
	206, 1182,
	207, 1182,
	209, 1182,
	211, 1182,
	212, 1182,
	213, 1182,
	214, 1182,
	215, 1182,
	216, 1182,
	217, 1182,
	218, 1182,
	219, 1182,
	223, 1182,
	224, 1182,
	225, 1182,
	226, 1182,
	227, 1182,
	229, 1182,
	230, 1182,
	232, 1182,
	233, 1182,
	234, 1182,
	235, 1182,
	236, 1182,
	237, 1182,
	239, 1182,
	240, 1182,
	241, 1182,
	242, 1182,
	243, 1182,
	244, 1182,
	245, 1182,
	246, 1182,
	247, 1182,
	249, 1182,
	250, 1182,
	251, 1182,
	252, 1182,
	253, 1182,
	254, 1182,
	255, 1182,
	256, 1182,
	257, 1182,
	258, 1182,
	259, 1182,
	261, 1182,
	262, 1182,
	263, 1182,
	264, 1182,
	265, 1182,
	266, 1182,
	267, 1182,
	268, 1182,
	269, 1182,
	270, 1182,
	271, 1182,
	272, 1182,
	273, 1182,
	274, 1182,
	275, 1182,
	276, 1182,
	277, 1182,
	278, 1182,
	279, 1182,
	282, 1182,
	286, 1182,
	287, 1182,
	288, 1182,
	291, 1182,
	292, 1182,
	293, 1182,
	294, 1182,
	295, 1182,
	296, 1182,
	297, 1182,
	298, 1182,
	299, 1182,
	300, 1182,
	301, 1182,
	302, 1182,
	303, 1182,
	304, 1182,
	305, 1182,
	306, 1182,
	307, 1182,
	309, 1182,
	310, 1182,
	311, 1182,
	312, 1182,
	313, 1182,
	314, 1182,
	315, 1182,
	316, 1182,
	317, 1182,
	319, 1182,
	321, 1182,
	322, 1182,
	323, 1182,
	324, 1182,
	325, 1182,
	326, 1182,
	327, 1182,
	328, 1182,
	329, 1182,
	330, 1182,
	337, 1182,
	339, 1182,
	340, 1182,
	341, 1182,
	342, 1182,
	343, 1182,
	344, 1182,
	345, 1182,
	346, 1182,
	348, 1182,
	349, 1182,
	350, 1182,
	351, 1182,
	352, 1182,
	353, 1182,
	354, 1182,
	355, 1182,
	357, 1182,
	358, 1182,
	359, 1182,
	360, 1182,
	361, 1182,
	362, 1182,
	363, 1182,
	364, 1182,
	366, 1182,
	367, 1182,
	368, 1182,
	369, 1182,
	370, 1182,
	371, 1182,
	372, 1182,
	373, 1182,
	374, 1182,
	375, 1182,
	376, 1182,
	377, 1182,
	378, 1182,
	379, 1182,
	380, 1182,
	381, 1182,
	383, 1182,
	385, 1182,
	386, 1182,
	387, 1182,
	388, 1182,
	389, 1182,
	390, 1182,
	391, 1182,
	392, 1182,
	393, 1182,
	394, 1182,
	395, 1182,
	396, 1182,
	397, 1182,
	399, 1182,
	400, 1182,
	401, 1182,
	402, 1182,
	404, 1182,
	405, 1182,
	406, 1182,
	407, 1182,
	408, 1182,
	409, 1182,
	410, 1182,
	412, 1182,
	413, 1182,
	414, 1182,
	415, 1182,
	416, 1182,
	418, 1182,
	420, 1182,
	421, 1182,
	422, 1182,
	423, 1182,
	424, 1182,
	425, 1182,
	426, 1182,
	427, 1182,
	428, 1182,
	430, 1182,
	431, 1182,
	433, 1182,
	434, 1182,
	435, 1182,
	436, 1182,
	437, 1182,
	438, 1182,
	439, 1182,
	440, 1182,
	441, 1182,
	442, 1182,
	445, 1182,
	446, 1182,
	447, 1182,
	448, 1182,
	449, 1182,
	450, 1182,
	452, 1182,
	453, 1182,
	454, 1182,
	459, 1182,
	460, 1182,
	461, 1182,
	462, 1182,
	463, 1182,
	464, 1182,
	465, 1182,
	472, 1182,
	479, 1182,
	480, 1182,
	481, 1182,
	488, 1182,
	492, 1182,
	-2, 0,
	-1, 581,
	164, 1888,
	417, 1888,
	471, 1888,
	490, 1888,
	-2, 0,
	-1, 582,
	164, 1967,
	417, 1967,
	471, 1967,
	490, 1967,
	-2, 0,
	-1, 583,
	164, 1876,
	417, 1876,
	471, 1876,
	490, 1876,
	-2, 0,
	-1, 585,
	164, 2057,
	417, 2057,
	471, 2057,
	490, 2057,
	-2, 0,
	-1, 587,
	164, 2086,
	417, 2086,
	471, 2086,
	490, 2086,
	-2, 0,
	-1, 594,
	164, 1982,
	417, 1982,
	471, 1982,
	490, 1982,
	-2, 542,
	-1, 623,
	490, 1829,
	493, 1829,
	-2, 757,
	-1, 624,
	490, 1831,
	493, 1831,
	-2, 758,
	-1, 625,
	490, 1830,
	493, 1830,
	-2, 759,
	-1, 626,
	493, 1764,
	-2, 760,
	-1, 668,
	452, 974,
	-2, 796,
	-1, 706,
	4, 995,
	21, 995,
	22, 995,
	23, 995,
	24, 995,
	25, 995,
	26, 995,
	28, 995,
	29, 995,
	35, 995,
	40, 995,
	41, 995,
	42, 995,
	43, 995,
	44, 995,
	45, 995,
	46, 995,
	47, 995,
	48, 995,
	50, 995,
	51, 995,
	52, 995,
	54, 995,
	55, 995,
	56, 995,
	57, 995,
	58, 995,
	62, 995,
	63, 995,
	64, 995,
	65, 995,
	67, 995,
	68, 995,
	69, 995,
	73, 995,
	74, 995,
	75, 995,
	76, 995,
	77, 995,
	78, 995,
	79, 995,
	82, 995,
	83, 995,
	84, 995,
	85, 995,
	87, 995,
	89, 995,
	90, 995,
	91, 995,
	93, 995,
	95, 995,
	96, 995,
	104, 995,
	105, 995,
	106, 995,
	107, 995,
	109, 995,
	110, 995,
	111, 995,
	113, 995,
	114, 995,
	115, 995,
	117, 995,
	118, 995,
	120, 995,
	123, 995,
	124, 995,
	125, 995,
	127, 995,
	129, 995,
	130, 995,
	132, 995,
	133, 995,
	134, 995,
	135, 995,
	136, 995,
	137, 995,
	138, 995,
	139, 995,
	140, 995,
	141, 995,
	142, 995,
	143, 995,
	144, 995,
	145, 995,
	147, 995,
	153, 995,
	154, 995,
	155, 995,
	156, 995,
	160, 995,
	162, 995,
	166, 995,
	167, 995,
	168, 995,
	169, 995,
	170, 995,
	171, 995,
	173, 995,
	174, 995,
	176, 995,
	177, 995,
	179, 995,
	180, 995,
	181, 995,
	182, 995,
	183, 995,
	184, 995,
	185, 995,
	186, 995,
	187, 995,
	189, 995,
	190, 995,
	192, 995,
	193, 995,
	194, 995,
	195, 995,
	199, 995,
	200, 995,
	201, 995,
	202, 995,
	205, 995,
	206, 995,
	207, 995,
	209, 995,
	211, 995,
	213, 995,
	215, 995,
	216, 995,
	217, 995,
	219, 995,
	223, 995,
	224, 995,
	225, 995,
	226, 995,
	227, 995,
	229, 995,
	230, 995,
	232, 995,
	233, 995,
	235, 995,
	236, 995,
	239, 995,
	240, 995,
	241, 995,
	244, 995,
	245, 995,
	246, 995,
	247, 995,
	249, 995,
	250, 995,
	251, 995,
	252, 995,
	253, 995,
	254, 995,
	255, 995,
	256, 995,
	257, 995,
	258, 995,
	259, 995,
	261, 995,
	263, 995,
	264, 995,
	265, 995,
	266, 995,
	267, 995,
	269, 995,
	271, 995,
	273, 995,
	275, 995,
	276, 995,
	277, 995,
	278, 995,
	279, 995,
	282, 995,
	286, 995,
	287, 995,
	288, 995,
	291, 995,
	292, 995,
	293, 995,
	295, 995,
	297, 995,
	298, 995,
	299, 995,
	300, 995,
	301, 995,
	302, 995,
	303, 995,
	304, 995,
	305, 995,
	306, 995,
	307, 995,
	309, 995,
	310, 995,
	311, 995,
	312, 995,
	313, 995,
	314, 995,
	315, 995,
	316, 995,
	317, 995,
	319, 995,
	321, 995,
	322, 995,
	323, 995,
	324, 995,
	325, 995,
	326, 995,
	327, 995,
	328, 995,
	329, 995,
	330, 995,
	337, 995,
	339, 995,
	340, 995,
	341, 995,
	342, 995,
	343, 995,
	344, 995,
	345, 995,
	346, 995,
	348, 995,
	350, 995,
	351, 995,
	352, 995,
	353, 995,
	354, 995,
	355, 995,
	357, 995,
	358, 995,
	359, 995,
	360, 995,
	361, 995,
	362, 995,
	363, 995,
	364, 995,
	366, 995,
	367, 995,
	368, 995,
	369, 995,
	370, 995,
	371, 995,
	373, 995,
	374, 995,
	375, 995,
	376, 995,
	377, 995,
	379, 995,
	380, 995,
	381, 995,
	383, 995,
	385, 995,
	386, 995,
	387, 995,
	388, 995,
	389, 995,
	390, 995,
	391, 995,
	392, 995,
	393, 995,
	394, 995,
	395, 995,
	396, 995,
	397, 995,
	399, 995,
	400, 995,
	402, 995,
	404, 995,
	405, 995,
	406, 995,
	407, 995,
	408, 995,
	409, 995,
	410, 995,
	412, 995,
	413, 995,
	414, 995,
	415, 995,
	416, 995,
	418, 995,
	420, 995,
	421, 995,
	422, 995,
	423, 995,
	424, 995,
	426, 995,
	427, 995,
	428, 995,
	430, 995,
	431, 995,
	434, 995,
	435, 995,
	436, 995,
	437, 995,
	438, 995,
	439, 995,
	440, 995,
	442, 995,
	445, 995,
	446, 995,
	447, 995,
	448, 995,
	449, 995,
	450, 995,
	452, 995,
	453, 995,
	454, 995,
	459, 995,
	460, 995,
	461, 995,
	462, 995,
	463, 995,
	464, 995,
	-2, 0,
	-1, 771,
	323, 685,
	371, 685,
	-2, 0,
	-1, 772,
	323, 684,
	371, 684,
	-2, 632,
	-1, 776,
	1, 714,
	487, 714,
	489, 714,
	491, 714,
	-2, 0,
	-1, 777,
	1, 756,
	161, 756,
	487, 756,
	489, 756,
	491, 756,
	-2, 0,
	-1, 785,
	1, 688,
	487, 688,
	489, 688,
	491, 688,
	-2, 0,
	-1, 788,
	1, 714,
	487, 714,
	489, 714,
	491, 714,
	-2, 0,
	-1, 789,
	1, 716,
	487, 716,
	489, 716,
	491, 716,
	-2, 0,
	-1, 790,
	1, 719,
	487, 719,
	489, 719,
	491, 719,
	-2, 0,
	-1, 795,
	1, 735,
	487, 735,
	489, 735,
	491, 735,
	-2, 0,
	-1, 796,
	1, 737,
	487, 737,
	489, 737,
	491, 737,
	-2, 0,
	-1, 841,
	148, 1184,
	161, 1184,
	238, 1184,
	280, 1184,
	-2, 1122,
	-1, 855,
	148, 1183,
	161, 1183,
	238, 1183,
	280, 1183,
	-2, 1119,
	-1, 881,
	490, 1828,
	-2, 550,
	-1, 909,
	5, 1820,
	488, 1818,
	-2, 1809,
	-1, 917,
	5, 1841,
	488, 1838,
	-2, 1829,
	-1, 918,
	5, 1842,
	488, 1839,
	-2, 1830,
	-1, 926,
	490, 1826,
	-2, 1808,
	-1, 927,
	488, 2164,
	-2, 1827,
	-1, 950,
	488, 2163,
	-2, 1843,
	-1, 951,
	5, 1348,
	-2, 2134,
	-1, 952,
	5, 1349,
	-2, 2135,
	-1, 953,
	5, 1350,
	-2, 2149,
	-1, 954,
	5, 1351,
	-2, 2114,
	-1, 955,
	5, 1352,
	-2, 2147,
	-1, 956,
	5, 1360,
	-2, 2126,
	-1, 957,
	5, 1347,
	-2, 2122,
	-1, 958,
	5, 1347,
	-2, 2121,
	-1, 959,
	5, 1347,
	-2, 2140,
	-1, 960,
	5, 1358,
	-2, 2116,
	-1, 961,
	5, 1363,
	-2, 2115,
	-1, 962,
	5, 1365,
	-2, 2159,
	-1, 965,
	5, 1387,
	-2, 2152,
	-1, 966,
	5, 1379,
	-2, 2153,
	-1, 967,
	5, 1387,
	-2, 2154,
	-1, 968,
	5, 1383,
	-2, 2155,
	-1, 969,
	5, 1334,
	-2, 2127,
	-1, 970,
	5, 1335,
	-2, 2128,
	-1, 997,
	5, 1370,
	-2, 2160,
	-1, 998,
	5, 1371,
	-2, 2150,
	-1, 999,
	5, 1372,
	453, 1372,
	-2, 2117,
	-1, 1000,
	5, 1373,
	453, 1373,
	-2, 2118,
	-1, 1037,
	488, 1838,
	-2, 1829,
	-1, 1038,
	488, 1839,
	-2, 1830,
	-1, 1067,
	164, 2086,
	417, 2086,
	471, 2086,
	490, 2086,
	-2, 0,
	-1, 1070,
	1, 528,
	491, 528,
	-2, 1057,
	-1, 1195,
	339, 1804,
	481, 1804,
	-2, 1802,
	-1, 1207,
	492, 1804,
	-2, 1805,
	-1, 1211,
	1, 971,
	487, 971,
	489, 971,
	491, 971,
	-2, 1171,
	-1, 1259,
	329, 795,
	452, 795,
	-2, 275,
	-1, 1282,
	1, 971,
	487, 971,
	489, 971,
	491, 971,
	-2, 1171,
	-1, 1288,
	4, 995,
	21, 995,
	22, 995,
	23, 995,
	24, 995,
	25, 995,
	26, 995,
	28, 995,
	29, 995,
	35, 995,
	40, 995,
	41, 995,
	42, 995,
	43, 995,
	44, 995,
	45, 995,
	46, 995,
	47, 995,
	48, 995,
	50, 995,
	51, 995,
	52, 995,
	54, 995,
	55, 995,
	56, 995,
	57, 995,
	58, 995,
	62, 995,
	63, 995,
	64, 995,
	65, 995,
	67, 995,
	68, 995,
	69, 995,
	73, 995,
	74, 995,
	75, 995,
	76, 995,
	77, 995,
	78, 995,
	79, 995,
	82, 995,
	83, 995,
	84, 995,
	85, 995,
	87, 995,
	89, 995,
	90, 995,
	91, 995,
	93, 995,
	95, 995,
	96, 995,
	104, 995,
	105, 995,
	106, 995,
	107, 995,
	109, 995,
	110, 995,
	111, 995,
	113, 995,
	114, 995,
	115, 995,
	117, 995,
	118, 995,
	120, 995,
	123, 995,
	124, 995,
	125, 995,
	127, 995,
	129, 995,
	130, 995,
	132, 995,
	133, 995,
	134, 995,
	135, 995,
	136, 995,
	137, 995,
	138, 995,
	139, 995,
	140, 995,
	141, 995,
	142, 995,
	143, 995,
	144, 995,
	145, 995,
	153, 995,
	154, 995,
	155, 995,
	156, 995,
	160, 995,
	162, 995,
	166, 995,
	167, 995,
	168, 995,
	169, 995,
	170, 995,
	171, 995,
	173, 995,
	174, 995,
	176, 995,
	177, 995,
	179, 995,
	180, 995,
	181, 995,
	182, 995,
	183, 995,
	184, 995,
	185, 995,
	186, 995,
	187, 995,
	189, 995,
	190, 995,
	192, 995,
	193, 995,
	194, 995,
	195, 995,
	200, 995,
	201, 995,
	202, 995,
	205, 995,
	206, 995,
	207, 995,
	209, 995,
	211, 995,
	213, 995,
	215, 995,
	216, 995,
	217, 995,
	219, 995,
	223, 995,
	224, 995,
	225, 995,
	226, 995,
	227, 995,
	229, 995,
	230, 995,
	232, 995,
	233, 995,
	235, 995,
	236, 995,
	239, 995,
	240, 995,
	241, 995,
	244, 995,
	245, 995,
	246, 995,
	247, 995,
	249, 995,
	250, 995,
	251, 995,
	252, 995,
	253, 995,
	254, 995,
	255, 995,
	256, 995,
	257, 995,
	258, 995,
	259, 995,
	261, 995,
	263, 995,
	264, 995,
	265, 995,
	266, 995,
	267, 995,
	269, 995,
	273, 995,
	275, 995,
	276, 995,
	277, 995,
	278, 995,
	279, 995,
	282, 995,
	284, 995,
	286, 995,
	287, 995,
	288, 995,
	291, 995,
	292, 995,
	293, 995,
	295, 995,
	297, 995,
	298, 995,
	299, 995,
	300, 995,
	301, 995,
	302, 995,
	303, 995,
	304, 995,
	305, 995,
	306, 995,
	307, 995,
	309, 995,
	310, 995,
	311, 995,
	312, 995,
	313, 995,
	314, 995,
	315, 995,
	316, 995,
	317, 995,
	319, 995,
	321, 995,
	322, 995,
	323, 995,
	324, 995,
	325, 995,
	326, 995,
	327, 995,
	328, 995,
	329, 995,
	330, 995,
	337, 995,
	339, 995,
	340, 995,
	341, 995,
	342, 995,
	343, 995,
	344, 995,
	345, 995,
	346, 995,
	348, 995,
	350, 995,
	351, 995,
	352, 995,
	353, 995,
	354, 995,
	355, 995,
	357, 995,
	358, 995,
	359, 995,
	360, 995,
	361, 995,
	362, 995,
	363, 995,
	364, 995,
	366, 995,
	367, 995,
	368, 995,
	369, 995,
	370, 995,
	371, 995,
	373, 995,
	374, 995,
	375, 995,
	376, 995,
	377, 995,
	379, 995,
	380, 995,
	381, 995,
	383, 995,
	385, 995,
	386, 995,
	387, 995,
	388, 995,
	389, 995,
	390, 995,
	391, 995,
	392, 995,
	393, 995,
	394, 995,
	395, 995,
	396, 995,
	397, 995,
	399, 995,
	400, 995,
	402, 995,
	404, 995,
	405, 995,
	406, 995,
	407, 995,
	408, 995,
	409, 995,
	410, 995,
	412, 995,
	413, 995,
	414, 995,
	415, 995,
	416, 995,
	418, 995,
	420, 995,
	421, 995,
	422, 995,
	423, 995,
	424, 995,
	426, 995,
	427, 995,
	428, 995,
	430, 995,
	431, 995,
	434, 995,
	435, 995,
	436, 995,
	437, 995,
	438, 995,
	439, 995,
	440, 995,
	442, 995,
	445, 995,
	446, 995,
	447, 995,
	448, 995,
	449, 995,
	450, 995,
	452, 995,
	453, 995,
	454, 995,
	459, 995,
	460, 995,
	461, 995,
	462, 995,
	463, 995,
	464, 995,
	-2, 0,
	-1, 1353,
	1, 403,
	487, 403,
	489, 403,
	491, 403,
	-2, 1142,
	-1, 1356,
	4, 2158,
	11, 2158,
	12, 2158,
	14, 2158,
	15, 2158,
	16, 2158,
	17, 2158,
	18, 2158,
	19, 2158,
	21, 2158,
	22, 2158,
	23, 2158,
	24, 2158,
	25, 2158,
	26, 2158,
	28, 2158,
	29, 2158,
	32, 2158,
	33, 2158,
	35, 2158,
	37, 2158,
	40, 2158,
	41, 2158,
	42, 2158,
	43, 2158,
	44, 2158,
	45, 2158,
	46, 2158,
	47, 2158,
	48, 2158,
	50, 2158,
	51, 2158,
	52, 2158,
	54, 2158,
	55, 2158,
	56, 2158,
	57, 2158,
	58, 2158,
	62, 2158,
	63, 2158,
	64, 2158,
	65, 2158,
	67, 2158,
	68, 2158,
	69, 2158,
	70, 2158,
	73, 2158,
	74, 2158,
	75, 2158,
	76, 2158,
	77, 2158,
	78, 2158,
	79, 2158,
	80, 2158,
	82, 2158,
	83, 2158,
	84, 2158,
	85, 2158,
	87, 2158,
	88, 2158,
	89, 2158,
	90, 2158,
	91, 2158,
	93, 2158,
	94, 2158,
	95, 2158,
	96, 2158,
	104, 2158,
	105, 2158,
	106, 2158,
	107, 2158,
	109, 2158,
	110, 2158,
	111, 2158,
	113, 2158,
	114, 2158,
	115, 2158,
	117, 2158,
	118, 2158,
	120, 2158,
	123, 2158,
	124, 2158,
	125, 2158,
	127, 2158,
	129, 2158,
	130, 2158,
	132, 2158,
	133, 2158,
	134, 2158,
	135, 2158,
	136, 2158,
	137, 2158,
	138, 2158,
	139, 2158,
	140, 2158,
	141, 2158,
	142, 2158,
	143, 2158,
	144, 2158,
	145, 2158,
	149, 2158,
	150, 2158,
	151, 2158,
	152, 2158,
	153, 2158,
	154, 2158,
	155, 2158,
	156, 2158,
	159, 2158,
	160, 2158,
	162, 2158,
	165, 2158,
	166, 2158,
	167, 2158,
	168, 2158,
	169, 2158,
	170, 2158,
	171, 2158,
	173, 2158,
	174, 2158,
	176, 2158,
	177, 2158,
	179, 2158,
	180, 2158,
	181, 2158,
	182, 2158,
	183, 2158,
	184, 2158,
	185, 2158,
	186, 2158,
	187, 2158,
	188, 2158,
	189, 2158,
	190, 2158,
	191, 2158,
	192, 2158,
	193, 2158,
	194, 2158,
	195, 2158,
	197, 2158,
	198, 2158,
	200, 2158,
	201, 2158,
	202, 2158,
	204, 2158,
	205, 2158,
	206, 2158,
	207, 2158,
	209, 2158,
	211, 2158,
	212, 2158,
	213, 2158,
	214, 2158,
	215, 2158,
	216, 2158,
	217, 2158,
	218, 2158,
	219, 2158,
	221, 2158,
	222, 2158,
	223, 2158,
	224, 2158,
	225, 2158,
	226, 2158,
	227, 2158,
	229, 2158,
	230, 2158,
	232, 2158,
	233, 2158,
	234, 2158,
	235, 2158,
	236, 2158,
	237, 2158,
	239, 2158,
	240, 2158,
	241, 2158,
	244, 2158,
	245, 2158,
	246, 2158,
	247, 2158,
	248, 2158,
	249, 2158,
	250, 2158,
	251, 2158,
	252, 2158,
	253, 2158,
	254, 2158,
	255, 2158,
	256, 2158,
	257, 2158,
	258, 2158,
	259, 2158,
	261, 2158,
	262, 2158,
	263, 2158,
	264, 2158,
	265, 2158,
	266, 2158,
	267, 2158,
	269, 2158,
	272, 2158,
	273, 2158,
	275, 2158,
	276, 2158,
	277, 2158,
	278, 2158,
	279, 2158,
	282, 2158,
	286, 2158,
	287, 2158,
	288, 2158,
	289, 2158,
	291, 2158,
	292, 2158,
	293, 2158,
	295, 2158,
	297, 2158,
	298, 2158,
	299, 2158,
	300, 2158,
	301, 2158,
	302, 2158,
	303, 2158,
	304, 2158,
	305, 2158,
	306, 2158,
	307, 2158,
	309, 2158,
	310, 2158,
	311, 2158,
	312, 2158,
	313, 2158,
	314, 2158,
	315, 2158,
	316, 2158,
	317, 2158,
	319, 2158,
	321, 2158,
	322, 2158,
	323, 2158,
	324, 2158,
	325, 2158,
	326, 2158,
	327, 2158,
	328, 2158,
	329, 2158,
	330, 2158,
	337, 2158,
	338, 2158,
	339, 2158,
	340, 2158,
	341, 2158,
	342, 2158,
	343, 2158,
	344, 2158,
	345, 2158,
	346, 2158,
	348, 2158,
	349, 2158,
	350, 2158,
	351, 2158,
	352, 2158,
	353, 2158,
	354, 2158,
	355, 2158,
	356, 2158,
	357, 2158,
	358, 2158,
	359, 2158,
	360, 2158,
	361, 2158,
	362, 2158,
	363, 2158,
	364, 2158,
	366, 2158,
	367, 2158,
	368, 2158,
	369, 2158,
	370, 2158,
	371, 2158,
	373, 2158,
	374, 2158,
	375, 2158,
	376, 2158,
	377, 2158,
	378, 2158,
	379, 2158,
	380, 2158,
	381, 2158,
	383, 2158,
	385, 2158,
	386, 2158,
	387, 2158,
	388, 2158,
	389, 2158,
	390, 2158,
	391, 2158,
	392, 2158,
	393, 2158,
	394, 2158,
	395, 2158,
	396, 2158,
	397, 2158,
	399, 2158,
	400, 2158,
	402, 2158,
	404, 2158,
	405, 2158,
	406, 2158,
	407, 2158,
	408, 2158,
	409, 2158,
	410, 2158,
	412, 2158,
	413, 2158,
	414, 2158,
	415, 2158,
	416, 2158,
	418, 2158,
	420, 2158,
	421, 2158,
	422, 2158,
	423, 2158,
	424, 2158,
	426, 2158,
	427, 2158,
	428, 2158,
	430, 2158,
	431, 2158,
	434, 2158,
	435, 2158,
	436, 2158,
	437, 2158,
	438, 2158,
	439, 2158,
	440, 2158,
	442, 2158,
	445, 2158,
	446, 2158,
	447, 2158,
	448, 2158,
	449, 2158,
	450, 2158,
	452, 2158,
	453, 2158,
	454, 2158,
	459, 2158,
	460, 2158,
	461, 2158,
	462, 2158,
	463, 2158,
	464, 2158,
	465, 2158,
	466, 2158,
	469, 2158,
	470, 2158,
	471, 2158,
	472, 2158,
	473, 2158,
	474, 2158,
	476, 2158,
	477, 2158,
	478, 2158,
	479, 2158,
	480, 2158,
	481, 2158,
	482, 2158,
	483, 2158,
	484, 2158,
	486, 2158,
	489, 2158,
	490, 2158,
	492, 2158,
	493, 2158,
	-2, 0,
	-1, 1361,
	164, 2057,
	417, 2057,
	471, 2057,
	490, 2057,
	-2, 0,
	-1, 1393,
	323, 685,
	371, 685,
	-2, 0,
	-1, 1417,
	1, 680,
	487, 680,
	489, 680,
	491, 680,
	-2, 0,
	-1, 1418,
	1, 705,
	487, 705,
	489, 705,
	491, 705,
	-2, 0,
	-1, 1419,
	1, 687,
	487, 687,
	489, 687,
	491, 687,
	-2, 0,
	-1, 1421,
	1, 691,
	487, 691,
	489, 691,
	491, 691,
	-2, 0,
	-1, 1448,
	1, 2106,
	487, 2106,
	489, 2106,
	490, 2106,
	491, 2106,
	-2, 733,
	-1, 1449,
	1, 2054,
	487, 2054,
	489, 2054,
	490, 2054,
	491, 2054,
	-2, 734,
	-1, 1464,
	1, 1052,
	491, 1052,
	-2, 1057,
	-1, 1467,
	148, 1183,
	161, 1183,
	238, 1183,
	280, 1183,
	-2, 1123,
	-1, 1562,
	131, 1144,
	148, 1144,
	161, 1144,
	208, 1144,
	238, 1144,
	280, 1144,
	290, 1144,
	432, 1144,
	-2, 1548,
	-1, 1622,
	489, 1698,
	-2, 0,
	-1, 1657,
	131, 1144,
	148, 1144,
	161, 1144,
	208, 1144,
	238, 1144,
	280, 1144,
	290, 1144,
	432, 1144,
	-2, 1264,
	-1, 1704,
	488, 1375,
	-2, 1363,
	-1, 1737,
	1, 530,
	491, 530,
	-2, 1057,
	-1, 1950,
	1, 682,
	487, 682,
	489, 682,
	491, 682,
	-2, 0,
	-1, 1951,
	1, 707,
	487, 707,
	489, 707,
	491, 707,
	-2, 0,
	-1, 2023,
	354, 1210,
	355, 1210,
	-2, 1408,
	-1, 2054,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1428,
	-1, 2055,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1429,
	-1, 2056,
	88, 0,
	221, 0,
	222, 0,
	473, 0,
	474, 0,
	-2, 1430,
	-1, 2057,
	88, 0,
	221, 0,
	222, 0,
	473, 0,
	474, 0,
	-2, 1431,
	-1, 2058,
	88, 0,
	221, 0,
	222, 0,
	473, 0,
	474, 0,
	-2, 1432,
	-1, 2059,
	88, 0,
	221, 0,
	222, 0,
	473, 0,
	474, 0,
	-2, 1433,
	-1, 2060,
	88, 0,
	221, 0,
	222, 0,
	473, 0,
	474, 0,
	-2, 1434,
	-1, 2061,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1435,
	-1, 2073,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1447,
	-1, 2074,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1448,
	-1, 2075,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1449,
	-1, 2078,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1454,
	-1, 2084,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1458,
	-1, 2086,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1466,
	-1, 2087,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1467,
	-1, 2088,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1468,
	-1, 2089,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1469,
	-1, 2201,
	5, 1841,
	164, 1709,
	488, 1838,
	-2, 1829,
	-1, 2202,
	164, 1710,
	-2, 2110,
	-1, 2203,
	164, 1711,
	-2, 1981,
	-1, 2204,
	164, 1712,
	-2, 1899,
	-1, 2205,
	164, 1713,
	-2, 1938,
	-1, 2206,
	164, 1714,
	-2, 1976,
	-1, 2207,
	164, 1715,
	-2, 2052,
	-1, 2208,
	164, 1716,
	-2, 1531,
	-1, 2277,
	1, 1265,
	2, 1265,
	94, 1265,
	131, 1265,
	148, 1265,
	161, 1265,
	165, 1265,
	175, 1265,
	178, 1265,
	204, 1265,
	208, 1265,
	218, 1265,
	234, 1265,
	238, 1265,
	262, 1265,
	280, 1265,
	284, 1265,
	290, 1265,
	347, 1265,
	349, 1265,
	432, 1265,
	443, 1265,
	456, 1265,
	457, 1265,
	458, 1265,
	467, 1265,
	487, 1265,
	489, 1265,
	491, 1265,
	493, 1265,
	-2, 1264,
	-1, 2290,
	488, 1810,
	-2, 1824,
	-1, 2314,
	488, 1374,
	-2, 1364,
	-1, 2426,
	1, 971,
	487, 971,
	489, 971,
	491, 971,
	-2, 1171,
	-1, 2582,
	285, 1213,
	-2, 2148,
	-1, 2583,
	285, 1214,
	-2, 2041,
	-1, 2587,
	354, 1775,
	355, 1775,
	-2, 1529,
	-1, 2588,
	354, 1779,
	355, 1779,
	-2, 1530,
	-1, 2589,
	354, 1776,
	355, 1776,
	-2, 1529,
	-1, 2590,
	354, 1780,
	355, 1780,
	-2, 1530,
	-1, 2603,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1456,
	-1, 2604,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1460,
	-1, 2610,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1462,
	-1, 2807,
	215, 1057,
	319, 1057,
	327, 1057,
	467, 1057,
	-2, 527,
	-1, 2922,
	1, 971,
	487, 971,
	489, 971,
	491, 971,
	-2, 1171,
	-1, 3013,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1464,
	-1, 3020,
	212, 0,
	214, 0,
	272, 0,
	-2, 1483,
	-1, 3087,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1512,
	-1, 3088,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1513,
	-1, 3089,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1514,
	-1, 3093,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1518,
	-1, 3094,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1519,
	-1, 3095,
	14, 0,
	15, 0,
	16, 0,
	469, 0,
	470, 0,
	471, 0,
	-2, 1520,
	-1, 3141,
	488, 1811,
	-2, 1825,
	-1, 3248,
	490, 2264,
	-2, 1101,
	-1, 3299,
	212, 0,
	214, 0,
	272, 0,
	-2, 1484,
	-1, 3302,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1487,
	-1, 3303,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1489,
	-1, 3490,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1488,
	-1, 3491,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 1490,
	-1, 3502,
	212, 0,
	-2, 1521,
	-1, 3641,
	212, 0,
	-2, 1522,
	-1, 3781,
	47, 0,
	188, 0,
	237, 0,
	378, 0,
	465, 0,
	472, 0,
	-2, 2113,
}

const sqlPrivate = 57344

const sqlLast = 92367

var sqlAct = [...]int{

	227, 3571, 3780, 3533, 3536, 3791, 3681, 3663, 3163, 3882,
	3282, 3745, 3756, 3727, 3422, 2737, 2908, 3742, 3792, 3521,
	3793, 3835, 1924, 2480, 3578, 1041, 3052, 3453, 3645, 2738,
	3448, 2033, 2346, 1230, 3240, 3779, 1348, 882, 3479, 2824,
	3587, 3435, 865, 3414, 1837, 1347, 3198, 1911, 3609, 3366,
	2937, 2101, 1691, 1476, 920, 856, 3458, 2904, 1788, 3219,
	1214, 2930, 3005, 3507, 1099, 3164, 2034, 2932, 625, 2596,
	2469, 592, 2452, 2517, 2780, 2041, 2760, 1192, 2233, 2443,
	1030, 2720, 2752, 1900, 4, 2515, 3281, 2405, 625, 864,
	151, 3338, 1692, 2508, 2525, 36, 2464, 717, 2514, 2506,
	2481, 2466, 1632, 2741, 1833, 1797, 2743, 2455, 2270, 1832,
	2719, 2348, 2038, 3646, 3112, 1608, 1570, 963, 2114, 1200,
	1663, 2143, 1909, 2524, 2427, 1820, 1401, 1275, 2417, 1829,
	1773, 2382, 1813, 2453, 2580, 913, 2272, 1633, 1083, 1775,
	2786, 3572, 2269, 2098, 1464, 2251, 2230, 2134, 1328, 1763,
	2022, 2003, 2005, 909, 1369, 1652, 1021, 1354, 1344, 2906,
	2474, 1338, 1866, 918, 1280, 1072, 221, 711, 2338, 626,
	1836, 1197, 151, 627, 2518, 560, 1603, 2137, 1024, 2259,
	1642, 2241, 1216, 546, 1477, 2145, 1003, 568, 2197, 1554,
	1478, 93, 576, 2115, 220, 1038, 2187, 159, 2004, 1368,
	621, 2006, 1865, 586, 693, 160, 668, 1227, 1352, 2027,
	1787, 2383, 894, 563, 41, 40, 38, 29, 1001, 27,
	25, 1483, 766, 783, 2631, 1463, 1026, 571, 3126, 2627,
	3127, 1886, 2739, 860, 630, 3934, 1491, 1492, 1902, 2250,
	1303, 1902, 1902, 1902, 3921, 3920, 1649, 3898, 2250, 2250,
	860, 3382, 3896, 3892, 630, 66, 3382, 1842, 1522, 3818,
	1080, 2947, 633, 3819, 1020, 1494, 3815, 2595, 3813, 2946,
	2250, 67, 2250, 3810, 3807, 3802, 3777, 3811, 3808, 1842,
	1842, 3776, 633, 3775, 71, 1842, 3116, 1917, 728, 2692,
	2693, 911, 3771, 3770, 3765, 1493, 1917, 1917, 3382, 3763,
	3740, 1018, 3721, 3382, 3382, 1513, 2305, 3714, 3713, 2692,
	2693, 2250, 2250, 1510, 3708, 2250, 3707, 3701, 3382, 76,
	3382, 1842, 3643, 1004, 1004, 3623, 2305, 3620, 3580, 1842,
	3553, 3382, 3581, 3552, 1842, 3544, 3543, 1842, 3513, 1842,
	3382, 3492, 1842, 3477, 3722, 2305, 3466, 1917, 1036, 842,
	2962, 2401, 81, 861, 2805, 3295, 3409, 841, 2707, 2243,
	2250, 3400, 1420, 92, 3638, 2250, 3381, 3301, 82, 89,
	3382, 2305, 3626, 1052, 1516, 1517, 1518, 1519, 3256, 3250,
	3116, 850, 2978, 2978, 1499, 855, 3217, 3136, 2242, 916,
	3218, 3137, 219, 3134, 3119, 3036, 3032, 3135, 2250, 1842,
	2250, 2977, 1080, 2969, 2736, 2978, 1005, 2970, 2250, 2731,
	2730, 2683, 2681, 2250, 2250, 2684, 2682, 83, 3447, 2301,
	2673, 2671, 1521, 1523, 2674, 2250, 2642, 2640, 1932, 1917,
	2250, 2504, 3401, 2641, 2503, 1920, 2250, 2698, 1920, 2429,
	2322, 2304, 1842, 1917, 2250, 2305, 1508, 1509, 2299, 1053,
	2970, 2293, 2250, 2630, 1842, 1842, 2249, 2698, 1491, 1492,
	2250, 1524, 1525, 1526, 1534, 1535, 1536, 2140, 1919, 1007,
	2396, 1008, 1920, 1514, 1792, 2337, 1743, 1057, 1901, 2962,
	1522, 2449, 1841, 2413, 192, 2335, 1628, 1494, 1226, 3192,
	3008, 2986, 1650, 1823, 1540, 2948, 2286, 2285, 1248, 1242,
	2284, 2283, 1403, 2282, 1009, 192, 1006, 849, 848, 847,
	1491, 1492, 846, 2303, 2949, 3798, 845, 1493, 844, 840,
	839, 838, 194, 837, 836, 1903, 2708, 1513, 1903, 1903,
	1903, 835, 1522, 84, 2560, 1510, 834, 833, 832, 1494,
	2141, 831, 830, 194, 829, 828, 2708, 827, 826, 825,
	764, 763, 762, 761, 760, 759, 758, 757, 2369, 756,
	755, 754, 753, 1520, 1491, 1492, 752, 193, 751, 1493,
	158, 87, 750, 88, 749, 748, 747, 186, 746, 1513,
	745, 1515, 744, 743, 1033, 187, 1522, 1510, 193, 742,
	2946, 918, 192, 1494, 741, 918, 1516, 1517, 1518, 1519,
	716, 740, 739, 738, 126, 737, 1499, 161, 726, 725,
	1102, 684, 2142, 2139, 1102, 645, 644, 1219, 636, 635,
	634, 1219, 606, 1493, 598, 597, 596, 580, 161, 3017,
	194, 3354, 1076, 1082, 2709, 1531, 215, 1087, 1541, 918,
	214, 918, 213, 918, 1521, 1523, 212, 211, 1516, 1517,
	1518, 1519, 210, 127, 2709, 209, 208, 207, 1499, 206,
	205, 1208, 1203, 204, 203, 202, 201, 162, 1508, 1509,
	1219, 1561, 200, 2494, 2170, 193, 1915, 1901, 1998, 199,
	1247, 1241, 198, 1053, 1529, 186, 3778, 197, 2242, 196,
	195, 192, 3313, 187, 3147, 1514, 1521, 1523, 1511, 1507,
	3130, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501,
	1219, 2979, 1499, 2783, 1219, 161, 1285, 1287, 1219, 2653,
	1508, 1509, 2144, 918, 2636, 192, 869, 2433, 1219, 194,
	1561, 918, 1070, 2734, 2309, 1235, 1611, 1240, 2460, 1246,
	2291, 1236, 1610, 1653, 863, 2276, 1771, 1514, 2156, 2154,
	1521, 1523, 1927, 2735, 2703, 2701, 2702, 2694, 2695, 2696,
	2697, 2699, 2700, 194, 1614, 1095, 1490, 1189, 1194, 1676,
	2477, 1219, 1581, 1232, 193, 1222, 2702, 2694, 2695, 2696,
	2697, 2699, 2700, 1089, 186, 1520, 1040, 918, 3688, 1065,
	3635, 3506, 187, 2692, 2693, 630, 3467, 3629, 1229, 1357,
	1359, 1514, 1228, 1515, 151, 151, 1053, 1611, 193, 3531,
	3627, 1491, 1492, 1610, 161, 1422, 3446, 3359, 186, 1367,
	3336, 2138, 3335, 633, 1926, 1532, 187, 1372, 3329, 3328,
	3327, 1373, 1572, 1522, 3320, 1609, 3223, 1520, 2692, 2693,
	1494, 3462, 3319, 915, 3317, 1290, 2318, 1579, 161, 1877,
	3312, 2692, 2693, 1332, 1335, 1515, 1076, 3309, 3308, 1076,
	3216, 192, 192, 82, 3151, 3150, 2692, 2693, 3149, 3140,
	1493, 918, 918, 918, 918, 918, 918, 918, 3107, 1341,
	1513, 1421, 3190, 3106, 3105, 3028, 3024, 2973, 1510, 2778,
	2727, 2718, 2691, 2688, 2687, 2685, 1355, 1468, 2680, 194,
	194, 2679, 918, 2678, 2675, 861, 2672, 2652, 918, 1515,
	2635, 2628, 1530, 2505, 2277, 1430, 1505, 1506, 1512, 1533,
	1511, 1507, 2127, 1504, 1502, 1503, 1495, 1496, 1497, 1498,
	1500, 1501, 1490, 1572, 2462, 1847, 1017, 1489, 1845, 3929,
	3891, 2698, 3890, 3828, 193, 193, 3826, 3817, 1306, 1516,
	1517, 1518, 1519, 1042, 186, 186, 3054, 3680, 3673, 1499,
	1491, 1492, 187, 187, 1573, 1462, 1571, 3670, 3669, 3668,
	3662, 2732, 1511, 1507, 3655, 1504, 1502, 1503, 1495, 1496,
	1497, 1498, 1500, 1501, 161, 161, 2698, 2307, 3624, 1494,
	1378, 3608, 3607, 2104, 3595, 3592, 1394, 1521, 1523, 2698,
	3549, 2692, 2693, 3527, 1195, 3504, 3487, 1207, 1210, 3486,
	3474, 918, 918, 918, 2698, 3473, 3439, 918, 3353, 1493,
	1560, 1508, 1509, 192, 1038, 3334, 1038, 3271, 3268, 3181,
	1630, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 1032, 3180,
	1465, 1102, 3222, 3167, 3166, 3461, 3122, 3110, 1514, 918,
	3019, 1558, 625, 2980, 2963, 1473, 1709, 625, 1472, 2923,
	2872, 194, 842, 1210, 1210, 918, 1467, 2110, 2851, 1219,
	841, 192, 2827, 2826, 1469, 2708, 1679, 2800, 2798, 2657,
	1486, 1487, 2656, 1613, 918, 2651, 1688, 192, 2708, 2619,
	1102, 1732, 2442, 861, 1684, 1639, 1617, 2461, 1616, 126,
	1615, 1210, 1612, 2708, 192, 1604, 193, 192, 1499, 194,
	1703, 1602, 1076, 2316, 1636, 1637, 186, 151, 2315, 2288,
	2281, 2248, 2152, 1667, 187, 194, 1769, 1686, 1675, 1740,
	1491, 1492, 1660, 1631, 1734, 1605, 1606, 1626, 1520, 1004,
	1625, 1624, 194, 1735, 1623, 194, 2476, 1622, 1928, 2698,
	1621, 3647, 2775, 1620, 193, 1619, 1515, 1618, 1599, 1494,
	3442, 2169, 1598, 1597, 186, 1596, 1595, 1594, 1593, 1592,
	193, 1591, 187, 1706, 1590, 1589, 2827, 1036, 1588, 1036,
	186, 1682, 1661, 2709, 1587, 1586, 1585, 193, 187, 1493,
	193, 1574, 1559, 1557, 161, 1552, 2709, 186, 1064, 1683,
	186, 1055, 1048, 3355, 1658, 187, 3305, 3146, 187, 3516,
	161, 2709, 1737, 3133, 3125, 1680, 2639, 861, 630, 2279,
	3357, 1629, 3145, 630, 1573, 1219, 1219, 161, 3888, 2796,
	161, 1555, 1671, 1102, 1086, 2155, 2153, 1781, 2692, 2693,
	3881, 1762, 1670, 1669, 1668, 1666, 633, 1665, 1664, 892,
	1655, 633, 1687, 3403, 1762, 3671, 1810, 1731, 3630, 1812,
	2933, 1838, 1817, 2696, 2697, 2699, 2700, 1689, 1651, 3583,
	3582, 3628, 1080, 1511, 1507, 1762, 1504, 1502, 1503, 1495,
	1496, 1497, 1498, 1500, 1501, 3465, 3402, 3128, 1085, 1594,
	2854, 1765, 1594, 1760, 1755, 3530, 2965, 2964, 1084, 3588,
	1878, 2387, 1653, 2703, 2701, 2702, 2694, 2695, 2696, 2697,
	2699, 2700, 1393, 2677, 1460, 2676, 3226, 2701, 2702, 2694,
	2695, 2696, 2697, 2699, 2700, 1080, 1796, 1611, 2601, 2371,
	1580, 1738, 1081, 1610, 2694, 2695, 2696, 2697, 2699, 2700,
	3179, 2910, 1925, 2909, 823, 1821, 1583, 1697, 1080, 3579,
	1402, 3803, 3790, 1403, 1834, 3195, 3183, 1870, 2984, 1219,
	3508, 1219, 2739, 1219, 3056, 2645, 2135, 3799, 2314, 1627,
	1607, 1219, 1749, 2902, 1219, 2410, 1874, 1263, 1431, 3812,
	1839, 3378, 1792, 1077, 824, 3809, 2942, 1219, 1219, 1219,
	3158, 3664, 1875, 630, 3851, 1883, 1229, 2407, 3449, 3739,
	1228, 3652, 2830, 3174, 1382, 2512, 2473, 625, 1942, 2895,
	3374, 3852, 3700, 1033, 1816, 1033, 1905, 3000, 1261, 1907,
	2809, 633, 1016, 3208, 3569, 1912, 3800, 3392, 1914, 1251,
	1497, 1498, 1500, 1501, 1840, 2323, 1071, 2308, 821, 1207,
	1984, 2341, 1891, 3926, 1034, 3562, 2341, 3555, 3204, 2013,
	1880, 3203, 3197, 819, 3194, 2339, 3375, 817, 3193, 3155,
	2339, 815, 1946, 1930, 3154, 1857, 1856, 2811, 2216, 2694,
	2695, 2696, 2697, 2699, 2700, 812, 2650, 2649, 3207, 1982,
	918, 2648, 918, 2647, 2605, 806, 2412, 1078, 1262, 918,
	2011, 2403, 1709, 1709, 1102, 1079, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 918, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 918, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 918, 918, 918, 918, 918,
	918, 2015, 918, 1889, 918, 918, 918, 918, 1885, 1931,
	1429, 1355, 2002, 1355, 1077, 1997, 1703, 1703, 1936, 1750,
	861, 1086, 861, 1893, 1894, 2395, 918, 2797, 680, 918,
	918, 2394, 1306, 1380, 1888, 1065, 1888, 1921, 918, 1922,
	1933, 2374, 918, 630, 918, 918, 2350, 1935, 3699, 2300,
	2085, 1428, 1102, 877, 2039, 2040, 1466, 1086, 918, 918,
	918, 918, 1225, 918, 918, 918, 918, 918, 918, 918,
	918, 633, 2012, 1501, 1792, 1085, 2183, 1964, 2182, 1706,
	1706, 2043, 2470, 2853, 3370, 1296, 3485, 1295, 3371, 918,
	918, 918, 918, 918, 918, 918, 918, 918, 1294, 2373,
	1293, 2026, 918, 2985, 1995, 1080, 2362, 2116, 2117, 1996,
	1992, 1085, 3161, 1940, 1038, 681, 809, 1317, 1078, 1077,
	1257, 1102, 2116, 2132, 2330, 1270, 1079, 1789, 2100, 1999,
	1038, 2014, 3373, 2010, 2100, 2007, 1375, 2001, 1427, 2292,
	2000, 1439, 1873, 2353, 1855, 3376, 918, 1102, 2178, 2578,
	3768, 842, 2593, 1785, 842, 842, 2361, 1890, 2991, 2030,
	2131, 2391, 2031, 2032, 2135, 2990, 2557, 2200, 2200, 2214,
	1950, 2116, 2418, 2096, 2234, 2236, 1790, 1791, 1395, 1417,
	2240, 2700, 2384, 2385, 2144, 2108, 2692, 2693, 1954, 2710,
	2711, 2712, 2106, 1491, 1492, 2384, 2385, 1994, 2094, 1391,
	3851, 1207, 3404, 3170, 1786, 1754, 1753, 3297, 2264, 1762,
	1764, 1471, 1219, 2112, 2140, 859, 2384, 2385, 1951, 861,
	2256, 2409, 1494, 1078, 2289, 1949, 3796, 1418, 3876, 861,
	1063, 1079, 1957, 861, 2411, 1004, 1660, 2129, 2585, 2586,
	1376, 3865, 1102, 1798, 2808, 2302, 1459, 3372, 3042, 1671,
	151, 2408, 1493, 1697, 1697, 2707, 3182, 1076, 2255, 2592,
	2180, 2340, 1802, 1281, 3864, 2181, 1080, 1036, 2184, 1709,
	2185, 2186, 1740, 2406, 2278, 2263, 1403, 2268, 2209, 3538,
	2274, 2275, 3379, 1036, 2196, 2238, 2225, 2141, 2246, 2247,
	3484, 2298, 858, 1783, 1102, 2257, 2261, 2262, 2352, 3885,
	1279, 735, 3901, 2372, 1403, 3840, 1219, 3877, 1658, 1613,
	1799, 2090, 3287, 1757, 1991, 1381, 918, 3388, 918, 1443,
	3043, 861, 2091, 1703, 2420, 1958, 2092, 813, 1983, 1819,
	2097, 1776, 2342, 1426, 2698, 2013, 1777, 1032, 3286, 1032,
	2404, 1499, 813, 2321, 2419, 2421, 813, 683, 682, 1818,
	814, 2310, 1776, 2368, 3045, 2317, 2392, 1777, 801, 2142,
	2139, 2377, 1259, 3797, 813, 1605, 1606, 1981, 2446, 2616,
	2939, 1080, 2376, 1641, 860, 1814, 2011, 2082, 2324, 2320,
	3540, 854, 2400, 678, 2424, 677, 1706, 2713, 1219, 1219,
	3913, 1219, 2865, 2484, 2614, 2859, 3879, 1902, 1790, 1791,
	1803, 1993, 1809, 1219, 558, 2386, 2388, 2389, 2390, 1045,
	1759, 2364, 2435, 2351, 2437, 1316, 2355, 2358, 1256, 2940,
	1783, 2345, 2375, 2708, 2528, 2500, 1815, 2531, 2532, 553,
	2144, 2497, 2526, 1778, 3665, 2393, 2537, 2538, 2539, 2009,
	3795, 604, 1758, 1043, 1645, 1794, 1792, 1780, 1281, 918,
	2810, 3171, 2475, 2563, 1778, 2475, 2875, 710, 1804, 1805,
	802, 1600, 3431, 2493, 2144, 2547, 3839, 2548, 1780, 2144,
	1800, 2794, 1783, 3283, 2501, 3386, 2545, 2093, 630, 151,
	2430, 1229, 2939, 1648, 3481, 2431, 2095, 2607, 2012, 918,
	1379, 2440, 801, 2099, 2511, 918, 918, 1643, 2326, 2486,
	2450, 3497, 2126, 1033, 1801, 3883, 633, 2611, 3861, 1782,
	2568, 2328, 2570, 1646, 2468, 854, 857, 810, 2080, 1033,
	2479, 2083, 2612, 2490, 2425, 2491, 2617, 2492, 1438, 1956,
	1782, 2709, 1440, 1776, 603, 3750, 1046, 1377, 1777, 2329,
	2841, 1644, 2107, 2555, 3878, 2498, 2566, 3718, 2502, 2010,
	918, 918, 2542, 3679, 2327, 2496, 918, 2529, 2513, 1551,
	1697, 1953, 2549, 2754, 2551, 2655, 2553, 2079, 2138, 918,
	918, 1390, 1392, 1355, 2530, 918, 918, 2533, 3821, 2534,
	2260, 918, 2561, 1470, 3539, 3822, 3884, 3902, 2840, 2273,
	918, 918, 918, 1806, 802, 860, 918, 3480, 1948, 2544,
	3387, 736, 1062, 2843, 3058, 2608, 918, 2341, 2550, 3441,
	2552, 1783, 2554, 3277, 3886, 803, 1405, 3682, 3142, 3288,
	3838, 2356, 2574, 918, 2575, 2573, 3002, 2584, 1647, 1058,
	2638, 1641, 1783, 3432, 2845, 1778, 1441, 2571, 2026, 2579,
	1645, 2576, 3794, 2629, 2704, 2705, 2706, 2847, 2594, 1780,
	2565, 2703, 2701, 2702, 2694, 2695, 2696, 2697, 2699, 2700,
	1807, 1495, 1496, 1497, 1498, 1500, 1501, 3850, 2814, 2633,
	2634, 1195, 2562, 2613, 2637, 3848, 3696, 3914, 2023, 1648,
	1766, 1767, 2615, 3594, 1903, 1207, 3221, 3238, 2844, 918,
	918, 918, 2926, 2258, 1864, 3716, 2606, 1638, 918, 918,
	918, 1811, 1645, 918, 1056, 3482, 1442, 1051, 2081, 1646,
	545, 1782, 554, 918, 1038, 1102, 1481, 3284, 1824, 918,
	1480, 918, 2753, 1831, 2029, 3717, 804, 3332, 1793, 1038,
	1751, 3006, 2746, 2747, 3907, 605, 3546, 3545, 602, 3651,
	1044, 1648, 2787, 1034, 3525, 1034, 3239, 1102, 3201, 803,
	2564, 2644, 3157, 2927, 1779, 1643, 2921, 2822, 1748, 1038,
	2818, 1551, 1102, 3391, 2454, 3096, 861, 805, 2768, 555,
	3390, 1646, 2444, 1884, 1876, 1779, 1709, 3820, 1210, 1210,
	1102, 2729, 1869, 1851, 2019, 2785, 3041, 3683, 2378, 1480,
	3111, 3728, 918, 3003, 1988, 1480, 1744, 2748, 3241, 1644,
	3454, 2441, 1475, 3289, 2792, 1319, 918, 556, 3577, 557,
	1479, 3575, 3526, 1783, 2833, 2782, 2829, 1709, 2217, 2828,
	1830, 1207, 2599, 2804, 1647, 1746, 2577, 1941, 3124, 3618,
	1703, 2751, 1419, 918, 2806, 2756, 2750, 2297, 1076, 2781,
	732, 2815, 2816, 2296, 2724, 2725, 2726, 1747, 2812, 1774,
	2740, 2295, 1481, 2357, 2294, 1207, 2758, 1207, 2831, 2774,
	804, 2835, 2448, 1302, 858, 3658, 2832, 1036, 2795, 2837,
	2838, 1703, 2777, 2755, 1102, 3290, 2757, 3610, 2767, 1479,
	3423, 2766, 1036, 1219, 3333, 1479, 1647, 2769, 2770, 3611,
	724, 2856, 2020, 1706, 2762, 1219, 3906, 3534, 1406, 1288,
	2819, 805, 1300, 2772, 1102, 2773, 2789, 2790, 2791, 2823,
	2878, 1289, 1036, 2881, 3097, 3612, 2974, 2889, 2891, 1219,
	2897, 1481, 3098, 2252, 1882, 2880, 2428, 3858, 3389, 3573,
	1219, 2848, 2849, 3523, 1706, 2850, 2379, 2380, 2807, 3471,
	2915, 2876, 2866, 2884, 1038, 2907, 3684, 2813, 734, 1781,
	3731, 2920, 2858, 3736, 3659, 1564, 1779, 1032, 2935, 1569,
	3339, 2873, 3725, 2869, 2870, 2846, 3113, 2871, 2151, 3614,
	3524, 2801, 2802, 1032, 2803, 2763, 1781, 3860, 3814, 2526,
	2852, 1457, 1219, 1219, 3535, 3613, 3672, 2861, 2526, 2862,
	2254, 1455, 2868, 2863, 1827, 2253, 2864, 2722, 2961, 3470,
	2944, 1980, 3615, 3503, 3331, 1683, 2896, 2874, 1821, 2882,
	2721, 2788, 2955, 2887, 3018, 2892, 1821, 2982, 2761, 2898,
	2267, 2686, 3732, 2981, 1435, 2899, 3660, 2618, 2445, 2376,
	2402, 2370, 2319, 1102, 1825, 2928, 1102, 2867, 1433, 1416,
	1414, 1412, 1410, 2765, 2952, 2953, 2954, 2936, 1678, 2918,
	2957, 1408, 2958, 1674, 730, 731, 1458, 1400, 2959, 2960,
	1370, 1398, 1298, 151, 151, 2999, 918, 1697, 1826, 2998,
	2941, 1301, 918, 918, 1475, 2559, 918, 918, 918, 2950,
	918, 2558, 2536, 2008, 2997, 2943, 1990, 2972, 2956, 918,
	1709, 1961, 1733, 1584, 1351, 2976, 1374, 1036, 918, 1274,
	2996, 918, 2150, 1033, 722, 723, 3789, 1102, 1697, 3408,
	1299, 3399, 811, 2934, 3724, 3452, 918, 3413, 1033, 3363,
	2877, 3237, 3231, 2764, 1102, 3206, 3177, 3175, 3156, 2919,
	2911, 2495, 3004, 3836, 1709, 1709, 918, 918, 861, 918,
	918, 918, 3021, 1456, 1703, 2471, 2459, 2987, 1033, 2988,
	2451, 2989, 2993, 1454, 2438, 1918, 733, 918, 3030, 3031,
	1979, 918, 1916, 1709, 1709, 918, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 918, 918, 918, 918, 918,
	918, 918, 918, 918, 3001, 918, 1434, 1913, 1703, 1703,
	3616, 1908, 918, 918, 1709, 3617, 1906, 1904, 1895, 918,
	1432, 1415, 1413, 1411, 1409, 2994, 1848, 1706, 1846, 637,
	918, 1835, 852, 1407, 801, 2581, 3026, 1703, 1703, 1399,
	1822, 1038, 1038, 1397, 1297, 918, 2039, 3061, 3037, 1808,
	2195, 2191, 1795, 1784, 3038, 3378, 1207, 854, 2931, 3053,
	3044, 3046, 3047, 816, 818, 820, 3060, 3601, 1703, 1013,
	1484, 1706, 1706, 2888, 1102, 2039, 3076, 1873, 1831, 1685,
	2597, 3068, 3852, 3129, 3374, 3069, 3759, 3476, 3367, 3469,
	3073, 3100, 1210, 3468, 1014, 3075, 3420, 3108, 853, 2527,
	1706, 1706, 918, 1770, 3365, 1253, 3104, 3109, 2341, 2341,
	3369, 3603, 151, 1792, 2360, 2217, 2217, 918, 918, 3249,
	2189, 3101, 2339, 2359, 1952, 1340, 616, 3048, 1881, 3152,
	3375, 1706, 1978, 1452, 1453, 1977, 802, 2193, 2194, 2192,
	1339, 3758, 918, 918, 1959, 3393, 3415, 3120, 3121, 1396,
	3067, 3117, 3118, 1033, 1491, 1492, 3637, 3340, 3070, 3318,
	3071, 2598, 2381, 918, 1485, 3368, 2363, 1488, 1491, 1492,
	559, 3131, 3854, 3846, 216, 1830, 3200, 1207, 1207, 1741,
	2407, 2415, 2414, 1034, 2397, 2365, 1219, 2399, 1015, 1219,
	3723, 225, 2188, 2190, 1036, 1036, 3199, 1494, 1709, 1034,
	2398, 1697, 3115, 669, 3189, 3191, 3132, 1340, 709, 3176,
	3692, 3178, 3212, 1493, 3202, 3188, 2367, 3689, 542, 1340,
	3184, 3657, 570, 1219, 3570, 3211, 3160, 1493, 3230, 2366,
	918, 3220, 3139, 2478, 2239, 2217, 2217, 2217, 1038, 918,
	1736, 3196, 1690, 638, 639, 1697, 1697, 3227, 3880, 1207,
	3532, 3251, 1703, 2793, 3905, 1219, 1219, 1219, 2692, 2693,
	2376, 1491, 1492, 3205, 2333, 2334, 2331, 2332, 3691, 2484,
	1561, 1219, 1384, 3310, 1697, 1697, 3148, 1102, 1383, 3246,
	3263, 3245, 2146, 3243, 3144, 2333, 2331, 3229, 3370, 3242,
	2823, 803, 3371, 2179, 1437, 3591, 3563, 1436, 3416, 1102,
	3214, 2526, 918, 918, 3412, 1697, 3411, 3275, 918, 918,
	1709, 3306, 3235, 918, 918, 1706, 918, 3143, 3049, 2879,
	918, 1578, 3232, 1577, 3893, 3228, 3866, 3648, 926, 3244,
	3257, 918, 3247, 3559, 3517, 3515, 3373, 3252, 3438, 3356,
	3274, 3253, 3255, 3215, 3213, 3173, 3258, 918, 3168, 3376,
	641, 640, 2951, 3259, 881, 2925, 3264, 3265, 2924, 3266,
	3269, 2541, 3300, 3273, 1703, 3272, 3270, 3291, 3276, 2540,
	2488, 223, 223, 223, 3285, 548, 549, 1032, 564, 548,
	564, 574, 579, 2463, 2439, 595, 3292, 2312, 2311, 2111,
	601, 1036, 1032, 1976, 3304, 1975, 223, 642, 643, 1974,
	851, 1973, 804, 1898, 1897, 1896, 1879, 1038, 1859, 3280,
	1858, 1854, 721, 1853, 1852, 1038, 223, 1850, 1849, 1102,
	1451, 1102, 1032, 1450, 1327, 2109, 1326, 1706, 1038, 1325,
	1033, 1033, 1324, 1323, 1322, 1321, 1320, 1318, 1102, 1313,
	1312, 1564, 1311, 805, 1310, 3330, 3345, 1309, 1269, 1268,
	1100, 3372, 1267, 1266, 1201, 1265, 1264, 918, 1258, 1252,
	1250, 1249, 1093, 1092, 1091, 3384, 1090, 1061, 1060, 996,
	1742, 822, 808, 3537, 3377, 1445, 80, 3360, 3361, 1260,
	656, 75, 1828, 1102, 2883, 3337, 3379, 3172, 1102, 1697,
	151, 3385, 664, 3347, 3344, 2221, 3738, 2839, 3394, 3342,
	3343, 2416, 3352, 1960, 3396, 3397, 3348, 3395, 2781, 1404,
	1962, 2776, 2280, 3341, 3715, 548, 548, 3314, 2654, 3644,
	3496, 3346, 2149, 223, 1582, 3383, 2733, 3417, 1102, 3418,
	3421, 1211, 3362, 1219, 77, 1223, 902, 948, 3430, 3429,
	3364, 3424, 3159, 3419, 2516, 3427, 3351, 3426, 1694, 1696,
	868, 1105, 1752, 908, 1768, 1761, 2313, 2199, 925, 918,
	1036, 1210, 3407, 922, 1698, 1700, 924, 3472, 1036, 923,
	1699, 1601, 921, 1693, 1102, 3410, 3234, 3233, 2447, 2482,
	1305, 1036, 3425, 787, 1282, 1756, 918, 918, 918, 3459,
	2105, 3406, 3443, 3456, 3440, 3475, 2133, 3464, 2643, 3455,
	1575, 1697, 1873, 883, 1102, 3457, 3433, 1032, 904, 918,
	2130, 1054, 918, 918, 893, 3450, 3444, 2759, 2938, 3138,
	3460, 2018, 918, 2217, 2217, 1709, 672, 1033, 2689, 3445,
	918, 918, 1363, 2136, 1047, 2222, 3463, 2215, 3483, 2211,
	2472, 1461, 1223, 1553, 2483, 1102, 1088, 886, 2103, 1566,
	2623, 2028, 3488, 3493, 2945, 2779, 2306, 3755, 1102, 3057,
	1863, 1012, 1011, 1010, 3744, 3741, 918, 3267, 2905, 1745,
	2325, 1543, 2912, 918, 898, 3499, 1206, 3505, 2744, 1703,
	2975, 918, 1271, 1709, 600, 1385, 910, 1542, 2423, 2422,
	918, 3654, 1075, 918, 1074, 3519, 3511, 3512, 1073, 918,
	2821, 3912, 3169, 191, 2591, 1482, 1102, 1474, 188, 3510,
	190, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217,
	2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217, 2217,
	189, 2217, 3434, 3520, 3186, 3558, 3542, 1703, 3541, 3518,
	20, 3576, 1706, 1102, 19, 18, 1219, 3585, 97, 39,
	17, 125, 124, 3568, 3560, 123, 122, 121, 120, 119,
	3514, 3590, 2907, 3556, 918, 918, 114, 118, 3550, 3551,
	117, 116, 3621, 3622, 3574, 3548, 3589, 918, 918, 115,
	3606, 3565, 881, 1034, 113, 3602, 881, 3584, 3564, 112,
	3625, 3566, 3567, 111, 918, 1709, 1033, 110, 1034, 3600,
	1706, 1186, 109, 108, 1033, 1186, 3598, 3605, 3459, 3599,
	3619, 3604, 3597, 107, 106, 105, 104, 1033, 918, 103,
	102, 918, 101, 3632, 100, 99, 98, 591, 1034, 588,
	3596, 55, 54, 3650, 96, 95, 16, 37, 14, 59,
	918, 3661, 3636, 60, 13, 32, 33, 3642, 3667, 1703,
	86, 85, 31, 15, 30, 3633, 3634, 2620, 2621, 3649,
	28, 11, 9, 8, 34, 1662, 12, 5, 156, 155,
	157, 154, 79, 918, 918, 153, 152, 1873, 3678, 1049,
	78, 1677, 3666, 918, 1032, 1032, 918, 26, 1219, 10,
	1210, 3693, 2221, 148, 3695, 3586, 3225, 74, 1219, 1219,
	3674, 150, 149, 147, 146, 3676, 145, 1059, 72, 144,
	3686, 3687, 1706, 3685, 595, 1219, 1697, 3690, 3706, 143,
	73, 3589, 142, 24, 3698, 6, 58, 7, 918, 918,
	1772, 3478, 2983, 3702, 3704, 3705, 90, 223, 91, 223,
	223, 1198, 3675, 223, 223, 3703, 35, 70, 3697, 69,
	68, 3709, 3711, 3733, 3712, 3710, 3677, 223, 1231, 23,
	3720, 918, 918, 607, 918, 57, 22, 181, 3735, 3743,
	3746, 180, 2221, 2221, 1697, 3753, 179, 2715, 2716, 2717,
	178, 1255, 173, 172, 177, 175, 3734, 174, 176, 171,
	183, 182, 185, 3760, 1273, 169, 1278, 165, 164, 223,
	223, 3772, 1198, 3757, 3748, 3773, 3719, 918, 918, 918,
	3752, 168, 223, 1034, 3774, 3764, 3767, 170, 167, 1315,
	166, 3769, 163, 184, 141, 65, 140, 3801, 139, 138,
	918, 137, 223, 223, 223, 136, 1198, 223, 3806, 3747,
	3788, 3787, 3751, 3785, 3786, 595, 135, 223, 223, 134,
	64, 21, 3823, 3804, 2, 1, 0, 0, 0, 0,
	3827, 3825, 721, 0, 0, 0, 0, 612, 3833, 0,
	0, 0, 918, 1843, 3837, 3761, 3824, 3832, 3762, 0,
	0, 1032, 3829, 3830, 3831, 0, 1697, 0, 3834, 0,
	0, 2484, 2221, 2221, 2221, 0, 0, 3843, 3844, 3845,
	0, 0, 3849, 3847, 0, 0, 0, 3853, 3855, 3743,
	0, 3856, 3746, 3859, 0, 0, 3857, 918, 0, 918,
	3869, 3868, 3863, 223, 3874, 3870, 3816, 3872, 0, 0,
	3867, 0, 3871, 0, 0, 3873, 618, 223, 3875, 0,
	1223, 3862, 3757, 0, 0, 0, 0, 0, 0, 0,
	0, 3889, 3887, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 3897, 3894, 0, 0, 3900, 1207, 0,
	0, 918, 918, 3903, 3895, 0, 0, 0, 0, 918,
	3899, 918, 918, 3909, 0, 0, 0, 3915, 0, 712,
	0, 0, 0, 3918, 3916, 0, 0, 0, 0, 0,
	0, 0, 0, 3917, 0, 0, 3919, 0, 0, 0,
	0, 3923, 3925, 0, 0, 66, 3928, 715, 714, 3930,
	918, 3922, 0, 3924, 0, 0, 3935, 0, 3927, 0,
	0, 67, 1186, 0, 3931, 0, 3933, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	1032, 0, 1210, 0, 0, 0, 0, 0, 1032, 3910,
	3911, 0, 0, 0, 609, 0, 0, 0, 0, 0,
	0, 1032, 0, 0, 0, 881, 0, 1923, 0, 76,
	0, 1186, 0, 0, 0, 1223, 613, 0, 1934, 0,
	1034, 1034, 0, 0, 0, 0, 0, 0, 3932, 0,
	0, 1943, 1944, 1945, 0, 0, 0, 0, 0, 0,
	0, 617, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 611, 82, 89,
	0, 548, 0, 0, 2042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2217, 0,
	0, 0, 223, 0, 223, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 608, 3014, 3015, 0, 0, 0,
	0, 1231, 1198, 223, 0, 223, 0, 83, 0, 0,
	223, 1231, 564, 0, 0, 223, 1231, 0, 0, 615,
	0, 595, 2217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 2692, 2693, 0, 2710,
	2711, 2712, 0, 610, 0, 1491, 1492, 0, 0, 0,
	0, 0, 2147, 0, 1186, 0, 0, 3296, 0, 0,
	0, 0, 0, 1640, 0, 0, 0, 1522, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 3077, 3078, 3079, 3080, 3081, 3082, 3083,
	3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093,
	3094, 3095, 0, 3099, 1493, 2707, 1491, 1492, 0, 0,
	2221, 2221, 0, 0, 0, 0, 0, 1034, 0, 0,
	0, 0, 66, 84, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 2290, 0, 0,
	2217, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 87, 0, 88, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 192, 1510, 2698, 223, 76, 0, 0, 0,
	716, 0, 0, 1499, 126, 0, 0, 0, 2221, 2221,
	2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221, 2221,
	2221, 2221, 2221, 2221, 2221, 2221, 2221, 0, 2221, 81,
	194, 0, 0, 0, 0, 3012, 867, 0, 0, 223,
	92, 1521, 1523, 223, 0, 82, 89, 2713, 223, 0,
	0, 0, 2336, 127, 1516, 1517, 1518, 1519, 0, 0,
	0, 0, 0, 0, 1499, 0, 223, 162, 223, 0,
	223, 0, 0, 0, 548, 193, 0, 0, 0, 0,
	0, 0, 0, 2708, 0, 186, 0, 0, 1899, 0,
	0, 0, 1514, 187, 83, 0, 1034, 0, 0, 0,
	0, 0, 1521, 1523, 1034, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 713, 0, 1034, 0, 0,
	0, 0, 0, 0, 0, 1186, 1508, 1509, 0, 0,
	595, 0, 0, 0, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 223, 0, 1198, 223, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 0, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 223, 223, 0, 223, 0,
	223, 0, 223, 0, 223, 0, 0, 0, 0, 0,
	2426, 2709, 0, 0, 0, 0, 0, 0, 1985, 0,
	1515, 1986, 0, 1987, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 1186, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 595,
	0, 0, 0, 1520, 0, 0, 0, 158, 87, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 2499, 0, 0, 0, 0, 716, 0, 0,
	0, 126, 1186, 0, 0, 0, 0, 1223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2704, 2705, 2706, 194, 1186, 0,
	0, 2703, 2701, 2702, 2694, 2695, 2696, 2697, 2699, 2700,
	0, 1491, 1492, 1495, 1496, 1497, 1498, 1500, 1501, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 162, 0, 0, 0, 0, 0,
	1494, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 1511, 1507,
	1493, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501,
	1513, 0, 161, 0, 0, 0, 0, 548, 1510, 0,
	0, 0, 0, 1186, 0, 0, 0, 0, 0, 0,
	0, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 0, 0, 0, 0, 0, 223, 0,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3011, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1186, 0, 0, 0, 1516,
	1517, 1518, 1519, 0, 867, 0, 0, 0, 867, 1499,
	0, 0, 0, 0, 0, 0, 1491, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 1522, 0,
	0, 0, 564, 0, 0, 1494, 0, 1521, 1523, 0,
	0, 67, 1233, 0, 1237, 0, 1243, 1491, 1492, 0,
	0, 0, 0, 0, 71, 2745, 0, 0, 0, 0,
	3502, 1508, 1509, 0, 0, 1493, 0, 0, 66, 1522,
	0, 0, 0, 0, 0, 2349, 1494, 0, 0, 0,
	0, 0, 0, 223, 67, 0, 0, 2771, 1514, 76,
	0, 0, 0, 0, 223, 0, 0, 71, 0, 0,
	0, 0, 2784, 0, 3528, 0, 1493, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2799, 223, 81, 0, 0, 0, 1366, 0, 0, 0,
	0, 0, 76, 92, 1371, 0, 0, 0, 82, 89,
	223, 2432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 81, 223, 0, 0, 0,
	0, 0, 0, 223, 0, 2221, 92, 0, 1520, 2467,
	0, 82, 89, 0, 0, 0, 0, 83, 0, 2349,
	1423, 548, 1521, 1523, 2487, 1499, 1515, 0, 0, 0,
	223, 0, 0, 223, 0, 223, 0, 223, 0, 0,
	0, 0, 1198, 0, 223, 223, 0, 0, 0, 2221,
	0, 0, 0, 0, 2509, 721, 0, 2349, 2349, 0,
	83, 0, 3641, 1521, 1523, 0, 0, 0, 0, 223,
	0, 0, 0, 1514, 2784, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 223, 1198, 223, 0, 0,
	1231, 0, 1231, 0, 0, 1198, 0, 1198, 0, 1198,
	0, 0, 0, 0, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	223, 223, 223, 223, 1198, 223, 0, 223, 0, 0,
	0, 0, 0, 84, 0, 1563, 0, 0, 0, 2893,
	0, 1576, 0, 1511, 1507, 0, 1504, 1502, 1503, 1495,
	1496, 1497, 1498, 1500, 1501, 0, 0, 0, 223, 0,
	0, 0, 0, 2916, 0, 0, 223, 0, 0, 0,
	158, 87, 0, 88, 2922, 0, 84, 2221, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 1201, 126, 0, 1100, 0, 0, 0,
	0, 0, 0, 158, 87, 0, 88, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 2967, 2968, 0, 0,
	194, 0, 0, 0, 0, 192, 1186, 0, 0, 0,
	0, 0, 0, 716, 1634, 1634, 1634, 126, 0, 0,
	0, 0, 0, 127, 0, 1231, 2221, 2221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 1186, 0,
	0, 0, 0, 194, 0, 193, 0, 3034, 0, 0,
	0, 0, 0, 1186, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 187, 3050, 0, 127, 0, 0, 0,
	0, 1186, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501,
	162, 0, 0, 881, 0, 1360, 0, 867, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 881, 186, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500,
	1501, 0, 0, 0, 0, 0, 0, 0, 1358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 223, 0, 0,
	0, 0, 548, 0, 0, 1186, 0, 548, 0, 0,
	548, 0, 0, 548, 548, 0, 0, 0, 0, 548,
	0, 0, 0, 0, 0, 0, 0, 223, 0, 0,
	0, 0, 0, 0, 3141, 1186, 0, 0, 0, 1231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2692, 2693, 0, 2710, 2711, 2712, 0, 0, 1231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3023, 0, 0, 0, 0, 0, 2349, 2349, 223,
	0, 0, 0, 2349, 0, 0, 2825, 0, 0, 0,
	0, 0, 0, 0, 2349, 2825, 0, 2349, 2825, 2825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 223, 223, 223, 0, 0, 0, 0, 0, 2707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 223, 1198, 0, 0, 0, 0, 66,
	0, 43, 42, 0, 0, 0, 2349, 0, 223, 2349,
	1278, 0, 0, 2349, 2349, 67, 0, 128, 0, 0,
	0, 0, 0, 0, 1186, 0, 0, 1186, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 2901, 61, 0,
	2903, 2349, 0, 0, 223, 45, 0, 130, 223, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 2698, 0,
	0, 44, 0, 76, 0, 0, 0, 2467, 0, 0,
	1198, 0, 223, 0, 0, 2349, 0, 548, 0, 0,
	3209, 0, 0, 0, 2349, 47, 62, 0, 0, 0,
	0, 48, 0, 223, 223, 0, 81, 0, 1186, 131,
	0, 0, 0, 0, 0, 0, 46, 92, 0, 0,
	0, 2713, 82, 89, 0, 1186, 0, 0, 223, 2467,
	0, 0, 2467, 0, 0, 0, 0, 0, 2692, 2693,
	0, 2710, 2711, 2712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 2708, 0, 3260,
	3261, 3262, 0, 0, 0, 0, 0, 0, 0, 2992,
	0, 83, 1198, 223, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2017, 0, 2021, 0, 0, 0, 0,
	0, 0, 2035, 0, 0, 0, 0, 2707, 223, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
	2075, 2076, 2077, 2078, 0, 2084, 0, 2086, 2087, 2088,
	2089, 3350, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 0, 3055, 2709, 0, 0, 3358, 2113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1563, 0, 0, 0, 2128, 2698, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 2158, 2161, 2164, 2167, 0, 2171, 2172, 2173, 2174,
	2175, 2176, 2177, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 53, 158, 87, 0, 88, 0, 51,
	0, 0, 0, 132, 2213, 0, 2224, 2226, 2231, 52,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 126, 223,
	223, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 2708, 0, 0, 2704, 2705,
	2706, 548, 548, 0, 194, 2703, 2701, 2702, 2694, 2695,
	2696, 2697, 2699, 2700, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 3494, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1186, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 3, 0, 0, 3494, 0, 0, 0, 0,
	1186, 0, 0, 2709, 0, 0, 0, 223, 2042, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 0, 223, 2042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2349, 223, 0, 0, 2434,
	0, 2436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2509, 2509, 0, 0, 0, 0, 721, 721, 2349,
	0, 0, 2467, 2467, 0, 0, 721, 2349, 0, 0,
	0, 0, 0, 0, 223, 0, 2704, 2705, 2706, 0,
	1186, 0, 1186, 2703, 2701, 2702, 2694, 2695, 2696, 2697,
	2699, 2700, 0, 0, 0, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3315, 1186, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 1231, 0, 223, 0, 0, 0, 0, 1544, 1545,
	0, 0, 0, 0, 0, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 2349, 2349, 2349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1231, 0, 0, 1491,
	1492, 0, 0, 0, 2349, 1186, 2825, 0, 0, 1231,
	1231, 223, 0, 2603, 2604, 0, 0, 0, 0, 2610,
	0, 1522, 223, 223, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 2349, 0, 2349, 223, 0, 2624, 2625,
	0, 0, 0, 0, 2128, 0, 1186, 2349, 0, 0,
	0, 3436, 0, 2632, 0, 0, 0, 0, 1493, 1186,
	223, 0, 0, 0, 0, 0, 0, 223, 1513, 2646,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 2658, 0, 0, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 0, 0,
	1231, 0, 0, 0, 0, 0, 0, 1186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2609, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 224, 224,
	0, 0, 0, 0, 0, 0, 0, 1516, 1517, 1518,
	1519, 0, 0, 0, 1186, 0, 0, 1499, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 2231, 2231, 2231, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 1634, 0, 0, 0,
	0, 0, 0, 0, 2749, 1521, 1523, 0, 0, 0,
	0, 0, 2349, 0, 2825, 0, 0, 3522, 0, 0,
	0, 0, 0, 0, 0, 223, 0, 0, 0, 1508,
	1509, 0, 2692, 2693, 0, 2710, 2711, 2712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 3022, 0, 0, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	3522, 0, 0, 0, 1491, 1492, 0, 0, 2349, 867,
	1534, 1535, 1536, 0, 0, 0, 0, 0, 3593, 0,
	0, 2707, 0, 0, 0, 0, 1522, 0, 0, 0,
	1231, 0, 0, 1494, 0, 0, 2842, 0, 0, 0,
	1540, 0, 0, 0, 914, 0, 0, 0, 0, 0,
	0, 0, 0, 223, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 1513, 0, 0, 0, 3055, 0, 0,
	0, 1510, 0, 0, 1515, 0, 0, 222, 222, 222,
	0, 0, 3522, 0, 0, 0, 0, 0, 0, 0,
	2698, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 0, 0, 0, 0, 0, 0, 1491,
	1492, 0, 1524, 1525, 1526, 1534, 1535, 1536, 0, 0,
	0, 0, 631, 0, 0, 0, 0, 0, 223, 0,
	1527, 1522, 1516, 1517, 1518, 1519, 0, 0, 1494, 0,
	3436, 0, 1499, 2713, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 2825, 0, 0, 0, 0, 0, 1493, 0,
	0, 1531, 0, 0, 1541, 0, 0, 0, 1513, 2708,
	1521, 1523, 0, 0, 0, 0, 1510, 1231, 0, 1231,
	0, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497,
	1498, 1500, 1501, 0, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 3729, 0, 0, 0, 0, 0,
	1529, 1231, 0, 0, 223, 0, 0, 0, 0, 1035,
	0, 1514, 0, 0, 0, 0, 0, 0, 223, 2349,
	0, 0, 0, 0, 0, 0, 0, 1516, 1517, 1518,
	1519, 0, 0, 0, 0, 223, 0, 1499, 0, 2035,
	0, 0, 0, 0, 0, 3009, 3010, 0, 0, 3013,
	0, 0, 0, 3016, 0, 0, 0, 0, 0, 0,
	0, 3055, 3020, 0, 0, 0, 1531, 2709, 0, 1541,
	0, 3027, 0, 0, 2749, 1521, 1523, 0, 0, 0,
	0, 0, 2692, 2693, 0, 2710, 2711, 2712, 0, 3039,
	1537, 0, 1538, 0, 0, 0, 0, 0, 0, 1508,
	1509, 1520, 0, 0, 0, 0, 0, 2349, 0, 3062,
	3063, 0, 3064, 3065, 3066, 1529, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 0, 1514, 0, 3522, 0,
	3072, 0, 0, 0, 3074, 0, 0, 0, 0, 0,
	0, 1532, 0, 0, 0, 0, 0, 0, 0, 0,
	1539, 2707, 0, 0, 0, 0, 1231, 0, 2349, 0,
	0, 0, 0, 0, 0, 3102, 3103, 1528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2704, 2705, 2706, 3114, 0, 0, 0, 2703, 2701, 2702,
	2694, 2695, 2696, 2697, 2699, 2700, 0, 0, 3123, 0,
	0, 0, 0, 224, 1106, 224, 224, 0, 1106, 224,
	224, 1106, 0, 0, 0, 1106, 1520, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 1530, 0,
	2698, 0, 0, 0, 1515, 1533, 1511, 1507, 0, 1504,
	1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0, 0,
	0, 0, 0, 0, 0, 3153, 1532, 0, 1491, 1492,
	0, 0, 2714, 0, 1106, 224, 224, 0, 0, 0,
	3162, 3165, 0, 0, 0, 0, 0, 0, 224, 0,
	1522, 0, 0, 2713, 0, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 3185, 0, 224, 224,
	224, 0, 0, 224, 1106, 0, 0, 0, 1106, 0,
	0, 0, 1106, 224, 224, 0, 0, 1493, 0, 2708,
	0, 0, 1106, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 1491, 1492, 1530, 0, 0, 0, 1505, 1506, 1512,
	1533, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497,
	1498, 1500, 1501, 1522, 0, 1106, 0, 3323, 0, 0,
	1494, 3322, 0, 0, 0, 0, 0, 2602, 0, 0,
	0, 0, 0, 1634, 0, 0, 0, 0, 0, 224,
	0, 0, 3254, 0, 0, 0, 1516, 1517, 1518, 1519,
	1493, 0, 0, 224, 0, 0, 1499, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 222, 222, 2709, 0, 222,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 1521, 1523, 0, 0, 0, 0,
	0, 0, 0, 903, 94, 3293, 3294, 0, 0, 0,
	0, 3298, 3299, 0, 0, 0, 3302, 3303, 1508, 1509,
	0, 0, 0, 3307, 0, 0, 0, 0, 0, 1516,
	1517, 1518, 1519, 0, 3311, 222, 222, 0, 0, 1499,
	0, 0, 0, 0, 0, 1514, 0, 0, 222, 0,
	3316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 222,
	222, 0, 0, 222, 0, 0, 0, 1521, 1523, 0,
	0, 0, 0, 222, 222, 0, 94, 0, 0, 0,
	2704, 2705, 2706, 0, 0, 0, 0, 2703, 2701, 2702,
	2694, 2695, 2696, 2697, 2699, 2700, 2692, 2693, 0, 2710,
	2711, 2712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 843, 0, 0, 0, 222,
	3165, 0, 0, 0, 0, 862, 0, 0, 0, 0,
	0, 0, 0, 222, 224, 2707, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 0, 0, 0, 224,
	224, 224, 0, 0, 0, 0, 224, 0, 1022, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 1515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2698, 0, 0, 0, 0, 0,
	0, 0, 3165, 0, 0, 0, 0, 0, 0, 0,
	1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498,
	1500, 1501, 0, 0, 0, 0, 0, 0, 0, 3489,
	3490, 3491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2713, 0, 0,
	0, 0, 2035, 0, 0, 3500, 3501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 1502, 1503, 1495,
	1496, 1497, 1498, 1500, 1501, 702, 0, 0, 0, 1106,
	1106, 224, 0, 0, 0, 0, 3165, 1106, 0, 0,
	0, 0, 0, 0, 3547, 0, 0, 0, 1656, 685,
	1035, 0, 0, 3554, 222, 0, 867, 0, 0, 0,
	0, 0, 3561, 0, 0, 0, 0, 0, 0, 222,
	1656, 222, 0, 0, 0, 224, 631, 0, 0, 224,
	0, 631, 0, 686, 224, 0, 0, 1028, 0, 0,
	0, 0, 0, 0, 687, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 224, 0, 224, 0, 0, 0,
	0, 2709, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3165, 3165, 707,
	218, 218, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 689, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 0, 1106, 690, 1106, 0, 0,
	0, 0, 0, 0, 0, 1106, 0, 0, 1106, 224,
	0, 3653, 224, 0, 3656, 0, 691, 0, 0, 692,
	0, 1106, 1106, 1106, 0, 0, 0, 0, 618, 0,
	0, 0, 224, 3165, 0, 0, 0, 0, 0, 0,
	0, 224, 224, 0, 224, 0, 224, 0, 224, 0,
	224, 0, 706, 0, 2704, 2705, 2706, 0, 0, 0,
	0, 2703, 2701, 2702, 2694, 2695, 2696, 2697, 2699, 2700,
	0, 0, 0, 0, 0, 0, 3165, 0, 0, 3165,
	224, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2035, 0, 0, 222, 0, 0, 1106, 222,
	0, 0, 0, 94, 222, 94, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 694, 222, 867, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	3784, 3784, 3784, 617, 0, 0, 0, 862, 94, 94,
	696, 0, 0, 697, 0, 0, 1106, 94, 0, 704,
	0, 0, 698, 3805, 0, 94, 0, 0, 0, 222,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 699, 705, 0, 0, 0,
	0, 631, 222, 700, 222, 3784, 222, 0, 222, 0,
	222, 0, 0, 0, 0, 0, 701, 0, 0, 94,
	0, 708, 0, 0, 0, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 0,
	222, 0, 0, 228, 0, 703, 0, 0, 224, 0,
	3165, 1106, 3165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 0, 0, 3784, 3904, 0, 0, 0, 0,
	0, 624, 3908, 0, 0, 0, 1106, 0, 1556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 1562, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 1106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1106, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1035, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 1035, 0, 0, 1654, 0, 1657,
	0, 94, 0, 0, 0, 0, 1097, 0, 222, 0,
	646, 0, 1205, 0, 0, 0, 224, 0, 0, 224,
	0, 224, 0, 224, 0, 0, 0, 0, 0, 0,
	224, 224, 1106, 1106, 647, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 648, 0,
	666, 224, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 649, 0, 0, 650, 0, 0,
	0, 1331, 1331, 1331, 0, 0, 224, 224, 224, 224,
	0, 224, 0, 224, 673, 0, 1364, 1365, 0, 222,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 224, 0, 0, 0, 0, 0,
	0, 652, 224, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 653, 0, 0, 654, 0, 631, 0, 0, 675,
	0, 0, 0, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 222, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 222,
	0, 222, 0, 222, 0, 0, 0, 0, 0, 674,
	222, 222, 0, 0, 0, 0, 0, 0, 657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 222, 0, 0, 0, 655, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 222, 222, 222,
	659, 222, 862, 222, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 617, 1106,
	0, 0, 0, 0, 222, 0, 0, 0, 667, 0,
	0, 0, 222, 0, 0, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1106, 0, 1103, 0, 1039, 665, 1103, 0, 0,
	1220, 0, 0, 0, 1220, 0, 1106, 0, 0, 0,
	661, 0, 0, 678, 0, 677, 0, 0, 662, 0,
	0, 0, 0, 0, 1106, 0, 0, 1672, 0, 0,
	0, 663, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 679, 1681, 676, 1205, 0, 0, 0, 0, 619,
	0, 0, 0, 1220, 0, 224, 0, 843, 0, 0,
	843, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 224, 224,
	0, 0, 0, 1220, 0, 0, 224, 1220, 0, 0,
	0, 1220, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 1220, 0, 0, 0, 2102, 0, 0, 1106, 0,
	0, 0, 0, 0, 224, 0, 0, 1106, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 1562, 0, 0, 0, 1562, 0, 0, 1106, 0,
	0, 0, 0, 0, 1220, 0, 0, 0, 0, 0,
	224, 0, 0, 1106, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 1035, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1035, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	224, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	0, 0, 0, 1656, 0, 0, 1106, 1106, 0, 0,
	0, 0, 0, 1657, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 1861, 0,
	0, 0, 1868, 0, 0, 222, 0, 1106, 0, 224,
	1106, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 0, 1887, 0, 1887,
	0, 0, 0, 0, 0, 0, 0, 222, 222, 222,
	0, 0, 0, 0, 224, 0, 1656, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 1205, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 1106, 0,
	0, 0, 1868, 0, 0, 1938, 0, 0, 0, 0,
	222, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 1955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1965, 0, 1967, 1035, 1969,
	1039, 1971, 0, 1972, 1039, 0, 0, 1039, 0, 0,
	94, 1039, 94, 0, 1103, 0, 0, 0, 0, 222,
	222, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	624, 0, 0, 1989, 0, 0, 0, 0, 0, 0,
	0, 0, 1220, 0, 222, 0, 0, 0, 0, 0,
	94, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	1039, 0, 0, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 1106, 222,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	1039, 0, 0, 0, 1039, 0, 0, 0, 1039, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1039, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1039, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1220, 1220,
	1106, 0, 0, 1106, 0, 0, 1103, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 919, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2287, 0, 0, 0, 0, 0, 0, 1562, 1106,
	1106, 1106, 0, 0, 0, 1035, 1035, 0, 0, 0,
	0, 0, 0, 0, 0, 1106, 0, 0, 0, 0,
	224, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1220, 0, 1220, 0, 1220, 0, 0, 0,
	0, 0, 0, 0, 1220, 0, 0, 1220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1220, 1220, 1220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 1022, 0, 0,
	1205, 0, 0, 0, 1039, 0, 1039, 0, 0, 0,
	0, 0, 1022, 0, 0, 0, 0, 222, 0, 0,
	0, 1039, 0, 1106, 0, 1106, 222, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 1710, 0, 0, 0,
	0, 222, 1106, 0, 0, 1868, 0, 0, 0, 1039,
	0, 0, 2458, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 1035, 0, 0, 0, 0, 0, 0, 0,
	1039, 0, 0, 0, 0, 0, 0, 224, 0, 2489,
	0, 0, 1331, 0, 1331, 0, 1331, 1106, 224, 224,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2535, 94,
	94, 0, 0, 94, 0, 0, 224, 0, 0, 0,
	0, 0, 1106, 224, 2543, 0, 2546, 1106, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 94, 94, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2567,
	1205, 2569, 1205, 0, 2572, 0, 0, 0, 1106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1039, 1039, 1331, 1106, 0,
	0, 0, 0, 1039, 1103, 2600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 0,
	862, 1035, 0, 0, 0, 0, 0, 0, 0, 1035,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 1106,
	0, 0, 1656, 0, 0, 0, 0, 94, 94, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 1220, 0, 0, 222, 222,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 1039,
	0, 1039, 0, 1039, 0, 0, 222, 1106, 0, 0,
	1106, 1039, 0, 222, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1039, 1039, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	224, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 1104,
	0, 0, 1221, 0, 0, 0, 1221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 1710, 1710, 1039, 0, 0, 0, 0, 0,
	0, 1220, 1220, 0, 1220, 0, 94, 0, 0, 224,
	0, 222, 1106, 0, 0, 1221, 1220, 0, 0, 0,
	0, 0, 1106, 1106, 1022, 1022, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2817, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1221, 0, 0, 0, 1221,
	0, 0, 0, 1221, 0, 0, 0, 0, 0, 0,
	2855, 2857, 2458, 1221, 0, 0, 0, 0, 0, 0,
	224, 0, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 1221, 0, 0, 222,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2913, 1039, 0, 0, 2917, 0, 0,
	0, 1039, 0, 0, 0, 0, 0, 0, 0, 0,
	1039, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1205, 1205, 1491, 1492, 0, 1524, 1525, 1526,
	1534, 1535, 1536, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1527, 1522, 2971, 0, 0,
	0, 1022, 0, 1494, 0, 0, 0, 0, 0, 222,
	1540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 94, 0, 0, 0,
	0, 0, 2995, 1513, 1205, 0, 0, 0, 0, 0,
	0, 1510, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3007, 0, 1710,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1039, 0, 0, 0, 1103, 0,
	0, 222, 1516, 1517, 1518, 1519, 1039, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 1541, 1103, 0, 0, 0, 0,
	1521, 1523, 0, 0, 94, 0, 1104, 0, 0, 0,
	1022, 0, 0, 1103, 0, 1537, 0, 1538, 1022, 0,
	0, 0, 0, 0, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 1221, 0, 0, 0, 1039, 1039,
	1529, 1039, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 1039, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 94, 0, 1220, 0, 0, 0,
	0, 0, 0, 765, 94, 801, 0, 0, 1220, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	0, 1520, 0, 0, 94, 0, 0, 0, 772, 0,
	0, 0, 1220, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 1220, 784, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 0, 0, 0, 0, 0, 0, 0, 771,
	1221, 1221, 0, 0, 774, 0, 0, 0, 1104, 807,
	0, 0, 0, 0, 0, 0, 0, 781, 782, 0,
	0, 0, 0, 794, 0, 1220, 1220, 0, 0, 0,
	2458, 0, 0, 0, 0, 0, 0, 802, 776, 3224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 800, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 1530, 1103,
	0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504,
	1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0, 0,
	0, 0, 2667, 0, 777, 0, 2668, 0, 0, 0,
	0, 0, 769, 3278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	778, 779, 0, 0, 1221, 0, 1221, 0, 1221, 0,
	0, 0, 0, 0, 0, 0, 1221, 786, 785, 1221,
	1103, 0, 0, 0, 0, 780, 0, 0, 0, 0,
	0, 0, 1221, 1221, 1221, 0, 0, 1103, 0, 2102,
	0, 0, 806, 0, 1039, 1039, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1039,
	0, 0, 803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1039,
	0, 0, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 775, 1710, 0, 0, 0,
	1039, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 773, 0, 0, 0, 798, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 94, 0, 0, 1710, 0, 0,
	0, 0, 796, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 789, 0, 0, 0, 0, 1103, 790, 0,
	0, 767, 0, 804, 0, 0, 0, 0, 0, 0,
	3398, 0, 0, 0, 0, 0, 0, 0, 0, 768,
	0, 2458, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 0, 0, 1039, 788, 0, 0, 0, 0,
	0, 0, 0, 1039, 805, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 1039, 0, 1104, 0, 2458,
	0, 0, 0, 0, 1039, 0, 3451, 0, 0, 0,
	0, 0, 0, 795, 0, 0, 0, 0, 0, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1039, 0, 0, 94, 0, 797, 94, 0, 0, 0,
	0, 0, 0, 0, 1039, 0, 0, 0, 0, 1220,
	0, 0, 1220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1039, 1039, 0, 0, 1220, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1220, 1220,
	1220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1039, 1220, 0, 1039, 0, 0, 0,
	1103, 0, 0, 0, 3529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1221, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	1710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1710, 1710, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1221, 3631, 1205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1710, 1710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1710, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1039, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1221, 1221, 0, 1221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 1221, 0,
	0, 1103, 0, 0, 1039, 0, 0, 0, 0, 0,
	0, 0, 3694, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 1220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3737, 0, 0, 0, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3766, 0, 1039, 1103, 0, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 1710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1039, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1039, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1039, 1039, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1039, 0, 0, 0, 0, 0, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1710, 0, 0, 0, 0, 1491, 1492, 0, 1524, 1525,
	1526, 1534, 1535, 1536, 0, 0, 1103, 0, 0, 1220,
	0, 0, 0, 0, 0, 0, 1527, 1522, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1039, 0, 0,
	0, 0, 1104, 0, 0, 1039, 0, 0, 0, 1039,
	0, 1039, 0, 0, 0, 0, 0, 1104, 1039, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1039, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 1516, 1517, 1518, 1519, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 0,
	0, 1220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1220, 1220, 1039, 0, 0, 0, 0, 1039, 0,
	0, 0, 1531, 0, 0, 1541, 0, 0, 1220, 0,
	0, 1521, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1537, 0, 1538, 0,
	0, 0, 0, 0, 0, 1508, 1509, 0, 1039, 0,
	0, 0, 0, 1039, 0, 0, 0, 0, 0, 1104,
	0, 1529, 0, 0, 0, 0, 0, 0, 1221, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 0,
	1221, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 1039, 0, 1539, 0, 0, 0,
	0, 0, 0, 0, 1221, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 1221, 0, 0, 0, 0,
	0, 0, 0, 0, 1039, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 1039, 0, 1221, 1221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1039, 0,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1532, 1710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 1104, 0, 0, 0, 0, 1039, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 1492, 0, 1524, 1525, 1526, 1534, 1535, 1536,
	0, 0, 0, 1039, 0, 0, 1039, 0, 0, 0,
	0, 0, 1527, 1522, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 1540, 0, 1530,
	0, 0, 1104, 1505, 1506, 1512, 1533, 1511, 1507, 0,
	1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 1104,
	1493, 0, 0, 2124, 0, 1710, 0, 2125, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1516,
	1517, 1518, 1519, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 1039, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1039, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 1541, 0, 0, 0, 1039, 0, 1521, 1523, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1537, 0, 1538, 0, 0, 0, 0, 0,
	0, 1508, 1509, 0, 1491, 1492, 0, 1524, 1525, 1526,
	1534, 1535, 1536, 0, 0, 0, 0, 1529, 0, 0,
	0, 0, 0, 0, 0, 1527, 1522, 0, 1514, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 1528,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1221, 0, 0, 1221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1221, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	0, 0, 1516, 1517, 1518, 1519, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 1532, 0,
	1221, 1221, 1221, 0, 0, 1491, 1492, 0, 1524, 1525,
	1526, 1534, 1535, 1536, 0, 0, 1221, 0, 0, 0,
	0, 1531, 1104, 0, 1541, 0, 1527, 1522, 0, 0,
	1521, 1523, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 1104, 1537, 0, 1538, 0, 0,
	0, 0, 0, 0, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	1529, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 1514, 1510, 0, 0, 1530, 0, 0, 0, 1505,
	1506, 1512, 1533, 1511, 1507, 0, 1504, 1502, 1503, 1495,
	1496, 1497, 1498, 1500, 1501, 1539, 0, 0, 0, 0,
	0, 0, 0, 3321, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 1517, 1518, 1519, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 1104, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 1104, 0, 1541, 0, 0, 0, 1515,
	0, 1521, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1537, 0, 1538, 0,
	0, 1532, 0, 0, 0, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 1529, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1539, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 1221, 0,
	0, 0, 0, 1528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504,
	1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0, 1104,
	0, 0, 0, 0, 0, 0, 3025, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1532, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0,
	1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 2670, 1104, 0,
	0, 1221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 1221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1221, 1221, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 1107, 238, 239, 1108, 1109, 1110,
	1221, 1111, 491, 1112, 1113, 1114, 1115, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	1116, 248, 249, 250, 251, 252, 1117, 1118, 0, 253,
	496, 497, 498, 1119, 254, 255, 499, 1120, 1187, 1121,
	256, 257, 258, 259, 260, 261, 262, 0, 1122, 264,
	265, 266, 263, 1123, 267, 0, 268, 269, 270, 1124,
	271, 980, 272, 273, 1125, 1126, 1128, 1127, 1129, 1130,
	1131, 274, 275, 276, 277, 0, 278, 500, 501, 1132,
	282, 279, 280, 1133, 283, 281, 1134, 284, 1135, 1136,
	285, 286, 287, 1137, 288, 1138, 289, 290, 1139, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 503, 504, 1140, 229, 1141, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 1142, 307,
	1143, 1144, 981, 308, 309, 506, 507, 310, 311, 1145,
	312, 508, 1146, 509, 313, 1147, 314, 315, 316, 317,
	318, 510, 511, 512, 371, 983, 319, 320, 1148, 321,
	322, 323, 324, 0, 0, 0, 230, 325, 326, 328,
	1149, 982, 327, 513, 514, 1150, 515, 1151, 329, 984,
	516, 985, 330, 331, 332, 986, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 1152, 340, 339, 1153, 341,
	517, 987, 342, 343, 988, 1154, 344, 345, 346, 1155,
	1156, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 989,
	363, 364, 367, 368, 366, 990, 365, 1157, 231, 991,
	369, 1158, 518, 370, 519, 372, 373, 1159, 0, 374,
	0, 1160, 1161, 376, 377, 378, 1162, 1163, 379, 380,
	520, 992, 381, 993, 521, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 1164, 391, 392, 522, 523,
	524, 393, 525, 394, 395, 1165, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 1166, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 1167, 415, 994, 416, 417, 418,
	419, 527, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 1168, 433, 434, 432, 435, 436, 437, 1169,
	438, 422, 423, 439, 440, 995, 441, 442, 528, 0,
	443, 1170, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 530, 1171, 455, 456, 0, 454,
	1172, 457, 458, 459, 460, 461, 297, 462, 1173, 463,
	531, 532, 533, 534, 1174, 470, 1175, 464, 465, 535,
	466, 536, 1176, 467, 468, 469, 0, 471, 472, 1177,
	1178, 473, 474, 475, 477, 478, 476, 479, 1179, 480,
	1180, 0, 481, 482, 483, 537, 538, 539, 1181, 485,
	484, 540, 1182, 1183, 1184, 1185, 486, 487, 541, 488,
	489, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 2265, 0, 0, 0, 0, 0, 0,
	0, 2266, 232, 233, 234, 235, 236, 237, 1107, 238,
	239, 1108, 1109, 1110, 0, 1111, 491, 1112, 1113, 1114,
	1115, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 1116, 248, 249, 250, 251, 252,
	1117, 1118, 0, 253, 496, 497, 498, 1119, 254, 255,
	499, 1120, 1187, 1121, 256, 257, 258, 259, 260, 261,
	262, 0, 1122, 264, 265, 266, 263, 1123, 267, 0,
	268, 269, 270, 1124, 271, 980, 272, 273, 1125, 1126,
	1128, 1127, 1129, 1130, 1131, 274, 275, 276, 277, 0,
	278, 500, 501, 1132, 282, 279, 280, 1133, 283, 281,
	1134, 284, 1135, 1136, 285, 286, 287, 1137, 288, 1138,
	289, 290, 1139, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 1140, 229, 1141,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 1142, 307, 1143, 1144, 981, 308, 309, 506,
	507, 310, 311, 1145, 312, 508, 1146, 509, 313, 1147,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 983,
	319, 320, 1148, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 1149, 982, 327, 513, 514, 1150,
	515, 1151, 329, 984, 516, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 1152,
	340, 339, 1153, 341, 517, 987, 342, 343, 988, 1154,
	344, 345, 346, 1155, 1156, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 1157, 231, 991, 369, 1158, 518, 370, 519, 372,
	373, 1159, 0, 374, 0, 1160, 1161, 376, 377, 378,
	1162, 1163, 379, 380, 520, 992, 381, 993, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 1164,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 1165,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 1166, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 1167, 415,
	994, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 1168, 433, 434, 432,
	435, 436, 437, 1169, 438, 422, 423, 439, 440, 995,
	441, 442, 528, 0, 443, 1170, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 1171,
	455, 456, 0, 454, 1172, 457, 458, 459, 460, 461,
	297, 462, 1173, 463, 531, 532, 533, 534, 1174, 470,
	1175, 464, 465, 535, 466, 536, 1176, 467, 468, 469,
	0, 471, 472, 1177, 1178, 473, 474, 475, 477, 478,
	476, 479, 1179, 480, 1180, 0, 481, 482, 483, 537,
	538, 539, 1181, 485, 484, 540, 1182, 1183, 1184, 1185,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 3033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3035, 232, 233, 234, 235, 236, 237,
	1107, 238, 239, 1108, 1109, 1110, 0, 1111, 491, 1112,
	1113, 1114, 1115, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 1116, 248, 249, 250,
	251, 252, 1117, 1118, 0, 253, 496, 497, 498, 1119,
	254, 255, 499, 1120, 1187, 1121, 256, 257, 258, 259,
	260, 261, 262, 0, 1122, 264, 265, 266, 263, 1123,
	267, 0, 268, 269, 270, 1124, 271, 980, 272, 273,
	1125, 1126, 1128, 1127, 1129, 1130, 1131, 274, 275, 276,
	277, 0, 278, 500, 501, 1132, 282, 279, 280, 1133,
	283, 281, 1134, 284, 1135, 1136, 285, 286, 287, 1137,
	288, 1138, 289, 290, 1139, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 1140,
	229, 1141, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 1142, 307, 1143, 1144, 981, 308,
	309, 506, 507, 310, 311, 1145, 312, 508, 1146, 509,
	313, 1147, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 983, 319, 320, 1148, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 1149, 982, 327, 513,
	514, 1150, 515, 1151, 329, 984, 516, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 1152, 340, 339, 1153, 341, 517, 987, 342, 343,
	988, 1154, 344, 345, 346, 1155, 1156, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 1157, 231, 991, 369, 1158, 518, 370,
	519, 372, 373, 1159, 0, 374, 0, 1160, 1161, 376,
	377, 378, 1162, 1163, 379, 380, 520, 992, 381, 993,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 1164, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 1165, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 1166, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	1167, 415, 994, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 1168, 433,
	434, 432, 435, 436, 437, 1169, 438, 422, 423, 439,
	440, 995, 441, 442, 528, 0, 443, 1170, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 1171, 455, 456, 0, 454, 1172, 457, 458, 459,
	460, 461, 297, 462, 1173, 463, 531, 532, 533, 534,
	1174, 470, 1175, 464, 465, 535, 466, 536, 1176, 467,
	468, 469, 0, 471, 472, 1177, 1178, 473, 474, 475,
	477, 478, 476, 479, 1179, 480, 1180, 0, 481, 482,
	483, 537, 538, 539, 1181, 485, 484, 540, 1182, 1183,
	1184, 1185, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3349,
	232, 233, 234, 235, 236, 237, 1107, 238, 239, 1108,
	1109, 1110, 0, 1111, 491, 1112, 1113, 1114, 1115, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 1116, 248, 249, 250, 251, 252, 1117, 1118,
	0, 253, 496, 497, 498, 1119, 254, 255, 499, 1120,
	1187, 1121, 256, 257, 258, 259, 260, 261, 262, 0,
	1122, 264, 265, 266, 263, 1123, 267, 0, 268, 269,
	270, 1124, 271, 980, 272, 273, 1125, 1126, 1128, 1127,
	1129, 1130, 1131, 274, 275, 276, 277, 0, 278, 500,
	501, 1132, 282, 279, 280, 1133, 283, 281, 1134, 284,
	1135, 1136, 285, 286, 287, 1137, 288, 1138, 289, 290,
	1139, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 1140, 229, 1141, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	1142, 307, 1143, 1144, 981, 308, 309, 506, 507, 310,
	311, 1145, 312, 508, 1146, 509, 313, 1147, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 983, 319, 320,
	1148, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 1149, 982, 327, 513, 514, 1150, 515, 1151,
	329, 984, 516, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 1152, 340, 339,
	1153, 341, 517, 987, 342, 343, 988, 1154, 344, 345,
	346, 1155, 1156, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 1157,
	231, 991, 369, 1158, 518, 370, 519, 372, 373, 1159,
	0, 374, 0, 1160, 1161, 376, 377, 378, 1162, 1163,
	379, 380, 520, 992, 381, 993, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 1164, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 1165, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	1166, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 1167, 415, 994, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 1168, 433, 434, 432, 435, 436,
	437, 1169, 438, 422, 423, 439, 440, 995, 441, 442,
	528, 0, 443, 1170, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 1171, 455, 456,
	0, 454, 1172, 457, 458, 459, 460, 461, 297, 462,
	1173, 463, 531, 532, 533, 534, 1174, 470, 1175, 464,
	465, 535, 466, 536, 1176, 467, 468, 469, 0, 471,
	472, 1177, 1178, 473, 474, 475, 477, 478, 476, 479,
	1179, 480, 1180, 0, 481, 482, 483, 537, 538, 539,
	1181, 485, 484, 540, 1182, 1183, 1184, 1185, 486, 487,
	541, 488, 489, 490, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3495, 232, 233, 234, 235, 236, 237, 1107, 238, 239,
	1108, 1109, 1110, 0, 1111, 491, 1112, 1113, 1114, 1115,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 1116, 248, 249, 250, 251, 252, 1117,
	1118, 0, 253, 496, 497, 498, 1119, 254, 255, 499,
	1120, 1187, 1121, 256, 257, 258, 259, 260, 261, 262,
	0, 1122, 264, 265, 266, 263, 1123, 267, 0, 268,
	269, 270, 1124, 271, 980, 272, 273, 1125, 1126, 1128,
	1127, 1129, 1130, 1131, 274, 275, 276, 277, 0, 278,
	500, 501, 1132, 282, 279, 280, 1133, 283, 281, 1134,
	284, 1135, 1136, 285, 286, 287, 1137, 288, 1138, 289,
	290, 1139, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 1140, 229, 1141, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 1142, 307, 1143, 1144, 981, 308, 309, 506, 507,
	310, 311, 1145, 312, 508, 1146, 509, 313, 1147, 314,
	315, 316, 317, 318, 510, 511, 512, 371, 983, 319,
	320, 1148, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 1149, 982, 327, 513, 514, 1150, 515,
	1151, 329, 984, 516, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 1152, 340,
	339, 1153, 341, 517, 987, 342, 343, 988, 1154, 344,
	345, 346, 1155, 1156, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	1157, 231, 991, 369, 1158, 518, 370, 519, 372, 373,
	1159, 0, 374, 0, 1160, 1161, 376, 377, 378, 1162,
	1163, 379, 380, 520, 992, 381, 993, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 1164, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 1165, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 1166, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 1167, 415, 994,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 1168, 433, 434, 432, 435,
	436, 437, 1169, 438, 422, 423, 439, 440, 995, 441,
	442, 528, 0, 443, 1170, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 1171, 455,
	456, 0, 454, 1172, 457, 458, 459, 460, 461, 297,
	462, 1173, 463, 531, 532, 533, 534, 1174, 470, 1175,
	464, 465, 535, 466, 536, 1176, 467, 468, 469, 0,
	471, 472, 1177, 1178, 473, 474, 475, 477, 478, 476,
	479, 1179, 480, 1180, 0, 481, 482, 483, 537, 538,
	539, 1181, 485, 484, 540, 1182, 1183, 1184, 1185, 486,
	487, 541, 488, 489, 490, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3405, 232, 233, 234, 235, 236, 237, 1107, 238,
	239, 1108, 1109, 1110, 0, 1111, 491, 1112, 1113, 1114,
	1115, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 1116, 248, 249, 250, 251, 252,
	1117, 1118, 0, 253, 496, 497, 498, 1119, 254, 255,
	499, 1120, 1187, 1121, 256, 257, 258, 259, 260, 261,
	262, 0, 1122, 264, 265, 266, 263, 1123, 267, 0,
	268, 269, 270, 1124, 271, 980, 272, 273, 1125, 1126,
	1128, 1127, 1129, 1130, 1131, 274, 275, 276, 277, 0,
	278, 500, 501, 1132, 282, 279, 280, 1133, 283, 281,
	1134, 284, 1135, 1136, 285, 286, 287, 1137, 288, 1138,
	289, 290, 1139, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 1140, 229, 1141,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 1142, 307, 1143, 1144, 981, 308, 309, 506,
	507, 310, 311, 1145, 312, 508, 1146, 509, 313, 1147,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 983,
	319, 320, 1148, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 1149, 982, 327, 513, 514, 1150,
	515, 1151, 329, 984, 516, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 1152,
	340, 339, 1153, 341, 517, 987, 342, 343, 988, 1154,
	344, 345, 346, 1155, 1156, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 1157, 231, 991, 369, 1158, 518, 370, 519, 372,
	373, 1159, 0, 374, 0, 1160, 1161, 376, 377, 378,
	1162, 1163, 379, 380, 520, 992, 381, 993, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 1164,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 1165,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 1166, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 1167, 415,
	994, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 1168, 433, 434, 432,
	435, 436, 437, 1169, 438, 422, 423, 439, 440, 995,
	441, 442, 528, 0, 443, 1170, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 1171,
	455, 456, 0, 454, 1172, 457, 458, 459, 460, 461,
	297, 462, 1173, 463, 531, 532, 533, 534, 1174, 470,
	1175, 464, 465, 535, 466, 536, 1176, 467, 468, 469,
	0, 471, 472, 1177, 1178, 473, 474, 475, 477, 478,
	476, 479, 1179, 480, 1180, 0, 481, 482, 483, 537,
	538, 539, 1181, 485, 484, 540, 1182, 1183, 1184, 1185,
	486, 487, 541, 488, 489, 490, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3279, 232, 233, 234, 235, 236, 237, 1107,
	238, 239, 1108, 1109, 1110, 0, 1111, 491, 1112, 1113,
	1114, 1115, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 1116, 248, 249, 250, 251,
	252, 1117, 1118, 0, 253, 496, 497, 498, 1119, 254,
	255, 499, 1120, 1187, 1121, 256, 257, 258, 259, 260,
	261, 262, 0, 1122, 264, 265, 266, 263, 1123, 267,
	0, 268, 269, 270, 1124, 271, 980, 272, 273, 1125,
	1126, 1128, 1127, 1129, 1130, 1131, 274, 275, 276, 277,
	0, 278, 500, 501, 1132, 282, 279, 280, 1133, 283,
	281, 1134, 284, 1135, 1136, 285, 286, 287, 1137, 288,
	1138, 289, 290, 1139, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 1140, 229,
	1141, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 1142, 307, 1143, 1144, 981, 308, 309,
	506, 507, 310, 311, 1145, 312, 508, 1146, 509, 313,
	1147, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	983, 319, 320, 1148, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 1149, 982, 327, 513, 514,
	1150, 515, 1151, 329, 984, 516, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	1152, 340, 339, 1153, 341, 517, 987, 342, 343, 988,
	1154, 344, 345, 346, 1155, 1156, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 1157, 231, 991, 369, 1158, 518, 370, 519,
	372, 373, 1159, 0, 374, 0, 1160, 1161, 376, 377,
	378, 1162, 1163, 379, 380, 520, 992, 381, 993, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	1164, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	1165, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 1166, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 1167,
	415, 994, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 1168, 433, 434,
	432, 435, 436, 437, 1169, 438, 422, 423, 439, 440,
	995, 441, 442, 528, 0, 443, 1170, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	1171, 455, 456, 0, 454, 1172, 457, 458, 459, 460,
	461, 297, 462, 1173, 463, 531, 532, 533, 534, 1174,
	470, 1175, 464, 465, 535, 466, 536, 1176, 467, 468,
	469, 0, 471, 472, 1177, 1178, 473, 474, 475, 477,
	478, 476, 479, 1179, 480, 1180, 0, 481, 482, 483,
	537, 538, 539, 1181, 485, 484, 540, 1182, 1183, 1184,
	1185, 486, 487, 541, 488, 489, 490, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3051, 232, 233, 234, 235, 236, 237,
	1107, 238, 239, 1108, 1109, 1110, 0, 1111, 491, 1112,
	1113, 1114, 1115, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 1116, 248, 249, 250,
	251, 252, 1117, 1118, 0, 253, 496, 497, 498, 1119,
	254, 255, 499, 1120, 1187, 1121, 256, 257, 258, 259,
	260, 261, 262, 0, 1122, 264, 265, 266, 263, 1123,
	267, 0, 268, 269, 270, 1124, 271, 980, 272, 273,
	1125, 1126, 1128, 1127, 1129, 1130, 1131, 274, 275, 276,
	277, 0, 278, 500, 501, 1132, 282, 279, 280, 1133,
	283, 281, 1134, 284, 1135, 1136, 285, 286, 287, 1137,
	288, 1138, 289, 290, 1139, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 1140,
	229, 1141, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 1142, 307, 1143, 1144, 981, 308,
	309, 506, 507, 310, 311, 1145, 312, 508, 1146, 509,
	313, 1147, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 983, 319, 320, 1148, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 1149, 982, 327, 513,
	514, 1150, 515, 1151, 329, 984, 516, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 1152, 340, 339, 1153, 341, 517, 987, 342, 343,
	988, 1154, 344, 345, 346, 1155, 1156, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 1157, 231, 991, 369, 1158, 518, 370,
	519, 372, 373, 1159, 0, 374, 0, 1160, 1161, 376,
	377, 378, 1162, 1163, 379, 380, 520, 992, 381, 993,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 1164, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 1165, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 1166, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	1167, 415, 994, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 1168, 433,
	434, 432, 435, 436, 437, 1169, 438, 422, 423, 439,
	440, 995, 441, 442, 528, 0, 443, 1170, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 1171, 455, 456, 0, 454, 1172, 457, 458, 459,
	460, 461, 297, 462, 1173, 463, 531, 532, 533, 534,
	1174, 470, 1175, 464, 465, 535, 466, 536, 1176, 467,
	468, 469, 0, 471, 472, 1177, 1178, 473, 474, 475,
	477, 478, 476, 479, 1179, 480, 1180, 0, 481, 482,
	483, 537, 538, 539, 1181, 485, 484, 540, 1182, 1183,
	1184, 1185, 486, 487, 541, 488, 489, 490, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2900, 232, 233, 234, 235, 236,
	237, 1107, 238, 239, 1108, 1109, 1110, 0, 1111, 491,
	1112, 1113, 1114, 1115, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 1116, 248, 249,
	250, 251, 252, 1117, 1118, 0, 253, 496, 497, 498,
	1119, 254, 255, 499, 1120, 1187, 1121, 256, 257, 258,
	259, 260, 261, 262, 0, 1122, 264, 265, 266, 263,
	1123, 267, 0, 268, 269, 270, 1124, 271, 980, 272,
	273, 1125, 1126, 1128, 1127, 1129, 1130, 1131, 274, 275,
	276, 277, 0, 278, 500, 501, 1132, 282, 279, 280,
	1133, 283, 281, 1134, 284, 1135, 1136, 285, 286, 287,
	1137, 288, 1138, 289, 290, 1139, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	1140, 229, 1141, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 1142, 307, 1143, 1144, 981,
	308, 309, 506, 507, 310, 311, 1145, 312, 508, 1146,
	509, 313, 1147, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 983, 319, 320, 1148, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 1149, 982, 327,
	513, 514, 1150, 515, 1151, 329, 984, 516, 985, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 1152, 340, 339, 1153, 341, 517, 987, 342,
	343, 988, 1154, 344, 345, 346, 1155, 1156, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 1157, 231, 991, 369, 1158, 518,
	370, 519, 372, 373, 1159, 0, 374, 0, 1160, 1161,
	376, 377, 378, 1162, 1163, 379, 380, 520, 992, 381,
	993, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 1164, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 1165, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 1166, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 1167, 415, 994, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 1168,
	433, 434, 432, 435, 436, 437, 1169, 438, 422, 423,
	439, 440, 995, 441, 442, 528, 0, 443, 1170, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 1171, 455, 456, 0, 454, 1172, 457, 458,
	459, 460, 461, 297, 462, 1173, 463, 531, 532, 533,
	534, 1174, 470, 1175, 464, 465, 535, 466, 536, 1176,
	467, 468, 469, 0, 471, 472, 1177, 1178, 473, 474,
	475, 477, 478, 476, 479, 1179, 480, 1180, 0, 481,
	482, 483, 537, 538, 539, 1181, 485, 484, 540, 1182,
	1183, 1184, 1185, 486, 487, 541, 488, 489, 490, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2148, 232, 233, 234, 235,
	236, 237, 1107, 238, 239, 1108, 1109, 1110, 0, 1111,
	491, 1112, 1113, 1114, 1115, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 1116, 248,
	249, 250, 251, 252, 1117, 1118, 0, 253, 496, 497,
	498, 1119, 254, 255, 499, 1120, 1187, 1121, 256, 257,
	258, 259, 260, 261, 262, 0, 1122, 264, 265, 266,
	263, 1123, 267, 0, 268, 269, 270, 1124, 271, 980,
	272, 273, 1125, 1126, 1128, 1127, 1129, 1130, 1131, 274,
	275, 276, 277, 0, 278, 500, 501, 1132, 282, 279,
	280, 1133, 283, 281, 1134, 284, 1135, 1136, 285, 286,
	287, 1137, 288, 1138, 289, 290, 1139, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 1140, 229, 1141, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 1142, 307, 1143, 1144,
	981, 308, 309, 506, 507, 310, 311, 1145, 312, 508,
	1146, 509, 313, 1147, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 983, 319, 320, 1148, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 1149, 982,
	327, 513, 514, 1150, 515, 1151, 329, 984, 516, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 1152, 340, 339, 1153, 341, 517, 987,
	342, 343, 988, 1154, 344, 345, 346, 1155, 1156, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 1157, 231, 991, 369, 1158,
	518, 370, 519, 372, 373, 1159, 0, 374, 0, 1160,
	1161, 376, 377, 378, 1162, 1163, 379, 380, 520, 992,
	381, 993, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 1164, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 1165, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 1166, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 1167, 415, 994, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	1168, 433, 434, 432, 435, 436, 437, 1169, 438, 422,
	423, 439, 440, 995, 441, 442, 528, 0, 443, 1170,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 1171, 455, 456, 0, 454, 1172, 457,
	458, 459, 460, 461, 297, 462, 1173, 463, 531, 532,
	533, 534, 1174, 470, 1175, 464, 465, 535, 466, 536,
	1176, 467, 468, 469, 0, 471, 472, 1177, 1178, 473,
	474, 475, 477, 478, 476, 479, 1179, 480, 1180, 0,
	481, 482, 483, 537, 538, 539, 1181, 485, 484, 540,
	1182, 1183, 1184, 1185, 486, 487, 541, 488, 489, 490,
	1199, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1844, 0, 0, 232,
	233, 234, 235, 236, 237, 1107, 238, 239, 1108, 1109,
	1110, 0, 1111, 491, 1112, 1113, 1114, 1115, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 1116, 248, 249, 250, 251, 252, 1117, 1118, 0,
	253, 496, 497, 498, 1119, 254, 255, 499, 1120, 1187,
	1121, 256, 257, 258, 259, 260, 261, 262, 0, 1122,
	264, 265, 266, 263, 1123, 267, 0, 268, 269, 270,
	1124, 271, 980, 272, 273, 1125, 1126, 1128, 1127, 1129,
	1130, 1131, 274, 275, 276, 277, 0, 278, 500, 501,
	1132, 282, 279, 280, 1133, 283, 281, 1134, 284, 1135,
	1136, 285, 286, 287, 1137, 288, 1138, 289, 290, 1139,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 1140, 229, 1141, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 1142,
	307, 1143, 1144, 981, 308, 309, 506, 507, 310, 311,
	1145, 312, 508, 1146, 509, 313, 1147, 314, 315, 316,
	317, 318, 510, 511, 512, 371, 983, 319, 320, 1148,
	321, 322, 323, 324, 0, 0, 0, 230, 325, 326,
	328, 1149, 982, 327, 513, 514, 1150, 515, 1151, 329,
	984, 516, 985, 330, 331, 332, 986, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 1152, 340, 339, 1153,
	341, 517, 987, 342, 343, 988, 1154, 344, 345, 346,
	1155, 1156, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	989, 363, 364, 367, 368, 366, 990, 365, 1157, 231,
	991, 369, 1158, 518, 370, 519, 372, 373, 1159, 0,
	374, 0, 1160, 1161, 376, 377, 378, 1162, 1163, 379,
	380, 520, 992, 381, 993, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 1164, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 1165, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 1166,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 1167, 415, 994, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 1168, 433, 434, 432, 435, 436, 437,
	1169, 438, 422, 423, 439, 440, 995, 441, 442, 528,
	0, 443, 1170, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 1171, 455, 456, 0,
	454, 1172, 457, 458, 459, 460, 461, 297, 462, 1173,
	463, 531, 532, 533, 534, 1174, 470, 1175, 464, 465,
	535, 466, 536, 1176, 467, 468, 469, 0, 471, 472,
	1177, 1178, 473, 474, 475, 477, 478, 476, 479, 1179,
	480, 1180, 0, 481, 482, 483, 537, 538, 539, 1181,
	485, 484, 540, 1182, 1183, 1184, 1185, 486, 487, 541,
	488, 489, 490, 1098, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 1107, 238,
	239, 1108, 1109, 1110, 0, 1111, 491, 1112, 1113, 1114,
	1115, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 1116, 248, 249, 250, 251, 252,
	1117, 1118, 0, 253, 496, 497, 498, 1119, 254, 255,
	499, 1120, 1187, 1121, 256, 257, 258, 259, 260, 261,
	262, 0, 1122, 264, 265, 266, 263, 1123, 267, 0,
	268, 269, 270, 1124, 271, 980, 272, 273, 1125, 1126,
	1128, 1127, 1129, 1130, 1131, 274, 275, 276, 277, 0,
	278, 500, 501, 1132, 282, 279, 280, 1133, 283, 281,
	1134, 284, 1135, 1136, 285, 286, 287, 1137, 288, 1138,
	289, 290, 1139, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 1140, 229, 1141,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 1142, 307, 1143, 1144, 981, 308, 309, 506,
	507, 310, 311, 1145, 312, 508, 1146, 509, 313, 1147,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 983,
	319, 320, 1148, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 1149, 982, 327, 513, 514, 1150,
	515, 1151, 329, 984, 516, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 1152,
	340, 339, 1153, 341, 517, 987, 342, 343, 988, 1154,
	344, 345, 346, 1155, 1156, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 1157, 231, 991, 369, 1158, 518, 370, 519, 372,
	373, 1159, 0, 374, 0, 1160, 1161, 376, 377, 378,
	1162, 1163, 379, 380, 520, 992, 381, 993, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 1164,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 1165,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 1166, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 1167, 415,
	994, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 1168, 433, 434, 432,
	435, 436, 437, 1169, 438, 422, 423, 439, 440, 995,
	441, 442, 528, 0, 443, 1170, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 1171,
	455, 456, 0, 454, 1172, 457, 458, 459, 460, 461,
	297, 462, 1173, 463, 531, 532, 533, 534, 1174, 470,
	1175, 464, 465, 535, 466, 536, 1176, 467, 468, 469,
	0, 471, 472, 1177, 1178, 473, 474, 475, 477, 478,
	476, 479, 1179, 480, 1180, 0, 481, 482, 483, 537,
	538, 539, 1181, 485, 484, 540, 1182, 1183, 1184, 1185,
	486, 487, 541, 488, 489, 490, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 1107,
	238, 239, 1108, 1109, 1110, 0, 1111, 491, 1112, 1113,
	1114, 1115, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 1116, 248, 249, 250, 251,
	252, 1117, 1118, 0, 253, 496, 497, 498, 1119, 254,
	255, 499, 1120, 1187, 1121, 256, 257, 258, 259, 260,
	261, 262, 0, 1122, 264, 265, 266, 263, 1123, 267,
	0, 268, 269, 270, 1124, 271, 980, 272, 273, 1125,
	1126, 1128, 1127, 1129, 1130, 1131, 274, 275, 276, 277,
	0, 278, 500, 501, 1132, 282, 279, 280, 1133, 283,
	281, 1134, 284, 1135, 1136, 285, 286, 287, 1137, 288,
	1138, 289, 290, 1139, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 1140, 229,
	1141, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 1142, 307, 1143, 1144, 981, 308, 309,
	506, 507, 310, 311, 1145, 312, 508, 1146, 509, 313,
	1147, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	983, 319, 320, 1148, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 1149, 982, 327, 513, 514,
	1150, 515, 1151, 329, 984, 516, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	1152, 340, 339, 1153, 341, 517, 987, 342, 343, 988,
	1154, 344, 345, 346, 1155, 1156, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 1157, 231, 991, 369, 1158, 518, 370, 519,
	372, 373, 1159, 0, 374, 0, 1160, 1161, 376, 377,
	378, 1162, 1163, 379, 380, 520, 992, 381, 993, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	1164, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	1165, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 1166, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 1167,
	415, 994, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 1168, 433, 434,
	432, 435, 436, 437, 1169, 438, 422, 423, 439, 440,
	995, 441, 442, 528, 0, 443, 1170, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	1171, 455, 456, 0, 454, 1172, 457, 458, 459, 460,
	461, 297, 462, 1173, 463, 531, 532, 533, 534, 1174,
	470, 1175, 464, 465, 535, 466, 536, 1176, 467, 468,
	469, 0, 471, 472, 1177, 1178, 473, 474, 475, 477,
	478, 476, 479, 1179, 480, 1180, 0, 481, 482, 483,
	537, 538, 539, 1181, 485, 484, 540, 1182, 1183, 1184,
	1185, 486, 487, 541, 488, 489, 490, 2123, 0, 917,
	889, 890, 891, 887, 888, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 2120, 238, 239, 0, 0, 0, 0, 0,
	941, 905, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 954, 0, 961, 247, 960, 0, 248,
	249, 250, 251, 252, 907, 940, 874, 253, 999, 1000,
	498, 0, 254, 255, 947, 0, 928, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 931, 929, 930, 937, 933, 932, 936, 274,
	275, 276, 277, 964, 278, 958, 957, 878, 282, 279,
	280, 0, 283, 281, 0, 284, 2121, 0, 285, 949,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 884,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 971,
	972, 896, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 956, 0, 0, 0, 306, 0, 307, 0, 0,
	981, 308, 309, 969, 970, 310, 311, 0, 312, 978,
	0, 906, 313, 0, 314, 315, 316, 317, 318, 942,
	943, 946, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 982,
	327, 951, 952, 0, 912, 0, 329, 984, 944, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 979, 987,
	342, 343, 988, 0, 344, 345, 346, 935, 934, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 875, 231, 991, 369, 897,
	945, 370, 959, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 973, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 974, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 955, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 885,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 938, 438, 422,
	423, 439, 440, 995, 441, 442, 953, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 998, 449, 450,
	451, 452, 975, 0, 455, 456, 873, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 965, 966,
	967, 968, 0, 470, 0, 464, 465, 976, 466, 977,
	895, 467, 468, 469, 0, 471, 472, 0, 879, 473,
	474, 475, 477, 478, 476, 479, 939, 480, 0, 0,
	481, 482, 483, 537, 962, 997, 2119, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	876, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 870, 871, 2122, 0, 0, 0,
	0, 0, 0, 901, 2118, 0, 863, 899, 917, 889,
	890, 891, 887, 888, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 941,
	905, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 954, 0, 961, 247, 960, 0, 248, 249,
	250, 251, 252, 907, 940, 874, 253, 999, 1000, 498,
	0, 254, 255, 947, 0, 928, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 980, 272,
	273, 931, 929, 930, 937, 933, 932, 936, 274, 275,
	276, 277, 964, 278, 958, 957, 878, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 949, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 884, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 971, 972,
	896, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	956, 0, 0, 0, 306, 0, 307, 0, 0, 981,
	308, 309, 969, 970, 310, 311, 0, 312, 978, 0,
	906, 313, 0, 314, 315, 316, 317, 318, 942, 943,
	946, 371, 983, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 982, 327,
	951, 952, 0, 912, 0, 329, 984, 944, 985, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 979, 987, 342,
	343, 988, 0, 344, 345, 346, 935, 934, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 875, 231, 991, 369, 897, 945,
	370, 959, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 992, 381,
	993, 973, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 974, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 955, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 994, 416, 417, 418, 419, 885, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 192,
	433, 434, 432, 435, 436, 437, 938, 438, 422, 423,
	439, 440, 995, 441, 442, 953, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 998, 449, 450, 451,
	452, 975, 0, 455, 456, 873, 454, 194, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 965, 966, 967,
	968, 0, 470, 0, 464, 465, 976, 466, 977, 895,
	467, 468, 469, 0, 471, 472, 0, 879, 473, 474,
	475, 477, 478, 476, 479, 939, 480, 0, 0, 481,
	482, 483, 1356, 962, 997, 0, 485, 484, 540, 0,
	0, 0, 186, 486, 487, 541, 488, 489, 490, 876,
	187, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 870, 871, 917, 889, 890, 891, 887,
	888, 900, 1567, 1565, 0, 0, 899, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 941, 905, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 954,
	0, 961, 247, 960, 0, 248, 249, 250, 251, 252,
	907, 940, 874, 253, 999, 1000, 498, 0, 254, 255,
	947, 0, 928, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 980, 272, 273, 931, 929,
	930, 937, 933, 932, 936, 274, 275, 276, 277, 964,
	278, 958, 957, 878, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 949, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 884, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 971, 972, 896, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 956, 0, 0,
	0, 306, 0, 307, 0, 0, 981, 308, 309, 969,
	970, 310, 311, 0, 312, 978, 0, 906, 313, 0,
	314, 315, 316, 317, 318, 942, 943, 946, 371, 983,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 982, 327, 951, 952, 0,
	912, 0, 329, 984, 944, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 979, 987, 342, 343, 988, 0,
	344, 345, 346, 935, 934, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 875, 231, 991, 369, 897, 945, 370, 959, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 992, 381, 993, 973, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 974, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 955,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	994, 416, 417, 418, 419, 885, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 192, 433, 434, 432,
	435, 436, 437, 938, 438, 422, 423, 439, 440, 995,
	441, 442, 953, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 998, 449, 450, 451, 452, 975, 0,
	455, 456, 873, 454, 194, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 965, 966, 967, 968, 0, 470,
	0, 464, 465, 976, 466, 977, 895, 467, 468, 469,
	0, 471, 472, 0, 879, 473, 474, 475, 477, 478,
	476, 479, 939, 480, 0, 0, 481, 482, 483, 1356,
	962, 997, 0, 485, 484, 540, 0, 0, 0, 186,
	486, 487, 541, 488, 489, 490, 876, 187, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	870, 871, 917, 889, 890, 891, 887, 888, 900, 1567,
	2622, 0, 0, 899, 0, 0, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 941, 905, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 954, 0, 961, 247,
	960, 0, 248, 249, 250, 251, 252, 907, 940, 874,
	253, 999, 1000, 498, 0, 254, 255, 947, 0, 928,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 980, 272, 273, 931, 929, 930, 937, 933,
	932, 936, 274, 275, 276, 277, 964, 278, 958, 957,
	878, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 949, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 884, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 971, 972, 896, 229, 0, 0, 0, 0,
	0, 303, 304, 305, 956, 0, 0, 0, 306, 0,
	307, 0, 0, 981, 308, 309, 969, 970, 310, 311,
	0, 312, 978, 0, 906, 313, 0, 314, 315, 316,
	317, 318, 942, 943, 946, 371, 983, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 230, 325, 326,
	328, 0, 982, 327, 951, 952, 0, 912, 0, 329,
	984, 944, 985, 330, 331, 332, 986, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 979, 987, 342, 343, 988, 0, 344, 345, 346,
	935, 934, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	989, 363, 364, 367, 368, 366, 990, 365, 875, 231,
	991, 369, 897, 945, 370, 959, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 992, 381, 993, 973, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 974, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 955, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 994, 416, 417,
	418, 419, 885, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 192, 433, 434, 432, 435, 436, 437,
	938, 438, 422, 423, 439, 440, 995, 441, 442, 953,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	998, 449, 450, 451, 452, 975, 0, 455, 456, 873,
	454, 194, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 965, 966, 967, 968, 0, 470, 0, 464, 465,
	976, 466, 977, 895, 467, 468, 469, 0, 471, 472,
	0, 879, 473, 474, 475, 477, 478, 476, 479, 939,
	480, 0, 0, 481, 482, 483, 1356, 962, 997, 0,
	485, 484, 540, 0, 0, 0, 186, 486, 487, 541,
	488, 489, 490, 876, 187, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 870, 871, 917,
	889, 890, 891, 887, 888, 900, 1567, 1565, 0, 0,
	899, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	941, 905, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 954, 0, 961, 247, 960, 2227, 248,
	249, 250, 251, 252, 907, 940, 874, 253, 999, 1000,
	498, 0, 254, 255, 947, 0, 928, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 931, 929, 930, 937, 933, 932, 936, 274,
	275, 276, 277, 964, 278, 958, 957, 878, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 949,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 884,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 971,
	972, 896, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 956, 0, 0, 0, 306, 0, 307, 0, 2232,
	981, 308, 309, 969, 970, 310, 311, 0, 312, 978,
	0, 906, 313, 0, 314, 315, 316, 317, 318, 942,
	943, 946, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 982,
	327, 951, 952, 0, 912, 0, 329, 984, 944, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 2228, 341, 979, 987,
	342, 343, 988, 0, 344, 345, 346, 935, 934, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 875, 231, 991, 369, 897,
	945, 370, 959, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 973, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 974, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 955, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 885,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 938, 438, 422,
	423, 439, 440, 995, 441, 442, 953, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 998, 449, 450,
	451, 452, 975, 0, 455, 456, 873, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 965, 966,
	967, 968, 0, 470, 2229, 464, 465, 976, 466, 977,
	895, 467, 468, 469, 0, 471, 472, 0, 879, 473,
	474, 475, 477, 478, 476, 479, 939, 480, 0, 0,
	481, 482, 483, 537, 962, 997, 0, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	876, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 870, 871, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 2168, 899, 917, 889,
	890, 891, 887, 888, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 941,
	905, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 954, 0, 961, 247, 960, 0, 248, 249,
	250, 251, 252, 907, 940, 874, 253, 999, 1000, 498,
	0, 254, 255, 947, 0, 928, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 980, 272,
	273, 931, 929, 930, 937, 933, 932, 936, 274, 275,
	276, 277, 964, 278, 958, 957, 878, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 949, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 884, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 971, 972,
	896, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	956, 0, 0, 0, 306, 0, 307, 0, 0, 981,
	308, 309, 969, 970, 310, 311, 0, 312, 978, 0,
	906, 313, 0, 314, 315, 316, 317, 318, 942, 943,
	946, 371, 983, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 982, 327,
	951, 952, 0, 912, 0, 329, 984, 944, 985, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 979, 987, 342,
	343, 988, 0, 344, 345, 346, 935, 934, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 875, 231, 991, 369, 897, 945,
	370, 959, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 992, 381,
	993, 973, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 974, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 955, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 994, 416, 417, 418, 419, 885, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 938, 438, 422, 423,
	439, 440, 995, 441, 442, 953, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 998, 449, 450, 451,
	452, 975, 0, 455, 456, 873, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 965, 966, 967,
	968, 0, 470, 0, 464, 465, 976, 466, 977, 895,
	467, 468, 469, 0, 471, 472, 0, 879, 473, 474,
	475, 477, 478, 476, 479, 939, 480, 0, 0, 481,
	482, 483, 537, 962, 997, 0, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 876,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 870, 871, 0, 0, 0, 0, 0,
	0, 0, 901, 2166, 0, 2165, 899, 917, 889, 890,
	891, 887, 888, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 941, 905,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 954, 0, 961, 247, 960, 0, 248, 249, 250,
	251, 252, 907, 940, 874, 253, 999, 1000, 498, 0,
	254, 255, 947, 0, 928, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	931, 929, 930, 937, 933, 932, 936, 274, 275, 276,
	277, 964, 278, 958, 957, 878, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 949, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 884, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 971, 972, 896,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 956,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 969, 970, 310, 311, 0, 312, 978, 0, 906,
	313, 0, 314, 315, 316, 317, 318, 942, 943, 946,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 982, 327, 951,
	952, 0, 912, 0, 329, 984, 944, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 979, 987, 342, 343,
	988, 0, 344, 345, 346, 935, 934, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 875, 231, 991, 369, 897, 945, 370,
	959, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	973, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 974, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 955, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 885, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 938, 438, 422, 423, 439,
	440, 995, 441, 442, 953, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 998, 449, 450, 451, 452,
	975, 0, 455, 456, 873, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 965, 966, 967, 968,
	0, 470, 0, 464, 465, 976, 466, 977, 895, 467,
	468, 469, 0, 471, 472, 0, 879, 473, 474, 475,
	477, 478, 476, 479, 939, 480, 0, 0, 481, 482,
	483, 537, 962, 997, 0, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 876, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 870, 871, 0, 0, 0, 0, 0, 0,
	0, 901, 2163, 0, 2162, 899, 917, 889, 890, 891,
	887, 888, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 941, 905, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	954, 0, 961, 247, 960, 0, 248, 249, 250, 251,
	252, 907, 940, 874, 253, 999, 1000, 498, 0, 254,
	255, 947, 0, 928, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 980, 272, 273, 931,
	929, 930, 937, 933, 932, 936, 274, 275, 276, 277,
	964, 278, 958, 957, 878, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 949, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 884, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 971, 972, 896, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 956, 0,
	0, 0, 306, 0, 307, 0, 0, 981, 308, 309,
	969, 970, 310, 311, 0, 312, 978, 0, 906, 313,
	0, 314, 315, 316, 317, 318, 942, 943, 946, 371,
	983, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 0, 982, 327, 951, 952,
	0, 912, 0, 329, 984, 944, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 979, 987, 342, 343, 988,
	0, 344, 345, 346, 935, 934, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 875, 231, 991, 369, 897, 945, 370, 959,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 992, 381, 993, 973,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 974, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	955, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 994, 416, 417, 418, 419, 885, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 938, 438, 422, 423, 439, 440,
	995, 441, 442, 953, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 998, 449, 450, 451, 452, 975,
	0, 455, 456, 873, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 965, 966, 967, 968, 0,
	470, 0, 464, 465, 976, 466, 977, 895, 467, 468,
	469, 0, 471, 472, 0, 879, 473, 474, 475, 477,
	478, 476, 479, 939, 480, 0, 0, 481, 482, 483,
	537, 962, 997, 0, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 876, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 870, 871, 0, 0, 0, 0, 0, 0, 0,
	901, 2160, 0, 2159, 899, 917, 889, 890, 891, 887,
	888, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 941, 905, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 954,
	0, 961, 247, 960, 0, 248, 249, 250, 251, 252,
	907, 940, 874, 253, 999, 1000, 498, 0, 254, 255,
	947, 0, 928, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 980, 272, 273, 931, 929,
	930, 937, 933, 932, 936, 274, 275, 276, 277, 964,
	278, 958, 957, 878, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 949, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 884, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 971, 972, 896, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 956, 0, 0,
	0, 306, 0, 307, 0, 0, 981, 308, 309, 969,
	970, 310, 311, 0, 312, 978, 0, 906, 313, 0,
	314, 315, 316, 317, 318, 942, 943, 946, 371, 983,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 982, 327, 951, 952, 0,
	912, 0, 329, 984, 944, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 979, 987, 342, 343, 988, 0,
	344, 345, 346, 935, 934, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 875, 231, 991, 369, 897, 945, 370, 959, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 992, 381, 993, 973, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 974, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 955,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	994, 416, 417, 418, 419, 885, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 938, 438, 422, 423, 439, 440, 995,
	441, 442, 953, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 998, 449, 450, 451, 452, 975, 0,
	455, 456, 873, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 965, 966, 967, 968, 0, 470,
	0, 464, 465, 976, 466, 977, 895, 467, 468, 469,
	0, 471, 472, 0, 879, 473, 474, 475, 477, 478,
	476, 479, 939, 480, 0, 0, 481, 482, 483, 537,
	962, 997, 0, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 489, 490, 876, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	870, 871, 0, 0, 0, 0, 0, 0, 0, 901,
	2157, 0, 1425, 899, 917, 889, 890, 891, 887, 888,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 941, 905, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 954, 0,
	961, 247, 960, 0, 248, 249, 250, 251, 252, 907,
	940, 874, 253, 999, 1000, 498, 0, 254, 255, 947,
	0, 928, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 980, 272, 273, 931, 929, 930,
	937, 933, 932, 936, 274, 275, 276, 277, 964, 278,
	958, 957, 878, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 949, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 884, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 971, 972, 896, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 956, 0, 0, 0,
	306, 0, 307, 0, 0, 981, 308, 309, 969, 970,
	310, 311, 0, 312, 978, 0, 906, 313, 0, 314,
	315, 316, 317, 318, 942, 943, 946, 371, 983, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 982, 327, 951, 952, 0, 912,
	0, 329, 984, 944, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 979, 987, 342, 343, 988, 0, 344,
	345, 346, 935, 934, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	875, 231, 991, 369, 897, 945, 370, 959, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 992, 381, 993, 973, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 974, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 955, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 994,
	416, 417, 418, 419, 885, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 938, 438, 422, 423, 439, 440, 995, 441,
	442, 953, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 998, 449, 450, 451, 452, 975, 0, 455,
	456, 873, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 965, 966, 967, 968, 0, 470, 0,
	464, 465, 976, 466, 977, 895, 467, 468, 469, 0,
	471, 472, 0, 879, 473, 474, 475, 477, 478, 476,
	479, 939, 480, 0, 0, 481, 482, 483, 537, 962,
	997, 0, 485, 484, 540, 1424, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 876, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 870,
	871, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 866, 899, 917, 889, 890, 891, 887, 888, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 941, 905, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 954, 0, 961,
	247, 960, 0, 248, 249, 250, 251, 252, 907, 940,
	874, 253, 999, 1000, 498, 0, 254, 255, 947, 0,
	928, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 980, 272, 273, 931, 929, 930, 937,
	933, 932, 936, 274, 275, 276, 277, 964, 278, 958,
	957, 878, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 949, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 884, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 971, 972, 896, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 956, 0, 0, 0, 306,
	0, 307, 0, 0, 981, 308, 309, 969, 970, 310,
	311, 0, 312, 978, 0, 906, 313, 0, 314, 315,
	316, 317, 318, 942, 943, 946, 371, 983, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 982, 327, 951, 952, 0, 912, 0,
	329, 984, 944, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 979, 987, 342, 343, 988, 0, 344, 345,
	346, 935, 934, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 875,
	231, 991, 369, 897, 945, 370, 959, 372, 373, 0,
	0, 374, 0, 880, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 992, 381, 993, 973, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 974, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 955, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 994, 416,
	417, 418, 419, 885, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 938, 438, 422, 423, 439, 440, 995, 441, 442,
	953, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 998, 449, 450, 451, 452, 975, 0, 455, 456,
	873, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 965, 966, 967, 968, 0, 470, 0, 464,
	465, 976, 466, 977, 895, 467, 468, 469, 0, 471,
	472, 0, 879, 473, 474, 475, 477, 478, 476, 479,
	939, 480, 0, 0, 481, 482, 483, 537, 962, 997,
	0, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 876, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 870, 871,
	917, 889, 890, 891, 887, 888, 900, 901, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 941, 905, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 954, 0, 961, 247, 960, 0,
	248, 249, 250, 251, 252, 907, 940, 874, 253, 999,
	1000, 498, 0, 254, 255, 947, 0, 928, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 3749, 270, 0, 271,
	980, 272, 273, 931, 929, 930, 937, 933, 932, 936,
	274, 275, 276, 277, 964, 278, 958, 957, 878, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	949, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	884, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	971, 972, 896, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 956, 0, 0, 0, 306, 0, 307, 0,
	0, 981, 308, 309, 969, 970, 310, 311, 0, 312,
	978, 0, 906, 313, 0, 314, 315, 316, 317, 318,
	942, 943, 946, 371, 983, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 230, 325, 326, 328, 0,
	982, 327, 951, 952, 0, 912, 0, 329, 984, 944,
	985, 330, 331, 332, 986, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 979,
	987, 342, 343, 988, 0, 344, 345, 346, 935, 934,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 989, 363,
	364, 367, 368, 366, 990, 365, 875, 231, 991, 369,
	897, 945, 370, 959, 372, 373, 0, 0, 374, 0,
	880, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	992, 381, 993, 973, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 974,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 955, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 994, 416, 417, 418, 419,
	885, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 938, 438,
	422, 423, 439, 440, 995, 441, 442, 953, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 998, 449,
	450, 451, 452, 975, 0, 455, 456, 873, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 965,
	966, 967, 968, 0, 470, 0, 464, 465, 976, 466,
	977, 895, 467, 468, 469, 0, 471, 472, 0, 879,
	473, 474, 475, 477, 478, 476, 479, 939, 480, 0,
	0, 481, 482, 483, 537, 962, 997, 0, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 876, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 870, 871, 917, 889, 890,
	891, 887, 888, 900, 901, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 941, 905,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 954, 0, 961, 247, 960, 0, 248, 249, 250,
	251, 252, 907, 940, 874, 253, 999, 1000, 498, 0,
	254, 255, 947, 0, 928, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	931, 929, 930, 937, 933, 932, 936, 274, 275, 276,
	277, 964, 278, 958, 957, 878, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 949, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 884, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 971, 972, 896,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 956,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 969, 970, 310, 311, 0, 312, 978, 0, 906,
	313, 0, 314, 315, 316, 317, 318, 942, 943, 946,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 2037, 325, 326, 328, 0, 982, 327, 951,
	952, 0, 912, 0, 329, 984, 944, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 979, 987, 342, 343,
	988, 0, 344, 345, 346, 935, 934, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 875, 231, 991, 369, 897, 945, 370,
	959, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	973, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 974, 393, 525, 394,
	395, 2036, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 955, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 885, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 938, 438, 422, 423, 439,
	440, 995, 441, 442, 953, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 998, 449, 450, 451, 452,
	975, 0, 455, 456, 873, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 965, 966, 967, 968,
	0, 470, 0, 464, 465, 976, 466, 977, 895, 467,
	468, 469, 0, 471, 472, 0, 879, 473, 474, 475,
	477, 478, 476, 479, 939, 480, 0, 0, 481, 482,
	483, 537, 962, 997, 0, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 876, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 870, 871, 917, 889, 890, 891, 887, 888,
	900, 901, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 941, 905, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 954, 0,
	961, 247, 960, 0, 248, 249, 250, 251, 252, 907,
	940, 874, 253, 999, 1000, 498, 0, 254, 255, 947,
	0, 928, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	3557, 270, 0, 271, 980, 272, 273, 931, 929, 930,
	937, 933, 932, 936, 274, 275, 276, 277, 964, 278,
	958, 957, 878, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 949, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 884, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 971, 972, 896, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 956, 0, 0, 0,
	306, 0, 307, 0, 0, 981, 308, 309, 969, 970,
	310, 311, 0, 312, 978, 0, 906, 313, 0, 314,
	315, 316, 317, 318, 942, 943, 946, 371, 983, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 982, 327, 951, 952, 0, 912,
	0, 329, 984, 944, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 979, 987, 342, 343, 988, 0, 344,
	345, 346, 935, 934, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	875, 231, 991, 369, 897, 945, 370, 959, 372, 373,
	0, 0, 374, 0, 880, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 992, 381, 993, 973, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 974, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 955, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 994,
	416, 417, 418, 419, 885, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 938, 438, 422, 423, 439, 440, 995, 441,
	442, 953, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 998, 449, 450, 451, 452, 975, 0, 455,
	456, 873, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 965, 966, 967, 968, 0, 470, 0,
	464, 465, 976, 466, 977, 895, 467, 468, 469, 0,
	471, 472, 0, 879, 473, 474, 475, 477, 478, 476,
	479, 939, 480, 0, 0, 481, 482, 483, 537, 962,
	997, 0, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 876, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 870,
	871, 917, 889, 890, 891, 887, 888, 900, 901, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 941, 905, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 954, 0, 961, 247, 960,
	0, 248, 249, 250, 251, 252, 907, 940, 874, 253,
	999, 1000, 498, 0, 254, 255, 947, 0, 928, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 980, 272, 273, 931, 929, 930, 937, 933, 932,
	936, 274, 275, 276, 277, 964, 278, 958, 957, 878,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 949, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 884, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 971, 972, 896, 229, 0, 0, 0, 0, 0,
	303, 304, 305, 956, 0, 0, 0, 306, 0, 307,
	0, 0, 981, 308, 309, 969, 970, 310, 311, 0,
	312, 978, 0, 906, 313, 0, 314, 315, 316, 317,
	318, 942, 943, 946, 371, 983, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 230, 325, 326, 328,
	0, 982, 327, 951, 952, 0, 912, 0, 329, 984,
	944, 985, 330, 331, 332, 986, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	979, 987, 342, 343, 988, 0, 344, 345, 346, 935,
	934, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 989,
	363, 364, 367, 368, 366, 990, 365, 875, 3248, 991,
	369, 897, 945, 370, 959, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 992, 381, 993, 973, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	974, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 955, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 994, 416, 417, 418,
	419, 885, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 938,
	438, 422, 423, 439, 440, 995, 441, 442, 953, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 998,
	449, 450, 451, 452, 975, 0, 455, 456, 873, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	965, 966, 967, 968, 0, 470, 0, 464, 465, 976,
	466, 977, 895, 467, 468, 469, 0, 471, 472, 0,
	879, 473, 474, 475, 477, 478, 476, 479, 939, 480,
	0, 0, 481, 482, 483, 537, 962, 997, 0, 485,
	484, 540, 0, 0, 0, 0, 486, 487, 541, 488,
	489, 490, 876, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 870, 871, 1635, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 0, 899,
	917, 889, 890, 891, 887, 888, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 941, 905, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 954, 0, 961, 247, 960, 0,
	248, 249, 250, 251, 252, 907, 940, 874, 253, 999,
	1000, 498, 0, 254, 255, 947, 0, 928, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	980, 272, 273, 931, 929, 930, 937, 933, 932, 936,
	274, 275, 276, 277, 964, 278, 958, 957, 878, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	949, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	884, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	971, 972, 896, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 956, 0, 0, 0, 306, 0, 307, 0,
	0, 981, 308, 309, 969, 970, 310, 311, 0, 312,
	978, 0, 906, 313, 0, 314, 315, 316, 317, 318,
	942, 943, 946, 371, 983, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 230, 325, 326, 328, 0,
	982, 327, 951, 952, 0, 912, 0, 329, 984, 944,
	985, 330, 331, 332, 986, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 979,
	987, 342, 343, 988, 0, 344, 345, 346, 935, 934,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 989, 363,
	364, 367, 368, 366, 990, 365, 875, 231, 991, 369,
	897, 945, 370, 959, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	992, 381, 993, 973, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 974,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 955, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 994, 416, 417, 418, 419,
	885, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 938, 438,
	422, 423, 439, 440, 995, 441, 442, 953, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 998, 449,
	450, 451, 452, 975, 0, 455, 456, 873, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 965,
	966, 967, 968, 0, 470, 0, 464, 465, 976, 466,
	977, 895, 467, 468, 469, 0, 471, 472, 0, 879,
	473, 474, 475, 477, 478, 476, 479, 939, 480, 0,
	0, 481, 482, 483, 537, 962, 997, 3029, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 876, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 870, 871, 917, 889, 890,
	891, 887, 888, 900, 901, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 941, 905,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 954, 0, 961, 247, 960, 0, 248, 249, 250,
	251, 252, 907, 940, 874, 253, 999, 1000, 498, 0,
	254, 255, 947, 0, 928, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	931, 929, 930, 937, 933, 932, 936, 274, 275, 276,
	277, 964, 278, 958, 957, 878, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 949, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 884, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 971, 972, 896,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 956,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 969, 970, 310, 311, 0, 312, 978, 0, 906,
	313, 0, 314, 315, 316, 317, 318, 942, 943, 946,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 982, 327, 951,
	952, 0, 912, 0, 329, 984, 944, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 979, 987, 342, 343,
	988, 0, 344, 345, 346, 935, 934, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 875, 231, 991, 369, 897, 945, 370,
	959, 372, 373, 0, 0, 374, 0, 880, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	973, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 974, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 955, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 885, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 938, 438, 422, 423, 439,
	440, 995, 441, 442, 953, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 998, 449, 450, 451, 452,
	975, 0, 455, 456, 873, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 965, 966, 967, 968,
	0, 470, 0, 464, 465, 976, 466, 977, 895, 467,
	468, 469, 0, 471, 472, 0, 879, 473, 474, 475,
	477, 478, 476, 479, 939, 480, 0, 0, 481, 482,
	483, 537, 962, 997, 0, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 876, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 870, 871, 917, 889, 890, 891, 887, 888,
	900, 901, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 941, 905, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 954, 0,
	961, 247, 960, 0, 248, 249, 250, 251, 252, 907,
	940, 874, 253, 999, 1000, 498, 0, 254, 255, 947,
	0, 928, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 980, 272, 273, 931, 929, 930,
	937, 933, 932, 936, 274, 275, 276, 277, 964, 278,
	958, 957, 878, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 949, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 884, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 971, 972, 896, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 956, 0, 0, 0,
	306, 0, 307, 0, 0, 981, 308, 309, 969, 970,
	310, 311, 0, 312, 978, 0, 906, 313, 0, 314,
	315, 316, 317, 318, 942, 943, 946, 371, 983, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 982, 327, 951, 952, 0, 912,
	0, 329, 984, 944, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 979, 987, 342, 343, 988, 0, 344,
	345, 346, 935, 934, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	875, 231, 991, 369, 897, 945, 370, 959, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 992, 381, 993, 973, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 974, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 955, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 994,
	416, 417, 418, 419, 885, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 938, 438, 422, 423, 439, 440, 995, 441,
	442, 953, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 998, 449, 450, 451, 452, 975, 0, 455,
	456, 873, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 965, 966, 967, 968, 0, 470, 0,
	464, 465, 976, 466, 977, 895, 467, 468, 469, 0,
	471, 472, 0, 879, 473, 474, 475, 477, 478, 476,
	479, 939, 480, 0, 0, 481, 482, 483, 537, 962,
	997, 0, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 876, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 870,
	871, 1635, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 899, 917, 889, 890, 891, 887, 888, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 941, 905, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 954, 0, 961,
	247, 960, 0, 248, 249, 250, 251, 252, 907, 940,
	874, 253, 999, 1000, 498, 0, 254, 255, 947, 0,
	928, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 980, 272, 273, 931, 929, 930, 937,
	933, 932, 936, 274, 275, 276, 277, 964, 278, 958,
	957, 878, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 949, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 884, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 971, 972, 896, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 956, 0, 0, 0, 306,
	0, 307, 0, 2232, 981, 308, 309, 969, 970, 310,
	311, 0, 312, 978, 0, 906, 313, 0, 314, 315,
	316, 317, 318, 942, 943, 946, 371, 983, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 982, 327, 951, 952, 0, 912, 0,
	329, 984, 944, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 979, 987, 342, 343, 988, 0, 344, 345,
	346, 935, 934, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 875,
	231, 991, 369, 897, 945, 370, 959, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 992, 381, 993, 973, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 974, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 955, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 994, 416,
	417, 418, 419, 885, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 938, 438, 422, 423, 439, 440, 995, 441, 442,
	953, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 998, 449, 450, 451, 452, 975, 0, 455, 456,
	873, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 965, 966, 967, 968, 0, 470, 0, 464,
	465, 976, 466, 977, 895, 467, 468, 469, 0, 471,
	472, 0, 879, 473, 474, 475, 477, 478, 476, 479,
	939, 480, 0, 0, 481, 482, 483, 537, 962, 997,
	0, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 876, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 870, 871,
	917, 889, 890, 891, 887, 888, 900, 901, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 941, 905, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 954, 0, 961, 247, 960, 0,
	248, 249, 250, 251, 252, 907, 940, 874, 253, 999,
	1000, 498, 0, 254, 255, 947, 0, 928, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	980, 272, 273, 931, 929, 930, 937, 933, 932, 936,
	274, 275, 276, 277, 964, 278, 958, 957, 878, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	949, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	884, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	971, 972, 896, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 956, 0, 0, 0, 306, 0, 307, 0,
	0, 981, 308, 309, 969, 970, 310, 311, 0, 312,
	978, 0, 906, 313, 0, 314, 315, 316, 317, 318,
	942, 943, 946, 371, 983, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 230, 325, 326, 328, 0,
	982, 327, 951, 952, 0, 912, 0, 329, 984, 944,
	985, 330, 331, 332, 986, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 979,
	987, 342, 343, 988, 0, 344, 345, 346, 935, 934,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 989, 363,
	364, 367, 368, 366, 990, 365, 875, 231, 991, 369,
	897, 945, 370, 959, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	992, 381, 993, 973, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 974,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 955, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 994, 416, 417, 418, 419,
	885, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 938, 438,
	422, 423, 439, 440, 995, 441, 442, 953, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 998, 449,
	450, 451, 452, 975, 0, 455, 456, 873, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 965,
	966, 967, 968, 0, 470, 0, 464, 465, 976, 466,
	977, 895, 467, 468, 469, 0, 471, 472, 0, 879,
	473, 474, 475, 477, 478, 476, 479, 939, 480, 0,
	0, 481, 482, 483, 537, 962, 997, 0, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 876, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 870, 871, 0, 0, 0,
	0, 0, 0, 0, 901, 1565, 0, 2237, 899, 917,
	889, 890, 891, 887, 888, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	941, 905, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 954, 0, 961, 247, 960, 0, 248,
	249, 250, 251, 252, 907, 940, 874, 253, 999, 1000,
	498, 0, 254, 255, 947, 0, 928, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 931, 929, 930, 937, 933, 932, 936, 274,
	275, 276, 277, 964, 278, 958, 957, 878, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 949,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 884,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 971,
	972, 896, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 956, 0, 0, 0, 306, 0, 307, 0, 0,
	981, 308, 309, 969, 970, 310, 311, 0, 312, 978,
	0, 906, 313, 0, 314, 315, 316, 317, 318, 942,
	943, 946, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 982,
	327, 951, 952, 0, 912, 0, 329, 984, 944, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 979, 987,
	342, 343, 988, 0, 344, 345, 346, 935, 934, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 875, 231, 991, 369, 897,
	945, 370, 959, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 973, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 974, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 955, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 885,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 938, 438, 422,
	423, 439, 440, 995, 441, 442, 953, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 998, 449, 450,
	451, 452, 975, 0, 455, 456, 873, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 965, 966,
	967, 968, 0, 470, 0, 464, 465, 976, 466, 977,
	895, 467, 468, 469, 0, 471, 472, 0, 879, 473,
	474, 475, 477, 478, 476, 479, 939, 480, 0, 0,
	481, 482, 483, 537, 962, 997, 0, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	876, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 870, 871, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 2235, 899, 917, 889,
	890, 891, 887, 888, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 941,
	905, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 954, 0, 961, 247, 960, 0, 248, 249,
	250, 251, 252, 907, 940, 874, 253, 999, 1000, 498,
	0, 254, 255, 947, 0, 928, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 980, 272,
	273, 931, 929, 930, 937, 933, 932, 936, 274, 275,
	276, 277, 964, 278, 958, 957, 878, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 949, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 884, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 971, 972,
	896, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	956, 0, 0, 0, 306, 0, 307, 0, 0, 981,
	308, 309, 969, 970, 310, 311, 0, 312, 978, 0,
	906, 313, 0, 314, 315, 316, 317, 318, 942, 943,
	946, 371, 983, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 982, 327,
	951, 952, 0, 912, 0, 329, 984, 944, 985, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 979, 987, 342,
	343, 988, 0, 344, 345, 346, 935, 934, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 875, 231, 991, 369, 897, 945,
	370, 959, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 992, 381,
	993, 973, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 974, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 955, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 994, 416, 417, 418, 419, 885, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 938, 438, 422, 423,
	439, 440, 995, 441, 442, 953, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 998, 449, 450, 451,
	452, 975, 0, 455, 456, 873, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 965, 966, 967,
	968, 0, 470, 0, 464, 465, 976, 466, 977, 895,
	467, 468, 469, 0, 471, 472, 0, 879, 473, 474,
	475, 477, 478, 476, 479, 939, 480, 0, 0, 481,
	482, 483, 537, 962, 997, 0, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 876,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 870, 871, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 2223, 899, 917, 889, 890,
	891, 887, 888, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 941, 905,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 954, 0, 961, 247, 960, 0, 248, 249, 250,
	251, 252, 907, 940, 874, 253, 999, 1000, 498, 0,
	254, 255, 947, 0, 928, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	931, 929, 930, 937, 933, 932, 936, 274, 275, 276,
	277, 964, 278, 958, 957, 878, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 949, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 884, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 971, 972, 896,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 956,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 969, 970, 310, 311, 0, 312, 978, 0, 906,
	313, 0, 314, 315, 316, 317, 318, 942, 943, 946,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 982, 327, 951,
	952, 0, 912, 0, 329, 984, 944, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 979, 987, 342, 343,
	988, 0, 344, 345, 346, 935, 934, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 875, 231, 991, 369, 897, 945, 370,
	959, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	973, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 974, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 955, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 885, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 938, 438, 422, 423, 439,
	440, 995, 441, 442, 953, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 998, 449, 450, 451, 452,
	975, 0, 455, 456, 873, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 965, 966, 967, 968,
	0, 470, 0, 464, 465, 976, 466, 977, 895, 467,
	468, 469, 0, 471, 472, 0, 879, 473, 474, 475,
	477, 478, 476, 479, 939, 480, 0, 0, 481, 482,
	483, 537, 962, 997, 0, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 876, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 870, 871, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 0, 2212, 899, 917, 889, 890, 891,
	887, 888, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 941, 905, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	954, 0, 961, 247, 960, 0, 248, 249, 250, 251,
	252, 907, 940, 874, 253, 999, 1000, 498, 0, 254,
	255, 947, 0, 928, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 980, 272, 273, 931,
	929, 930, 937, 933, 932, 936, 274, 275, 276, 277,
	964, 278, 958, 957, 878, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 949, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 884, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 971, 972, 896, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 956, 0,
	0, 0, 306, 0, 307, 0, 0, 981, 308, 309,
	969, 970, 310, 311, 0, 312, 978, 0, 906, 313,
	0, 314, 315, 316, 317, 318, 942, 943, 946, 371,
	983, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 0, 982, 327, 951, 952,
	0, 912, 0, 329, 984, 944, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 979, 987, 342, 343, 988,
	0, 344, 345, 346, 935, 934, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 875, 231, 991, 369, 897, 945, 370, 959,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 992, 381, 993, 973,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 974, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	955, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 994, 416, 417, 418, 419, 885, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 938, 438, 422, 423, 439, 440,
	995, 441, 442, 953, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 998, 449, 450, 451, 452, 975,
	0, 455, 456, 873, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 965, 966, 967, 968, 0,
	470, 0, 464, 465, 976, 466, 977, 895, 467, 468,
	469, 0, 471, 472, 0, 879, 473, 474, 475, 477,
	478, 476, 479, 939, 480, 0, 0, 481, 482, 483,
	537, 962, 997, 0, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 876, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 870, 871, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 2210, 899, 2201, 2208, 890, 891, 887,
	888, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 941, 905, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 954,
	0, 961, 247, 960, 0, 248, 249, 250, 251, 252,
	907, 940, 874, 253, 999, 1000, 498, 0, 254, 255,
	947, 0, 928, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 980, 272, 273, 931, 929,
	930, 937, 933, 932, 936, 274, 275, 276, 277, 964,
	2204, 958, 957, 878, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 949, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 884, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 971, 972, 896, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 956, 0, 0,
	0, 306, 0, 307, 0, 0, 981, 308, 309, 969,
	970, 310, 311, 0, 312, 978, 0, 906, 313, 0,
	314, 315, 316, 2205, 318, 942, 943, 946, 371, 983,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 982, 327, 951, 952, 0,
	912, 0, 329, 984, 944, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 979, 987, 342, 343, 988, 0,
	344, 345, 346, 935, 934, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 2206, 2203, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 875, 231, 991, 369, 897, 945, 370, 959, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 992, 381, 993, 973, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 974, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 955,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	994, 416, 417, 418, 419, 885, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 2207, 0, 433, 434, 432,
	435, 436, 437, 938, 438, 422, 423, 439, 440, 995,
	441, 442, 953, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 998, 449, 450, 451, 452, 975, 0,
	455, 456, 873, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 965, 966, 967, 968, 0, 470,
	0, 464, 465, 976, 466, 977, 895, 467, 468, 469,
	0, 471, 472, 0, 879, 473, 474, 475, 477, 478,
	476, 479, 939, 480, 0, 0, 481, 482, 483, 537,
	962, 997, 0, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 2202, 490, 876, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	870, 871, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 2198, 899, 2201, 2208, 890, 891, 887, 888,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 941, 905, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 954, 0,
	961, 247, 960, 0, 248, 249, 250, 251, 252, 907,
	940, 874, 253, 999, 1000, 498, 0, 254, 255, 947,
	0, 928, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 980, 272, 273, 931, 929, 930,
	937, 933, 932, 936, 274, 275, 276, 277, 964, 2204,
	958, 957, 878, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 949, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 884, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 971, 972, 896, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 956, 0, 0, 0,
	306, 0, 307, 0, 0, 981, 308, 309, 969, 970,
	310, 311, 0, 312, 978, 0, 906, 313, 0, 314,
	315, 316, 2205, 318, 942, 943, 946, 371, 983, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 982, 327, 951, 952, 0, 912,
	0, 329, 984, 944, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 979, 987, 342, 343, 988, 0, 344,
	345, 346, 935, 934, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 2206, 2203, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	875, 231, 991, 369, 897, 945, 370, 959, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 992, 381, 993, 973, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 974, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 955, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 994,
	416, 417, 418, 419, 885, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 2207, 0, 433, 434, 432, 435,
	436, 437, 938, 438, 422, 423, 439, 440, 995, 441,
	442, 953, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 998, 449, 450, 451, 452, 975, 0, 455,
	456, 873, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 965, 966, 967, 968, 0, 470, 0,
	464, 465, 976, 466, 977, 895, 467, 468, 469, 0,
	471, 472, 0, 879, 473, 474, 475, 477, 478, 476,
	479, 939, 480, 0, 0, 481, 482, 483, 537, 962,
	997, 0, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 2202, 490, 876, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 870,
	871, 917, 889, 890, 891, 887, 888, 900, 901, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 941, 905, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 954, 0, 961, 247, 960,
	0, 248, 249, 250, 251, 252, 907, 940, 874, 253,
	999, 1000, 498, 0, 254, 255, 947, 0, 928, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 980, 272, 273, 931, 929, 930, 937, 933, 932,
	936, 274, 275, 276, 277, 964, 278, 958, 957, 878,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 949, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 884, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 971, 972, 896, 229, 0, 0, 0, 0, 0,
	303, 304, 305, 956, 0, 0, 0, 306, 0, 307,
	0, 0, 981, 308, 309, 969, 970, 310, 311, 0,
	312, 978, 0, 906, 313, 0, 314, 315, 316, 317,
	318, 942, 943, 946, 371, 983, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 230, 325, 326, 328,
	0, 982, 327, 951, 952, 0, 912, 0, 329, 984,
	944, 985, 330, 331, 332, 986, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	979, 987, 342, 343, 988, 0, 344, 345, 346, 935,
	934, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 989,
	363, 364, 367, 368, 366, 990, 365, 875, 231, 991,
	369, 897, 945, 370, 959, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 992, 381, 993, 973, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	974, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 955, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 994, 416, 417, 418,
	419, 885, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 938,
	438, 422, 423, 439, 440, 995, 441, 442, 953, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 998,
	449, 450, 451, 452, 975, 0, 455, 456, 873, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	965, 966, 967, 968, 0, 470, 0, 464, 465, 976,
	466, 977, 895, 467, 468, 469, 0, 471, 472, 0,
	879, 473, 474, 475, 477, 478, 476, 479, 939, 480,
	0, 0, 481, 482, 483, 537, 962, 997, 0, 485,
	484, 540, 0, 0, 0, 0, 486, 487, 541, 488,
	489, 490, 876, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 870, 871, 0, 0,
	0, 0, 0, 1573, 0, 901, 0, 0, 0, 899,
	917, 889, 890, 891, 887, 888, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 2016, 238, 239, 0, 0, 0, 0,
	0, 941, 905, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 954, 0, 961, 247, 960, 0,
	248, 249, 250, 251, 252, 907, 940, 874, 253, 999,
	1000, 498, 0, 254, 255, 947, 0, 928, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	980, 272, 273, 931, 929, 930, 937, 933, 932, 936,
	274, 275, 276, 277, 964, 278, 958, 957, 878, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	949, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	884, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	971, 972, 896, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 956, 0, 0, 0, 306, 0, 307, 0,
	0, 981, 308, 309, 969, 970, 310, 311, 0, 312,
	978, 0, 906, 313, 0, 314, 315, 316, 317, 318,
	942, 943, 946, 371, 983, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 230, 325, 326, 328, 0,
	982, 327, 951, 952, 0, 912, 0, 329, 984, 944,
	985, 330, 331, 332, 986, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 979,
	987, 342, 343, 988, 0, 344, 345, 346, 935, 934,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 989, 363,
	364, 367, 368, 366, 990, 365, 875, 231, 991, 369,
	897, 945, 370, 959, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	992, 381, 993, 973, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 974,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 955, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 994, 416, 417, 418, 419,
	885, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 938, 438,
	422, 423, 439, 440, 995, 441, 442, 953, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 998, 449,
	450, 451, 452, 975, 0, 455, 456, 873, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 965,
	966, 967, 968, 0, 470, 0, 464, 465, 976, 466,
	977, 895, 467, 468, 469, 0, 471, 472, 0, 879,
	473, 474, 475, 477, 478, 476, 479, 939, 480, 0,
	0, 481, 482, 483, 537, 962, 997, 0, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 876, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 870, 871, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 1245, 899, 917,
	889, 890, 891, 887, 888, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	941, 905, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 954, 0, 961, 247, 960, 0, 248,
	249, 250, 251, 252, 907, 940, 874, 253, 999, 1000,
	498, 0, 254, 255, 947, 0, 928, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 931, 929, 930, 937, 933, 932, 936, 274,
	275, 276, 277, 964, 278, 958, 957, 878, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 949,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 884,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 971,
	972, 896, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 956, 0, 0, 0, 306, 0, 307, 0, 0,
	981, 308, 309, 969, 970, 310, 311, 0, 312, 978,
	0, 906, 313, 0, 314, 315, 316, 317, 318, 1244,
	943, 946, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 982,
	327, 951, 952, 0, 912, 0, 329, 984, 944, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 979, 987,
	342, 343, 988, 0, 344, 345, 346, 935, 934, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 875, 231, 991, 369, 897,
	945, 370, 959, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 973, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 974, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 955, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 885,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 938, 438, 422,
	423, 439, 440, 995, 441, 442, 953, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 998, 449, 450,
	451, 452, 975, 0, 455, 456, 873, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 965, 966,
	967, 968, 0, 470, 0, 464, 465, 976, 466, 977,
	895, 467, 468, 469, 0, 471, 472, 0, 879, 473,
	474, 475, 477, 478, 476, 479, 939, 480, 0, 0,
	481, 482, 483, 537, 962, 997, 0, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	876, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 870, 871, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 1239, 899, 917, 889,
	890, 891, 887, 888, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 941,
	905, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 954, 0, 961, 247, 960, 0, 248, 249,
	250, 251, 252, 907, 940, 874, 253, 999, 1000, 498,
	0, 254, 255, 947, 0, 928, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 980, 272,
	273, 931, 929, 930, 937, 933, 932, 936, 274, 275,
	276, 277, 964, 278, 958, 957, 878, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 949, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 884, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 971, 972,
	896, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	956, 0, 0, 0, 306, 0, 307, 0, 0, 981,
	308, 309, 969, 970, 310, 311, 0, 312, 978, 0,
	906, 313, 0, 314, 315, 316, 317, 318, 1238, 943,
	946, 371, 983, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 982, 327,
	951, 952, 0, 912, 0, 329, 984, 944, 985, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 979, 987, 342,
	343, 988, 0, 344, 345, 346, 935, 934, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 875, 231, 991, 369, 897, 945,
	370, 959, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 992, 381,
	993, 973, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 974, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 955, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 994, 416, 417, 418, 419, 885, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 938, 438, 422, 423,
	439, 440, 995, 441, 442, 953, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 998, 449, 450, 451,
	452, 975, 0, 455, 456, 873, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 965, 966, 967,
	968, 0, 470, 0, 464, 465, 976, 466, 977, 895,
	467, 468, 469, 0, 471, 472, 0, 879, 473, 474,
	475, 477, 478, 476, 479, 939, 480, 0, 0, 481,
	482, 483, 537, 962, 997, 0, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 876,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 870, 871, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 1234, 899, 917, 889, 890,
	891, 887, 888, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 941, 905,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 954, 0, 961, 247, 960, 0, 248, 249, 250,
	251, 252, 907, 940, 874, 253, 999, 1000, 498, 0,
	254, 255, 947, 0, 928, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	931, 929, 930, 937, 933, 932, 936, 274, 275, 276,
	277, 964, 278, 958, 957, 878, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 949, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 884, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 971, 972, 896,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 956,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 969, 970, 310, 311, 0, 312, 978, 0, 906,
	313, 0, 314, 315, 316, 317, 318, 942, 943, 946,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 982, 327, 951,
	952, 0, 912, 0, 329, 984, 944, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 979, 987, 342, 343,
	988, 0, 344, 345, 346, 935, 934, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 875, 231, 991, 369, 897, 945, 370,
	959, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	973, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 974, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 955, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 885, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 938, 438, 422, 423, 439,
	440, 995, 441, 442, 953, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 998, 449, 450, 451, 452,
	975, 0, 455, 456, 873, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 965, 966, 967, 968,
	0, 470, 0, 464, 465, 976, 466, 977, 895, 467,
	468, 469, 0, 471, 472, 0, 879, 473, 474, 475,
	477, 478, 476, 479, 939, 480, 0, 0, 481, 482,
	483, 537, 962, 997, 0, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 876, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 870, 871, 917, 889, 890, 891, 887, 888,
	900, 901, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 941, 905, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 954, 0,
	961, 247, 960, 0, 248, 249, 250, 251, 252, 907,
	940, 874, 253, 999, 1000, 498, 0, 254, 255, 947,
	0, 928, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 980, 272, 273, 931, 929, 930,
	937, 933, 932, 936, 274, 275, 276, 277, 964, 278,
	958, 957, 878, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 949, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 884, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 971, 972, 896, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 956, 0, 0, 0,
	306, 0, 307, 0, 0, 981, 308, 309, 969, 970,
	310, 311, 0, 312, 978, 0, 906, 313, 0, 314,
	315, 316, 317, 318, 942, 943, 946, 371, 983, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 982, 327, 951, 952, 0, 912,
	0, 329, 984, 944, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 979, 987, 342, 343, 988, 0, 344,
	345, 346, 935, 934, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	875, 231, 991, 369, 897, 945, 370, 959, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 992, 381, 993, 973, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 974, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 955, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 994,
	416, 417, 418, 419, 885, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 938, 438, 422, 423, 439, 440, 995, 441,
	442, 953, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 998, 449, 450, 451, 452, 975, 0, 455,
	456, 873, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 965, 966, 967, 968, 0, 470, 0,
	464, 465, 976, 466, 977, 895, 467, 468, 469, 0,
	471, 472, 0, 879, 473, 474, 475, 477, 478, 476,
	479, 939, 480, 0, 0, 481, 482, 483, 537, 962,
	997, 0, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 876, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 870,
	871, 917, 889, 890, 891, 887, 888, 900, 901, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 941, 905, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 954, 0, 961, 247, 960,
	0, 248, 249, 250, 251, 252, 907, 940, 874, 253,
	999, 1000, 498, 0, 254, 255, 947, 0, 928, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 980, 272, 3783, 931, 929, 930, 937, 933, 932,
	936, 274, 275, 276, 277, 964, 278, 958, 957, 878,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 949, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 884, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 971, 972, 896, 229, 0, 0, 0, 0, 0,
	303, 304, 305, 956, 0, 0, 0, 306, 0, 307,
	0, 0, 981, 308, 309, 969, 970, 310, 311, 0,
	312, 978, 0, 906, 313, 0, 314, 315, 316, 317,
	318, 942, 943, 946, 371, 983, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 230, 325, 326, 328,
	0, 982, 327, 951, 952, 0, 912, 0, 329, 984,
	944, 985, 330, 331, 332, 986, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	979, 987, 342, 343, 988, 0, 344, 345, 346, 935,
	934, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 989,
	363, 364, 367, 368, 366, 990, 365, 875, 231, 991,
	369, 897, 945, 370, 959, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 992, 381, 993, 973, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	974, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 955, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 994, 416, 417, 418,
	419, 885, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 938,
	438, 422, 423, 439, 440, 995, 441, 442, 953, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 998,
	449, 450, 451, 452, 975, 0, 455, 456, 873, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	965, 966, 967, 968, 0, 470, 0, 464, 465, 976,
	466, 977, 895, 467, 468, 469, 0, 3782, 472, 0,
	879, 473, 474, 475, 477, 478, 476, 479, 939, 480,
	0, 0, 481, 482, 483, 537, 962, 997, 0, 485,
	484, 540, 0, 0, 0, 0, 486, 487, 541, 488,
	489, 490, 876, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 870, 871, 917, 889,
	890, 891, 887, 888, 900, 901, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 941,
	905, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 3781, 954, 0, 961, 247, 960, 0, 248, 249,
	250, 251, 252, 907, 940, 874, 253, 999, 1000, 498,
	0, 254, 255, 947, 0, 928, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 980, 272,
	3783, 931, 929, 930, 937, 933, 932, 936, 274, 275,
	276, 277, 964, 278, 958, 957, 878, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 949, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 884, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 971, 972,
	896, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	956, 0, 0, 0, 306, 0, 307, 0, 0, 981,
	308, 309, 969, 970, 310, 311, 0, 312, 978, 0,
	906, 313, 0, 314, 315, 316, 317, 318, 942, 943,
	946, 371, 983, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 982, 327,
	951, 952, 0, 912, 0, 329, 984, 944, 985, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 979, 987, 342,
	343, 988, 0, 344, 345, 346, 935, 934, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 875, 231, 991, 369, 897, 945,
	370, 959, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 992, 381,
	993, 973, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 974, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 955, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 994, 416, 417, 418, 419, 885, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 938, 438, 422, 423,
	439, 440, 995, 441, 442, 953, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 998, 449, 450, 451,
	452, 975, 0, 455, 456, 873, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 965, 966, 967,
	968, 0, 470, 0, 464, 465, 976, 466, 977, 895,
	467, 468, 469, 0, 3782, 472, 0, 879, 473, 474,
	475, 477, 478, 476, 479, 939, 480, 0, 0, 481,
	482, 483, 537, 962, 997, 0, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 876,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 870, 871, 917, 889, 890, 891, 2589,
	2590, 900, 901, 0, 0, 0, 899, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 941, 905, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 954,
	0, 961, 247, 960, 0, 248, 249, 250, 251, 252,
	907, 940, 874, 253, 999, 1000, 498, 0, 254, 255,
	947, 0, 928, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 980, 272, 273, 931, 929,
	930, 937, 933, 932, 936, 274, 275, 276, 277, 964,
	278, 958, 957, 878, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 949, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 884, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 971, 972, 896, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 956, 0, 0,
	0, 306, 0, 307, 0, 0, 981, 308, 309, 969,
	970, 310, 311, 0, 312, 978, 0, 906, 313, 0,
	314, 315, 316, 317, 318, 942, 943, 946, 371, 983,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 982, 327, 951, 952, 0,
	912, 0, 329, 984, 944, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 979, 987, 342, 343, 988, 0,
	344, 345, 346, 935, 934, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 875, 231, 991, 369, 897, 945, 370, 959, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 992, 381, 993, 973, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 974, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 955,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	994, 416, 417, 418, 419, 885, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 938, 438, 422, 423, 439, 440, 995,
	441, 442, 953, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 998, 449, 450, 451, 452, 975, 0,
	455, 456, 873, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 965, 966, 967, 968, 0, 470,
	0, 464, 465, 976, 466, 977, 895, 467, 468, 469,
	0, 471, 472, 0, 879, 473, 474, 475, 477, 478,
	476, 479, 939, 480, 0, 0, 481, 482, 483, 537,
	962, 997, 0, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 489, 490, 876, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	870, 871, 917, 889, 890, 891, 2587, 2588, 900, 901,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 941, 905, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 954, 0, 961, 247,
	960, 0, 248, 249, 250, 251, 252, 907, 940, 874,
	253, 999, 1000, 498, 0, 254, 255, 947, 0, 928,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 980, 272, 273, 931, 929, 930, 937, 933,
	932, 936, 274, 275, 276, 277, 964, 278, 958, 957,
	878, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 949, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 884, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 971, 972, 896, 229, 0, 0, 0, 0,
	0, 303, 304, 305, 956, 0, 0, 0, 306, 0,
	307, 0, 0, 981, 308, 309, 969, 970, 310, 311,
	0, 312, 978, 0, 906, 313, 0, 314, 315, 316,
	317, 318, 942, 943, 946, 371, 983, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 230, 325, 326,
	328, 0, 982, 327, 951, 952, 0, 912, 0, 329,
	984, 944, 985, 330, 331, 332, 986, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 979, 987, 342, 343, 988, 0, 344, 345, 346,
	935, 934, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	989, 363, 364, 367, 368, 366, 990, 365, 875, 231,
	991, 369, 897, 945, 370, 959, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 992, 381, 993, 973, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 974, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 955, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 994, 416, 417,
	418, 419, 885, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	938, 438, 422, 423, 439, 440, 995, 441, 442, 953,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	998, 449, 450, 451, 452, 975, 0, 455, 456, 873,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 965, 966, 967, 968, 0, 470, 0, 464, 465,
	976, 466, 977, 895, 467, 468, 469, 0, 471, 472,
	0, 879, 473, 474, 475, 477, 478, 476, 479, 939,
	480, 0, 0, 481, 482, 483, 537, 962, 997, 0,
	485, 484, 540, 0, 0, 0, 0, 486, 487, 541,
	488, 489, 490, 876, 0, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 870, 871, 917,
	889, 890, 891, 887, 888, 900, 901, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	941, 905, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 954, 0, 961, 247, 960, 0, 248,
	249, 250, 251, 252, 907, 940, 874, 253, 999, 1000,
	498, 0, 254, 255, 947, 0, 928, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 931, 929, 930, 937, 933, 932, 936, 274,
	275, 276, 277, 964, 278, 958, 957, 878, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 949,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 884,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 971,
	972, 896, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 956, 0, 0, 0, 306, 0, 307, 0, 0,
	981, 308, 309, 969, 970, 310, 311, 0, 312, 978,
	0, 906, 313, 0, 314, 315, 316, 317, 318, 942,
	943, 946, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 982,
	327, 951, 952, 0, 912, 0, 329, 984, 944, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 979, 987,
	342, 343, 988, 0, 344, 345, 346, 935, 934, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 875, 231, 991, 369, 897,
	945, 370, 959, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 973, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 974, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 955, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 885,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 938, 438, 422,
	423, 439, 440, 995, 441, 442, 953, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 998, 449, 450,
	451, 452, 975, 0, 455, 456, 873, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 965, 966,
	967, 968, 0, 470, 0, 464, 465, 976, 466, 977,
	895, 467, 468, 469, 0, 471, 472, 0, 879, 473,
	474, 475, 477, 478, 476, 479, 939, 480, 0, 0,
	481, 482, 483, 537, 962, 997, 0, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	876, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 2024, 2025, 917, 889, 890, 891,
	887, 888, 900, 901, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 941, 905, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	954, 0, 961, 247, 960, 0, 248, 249, 250, 251,
	252, 907, 940, 0, 253, 999, 1000, 498, 0, 254,
	255, 947, 0, 928, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 980, 272, 273, 931,
	929, 930, 937, 933, 932, 936, 274, 275, 276, 277,
	964, 278, 958, 957, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 949, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 884, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 971, 972, 896, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 956, 0,
	0, 0, 306, 0, 307, 0, 0, 981, 308, 309,
	969, 970, 310, 311, 0, 312, 978, 0, 906, 313,
	0, 314, 315, 316, 317, 318, 942, 943, 946, 371,
	983, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 0, 982, 327, 951, 952,
	0, 912, 0, 329, 984, 944, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 979, 987, 342, 343, 988,
	0, 344, 345, 346, 935, 934, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 0, 231, 991, 369, 897, 945, 370, 959,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 992, 381, 993, 973,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 974, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	955, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 994, 416, 417, 418, 419, 885, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 938, 438, 422, 423, 439, 440,
	995, 441, 442, 953, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 998, 449, 450, 451, 452, 975,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 965, 966, 967, 968, 0,
	470, 0, 464, 465, 976, 466, 977, 895, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 939, 480, 0, 0, 481, 482, 483,
	537, 962, 997, 0, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 917, 889, 890,
	891, 887, 888, 900, 2220, 0, 0, 0, 0, 0,
	0, 2218, 2219, 0, 232, 233, 234, 235, 236, 237,
	901, 238, 239, 0, 899, 0, 0, 0, 941, 905,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 954, 0, 961, 247, 960, 0, 248, 249, 250,
	251, 252, 907, 940, 0, 253, 999, 1000, 498, 0,
	254, 255, 947, 0, 928, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	931, 929, 930, 937, 933, 932, 936, 274, 275, 276,
	277, 964, 278, 958, 957, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 949, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 884, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 971, 972, 896,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 956,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 969, 970, 310, 311, 0, 312, 978, 0, 906,
	313, 0, 314, 315, 316, 317, 318, 942, 943, 946,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 982, 327, 951,
	952, 0, 912, 0, 329, 984, 944, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 979, 987, 342, 343,
	988, 0, 344, 345, 346, 935, 934, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 0, 231, 991, 369, 897, 945, 370,
	959, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	973, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 974, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 955, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 2582, 2583, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 938, 438, 422, 423, 439,
	440, 995, 441, 442, 953, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 998, 449, 450, 451, 452,
	975, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 965, 966, 967, 968,
	0, 470, 0, 464, 465, 976, 466, 977, 895, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 939, 480, 0, 0, 481, 482,
	483, 537, 962, 997, 0, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 917, 889,
	890, 891, 887, 888, 900, 0, 0, 0, 0, 0,
	0, 0, 1766, 1767, 0, 232, 233, 234, 235, 236,
	237, 901, 238, 239, 0, 899, 0, 0, 0, 941,
	905, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 0, 954, 0, 961, 247, 960, 0, 248, 249,
	250, 251, 252, 907, 940, 874, 253, 999, 1000, 498,
	0, 254, 255, 947, 0, 928, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 980, 272,
	3783, 931, 929, 930, 937, 933, 932, 936, 274, 275,
	276, 277, 964, 278, 958, 957, 878, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 949, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 884, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 971, 972,
	896, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	956, 0, 0, 0, 306, 0, 307, 0, 0, 981,
	308, 309, 969, 970, 310, 311, 0, 312, 978, 0,
	906, 313, 0, 314, 315, 316, 317, 318, 942, 943,
	946, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 982, 327,
	951, 952, 0, 912, 0, 329, 0, 944, 0, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 979, 987, 342,
	343, 0, 0, 344, 345, 346, 935, 934, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 875, 231, 0, 369, 897, 945,
	370, 959, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 992, 381,
	993, 973, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 974, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 955, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 994, 416, 417, 418, 419, 885, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 938, 438, 422, 423,
	439, 440, 0, 441, 442, 953, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 998, 449, 450, 451,
	452, 975, 0, 455, 456, 873, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 965, 966, 967,
	968, 0, 470, 0, 464, 465, 976, 466, 977, 895,
	467, 468, 469, 0, 3782, 472, 0, 879, 473, 474,
	475, 477, 478, 476, 479, 939, 480, 0, 0, 481,
	482, 483, 537, 962, 997, 0, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 917,
	889, 890, 891, 887, 888, 900, 0, 0, 0, 0,
	0, 0, 0, 870, 871, 0, 232, 233, 234, 235,
	236, 237, 901, 238, 239, 0, 899, 0, 0, 0,
	941, 905, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 954, 0, 961, 247, 960, 0, 248,
	249, 250, 251, 252, 0, 940, 0, 253, 999, 1000,
	498, 0, 254, 255, 947, 0, 928, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 931, 929, 930, 937, 933, 932, 936, 274,
	275, 276, 277, 964, 278, 958, 957, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 949,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 971,
	972, 896, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 956, 0, 0, 0, 306, 0, 307, 0, 0,
	981, 308, 309, 969, 970, 310, 311, 0, 312, 978,
	0, 906, 313, 0, 314, 315, 316, 317, 318, 942,
	943, 946, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 982,
	327, 951, 952, 0, 912, 0, 329, 984, 944, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 979, 987,
	342, 343, 988, 0, 344, 345, 346, 935, 934, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 0, 231, 991, 369, 897,
	945, 370, 959, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 973, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 974, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 955, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 885,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 938, 438, 422,
	423, 439, 440, 995, 441, 442, 953, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 998, 449, 450,
	451, 452, 975, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 965, 966,
	967, 968, 0, 470, 0, 464, 465, 976, 466, 977,
	895, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 939, 480, 0, 0,
	481, 482, 483, 537, 962, 997, 0, 485, 484, 540,
	0, 863, 0, 1037, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 901, 941, 0, 0, 899, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 940,
	0, 253, 496, 497, 498, 0, 254, 255, 947, 0,
	928, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 980, 272, 273, 931, 929, 930, 937,
	933, 932, 936, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 971, 972, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 981, 308, 309, 506, 507, 310,
	311, 0, 312, 978, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 942, 943, 946, 371, 983, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 982, 327, 513, 514, 0, 515, 0,
	329, 984, 944, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 1023, 340, 339,
	0, 341, 979, 987, 342, 343, 988, 0, 344, 345,
	346, 935, 934, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 0,
	231, 991, 369, 0, 945, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 1029, 376, 377, 378, 0, 0,
	379, 380, 520, 992, 381, 993, 973, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 974, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 994, 416,
	417, 418, 419, 527, 1031, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 192, 433, 434, 432, 435, 436,
	437, 938, 438, 422, 423, 439, 440, 995, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 975, 0, 455, 456,
	0, 454, 194, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 976, 466, 977, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	939, 480, 0, 0, 481, 482, 483, 1356, 538, 539,
	0, 485, 484, 540, 0, 1037, 0, 186, 486, 487,
	541, 488, 489, 490, 0, 187, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 1027, 941, 1659, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 940, 0, 253, 496, 497, 498, 0, 254, 255,
	947, 0, 928, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 980, 272, 273, 931, 929,
	930, 937, 933, 932, 936, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 971, 972, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 981, 308, 309, 506,
	507, 310, 311, 0, 312, 978, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 942, 943, 946, 371, 983,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 982, 327, 513, 514, 0,
	515, 0, 329, 984, 944, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 1023,
	340, 339, 0, 341, 979, 987, 342, 343, 988, 0,
	344, 345, 346, 935, 934, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 0, 231, 991, 369, 0, 945, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 1029, 376, 377, 378,
	0, 0, 379, 380, 520, 992, 381, 993, 973, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 974, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	994, 416, 417, 418, 419, 527, 1031, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 192, 433, 434, 432,
	435, 436, 437, 938, 438, 422, 423, 439, 440, 995,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 975, 0,
	455, 456, 0, 454, 194, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 976, 466, 977, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 939, 480, 0, 0, 481, 482, 483, 1356,
	538, 539, 0, 485, 484, 540, 0, 0, 0, 186,
	486, 487, 541, 488, 489, 490, 0, 187, 0, 0,
	0, 2742, 0, 1037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1027, 0, 1659,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 940,
	0, 253, 496, 497, 498, 0, 254, 255, 947, 0,
	928, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 980, 272, 273, 931, 929, 930, 937,
	933, 932, 936, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 971, 972, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 981, 308, 309, 506, 507, 310,
	311, 0, 312, 978, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 942, 943, 946, 371, 983, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 982, 327, 513, 514, 0, 515, 0,
	329, 984, 944, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 1023, 340, 339,
	0, 341, 979, 987, 342, 343, 988, 0, 344, 345,
	346, 935, 934, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 0,
	231, 991, 369, 0, 945, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 1029, 376, 377, 378, 0, 0,
	379, 380, 520, 992, 381, 993, 973, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 974, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 994, 416,
	417, 418, 419, 527, 1031, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 938, 438, 422, 423, 439, 440, 995, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 975, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 976, 466, 977, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	939, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 485, 484, 540, 0, 1019, 0, 1037, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 1027, 0, 1025, 941, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 940, 0, 253, 496, 497, 498, 0,
	254, 255, 947, 0, 928, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	931, 929, 930, 937, 933, 932, 936, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 971, 972, 0,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 506, 507, 310, 311, 0, 312, 978, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 942, 943, 946,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 982, 327, 513,
	514, 0, 515, 0, 329, 984, 944, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 1023, 340, 339, 0, 341, 979, 987, 342, 343,
	988, 0, 344, 345, 346, 935, 934, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 0, 231, 991, 369, 0, 945, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 1029, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	973, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 974, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 527, 1031, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 938, 438, 422, 423, 439,
	440, 995, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	975, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 976, 466, 977, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 939, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 0, 485, 484, 540, 0, 1037,
	0, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 1027,
	941, 1025, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 940, 0, 253, 496, 497,
	498, 0, 254, 255, 947, 0, 928, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 931, 929, 930, 937, 933, 932, 936, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 971,
	972, 0, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	981, 308, 309, 506, 507, 310, 311, 0, 312, 978,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 942,
	943, 946, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 982,
	327, 513, 514, 0, 515, 0, 329, 984, 944, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 1023, 340, 339, 0, 341, 979, 987,
	342, 343, 988, 0, 344, 345, 346, 935, 934, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 0, 231, 991, 369, 0,
	945, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	1029, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 973, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 974, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 527,
	1031, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 938, 438, 422,
	423, 439, 440, 995, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 975, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 976, 466, 977,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 939, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 0, 485, 484, 540,
	0, 1037, 0, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 1027, 941, 1025, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	0, 248, 249, 250, 251, 252, 0, 940, 0, 253,
	496, 497, 498, 0, 254, 255, 947, 0, 928, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 980, 272, 273, 931, 929, 930, 937, 933, 932,
	936, 274, 275, 276, 277, 0, 278, 500, 501, 0,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 971, 972, 0, 229, 0, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 0, 307,
	0, 0, 981, 308, 309, 506, 507, 310, 311, 0,
	312, 978, 0, 509, 313, 0, 314, 315, 316, 317,
	318, 942, 943, 946, 371, 983, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 230, 325, 326, 328,
	0, 982, 327, 513, 514, 0, 515, 0, 329, 984,
	944, 985, 330, 331, 332, 986, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	979, 987, 342, 343, 988, 0, 344, 345, 346, 935,
	934, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 989,
	363, 364, 367, 368, 366, 990, 365, 0, 231, 991,
	369, 0, 945, 370, 519, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 992, 381, 993, 973, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	974, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 994, 416, 417, 418,
	419, 527, 1031, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 938,
	438, 422, 423, 439, 440, 995, 441, 442, 528, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 975, 0, 455, 456, 0, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	531, 532, 533, 534, 0, 470, 0, 464, 465, 976,
	466, 977, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 479, 939, 480,
	0, 0, 481, 482, 483, 537, 538, 539, 0, 485,
	484, 540, 0, 863, 0, 1218, 486, 487, 541, 488,
	489, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 1557, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 1187, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 980, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 981, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 983,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	0, 325, 326, 328, 0, 982, 327, 513, 514, 0,
	515, 0, 329, 984, 516, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 987, 342, 343, 988, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 0, 0, 991, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 992, 381, 993, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	994, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 192, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 995,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 194, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 1356,
	538, 539, 0, 485, 484, 540, 0, 0, 0, 186,
	486, 487, 541, 488, 489, 490, 0, 187, 0, 0,
	0, 1353, 0, 1218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	1187, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 980, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 981, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 983, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 982, 327, 513, 514, 0, 515, 0,
	329, 984, 516, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 987, 342, 343, 988, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 0,
	0, 991, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 992, 381, 993, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 994, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 192, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 995, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 194, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 1356, 538, 539,
	0, 485, 484, 540, 0, 0, 0, 186, 486, 487,
	541, 488, 489, 490, 0, 187, 0, 0, 0, 0,
	0, 1218, 1217, 0, 0, 0, 0, 1215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 253,
	496, 497, 498, 0, 254, 255, 499, 0, 1187, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 980, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 277, 0, 278, 500, 501, 0,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 503, 504, 0, 229, 0, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 0, 307,
	0, 0, 981, 308, 309, 506, 507, 310, 311, 0,
	312, 508, 0, 509, 313, 0, 314, 315, 316, 317,
	318, 510, 511, 512, 371, 983, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 0, 325, 326, 328,
	0, 982, 327, 513, 514, 0, 515, 0, 329, 984,
	516, 985, 330, 331, 332, 986, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	517, 987, 342, 343, 988, 0, 344, 345, 346, 0,
	0, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 989,
	363, 364, 367, 368, 366, 990, 365, 0, 0, 991,
	369, 0, 518, 370, 519, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 992, 381, 993, 521, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	524, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 994, 416, 417, 418,
	419, 527, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 0,
	438, 422, 423, 439, 440, 995, 441, 442, 528, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 530, 0, 455, 456, 0, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	531, 532, 533, 534, 0, 470, 0, 464, 465, 535,
	466, 536, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 479, 0, 480,
	0, 0, 481, 482, 483, 537, 538, 539, 0, 485,
	484, 540, 0, 0, 0, 0, 486, 487, 541, 488,
	489, 490, 1218, 1217, 0, 0, 0, 0, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 2966, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 1187,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 980, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 229, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 981, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 510, 511, 512, 371, 983, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 0, 325, 326,
	328, 0, 982, 327, 513, 514, 0, 515, 0, 329,
	984, 516, 985, 330, 331, 332, 986, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 987, 342, 343, 988, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	989, 363, 364, 367, 368, 366, 990, 365, 0, 0,
	991, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 992, 381, 993, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 994, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 995, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 0,
	485, 484, 540, 0, 0, 0, 0, 486, 487, 541,
	488, 489, 490, 1218, 1217, 0, 0, 0, 0, 1215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 1224, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	1187, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 980, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 981, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 983, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 982, 327, 513, 514, 0, 515, 0,
	329, 984, 516, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 987, 342, 343, 988, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 0,
	0, 991, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 992, 381, 993, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 994, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 995, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 485, 484, 540, 1037, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 941, 0, 1362, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	940, 0, 253, 496, 497, 498, 0, 254, 255, 947,
	0, 928, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 980, 272, 273, 931, 929, 930,
	937, 933, 932, 936, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 971, 972, 0, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 981, 308, 309, 506, 507,
	310, 311, 0, 312, 978, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 942, 943, 946, 371, 983, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 982, 327, 513, 514, 0, 515,
	0, 329, 984, 944, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 979, 987, 342, 343, 988, 0, 344,
	345, 346, 935, 934, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	0, 231, 991, 369, 0, 945, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 992, 381, 993, 973, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 974, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 994,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 938, 438, 422, 423, 439, 440, 995, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 975, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 976, 466, 977, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 939, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 0, 485, 484, 540, 863, 0, 226, 0, 486,
	487, 541, 488, 489, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	0, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 0, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 0, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 0, 327, 513,
	514, 0, 515, 0, 329, 0, 516, 0, 330, 331,
	332, 0, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 0, 363, 364, 367, 368,
	366, 0, 365, 0, 0, 0, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 0, 381, 0,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 0, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 192, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 0, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 194, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 1356, 538, 539, 0, 485, 484, 540, 226, 0,
	0, 186, 486, 487, 541, 488, 489, 490, 0, 187,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 161, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 231, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 0, 485, 484, 540, 0,
	1304, 0, 226, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 1673, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 229, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 510, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 230, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 231,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 226,
	485, 484, 540, 0, 0, 0, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 1308, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 231, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 226, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 2914, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 0, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	0, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 0, 0, 327, 513, 514,
	0, 515, 0, 329, 0, 516, 0, 330, 331, 332,
	0, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 0, 363, 364, 367, 368, 366,
	0, 365, 0, 231, 0, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 0, 381, 0, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 0, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 438, 422, 423, 439, 440,
	0, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 226, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 1308, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	0, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 485, 484, 540, 226, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 2485, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 498, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 510, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 0,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 0, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 0, 485, 484, 540, 226, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 3054, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	0, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 0, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 0, 485, 484, 540, 0, 729, 0, 623,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 1929,
	491, 0, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 629, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 727,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 231, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 628, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 0, 485, 484, 540,
	0, 622, 0, 623, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 632, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 629, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	231, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 628, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 620, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	623, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	632, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 629, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	510, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 230, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 231, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 1963, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 628,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 623, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 632, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 629,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 0, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 0, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 0, 327, 513,
	514, 0, 515, 0, 329, 0, 516, 0, 330, 331,
	332, 0, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 0, 363, 364, 367, 368,
	366, 0, 365, 0, 231, 0, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 0, 381, 0,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 0, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 0, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 628, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 1708, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 632, 0, 0, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 0, 1714, 0,
	1704, 247, 1720, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 1729, 1730, 0, 0, 254, 255, 0,
	0, 1187, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 980, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 964, 278,
	1718, 1717, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 949, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 0, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 305, 1716, 0, 0, 0,
	306, 0, 307, 0, 0, 981, 308, 309, 1725, 1726,
	310, 311, 0, 312, 0, 0, 0, 313, 0, 314,
	315, 316, 317, 318, 0, 0, 0, 371, 983, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 0,
	325, 326, 328, 0, 982, 327, 1711, 1712, 0, 1707,
	0, 329, 984, 0, 985, 330, 331, 332, 986, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 0, 987, 342, 343, 988, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 989, 363, 364, 367, 368, 366, 990, 365,
	0, 0, 991, 369, 0, 0, 370, 1719, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 0, 992, 381, 993, 0, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 1701, 1702, 0, 393, 0, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 1715, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 994,
	416, 417, 418, 419, 0, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 995, 441,
	442, 1713, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 1728, 449, 450, 451, 452, 0, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 1721, 1722, 1723, 1724, 0, 470, 0,
	464, 465, 0, 466, 0, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 0, 1705,
	1727, 0, 485, 484, 0, 0, 0, 0, 0, 486,
	487, 0, 488, 489, 490, 1218, 1217, 0, 0, 0,
	0, 1215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 1695, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 1187, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 980, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 981, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 983,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	0, 325, 326, 328, 0, 982, 327, 513, 514, 0,
	515, 0, 329, 984, 516, 985, 330, 331, 332, 986,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 987, 342, 343, 988, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 989, 363, 364, 367, 368, 366, 990,
	365, 0, 0, 991, 369, 3210, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 992, 381, 993, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	994, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 995,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 0, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 489, 490, 1218, 1217, 0, 0,
	0, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 1187, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 980, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 981, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	983, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 0, 325, 326, 328, 0, 982, 327, 513, 514,
	0, 515, 0, 329, 984, 516, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 987, 342, 343, 988,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 0, 0, 991, 369, 2894, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 992, 381, 993, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 994, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 438, 422, 423, 439, 440,
	995, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 0, 485, 484, 540, 1218, 1217, 0,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 1187, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	0, 0, 0, 0, 0, 0, 2885, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 982, 327, 513,
	514, 0, 515, 0, 329, 984, 516, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 987, 342, 343,
	988, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 0, 0, 991, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 2886, 438, 422, 423, 439,
	440, 995, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 226, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 498, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 510, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 231, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 0, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 1389, 0, 1218, 1217, 0,
	0, 0, 0, 1215, 0, 0, 0, 0, 0, 0,
	0, 632, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 1187, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	229, 0, 0, 0, 0, 0, 1388, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 982, 327, 513,
	514, 0, 515, 0, 329, 984, 516, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 987, 342, 343,
	988, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 0, 0, 991, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 1387,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 1386, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 995, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 0, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 1350, 0,
	1218, 1217, 0, 0, 0, 0, 1215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 1187, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	980, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 981, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	1349, 511, 512, 371, 983, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	982, 327, 513, 514, 0, 515, 0, 329, 984, 516,
	985, 330, 331, 332, 986, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	987, 342, 343, 988, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 989, 363,
	364, 367, 368, 366, 990, 365, 0, 0, 991, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	992, 381, 993, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 994, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 995, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 0, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 1284, 0, 1218, 1217, 0, 0, 0, 0, 1215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	1187, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 980, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 981, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 1283, 511, 512, 371, 983, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 982, 327, 513, 514, 0, 515, 0,
	329, 984, 516, 985, 330, 331, 332, 986, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 987, 342, 343, 988, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 989, 363, 364, 367, 368, 366, 990, 365, 0,
	0, 991, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 992, 381, 993, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 994, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 995, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 1213, 0, 1218, 1217, 0, 0,
	0, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 1187, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 980, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 981, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 1212, 511, 512, 371,
	983, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 0, 325, 326, 328, 0, 982, 327, 513, 514,
	0, 515, 0, 329, 984, 516, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 987, 342, 343, 988,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 0, 0, 991, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 992, 381, 993, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 994, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 438, 422, 423, 439, 440,
	995, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 0, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 1218, 1217, 0,
	0, 0, 0, 1215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 1187, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 980, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 981, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 983, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 982, 327, 513,
	514, 0, 515, 0, 329, 984, 516, 985, 330, 331,
	332, 986, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 987, 342, 343,
	988, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 989, 363, 364, 367, 368,
	366, 990, 365, 0, 0, 991, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 992, 381, 993,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 994, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 995, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 0, 485, 484, 540, 1218, 1217,
	0, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 1187, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 980, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 1739, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 981,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 983, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 0, 325, 326, 328, 0, 982, 327,
	513, 514, 0, 515, 0, 329, 984, 516, 985, 330,
	331, 332, 986, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 987, 342,
	343, 988, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 989, 363, 364, 367,
	368, 366, 990, 365, 0, 0, 991, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 992, 381,
	993, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 994, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 995, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 0, 485, 484, 540, 1218,
	1217, 0, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 1187, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 980,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	981, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 983, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 0, 325, 326, 328, 0, 982,
	327, 513, 514, 0, 515, 0, 329, 984, 516, 985,
	330, 331, 332, 986, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 987,
	342, 343, 988, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 989, 363, 364,
	367, 368, 366, 990, 365, 0, 0, 991, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 992,
	381, 993, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 994, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 995, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 1218, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 1187, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 980, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 981, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	983, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 0, 325, 326, 328, 0, 982, 327, 513, 514,
	0, 515, 0, 329, 984, 516, 985, 330, 331, 332,
	986, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 987, 342, 343, 988,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 989, 363, 364, 367, 368, 366,
	990, 365, 0, 0, 991, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 992, 381, 993, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 994, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 438, 422, 423, 439, 440,
	995, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 226, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 2350, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 2347, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 2354, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 2523, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 2353, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 2520, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	2522, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 2519, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	0, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 2352, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 2521, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	226, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 2350, 254, 255, 499, 0, 0, 2344, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 2347, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 2354, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 2353,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	2343, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 0, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 2352, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 2351,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 0, 485, 484,
	540, 1446, 0, 226, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	231, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 1449, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 1447, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 1448, 484, 540, 1191, 0, 226, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 0, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 1193, 511, 512, 371,
	0, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 0, 0, 327, 513, 514,
	0, 515, 0, 329, 0, 516, 0, 330, 331, 332,
	0, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 0, 363, 364, 367, 368, 366,
	0, 365, 0, 231, 0, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 1029, 376, 377,
	378, 0, 0, 379, 380, 520, 0, 381, 0, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 0, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 438, 422, 423, 439, 440,
	0, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 0, 485, 484, 540, 1188, 0, 226,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 1190,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 231, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	1029, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 0, 485, 484, 540,
	1094, 0, 226, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 229, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 1096, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 230, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 231,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 1029, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 0,
	485, 484, 540, 573, 0, 226, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 572, 236, 237, 562, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 565, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 566, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	0, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 0, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 567, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 0, 485, 484, 540, 561, 0, 226, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 562, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 565, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 566, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 0, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 0, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 567,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 226, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 2860,
	365, 0, 231, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 226, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 229, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 510, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 230, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 231,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 1029, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 0,
	485, 484, 540, 2457, 0, 226, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 2456, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 231, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 0, 485, 484, 540, 1939, 0, 226, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 231, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 226, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 231, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 1867, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 0, 485, 484, 540, 1872, 0, 226, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 1871, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 231, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 0, 485, 484, 540, 1860,
	0, 226, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 253,
	496, 497, 498, 0, 254, 255, 499, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 277, 0, 278, 500, 501, 0,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 503, 504, 0, 229, 0, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 0, 307,
	0, 0, 0, 308, 309, 506, 507, 310, 311, 0,
	312, 508, 0, 509, 313, 0, 314, 315, 316, 317,
	318, 1862, 511, 512, 371, 0, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 230, 325, 326, 328,
	0, 0, 327, 513, 514, 0, 515, 0, 329, 0,
	516, 0, 330, 331, 332, 0, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	517, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	0, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 0,
	363, 364, 367, 368, 366, 0, 365, 0, 231, 0,
	369, 0, 518, 370, 519, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 0, 381, 0, 521, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	524, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 0, 416, 417, 418,
	419, 527, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 0,
	438, 422, 423, 439, 440, 0, 441, 442, 528, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 530, 0, 455, 456, 0, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	531, 532, 533, 534, 0, 470, 0, 464, 465, 535,
	466, 536, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 479, 0, 480,
	0, 0, 481, 482, 483, 537, 538, 539, 0, 485,
	484, 540, 1346, 0, 226, 0, 486, 487, 541, 488,
	489, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 498, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 229, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 1345, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 230,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 231, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 0, 485, 484, 540, 1337, 0, 226, 0, 486,
	487, 541, 488, 489, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	229, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 0, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 1336, 511, 512,
	371, 0, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 230, 325, 326, 328, 0, 0, 327, 513,
	514, 0, 515, 0, 329, 0, 516, 0, 330, 331,
	332, 0, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 0, 363, 364, 367, 368,
	366, 0, 365, 0, 231, 0, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 0, 381, 0,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 0, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 0, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 0, 485, 484, 540, 1334, 0,
	226, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	1333, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 230, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 231, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 0, 485, 484,
	540, 1330, 0, 226, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 1329, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	231, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 485, 484, 540, 1286, 0, 226, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 0, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	0, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 0, 0, 327, 513, 514,
	0, 515, 0, 329, 0, 516, 0, 330, 331, 332,
	0, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 0, 363, 364, 367, 368, 366,
	0, 365, 0, 231, 0, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 0, 381, 0, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 0, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 438, 422, 423, 439, 440,
	0, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 0, 485, 484, 540, 1209, 0, 226,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 231, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 0, 485, 484, 540,
	1202, 0, 226, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 229, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 1204, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 230, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 231,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 0,
	485, 484, 540, 543, 0, 226, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 231, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 0, 485, 484, 540, 217, 0, 226, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 229, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 230, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 231, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 226, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 229, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	230, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 231, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 226, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	565, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	566, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 510, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 0, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 0,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 567, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 226,
	485, 484, 540, 0, 0, 0, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 1970, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 229, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 230, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 231, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 226, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 1968, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 229,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 0, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	0, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 230, 325, 326, 328, 0, 0, 327, 513, 514,
	0, 515, 0, 329, 0, 516, 0, 330, 331, 332,
	0, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 0, 363, 364, 367, 368, 366,
	0, 365, 0, 231, 0, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 0, 381, 0, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 0, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 438, 422, 423, 439, 440,
	0, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 226, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 1966, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 229, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 230, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	231, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	226, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 229, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	1910, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 230, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 231, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 0, 485, 484,
	540, 720, 0, 226, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 719,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	0, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 718, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	226, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 2523, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	510, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 0, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 3428, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 0, 485, 484,
	540, 552, 0, 226, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 551, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	0, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 550, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 485, 484, 540, 226, 3437, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 498, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 510, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 0,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 0, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 0, 485, 484, 540, 226, 2510, 0, 0, 486,
	487, 541, 488, 489, 490, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 510, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	0, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 0, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 226, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	3187, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 510, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 0, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 0,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 226,
	485, 484, 540, 0, 0, 0, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 2271, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 0, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 0, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 0, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 0, 485, 484, 540,
	226, 2510, 0, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	510, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 0, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 2507, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 226, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	1947, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	0, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 0, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 0, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 0, 327, 513,
	514, 0, 515, 0, 329, 0, 516, 0, 330, 331,
	332, 0, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 0, 363, 364, 367, 368,
	366, 0, 365, 0, 0, 0, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 0, 381, 0,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 0, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 0, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 0, 485, 484, 540, 1937, 0,
	226, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	510, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 0, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 0, 485, 484,
	540, 593, 0, 226, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 1068, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 1066, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	594, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	0, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 590,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 1069,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 589, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	0, 485, 484, 540, 593, 0, 226, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	583, 499, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 0, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	0, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 0, 325, 326, 328, 0, 0, 327, 513, 514,
	0, 515, 0, 329, 0, 516, 0, 330, 331, 332,
	0, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 594, 0, 363, 364, 367, 368, 366,
	0, 365, 0, 0, 0, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 0, 381, 0, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 0, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 590, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 1361, 437, 0, 438, 422, 423, 439, 440,
	0, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 589, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 0, 485, 484, 540, 1343, 0, 226,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 0, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 1342,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 0, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 0, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 425, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 0, 485, 484, 540,
	1292, 0, 226, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 1291, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 0, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 0,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 0,
	485, 484, 540, 1277, 0, 226, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 1276, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	0, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 0, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 0, 485, 484, 540, 1272, 0, 226, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 0, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 0, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 0, 485, 484, 540, 1196,
	0, 226, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 253,
	496, 497, 498, 0, 254, 255, 499, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 277, 0, 278, 500, 501, 0,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 503, 504, 0, 0, 0, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 0, 307,
	0, 0, 0, 308, 309, 506, 507, 310, 311, 0,
	312, 508, 0, 509, 313, 0, 314, 315, 316, 317,
	318, 510, 511, 512, 371, 0, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 0, 325, 326, 328,
	0, 0, 327, 513, 514, 0, 515, 0, 329, 0,
	516, 0, 330, 331, 332, 0, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	517, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	0, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 0,
	363, 364, 367, 368, 366, 0, 365, 0, 0, 0,
	369, 0, 518, 370, 519, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 0, 381, 0, 521, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	524, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 0, 416, 417, 418,
	419, 527, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 0,
	438, 422, 423, 439, 440, 0, 441, 442, 528, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 530, 0, 455, 456, 0, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	531, 532, 533, 534, 0, 470, 0, 464, 465, 535,
	466, 536, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 479, 0, 480,
	0, 0, 481, 482, 483, 537, 538, 539, 0, 485,
	484, 540, 593, 0, 226, 0, 486, 487, 541, 488,
	489, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	240, 241, 1068, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 1066, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 510, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 0,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 594, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 0, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	590, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	1069, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 589, 532, 533, 534, 0, 470, 0,
	464, 1067, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 226, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 1050, 238, 239, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 253,
	496, 497, 498, 0, 254, 255, 499, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 277, 0, 278, 500, 501, 0,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 503, 504, 0, 0, 0, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 0, 307,
	0, 0, 0, 308, 309, 506, 507, 310, 311, 0,
	312, 508, 0, 509, 313, 0, 314, 315, 316, 317,
	318, 510, 511, 512, 371, 0, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 0, 325, 326, 328,
	0, 0, 327, 513, 514, 0, 515, 0, 329, 0,
	516, 0, 330, 331, 332, 0, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	517, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	0, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 0,
	363, 364, 367, 368, 366, 0, 365, 0, 0, 0,
	369, 0, 518, 370, 519, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 0, 381, 0, 521, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	524, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 0, 416, 417, 418,
	419, 527, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 0,
	438, 422, 423, 439, 440, 0, 441, 442, 528, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 530, 0, 455, 456, 0, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	531, 532, 533, 534, 0, 470, 0, 464, 465, 535,
	466, 536, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 479, 0, 480,
	0, 0, 481, 482, 483, 537, 538, 539, 226, 485,
	484, 540, 0, 0, 0, 0, 486, 487, 541, 488,
	489, 490, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 599, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 510, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 0, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 0, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 0, 485, 484, 540, 593,
	0, 226, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 253,
	496, 497, 498, 0, 254, 583, 499, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 581, 0, 268, 269, 270, 0,
	271, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 277, 0, 278, 500, 501, 0,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 503, 504, 0, 0, 0, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 0, 307,
	0, 0, 0, 308, 309, 506, 507, 310, 311, 0,
	312, 508, 0, 509, 313, 0, 314, 315, 316, 317,
	318, 510, 511, 512, 371, 0, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 0, 325, 326, 328,
	0, 0, 327, 513, 514, 0, 515, 0, 329, 0,
	516, 0, 330, 331, 332, 0, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	517, 0, 342, 343, 0, 0, 344, 345, 582, 0,
	0, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 594, 0,
	363, 364, 367, 368, 366, 0, 365, 0, 0, 0,
	369, 0, 518, 370, 519, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 0, 381, 0, 521, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	524, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 0, 416, 417, 418,
	419, 584, 420, 0, 421, 425, 426, 590, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 585, 437, 0,
	438, 422, 423, 439, 440, 0, 441, 442, 528, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 530, 0, 455, 456, 0, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	589, 532, 533, 534, 0, 470, 0, 464, 587, 535,
	466, 536, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 479, 0, 480,
	0, 0, 481, 482, 483, 537, 538, 539, 0, 485,
	484, 540, 577, 0, 226, 0, 486, 487, 541, 488,
	489, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 498, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 510, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 0,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 0, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 420, 0, 421, 578, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 0, 485, 484, 540, 575, 0, 226, 0, 486,
	487, 541, 488, 489, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	0, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 0, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 0, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 0, 327, 513,
	514, 0, 515, 0, 329, 0, 516, 0, 330, 331,
	332, 0, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 0, 363, 364, 367, 368,
	366, 0, 365, 0, 0, 0, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 0, 381, 0,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 0, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 0, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 0, 485, 484, 540, 569, 0,
	226, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	510, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 0, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 0, 485, 484,
	540, 547, 0, 226, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 510, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	0, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	226, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	510, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 0, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 226, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	0, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 0, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 2929, 511, 512,
	371, 0, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 0, 327, 513,
	514, 0, 515, 0, 329, 0, 516, 0, 330, 331,
	332, 0, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 0, 363, 364, 367, 368,
	366, 0, 365, 0, 0, 0, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 0, 381, 0,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 404, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 0, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 0, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 226, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 498, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 313, 0, 314,
	315, 316, 317, 318, 2890, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 0,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 0, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 386, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 401, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 420, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 226, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 0, 0, 0, 232, 233,
	234, 235, 236, 237, 0, 238, 239, 0, 0, 0,
	0, 0, 491, 0, 0, 0, 0, 240, 241, 243,
	242, 244, 245, 246, 492, 493, 0, 494, 247, 495,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 253,
	496, 497, 498, 0, 254, 255, 499, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 262, 0, 0, 264,
	265, 266, 263, 0, 267, 0, 268, 269, 270, 0,
	271, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 277, 0, 278, 500, 501, 0,
	282, 279, 280, 0, 283, 281, 0, 284, 0, 0,
	285, 286, 287, 0, 288, 0, 289, 290, 0, 291,
	292, 502, 293, 294, 296, 298, 295, 299, 300, 301,
	302, 503, 504, 0, 0, 0, 0, 0, 0, 0,
	303, 304, 305, 505, 0, 0, 0, 306, 0, 307,
	0, 0, 0, 308, 309, 506, 507, 310, 311, 0,
	312, 508, 0, 509, 313, 0, 314, 315, 316, 317,
	318, 2836, 511, 512, 371, 0, 319, 320, 0, 321,
	322, 323, 324, 0, 0, 0, 0, 325, 326, 328,
	0, 0, 327, 513, 514, 0, 515, 0, 329, 0,
	516, 0, 330, 331, 332, 0, 333, 0, 0, 0,
	334, 335, 336, 337, 338, 0, 340, 339, 0, 341,
	517, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	0, 347, 348, 349, 350, 0, 351, 352, 354, 356,
	353, 355, 360, 357, 358, 359, 362, 0, 361, 0,
	363, 364, 367, 368, 366, 0, 365, 0, 0, 0,
	369, 0, 518, 370, 519, 372, 373, 0, 0, 374,
	0, 0, 0, 376, 377, 378, 0, 0, 379, 380,
	520, 0, 381, 0, 521, 382, 383, 375, 384, 385,
	386, 387, 388, 389, 390, 0, 391, 392, 522, 523,
	524, 393, 525, 394, 395, 0, 396, 0, 397, 398,
	399, 400, 401, 402, 403, 526, 404, 405, 0, 0,
	0, 0, 0, 0, 406, 0, 408, 409, 410, 407,
	411, 412, 413, 414, 0, 415, 0, 416, 417, 418,
	419, 527, 420, 0, 421, 425, 426, 427, 428, 429,
	430, 431, 0, 433, 434, 432, 435, 436, 437, 0,
	438, 422, 423, 439, 440, 0, 441, 442, 528, 0,
	443, 0, 444, 445, 446, 447, 424, 448, 453, 529,
	449, 450, 451, 452, 530, 0, 455, 456, 0, 454,
	0, 457, 458, 459, 460, 461, 297, 462, 0, 463,
	531, 532, 533, 534, 0, 470, 0, 464, 465, 535,
	466, 536, 0, 467, 468, 469, 0, 471, 472, 0,
	0, 473, 474, 475, 477, 478, 476, 479, 0, 480,
	0, 0, 481, 482, 483, 537, 538, 539, 226, 485,
	484, 540, 0, 0, 0, 0, 486, 487, 541, 488,
	489, 490, 0, 0, 0, 232, 233, 234, 235, 236,
	237, 0, 238, 239, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 240, 241, 243, 242, 244, 245,
	246, 492, 493, 0, 494, 247, 495, 0, 248, 249,
	250, 251, 252, 0, 0, 0, 253, 496, 497, 498,
	0, 254, 255, 499, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 262, 0, 0, 264, 265, 266, 263,
	0, 267, 0, 268, 269, 270, 0, 271, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 277, 0, 278, 500, 501, 0, 282, 279, 280,
	0, 283, 281, 0, 284, 0, 0, 285, 286, 287,
	0, 288, 0, 289, 290, 0, 291, 292, 502, 293,
	294, 296, 298, 295, 299, 300, 301, 302, 503, 504,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 305,
	505, 0, 0, 0, 306, 0, 307, 0, 0, 0,
	308, 309, 506, 507, 310, 311, 0, 312, 508, 0,
	509, 313, 0, 314, 315, 316, 317, 318, 2834, 511,
	512, 371, 0, 319, 320, 0, 321, 322, 323, 324,
	0, 0, 0, 0, 325, 326, 328, 0, 0, 327,
	513, 514, 0, 515, 0, 329, 0, 516, 0, 330,
	331, 332, 0, 333, 0, 0, 0, 334, 335, 336,
	337, 338, 0, 340, 339, 0, 341, 517, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 0, 347, 348,
	349, 350, 0, 351, 352, 354, 356, 353, 355, 360,
	357, 358, 359, 362, 0, 361, 0, 363, 364, 367,
	368, 366, 0, 365, 0, 0, 0, 369, 0, 518,
	370, 519, 372, 373, 0, 0, 374, 0, 0, 0,
	376, 377, 378, 0, 0, 379, 380, 520, 0, 381,
	0, 521, 382, 383, 375, 384, 385, 386, 387, 388,
	389, 390, 0, 391, 392, 522, 523, 524, 393, 525,
	394, 395, 0, 396, 0, 397, 398, 399, 400, 401,
	402, 403, 526, 404, 405, 0, 0, 0, 0, 0,
	0, 406, 0, 408, 409, 410, 407, 411, 412, 413,
	414, 0, 415, 0, 416, 417, 418, 419, 527, 420,
	0, 421, 425, 426, 427, 428, 429, 430, 431, 0,
	433, 434, 432, 435, 436, 437, 0, 438, 422, 423,
	439, 440, 0, 441, 442, 528, 0, 443, 0, 444,
	445, 446, 447, 424, 448, 453, 529, 449, 450, 451,
	452, 530, 0, 455, 456, 0, 454, 0, 457, 458,
	459, 460, 461, 297, 462, 0, 463, 531, 532, 533,
	534, 0, 470, 0, 464, 465, 535, 466, 536, 0,
	467, 468, 469, 0, 471, 472, 0, 0, 473, 474,
	475, 477, 478, 476, 479, 0, 480, 0, 0, 481,
	482, 483, 537, 538, 539, 226, 485, 484, 540, 0,
	0, 0, 0, 486, 487, 541, 488, 489, 490, 0,
	0, 0, 232, 233, 234, 235, 236, 237, 0, 238,
	239, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 240, 241, 243, 242, 244, 245, 246, 492, 493,
	0, 494, 247, 495, 0, 248, 249, 250, 251, 252,
	0, 0, 0, 253, 496, 497, 498, 0, 254, 255,
	499, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	262, 0, 0, 264, 265, 266, 263, 0, 267, 0,
	268, 269, 270, 0, 271, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 277, 0,
	278, 500, 501, 0, 282, 279, 280, 0, 283, 281,
	0, 284, 0, 0, 285, 286, 287, 0, 288, 0,
	289, 290, 0, 291, 292, 502, 293, 294, 296, 298,
	295, 299, 300, 301, 302, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 303, 304, 305, 505, 0, 0,
	0, 306, 0, 307, 0, 0, 0, 308, 309, 506,
	507, 310, 311, 0, 312, 508, 0, 509, 313, 0,
	314, 315, 316, 317, 318, 2820, 511, 512, 371, 0,
	319, 320, 0, 321, 322, 323, 324, 0, 0, 0,
	0, 325, 326, 328, 0, 0, 327, 513, 514, 0,
	515, 0, 329, 0, 516, 0, 330, 331, 332, 0,
	333, 0, 0, 0, 334, 335, 336, 337, 338, 0,
	340, 339, 0, 341, 517, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 0, 347, 348, 349, 350, 0,
	351, 352, 354, 356, 353, 355, 360, 357, 358, 359,
	362, 0, 361, 0, 363, 364, 367, 368, 366, 0,
	365, 0, 0, 0, 369, 0, 518, 370, 519, 372,
	373, 0, 0, 374, 0, 0, 0, 376, 377, 378,
	0, 0, 379, 380, 520, 0, 381, 0, 521, 382,
	383, 375, 384, 385, 386, 387, 388, 389, 390, 0,
	391, 392, 522, 523, 524, 393, 525, 394, 395, 0,
	396, 0, 397, 398, 399, 400, 401, 402, 403, 526,
	404, 405, 0, 0, 0, 0, 0, 0, 406, 0,
	408, 409, 410, 407, 411, 412, 413, 414, 0, 415,
	0, 416, 417, 418, 419, 527, 420, 0, 421, 425,
	426, 427, 428, 429, 430, 431, 0, 433, 434, 432,
	435, 436, 437, 0, 438, 422, 423, 439, 440, 0,
	441, 442, 528, 0, 443, 0, 444, 445, 446, 447,
	424, 448, 453, 529, 449, 450, 451, 452, 530, 0,
	455, 456, 0, 454, 0, 457, 458, 459, 460, 461,
	297, 462, 0, 463, 531, 532, 533, 534, 0, 470,
	0, 464, 465, 535, 466, 536, 0, 467, 468, 469,
	0, 471, 472, 0, 0, 473, 474, 475, 477, 478,
	476, 479, 0, 480, 0, 0, 481, 482, 483, 537,
	538, 539, 226, 485, 484, 540, 0, 0, 0, 0,
	486, 487, 541, 488, 489, 490, 0, 0, 0, 232,
	233, 234, 235, 236, 237, 0, 238, 239, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 240, 241,
	243, 242, 244, 245, 246, 492, 493, 0, 494, 247,
	495, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	253, 496, 497, 498, 0, 254, 255, 499, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 262, 0, 0,
	264, 265, 266, 263, 0, 267, 0, 268, 269, 270,
	0, 271, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 277, 0, 278, 500, 501,
	0, 282, 279, 280, 0, 283, 281, 0, 284, 0,
	0, 285, 286, 287, 0, 288, 0, 289, 290, 0,
	291, 292, 502, 293, 294, 296, 298, 295, 299, 300,
	301, 302, 503, 504, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 305, 505, 0, 0, 0, 306, 0,
	307, 0, 0, 0, 308, 309, 506, 507, 310, 311,
	0, 312, 508, 0, 509, 313, 0, 314, 315, 316,
	317, 318, 2465, 511, 512, 371, 0, 319, 320, 0,
	321, 322, 323, 324, 0, 0, 0, 0, 325, 326,
	328, 0, 0, 327, 513, 514, 0, 515, 0, 329,
	0, 516, 0, 330, 331, 332, 0, 333, 0, 0,
	0, 334, 335, 336, 337, 338, 0, 340, 339, 0,
	341, 517, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 0, 347, 348, 349, 350, 0, 351, 352, 354,
	356, 353, 355, 360, 357, 358, 359, 362, 0, 361,
	0, 363, 364, 367, 368, 366, 0, 365, 0, 0,
	0, 369, 0, 518, 370, 519, 372, 373, 0, 0,
	374, 0, 0, 0, 376, 377, 378, 0, 0, 379,
	380, 520, 0, 381, 0, 521, 382, 383, 375, 384,
	385, 386, 387, 388, 389, 390, 0, 391, 392, 522,
	523, 524, 393, 525, 394, 395, 0, 396, 0, 397,
	398, 399, 400, 401, 402, 403, 526, 404, 405, 0,
	0, 0, 0, 0, 0, 406, 0, 408, 409, 410,
	407, 411, 412, 413, 414, 0, 415, 0, 416, 417,
	418, 419, 527, 420, 0, 421, 425, 426, 427, 428,
	429, 430, 431, 0, 433, 434, 432, 435, 436, 437,
	0, 438, 422, 423, 439, 440, 0, 441, 442, 528,
	0, 443, 0, 444, 445, 446, 447, 424, 448, 453,
	529, 449, 450, 451, 452, 530, 0, 455, 456, 0,
	454, 0, 457, 458, 459, 460, 461, 297, 462, 0,
	463, 531, 532, 533, 534, 0, 470, 0, 464, 465,
	535, 466, 536, 0, 467, 468, 469, 0, 471, 472,
	0, 0, 473, 474, 475, 477, 478, 476, 479, 0,
	480, 0, 0, 481, 482, 483, 537, 538, 539, 226,
	485, 484, 540, 0, 0, 0, 0, 486, 487, 541,
	488, 489, 490, 0, 0, 0, 232, 233, 234, 235,
	236, 237, 0, 238, 239, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 240, 241, 243, 242, 244,
	245, 246, 492, 493, 0, 494, 247, 495, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 253, 496, 497,
	498, 0, 254, 255, 499, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 262, 0, 0, 264, 265, 266,
	263, 0, 267, 0, 268, 269, 270, 0, 271, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 277, 0, 278, 500, 501, 0, 282, 279,
	280, 0, 283, 281, 0, 284, 0, 0, 285, 286,
	287, 0, 288, 0, 289, 290, 0, 291, 292, 502,
	293, 294, 296, 298, 295, 299, 300, 301, 302, 503,
	504, 0, 0, 0, 0, 0, 0, 0, 303, 304,
	305, 505, 0, 0, 0, 306, 0, 307, 0, 0,
	0, 308, 309, 506, 507, 310, 311, 0, 312, 508,
	0, 509, 313, 0, 314, 315, 316, 317, 318, 510,
	511, 512, 371, 0, 319, 320, 0, 321, 322, 323,
	324, 0, 0, 0, 0, 325, 326, 328, 0, 0,
	327, 513, 514, 0, 515, 0, 329, 0, 516, 0,
	330, 331, 332, 0, 333, 0, 0, 0, 334, 335,
	336, 337, 338, 0, 340, 339, 0, 341, 517, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 0, 347,
	348, 349, 350, 0, 351, 352, 354, 356, 353, 355,
	360, 357, 358, 359, 362, 0, 361, 0, 363, 364,
	367, 368, 366, 0, 365, 0, 0, 0, 369, 0,
	518, 370, 519, 372, 373, 0, 0, 374, 0, 0,
	0, 376, 377, 378, 0, 0, 379, 380, 520, 0,
	381, 0, 521, 382, 383, 375, 384, 385, 386, 387,
	388, 389, 390, 0, 391, 392, 522, 523, 524, 393,
	525, 394, 395, 0, 396, 0, 397, 398, 399, 400,
	401, 402, 403, 526, 404, 405, 0, 0, 0, 0,
	0, 0, 406, 0, 408, 409, 410, 407, 411, 412,
	413, 414, 0, 415, 0, 416, 417, 418, 419, 527,
	420, 0, 421, 578, 426, 427, 428, 429, 430, 431,
	0, 433, 434, 432, 435, 436, 437, 0, 438, 422,
	423, 439, 440, 0, 441, 442, 528, 0, 443, 0,
	444, 445, 446, 447, 424, 448, 453, 529, 449, 450,
	451, 452, 530, 0, 455, 456, 0, 454, 0, 457,
	458, 459, 460, 461, 297, 462, 0, 463, 531, 532,
	533, 534, 0, 470, 0, 464, 465, 535, 466, 536,
	0, 467, 468, 469, 0, 471, 472, 0, 0, 473,
	474, 475, 477, 478, 476, 479, 0, 480, 0, 0,
	481, 482, 483, 537, 538, 539, 226, 485, 484, 540,
	0, 0, 0, 0, 486, 487, 541, 488, 489, 490,
	0, 0, 0, 232, 233, 234, 235, 236, 237, 0,
	238, 239, 0, 0, 0, 0, 0, 491, 0, 1892,
	0, 0, 240, 241, 243, 242, 244, 245, 246, 492,
	493, 0, 494, 247, 495, 0, 248, 249, 250, 251,
	252, 0, 0, 0, 253, 496, 497, 498, 0, 254,
	255, 499, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 262, 0, 0, 264, 265, 266, 263, 0, 267,
	0, 268, 269, 270, 0, 271, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 277,
	0, 278, 500, 501, 0, 282, 279, 280, 0, 283,
	281, 0, 284, 0, 0, 285, 286, 287, 0, 288,
	0, 289, 290, 0, 291, 292, 502, 293, 294, 296,
	298, 295, 299, 300, 301, 302, 503, 504, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 305, 505, 0,
	0, 0, 306, 0, 307, 0, 0, 0, 308, 309,
	506, 507, 310, 311, 0, 312, 508, 0, 509, 313,
	0, 314, 315, 316, 317, 318, 510, 511, 512, 371,
	0, 319, 320, 0, 321, 322, 323, 324, 0, 0,
	0, 0, 325, 326, 328, 0, 0, 327, 513, 514,
	0, 515, 0, 329, 0, 516, 0, 330, 331, 332,
	0, 333, 0, 0, 0, 334, 335, 336, 337, 338,
	0, 340, 339, 0, 341, 517, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 0, 347, 348, 349, 350,
	0, 351, 352, 354, 356, 353, 355, 360, 357, 358,
	359, 362, 0, 361, 0, 363, 364, 367, 368, 366,
	0, 365, 0, 0, 0, 369, 0, 518, 370, 519,
	372, 373, 0, 0, 374, 0, 0, 0, 376, 377,
	378, 0, 0, 379, 380, 520, 0, 381, 0, 521,
	382, 383, 375, 384, 385, 386, 387, 388, 389, 390,
	0, 391, 392, 522, 523, 524, 393, 525, 394, 395,
	0, 396, 0, 397, 398, 399, 400, 401, 402, 403,
	526, 404, 405, 0, 0, 0, 0, 0, 0, 406,
	0, 408, 409, 410, 407, 411, 412, 413, 414, 0,
	415, 0, 416, 417, 418, 419, 527, 420, 0, 421,
	425, 426, 427, 428, 429, 430, 431, 0, 433, 434,
	432, 435, 436, 437, 0, 0, 422, 423, 439, 440,
	0, 441, 442, 528, 0, 443, 0, 444, 445, 446,
	447, 424, 448, 453, 529, 449, 450, 451, 452, 530,
	0, 455, 456, 0, 454, 0, 457, 458, 459, 460,
	461, 297, 462, 0, 463, 531, 532, 533, 534, 0,
	470, 0, 464, 465, 535, 466, 536, 0, 467, 468,
	469, 0, 471, 472, 0, 0, 473, 474, 475, 477,
	478, 476, 479, 0, 480, 0, 0, 481, 482, 483,
	537, 538, 539, 226, 485, 484, 540, 0, 0, 0,
	0, 486, 487, 541, 488, 489, 490, 0, 0, 0,
	232, 233, 234, 235, 236, 237, 0, 238, 239, 0,
	0, 0, 0, 0, 491, 0, 0, 0, 0, 240,
	241, 243, 242, 244, 245, 246, 492, 493, 0, 494,
	247, 495, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 253, 496, 497, 498, 0, 254, 255, 499, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 262, 0,
	0, 264, 265, 266, 263, 0, 267, 0, 268, 269,
	270, 0, 271, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 277, 0, 278, 500,
	501, 0, 282, 279, 280, 0, 283, 281, 0, 284,
	0, 0, 285, 286, 287, 0, 288, 0, 289, 290,
	0, 291, 292, 502, 293, 294, 296, 298, 295, 299,
	300, 301, 302, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 305, 505, 0, 0, 0, 306,
	0, 307, 0, 0, 0, 308, 309, 506, 507, 310,
	311, 0, 312, 508, 0, 509, 313, 0, 314, 315,
	316, 317, 318, 1314, 511, 512, 371, 0, 319, 320,
	0, 321, 322, 323, 324, 0, 0, 0, 0, 325,
	326, 328, 0, 0, 327, 513, 514, 0, 515, 0,
	329, 0, 516, 0, 330, 331, 332, 0, 333, 0,
	0, 0, 334, 335, 336, 337, 338, 0, 340, 339,
	0, 341, 517, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 0, 347, 348, 349, 350, 0, 351, 352,
	354, 356, 353, 355, 360, 357, 358, 359, 362, 0,
	361, 0, 363, 364, 367, 368, 366, 0, 365, 0,
	0, 0, 369, 0, 518, 370, 519, 372, 373, 0,
	0, 374, 0, 0, 0, 376, 377, 378, 0, 0,
	379, 380, 520, 0, 381, 0, 521, 382, 383, 375,
	384, 385, 386, 387, 388, 389, 390, 0, 391, 392,
	522, 523, 524, 393, 525, 394, 395, 0, 396, 0,
	397, 398, 399, 400, 401, 402, 403, 526, 404, 405,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 409,
	410, 407, 411, 412, 413, 414, 0, 415, 0, 416,
	417, 418, 419, 527, 420, 0, 421, 425, 426, 427,
	428, 429, 430, 431, 0, 433, 434, 432, 435, 436,
	437, 0, 438, 422, 423, 439, 440, 0, 441, 442,
	528, 0, 443, 0, 444, 445, 446, 447, 424, 448,
	453, 529, 449, 450, 451, 452, 530, 0, 455, 456,
	0, 454, 0, 457, 458, 459, 460, 461, 297, 462,
	0, 463, 531, 532, 533, 534, 0, 470, 0, 464,
	465, 535, 466, 536, 0, 467, 468, 469, 0, 471,
	472, 0, 0, 473, 474, 475, 477, 478, 476, 479,
	0, 480, 0, 0, 481, 482, 483, 537, 538, 539,
	226, 485, 484, 540, 0, 0, 0, 0, 486, 487,
	541, 488, 489, 490, 0, 0, 0, 232, 233, 234,
	235, 236, 237, 0, 238, 239, 0, 0, 0, 0,
	0, 491, 0, 0, 0, 0, 240, 241, 243, 242,
	244, 245, 246, 492, 493, 0, 494, 247, 495, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 253, 496,
	497, 498, 0, 254, 255, 499, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 262, 0, 0, 264, 265,
	266, 263, 0, 267, 0, 268, 269, 270, 0, 271,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 277, 0, 278, 500, 501, 0, 282,
	279, 280, 0, 283, 281, 0, 284, 0, 0, 285,
	286, 287, 0, 288, 0, 289, 290, 0, 291, 292,
	502, 293, 294, 296, 298, 295, 299, 300, 301, 302,
	503, 504, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 305, 505, 0, 0, 0, 306, 0, 307, 0,
	0, 0, 308, 309, 506, 507, 310, 311, 0, 312,
	508, 0, 509, 313, 0, 314, 315, 316, 317, 318,
	1254, 511, 512, 371, 0, 319, 320, 0, 321, 322,
	323, 324, 0, 0, 0, 0, 325, 326, 328, 0,
	0, 327, 513, 514, 0, 515, 0, 329, 0, 516,
	0, 330, 331, 332, 0, 333, 0, 0, 0, 334,
	335, 336, 337, 338, 0, 340, 339, 0, 341, 517,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 0,
	347, 348, 349, 350, 0, 351, 352, 354, 356, 353,
	355, 360, 357, 358, 359, 362, 0, 361, 0, 363,
	364, 367, 368, 366, 0, 365, 0, 0, 0, 369,
	0, 518, 370, 519, 372, 373, 0, 0, 374, 0,
	0, 0, 376, 377, 378, 0, 0, 379, 380, 520,
	0, 381, 0, 521, 382, 383, 375, 384, 385, 386,
	387, 388, 389, 390, 0, 391, 392, 522, 523, 524,
	393, 525, 394, 395, 0, 396, 0, 397, 398, 399,
	400, 401, 402, 403, 526, 404, 405, 0, 0, 0,
	0, 0, 0, 406, 0, 408, 409, 410, 407, 411,
	412, 413, 414, 0, 415, 0, 416, 417, 418, 419,
	527, 420, 0, 421, 425, 426, 427, 428, 429, 430,
	431, 0, 433, 434, 432, 435, 436, 437, 0, 438,
	422, 423, 439, 440, 0, 441, 442, 528, 0, 443,
	0, 444, 445, 446, 447, 424, 448, 453, 529, 449,
	450, 451, 452, 530, 0, 455, 456, 0, 454, 0,
	457, 458, 459, 460, 461, 297, 462, 0, 463, 531,
	532, 533, 534, 0, 470, 0, 464, 465, 535, 466,
	536, 0, 467, 468, 469, 0, 471, 472, 0, 0,
	473, 474, 475, 477, 478, 476, 479, 0, 480, 0,
	0, 481, 482, 483, 537, 538, 539, 226, 485, 484,
	540, 0, 0, 0, 0, 486, 487, 541, 488, 489,
	490, 0, 0, 0, 232, 233, 234, 235, 236, 237,
	0, 238, 239, 0, 0, 0, 0, 0, 491, 0,
	0, 0, 0, 240, 241, 243, 242, 244, 245, 246,
	492, 493, 0, 494, 247, 495, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 253, 496, 497, 498, 0,
	254, 255, 499, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 0, 0, 264, 265, 266, 263, 0,
	267, 0, 268, 269, 270, 0, 271, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	277, 0, 278, 500, 501, 0, 282, 279, 280, 0,
	283, 281, 0, 284, 0, 0, 285, 286, 287, 0,
	288, 0, 289, 290, 0, 291, 292, 502, 293, 294,
	296, 298, 295, 299, 300, 301, 302, 503, 504, 0,
	0, 0, 0, 0, 0, 0, 303, 304, 305, 505,
	0, 0, 0, 306, 0, 307, 0, 0, 0, 308,
	309, 506, 507, 310, 311, 0, 312, 508, 0, 509,
	313, 0, 314, 315, 316, 317, 318, 510, 511, 512,
	371, 0, 319, 320, 0, 321, 322, 323, 324, 0,
	0, 0, 0, 325, 326, 328, 0, 0, 327, 513,
	514, 0, 515, 0, 329, 0, 516, 0, 330, 331,
	332, 0, 333, 0, 0, 0, 334, 335, 336, 337,
	338, 0, 340, 339, 0, 341, 517, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 0, 347, 348, 349,
	350, 0, 351, 352, 354, 356, 353, 355, 360, 357,
	358, 359, 362, 0, 361, 0, 363, 364, 367, 368,
	366, 0, 365, 0, 0, 0, 369, 0, 518, 370,
	519, 372, 373, 0, 0, 374, 0, 0, 0, 376,
	377, 378, 0, 0, 379, 380, 520, 0, 381, 0,
	521, 382, 383, 375, 384, 385, 386, 387, 388, 389,
	390, 0, 391, 392, 522, 523, 524, 393, 525, 394,
	395, 0, 396, 0, 397, 398, 399, 400, 401, 402,
	403, 526, 1002, 405, 0, 0, 0, 0, 0, 0,
	406, 0, 408, 409, 410, 407, 411, 412, 413, 414,
	0, 415, 0, 416, 417, 418, 419, 527, 420, 0,
	421, 425, 426, 427, 428, 429, 430, 431, 0, 433,
	434, 432, 435, 436, 437, 0, 438, 422, 423, 439,
	440, 0, 441, 442, 528, 0, 443, 0, 444, 445,
	446, 447, 424, 448, 453, 529, 449, 450, 451, 452,
	530, 0, 455, 456, 0, 454, 0, 457, 458, 459,
	460, 461, 297, 462, 0, 463, 531, 532, 533, 534,
	0, 470, 0, 464, 465, 535, 466, 536, 0, 467,
	468, 469, 0, 471, 472, 0, 0, 473, 474, 475,
	477, 478, 476, 479, 0, 480, 0, 0, 481, 482,
	483, 537, 538, 539, 226, 485, 484, 540, 0, 0,
	0, 0, 486, 487, 541, 488, 489, 490, 0, 0,
	0, 232, 233, 234, 235, 236, 237, 0, 238, 239,
	0, 0, 0, 0, 0, 491, 0, 0, 0, 0,
	240, 241, 243, 242, 244, 245, 246, 492, 493, 0,
	494, 247, 495, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 253, 496, 497, 498, 0, 254, 255, 499,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 262,
	0, 0, 264, 265, 266, 263, 0, 267, 0, 268,
	269, 270, 0, 271, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 277, 0, 278,
	500, 501, 0, 282, 279, 280, 0, 283, 281, 0,
	284, 0, 0, 285, 286, 287, 0, 288, 0, 289,
	290, 0, 291, 292, 502, 293, 294, 296, 298, 295,
	299, 300, 301, 302, 503, 504, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 305, 505, 0, 0, 0,
	306, 0, 307, 0, 0, 0, 308, 309, 506, 507,
	310, 311, 0, 312, 508, 0, 509, 0, 0, 314,
	315, 316, 317, 318, 510, 511, 512, 371, 0, 319,
	320, 0, 321, 322, 323, 324, 0, 0, 0, 0,
	325, 326, 328, 0, 0, 327, 513, 514, 0, 515,
	0, 329, 0, 516, 0, 330, 331, 332, 0, 333,
	0, 0, 0, 334, 335, 336, 337, 338, 0, 340,
	339, 0, 341, 517, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 0, 347, 348, 349, 350, 0, 351,
	352, 354, 356, 353, 355, 360, 357, 358, 359, 362,
	0, 361, 0, 363, 364, 367, 368, 366, 0, 365,
	0, 0, 0, 369, 0, 518, 370, 519, 372, 373,
	0, 0, 374, 0, 0, 0, 376, 377, 378, 0,
	0, 379, 380, 520, 0, 381, 0, 521, 382, 383,
	375, 384, 385, 0, 387, 388, 389, 390, 0, 391,
	392, 522, 523, 524, 393, 525, 394, 395, 0, 396,
	0, 397, 398, 399, 400, 0, 402, 403, 526, 404,
	405, 0, 0, 0, 0, 0, 0, 406, 0, 408,
	409, 410, 407, 411, 412, 413, 414, 0, 415, 0,
	416, 417, 418, 419, 527, 0, 0, 421, 425, 426,
	427, 428, 429, 430, 431, 0, 433, 434, 432, 435,
	436, 437, 0, 438, 422, 423, 439, 440, 0, 441,
	442, 528, 0, 443, 0, 444, 445, 446, 447, 424,
	448, 453, 529, 449, 450, 451, 452, 530, 0, 455,
	456, 0, 454, 0, 457, 458, 459, 460, 461, 297,
	462, 0, 463, 531, 532, 533, 534, 0, 470, 0,
	464, 465, 535, 466, 536, 0, 467, 468, 469, 0,
	471, 472, 0, 0, 473, 474, 475, 477, 478, 476,
	479, 0, 480, 0, 0, 481, 482, 483, 537, 538,
	539, 0, 485, 484, 540, 0, 0, 0, 0, 486,
	487, 541, 488, 489, 490, 1491, 1492, 0, 1524, 1525,
	1526, 1534, 1535, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1527, 1522, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 1491, 1492,
	0, 1524, 1525, 1526, 1534, 1535, 1536, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 1527,
	1522, 0, 0, 0, 1513, 0, 0, 1494, 0, 0,
	0, 0, 1510, 0, 1540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 1517, 1518, 1519, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 1541, 1516, 1517, 1518, 1519,
	0, 1521, 1523, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1537, 0, 1538, 0,
	0, 0, 0, 0, 0, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 1541, 0,
	0, 1529, 0, 0, 1521, 1523, 0, 0, 0, 0,
	0, 0, 1514, 0, 0, 0, 0, 0, 0, 1537,
	0, 1538, 0, 0, 0, 0, 0, 0, 1508, 1509,
	0, 0, 0, 0, 0, 0, 1539, 0, 0, 0,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 1491, 1492, 0, 1524, 1525, 1526, 1534, 1535,
	1536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1532, 1527, 1522, 1520, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 1540, 0,
	0, 0, 0, 1515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 1532, 0, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0,
	1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 2669, 0, 0,
	1516, 1517, 1518, 1519, 0, 0, 0, 0, 0, 0,
	1499, 0, 1530, 0, 0, 0, 1505, 1506, 1512, 1533,
	1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498,
	1500, 1501, 0, 0, 0, 0, 0, 0, 0, 1531,
	2666, 0, 1541, 0, 0, 0, 0, 0, 1521, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 1538, 0, 0, 0, 0,
	0, 0, 1508, 1509, 0, 1491, 1492, 0, 1524, 1525,
	1526, 1534, 1535, 1536, 0, 0, 0, 0, 1529, 0,
	0, 0, 0, 0, 0, 0, 1527, 1522, 0, 1514,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	1528, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 1516, 1517, 1518, 1519, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 1532,
	0, 0, 0, 0, 0, 0, 1491, 1492, 0, 1524,
	1525, 1526, 1534, 1535, 1536, 0, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 1541, 0, 1527, 1522, 0,
	0, 1521, 1523, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 1537, 0, 1538, 0,
	0, 0, 0, 0, 0, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 1529, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 1514, 1510, 0, 0, 1530, 0, 0, 0,
	1505, 1506, 1512, 1533, 1511, 1507, 0, 1504, 1502, 1503,
	1495, 1496, 1497, 1498, 1500, 1501, 1539, 0, 0, 0,
	0, 0, 0, 0, 2665, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 1517, 1518, 1519, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1531, 0, 0, 1541, 0, 0, 0,
	1515, 0, 1521, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 0, 1538,
	0, 0, 1532, 0, 0, 0, 1508, 1509, 0, 1491,
	1492, 0, 1524, 1525, 1526, 1534, 1535, 1536, 0, 0,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	1527, 1522, 0, 1514, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 1528, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1530,
	0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0,
	1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 2664, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 1516, 1517, 1518,
	1519, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 1532, 0, 0, 0, 0, 0, 0,
	1491, 1492, 0, 1524, 1525, 1526, 1534, 1535, 1536, 0,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 1541,
	0, 1527, 1522, 0, 0, 1521, 1523, 0, 0, 1494,
	0, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	1537, 0, 1538, 0, 0, 0, 0, 0, 0, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 1529, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 1514, 1510, 0, 0,
	1530, 0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507,
	0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501,
	1539, 0, 0, 0, 0, 0, 0, 0, 2125, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1516, 1517,
	1518, 1519, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1531, 0, 0,
	1541, 0, 0, 0, 1515, 0, 1521, 1523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 0, 1538, 0, 0, 1532, 0, 0, 0,
	1508, 1509, 0, 1491, 1492, 0, 1524, 1525, 1526, 1534,
	1535, 1536, 0, 0, 0, 0, 1529, 0, 0, 0,
	0, 0, 0, 0, 1527, 1522, 0, 1514, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 1528, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 1530, 0, 0, 0, 1505, 1506, 1512,
	1533, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497,
	1498, 1500, 1501, 0, 0, 0, 0, 3730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 1516, 1517, 1518, 1519, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 1532, 0, 0,
	0, 0, 0, 0, 1491, 1492, 0, 1524, 1525, 1526,
	1534, 1535, 1536, 0, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 1541, 0, 1527, 1522, 0, 0, 1521,
	1523, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 1537, 0, 1538, 0, 0, 0,
	0, 0, 0, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 1529,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	1514, 1510, 0, 0, 1530, 0, 0, 0, 1505, 1506,
	1512, 1533, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496,
	1497, 1498, 1500, 1501, 1539, 0, 0, 0, 3726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 1517, 1518, 1519, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 1541, 0, 0, 0, 1515, 0,
	1521, 1523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 1538, 0, 0,
	1532, 0, 0, 0, 1508, 1509, 0, 1491, 1492, 0,
	1524, 1525, 1526, 1534, 1535, 1536, 0, 0, 0, 0,
	1529, 0, 0, 0, 0, 0, 0, 0, 1527, 1522,
	0, 1514, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 1540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1530, 0, 0,
	0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504, 1502,
	1503, 1495, 1496, 1497, 1498, 1500, 1501, 0, 0, 0,
	0, 3640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 1516, 1517, 1518, 1519, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 1532, 0, 0, 0, 0, 0, 0, 1491, 1492,
	0, 1524, 1525, 1526, 1534, 1535, 1536, 0, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 1541, 0, 1527,
	1522, 0, 0, 1521, 1523, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 1540, 0, 0, 0, 1537, 0,
	1538, 0, 0, 0, 0, 0, 0, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 1529, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 1514, 1510, 0, 0, 1530, 0,
	0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504,
	1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 1539, 0,
	0, 0, 3639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 1517, 1518, 1519,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 1541, 0,
	0, 0, 1515, 0, 1521, 1523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1537,
	0, 1538, 0, 0, 1532, 0, 0, 0, 1508, 1509,
	0, 1491, 1492, 0, 1524, 1525, 1526, 1534, 1535, 1536,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 1527, 1522, 0, 1514, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 1540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 1528, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1530, 0, 0, 0, 1505, 1506, 1512, 1533, 1511,
	1507, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500,
	1501, 0, 0, 0, 0, 3498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 0, 0, 0, 1516,
	1517, 1518, 1519, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 1532, 0, 0, 0, 0,
	0, 0, 1491, 1492, 0, 1524, 1525, 1526, 1534, 1535,
	1536, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 1541, 0, 1527, 1522, 0, 0, 1521, 1523, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 1540, 0,
	0, 0, 1537, 0, 1538, 0, 0, 0, 0, 0,
	0, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 1529, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 1514, 1510,
	0, 0, 1530, 0, 0, 0, 1505, 1506, 1512, 1533,
	1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498,
	1500, 1501, 1539, 0, 0, 0, 3380, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 1517, 1518, 1519, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1531,
	0, 0, 1541, 0, 0, 0, 1515, 0, 1521, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 1538, 0, 0, 1532, 0,
	0, 0, 1508, 1509, 0, 1491, 1492, 0, 1524, 1525,
	1526, 1534, 1535, 1536, 0, 0, 0, 0, 1529, 0,
	0, 0, 0, 0, 0, 0, 1527, 1522, 0, 1514,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	1528, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 1530, 0, 0, 0, 1505,
	1506, 1512, 1533, 1511, 1507, 0, 1504, 1502, 1503, 1495,
	1496, 1497, 1498, 1500, 1501, 0, 0, 0, 0, 3326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 1516, 1517, 1518, 1519, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 1532,
	0, 0, 0, 0, 0, 0, 1491, 1492, 0, 1524,
	1525, 1526, 1534, 1535, 1536, 0, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 1541, 0, 1527, 1522, 0,
	0, 1521, 1523, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 1537, 0, 1538, 0,
	0, 0, 0, 0, 0, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 1529, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 1514, 1510, 0, 0, 1530, 0, 0, 0,
	1505, 1506, 1512, 1533, 1511, 1507, 0, 1504, 1502, 1503,
	1495, 1496, 1497, 1498, 1500, 1501, 1539, 0, 0, 0,
	3325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 1517, 1518, 1519, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1531, 0, 0, 1541, 0, 0, 0,
	1515, 0, 1521, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 0, 1538,
	0, 0, 1532, 0, 0, 0, 1508, 1509, 0, 1491,
	1492, 0, 1524, 1525, 1526, 1534, 1535, 1536, 0, 0,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	1527, 1522, 0, 1514, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 1528, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1530,
	0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0,
	1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0,
	0, 0, 0, 3324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 1516, 1517, 1518,
	1519, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 1532, 0, 0, 0, 0, 0, 0,
	1491, 1492, 0, 1524, 1525, 1526, 1534, 1535, 1536, 0,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 1541,
	0, 1527, 1522, 0, 0, 1521, 1523, 0, 0, 1494,
	0, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	1537, 0, 1538, 0, 0, 0, 0, 0, 0, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 1529, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 1514, 1510, 0, 0,
	1530, 0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507,
	0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501,
	1539, 0, 0, 0, 3059, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1516, 1517,
	1518, 1519, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1531, 0, 0,
	1541, 0, 0, 0, 1515, 0, 1521, 1523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 0, 1538, 0, 0, 1532, 0, 0, 0,
	1508, 1509, 0, 1491, 1492, 0, 1524, 1525, 1526, 1534,
	1535, 1536, 0, 0, 0, 0, 1529, 0, 0, 0,
	0, 0, 0, 0, 1527, 1522, 0, 1514, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 1528, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 1530, 0, 0, 0, 1505, 1506, 1512,
	1533, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497,
	1498, 1500, 1501, 0, 0, 0, 0, 2662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 1516, 1517, 1518, 1519, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 1532, 0, 0,
	0, 0, 0, 0, 1491, 1492, 0, 1524, 1525, 1526,
	1534, 1535, 1536, 0, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 1541, 0, 1527, 1522, 0, 0, 1521,
	1523, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	1540, 0, 0, 0, 1537, 0, 1538, 0, 0, 0,
	0, 0, 0, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 1529,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	1514, 1510, 0, 0, 1530, 0, 0, 0, 1505, 1506,
	1512, 1533, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496,
	1497, 1498, 1500, 1501, 1539, 0, 0, 0, 2661, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 1517, 1518, 1519, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 1541, 0, 0, 0, 1515, 0,
	1521, 1523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 1538, 0, 0,
	1532, 0, 0, 0, 1508, 1509, 0, 1491, 1492, 0,
	1524, 1525, 1526, 1534, 1535, 1536, 0, 0, 0, 0,
	1529, 0, 0, 0, 0, 0, 0, 0, 1527, 1522,
	0, 1514, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 1540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1530, 0, 0,
	0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504, 1502,
	1503, 1495, 1496, 1497, 1498, 1500, 1501, 0, 0, 0,
	0, 2660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 1516, 1517, 1518, 1519, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 1532, 0, 0, 0, 0, 0, 0, 1491, 1492,
	0, 1524, 1525, 1526, 1534, 1535, 1536, 0, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 1541, 0, 1527,
	1522, 0, 0, 1521, 1523, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 1540, 0, 0, 0, 1537, 0,
	1538, 0, 0, 0, 0, 0, 0, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 1529, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 1514, 1510, 0, 0, 1530, 0,
	0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504,
	1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 1539, 0,
	0, 0, 2659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 1517, 1518, 1519,
	0, 0, 0, 0, 0, 0, 1499, 3842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 1541, 0,
	0, 0, 1515, 0, 1521, 1523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1537,
	0, 1538, 0, 0, 1532, 0, 0, 0, 1508, 1509,
	0, 1491, 1492, 0, 1524, 1525, 1526, 1534, 1535, 1536,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 1527, 1522, 0, 1514, 0, 0, 2597, 0,
	1494, 0, 0, 0, 0, 0, 0, 1540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 1528, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1530, 0, 0, 0, 1505, 1506, 1512, 1533, 1511,
	1507, 3841, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500,
	1501, 0, 0, 2626, 0, 0, 0, 0, 0, 2598,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 0, 0, 0, 1516,
	1517, 1518, 1519, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 1532, 0, 0, 0, 0,
	0, 0, 1491, 1492, 0, 1524, 1525, 1526, 1534, 1535,
	1536, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 1541, 0, 1527, 1522, 0, 0, 1521, 1523, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 1540, 0,
	0, 0, 1537, 0, 1538, 0, 0, 0, 0, 0,
	0, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 1529, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 1514, 1510,
	0, 0, 1530, 0, 0, 0, 1505, 1506, 1512, 1533,
	1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498,
	1500, 1501, 1539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 1517, 1518, 1519, 0, 0, 0, 0, 0, 0,
	1499, 0, 2722, 0, 0, 2721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1531,
	0, 0, 1541, 0, 0, 0, 1515, 0, 1521, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 1538, 0, 0, 1532, 2245,
	0, 0, 1508, 1509, 0, 0, 1491, 1492, 0, 1524,
	1525, 1526, 1534, 1535, 1536, 0, 0, 0, 1529, 0,
	0, 0, 0, 0, 0, 0, 0, 1527, 1522, 1514,
	0, 0, 2244, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	1528, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1530, 0, 0, 0, 1505,
	1506, 1512, 1533, 1511, 1507, 0, 1504, 1502, 1503, 1495,
	1496, 1497, 1498, 1500, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 1492, 1515, 1524, 1525,
	1526, 1534, 1535, 1536, 1516, 1517, 1518, 1519, 0, 0,
	0, 0, 0, 0, 1499, 0, 1527, 1522, 0, 1532,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 1540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1531, 0, 0, 1541, 0, 0, 0,
	0, 0, 1521, 1523, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 1537, 0, 1538,
	0, 0, 1510, 0, 0, 0, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 1530, 0, 0, 0,
	1505, 1506, 1512, 1533, 1511, 1507, 0, 1504, 1502, 1503,
	1495, 1496, 1497, 1498, 1500, 1501, 0, 1539, 0, 0,
	0, 0, 0, 1516, 1517, 1518, 1519, 0, 0, 0,
	0, 0, 0, 1499, 1528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 1541, 0, 0, 0, 0,
	0, 1521, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 1537, 0, 1538, 0,
	0, 0, 0, 0, 0, 1508, 1509, 0, 0, 1491,
	1492, 1515, 1524, 1525, 1526, 1534, 1535, 1536, 0, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	1527, 1522, 1514, 1532, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 1528, 860, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 0, 1520, 0, 1505, 1506, 1512, 1533, 1511, 1507,
	0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501,
	1515, 0, 0, 0, 0, 0, 0, 1516, 1517, 1518,
	1519, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 1532, 1491, 1492, 0, 1524, 1525, 1526, 1534,
	1535, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1527, 1522, 1531, 0, 0, 1541,
	0, 0, 1494, 0, 0, 1521, 1523, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1537, 0, 1538, 0, 0, 0, 0, 0, 0, 1508,
	1509, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 1529, 0, 0, 0, 0,
	1510, 0, 0, 0, 0, 0, 1514, 0, 0, 1530,
	0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0,
	1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0,
	1539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 1517, 1518, 1519, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 2728, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	1531, 0, 0, 1541, 0, 0, 0, 0, 0, 1521,
	1523, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1537, 0, 1538, 0, 0, 0,
	0, 0, 0, 1508, 1509, 0, 1532, 1491, 1492, 0,
	1524, 1525, 1526, 1534, 1535, 1536, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 1522,
	1514, 0, 0, 2723, 0, 0, 1494, 0, 0, 3040,
	0, 0, 0, 1540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 1528, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 1505, 1506, 1512,
	1533, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496, 1497,
	1498, 1500, 1501, 0, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 1492, 1515, 1524,
	1525, 1526, 1534, 1535, 1536, 1516, 1517, 1518, 1519, 0,
	0, 0, 0, 0, 0, 1499, 0, 1527, 1522, 0,
	1532, 0, 0, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 1541, 0, 0,
	0, 0, 0, 1521, 1523, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 0, 1537, 0,
	1538, 0, 0, 1510, 0, 0, 0, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 1530, 0, 0,
	0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504, 1502,
	1503, 1495, 1496, 1497, 1498, 1500, 1501, 0, 1539, 0,
	0, 0, 0, 0, 1516, 1517, 1518, 1519, 0, 0,
	0, 0, 0, 0, 1499, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1531, 0, 0, 1541, 0, 0, 0,
	0, 0, 1521, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 1537, 0, 1538,
	0, 0, 0, 0, 0, 0, 1508, 1509, 0, 0,
	1491, 1492, 1515, 1524, 1525, 1526, 1534, 1535, 1536, 0,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 1527, 1522, 1514, 1532, 0, 2663, 0, 0, 1494,
	0, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 1528, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 2690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 0, 1520, 0, 1505, 1506, 1512, 1533, 1511,
	1507, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500,
	1501, 1515, 0, 0, 0, 0, 0, 0, 1516, 1517,
	1518, 1519, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 1532, 1491, 1492, 0, 1524, 1525, 1526,
	1534, 1535, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1527, 1522, 1531, 0, 0,
	1541, 0, 0, 1494, 0, 0, 1521, 1523, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 0, 1538, 0, 0, 0, 0, 0, 0,
	1508, 1509, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 0, 1529, 0, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 1514, 0, 0,
	1530, 0, 0, 0, 1505, 1506, 1512, 1533, 1511, 1507,
	0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501,
	0, 1539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 1517, 1518, 1519, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 1491, 1492, 0,
	1524, 1525, 1526, 1534, 1535, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1520, 1527, 1522,
	0, 1531, 0, 0, 1541, 0, 1494, 0, 0, 0,
	1521, 1523, 0, 1540, 0, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 1538, 0, 0,
	0, 0, 0, 0, 1508, 1509, 1493, 1532, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 0,
	1529, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 1517, 1518, 1519, 0,
	0, 0, 0, 0, 1530, 1499, 0, 0, 1505, 1506,
	1512, 1533, 1511, 1507, 0, 1504, 1502, 1503, 1495, 1496,
	1497, 1498, 1500, 1501, 0, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 1531, 0, 0, 1541, 0, 0,
	0, 0, 0, 1521, 1523, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 0, 0, 0, 1537, 0,
	1538, 0, 0, 0, 0, 0, 0, 1508, 1509, 0,
	0, 1532, 0, 1491, 1492, 0, 1524, 1525, 1526, 1534,
	1535, 1536, 0, 1529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 1522, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 1539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504,
	1502, 1503, 1495, 1496, 1497, 1498, 1500, 1501, 0, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 1517, 1518, 1519, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 1532, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 1541, 0, 0, 0, 0, 0, 1521,
	1523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1537, 0, 1538, 0, 0, 0,
	0, 0, 0, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 1530, 0, 0, 0, 1505, 1506, 1512, 1533, 1511,
	1507, 0, 1504, 1502, 1503, 1495, 1496, 1497, 1498, 1500,
	1501, 0, 0, 0, 1539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1532, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 1505, 1506, 1512, 1533, 1511, 1507, 0, 1504, 1502,
	1503, 1495, 1496, 1497, 1498, 1500, 1501,
}
var sqlPact = [...]int{

	5411, -1000, -1000, -1000, -1000, 199, -1000, -1000, 198, 196,
	191, 188, 181, 175, 174, 173, -1000, -1000, -1000, -1000,
	-1000, -1000, 172, -1000, -1000, 169, -1000, 168, 166, 165,
	164, -1000, 161, 156, 155, -1000, -1000, -1000, -1000, 151,
	149, 145, 65774, 65321, 66221, 1956, 79739, 69809, 1932, 58544,
	79286, 58091, 78833, 78380, 136, -1000, 77927, 135, 134, 133,
	-1000, 77474, -1000, 1865, -1000, 131, 3671, 48109, 129, 128,
	127, 2737, 125, -1000, 124, -1000, 8188, 1440, -1000, 120,
	-1000, 7513, 3897, 68909, 2418, 118, 117, 47655, 2368, 2476,
	-1000, -1000, 1769, -1000, -1000, 114, 112, 111, 110, 103,
	98, 92, 91, 89, -1000, 87, 85, 84, 83, 81,
	77, 75, -1000, 71, 70, 69, 68, 66, 65, 64,
	63, 62, 61, 60, 59, -1000, 10381, 1644, 1473, 1459,
	1455, 1451, 1436, 923, 58, 57, 56, 54, 53, 51,
	50, 47, -1000, 46, 45, 40, 33, 32, 30, 29,
	28, 140, 27, 25, 21, 18, 17, 16, 2740, -1000,
	1614, 742, 23699, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 85103, 80186, 15, -22,
	13, -1000, 2777, 934, 39933, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 296, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 465, 1867, 714, -1000, -1000, -1000,
	77027, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1953,
	-44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 713, -1000,
	1950, 313, 1872, -1000, -1000, -1000, -1000, -1000, 80186, -1000,
	-1000, 3176, 3175, 1758, 710, 76580, -1000, 1434, -1000, 868,
	26573, -1000, 1134, -1000, 26573, 293, -1000, -1000, -1000, -1000,
	-1000, -1000, 3174, 3172, 3171, 3170, -1000, -1000, 57638, 17921,
	57185, 56732, 76127, 17458, 64868, 64415, 53122, -1000, -1000, -1000,
	42688, 1175, -1000, -1000, -1000, -1000, -1000, -5, 51270, 80186,
	-1000, 283, -1000, -1000, -1000, -1000, -1000, -1000, 33383, 739,
	32894, 497, 32405, 496, -1000, -1000, -1000, 3169, 3168, 1006,
	3167, 2726, 84656, 1545, 3166, 1551, 1061, 925, 3164, 3163,
	3161, 3160, 3157, 3156, 1252, 75674, 2468, 75221, 1464, 52659,
	63962, 66221, 2230, 74768, 1223, 1210, -1000, -1000, -1000, -1000,
	2590, 2430, 2391, 44958, -1000, 3155, 3152, 3150, 3148, 3147,
	84209, 1542, 3145, 2109, 3144, 3143, 3142, 3141, 3140, 3137,
	3134, 3132, -1000, 63509, 63056, 62603, 2848, 74315, 62150, 52196,
	-1000, -1000, -1000, 41759, 4780, 4737, 73862, 43149, 66221, 66221,
	-1000, -1000, 33860, 706, -1000, -1000, -1000, 42688, 2426, -1000,
	33860, 706, -1000, 80186, -1000, 2465, 1664, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2018, 1402, 2980,
	51733, 1727, 1244, 2791, 2589, 2585, 1348, 2144, 2579, 2570,
	2569, 2568, 2567, 1386, 2145, 360, 23210, 1443, 1376, 2566,
	2552, 3002, 1669, 1847, 56279, 3131, 3128, 2761, 2519, 2509,
	2422, -1000, -1000, -1000, -1000, 1312, -1000, -1000, 59438, -1000,
	-1000, 1168, -1000, -1000, 1168, -1000, -1000, -1000, -1000, -1000,
	1169, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1614, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1884, -1000, 1739, -1000, -1000, 2171, 2753, 2753, 2753,
	2822, 448, 443, -1000, 140, -1000, -1000, 91513, -1000, -1000,
	33860, 33860, 33860, 33860, 33860, 33860, 33860, 1793, -1000, 707,
	-1000, -1000, 745, -1000, 705, 563, -1000, -1000, -1000, -1000,
	-1000, -1000, 704, -1000, -1000, -1000, -1000, -1000, -1000, 2972,
	-1000, 20288, -1000, -1000, -1000, 478, 703, 33860, -1000, -1000,
	3028, 3026, 842, -1000, 282, 887, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2462, 698,
	697, -1000, 696, 690, 687, 686, 683, -1000, -1000, -1000,
	681, 680, 679, 678, 677, 675, 674, 670, -1000, 1676,
	-1000, -1000, -1000, -1000, -1000, -1000, 623, 617, 617, 617,
	-1000, 917, -1000, -1000, -1000, 347, 614, 276, 612, 610,
	608, 669, 667, 665, 662, 659, 656, 653, 652, 649,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 916, -1000, -1000, -1000,
	-1000, -7, 80186, -1000, 465, -7, -1000, -1000, 645, -1000,
	27050, 27050, 27050, -1000, -1000, 1943, 33860, -1000, 2067, -1000,
	0, 0, 836, 40837, -1000, 39011, 836, 722, 751, 44504,
	-1000, 2419, -1000, -1000, 640, 279, -1000, -1000, -1000, -1000,
	18382, 2414, 80186, 80186, 66221, 66221, 66221, 2669, 33860, -1000,
	-1000, 49003, 80186, 66668, 2915, 49450, 49003, 80186, 2461, -1000,
	-1000, -1000, 80186, -1000, 33860, -1000, 2913, 1329, 54034, 2847,
	-17, -1000, -1000, -1000, -1000, -1000, -1000, 2090, 2108, 1087,
	1982, 1731, -1000, 26573, 2717, -1000, -1000, -1000, 256, 18382,
	-1000, -1000, -1000, -1000, -1000, 2040, 2629, 1298, -1000, 1980,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1636,
	2628, -1000, 1736, 2625, 1593, -1000, -1000, 1892, -1000, -1000,
	2739, -1000, -1000, 1520, 2616, 1, -1000, -1000, 2225, -1000,
	-1000, 896, 2607, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 805, -1000, 53583, 42688, 51270, -11, -1000, -1000,
	-51, -1000, 16995, 91513, -1000, -1000, -1000, 91513, 804, -1000,
	-1000, 2604, -1000, 91513, 801, -1000, -1000, 2602, -1000, -1000,
	-1000, 3126, -1000, 3125, 2043, 3122, 3121, 3119, -1000, 1508,
	1667, 3118, -1000, 3116, -1000, -1000, -1000, -1000, -1000, -1000,
	61697, 1940, -1000, -1000, 60791, -1000, 2042, -1000, -1000, 61244,
	924, -1000, 896, 2034, -1000, 812, -1000, 3114, 2836, 2255,
	896, 2033, -1000, -1000, -1000, -1000, -1000, 45852, -1000, 45852,
	-1000, 45852, -1000, 1314, -1000, 83762, 0, 0, 2972, -1000,
	-1000, -1000, -1000, -1000, 2594, 3113, 3112, 3111, -1000, 80186,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 184, 2593,
	-1000, -1000, 184, 2592, -1000, 184, 2587, -1000, 68456, -1000,
	-1000, 1869, 2583, -1000, 183, 2558, -1000, -1000, -64, 2551,
	-1000, -1000, -21, -1000, -1000, -1000, 934, -1000, 41291, -1000,
	41291, 73409, 53583, 884, 660, 47201, 91513, -1000, -65, -1000,
	42688, 91513, -1000, 53583, 60791, -1000, 72956, 60344, -1000, -1000,
	1240, 2138, -1000, -1000, -1000, 884, 53583, 53583, 53583, -1000,
	72503, -1000, -1000, 1753, 1377, 2751, 1716, 66221, -1000, 1656,
	-1000, -1000, -1000, 2780, 2460, -1000, 48556, 68009, -1000, 67562,
	-1000, 67115, -1000, 66221, -1000, 66221, -1000, 3109, 3107, 3103,
	-1000, 3101, 2766, 91513, 2763, -1000, 2529, 1477, 1438, 80186,
	-1000, -1000, 80186, -1000, 80186, -1000, -1000, -1000, -1000, -1000,
	2088, -1000, -1000, -1000, -1000, 66221, -1000, -1000, -1000, -1000,
	-1000, -1000, 2455, -1000, 1441, -1000, 1528, -1000, 1236, -1000,
	-1000, 185, -1000, -1000, -17, -1000, 83315, -1000, 2171, -1000,
	80186, -1000, 2102, 2443, 2452, 1642, 1966, 2177, -1000, 31916,
	2159, 36245, 1976, 140, -1000, -1000, 140, 140, 24653, -1000,
	-1000, 49450, 49450, 18382, 1198, 33860, 33860, 33860, 33860, 33860,
	33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860,
	33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860,
	33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860,
	1860, 33860, 1163, 33860, 33860, 33860, 33860, 1582, -1000, -1000,
	1625, 505, 1688, -1000, 2960, 2960, 2960, 1712, 1712, 91882,
	91882, 579, 3097, 745, -1000, 33860, -1000, 706, 33860, 18845,
	-1000, -1000, 443, 11394, 1995, -1000, 433, 19334, -1000, -1000,
	-1000, 20288, 563, 31427, 33860, 911, 91513, -1000, -1000, 1635,
	2984, 16534, 2478, 2323, 634, 747, 746, 22721, 22232, 21743,
	21254, 672, 33860, 33860, 33860, 33860, 33860, 33860, 33860, 33860,
	-1000, -1000, 2995, -1000, 2984, -1000, -1000, -1000, -1000, 2984,
	1195, 1193, 2984, -1000, 2984, 2984, 2591, 2591, 30950, 30461,
	29972, 36722, 29483, 33860, 20765, 28994, 28505, -1000, 80186, -7,
	2907, 33860, 195, -1000, 90305, -1000, 195, 195, 633, -33,
	91513, 2274, 2274, 40385, 2005, 1816, 1816, 1816, -1000, 836,
	12817, 836, 71605, 1828, 836, 836, 255, 277, 425, 38559,
	2067, 71605, 732, 632, 12, 10, 9, -1000, -1000, 6,
	5, -1000, -1000, 66221, 631, 18845, 18382, 250, 1279, -38,
	2172, 2169, 2161, -1000, 2155, 1466, -41, 1162, -39, -1000,
	227, -48, -1000, 951, 244, 2984, -1000, -1000, -1000, -1000,
	-1000, 3096, 3095, -1000, 915, 630, 625, 358, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 623, 617, 617, 617,
	-1000, 347, 614, 276, 612, 610, 608, -1000, -1000, -1000,
	-1000, 2398, -51, 66668, 817, -49, 1014, -17, -1000, -1000,
	-1000, 54034, 1168, -1000, 1701, -1000, -1000, -1000, -1000, -1000,
	-1000, 1254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 842,
	-1000, -1000, -1000, -1000, -1000, -1000, 2968, 2966, -8, -1000,
	-1000, 18382, -1000, -18, 1374, -1000, 55826, 2065, 2747, 2738,
	1313, -1000, 1248, 2821, 59438, 2855, 2899, 326, -1000, 2397,
	-1000, -1000, 865, 1430, 1154, 59438, 1736, -1000, 49450, -1000,
	2214, 2817, 1267, 1246, 1267, 1267, 1233, -1000, 59438, 1144,
	-1000, 1138, -1000, -23, 2854, 2870, 119, -1000, 2396, 1074,
	-1000, -1000, 66221, 18382, 1356, 1334, 1404, 1069, -10, -1000,
	2851, 2850, -1000, 1609, -1000, 53583, 2261, -1000, -50, 805,
	-11, 51270, 80186, 237, -1000, 33860, 706, 33860, 706, -1000,
	-1000, 2550, -1000, -1000, -1000, 3092, 1649, 2105, -1000, -1000,
	-1000, 604, 2032, 2394, 80186, 2182, -12, 66221, -1000, 2546,
	1736, 2024, -1000, -1000, 59891, -1000, 2542, 609, 3091, -1000,
	82868, -1000, 2754, 1206, 2541, 963, 658, 2906, -1000, 658,
	46299, -1000, 80186, -1000, -1000, 80186, -1000, -1000, -1000, 3078,
	-1000, 66221, -1000, -1000, 66221, -1000, 66221, -1000, 66221, 180,
	2527, -1000, -1000, 80186, -1000, 66221, 66221, 53583, 53583, 4174,
	54932, -55, -58, 424, -1000, 72056, 80186, 962, 55379, 80186,
	2704, 884, 42688, -65, 884, 884, 805, -1000, 805, -1000,
	66221, 2451, -1000, 884, 884, 884, -1000, -1000, -1000, -1000,
	3077, 3069, -1000, -1000, -1000, 895, 66221, 80186, 66221, -1000,
	-1000, 80186, -1000, 80186, -1000, 895, 80186, 895, 80186, 895,
	80186, -1000, -1000, -1000, -1000, -1000, -1000, 706, 33860, 1326,
	-1000, 2450, -1000, 2444, -1000, 44, -1000, -1000, -1000, -1000,
	1877, 66221, 66221, 66221, 66221, 80186, 66221, -1000, 59438, -1000,
	2102, 2443, -1000, -1000, -1000, -1000, -1000, -1000, 1226, 1886,
	-1000, 2133, -1000, 1303, -1000, -1000, -1000, 91513, 37183, -1000,
	-1000, 91513, 1414, -1000, 35768, 35291, -1000, -1000, 1409, 66221,
	2186, -1000, 2186, -226, -1000, 89930, 2129, 66221, -1000, -1000,
	-1000, -1000, -1000, 864, 949, 949, 1119, 1119, 1119, 1119,
	2867, 553, 4114, 4735, 6463, 6463, 7030, 7030, 7030, 7030,
	7030, 6463, 4776, 1712, 1712, 4776, 4776, 4776, 4776, 4776,
	1712, 1712, 1712, 6463, 6463, 6463, 91882, 91666, 6947, 33860,
	33860, 1067, 1619, 505, 6198, 33860, 800, 800, 800, 800,
	-1000, 1778, -1000, -1000, -1000, -1000, 2393, 601, 36722, 36722,
	-1000, -1000, -1000, -1000, 19811, 33860, -1000, -1000, -1000, -1000,
	28016, -1000, -1000, 89556, -267, 422, -178, -40, -1000, 33860,
	33860, 33860, 421, -1000, 234, 33860, 80186, -1000, 86725, 729,
	-60, -1000, -63, 1239, -1000, 33860, -1000, -1000, 1066, -1000,
	1064, 1060, 1059, -1000, 597, 418, -1000, 229, -1000, 1800,
	594, 591, 33860, -1000, -1000, -1000, -1000, -1000, 89343, -1000,
	-1000, 89182, -1000, -1000, 88969, -1000, -1000, 88808, -1000, -1000,
	-1000, 91359, 86564, 86351, 86047, 10063, 86004, 12184, -68, 417,
	-69, 415, 851, 849, 414, 412, 409, -77, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -78, 406, -1000, 2387,
	-178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 405,
	-1000, 404, -1000, 91145, -178, 403, 6771, -1000, 36722, 36722,
	36722, -1000, 402, -1000, 90091, -1000, 91016, 27539, 27539, 27539,
	401, 90802, 33860, -178, -79, -1000, -80, -1000, -1000, 483,
	-85, 906, 27050, 39479, 18382, -1000, 906, 906, 33860, -1000,
	33860, 2148, -1000, -1000, -1000, 2143, 1809, 2274, 40385, -1000,
	-1000, -1000, -1000, 71605, -1000, 2972, 2386, -1000, 71605, -1000,
	-1000, 80186, 465, -1000, 71605, 71605, 18382, 836, -1000, 836,
	71605, 663, -1000, -1000, -1000, -1000, -1000, 400, 43600, -40,
	223, 18382, 884, -1000, 2267, 2267, 2267, 2267, -1000, -1000,
	80186, 2939, -1000, 1692, -1000, 49450, -1000, 743, 1070, 18382,
	-1000, -1000, -1000, 589, -1000, 2984, 2984, -1000, 2984, 80186,
	190, 26573, -1000, 1168, -1000, -1000, 1343, -1000, 1653, -1000,
	1054, -1000, -1000, -1000, -1000, 26573, -1000, 1859, 80186, 80186,
	66221, -1000, -1000, 2020, 82421, 2017, 49450, 80186, -1000, -1000,
	585, 584, 2126, 2123, 959, 80186, 80186, 2121, 81974, 81527,
	80186, 1791, 33860, 1893, 1838, 706, 706, -1000, -1000, 706,
	580, 1170, 66221, 66221, 66221, 1586, -1000, -1000, -1000, -1000,
	-1000, 58991, -1000, -1000, 2988, 2987, -1000, 1267, -1000, -1000,
	-1000, 1267, 1736, 1583, 66221, 80186, 1699, 706, 706, -1000,
	-1000, 706, 572, 18382, 1647, -1000, 2466, 80186, 3024, 66221,
	80186, 80186, 50823, 2760, 81080, 80186, 1609, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 50372, 970, 896, 884, 2385, -1000,
	2261, -1000, -1000, 16073, 91513, -1000, 91513, -1000, 80186, -1000,
	921, 80186, 55379, 883, 2526, 45405, -51, 884, 53583, 66221,
	-12, 80186, -1000, 1736, 2525, 465, 2016, -1000, -1000, 53583,
	571, 3066, 3063, -1000, 1938, 2013, -1000, -1000, 80633, 2641,
	789, 80186, 906, 40385, 1665, -1000, 44053, 938, 80186, 1553,
	97, -1000, -1000, -1000, 24, 80186, -1000, 3060, -1000, -1000,
	184, 184, 184, -1000, 66221, 66221, 1869, -1000, 183, -1000,
	-64, -1000, -1000, 4174, 4174, 884, -14, 566, -1000, 826,
	825, 42227, 53583, -86, -1000, -1000, -1000, -1000, -1000, 66221,
	80186, 688, 2247, 80186, -88, -1000, 221, 565, -1000, -1000,
	884, 2383, -1000, -1000, 900, -1000, 1230, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1, -51, -51, -1000,
	895, -1000, 895, -1000, 895, -1000, 91513, -1000, 1325, 1318,
	80186, -1000, 18382, 80186, 66221, 18382, 66221, 2438, 2434, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 980, -1000, 1414,
	1871, -1000, 563, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2079, -1000, -15, 24653, 1985, -1000, -1000, 66221,
	-2, 33860, 33860, 4580, 4175, 33860, 36722, 36722, -1000, 33860,
	499, -1000, -1000, -1000, -1000, -1000, 2380, 562, 33860, 49450,
	6411, 5339, -1000, 397, 12023, 4776, -1000, 33860, -1000, 396,
	26096, -1000, 90434, -57, -93, -1000, 13291, -178, -94, -1000,
	-1000, 738, -1000, 2636, -1000, 33860, 90648, 2061, 1596, 1630,
	1350, 2984, 3023, 15612, -1000, 46750, 908, 1844, 88595, -1000,
	-1000, -1000, -1000, 49450, 49450, 33860, 33860, -1000, 33860, 33860,
	33860, -1000, -1000, -1000, 2984, 867, -1000, -1000, -1000, 867,
	-1000, -1000, 2984, -1000, 2984, -1000, 33860, -1000, -1000, 2376,
	33860, -1000, 49450, 49450, 36722, 36722, 36722, 36722, 36722, 36722,
	36722, 36722, 36722, 36722, 36722, 36722, 36722, 36722, 36722, 36722,
	36722, 36722, 36722, 2174, 36722, 2957, 2957, 2957, -1000, 2366,
	2376, 33860, 33860, 49450, 395, 394, 389, -1000, 33860, -178,
	-1000, -1000, 4174, 559, -1000, 2070, -1000, 2321, -1000, 33860,
	-1000, -207, -1000, 2067, -1000, -1000, 2321, 2321, -95, 91513,
	40385, 40385, -1000, 558, 33860, 2140, -1000, -1000, 727, -265,
	-1000, 816, -1000, -1000, -1000, -1000, -1000, 465, -1000, -1000,
	-1000, 210, 71605, 71605, 726, -1000, -96, -1000, -1000, -102,
	-1000, 2905, 380, 18382, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -51, 1861, 3022, -1000, 2986, 736, 720, 204,
	2984, 379, 376, 375, -51, 80186, -1000, -17, -1000, -1000,
	-1000, 33860, -1000, -1000, 2746, 1047, 1042, -1000, 2524, -1000,
	2012, -1000, 945, -1000, 1510, -1000, 33860, 33860, 556, 555,
	3056, 1608, 3053, 960, 2523, 1869, 2522, 1869, -1000, -1000,
	878, -1000, 91513, 551, 541, -1000, -18, 1369, 898, -1000,
	-1000, 33860, 33860, 71158, -1000, 390, 2739, -3, -1000, 1041,
	-1000, -1000, -1000, -1000, 1736, 1037, -1000, -1000, -1000, 897,
	-1000, -1000, 33860, -1000, -23, 1035, 2861, 2008, 66221, 1034,
	-1000, 1031, -1000, -1000, -1000, -1000, -1000, -1000, 2849, 1869,
	2521, 1050, -1000, -1000, -1000, 49911, -1000, -1000, 53583, 884,
	-1000, 3052, 66221, 3051, 371, -103, -43, 49450, 2904, 1934,
	554, 66221, 858, -1000, 2972, -1000, -1000, -1000, -1000, 66221,
	2901, 2518, 896, 3017, -1000, -1000, 66221, 2517, 1933, 2006,
	2098, 789, 54485, -1000, 896, 1835, -113, -1000, 1553, 25607,
	2744, -110, -1000, -1000, -1000, 906, 46299, 40385, 33860, 3050,
	-111, -1000, -1000, -1000, -1000, -1000, 180, -1000, -1000, -1000,
	-1000, -1000, 70711, 70711, 53583, 53583, 53583, 884, 80186, 80186,
	55379, -1000, 540, 80186, 80186, 539, -1000, 80186, 80186, 3048,
	53583, -1000, 706, -1000, 1855, 66221, 15151, -1000, -1000, -1000,
	-1000, -1000, 895, -1000, -1000, 1700, 1969, 1700, 1514, 1488,
	-1000, 1864, -1000, -1000, -1000, -1000, 2178, 2752, 18382, 2853,
	800, 33860, 33860, 225, 4105, 1705, 800, 33860, 33860, 49450,
	447, -122, 33860, 33860, -1000, 33860, 719, 91513, 3016, 33860,
	369, 368, -1000, -1000, -1000, 2975, -1000, -1000, -1000, 91513,
	33860, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 361, -1000,
	202, -1000, -1000, -1000, 85550, -1000, 33860, 355, 2814, -1000,
	353, 345, 11810, 6578, 88434, 88221, 88060, 341, -1000, -1000,
	340, 339, 91513, 2366, 91513, -1000, -1000, 782, 782, 1227,
	1227, 1227, 1227, 2957, 298, 855, 840, 278, 278, 278,
	827, 990, 990, 278, 278, 278, 2370, 2136, 537, 7245,
	-1000, -1000, 91513, 91513, 333, -1000, -1000, -1000, -178, 331,
	4174, -1000, 2312, 2812, 91513, -1000, 40385, 2312, 2312, -1000,
	-1000, 1809, 80186, 91513, 40385, -1000, 2386, -1000, 13763, -1000,
	18382, -1000, -1000, -1000, -1000, 2972, -1000, 43600, -1000, 530,
	-1000, 141, -1000, -1000, 716, 3047, 734, 18382, 328, -1000,
	-1000, -1000, -51, 91513, 80186, 80186, 80186, 2515, -1000, 2728,
	-1000, 959, 87847, -123, -1000, 89930, 33860, 80186, -1000, -1000,
	1735, 2188, 999, -1000, 2782, 80186, -1000, 80186, -1000, -1000,
	80186, 80186, 66221, 2501, -128, 91513, -61, -1000, 815, -1000,
	1251, -1000, 14690, 66221, 66221, 2499, -133, 18382, -1000, 3011,
	3009, 2513, 2786, 3003, 80186, -1000, 80186, 66221, 2701, -1000,
	-1000, -64, -1000, -1000, 465, -1000, 2208, -1000, 69356, 1845,
	706, -1000, 70260, 3046, 528, -1000, 1851, -1000, 673, 1736,
	706, 66221, -1000, 327, -75, -1000, 955, 18382, 66221, 2511,
	2101, 789, 54485, -1000, 1206, 2177, -1000, -105, -1000, 557,
	706, 1835, -1000, -113, 91513, -1000, 814, -1000, -1000, -143,
	-1000, -1000, 307, -1000, 2698, 2694, -1000, 2336, 33860, 527,
	522, 80186, 2692, -1000, -1000, -146, -1000, 1928, -1000, -1000,
	-1000, -1000, -1000, 18382, 1417, -1000, 521, 518, -1000, -1000,
	-1000, -1000, 2752, 800, 800, 33860, 33860, 33860, 800, 447,
	-148, -1000, 800, 800, -178, -1000, -1000, 90434, -1000, -1000,
	-1000, 91513, -1000, 14229, 1728, -1000, 87686, -1000, 24653, -1000,
	-1000, 33860, 33860, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 36722, 2369, 517, 49450, -1000, -1000, 302, 903, 33860,
	33860, 2067, 903, 903, -1000, -151, -1000, -1000, -1000, 2972,
	141, -1000, -1000, 3043, 18382, 723, -1000, 3042, -1000, -1000,
	-1000, -1000, -1000, 80186, -1000, 80186, -1000, 18382, 80186, 2316,
	2000, -1000, -1000, 2119, 515, 36722, 66221, 807, -1000, 2931,
	2311, 1718, 33860, 1985, -153, -154, 1993, -1000, -1000, 1992,
	33860, -1000, 49450, 512, 1869, 1869, -156, -159, -1000, 33860,
	1030, 80186, 25130, -1000, 3041, 2739, -1000, -1000, 33860, 1028,
	-1000, -1000, -1000, 3001, 1869, 18382, -1000, 1869, 1869, 2786,
	996, 2897, 1699, 2268, -1000, -1000, -1000, -1000, 2118, -1000,
	-1000, 80186, 2115, 891, -161, -1000, 799, 798, -1000, 55379,
	883, 881, -1000, -1000, -1000, 465, -1000, 3000, 507, 80186,
	1929, 506, 18382, -1000, 789, 54485, -1000, 2641, 1553, -1000,
	2655, 80186, 2735, -1000, 2177, 505, -1000, 884, 504, 503,
	2332, 2332, -162, 33860, 33860, -164, 500, 884, -121, -1000,
	783, 770, -1000, -1000, 66221, 66221, 33860, 33860, -1000, 800,
	800, 800, -1000, 301, -1000, -1000, 1835, 2811, -1000, -129,
	87473, 87312, 5557, 36722, 49450, -167, -1000, -1000, 80186, 91513,
	-178, -1000, -1000, -1000, 664, -1000, 3035, -1000, -1000, 1344,
	-1000, -1000, -1000, 80186, 1999, -1000, 958, 33860, 7245, 486,
	33860, -1000, 2894, -1000, 2192, 2367, 2208, 482, -1000, -1000,
	-1000, -1000, -1000, 948, 1633, -1000, -1000, 91513, 2786, 33860,
	-1000, -1000, 481, 480, 91513, 479, 784, 2352, -1000, -1000,
	-1000, 91513, 470, 2861, -1000, -1000, -1000, -1000, 1869, 66221,
	706, 883, -1000, 1782, 1845, 469, -1000, -1000, 1863, 2212,
	-1000, 70260, 38105, 38105, 299, 2890, 881, -1000, 2969, -1000,
	2883, -1000, 33860, -1000, 66221, 33860, 1922, 54485, -1000, 2098,
	-1000, 1141, -172, 80186, 1553, -1000, -1000, 53583, 53583, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	948, -173, -175, -1000, 53583, -1000, 1928, -1000, 80186, -1000,
	80186, -1000, -1000, -181, -182, -1000, 1900, 33860, 24653, -1000,
	-1000, 5557, -187, -1000, -149, -1000, 2863, -1000, -1000, -1000,
	-1000, 2510, 2313, 87099, 2072, 80186, 86938, -1000, 2363, -1000,
	-1000, 1699, 80186, 2208, 2304, 66221, 956, -189, 1700, 1700,
	33860, 24176, 1764, 33860, -1000, -1000, 2786, -1000, 1863, 66221,
	80186, -1000, 2775, -1000, 2691, -1000, -1000, -1000, 2208, 706,
	-1000, -1000, 706, -190, 955, -195, 66221, -1000, 2101, 1307,
	-1000, 906, -1000, -1000, -196, -197, 1718, 948, 906, -206,
	-1000, -208, -213, -1000, -1000, 197, 34814, 34814, 34814, -178,
	-226, -1000, 80186, 468, 2489, 894, -1000, 1888, 1591, 26,
	972, -1000, -1000, 2311, -214, -1000, 893, 465, -1000, 33860,
	948, -215, -1000, 937, -216, -1000, 931, -221, -1000, 2344,
	-1000, -223, 1869, -1000, 459, -230, -1000, -1000, 1990, -1000,
	1699, 891, -1000, 948, 458, 1718, 455, -1000, 46299, -1000,
	884, 884, 2208, 1718, -1000, 884, -1000, -1000, -1000, 2531,
	-1000, 37644, 1836, 1481, 89717, 2531, 2531, -1000, -1000, 80186,
	2832, -1000, 1921, 1913, 1293, -1000, -1000, -1000, -1000, -1000,
	-1000, 906, -1000, 2831, 2072, 91513, 2208, -1000, 1700, 2266,
	-1000, 1700, 2343, -1000, 1737, -1000, -1000, 80186, -1000, 80186,
	1439, 1416, 3034, 883, 1863, 1718, 33860, 2208, 33860, -224,
	-1000, -1000, 1699, 2208, -1000, -1000, 1662, 2926, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 769, -1000, 2674, -1000,
	957, 1771, 1771, -1000, 757, 1888, -1000, -1000, 454, -1000,
	452, -1000, -236, -1000, -1000, 3032, -1000, 1863, -1000, 2208,
	-237, 1699, -242, -1000, 906, 1699, 1478, -1000, -1000, 1825,
	34337, 33860, -1000, 2942, -1000, -1000, 2152, -1000, 33860, 2311,
	33860, 33860, 1862, -1000, -1000, 1699, 948, 906, 1718, -1000,
	906, -1000, -1000, -1000, 91513, -1000, -1000, -1000, 91513, -1000,
	-244, -245, -1000, -1000, -1000, 906, 1718, -1000, 2208, -1000,
	1699, 1026, -1000, 2208, 1699, -1000, 451, 1699, 906, 33860,
	906, -1000, -254, -1000, 1699, -1000,
}
var sqlPgo = [...]int{

	0, 3765, 3764, 3761, 3760, 3759, 3756, 3745, 3741, 3739,
	3738, 3736, 3735, 3734, 3733, 3732, 3730, 3728, 3727, 3721,
	3708, 3707, 3705, 3702, 3701, 3700, 3699, 3698, 3697, 3695,
	3694, 3693, 3692, 3690, 3686, 3681, 3677, 3676, 3675, 3669,
	3660, 3659, 3657, 3656, 3648, 3646, 3642, 3641, 38, 3637,
	3636, 3635, 3633, 3632, 3630, 3629, 3619, 3618, 3616, 3614,
	3613, 3612, 3611, 3607, 3606, 3605, 40, 3603, 220, 3599,
	3597, 3590, 3586, 3585, 3582, 3581, 3580, 3579, 3578, 3577,
	219, 3576, 84, 3575, 3574, 3573, 3572, 3571, 217, 3570,
	3564, 3563, 3562, 3561, 3560, 3556, 3555, 154, 199, 3554,
	95, 3553, 3549, 3548, 3547, 3546, 3545, 3544, 3542, 3541,
	3539, 203, 3537, 216, 3536, 3535, 3534, 3532, 3530, 3529,
	3526, 3525, 3524, 3523, 3513, 3512, 3507, 3503, 3499, 3494,
	3489, 3481, 3480, 3477, 3476, 3469, 3468, 3467, 3466, 3465,
	3462, 3461, 222, 140, 3460, 3459, 215, 214, 3458, 3455,
	3454, 3450, 124, 93, 99, 22, 3444, 97, 41, 3442,
	16, 191, 205, 7153, 197, 3440, 3420, 3418, 201, 152,
	3417, 190, 3415, 3414, 3413, 3412, 69, 62, 139, 130,
	125, 132, 83, 3411, 3410, 70, 61, 34, 27, 3408,
	3404, 3402, 3038, 101, 3401, 213, 192, 128, 3399, 3398,
	3397, 1249, 3396, 43, 3394, 171, 87, 96, 32, 94,
	3392, 113, 19, 3390, 136, 39, 3388, 119, 64, 75,
	6514, 7577, 3386, 77, 45, 107, 392, 194, 166, 158,
	127, 173, 169, 135, 153, 3384, 231, 3382, 2884, 47,
	122, 3381, 3380, 3379, 57, 159, 79, 3378, 3377, 48,
	6, 14, 1, 141, 10, 86, 17, 3375, 11, 3374,
	3373, 3372, 3371, 25, 123, 3370, 224, 3369, 55, 31,
	8, 3367, 33, 175, 3366, 181, 103, 3365, 3364, 207,
	162, 148, 3361, 78, 193, 3360, 3359, 3358, 3357, 3356,
	102, 23, 100, 3354, 3353, 114, 198, 151, 3351, 50,
	3350, 133, 72, 105, 221, 126, 179, 82, 180, 145,
	188, 3349, 3347, 3345, 146, 3344, 3343, 177, 121, 3338,
	3336, 161, 223, 30, 53, 184, 56, 150, 134, 3331,
	160, 3330, 3329, 3328, 225, 144, 165, 7, 4, 85,
	98, 29, 15, 189, 118, 246, 76, 3327, 4143, 1468,
	726, 37, 3324, 110, 81, 51, 91, 116, 212, 52,
	3321, 3320, 1583, 3318, 3313, 3310, 3308, 147, 3306, 3300,
	3295, 108, 142, 155, 3293, 66, 65, 12, 106, 264,
	226, 74, 178, 156, 240, 3290, 137, 3289, 44, 170,
	3288, 157, 208, 3287, 3286, 92, 3283, 112, 291, 46,
	115, 3282, 176, 3281, 3280, 3279, 3276, 3275, 3274, 3273,
	117, 196, 3268, 3267, 3266, 211, 149, 3265, 209, 185,
	131, 120, 42, 3264, 71, 2550, 3263, 54, 182, 60,
	3262, 2624, 36, 0, 9225, 8380, 6294, 7963, 3261, 2901,
	3260, 3259, 3258, 174, 111, 3257, 3255, 3254, 73, 3252,
	59, 3250, 3249, 49, 3248, 13, 5, 9, 20, 18,
	843, 389, 3247, 3246, 80, 104, 89, 3244, 218, 186,
	3236, 3234, 3232, 3230, 63, 3229, 28, 3228, 26, 3227,
	3224, 35, 2, 21, 3222, 3221, 200, 3220, 202, 3219,
	3213, 2880, 109, 3211, 3207, 210, 58, 3206, 206, 3202,
	2836, 138, 168, 3197, 3194, 3192, 129, 3191, 3190, 3189,
	204, 3186, 3185, 24, 3184, 3, 3183, 3182, 164, 2642,
	3181, 3180, 67, 3179, 143,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 11,
	11, 7, 7, 8, 8, 8, 36, 36, 9, 9,
	9, 10, 10, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 15, 15, 26, 26, 16, 16, 28, 28,
	17, 17, 29, 29, 495, 495, 20, 31, 21, 32,
	14, 496, 496, 496, 496, 25, 22, 33, 23, 23,
	23, 23, 23, 156, 156, 156, 156, 19, 19, 27,
	27, 179, 179, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 494, 494, 181, 181, 180,
	175, 175, 497, 497, 182, 182, 182, 184, 184, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 399, 399,
	399, 504, 504, 504, 505, 505, 506, 506, 506, 506,
	506, 37, 37, 37, 96, 96, 96, 97, 97, 98,
	98, 157, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 84, 84, 431, 431, 432, 432, 152, 152, 153,
	153, 153, 153, 154, 154, 155, 155, 155, 51, 39,
	39, 39, 39, 39, 39, 39, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 42, 42, 42, 42,
	42, 42, 49, 49, 49, 49, 143, 143, 52, 52,
	52, 52, 52, 52, 52, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 508, 508, 509, 509, 510,
	510, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 63, 63,
	265, 265, 237, 237, 64, 64, 64, 65, 65, 66,
	66, 53, 53, 488, 488, 280, 280, 390, 390, 68,
	68, 300, 300, 69, 69, 69, 69, 69, 69, 70,
	70, 70, 70, 70, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 77, 77, 77, 78,
	78, 78, 75, 75, 75, 73, 73, 73, 72, 72,
	72, 76, 76, 76, 229, 229, 74, 74, 74, 281,
	281, 79, 79, 79, 79, 238, 80, 80, 80, 80,
	80, 80, 80, 80, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 392,
	392, 81, 81, 81, 360, 360, 85, 85, 85, 315,
	315, 86, 86, 86, 86, 86, 87, 87, 87, 87,
	99, 99, 99, 99, 491, 491, 273, 273, 195, 195,
	195, 195, 92, 92, 92, 92, 93, 93, 93, 94,
	94, 148, 148, 105, 105, 105, 105, 105, 104, 104,
	104, 104, 104, 104, 43, 43, 43, 44, 44, 45,
	45, 46, 46, 47, 47, 48, 48, 48, 48, 48,
	107, 107, 501, 501, 109, 106, 106, 106, 108, 108,
	108, 108, 110, 111, 111, 111, 111, 111, 111, 111,
	111, 112, 112, 424, 424, 289, 289, 422, 422, 440,
	440, 423, 423, 242, 242, 242, 242, 242, 243, 243,
	243, 430, 430, 430, 430, 430, 430, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 149, 149, 150, 151, 151, 151, 151, 132, 132,
	132, 142, 142, 142, 142, 142, 142, 142, 135, 135,
	135, 122, 122, 114, 114, 114, 114, 114, 118, 118,
	118, 118, 118, 118, 118, 118, 115, 115, 124, 124,
	124, 124, 124, 119, 119, 121, 121, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 116, 116, 116, 116,
	126, 126, 126, 126, 322, 322, 322, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 138, 138, 138,
	138, 138, 138, 374, 374, 133, 133, 133, 133, 137,
	137, 137, 137, 305, 305, 130, 130, 130, 131, 131,
	131, 136, 136, 134, 134, 139, 139, 139, 139, 117,
	117, 117, 512, 512, 512, 140, 140, 129, 129, 141,
	141, 141, 141, 141, 141, 141, 141, 128, 128, 128,
	127, 127, 127, 127, 120, 489, 489, 486, 486, 486,
	486, 486, 486, 486, 487, 487, 490, 490, 90, 90,
	90, 58, 58, 58, 59, 59, 160, 160, 160, 160,
	250, 250, 250, 250, 158, 158, 159, 159, 60, 60,
	513, 513, 513, 498, 498, 498, 499, 499, 499, 499,
	499, 499, 244, 244, 245, 245, 340, 340, 340, 340,
	340, 248, 248, 248, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 251, 251, 183, 183, 183, 254, 255,
	255, 252, 252, 253, 253, 253, 257, 257, 256, 259,
	259, 258, 339, 449, 449, 451, 451, 451, 451, 451,
	451, 451, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 514, 514, 447, 447, 447, 448, 443,
	443, 444, 444, 444, 444, 444, 246, 246, 247, 247,
	247, 247, 445, 446, 271, 271, 377, 450, 450, 452,
	452, 454, 515, 515, 515, 515, 515, 515, 516, 516,
	516, 338, 338, 337, 337, 263, 263, 455, 455, 455,
	455, 456, 456, 456, 456, 456, 459, 458, 457, 457,
	457, 457, 457, 62, 62, 62, 302, 302, 301, 301,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 145, 145, 198, 198, 57,
	57, 57, 12, 12, 12, 500, 500, 500, 61, 61,
	61, 61, 197, 197, 197, 197, 197, 197, 493, 493,
	492, 492, 199, 199, 518, 518, 67, 67, 67, 67,
	67, 67, 67, 393, 393, 394, 394, 56, 56, 56,
	56, 56, 323, 323, 321, 321, 320, 320, 270, 270,
	376, 203, 203, 176, 176, 176, 24, 18, 18, 34,
	34, 35, 35, 30, 30, 502, 502, 503, 503, 91,
	91, 95, 95, 95, 103, 103, 144, 144, 144, 144,
	144, 144, 144, 38, 38, 38, 38, 50, 50, 50,
	50, 101, 520, 520, 520, 102, 102, 102, 519, 519,
	196, 196, 334, 334, 335, 335, 521, 521, 336, 336,
	336, 336, 190, 189, 191, 191, 55, 55, 55, 185,
	185, 186, 186, 187, 187, 188, 188, 522, 522, 88,
	88, 88, 147, 147, 236, 236, 236, 330, 330, 330,
	264, 264, 209, 209, 333, 333, 331, 331, 331, 331,
	299, 299, 299, 146, 146, 278, 278, 291, 291, 292,
	292, 387, 387, 293, 100, 100, 163, 163, 161, 161,
	161, 161, 161, 161, 161, 161, 168, 168, 169, 169,
	170, 170, 171, 172, 172, 172, 172, 282, 282, 173,
	173, 173, 162, 162, 162, 164, 164, 164, 164, 164,
	164, 164, 167, 167, 167, 167, 174, 174, 174, 166,
	166, 466, 466, 466, 468, 468, 470, 470, 469, 469,
	465, 465, 467, 467, 517, 517, 304, 304, 304, 261,
	262, 260, 260, 268, 268, 266, 267, 267, 269, 269,
	375, 375, 375, 177, 177, 177, 296, 296, 296, 296,
	297, 297, 326, 326, 324, 324, 324, 324, 325, 325,
	327, 327, 327, 328, 328, 329, 329, 295, 295, 356,
	356, 165, 165, 165, 275, 275, 275, 276, 276, 346,
	346, 346, 346, 346, 346, 347, 347, 345, 345, 345,
	345, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	379, 380, 380, 277, 277, 381, 332, 332, 484, 484,
	484, 485, 485, 373, 373, 382, 382, 382, 382, 382,
	382, 371, 371, 372, 372, 388, 389, 389, 308, 308,
	308, 308, 306, 306, 309, 309, 309, 309, 307, 307,
	383, 383, 383, 383, 298, 298, 384, 384, 384, 384,
	385, 341, 342, 342, 395, 395, 395, 395, 397, 274,
	274, 274, 274, 274, 442, 441, 441, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 411, 411, 411, 411,
	411, 411, 411, 411, 412, 412, 412, 412, 412, 412,
	398, 398, 398, 398, 398, 402, 402, 402, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 403,
	403, 408, 408, 409, 409, 409, 404, 405, 410, 410,
	410, 410, 523, 523, 414, 414, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 400, 400, 400, 407, 407,
	407, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 316, 316, 318, 318, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 350, 350, 350, 350, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 460, 460, 460, 460, 460, 460,
	460, 460, 352, 352, 463, 463, 464, 464, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
	461, 462, 462, 462, 462, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 462, 462, 471, 471, 472,
	472, 474, 474, 475, 475, 476, 477, 477, 477, 478,
	479, 479, 473, 473, 480, 480, 480, 480, 481, 481,
	482, 482, 482, 482, 482, 483, 483, 483, 483, 483,
	362, 362, 363, 363, 369, 369, 369, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 200, 200, 200, 200, 200, 287, 287,
	285, 285, 285, 288, 288, 286, 286, 284, 284, 283,
	283, 359, 359, 357, 357, 361, 361, 310, 310, 413,
	413, 413, 413, 413, 413, 413, 413, 311, 311, 311,
	319, 312, 312, 313, 313, 313, 313, 313, 353, 354,
	314, 314, 314, 355, 355, 364, 368, 368, 367, 366,
	366, 365, 365, 343, 343, 344, 344, 294, 294, 524,
	524, 290, 290, 386, 386, 386, 386, 240, 240, 279,
	279, 239, 239, 231, 231, 232, 232, 232, 232, 272,
	272, 370, 370, 415, 415, 416, 416, 417, 417, 418,
	418, 419, 420, 421, 358, 358, 219, 218, 206, 207,
	217, 216, 215, 205, 208, 212, 213, 214, 210, 211,
	225, 224, 223, 230, 221, 222, 391, 204, 233, 233,
	234, 234, 234, 235, 235, 235, 235, 201, 201, 202,
	202, 226, 226, 227, 228, 228, 220, 220, 220, 192,
	192, 192, 193, 193, 194, 194, 429, 429, 426, 426,
	426, 427, 427, 427, 428, 428, 428, 428, 425, 425,
	425, 425, 425, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 434, 434, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 436, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 439, 439,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 9, 6, 9,
	6, 5, 6, 5, 1, 1, 5, 5, 6, 6,
	4, 4, 4, 4, 3, 4, 4, 4, 7, 7,
	9, 8, 9, 5, 3, 5, 7, 4, 12, 4,
	12, 1, 3, 5, 5, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 10, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 2, 0, 1, 1, 0, 2, 0, 7,
	10, 8, 6, 6, 6, 9, 4, 3, 2, 2,
	0, 1, 1, 1, 1, 3, 6, 4, 6, 7,
	9, 6, 7, 2, 5, 6, 2, 1, 3, 1,
	3, 1, 6, 4, 9, 7, 12, 12, 12, 9,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 6, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 6, 6, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 3, 3, 4, 3, 4,
	7, 4, 4, 4, 3, 5, 7, 4, 3, 3,
	4, 3, 3, 3, 3, 2, 0, 1, 0, 1,
	0, 3, 3, 3, 3, 3, 6, 4, 4, 4,
	3, 5, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 1, 2, 1, 2, 1, 2, 7, 3,
	2, 0, 1, 3, 3, 1, 0, 1, 2, 2,
	1, 6, 5, 1, 2, 1, 3, 2, 0, 9,
	3, 2, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 5, 7, 3, 4, 6,
	3, 4, 6, 3, 1, 3, 3, 5, 3, 1,
	3, 2, 2, 2, 2, 1, 2, 2, 5, 3,
	3, 6, 6, 3, 1, 1, 2, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	3, 5, 7, 2, 3, 0, 3, 5, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 3, 3, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 2, 1, 3, 3, 3, 3, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 4, 5, 5, 5, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 5, 3, 5, 5,
	5, 7, 3, 3, 3, 4, 3, 5, 3, 6,
	5, 6, 3, 5, 6, 3, 4, 3, 4, 3,
	3, 4, 4, 5, 0, 1, 1, 3, 2, 4,
	3, 3, 5, 4, 3, 5, 3, 5, 4, 6,
	4, 6, 4, 1, 0, 3, 4, 4, 5, 7,
	5, 3, 3, 2, 0, 4, 2, 3, 4, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 3,
	4, 3, 1, 1, 1, 2, 3, 2, 3, 6,
	6, 7, 9, 7, 9, 3, 4, 10, 10, 3,
	5, 5, 5, 3, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 3, 6, 3, 11, 14, 0, 2, 4, 3,
	0, 4, 5, 4, 3, 3, 1, 3, 10, 13,
	0, 2, 3, 1, 1, 0, 1, 2, 2, 2,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 8, 4, 2, 5,
	5, 5, 2, 1, 3, 10, 11, 7, 5, 3,
	1, 5, 9, 7, 11, 3, 3, 0, 2, 4,
	3, 3, 1, 5, 1, 3, 1, 2, 0, 1,
	2, 2, 0, 1, 3, 3, 2, 2, 1, 1,
	1, 4, 0, 6, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 5, 8, 4, 1, 0, 1, 2,
	2, 1, 2, 3, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 1, 4, 2, 2, 2, 4,
	7, 3, 4, 6, 3, 1, 1, 1, 8, 10,
	11, 5, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 3, 0, 1, 8, 3, 6, 6,
	5, 3, 4, 1, 0, 1, 3, 16, 19, 15,
	18, 4, 2, 0, 1, 0, 1, 0, 1, 3,
	3, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 4, 2, 1, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 0, 2, 0,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 1, 2, 6, 7,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 3, 5, 1, 3,
	3, 4, 5, 2, 2, 0, 2, 2, 1, 1,
	1, 0, 1, 0, 2, 2, 5, 4, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 1, 1, 1, 3, 2, 4, 4,
	0, 4, 4, 3, 4, 1, 5, 3, 4, 5,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 2, 1, 0, 2, 5, 7, 2, 1, 2,
	4, 3, 5, 0, 1, 3, 5, 1, 2, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 6, 6,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 1, 1, 1, 1, 1,
	1, 2, 1, 5, 5, 6, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 5,
	4, 3, 2, 2, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 3, 4, 3, 3, 4, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 3, 3, 3, 0, 1, 4,
	2, 2, 2, 2, 2, 3, 2, 2, 3, 0,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 491, -82, -79, -51, -49, -85, -86,
	-69, -87, -81, -99, -103, -91, -105, -144, -149, -150,
	-151, -3, -37, -39, -52, -68, -70, -80, -89, -88,
	-90, -92, -96, -95, -84, -43, -100, -104, -113, -145,
	-146, -147, 31, 30, 90, 74, 135, 114, 120, 172,
	316, 348, 358, 342, -108, -109, 373, -38, -50, -102,
	-101, 67, 115, 337, -4, -12, 28, 44, -40, -41,
	-42, 57, -57, -54, -63, -507, 92, -467, -71, -74,
	-511, 125, 141, 190, 306, -93, -94, 344, 346, 142,
	-45, -44, 136, -161, -163, -106, -107, -148, -114, -115,
	-116, -117, -118, -119, -120, -121, -122, -123, -124, -125,
	-126, -127, -128, -129, -134, -130, -131, -132, -133, -135,
	-136, -137, -138, -139, -140, -141, 377, 426, 46, 387,
	76, 128, 352, 21, -5, -6, -7, -8, -9, -10,
	-11, -13, -53, -55, -56, -58, -59, -60, -67, -61,
	-62, -466, -72, -73, -75, -77, -78, -76, 343, -164,
	-162, 488, 440, -15, -20, -21, -16, -17, -19, -22,
	-18, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -24, -25, -14, -23, 458, 466, -167, -165,
	-166, -174, 365, 448, 403, 491, 491, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
	491, 491, 491, 491, 491, 491, -238, 2, -221, -226,
	-227, -228, -220, -192, -436, -439, 4, -433, -437, 147,
	199, 271, 21, 22, 23, 24, 25, 26, 28, 29,
	40, 41, 43, 42, 44, 45, 46, 51, 54, 55,
	56, 57, 58, 62, 67, 68, 73, 74, 75, 76,
	77, 78, 79, 85, 82, 83, 84, 87, 89, 90,
	91, 93, 95, 96, 104, 105, 106, 107, 109, 114,
	115, 118, 113, 117, 120, 123, 124, 125, 127, 129,
	130, 132, 133, 135, 136, 139, 137, 409, 138, 140,
	141, 142, 143, 153, 154, 155, 160, 162, 166, 167,
	170, 171, 173, 177, 179, 180, 181, 182, 183, 189,
	190, 192, 193, 194, 195, 200, 201, 205, 202, 211,
	215, 216, 217, 219, 223, 224, 225, 226, 227, 230,
	229, 232, 235, 236, 239, 240, 241, 244, 245, 246,
	247, 249, 250, 253, 251, 254, 252, 256, 257, 258,
	255, 261, 259, 263, 264, 269, 267, 265, 266, 273,
	276, 187, 278, 279, 282, 300, 286, 287, 288, 291,
	292, 295, 298, 299, 301, 302, 303, 304, 305, 306,
	307, 309, 310, 314, 316, 317, 319, 321, 322, 323,
	324, 325, 326, 327, 329, 330, 337, 342, 339, 340,
	341, 343, 344, 345, 346, 348, 350, 351, 352, 353,
	355, 357, 374, 375, 389, 358, 359, 360, 361, 362,
	363, 364, 368, 366, 367, 369, 370, 371, 373, 376,
	377, 379, 380, 383, 385, 386, 387, 388, 390, 393,
	394, 395, 396, 391, 402, 399, 400, 404, 405, 406,
	407, 408, 410, 412, 420, 421, 423, 426, 427, 428,
	418, 430, 431, 434, 435, 436, 439, 437, 438, 440,
	442, 445, 446, 447, 453, 452, 459, 460, 462, 463,
	464, 35, 47, 48, 50, 52, 63, 64, 65, 69,
	110, 111, 134, 144, 145, 156, 168, 169, 174, 176,
	184, 185, 186, 206, 207, 209, 213, 233, 275, 277,
	293, 297, 311, 312, 313, 315, 328, 354, 381, 392,
	397, 413, 414, 415, 416, 422, 424, 448, 449, 450,
	454, 461, -238, 2, -221, 284, -214, 2, -192, -192,
	316, 27, 2, 27, 310, 367, 405, 407, 2, -491,
	-273, 2, 27, -195, -192, 92, 172, 365, -214, 2,
	-491, -273, 24, 2, -192, 2, -196, 2, 358, -192,
	491, 87, 241, 68, 354, 370, -111, 421, -110, 413,
	360, -112, -424, 2, 261, -192, 491, 491, 491, 27,
	-204, -192, 403, 199, 106, 400, 491, 2, 403, 303,
	452, 366, 106, 325, 199, 428, -500, 350, 175, 441,
	417, -486, 2, 4, -437, -433, -232, -231, 403, 106,
	-228, -220, 481, -227, 491, 491, 491, 2, 216, 217,
	324, 323, 370, 371, 491, 491, 2, 26, 60, 86,
	89, 112, 143, 163, 166, 289, -508, 250, 300, 322,
	369, 402, 410, 423, -499, 388, 62, 360, -498, -500,
	428, 123, -320, 106, 241, 171, 435, 407, 405, 433,
	118, 205, 438, 437, 491, 26, 60, 71, 89, 123,
	143, 163, 166, -510, 300, 322, 357, 360, 369, 402,
	410, 423, 2, 452, 366, 403, 199, 106, 428, -500,
	320, -82, 2, 488, 31, 30, 373, -157, 403, 210,
	2, -192, 216, 217, 2, 491, 491, 164, -486, 2,
	216, 217, 2, 210, 2, 62, 362, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
	491, 491, 491, 491, 491, 2, -142, 370, 388, 181,
	44, 68, 27, 321, 73, 304, 107, 173, 199, 200,
	224, 86, 87, -322, 43, 217, 216, -374, 404, 361,
	367, 399, 358, 421, 92, 442, 351, 464, 325, 326,
	137, 4, 106, 261, 372, 413, 241, 78, -517, 2,
	403, -519, 2, 421, 421, 2, -519, 2, -519, 2,
	-519, 2, -520, 421, 461, 491, 491, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
	491, -162, -164, -163, 491, 491, 491, 491, 491, 491,
	-142, 370, 2, 68, 27, -266, -268, 432, 208, 131,
	290, -161, -163, 2, -466, -422, 2, -348, -440, -350,
	479, 480, 472, 401, 61, 270, 465, -362, 112, 433,
	284, -439, -351, -364, 134, 354, -288, 8, 9, 5,
	6, 7, -201, -352, -358, 425, 146, 274, -235, 492,
	10, 488, -463, -163, -363, 36, 176, 59, -426, -234,
	-202, -398, 209, -233, -220, -460, -461, 4, -433, -434,
	-427, -401, -409, -405, -406, -412, -192, -436, 71, 98,
	99, 97, 102, 101, 243, 242, 103, 100, 372, 441,
	60, 35, 184, 185, 213, 275, 186, 69, -462, 124,
	-435, 206, 207, 381, 48, 328, 156, 111, 110, 277,
	52, 50, 449, -410, 108, 413, 414, 415, 416, 168,
	169, 144, 145, 297, 313, 397, 422, 424, 174, 233,
	94, 165, 204, 188, 212, 214, 218, 234, 237, 262,
	268, 272, 294, 296, 349, 378, -523, 450, 392, 63,
	64, -468, 329, -469, -214, -468, 491, 491, 493, 491,
	-260, -261, -262, 2, 27, 121, 488, 2, -378, 2,
	-379, -383, -163, 228, -382, 488, -380, 486, -221, 285,
	-464, 355, -460, -461, -201, -220, -234, 4, -433, -435,
	490, -263, 488, 106, 403, 72, 199, -315, 488, -192,
	27, 284, 417, 493, -360, 488, 284, 164, 287, -192,
	2, 2, 374, 2, 488, -111, 65, 421, 42, 370,
	-335, 2, -336, -189, -190, -191, -388, 215, 319, 327,
	467, 464, -422, -501, 164, 471, 417, -422, -289, 490,
	2, 2, 2, 2, 2, -383, 184, -221, 2, -218,
	-425, 4, -433, -437, -434, -438, -436, 27, 30, 31,
	32, 34, 36, 37, 38, 39, 53, 59, 60, 66,
	70, 72, 81, 86, 92, 97, 98, 100, 99, 101,
	102, 103, 112, 116, 119, 121, 122, 126, 128, 131,
	146, 148, 161, 163, 164, 172, 175, 178, 191, 203,
	208, 210, 228, 231, 238, 242, 243, 270, 274, 280,
	284, 285, 289, 290, 308, 318, 331, 347, 365, 372,
	384, 398, 403, 411, 417, 419, 425, 432, 433, 441,
	443, 451, 455, 456, 457, 458, -439, 71, 2, -383,
	184, 2, -223, 184, -383, -226, 2, -205, -192, 2,
	-217, -425, 2, -239, 184, -221, -222, -226, -224, 2,
	-226, -431, 184, 2, -429, 10, -428, 5, 4, -433,
	-437, -434, -97, -431, 488, 417, 493, -279, -231, -232,
	-272, -192, 490, -348, 2, -100, 2, -348, 184, 2,
	-100, 184, 2, -348, 184, 2, -100, 184, 2, 2,
	2, 423, 2, 89, 184, -192, 403, 105, 2, 341,
	-509, 357, 427, 452, 2, 2, 2, 2, 2, 2,
	403, -210, 2, -192, 161, -230, 184, 2, -192, 366,
	-518, 329, -431, 184, 2, -224, 2, -224, 199, 211,
	-205, 184, 2, 407, 405, 407, 405, 164, 2, 210,
	2, 210, 2, -384, 2, -385, -379, -221, 486, 2,
	2, 2, 2, 2, 184, -192, 403, 105, 2, 226,
	2, 2, 2, 2, 2, 2, 2, 2, -281, 184,
	2, -221, -281, 184, 2, -281, 184, 2, -321, 2,
	81, -205, 184, 2, -229, 184, 2, -224, -432, 184,
	2, -431, -392, 2, -391, -428, 448, -82, 488, -82,
	488, 370, 488, -431, -221, -221, -348, -100, -98, -97,
	164, -348, -100, -157, 161, 2, 106, 403, -142, 2,
	161, 443, 2, 8, 2, -431, 361, 326, 153, 2,
	374, 2, 375, 68, -322, 464, 68, 164, 2, 164,
	2, -305, 2, 458, -489, 2, 284, 164, 2, 164,
	2, 164, 2, 164, 2, 164, 2, 323, 371, 217,
	2, -100, 455, -348, 455, 2, 420, 225, 138, 164,
	-305, 2, 164, 2, 164, 2, 5, 2, 389, 2,
	215, 319, 389, 2, -221, -512, 2, 403, 452, 366,
	2, 2, 82, 83, 164, 2, 164, 2, 164, 464,
	2, -298, -383, -334, -335, -334, 417, -266, -268, -142,
	374, 2, -168, -296, -170, 161, -324, -325, -171, 238,
	148, 280, -172, -304, 27, 121, -304, -304, 55, 489,
	489, 11, 12, 70, 40, 479, 480, 481, 482, 159,
	483, 484, 477, 478, 476, 469, 470, 474, 221, 222,
	88, 473, 471, 80, 248, 356, 149, 150, 151, 152,
	338, 197, 33, 198, 14, 15, 16, 32, 289, 237,
	465, 188, 378, 472, 17, 18, 19, 212, 214, 272,
	47, 191, -200, -241, -348, -348, -348, -348, -348, -348,
	-348, 296, 488, -294, -343, 486, -163, 488, 488, 488,
	-421, 8, -163, -348, -362, 489, -286, 488, -163, -362,
	-357, 488, 354, 486, 488, -365, -348, 5, 5, 5,
	488, 490, -471, 459, 161, 488, 488, 488, 488, 488,
	488, 488, 488, 488, 488, 488, 488, 488, 488, 488,
	315, -403, 488, -402, 488, -402, -402, 453, -400, 488,
	466, 460, 488, -400, 488, 488, 488, 488, 488, 488,
	488, 488, 488, 488, 488, 488, 488, 453, 493, -468,
	-263, 488, -290, -386, -348, 481, -290, -290, 284, -283,
	-348, 94, -308, 218, 262, 165, 234, 349, 204, -345,
	492, -345, -373, 466, -163, -380, -220, -163, -382, 488,
	-378, -373, -83, -421, -68, -80, -88, -100, -113, -146,
	-147, 481, -221, 488, 164, 488, 490, -425, 164, -272,
	-205, -221, -233, -234, -239, 120, -283, -486, -272, -195,
	37, -359, -395, -396, -442, 492, -441, -398, -408, -404,
	-407, 311, 312, -427, 50, 449, -410, 209, 4, -433,
	-435, 206, 207, 381, 48, 328, 156, 111, 110, 277,
	52, 413, 414, 415, 416, 168, 169, 450, 392, 63,
	64, -486, -272, 161, -424, -283, 37, -335, 2, 112,
	-429, 42, -521, 493, 236, -243, 247, 269, 180, 285,
	462, 278, -430, 5, 4, -358, -370, 112, 241, 209,
	-415, -417, 8, -416, 9, -418, 479, 480, -423, -422,
	96, 490, -425, -179, 339, -178, 23, 28, 125, 446,
	139, -253, 201, 303, 134, 385, 436, -495, -496, 359,
	408, 409, 84, 278, 339, 134, -301, -303, 37, 104,
	264, 298, 56, 194, 252, 253, 387, 454, 134, 339,
	-496, 339, -496, -181, 385, 436, -495, -496, 359, 339,
	-180, -253, 134, 492, 23, 339, 373, 299, -505, -506,
	125, 28, -492, -465, 458, 134, -389, -388, -432, -97,
	-279, 493, 493, -425, 481, 134, 134, 134, 134, 2,
	2, 270, 2, 2, 2, 166, -498, -510, 2, 2,
	2, -221, 184, -265, 284, -488, -280, 403, -221, 270,
	-223, 184, 2, -226, 452, -492, 270, 37, 488, 2,
	-321, 2, 199, -465, 270, -384, -236, -221, -379, -236,
	373, -214, 37, -345, -345, 134, 2, 2, 2, -192,
	-182, 493, 58, 345, 134, -182, 134, -182, 134, -240,
	184, -239, -182, 134, -182, 493, 134, 493, 134, 489,
	493, -392, -392, -431, -155, 458, 164, 92, 488, 488,
	-157, -389, 493, -98, -431, -488, -205, 2, -221, 2,
	403, 219, -155, -431, -431, -431, -424, 27, 375, 2,
	323, 371, 83, 375, 2, -221, 403, 106, 199, 74,
	-490, 161, -487, 350, -486, -221, 106, -221, 106, -221,
	106, -221, -221, 2, 2, 2, 2, 79, 79, 161,
	2, 420, 2, 420, 2, -192, -192, -192, 236, -221,
	161, 403, 199, 403, 199, 106, 403, -182, 493, -196,
	-168, -296, -424, -297, -296, -169, -168, -171, 161, 327,
	437, 264, 376, 223, -325, -324, 27, -348, -329, 155,
	263, -348, -327, -350, 479, 480, -416, -418, -282, 278,
	-162, -162, -162, -269, -375, -348, 318, 199, -397, -395,
	-395, -219, -425, 413, -348, -348, -348, -348, -348, -348,
	-348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
	-348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
	-348, -348, -348, -348, -348, -348, -348, -348, -348, 237,
	188, 378, 47, 191, -348, 417, -348, -348, -348, -348,
	259, 270, 274, 425, 146, 434, 121, 278, -524, 398,
	39, -355, -163, -287, 488, -369, 34, 384, 27, -362,
	488, 2, -343, -348, -344, -284, -283, -283, 489, 451,
	27, 121, 481, 2, 489, 493, 37, 489, -348, -284,
	-361, -357, -283, -368, -367, 455, -316, -317, 463, 255,
	109, 182, 254, -318, 364, -419, 8, -425, 481, -472,
	154, 175, 488, 489, 2, 489, 2, 489, -348, 2,
	489, -348, 2, 489, -348, 2, 489, -348, 2, 489,
	2, -348, -348, -348, -348, -348, -348, -348, -283, 8,
	-419, -419, 413, 413, -419, -419, -419, -411, 311, 239,
	312, 170, 258, 256, 257, 169, -411, -310, 2, -413,
	-283, 4, 463, 255, 109, 182, 254, 364, 5, -310,
	2, -311, 2, -348, -283, -312, -349, -350, 479, 480,
	472, -362, -313, 2, -348, -284, -348, 53, 231, 419,
	-314, -348, 164, -283, -283, 2, -283, 2, -469, 37,
	-283, -275, 493, 164, 37, 4, -275, -275, 488, 489,
	493, -309, 179, 251, 246, -309, -378, -308, 218, -306,
	294, -306, -306, -373, -206, 486, 494, -425, -373, -372,
	-371, 37, -214, 291, -373, -373, 490, 489, -372, 487,
	-484, 488, 491, 491, 491, 491, 491, -221, 488, -283,
	-425, 490, 390, 489, 212, 212, 212, 212, 355, 489,
	417, 458, -82, 286, 489, 493, -274, 36, 486, 490,
	-419, 2, 2, -414, 453, 488, 488, -317, 488, 164,
	-273, -501, 489, 421, -336, -242, 327, 383, 340, 368,
	400, 8, 9, 8, 9, 493, -425, 493, -502, 86,
	417, 72, -339, 184, 72, -443, -208, 86, -444, -192,
	66, 433, 318, 163, 132, -502, 86, 318, -502, 86,
	86, 373, 388, 55, -383, 40, 40, 27, -100, 232,
	164, 464, 403, 199, 417, -383, -303, -395, 104, 252,
	253, 55, -420, -415, 479, 480, -420, 55, -420, -420,
	-420, 458, -223, -383, 417, 417, 493, 40, 40, 27,
	-100, 232, 164, 417, -239, -206, 447, 41, 447, 417,
	41, 360, 417, 493, 41, 41, -493, -197, 93, 265,
	245, 266, -198, -199, 305, 445, -431, -152, 195, 489,
	-389, -231, -192, 490, -348, -100, -348, -100, 134, 2,
	-518, 226, 488, -246, 270, 164, -272, -390, 210, 493,
	-280, 134, -302, -301, 270, -225, 184, 2, -221, 134,
	129, 488, 325, 2, -207, 184, -193, -192, -321, -185,
	406, 134, -300, 443, -330, -100, 488, 112, 37, -330,
	-291, -292, -387, -293, -208, 488, -214, -192, 2, -221,
	-281, -281, -281, -182, 493, 134, -205, -224, -229, -431,
	-432, -82, -391, 489, 489, 489, -154, 288, -153, -192,
	5, -157, 443, -245, -340, -339, -447, -448, -443, 237,
	199, 433, 211, 147, -264, -209, -208, 105, -155, -97,
	-389, -155, -155, -389, -389, -221, 161, -155, -155, -155,
	2, 2, -305, -221, -205, -239, -221, -272, -272, -305,
	-205, -305, -205, -305, -205, -100, -348, 370, 161, 161,
	490, -305, 325, 106, 403, 303, 199, -221, -239, -221,
	-239, -205, -221, -383, -297, -169, 285, 223, 376, -327,
	-328, -350, 354, 355, -328, 354, 355, 8, 9, 8,
	9, -173, 380, 273, -281, 493, -176, 38, 119, 223,
	-221, 464, 130, -348, -348, 417, -524, 398, -355, 130,
	-348, 259, 274, 425, 146, 434, 121, 278, 164, 488,
	-349, -349, 489, -285, -348, -348, 487, 496, 489, -268,
	493, -266, -348, -283, -283, 489, 490, -283, -272, 487,
	487, 493, 489, -366, -367, 126, -348, 417, 417, 417,
	417, 488, 489, 490, -477, 295, 488, 488, -348, 489,
	489, 489, 489, 37, 493, 493, 493, 489, 493, 493,
	493, 489, 489, 489, 493, 489, 464, 464, 489, 489,
	489, 489, 493, 489, 493, 489, 164, 489, 489, -319,
	308, 489, 11, 12, 479, 480, 481, 482, 159, 483,
	484, 477, 478, 476, 469, 470, 471, 80, 248, 356,
	14, 15, 16, 212, 191, -349, -349, -349, 489, -353,
	-354, 164, 161, 37, -314, -314, -314, 489, 164, -283,
	489, 489, 488, -470, 250, 270, 489, -342, -341, 456,
	-386, -276, 2, -378, -216, -425, -342, -342, -283, -348,
	218, 218, -307, 443, 284, -309, -378, -372, -421, -347,
	-346, 162, 38, 119, 267, 187, -372, -214, -263, -372,
	-372, -425, -373, -373, -371, 489, -485, -421, 489, -277,
	-381, -464, -268, 490, -425, -155, -143, 5, 274, -143,
	-143, -143, -272, 24, 309, -395, 486, 487, 8, -425,
	488, -419, -419, -419, -272, 164, -422, -335, 431, 77,
	327, 413, -422, -178, 339, -208, -208, -221, 270, -339,
	184, -184, 270, -395, -215, -192, 488, 488, 223, 223,
	443, -208, -215, 223, 184, -208, 184, -215, -215, -494,
	327, 279, -348, 240, 325, 271, -179, 339, -100, -100,
	-100, 488, -501, 443, 120, -221, -239, -221, -225, 339,
	268, -233, -420, -420, -301, 339, -223, -205, -180, -100,
	-100, -100, 488, -206, -181, 339, 5, 184, -208, 5,
	-224, -208, -230, -504, -429, 103, 372, -506, 23, -208,
	184, -208, -197, -431, 274, 439, -492, -155, 164, -152,
	481, -192, 452, -192, -244, -247, -245, -208, -160, 460,
	458, 134, -237, -221, 486, -155, -431, -221, -230, 134,
	-263, 270, -431, 488, 2, 2, 284, 270, -207, 184,
	-186, 127, -522, 471, -205, -342, -276, -299, -333, 347,
	284, -264, 448, -214, -299, -278, 493, 164, 471, 490,
	-264, 2, -182, -182, -182, -239, -240, -182, -182, -82,
	-82, -155, 493, 488, 471, 471, 488, -431, -431, 489,
	493, -221, -207, 199, 199, -213, -193, 489, 493, 490,
	488, -155, 164, -46, 458, 403, 492, -305, -305, -305,
	370, 370, -192, -217, -205, -221, -218, -239, 161, 161,
	437, -328, 285, 244, -375, -177, 276, -221, 492, -348,
	-348, 130, 130, -348, -349, -349, -348, 130, 164, 488,
	-348, -359, 32, 32, 489, 493, -344, -348, 489, 451,
	-268, -268, 489, 481, -425, 492, 489, -357, 128, -348,
	411, 255, 182, 254, -318, 254, -318, -318, -419, 5,
	-425, 481, -478, -211, 488, -192, 456, -267, 290, 489,
	-397, -395, -348, -348, -348, -348, -348, -419, -400, -400,
	-419, -419, -348, -353, -348, -397, -395, -349, -349, -349,
	-349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
	-349, -349, -349, -349, -349, -349, 121, 270, 278, -349,
	-354, -353, -348, -348, -395, 489, 489, 489, -283, -82,
	488, 250, -295, 175, -348, -389, 493, -295, -295, 489,
	-378, -378, 488, -348, 218, 487, 493, 495, 471, -263,
	490, -371, -372, 487, 489, 493, 489, 493, -332, 37,
	489, -425, 287, 5, 8, 486, 487, 490, -419, 489,
	489, 489, -272, -348, 417, 417, 134, 270, 445, -449,
	-444, 132, -348, -270, -376, -348, 488, 488, 2, -175,
	125, 373, -503, 2, 443, 134, -182, 134, -182, 462,
	488, 488, 417, 458, -283, -348, -156, 112, -424, -496,
	492, -496, 492, 417, 417, 458, -283, 417, -399, 45,
	25, 270, -224, 417, 417, -182, 134, 428, 373, -431,
	274, -432, -155, 2, -225, 2, 489, 489, 493, -450,
	37, 282, 488, 282, -221, -64, 458, -388, -421, -223,
	37, 134, -492, -393, -394, 5, -221, 134, 284, 270,
	-187, 230, -522, -429, -465, -268, -299, -290, 271, 85,
	489, -342, -292, -276, -348, 2, 489, -182, -153, -154,
	-431, -431, -431, -155, -157, -157, -340, -248, 488, -207,
	-193, 488, -157, -209, 2, -432, -100, 288, -221, 481,
	-305, -255, -254, 303, 278, -255, 354, 354, 285, 155,
	227, -176, -206, -348, -348, 130, 32, 32, -348, -348,
	-359, 489, -348, -348, -283, 487, 5, -348, 489, 489,
	8, -348, 489, 490, -479, -192, -348, 489, 55, 489,
	489, 493, 493, 489, 489, 489, 489, 489, 489, 489,
	-354, 164, 121, 278, 488, 489, 489, -82, -356, 178,
	55, -378, -356, -356, -307, -272, -378, -346, -206, 486,
	-425, -421, -381, 488, 490, 487, 2, 486, -425, 489,
	-208, -208, -339, 134, -451, 86, -453, 70, 147, 92,
	270, 274, 433, 318, 66, 112, 331, -514, 37, 468,
	489, 489, 493, -176, -270, -272, 270, 395, 112, 270,
	112, 105, 428, 73, -208, -215, -272, -272, -221, 140,
	489, 493, 471, 2, 481, 481, -225, -223, 140, 489,
	-206, 5, 5, 134, -203, 70, 5, -208, -208, -224,
	105, -263, -251, 202, -208, -448, -445, -446, 318, -452,
	-454, 147, 318, -100, -159, -158, -192, 5, 2, 488,
	-246, 288, 487, -302, -100, -225, 489, 493, -323, 443,
	-206, -221, 134, -188, 229, -522, -429, -185, -326, -324,
	-331, 488, 284, -100, -268, 471, 489, 489, 105, 105,
	193, 133, -270, 488, 488, -272, 105, 489, -47, -48,
	199, 86, 307, -218, 403, 199, 488, 488, -176, -348,
	-348, -348, 489, -268, -425, 481, -473, 303, 489, -375,
	-348, -348, -349, 164, 488, -359, 489, -474, 457, -348,
	-283, -474, -474, 489, -421, 2, 486, 2, -339, -215,
	-219, -212, -192, 147, 184, 274, 223, 488, -349, -221,
	488, 2, 29, -515, 116, 203, -338, -516, 91, 396,
	192, -376, -177, 489, 489, 274, 274, -348, -395, 488,
	-182, -182, 489, 489, -348, 417, -424, 90, -422, 2,
	-496, -348, 417, 5, -182, -219, -182, -182, -203, 428,
	37, -252, -253, 191, -450, 223, -212, 223, -513, 458,
	489, 493, 471, 471, -244, -160, -65, -66, 418, -388,
	-263, 5, 488, -192, 284, 488, -206, -522, -429, -186,
	-299, 122, -272, 86, -326, -355, -155, 488, 488, -249,
	75, 87, 113, 183, 167, 200, 388, 393, 27, -249,
	489, -270, -270, 489, 488, -155, 493, 27, 488, 27,
	488, -221, -239, -283, -283, 489, -268, 55, 493, 489,
	489, -349, -359, 489, -475, -476, -211, 487, 2, -453,
	-212, 270, 443, -348, -194, 488, -348, 37, 203, 117,
	189, -251, 488, -337, 443, 331, -203, -270, 488, 488,
	488, 471, 164, 488, -399, -182, -224, -100, -160, 301,
	488, -250, 284, 105, 264, -158, -351, -351, 489, 37,
	-66, 9, 37, -270, -221, -270, 284, -429, -187, 437,
	271, 489, -215, -299, -432, -432, -337, 489, 489, -432,
	-48, -272, -272, 489, 489, -480, 325, 355, 177, -283,
	-269, 489, 493, 37, 134, 179, 489, -455, 249, -192,
	489, 117, 189, -252, -272, -251, 179, -221, -497, 443,
	489, -257, -256, -254, -259, -258, -254, -283, -422, 90,
	301, -283, -203, -250, -221, -271, -377, -208, 76, 105,
	-251, -100, -100, 489, -323, 489, -221, -188, 373, -341,
	489, 489, -338, -337, -342, 489, 489, 489, 489, -481,
	-482, 47, 430, 96, -348, -481, -481, -476, -478, 147,
	458, -456, -459, -458, 284, 379, 165, 302, 489, 395,
	454, -515, 489, 458, -263, -348, -337, 489, 493, 448,
	489, 493, 448, 489, 164, 489, -182, 488, 489, 493,
	317, 118, 125, -252, -513, -337, 488, -338, 488, -291,
	-155, -155, -251, -338, -155, -483, 132, -482, 314, 160,
	354, 314, 160, -483, -483, -212, 51, -458, 284, -459,
	284, 437, 118, -342, 51, -455, -251, -256, 191, -258,
	164, 301, -272, -377, 355, 355, 2, -160, -250, -338,
	-270, -251, -270, -342, -252, -251, 96, 175, 412, 264,
	32, 471, -457, 264, 345, 58, 373, -457, 471, -456,
	488, 488, 489, 2, -250, -251, 489, -252, 489, -342,
	-252, 354, 292, -482, -348, 22, 274, 112, -348, -515,
	-283, -283, -183, 58, 345, -252, -337, -342, -338, -342,
	489, 489, -342, -338, -251, -252, 417, -251, -252, 488,
	-252, -342, -283, -342, 489, -252,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 26, 27,
	28, 404, 405, 407, 408, 409, 411, 412, 414, 416,
	418, 420, 421, 423, 425, 427, 428, 429, 430, 431,
	433, 435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 493, 495, 0, 1026, 1028, 1030,
	1032, 0, 623, 0, 30, 31, 0, 0, 219, 221,
	223, 0, 248, 250, 251, 253, -2, 0, 349, 350,
	352, -2, -2, 0, 0, 482, 484, 0, 0, 0,
	504, 505, 0, 1114, -2, 498, 500, 502, 567, 569,
	571, 573, 575, 577, 579, 580, 582, 584, 586, 588,
	590, 592, 594, 595, 597, 599, 601, 603, 605, 607,
	609, 611, 613, 615, 617, 619, -2, -2, -2, 0,
	-2, -2, -2, 1044, 34, 36, 38, 40, 42, 44,
	46, 48, 300, 301, 303, 305, 307, 309, 312, 314,
	316, 1172, 354, 356, 358, 360, 362, 364, 0, -2,
	1184, 0, 0, 50, 51, 52, 53, 54, 55, 56,
	57, 73, 74, 75, 76, 77, 78, 79, 80, 61,
	63, 64, 68, 69, 71, 59, 0, 0, 1145, 1147,
	1149, 1151, -2, 0, 0, 5, 9, 11, 13, 15,
	17, 19, 21, 23, 406, 410, 413, 415, 417, 419,
	422, 424, 426, 432, 434, 436, 391, 392, 395, 1804,
	1821, 1822, 1823, 1826, 1827, 1828, 1829, 1830, 1831, 2182,
	2263, 2264, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
	2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 393, 394, 906, 0, 460, 458, 1797, 461,
	2015, 463, 465, 343, 344, 345, 346, 347, 348, 0,
	475, 469, 474, 476, 478, 479, 480, 481, 455, 453,
	0, 475, 1856, 473, 1024, 1025, 1019, 1020, 2046, 1051,
	494, -2, -2, -2, 2148, -2, 526, -2, 533, 2152,
	2048, 538, 0, 540, -2, 543, 1027, 1029, 1031, 621,
	622, 1807, 0, 0, 0, 0, 32, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 956, 957,
	0, 0, 183, -2, -2, -2, -2, 0, 0, 1897,
	1765, 1823, 1768, 1763, 220, 222, 224, 225, 0, 0,
	0, 0, 0, 0, 249, 252, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 801, 793, 794, 996,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 0, 0, 0, -2, 0, 0, 0,
	279, 396, 397, 0, 1173, 1173, 0, 0, 0, 0,
	200, 191, 0, 0, 770, 483, 485, 0, 0, 186,
	0, 0, 1023, 0, 202, 0, 0, 499, 501, 503,
	568, 570, 572, 574, 576, 578, 581, 583, 585, 587,
	589, 591, 593, 596, 598, 600, 602, 604, 606, 608,
	610, 612, 614, 616, 618, 620, 628, 0, 0, 0,
	0, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	0, 631, 633, 634, 635, 0, 686, 703, 0, 946,
	1174, 1053, 1034, 1048, 1053, 1036, 1037, 1038, 1039, 1040,
	1045, 1047, 1041, 1042, 1043, 35, 37, 39, 41, 43,
	45, 47, 49, 302, 304, 306, 308, 310, 313, 315,
	317, -2, 1143, 1144, 355, 357, 359, 361, 363, 365,
	486, 0, 488, 0, 632, -2, 0, 1178, 1178, 1178,
	0, 0, 1144, 1142, 0, 491, 492, 547, 548, 1408,
	0, 0, 0, 0, 0, 0, 0, 1662, 1494, 0,
	549, -2, 1525, 1527, 2123, 2148, 1661, 1529, 1530, 1531,
	1532, 1533, 0, 1535, 1536, 1537, 1538, 1539, 1540, 0,
	1542, 0, 1547, 1548, 1549, 0, 2130, 1742, 1817, -2,
	0, 0, 2136, 1813, 0, 1628, 1565, -2, -2, 1840,
	1819, 1340, 1341, 1342, 1343, 1344, -2, -2, 2165, 1569,
	1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	0, 2112, 2131, 2132, 2137, 2139, 2133, 2120, 1590, 1907,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1367, 1376, -2, -2, -2, -2, -2,
	-2, 2124, 2125, 2142, 2145, 2151, 2156, 2157, 2129, 2138,
	2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175,
	2176, 2177, 2178, 2179, 2180, 2181, 1368, -2, -2, -2,
	-2, 1161, 2025, 1164, 906, 1162, 1146, 1148, 0, 1150,
	0, 0, 0, 1155, 1181, 1179, 0, 1222, 1159, 1160,
	1240, 1240, 1264, 0, 1245, 0, 1264, 1173, 1290, 0,
	1251, 2041, 1566, 1567, 0, 1823, 1818, -2, -2, 2163,
	0, 0, 0, 0, 0, 0, 0, 456, 0, 462,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	496, 497, 0, 521, 0, 525, 2119, -2, 1864, 2057,
	-2, 529, 1054, 1058, 1059, 1060, 1061, 0, 0, 0,
	0, 0, 535, 0, 0, 522, 523, 541, 544, 0,
	624, 625, 626, 627, 58, 0, 2131, 1290, 60, 0,
	1787, 1848, 1849, 1850, 1851, 1852, 2164, 2183, 2184, 2185,
	2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195,
	2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205,
	2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215,
	2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225,
	2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235,
	2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245,
	2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255,
	2256, 2257, 2258, 2259, 2260, 2261, 2262, 2165, 62, 0,
	2131, 65, 0, 2131, 0, -2, 70, 0, 1793, 72,
	0, 1790, 81, 0, 2131, 0, 1762, -2, 0, 167,
	1801, -2, 2131, 954, 203, 204, 1836, 1837, 1844, 1845,
	1846, 1847, 1277, 187, 0, 0, 0, 762, 1759, 1764,
	763, 1769, 0, 226, 227, 228, 229, 230, 2131, 232,
	233, 0, 235, 236, 2131, 238, 239, 0, 241, 255,
	256, 0, 258, 0, 2131, 0, 0, 0, 264, -2,
	280, 0, 277, 0, 268, 269, 271, 272, 273, 274,
	0, 321, 319, 1798, 0, 771, 2131, 773, 1803, 0,
	0, 975, -2, 2131, 951, 981, 977, 0, -2, 0,
	1171, 2131, 1068, 797, 798, 799, 800, 0, 340, 0,
	1081, 0, 1083, 0, 1104, 1296, 1240, 1240, 0, 281,
	282, 283, 284, 285, 2131, 0, 0, 0, 290, 0,
	292, 293, 294, 295, 296, 297, 298, 299, 156, 2131,
	368, 389, 156, 2131, 371, 156, 2131, 374, 0, 377,
	994, 156, 2131, 380, 156, 2131, 383, 384, 386, 2131,
	388, 205, 0, -2, 449, 1806, -2, 399, 0, 400,
	0, -2, 0, 217, 0, 0, 768, 769, 1277, 189,
	0, 1021, 1022, 0, 0, 506, 0, 0, 629, 630,
	0, 0, 640, 641, 642, 217, 2049, 2023, 1924, 647,
	0, 650, 653, -2, 0, 0, 0, 0, 657, 0,
	662, 663, 664, 0, 767, 666, 0, 0, 668, 0,
	672, 0, 675, 0, 677, 0, 679, -2, -2, -2,
	690, -2, 0, 694, 0, 696, 0, 0, 0, 0,
	711, 712, 0, 717, 0, 720, 721, 722, 723, 724,
	0, 726, 727, 728, 729, 0, 731, 732, -2, -2,
	736, 738, 0, 745, 0, 749, 0, 753, 0, 636,
	637, 156, 1294, 1033, -2, 1035, 0, -2, 0, 487,
	0, 490, 1201, 1129, 1126, 0, 1198, 1199, 1130, 0,
	0, 0, 1137, 0, 1176, 1177, 0, 0, 0, 1116,
	1117, 0, 0, 0, 0, 1667, 1668, 1669, 1670, 1671,
	1672, 1675, 1676, 1673, 1674, 1677, 1678, 0, 0, 0,
	0, 0, 1679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1680, 1681, 1682, 0, 0, 1684,
	0, 1686, 0, 0, 0, 0, 0, 0, 1473, 1475,
	1750, 0, 0, 1683, 1413, 1414, 1415, 1416, 1417, 1452,
	1453, 0, 0, 1526, 1747, 1746, 1528, 0, 1698, 0,
	1541, 1783, -2, 0, 1662, 1693, 0, 0, 1550, 1551,
	1552, 0, 0, 1698, 0, 0, 1741, 1562, 1563, 1405,
	0, 0, 1630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1353, 0, 1355, 0, 1356, 1357, 1364, 1377, 0,
	0, 0, 0, 1381, 0, 0, 0, 0, 0, 0,
	0, 1722, -2, 0, 0, 0, 0, 1369, 0, 1163,
	0, 0, 1226, 1751, 1755, 1756, 1226, 1226, 0, 0,
	1699, 1287, 1287, 0, 0, 1283, 1283, 1283, 1281, 1264,
	0, 1264, 1274, 0, 1264, 1264, 0, -2, 1245, 0,
	0, 1274, 0, 1258, 437, 439, 441, 443, 444, 445,
	447, 1291, 1292, 0, 0, 0, 0, 1824, 0, 0,
	0, 0, 0, 1809, 0, 0, 0, 0, 467, 477,
	1173, 0, 1701, 1313, 1317, 0, 1319, 1320, 1321, 1322,
	1323, 0, 0, 1314, -2, 1365, 1367, 1388, 1841, 1842,
	1843, 1348, 1349, 1350, 1351, 1352, 1360, 1347, 1347, 1347,
	1358, 1387, 1379, 1387, 1383, 1334, 1335, 1370, 1371, 1372,
	1373, 0, 471, 0, 0, 0, 0, -2, 531, 536,
	537, 0, 0, 1056, 0, 1062, 558, 559, 560, 1064,
	1065, 0, 534, 561, 562, 563, 564, 565, 566, 0,
	1771, 1772, 1773, 1774, 1777, 1778, 0, 0, 532, 551,
	539, 0, 545, 82, 1016, 121, 0, 1016, 1016, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 106, 117,
	94, 95, 0, 0, 0, 0, 66, 928, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	105, 0, 100, 84, 0, 0, 0, 107, 119, 0,
	147, 149, 0, 0, 0, 0, 0, 0, 166, 174,
	0, 0, 952, 0, 1170, 0, 208, 1276, 0, 1277,
	761, 0, 0, 1824, 1767, 0, 0, 0, 0, 257,
	259, 0, 261, 262, 263, 0, 974, 0, 270, 267,
	311, 877, 2131, 0, 0, 338, 333, 0, 335, 0,
	927, 2131, 925, 1802, 0, 949, 0, 0, 0, 982,
	1833, 991, 995, 1070, 0, 342, 0, 1084, 1086, 0,
	0, 1297, 0, 1299, 1300, 0, 287, 288, 289, 0,
	366, 0, 154, 155, 0, 369, 0, 372, 0, 156,
	2131, 1757, 378, 0, 381, 0, 0, 0, 0, 1173,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 217, 0, 1277, 217, 217, 1277, 508, 1277, 510,
	0, 0, 643, 217, 217, 217, 648, 649, 651, 652,
	-2, -2, 746, 654, 655, 714, 0, 0, 0, 713,
	665, 0, 755, 2037, 765, 714, 1897, 714, 1897, 714,
	1897, 676, 678, 681, 706, 689, 693, 0, 0, 0,
	698, 0, 700, 0, 702, 714, 715, 718, 725, 730,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 1046,
	1201, 1129, 489, 1120, 1200, 1121, 1128, 1131, 0, 0,
	1133, 0, 1135, 0, 1196, 1197, 1204, 1205, 0, 1215,
	1216, 1208, 0, -2, 0, 0, 1211, 1212, 1139, 0,
	1156, 1157, 1158, 1185, 1188, 1005, 0, 2263, 1409, 1308,
	1410, 1411, 1786, 0, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, -2, -2, -2, -2, -2, -2,
	-2, -2, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, -2, -2, -2, 1450, 1451, -2, 1685,
	1687, 0, 1750, 0, -2, 0, -2, -2, -2, -2,
	1470, 0, 1472, 1477, 1479, 1481, 0, 0, 0, 0,
	1749, 1491, 1733, 1734, 0, 0, 1664, 1665, 1666, 1476,
	0, 1495, 1748, 1745, 0, 0, 1697, 1184, 1554, 0,
	0, 0, 0, 1561, 1546, 1695, 0, 1694, 0, 0,
	0, 1705, 0, 1740, 1736, 0, 1784, 1404, 1391, 1392,
	1393, 1394, 1395, 1396, 1406, 0, 1781, 1810, 1816, 1638,
	0, 0, 0, 1591, 1592, 1593, 1594, 1595, 0, 1597,
	1598, 0, 1600, 1601, 0, 1603, 1604, 0, 1606, 1607,
	1608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 0, 0, 1610, 0,
	1708, -2, -2, -2, -2, -2, -2, -2, -2, 0,
	1612, 0, 1614, 1699, 1719, 0, 0, 1496, 0, 0,
	0, 1662, 0, 1617, 1699, 1727, 0, 0, 0, 0,
	0, 1699, 0, 1732, 0, 1624, 0, 1626, 1165, 0,
	0, 1303, 0, 0, 0, 1754, 1303, 1303, 0, 1221,
	0, 0, 1284, 1285, 1286, 0, 0, 1287, 0, 1278,
	1282, 1279, 1280, 1274, 1237, 0, 0, 1788, 1274, 1243,
	1273, 0, 906, 1263, 1274, 1274, 0, -2, 1247, 1264,
	0, 0, 438, 440, 442, 446, 448, 0, 0, 1184,
	-2, 0, 217, 905, 0, 0, 0, 0, 457, 459,
	0, 0, 451, 0, 454, 0, 1304, 1307, 0, 0,
	1318, 1324, 1325, 0, -2, 0, 0, 1389, 0, 0,
	0, 0, 524, 0, 1055, 1063, 0, 555, 0, 557,
	0, 1775, 1779, 1776, 1780, 0, 546, 0, 0, 0,
	0, 1015, 125, 2131, 0, 158, 0, 0, 870, 1794,
	0, 0, 0, 0, 1912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 96, 0,
	0, 0, 0, 0, 0, 0, 929, 930, 932, 939,
	941, 0, 935, 1782, 0, 0, 936, 0, 938, 940,
	942, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	97, 0, 0, 0, 0, 1761, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 968, 962, 963,
	964, 965, 966, 967, 0, 0, -2, 217, 0, 188,
	208, 1760, 1770, 0, 231, 234, 237, 240, 0, 265,
	0, 0, 803, 776, 0, 0, 320, 217, 0, 0,
	334, 0, 923, 926, 0, 906, 2131, 961, 1800, 0,
	0, 0, 0, 980, 0, 2131, 1789, 1832, 1833, 1072,
	1078, 0, 1303, 0, 1102, 1087, 0, 0, 0, 1102,
	1106, 1107, 1109, 1110, 0, 0, 1298, 0, 291, 390,
	156, 156, 156, 375, 0, 0, 156, 385, 156, 206,
	387, 398, 450, 1173, 1173, 217, 215, 1999, 213, 210,
	212, 0, 0, 0, 804, 806, 807, 808, 809, 0,
	1833, 0, 1950, 1833, 0, 1090, 1092, 0, 184, 190,
	217, 0, 332, 507, 512, 638, 0, 644, 645, 646,
	683, 708, 656, 658, 659, 660, 0, 766, 764, 667,
	714, 670, 714, 673, 714, 692, 695, 697, 0, 0,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 750,
	751, 752, 754, 1295, 1124, 1125, 1127, 0, 1136, 0,
	0, 1210, -2, -2, 1209, 1213, 1214, -2, -2, -2,
	-2, 1132, 0, 1141, 1138, 0, 1195, 1003, 1004, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1492, 0,
	-2, 1471, 1474, 1478, 1480, 1482, 0, 0, 0, 0,
	0, 0, 1688, 0, 1690, 1493, 1743, 1746, 1660, 0,
	0, 1183, 1184, 1184, 0, 1560, 0, 1696, 0, 1703,
	1704, 0, 1553, 0, 1737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1564, 0, 0, 0, 0, 1596,
	1599, 1602, 1605, 0, 0, 0, 0, 1585, 0, 0,
	0, 1589, 1359, 1345, 0, 1387, 1385, 1386, 1380, 1387,
	1384, 1337, 0, 1336, 0, 1609, 0, 1611, 1613, 0,
	0, 1615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 1500, 1501, 1616, 1725,
	1726, 0, 0, 0, 0, 0, 0, 1622, 0, 1731,
	1623, 1625, 1173, 0, 1166, 0, 1223, 1218, 1302, 0,
	1752, 1277, 1225, 1227, 1753, 1791, 1218, 1218, 0, 1700,
	0, 0, 1268, 0, 0, 0, 1270, 1241, 0, 0,
	1235, 0, 1231, 1232, 1233, 1234, 1242, 906, 1272, 1244,
	1248, 1810, 0, 1274, 0, 1259, 0, 1261, 1293, 0,
	1253, 1256, 0, 0, 1825, 218, 242, 246, 247, 243,
	244, 245, 466, 0, 0, 1702, 0, 1309, 0, 1315,
	0, 0, 0, 0, 470, 0, 520, -2, 553, 554,
	556, 0, 552, 122, 1016, 0, 0, 1007, 0, 127,
	2131, 136, 0, 844, 0, 1792, 0, 0, 0, 0,
	0, 1018, 0, 0, 2131, 156, 2131, 156, 139, 142,
	0, 146, 144, 0, 0, 835, 83, 1016, 86, 90,
	98, 0, 0, 0, 104, 0, 0, 0, 1009, 0,
	933, 934, 937, 943, 67, 0, 1011, 1006, 148, 88,
	92, 99, 0, 1013, 85, 0, 170, 0, 0, 0,
	162, 0, 163, 164, 171, 172, 173, 175, 0, 156,
	2131, 0, 969, 947, 948, 0, 953, 181, 0, 217,
	1766, 0, 0, 0, 0, 0, 802, 888, 0, 0,
	0, 0, 326, 322, 0, 331, 337, 336, 772, 0,
	0, 0, -2, 984, 978, 979, 0, 0, 0, 2131,
	1074, 1078, 0, 1077, 1171, 1184, 341, 1079, 1102, 0,
	0, 0, 1089, 1085, 1082, 1303, 0, 0, 0, 0,
	0, 286, 367, 370, 373, 1758, 156, 379, 382, 401,
	402, 192, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 813, 0, 1833, 1833, 0, 1796, 0, 0, 0,
	0, 185, 0, 509, 0, 0, 0, 669, 671, 674,
	699, 701, 714, 739, 740, 830, 0, 830, 0, 0,
	1134, 0, 1207, 1140, 1189, 1190, 0, 1005, 0, 1412,
	1455, 0, 0, -2, 0, 0, 1459, 0, 0, 0,
	-2, 0, 0, 0, 1689, 1691, 0, 1745, 1555, 0,
	0, 0, 1559, 1543, 1544, 0, 1663, 1706, 1735, 1739,
	0, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 0, 1785,
	1811, 1815, 1636, 1637, 1641, 1799, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 0, 0, 0, 1378, 1382,
	0, 0, 1707, 1718, 1720, 1497, 1498, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, -2, -2, -2,
	1515, 1516, 1517, -2, -2, -2, 0, 0, 0, 1721,
	1723, 1724, 1728, 1729, 0, 1619, 1620, 1621, 1730, 0,
	1173, 1167, 1220, 0, 1301, 1224, 0, 1220, 1220, 1180,
	1266, 0, 0, 1289, 0, 1238, 0, 1239, 0, 1271,
	0, 1246, 1249, 1250, 1260, 0, 1252, 0, 1255, 0,
	1555, -2, 468, 452, 0, 0, 1311, 0, 0, 1362,
	1366, 1390, 472, 1275, 0, 0, 0, 0, 157, 842,
	869, 0, 0, 0, 998, 1005, 0, 0, 875, 129,
	0, 0, 0, 137, 0, 0, 134, 0, 141, 145,
	0, 0, 0, 0, 0, 101, 102, 103, 0, 108,
	0, 109, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 1002, 0, 0, 177, 0, 0, 0, 972,
	973, 207, 182, 260, 906, 266, 824, 876, 0, 878,
	0, 777, 0, 0, 877, 318, 0, 325, 0, 927,
	0, 0, 950, 0, 983, 985, 993, 0, 0, 0,
	1076, 1078, 0, 1069, 1070, 1203, 1080, 1100, -2, 1099,
	0, 1184, 1108, 1105, 1111, 1112, 0, 376, 214, 0,
	209, 211, 0, 195, 0, 0, 805, 810, 0, 0,
	0, 0, 0, 1091, 1093, 0, 201, 0, 639, 661,
	709, 741, 829, 0, 0, 743, 0, 0, 1206, 1193,
	1194, 1191, 1005, 1457, 1461, 0, 0, 0, 1463, -2,
	0, 1485, -2, -2, 1692, 1744, 1534, 1184, 1556, 1558,
	1545, 1738, 1407, 0, 1643, 1640, 0, 1627, 0, 1580,
	1581, 0, 0, 1584, 1586, 1587, 1588, 1346, 1339, 1338,
	1717, 0, 0, 0, 0, 1618, 1168, 0, 1632, 0,
	0, 1228, 1632, 1632, 1267, 0, 1269, 1236, 1229, 0,
	1811, 1262, 1254, 0, 0, 1305, 1310, 0, 1316, 1361,
	123, 124, 126, 0, 843, 0, 846, 0, 0, 0,
	0, 853, 854, 0, 0, 0, 0, 0, 863, 0,
	892, 902, 0, 1195, 0, 0, 0, 131, 151, 0,
	0, 1017, 0, 0, 156, 156, 0, 0, 1008, 0,
	0, 0, 0, 111, 0, 0, 1010, 1012, 0, 0,
	1014, 168, 169, 0, 156, 0, 161, 156, 156, 1002,
	0, 0, 832, 0, 888, 880, 881, 882, 0, 887,
	889, 0, 0, 790, 0, 786, 0, 0, 779, 803,
	776, 0, 323, 924, 958, 906, 976, 0, 0, 0,
	0, 0, 0, 1066, 1078, 0, 1071, 1072, 1102, 1202,
	0, 0, 0, 1088, 1203, 0, 216, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 511, 513,
	0, 0, 519, 828, 0, 0, 0, 0, 1192, 1465,
	-2, -2, 1486, 0, 1812, 1814, 1184, 0, 1629, 1186,
	0, 0, -2, 0, 0, 0, 1169, 1152, 0, 1219,
	1217, 1153, 1154, 1288, 0, 1257, 0, 1312, 128, 0,
	847, 848, 1795, 850, 0, 852, 855, 0, 858, 1835,
	0, 862, 0, 871, 893, 0, 824, 0, 898, 899,
	900, 999, 1000, 904, 0, 130, 132, 150, 1002, 0,
	133, 140, 0, 0, 87, 0, 0, 1890, 114, 112,
	110, 89, 0, 170, 176, 1001, 165, 178, 156, 0,
	0, 776, 831, 0, 879, 0, 890, 891, 780, 0,
	778, 0, 0, 0, 0, 0, 324, 327, 0, 330,
	0, 986, 0, 992, 0, 0, 0, 0, 1073, 1074,
	339, 0, 0, 0, 1102, 1113, 194, 0, 0, 811,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 812,
	904, 0, 0, 868, 0, 199, 0, 515, 0, 517,
	0, 742, 744, 0, 0, 1557, 1647, 0, 0, 1582,
	1583, -2, 0, 1523, 1631, 1633, 0, 1230, 1306, 845,
	849, 0, 0, 0, 910, 0, 0, 864, 0, 896,
	897, 832, 0, 824, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 160, 179, 1002, 959, 780, 0,
	0, 788, 0, 791, 0, 787, 784, 785, 824, 0,
	328, 329, 0, 0, 993, 0, 0, 1075, 1076, 0,
	1095, 1096, 1098, 1103, 0, 0, 902, 904, 1303, 0,
	514, 0, 0, 747, 748, 0, 0, 0, 0, 1642,
	1187, 1524, 0, 0, 0, 0, 857, 915, 0, 0,
	0, 894, 895, 892, 0, 873, 0, 906, 135, 0,
	904, 0, 836, 0, 0, 839, 0, 0, 115, 1890,
	113, 0, 156, 774, 0, 0, 884, 886, 0, 792,
	832, 790, 960, 904, 0, 902, 0, 1067, 0, 1097,
	217, 217, 824, 902, 867, 217, 516, 518, 1639, 1659,
	1648, -2, 2092, 1894, 0, 1659, 1659, 1634, 1635, 0,
	0, 859, 911, 912, 0, 907, 908, 909, 1834, 860,
	861, 1303, 901, 0, 910, 152, 824, 833, 0, 0,
	834, 0, 0, 118, 0, 120, 180, 0, 883, 0,
	0, 0, 0, 776, 780, 902, 0, 824, 0, 1303,
	196, 197, 832, 824, 198, 1644, 0, 0, 1650, 1651,
	1652, 1653, 1654, 1645, 1646, 851, 0, 913, 0, 914,
	0, 0, 0, 872, 0, 915, 138, 837, 0, 840,
	0, 116, 0, 885, 781, 0, 783, 780, 789, 824,
	0, 832, 0, 1094, 1303, 832, 0, 1656, 1657, 0,
	0, 0, 916, 0, 919, 920, 0, 917, 0, 892,
	0, 0, 827, 782, 775, 832, 904, 1303, 902, 865,
	1303, 1655, 1658, 1649, 856, 918, 921, 922, 903, 874,
	0, 0, 823, 825, 826, 1303, 902, 989, 824, 866,
	832, 0, 987, 824, 832, 838, 0, 832, 1303, 0,
	1303, 990, 0, 988, 832, 841,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 477, 3, 483, 478, 3,
	488, 489, 481, 479, 493, 480, 490, 482, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 496, 3,
	469, 471, 470, 474, 492, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 486, 3, 487, 484, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 494, 476, 495, 472,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 473, 57812, 475, 57813, 485, 57814, 491,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1167
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1172
		{
			return helpWith(sqllex, "")
		}
	case 5:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "ANALYZE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1177
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1178
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1179
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1180
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1181
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1182
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1183
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1191
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1206
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1209
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1210
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1211
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1265
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1291
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1302
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1317
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1325
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1339
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1358
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1390
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1398
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1404
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1408
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1414
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1423
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1444
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1452
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1476
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1487
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1494
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1506
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1521
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1526
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1530
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1541
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1549
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1560
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1570
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1580
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 110:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1589
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 111:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1600
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1606
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1614
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1632
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1637
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1658
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1674
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1689
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1699
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1709
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1714
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1719
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1728
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.typeReference(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1757
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1761
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1769
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1794
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1806
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1815
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1837
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = nil
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1851
		{
			sqlVAL.union.val = nil
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 159:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1901
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeAddValue{
					NewVal:      sqlDollar[6].str,
					IfNotExists: false,
					Placement:   sqlDollar[7].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1912
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeAddValue{
					NewVal:      sqlDollar[9].str,
					IfNotExists: true,
					Placement:   sqlDollar[10].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1923
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeRenameValue{
					OldVal: sqlDollar[6].str,
					NewVal: sqlDollar[8].str,
				},
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1933
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeRename{
					NewName: sqlDollar[6].union.unresolvedObjectName(),
				},
			}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeSetSchema{
					Schema: sqlDollar[6].str,
				},
			}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1951
		{
			return unimplementedWithIssueDetail(sqllex, 48700, "ALTER TYPE OWNER TO")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1955
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1959
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.AlterTypeAddValuePlacement{
				Before:      true,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1973
		{
			sqlVAL.union.val = &tree.AlterTypeAddValuePlacement{
				Before:      false,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = (*tree.AlterTypeAddValuePlacement)(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2022
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2026
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2029
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2056
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2063
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2067
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2073
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2120
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2129
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2135
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2140
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2145
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2150
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2155
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2159
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2175
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2178
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2186
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2208
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2214
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2226
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2250
		{
			sqlVAL.union.val = nil
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2256
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2272
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2283
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2291
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2329
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2332
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2342
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2359
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2361
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2376
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2380
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2393
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2399
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2404
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2418
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2419
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2420
		{
			return helpWith(sqllex, "CREATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2423
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2424
		{
			return unimplemented(sqllex, "create cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2425
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2426
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2427
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2428
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2429
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2430
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2431
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2432
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2433
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2434
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2435
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return unimplemented(sqllex, "create operator")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2437
		{
			return unimplemented(sqllex, "create publication")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2438
		{
			return unimplemented(sqllex, "create rule")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2439
		{
			return unimplemented(sqllex, "create server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2440
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2441
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2442
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2446
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2450
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2453
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2454
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2457
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2458
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2459
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2460
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2462
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2463
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2464
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2465
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2466
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2467
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2468
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2469
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2470
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2471
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2472
		{
			return unimplemented(sqllex, "drop server")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2473
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2474
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2475
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2480
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2482
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2485
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2506
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2514
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2524
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2533
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2546
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2552
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2556
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2567
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2579
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2595
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2605
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2609
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2619
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2626
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2630
		{

			sqlVAL.union.val = nil
		}
	case 339:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2644
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "DELETE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2657
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2658
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2673
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2682
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2683
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "DROP")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2707
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2715
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2719
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2722
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2730
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2734
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2737
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2754
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2762
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2792
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[3].union.unresolvedObjectNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[5].union.unresolvedObjectNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2807
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2812
		{
			sqlVAL.union.val = []*tree.UnresolvedObjectName{sqlDollar[1].union.unresolvedObjectName()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedObjectNames(), sqlDollar[3].union.unresolvedObjectName())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2838
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2843
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.Analyze{
				Table: sqlDollar[2].union.tblExpr(),
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2861
		{
			return helpWith(sqllex, "ANALYZE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			sqlVAL.union.val = &tree.Analyze{
				Table: sqlDollar[2].union.tblExpr(),
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2868
		{
			return helpWith(sqllex, "ANALYZE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2872
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2894
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2901
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2903
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2911
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2919
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2927
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2935
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2946
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2950
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2953
		{
			return helpWith(sqllex, "DELETE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "INSERT")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2958
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2960
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2962
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2971
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2972
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2977
		{
			return helpWith(sqllex, "DELETE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2978
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2979
		{
			return helpWith(sqllex, "INSERT")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2981
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2985
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2990
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3012
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3024
		{
			sqlVAL.union.val = sqlDollar[2].union.typeReferences()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3028
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3045
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3053
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3057
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3061
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3117
		{
			return helpWith(sqllex, "GRANT")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3137
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3153
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3157
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3185
		{
			return helpWith(sqllex, "RESET")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3186
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3194
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3201
		{
			return helpWith(sqllex, "RESET")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3223
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "USE")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3231
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3232
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3233
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "USE")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3255
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3270
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3273
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3291
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3307
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3313
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3323
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3335
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3339
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3350
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3363
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3405
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3410
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3413
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3436
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3443
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3448
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3453
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3458
		{
			return unimplemented(sqllex, "set from current")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3459
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3467
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3472
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3483
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3489
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3535
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3539
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3543
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = tree.Low
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3557
		{
			sqlVAL.union.val = tree.Normal
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3561
		{
			sqlVAL.union.val = tree.High
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3572
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3576
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3585
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3589
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3602
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3606
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3607
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3609
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3610
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3611
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3612
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3613
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3614
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3615
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3617
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3618
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3619
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3621
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3622
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3623
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3624
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3626
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3627
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3630
		{
			return helpWith(sqllex, "SHOW")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3635
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3636
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3639
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3643
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3648
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3653
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3658
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3669
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3670
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.str = "client_encoding"
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3684
		{
			sqlVAL.str = "timezone"
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3685
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3703
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3707
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3718
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3726
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3734
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3742
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3751
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3760
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3768
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3778
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3796
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3799
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3807
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3822
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3826
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3830
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3833
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3841
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3844
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3857
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3865
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3873
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3876
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3882
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3886
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3889
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3891
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3898
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3906
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3909
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3911
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3914
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3925
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3927
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3930
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3934
		{
			sqlVAL.union.val = true
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3936
		{
			sqlVAL.union.val = true
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3938
		{
			sqlVAL.union.val = false
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3948
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3952
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3955
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3956
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3958
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3962
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3965
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3967
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3975
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3983
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3992
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3995
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3997
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4000
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4002
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4006
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4009
		{
			sqlVAL.union.val = true
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4010
		{
			sqlVAL.union.val = false
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4018
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4021
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4026
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4034
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4044
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4054
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4057
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4060
		{
			sqlVAL.union.val = true
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4061
		{
			sqlVAL.union.val = false
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4068
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4072
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4075
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4082
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4086
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4089
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4096
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4100
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4107
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4110
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4118
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4123
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4128
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4132
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4140
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4144
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4148
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4161
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4164
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4175
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4183
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4187
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4195
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4203
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4210
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4232
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4240
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4246
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4255
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4267
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4271
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4278
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4283
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4411
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4454
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4472
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4483
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4495
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4507
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4515
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4521
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4527
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4566
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4581
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = nil
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4602
		{

			sqlVAL.union.val = nil
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4608
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4613
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4623
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4628
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4633
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4644
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4650
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 788:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4660
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4673
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4687
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4688
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4689
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4708
		{
			sqlVAL.union.val = true
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4709
		{
			sqlVAL.union.val = false
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4713
		{
			sqlVAL.union.val = true
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = true
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4715
		{
			sqlVAL.union.val = true
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = true
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4717
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4728
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4738
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4761
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4772
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4774
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4775
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4776
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4778
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4779
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4785
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4794
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4801
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4806
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4811
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4824
		{
			sqlVAL.str = ""
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4831
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4837
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4844
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4851
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4857
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4867
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4887
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4901
		{
			typ := sqlDollar[2].union.typeReference()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, tree.IsReferenceSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4926
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4930
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4946
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4964
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4972
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4976
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4980
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4995
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5009
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5013
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5020
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5021
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Predicate:   sqlDollar[10].union.expr(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5038
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
					Predicate:   sqlDollar[11].union.expr(),
				},
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:      tree.Name(sqlDollar[3].str),
				Columns:   sqlDollar[5].union.idxElems(),
				Inverted:  true,
				Predicate: sqlDollar[7].union.expr(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5063
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5075
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5080
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:5092
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
					Predicate:   sqlDollar[9].union.expr(),
				},
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5116
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5127
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5144
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5154
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5169
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5176
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5223
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5229
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5234
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5235
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5236
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5237
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5267
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5283
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5307
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5311
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5328
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5336
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5340
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5364
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5368
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5372
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5376
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5395
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5404
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5412
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5416
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5423
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.typeReference().SQLString())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5426
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5428
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5438
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5441
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5443
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5445
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5447
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5448
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5451
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5453
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5455
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5466
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5470
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5491
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5499
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5506
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.union.val = true
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5516
		{

			sqlVAL.union.val = true
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5521
		{
			sqlVAL.union.val = false
		}
	case 958:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5531
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5545
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5557
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5568
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5576
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5606
		{
			sqlVAL.union.val = nil
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5621
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5622
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5631
		{
			sqlVAL.union.val = &tree.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    tree.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5638
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5640
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5642
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5644
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5646
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5648
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5652
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5656
		{
			sqlVAL.union.val = []string(nil)
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5662
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5684
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Predicate:    sqlDollar[16].union.expr(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5701
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Predicate:    sqlDollar[19].union.expr(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5719
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Predicate:    sqlDollar[15].union.expr(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5735
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Predicate:    sqlDollar[18].union.expr(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5751
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5755
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = false
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = true
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = false
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = true
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = false
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5796
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5809
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5832
		{
			sqlVAL.str = ""
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5836
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5840
		{
			sqlVAL.union.val = tree.Descending
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5844
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5850
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5856
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5862
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5870
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5876
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5884
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5890
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5898
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5907
		{
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5908
		{
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5911
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5912
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5923
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5942
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5945
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5953
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5956
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5960
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5961
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5962
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5981
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5983
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5986
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5999
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6004
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6013
		{
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6014
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6015
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6029
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6032
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6035
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6036
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6040
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6044
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6050
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6054
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6060
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6064
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6077
		{
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6079
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6083
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6092
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6096
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6114
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6148
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.str = ""
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6162
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6166
		{
			sqlVAL.str = ""
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6176
		{
			sqlVAL.str = ""
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.str = ""
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6191
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6192
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6204
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6211
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6218
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6229
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6236
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6240
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6249
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6268
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6274
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6298
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6312
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6315
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6316
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6324
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6329
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6333
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6362
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6365
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6374
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6394
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6544
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6579
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6580
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6581
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6642
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6686
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6702
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6707
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6723
		{
			sqlVAL.union.val = true
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6727
		{
			sqlVAL.union.val = false
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Set: false,
				},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6743
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Materialize: sqlDollar[4].union.bool(),
					Set:         true,
				},
				Stmt: sqlDollar[6].union.stmt(),
			}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6755
		{
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6756
		{
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6760
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6764
		{
			sqlVAL.union.val = nil
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6769
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6770
		{
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = true
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = false
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = false
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = true
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6799
		{
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6800
		{
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = tree.OrderBy([]*tree.Order{sqlDollar[3].union.order()})
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqllex.Error("multiple ORDER BY clauses are not supported in this function")
			return 1
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6841
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6862
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6867
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6896
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6905
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6916
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6929
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6985
		{
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6989
		{
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7042
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7044
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7059
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7081
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7091
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7102
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7114
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7133
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7172
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7182
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7217
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7228
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7258
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7291
		{
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7293
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = nil
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7298
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = true
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = false
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.str = tree.AstFull
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.str = tree.AstRight
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.str = tree.AstInner
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7410
		{
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7411
		{
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.str = tree.AstHash
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.str = ""
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7467
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7473
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7496
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7502
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7508
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7518
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7547
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.typeReference()
			}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7560
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7568
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7569
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7579
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7587
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7589
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7597
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7610
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7617
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7626
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {

				var ok bool
				var err error
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						aIdx := sqllex.(*lexer).NewAnnotation()
						sqlVAL.union.val, err = tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
						if err != nil {
							return setErr(sqllex, err)
						}
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7666
		{
			id := sqlDollar[2].union.int32()
			sqlVAL.union.val = &tree.IDTypeReference{ID: uint32(id)}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7678
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7679
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7689
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = types.Geography
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), 0)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), 0)
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7729
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7737
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = nil
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = types.Int2
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = types.Int
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7768
		{
			sqlVAL.union.val = types.Float4
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = types.Float
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7780
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7788
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7796
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = types.Bool
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7810
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = types.Float
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7829
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7835
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7851
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7857
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7875
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = types.String
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = true
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = false
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = types.Date
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7906
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7914
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7928
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7937
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7945
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7962
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7972
		{
			sqlVAL.union.val = true
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = false
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = false
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = types.Interval
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7986
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8070
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8076
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8085
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = nil
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8115
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8175
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8188
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnarySqrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8192
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryCbrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8200
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8208
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8324
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8328
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = &tree.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = &tree.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = &tree.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = &tree.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8427
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8465
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8469
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8493
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8515
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8539
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8543
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8547
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8551
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8555
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8563
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8701
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8705
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8709
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8714
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8716
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8740
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8749
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8764
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8770
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8779
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8783
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8787
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8791
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8794
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8798
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy(), AggType: tree.GeneralAgg}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8805
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8806
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8808
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy(), AggType: tree.GeneralAgg}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8818
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8821
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8830
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {

					var typ tree.ResolvableTypeReference
					var ok bool
					var err error
					var unimp int
					typ, ok, unimp = types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							aIdx := sqllex.(*lexer).NewAnnotation()
							typ, err = name.ToUnresolvedObjectName(aIdx)
							if err != nil {
								return setErr(sqllex, err)
							}
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				aIdx := sqllex.(*lexer).NewAnnotation()
				res, err := name.ToUnresolvedObjectName(aIdx)
				if err != nil {
					return setErr(sqllex, err)
				}
				sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: res, SyntaxMode: tree.CastPrepend}
			}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8896
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			w := sqlDollar[2].union.expr().(*tree.FuncExpr)
			if w.AggType != 0 {
				f.AggType = w.AggType
				f.OrderBy = w.OrderBy
			}
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8908
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8917
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8918
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8931
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8945
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8949
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8975
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.CastExplicit}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8979
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8983
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8987
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8991
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8995
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8999
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9011
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9021
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9023
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9026
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9035
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9044
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9046
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9050
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9053
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9062
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9067
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9069
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9072
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9077
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9082
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9084
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9091
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9092
		{
			return unimplemented(sqllex, "treat")
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9110
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9113
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9115
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9118
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9124
		{
			sqlVAL.union.val = &tree.FuncExpr{OrderBy: sqlDollar[4].union.orderBy(), AggType: tree.OrderedSetAgg}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9128
		{
			sqlVAL.union.val = &tree.FuncExpr{}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9134
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9138
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9145
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9149
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9165
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9173
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9177
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9181
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9188
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9208
		{
			sqlVAL.str = ""
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9214
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9218
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9224
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9232
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9240
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9248
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9254
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9267
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9295
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9299
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9303
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9307
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9314
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9323
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9327
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9331
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9335
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9340
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9353
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9357
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9364
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9376
		{
			sqlVAL.union.val = tree.Any
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9380
		{
			sqlVAL.union.val = tree.Some
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9384
		{
			sqlVAL.union.val = tree.All
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9389
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9390
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9391
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9392
		{
			sqlVAL.union.val = tree.Div
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9393
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9394
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9395
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9396
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9397
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9398
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9399
		{
			sqlVAL.union.val = tree.LT
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9400
		{
			sqlVAL.union.val = tree.GT
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9401
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9402
		{
			sqlVAL.union.val = tree.LE
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9403
		{
			sqlVAL.union.val = tree.GE
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9404
		{
			sqlVAL.union.val = tree.NE
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9408
		{
			sqlVAL.union.val = tree.Like
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9409
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9410
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9411
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9434
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9438
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9444
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9448
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9452
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9463
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9467
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9473
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9477
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9484
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9494
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9500
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference{sqlDollar[1].union.typeReference()}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9504
		{
			sqlVAL.union.val = append(sqlDollar[1].union.typeReferences(), sqlDollar[3].union.typeReference())
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9510
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9514
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9520
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9530
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9534
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9557
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9561
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9565
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9571
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9578
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9582
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9599
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9603
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9607
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9611
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9615
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9621
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9627
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9633
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9637
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9641
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9647
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9659
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9666
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9676
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9682
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9686
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9693
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9699
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9703
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9710
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9716
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9725
		{
		}
	case 1750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9726
		{
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9730
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9740
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9749
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9753
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9757
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9765
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9775
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9798
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9806
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.ObjectName)
			name.ObjectName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9829
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9838
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9842
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9846
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9850
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9856
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9875
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9879
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9891
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9895
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9904
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9915
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9924
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9932
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9944
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10045
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10052
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10056
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1812:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10060
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1814:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10074
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10078
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10082
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10095
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10104
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10122
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10135
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10142
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10167
		{
			sqlVAL.str = ""
		}
	case 1834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10173
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10177
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
