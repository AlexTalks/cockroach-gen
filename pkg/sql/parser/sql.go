// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9441

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1025,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	179, 864,
	196, 864,
	211, 242,
	287, 242,
	295, 704,
	322, 242,
	331, 704,
	368, 704,
	391, 242,
	415, 704,
	-2, 0,
	-1, 75,
	211, 246,
	-2, 0,
	-1, 76,
	106, 1025,
	185, 1025,
	401, 1025,
	402, 1025,
	-2, 0,
	-1, 87,
	119, 999,
	134, 999,
	193, 999,
	222, 999,
	253, 999,
	263, 999,
	396, 999,
	-2, 986,
	-1, 116,
	124, 626,
	202, 618,
	210, 626,
	289, 612,
	340, 612,
	384, 626,
	-2, 0,
	-1, 117,
	4, 1027,
	21, 1027,
	22, 1027,
	23, 1027,
	24, 1027,
	25, 1027,
	27, 1027,
	32, 1027,
	37, 1027,
	38, 1027,
	39, 1027,
	40, 1027,
	41, 1027,
	42, 1027,
	43, 1027,
	44, 1027,
	45, 1027,
	46, 1027,
	47, 1027,
	49, 1027,
	50, 1027,
	51, 1027,
	52, 1027,
	53, 1027,
	54, 1027,
	57, 1027,
	58, 1027,
	59, 1027,
	60, 1027,
	62, 1027,
	63, 1027,
	67, 1027,
	68, 1027,
	69, 1027,
	70, 1027,
	71, 1027,
	73, 1027,
	74, 1027,
	75, 1027,
	76, 1027,
	78, 1027,
	80, 1027,
	81, 1027,
	82, 1027,
	85, 1027,
	86, 1027,
	94, 1027,
	95, 1027,
	96, 1027,
	97, 1027,
	98, 1027,
	99, 1027,
	100, 1027,
	101, 1027,
	103, 1027,
	105, 1027,
	106, 1027,
	108, 1027,
	111, 1027,
	112, 1027,
	113, 1027,
	115, 1027,
	117, 1027,
	118, 1027,
	120, 1027,
	121, 1027,
	122, 1027,
	123, 1027,
	124, 1027,
	125, 1027,
	126, 1027,
	127, 1027,
	128, 1027,
	129, 1027,
	130, 1027,
	131, 1027,
	133, 1027,
	139, 1027,
	140, 1027,
	141, 1027,
	142, 1027,
	143, 1027,
	144, 1027,
	146, 1027,
	148, 1027,
	152, 1027,
	153, 1027,
	155, 1027,
	156, 1027,
	158, 1027,
	159, 1027,
	161, 1027,
	162, 1027,
	163, 1027,
	164, 1027,
	165, 1027,
	166, 1027,
	167, 1027,
	168, 1027,
	170, 1027,
	171, 1027,
	173, 1027,
	174, 1027,
	175, 1027,
	179, 1027,
	180, 1027,
	181, 1027,
	182, 1027,
	185, 1027,
	186, 1027,
	187, 1027,
	188, 1027,
	189, 1027,
	190, 1027,
	191, 1027,
	192, 1027,
	194, 1027,
	196, 1027,
	198, 1027,
	200, 1027,
	201, 1027,
	202, 1027,
	204, 1027,
	205, 1027,
	208, 1027,
	209, 1027,
	210, 1027,
	211, 1027,
	213, 1027,
	214, 1027,
	216, 1027,
	217, 1027,
	219, 1027,
	220, 1027,
	223, 1027,
	224, 1027,
	227, 1027,
	228, 1027,
	230, 1027,
	231, 1027,
	232, 1027,
	233, 1027,
	234, 1027,
	235, 1027,
	236, 1027,
	237, 1027,
	238, 1027,
	239, 1027,
	241, 1027,
	242, 1027,
	243, 1027,
	244, 1027,
	246, 1027,
	249, 1027,
	250, 1027,
	251, 1027,
	252, 1027,
	254, 1027,
	255, 1027,
	256, 1027,
	258, 1027,
	259, 1027,
	260, 1027,
	261, 1027,
	264, 1027,
	265, 1027,
	267, 1027,
	269, 1027,
	270, 1027,
	271, 1027,
	272, 1027,
	273, 1027,
	274, 1027,
	275, 1027,
	276, 1027,
	277, 1027,
	279, 1027,
	280, 1027,
	281, 1027,
	282, 1027,
	283, 1027,
	284, 1027,
	286, 1027,
	288, 1027,
	289, 1027,
	290, 1027,
	291, 1027,
	292, 1027,
	293, 1027,
	294, 1027,
	295, 1027,
	296, 1027,
	298, 1027,
	299, 1027,
	300, 1027,
	301, 1027,
	302, 1027,
	304, 1027,
	305, 1027,
	306, 1027,
	307, 1027,
	308, 1027,
	309, 1027,
	310, 1027,
	311, 1027,
	313, 1027,
	315, 1027,
	316, 1027,
	317, 1027,
	318, 1027,
	319, 1027,
	320, 1027,
	322, 1027,
	323, 1027,
	324, 1027,
	325, 1027,
	326, 1027,
	327, 1027,
	328, 1027,
	329, 1027,
	331, 1027,
	332, 1027,
	333, 1027,
	334, 1027,
	335, 1027,
	336, 1027,
	337, 1027,
	338, 1027,
	339, 1027,
	340, 1027,
	342, 1027,
	343, 1027,
	344, 1027,
	345, 1027,
	347, 1027,
	348, 1027,
	349, 1027,
	350, 1027,
	352, 1027,
	353, 1027,
	354, 1027,
	355, 1027,
	356, 1027,
	357, 1027,
	358, 1027,
	359, 1027,
	360, 1027,
	361, 1027,
	362, 1027,
	363, 1027,
	365, 1027,
	366, 1027,
	367, 1027,
	369, 1027,
	370, 1027,
	371, 1027,
	372, 1027,
	373, 1027,
	374, 1027,
	375, 1027,
	377, 1027,
	378, 1027,
	379, 1027,
	380, 1027,
	382, 1027,
	384, 1027,
	385, 1027,
	386, 1027,
	387, 1027,
	388, 1027,
	390, 1027,
	391, 1027,
	392, 1027,
	394, 1027,
	395, 1027,
	398, 1027,
	399, 1027,
	400, 1027,
	401, 1027,
	402, 1027,
	403, 1027,
	405, 1027,
	407, 1027,
	408, 1027,
	409, 1027,
	410, 1027,
	411, 1027,
	412, 1027,
	413, 1027,
	415, 1027,
	416, 1027,
	417, 1027,
	422, 1027,
	423, 1027,
	424, 1027,
	425, 1027,
	426, 1027,
	427, 1027,
	-2, 0,
	-1, 118,
	1, 917,
	200, 917,
	286, 917,
	293, 917,
	430, 917,
	453, 917,
	-2, 0,
	-1, 120,
	1, 917,
	453, 917,
	-2, 0,
	-1, 121,
	1, 917,
	453, 917,
	-2, 0,
	-1, 122,
	1, 921,
	453, 921,
	-2, 0,
	-1, 146,
	119, 998,
	134, 998,
	193, 998,
	222, 998,
	253, 998,
	263, 998,
	396, 998,
	-2, 995,
	-1, 178,
	4, 1034,
	5, 1034,
	6, 1034,
	7, 1034,
	8, 1034,
	9, 1034,
	10, 1034,
	21, 1034,
	22, 1034,
	23, 1034,
	24, 1034,
	25, 1034,
	27, 1034,
	32, 1034,
	33, 1034,
	37, 1034,
	38, 1034,
	39, 1034,
	40, 1034,
	41, 1034,
	42, 1034,
	43, 1034,
	44, 1034,
	45, 1034,
	46, 1034,
	47, 1034,
	49, 1034,
	50, 1034,
	51, 1034,
	52, 1034,
	53, 1034,
	54, 1034,
	55, 1034,
	56, 1034,
	57, 1034,
	58, 1034,
	59, 1034,
	60, 1034,
	62, 1034,
	63, 1034,
	65, 1034,
	67, 1034,
	68, 1034,
	69, 1034,
	70, 1034,
	71, 1034,
	73, 1034,
	74, 1034,
	75, 1034,
	76, 1034,
	78, 1034,
	80, 1034,
	81, 1034,
	82, 1034,
	84, 1034,
	85, 1034,
	86, 1034,
	87, 1034,
	88, 1034,
	89, 1034,
	90, 1034,
	91, 1034,
	92, 1034,
	93, 1034,
	94, 1034,
	95, 1034,
	96, 1034,
	97, 1034,
	98, 1034,
	99, 1034,
	100, 1034,
	101, 1034,
	102, 1034,
	103, 1034,
	105, 1034,
	106, 1034,
	108, 1034,
	111, 1034,
	112, 1034,
	113, 1034,
	115, 1034,
	117, 1034,
	118, 1034,
	120, 1034,
	121, 1034,
	122, 1034,
	123, 1034,
	124, 1034,
	125, 1034,
	126, 1034,
	127, 1034,
	128, 1034,
	129, 1034,
	130, 1034,
	131, 1034,
	132, 1034,
	133, 1034,
	139, 1034,
	140, 1034,
	141, 1034,
	142, 1034,
	143, 1034,
	144, 1034,
	146, 1034,
	148, 1034,
	151, 1034,
	152, 1034,
	153, 1034,
	155, 1034,
	156, 1034,
	158, 1034,
	159, 1034,
	161, 1034,
	162, 1034,
	163, 1034,
	164, 1034,
	165, 1034,
	166, 1034,
	167, 1034,
	168, 1034,
	169, 1034,
	170, 1034,
	171, 1034,
	173, 1034,
	174, 1034,
	175, 1034,
	179, 1034,
	180, 1034,
	181, 1034,
	182, 1034,
	184, 1034,
	185, 1034,
	186, 1034,
	187, 1034,
	188, 1034,
	189, 1034,
	190, 1034,
	191, 1034,
	192, 1034,
	194, 1034,
	196, 1034,
	197, 1034,
	198, 1034,
	199, 1034,
	200, 1034,
	201, 1034,
	202, 1034,
	203, 1034,
	204, 1034,
	205, 1034,
	208, 1034,
	209, 1034,
	210, 1034,
	211, 1034,
	213, 1034,
	214, 1034,
	216, 1034,
	217, 1034,
	218, 1034,
	219, 1034,
	220, 1034,
	221, 1034,
	223, 1034,
	224, 1034,
	227, 1034,
	228, 1034,
	230, 1034,
	231, 1034,
	232, 1034,
	233, 1034,
	234, 1034,
	235, 1034,
	236, 1034,
	237, 1034,
	238, 1034,
	239, 1034,
	240, 1034,
	241, 1034,
	242, 1034,
	243, 1034,
	244, 1034,
	245, 1034,
	246, 1034,
	247, 1034,
	248, 1034,
	249, 1034,
	250, 1034,
	251, 1034,
	252, 1034,
	254, 1034,
	255, 1034,
	256, 1034,
	259, 1034,
	260, 1034,
	261, 1034,
	264, 1034,
	265, 1034,
	266, 1034,
	267, 1034,
	268, 1034,
	269, 1034,
	270, 1034,
	271, 1034,
	272, 1034,
	273, 1034,
	274, 1034,
	275, 1034,
	276, 1034,
	277, 1034,
	279, 1034,
	280, 1034,
	281, 1034,
	282, 1034,
	283, 1034,
	284, 1034,
	286, 1034,
	288, 1034,
	289, 1034,
	290, 1034,
	291, 1034,
	292, 1034,
	293, 1034,
	294, 1034,
	295, 1034,
	296, 1034,
	298, 1034,
	299, 1034,
	300, 1034,
	301, 1034,
	302, 1034,
	304, 1034,
	305, 1034,
	306, 1034,
	307, 1034,
	308, 1034,
	309, 1034,
	310, 1034,
	311, 1034,
	313, 1034,
	314, 1034,
	315, 1034,
	316, 1034,
	317, 1034,
	318, 1034,
	319, 1034,
	320, 1034,
	322, 1034,
	323, 1034,
	324, 1034,
	325, 1034,
	326, 1034,
	327, 1034,
	328, 1034,
	329, 1034,
	331, 1034,
	332, 1034,
	333, 1034,
	334, 1034,
	335, 1034,
	336, 1034,
	337, 1034,
	338, 1034,
	339, 1034,
	340, 1034,
	341, 1034,
	342, 1034,
	343, 1034,
	344, 1034,
	345, 1034,
	346, 1034,
	347, 1034,
	348, 1034,
	349, 1034,
	350, 1034,
	352, 1034,
	353, 1034,
	354, 1034,
	355, 1034,
	356, 1034,
	357, 1034,
	358, 1034,
	359, 1034,
	360, 1034,
	361, 1034,
	362, 1034,
	363, 1034,
	365, 1034,
	366, 1034,
	367, 1034,
	369, 1034,
	370, 1034,
	371, 1034,
	372, 1034,
	373, 1034,
	374, 1034,
	375, 1034,
	377, 1034,
	378, 1034,
	379, 1034,
	380, 1034,
	382, 1034,
	384, 1034,
	385, 1034,
	386, 1034,
	387, 1034,
	388, 1034,
	389, 1034,
	390, 1034,
	391, 1034,
	392, 1034,
	394, 1034,
	395, 1034,
	397, 1034,
	398, 1034,
	399, 1034,
	400, 1034,
	401, 1034,
	402, 1034,
	403, 1034,
	404, 1034,
	405, 1034,
	407, 1034,
	408, 1034,
	409, 1034,
	410, 1034,
	411, 1034,
	412, 1034,
	413, 1034,
	415, 1034,
	416, 1034,
	417, 1034,
	422, 1034,
	423, 1034,
	424, 1034,
	425, 1034,
	426, 1034,
	427, 1034,
	428, 1034,
	436, 1034,
	441, 1034,
	442, 1034,
	443, 1034,
	450, 1034,
	455, 1034,
	-2, 0,
	-1, 546,
	150, 1701,
	381, 1701,
	433, 1701,
	452, 1701,
	-2, 0,
	-1, 547,
	150, 1778,
	381, 1778,
	433, 1778,
	452, 1778,
	-2, 0,
	-1, 548,
	150, 1691,
	381, 1691,
	433, 1691,
	452, 1691,
	-2, 0,
	-1, 550,
	150, 1865,
	381, 1865,
	433, 1865,
	452, 1865,
	-2, 0,
	-1, 552,
	150, 1892,
	381, 1892,
	433, 1892,
	452, 1892,
	-2, 0,
	-1, 559,
	150, 1788,
	381, 1788,
	433, 1788,
	452, 1788,
	-2, 491,
	-1, 576,
	452, 1650,
	454, 1650,
	-2, 673,
	-1, 577,
	452, 1652,
	454, 1652,
	-2, 674,
	-1, 578,
	452, 1651,
	454, 1651,
	-2, 675,
	-1, 579,
	454, 1597,
	-2, 676,
	-1, 723,
	289, 613,
	340, 613,
	-2, 0,
	-1, 724,
	289, 612,
	340, 612,
	-2, 569,
	-1, 726,
	1, 636,
	449, 636,
	451, 636,
	453, 636,
	-2, 0,
	-1, 727,
	1, 672,
	147, 672,
	449, 672,
	451, 672,
	453, 672,
	-2, 0,
	-1, 736,
	1, 636,
	449, 636,
	451, 636,
	453, 636,
	-2, 0,
	-1, 737,
	1, 638,
	449, 638,
	451, 638,
	453, 638,
	-2, 0,
	-1, 738,
	1, 641,
	449, 641,
	451, 641,
	453, 641,
	-2, 0,
	-1, 742,
	1, 655,
	449, 655,
	451, 655,
	453, 655,
	-2, 0,
	-1, 743,
	1, 657,
	449, 657,
	451, 657,
	453, 657,
	-2, 0,
	-1, 786,
	134, 1036,
	222, 1036,
	253, 1036,
	-2, 995,
	-1, 801,
	134, 1035,
	222, 1035,
	253, 1035,
	-2, 995,
	-1, 825,
	452, 1649,
	-2, 499,
	-1, 854,
	450, 1641,
	-2, 1632,
	-1, 860,
	5, 1171,
	-2, 1682,
	-1, 861,
	5, 1172,
	-2, 1686,
	-1, 862,
	5, 1173,
	-2, 1685,
	-1, 863,
	5, 1174,
	-2, 1890,
	-1, 864,
	5, 1175,
	-2, 1790,
	-1, 865,
	5, 1176,
	-2, 1857,
	-1, 866,
	5, 1177,
	-2, 1859,
	-1, 867,
	5, 1178,
	-2, 1870,
	-1, 868,
	5, 1179,
	-2, 1860,
	-1, 869,
	5, 1180,
	-2, 1861,
	-1, 870,
	5, 1181,
	-2, 1681,
	-1, 871,
	5, 1182,
	-2, 1905,
	-1, 872,
	5, 1183,
	-2, 1753,
	-1, 873,
	5, 1184,
	-2, 1798,
	-1, 874,
	5, 1185,
	-2, 1800,
	-1, 875,
	5, 1186,
	-2, 1757,
	-1, 876,
	5, 1187,
	450, 1659,
	-2, 1650,
	-1, 877,
	5, 1243,
	450, 1243,
	-2, 1940,
	-1, 882,
	450, 1660,
	-2, 1651,
	-1, 884,
	5, 1191,
	-2, 1938,
	-1, 885,
	5, 1192,
	-2, 1939,
	-1, 886,
	5, 1193,
	-2, 1756,
	-1, 887,
	5, 1194,
	-2, 1951,
	-1, 888,
	5, 1195,
	-2, 1758,
	-1, 889,
	5, 1196,
	-2, 1759,
	-1, 890,
	5, 1197,
	-2, 1760,
	-1, 891,
	5, 1198,
	-2, 1920,
	-1, 892,
	5, 1199,
	-2, 1949,
	-1, 893,
	5, 1200,
	-2, 1736,
	-1, 894,
	5, 1201,
	-2, 1737,
	-1, 895,
	5, 1215,
	-2, 1932,
	-1, 897,
	5, 1190,
	-2, 1928,
	-1, 898,
	5, 1190,
	-2, 1927,
	-1, 899,
	5, 1190,
	-2, 1944,
	-1, 900,
	5, 1207,
	-2, 1922,
	-1, 901,
	5, 1208,
	-2, 1683,
	-1, 902,
	5, 1218,
	-2, 1921,
	-1, 903,
	5, 1220,
	-2, 1960,
	-1, 905,
	5, 1231,
	-2, 1711,
	-1, 906,
	5, 1242,
	-2, 1953,
	-1, 907,
	5, 1234,
	-2, 1954,
	-1, 908,
	5, 1242,
	-2, 1955,
	-1, 909,
	5, 1238,
	-2, 1956,
	-1, 910,
	5, 1158,
	-2, 1766,
	-1, 911,
	5, 1159,
	-2, 1767,
	-1, 912,
	452, 1647,
	-2, 1631,
	-1, 913,
	450, 1980,
	-2, 1648,
	-1, 933,
	5, 1226,
	-2, 1880,
	-1, 950,
	5, 1225,
	-2, 1961,
	-1, 960,
	5, 1227,
	416, 1227,
	-2, 1923,
	-1, 961,
	5, 1228,
	416, 1228,
	-2, 1924,
	-1, 997,
	450, 1659,
	-2, 1650,
	-1, 1026,
	150, 1892,
	381, 1892,
	433, 1892,
	452, 1892,
	-2, 0,
	-1, 1027,
	1, 479,
	453, 479,
	-2, 929,
	-1, 1147,
	304, 1628,
	443, 1628,
	-2, 1627,
	-1, 1170,
	455, 1628,
	-2, 1629,
	-1, 1205,
	295, 704,
	415, 704,
	-2, 241,
	-1, 1225,
	275, 1023,
	-2, 837,
	-1, 1234,
	257, 1654,
	-2, 0,
	-1, 1298,
	1, 356,
	449, 356,
	451, 356,
	453, 356,
	-2, 997,
	-1, 1301,
	4, 1959,
	11, 1959,
	12, 1959,
	14, 1959,
	15, 1959,
	16, 1959,
	17, 1959,
	18, 1959,
	19, 1959,
	21, 1959,
	22, 1959,
	23, 1959,
	24, 1959,
	25, 1959,
	27, 1959,
	30, 1959,
	32, 1959,
	34, 1959,
	37, 1959,
	38, 1959,
	39, 1959,
	40, 1959,
	41, 1959,
	42, 1959,
	43, 1959,
	44, 1959,
	45, 1959,
	46, 1959,
	47, 1959,
	49, 1959,
	50, 1959,
	51, 1959,
	52, 1959,
	53, 1959,
	54, 1959,
	57, 1959,
	58, 1959,
	59, 1959,
	60, 1959,
	62, 1959,
	63, 1959,
	64, 1959,
	67, 1959,
	68, 1959,
	69, 1959,
	70, 1959,
	71, 1959,
	72, 1959,
	73, 1959,
	74, 1959,
	75, 1959,
	76, 1959,
	78, 1959,
	79, 1959,
	80, 1959,
	81, 1959,
	82, 1959,
	84, 1959,
	85, 1959,
	86, 1959,
	94, 1959,
	95, 1959,
	96, 1959,
	97, 1959,
	98, 1959,
	99, 1959,
	100, 1959,
	101, 1959,
	103, 1959,
	105, 1959,
	106, 1959,
	108, 1959,
	111, 1959,
	112, 1959,
	113, 1959,
	115, 1959,
	117, 1959,
	118, 1959,
	120, 1959,
	121, 1959,
	122, 1959,
	123, 1959,
	124, 1959,
	125, 1959,
	126, 1959,
	127, 1959,
	128, 1959,
	129, 1959,
	130, 1959,
	131, 1959,
	135, 1959,
	136, 1959,
	137, 1959,
	138, 1959,
	139, 1959,
	140, 1959,
	141, 1959,
	142, 1959,
	143, 1959,
	144, 1959,
	145, 1959,
	146, 1959,
	148, 1959,
	151, 1959,
	152, 1959,
	153, 1959,
	155, 1959,
	156, 1959,
	158, 1959,
	159, 1959,
	161, 1959,
	162, 1959,
	163, 1959,
	164, 1959,
	165, 1959,
	166, 1959,
	167, 1959,
	168, 1959,
	169, 1959,
	170, 1959,
	171, 1959,
	172, 1959,
	173, 1959,
	174, 1959,
	175, 1959,
	176, 1959,
	177, 1959,
	178, 1959,
	180, 1959,
	181, 1959,
	182, 1959,
	184, 1959,
	185, 1959,
	186, 1959,
	187, 1959,
	188, 1959,
	189, 1959,
	190, 1959,
	191, 1959,
	192, 1959,
	194, 1959,
	196, 1959,
	197, 1959,
	198, 1959,
	199, 1959,
	200, 1959,
	201, 1959,
	202, 1959,
	203, 1959,
	204, 1959,
	205, 1959,
	206, 1959,
	207, 1959,
	208, 1959,
	209, 1959,
	210, 1959,
	211, 1959,
	213, 1959,
	214, 1959,
	216, 1959,
	217, 1959,
	218, 1959,
	219, 1959,
	220, 1959,
	221, 1959,
	223, 1959,
	224, 1959,
	227, 1959,
	228, 1959,
	229, 1959,
	230, 1959,
	231, 1959,
	232, 1959,
	233, 1959,
	234, 1959,
	235, 1959,
	236, 1959,
	237, 1959,
	238, 1959,
	239, 1959,
	240, 1959,
	241, 1959,
	242, 1959,
	243, 1959,
	244, 1959,
	247, 1959,
	249, 1959,
	250, 1959,
	251, 1959,
	252, 1959,
	254, 1959,
	255, 1959,
	256, 1959,
	259, 1959,
	260, 1959,
	261, 1959,
	262, 1959,
	264, 1959,
	265, 1959,
	267, 1959,
	269, 1959,
	270, 1959,
	271, 1959,
	272, 1959,
	273, 1959,
	274, 1959,
	275, 1959,
	276, 1959,
	277, 1959,
	279, 1959,
	280, 1959,
	281, 1959,
	282, 1959,
	283, 1959,
	284, 1959,
	286, 1959,
	288, 1959,
	289, 1959,
	290, 1959,
	291, 1959,
	292, 1959,
	293, 1959,
	294, 1959,
	295, 1959,
	296, 1959,
	298, 1959,
	299, 1959,
	300, 1959,
	301, 1959,
	302, 1959,
	303, 1959,
	304, 1959,
	305, 1959,
	306, 1959,
	307, 1959,
	308, 1959,
	309, 1959,
	310, 1959,
	311, 1959,
	313, 1959,
	314, 1959,
	315, 1959,
	316, 1959,
	317, 1959,
	318, 1959,
	319, 1959,
	320, 1959,
	321, 1959,
	322, 1959,
	323, 1959,
	324, 1959,
	325, 1959,
	326, 1959,
	327, 1959,
	328, 1959,
	329, 1959,
	331, 1959,
	332, 1959,
	333, 1959,
	334, 1959,
	335, 1959,
	336, 1959,
	337, 1959,
	338, 1959,
	339, 1959,
	340, 1959,
	342, 1959,
	343, 1959,
	344, 1959,
	345, 1959,
	346, 1959,
	347, 1959,
	348, 1959,
	349, 1959,
	350, 1959,
	352, 1959,
	353, 1959,
	354, 1959,
	355, 1959,
	356, 1959,
	357, 1959,
	358, 1959,
	359, 1959,
	360, 1959,
	361, 1959,
	362, 1959,
	363, 1959,
	365, 1959,
	366, 1959,
	367, 1959,
	369, 1959,
	370, 1959,
	371, 1959,
	372, 1959,
	373, 1959,
	374, 1959,
	375, 1959,
	377, 1959,
	378, 1959,
	379, 1959,
	380, 1959,
	382, 1959,
	384, 1959,
	385, 1959,
	386, 1959,
	387, 1959,
	388, 1959,
	390, 1959,
	391, 1959,
	392, 1959,
	394, 1959,
	395, 1959,
	398, 1959,
	399, 1959,
	400, 1959,
	401, 1959,
	402, 1959,
	403, 1959,
	405, 1959,
	407, 1959,
	408, 1959,
	409, 1959,
	410, 1959,
	411, 1959,
	412, 1959,
	413, 1959,
	415, 1959,
	416, 1959,
	417, 1959,
	422, 1959,
	423, 1959,
	424, 1959,
	425, 1959,
	426, 1959,
	427, 1959,
	428, 1959,
	429, 1959,
	431, 1959,
	432, 1959,
	433, 1959,
	434, 1959,
	435, 1959,
	436, 1959,
	438, 1959,
	439, 1959,
	440, 1959,
	441, 1959,
	442, 1959,
	443, 1959,
	444, 1959,
	445, 1959,
	446, 1959,
	448, 1959,
	451, 1959,
	452, 1959,
	454, 1959,
	455, 1959,
	-2, 0,
	-1, 1304,
	150, 1865,
	381, 1865,
	433, 1865,
	452, 1865,
	-2, 0,
	-1, 1331,
	289, 613,
	340, 613,
	-2, 0,
	-1, 1352,
	1, 608,
	449, 608,
	451, 608,
	453, 608,
	-2, 0,
	-1, 1353,
	1, 627,
	449, 627,
	451, 627,
	453, 627,
	-2, 0,
	-1, 1354,
	1, 615,
	449, 615,
	451, 615,
	453, 615,
	-2, 0,
	-1, 1375,
	1, 1912,
	449, 1912,
	451, 1912,
	452, 1912,
	453, 1912,
	-2, 653,
	-1, 1376,
	1, 1863,
	449, 1863,
	451, 1863,
	452, 1863,
	453, 1863,
	-2, 654,
	-1, 1389,
	1, 924,
	453, 924,
	-2, 929,
	-1, 1394,
	134, 1035,
	222, 1035,
	253, 1035,
	-2, 995,
	-1, 1487,
	119, 999,
	134, 999,
	193, 999,
	222, 999,
	253, 999,
	263, 999,
	396, 999,
	-2, 1399,
	-1, 1540,
	451, 1532,
	-2, 0,
	-1, 1582,
	119, 999,
	134, 999,
	193, 999,
	222, 999,
	253, 999,
	263, 999,
	396, 999,
	-2, 1108,
	-1, 1637,
	450, 1230,
	-2, 1218,
	-1, 1676,
	1, 481,
	453, 481,
	-2, 929,
	-1, 1865,
	1, 610,
	449, 610,
	451, 610,
	453, 610,
	-2, 0,
	-1, 1866,
	1, 629,
	449, 629,
	451, 629,
	453, 629,
	-2, 0,
	-1, 1942,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1279,
	-1, 1943,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1280,
	-1, 1944,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1281,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1282,
	-1, 1946,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1283,
	-1, 1947,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1284,
	-1, 1948,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1285,
	-1, 1949,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1286,
	-1, 1961,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1298,
	-1, 1962,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1299,
	-1, 1963,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1300,
	-1, 1966,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1305,
	-1, 1972,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1309,
	-1, 1974,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1317,
	-1, 1975,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1318,
	-1, 1976,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1319,
	-1, 1977,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1320,
	-1, 2071,
	5, 1187,
	150, 1543,
	450, 1659,
	-2, 1650,
	-1, 2072,
	150, 1544,
	-2, 1916,
	-1, 2073,
	150, 1545,
	-2, 1787,
	-1, 2074,
	150, 1546,
	-2, 1712,
	-1, 2075,
	150, 1547,
	-2, 1747,
	-1, 2076,
	150, 1548,
	-2, 1785,
	-1, 2077,
	150, 1549,
	-2, 1856,
	-1, 2153,
	1, 1109,
	84, 1109,
	119, 1109,
	134, 1109,
	147, 1109,
	151, 1109,
	157, 1109,
	160, 1109,
	184, 1109,
	193, 1109,
	203, 1109,
	218, 1109,
	222, 1109,
	240, 1109,
	253, 1109,
	257, 1109,
	263, 1109,
	312, 1109,
	314, 1109,
	396, 1109,
	406, 1109,
	419, 1109,
	420, 1109,
	421, 1109,
	430, 1109,
	449, 1109,
	451, 1109,
	453, 1109,
	454, 1109,
	-2, 1108,
	-1, 2158,
	450, 1633,
	-2, 1645,
	-1, 2180,
	450, 1229,
	-2, 1219,
	-1, 2408,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1307,
	-1, 2409,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1311,
	-1, 2415,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1313,
	-1, 2596,
	200, 929,
	286, 929,
	293, 929,
	430, 929,
	-2, 478,
	-1, 2686,
	275, 1023,
	-2, 837,
	-1, 2764,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1315,
	-1, 2771,
	197, 0,
	199, 0,
	247, 0,
	-2, 1334,
	-1, 2834,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1363,
	-1, 2835,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1364,
	-1, 2836,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1365,
	-1, 2840,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1369,
	-1, 2841,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1370,
	-1, 2842,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1371,
	-1, 2885,
	450, 1634,
	-2, 1646,
	-1, 2973,
	452, 2062,
	-2, 972,
	-1, 3018,
	197, 0,
	199, 0,
	247, 0,
	-2, 1335,
	-1, 3021,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1338,
	-1, 3022,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1340,
	-1, 3177,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1339,
	-1, 3178,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1341,
	-1, 3188,
	197, 0,
	-2, 1372,
	-1, 3291,
	197, 0,
	-2, 1373,
	-1, 3407,
	41, 0,
	169, 0,
	221, 0,
	346, 0,
	428, 0,
	436, 0,
	-2, 1919,
}

const sqlPrivate = 57344

const sqlLast = 72009

var sqlAct = [...]int{

	882, 3493, 3121, 3218, 3406, 3221, 3416, 2310, 3243, 3483,
	3385, 3373, 3376, 2102, 1176, 3360, 3417, 2319, 3207, 3418,
	2802, 2673, 3295, 998, 3250, 2311, 3145, 3405, 811, 2906,
	2209, 3168, 1151, 1929, 2702, 3004, 2964, 1033, 3255, 210,
	2959, 210, 210, 3080, 1290, 210, 210, 210, 210, 210,
	1402, 839, 210, 2613, 1989, 1607, 2669, 2969, 2145, 2946,
	578, 2697, 2351, 1052, 2695, 2907, 2307, 3192, 1286, 2284,
	2287, 2353, 1577, 802, 2141, 2282, 2401, 2571, 210, 2557,
	990, 3052, 578, 1575, 2544, 2517, 3003, 1336, 1585, 2361,
	1823, 2342, 674, 2344, 1805, 2350, 2533, 1844, 2320, 4,
	1795, 32, 2211, 557, 1794, 1721, 1485, 1549, 2857, 2268,
	2040, 1802, 2146, 1730, 1144, 1513, 1926, 1293, 2516, 3296,
	2436, 810, 139, 2002, 1495, 1163, 1922, 2397, 2360, 1748,
	1708, 2148, 1706, 1160, 1755, 878, 1389, 1040, 2120, 2285,
	1550, 3244, 2032, 2576, 2671, 1986, 1273, 2244, 1283, 1153,
	2313, 1791, 2020, 1299, 1219, 2201, 579, 1029, 799, 2354,
	2014, 86, 202, 985, 1508, 1608, 204, 203, 525, 2128,
	2099, 580, 509, 210, 210, 1559, 669, 533, 964, 2003,
	1476, 2110, 1403, 2067, 2243, 574, 146, 1401, 982, 1790,
	1811, 1249, 541, 551, 619, 147, 1297, 650, 139, 1173,
	904, 838, 1720, 528, 987, 37, 2144, 962, 1388, 36,
	34, 26, 24, 22, 2432, 536, 733, 1231, 2874, 718,
	1825, 2875, 1407, 2312, 1415, 1416, 583, 586, 1845, 1576,
	1458, 1459, 1460, 3521, 1825, 1825, 2119, 1037, 2017, 3512,
	3511, 3492, 2119, 2119, 1762, 2712, 2759, 1758, 583, 586,
	1418, 2594, 3479, 3477, 1464, 3094, 3094, 3440, 2711, 806,
	3441, 1837, 2263, 806, 2230, 2119, 2316, 684, 801, 979,
	3438, 1415, 1416, 2119, 3356, 3436, 3433, 1417, 2119, 3434,
	3430, 3427, 2112, 3431, 1762, 1437, 1415, 1416, 3403, 3402,
	3401, 1762, 1762, 1837, 1016, 837, 3398, 1418, 3397, 1837,
	3279, 1837, 1837, 2018, 965, 965, 3355, 178, 3345, 2173,
	807, 3094, 1418, 3344, 3338, 3332, 3094, 1762, 3094, 3330,
	3293, 2860, 3094, 2173, 1417, 3276, 787, 3273, 1762, 3235,
	3094, 3234, 1762, 3227, 1762, 786, 1762, 3226, 3198, 1417,
	3094, 1762, 2111, 3179, 1011, 180, 2173, 1437, 1440, 1441,
	1442, 1443, 3166, 3157, 3118, 1837, 2724, 2119, 1423, 3111,
	3093, 3020, 2119, 3094, 2173, 794, 2981, 2975, 2944, 2740,
	2740, 2945, 2489, 2490, 2019, 2016, 178, 2880, 178, 1037,
	2881, 966, 1455, 2870, 2863, 1465, 2871, 2119, 179, 1445,
	1446, 1447, 2795, 3014, 2783, 1762, 2739, 2119, 172, 2740,
	3112, 2731, 2451, 2860, 2732, 1423, 173, 2452, 968, 969,
	1440, 1441, 1442, 1443, 180, 2530, 180, 1012, 2119, 2528,
	1423, 2527, 2119, 2481, 2119, 2464, 2119, 148, 2465, 2453,
	2340, 3423, 2119, 1841, 1453, 1762, 1445, 1446, 1447, 2169,
	2186, 2172, 1438, 2119, 2173, 2166, 2160, 2732, 2119, 1762,
	2119, 1445, 1446, 1447, 2435, 2118, 1194, 179, 2119, 179,
	2489, 2490, 2258, 2507, 2508, 2509, 2200, 172, 2021, 172,
	1840, 1679, 1762, 1841, 2724, 173, 1826, 173, 2294, 3016,
	2400, 1761, 2198, 1545, 1172, 2139, 2713, 1188, 1338, 1438,
	1826, 1826, 2138, 2137, 178, 1699, 148, 2136, 148, 3069,
	1182, 3031, 854, 2135, 1438, 2714, 2495, 809, 970, 967,
	1486, 670, 793, 792, 210, 791, 1444, 790, 178, 2382,
	2878, 2504, 789, 210, 785, 784, 783, 782, 781, 780,
	779, 778, 180, 777, 1439, 776, 58, 775, 672, 774,
	716, 715, 714, 713, 210, 2489, 2490, 712, 59, 2711,
	711, 210, 710, 2489, 2490, 1012, 180, 709, 708, 1456,
	707, 706, 63, 705, 704, 2015, 703, 210, 1055, 210,
	210, 1156, 210, 1055, 210, 179, 702, 701, 1444, 700,
	699, 1439, 210, 210, 1039, 172, 2111, 698, 1044, 2178,
	2505, 697, 69, 173, 2495, 696, 1439, 2741, 1012, 179,
	695, 694, 693, 692, 691, 683, 2504, 210, 682, 641,
	640, 2489, 2490, 599, 2315, 1009, 598, 1415, 1416, 1193,
	1833, 210, 75, 1156, 1156, 210, 210, 597, 210, 76,
	589, 85, 588, 2058, 1824, 1902, 76, 587, 148, 564,
	210, 1454, 1166, 1418, 2489, 2490, 2510, 563, 210, 1457,
	1187, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425,
	562, 561, 210, 210, 210, 210, 210, 1156, 1156, 545,
	1417, 200, 1156, 199, 210, 1156, 210, 210, 2505, 2495,
	77, 198, 2506, 996, 197, 2489, 2490, 2495, 1149, 1027,
	196, 195, 194, 193, 1181, 192, 1186, 191, 1192, 1426,
	1427, 1419, 1420, 1421, 1422, 1424, 1425, 190, 189, 188,
	187, 186, 1294, 1428, 1426, 1427, 1419, 1420, 1421, 1422,
	1424, 1425, 185, 1156, 184, 2489, 2490, 183, 2507, 2508,
	2509, 182, 1147, 181, 2489, 2490, 1170, 2574, 1175, 2458,
	1225, 1228, 210, 2447, 1024, 2495, 2272, 2161, 583, 586,
	2152, 1423, 1704, 1174, 1486, 1048, 210, 1141, 1146, 2300,
	2056, 1236, 2054, 2505, 2052, 2050, 1592, 1847, 1578, 1516,
	2506, 210, 1302, 1502, 1053, 1515, 1178, 1046, 2495, 1164,
	1000, 3404, 1310, 3326, 178, 78, 2504, 1232, 1232, 1313,
	1414, 3286, 1306, 1497, 139, 3217, 1519, 3282, 3280, 1287,
	2498, 2499, 2491, 2492, 2493, 2494, 2496, 2497, 3158, 1277,
	1280, 3073, 3153, 3051, 3050, 178, 3038, 145, 81, 2495,
	82, 1300, 180, 3037, 1359, 1516, 3036, 1170, 178, 2505,
	3035, 1515, 178, 807, 1846, 178, 3029, 3028, 3027, 178,
	1325, 2943, 2895, 1233, 2894, 2892, 2884, 116, 1415, 1416,
	2854, 673, 1514, 180, 116, 2506, 2853, 2852, 2779, 2495,
	1395, 2775, 2505, 2569, 2524, 179, 180, 2735, 2495, 2515,
	180, 2488, 2485, 180, 1418, 172, 2484, 180, 2482, 2471,
	2501, 2502, 2503, 173, 2470, 2469, 2511, 2500, 2498, 2499,
	2491, 2492, 2493, 2494, 2496, 2497, 179, 2466, 2463, 117,
	978, 1417, 2441, 2505, 148, 1497, 172, 1394, 2440, 179,
	2433, 2510, 149, 179, 173, 2341, 179, 2153, 2025, 172,
	179, 2506, 1498, 172, 1496, 1799, 172, 173, 1700, 2245,
	172, 173, 1414, 2301, 173, 148, 3519, 2396, 173, 1318,
	1767, 1332, 1484, 2505, 1387, 1393, 1765, 1413, 148, 3491,
	3490, 3439, 148, 999, 2506, 148, 2804, 3393, 3391, 671,
	1400, 3323, 3320, 1392, 210, 3317, 3316, 3315, 3311, 3305,
	1390, 3277, 2500, 2498, 2499, 2491, 2492, 2493, 2494, 2496,
	2497, 3272, 1423, 2491, 2492, 2493, 2494, 2496, 2497, 1547,
	210, 1556, 2175, 3271, 1992, 2506, 3213, 787, 3190, 3163,
	210, 1055, 210, 210, 210, 3152, 786, 3162, 807, 3143,
	1156, 578, 210, 210, 1594, 1396, 578, 210, 3140, 3134,
	1601, 3068, 210, 3049, 1518, 2995, 1604, 1410, 1411, 2992,
	2922, 1671, 2921, 2910, 2909, 2506, 1998, 1674, 2500, 2498,
	2499, 2491, 2492, 2493, 2494, 2496, 2497, 1055, 2866, 1421,
	1422, 1424, 1425, 2770, 2742, 2725, 2588, 2689, 2659, 2638,
	1586, 2616, 2615, 1510, 1511, 2590, 1614, 2529, 2462, 1702,
	2461, 2446, 2424, 881, 2491, 2492, 2493, 2494, 2496, 2497,
	1553, 1554, 2057, 1571, 1415, 1416, 2281, 1520, 1566, 1517,
	1695, 1509, 2299, 1506, 2182, 965, 2181, 2156, 2133, 2117,
	2048, 1480, 1591, 139, 1690, 1689, 1548, 1544, 1699, 1696,
	1418, 1543, 1542, 1541, 2499, 2491, 2492, 2493, 2494, 2496,
	2497, 1540, 1539, 1538, 3298, 1673, 880, 1602, 1537, 1536,
	1534, 1533, 1532, 1531, 1848, 1596, 1530, 1417, 2616, 1598,
	1529, 1528, 1527, 1526, 1525, 2501, 2502, 2503, 807, 1524,
	1583, 1523, 2500, 2498, 2499, 2491, 2492, 2493, 2494, 2496,
	2497, 1522, 1499, 1676, 3202, 1481, 2493, 2494, 2496, 2497,
	1479, 1546, 1156, 210, 1474, 1023, 1014, 583, 586, 1055,
	1006, 3139, 583, 586, 3070, 3024, 1698, 1574, 2891, 1580,
	1714, 1573, 1572, 1570, 1569, 1568, 1603, 2550, 2873, 2869,
	2450, 1670, 1693, 2134, 3072, 2489, 2490, 1595, 1587, 2055,
	1699, 2053, 2890, 2051, 2049, 1639, 1605, 1498, 210, 210,
	2641, 3283, 3281, 2586, 1477, 210, 1699, 1041, 836, 1699,
	3318, 2698, 3156, 1043, 1725, 210, 3113, 2876, 1677, 1028,
	1691, 2727, 2726, 3216, 210, 1034, 210, 3256, 210, 2954,
	1516, 2247, 210, 1705, 993, 1037, 1515, 1331, 1037, 1578,
	1415, 1416, 2468, 2467, 210, 2406, 1745, 2232, 1038, 1747,
	1529, 1385, 1752, 1685, 2920, 772, 1529, 1504, 1419, 1420,
	1421, 1422, 1424, 1425, 1729, 1042, 1418, 1845, 2675, 1759,
	2674, 3251, 1338, 1796, 1640, 1037, 1337, 2935, 1360, 2924,
	2745, 2653, 1743, 3193, 1156, 210, 1156, 992, 1756, 210,
	1611, 3494, 1156, 1417, 773, 210, 2312, 210, 210, 2017,
	2806, 3424, 2456, 2033, 1694, 2180, 1535, 1156, 1156, 1175,
	210, 1035, 1512, 1783, 2667, 210, 1817, 1808, 1036, 583,
	586, 1800, 578, 210, 1174, 210, 1787, 210, 977, 210,
	1209, 210, 3435, 3432, 2707, 2902, 1851, 1709, 3370, 210,
	1322, 1710, 210, 2960, 210, 3337, 3466, 2348, 1828, 1751,
	3465, 1830, 1760, 210, 1832, 3104, 1197, 3425, 1835, 2598,
	1207, 1786, 2187, 1815, 2018, 1763, 2213, 1483, 768, 3516,
	636, 3242, 210, 3237, 1423, 848, 87, 766, 210, 805,
	1776, 1850, 1891, 764, 1777, 1357, 2937, 2176, 762, 994,
	1889, 759, 2933, 2932, 2899, 2898, 2445, 2204, 1055, 752,
	2444, 2443, 2442, 1843, 2410, 1445, 1446, 1447, 2202, 2600,
	2265, 2257, 2204, 1861, 2254, 1810, 1034, 1034, 1813, 2044,
	1686, 2235, 805, 2202, 1859, 1860, 1358, 1711, 2168, 1208,
	1853, 1973, 1391, 1300, 1909, 2019, 2016, 1171, 1043, 1713,
	2043, 1931, 1242, 756, 1241, 807, 2308, 1614, 1614, 637,
	800, 1261, 87, 804, 2216, 1037, 1984, 1901, 1438, 1240,
	1203, 1239, 2746, 1722, 1900, 1315, 3174, 996, 1220, 996,
	2234, 1356, 1899, 1043, 2004, 2005, 1857, 2587, 1024, 1982,
	1842, 1906, 1725, 1055, 1852, 1320, 1599, 2194, 583, 586,
	1042, 1718, 2004, 2030, 2159, 1715, 804, 747, 2640, 1425,
	3336, 2223, 1035, 1035, 1218, 3223, 3395, 1874, 1370, 1036,
	1036, 2912, 1723, 1724, 2222, 788, 1988, 1988, 1814, 798,
	1865, 1700, 1697, 806, 808, 1042, 210, 3457, 2066, 2021,
	2070, 2070, 2083, 1904, 2004, 1398, 2190, 2103, 2105, 1719,
	1907, 1217, 2109, 1864, 2748, 2747, 2379, 1709, 2192, 1330,
	1439, 1710, 2021, 2085, 1731, 2165, 983, 1055, 210, 1316,
	2789, 1927, 1928, 1905, 1903, 1908, 806, 210, 2704, 1205,
	210, 1866, 1735, 1055, 787, 2650, 1022, 787, 787, 2645,
	2193, 1742, 1587, 1918, 1978, 2157, 1919, 1920, 1716, 748,
	2215, 3312, 1979, 2191, 3100, 1980, 1639, 1639, 1985, 1352,
	1004, 1716, 1333, 2029, 1930, 2042, 2033, 2421, 689, 3506,
	2046, 2047, 1725, 1727, 1732, 2398, 2399, 1220, 2634, 2251,
	2497, 807, 2628, 1700, 2245, 2154, 2015, 521, 2140, 2125,
	2419, 2662, 2150, 2151, 807, 2599, 2000, 1711, 807, 1700,
	2245, 3465, 1700, 2245, 668, 1355, 1037, 1037, 2705, 1713,
	1353, 516, 1507, 210, 2021, 3173, 803, 965, 2027, 2233,
	3421, 1898, 565, 2627, 1003, 639, 638, 1428, 1426, 1427,
	1419, 1420, 1421, 1422, 1424, 1425, 1384, 2934, 2124, 2584,
	2167, 1716, 1825, 1996, 2597, 1055, 2170, 2296, 1994, 2034,
	210, 1611, 1611, 1736, 1001, 1338, 2255, 1338, 210, 803,
	2094, 2078, 2214, 2704, 2107, 1715, 1367, 2630, 139, 210,
	1716, 1754, 2923, 2130, 2131, 2115, 2116, 2126, 3005, 3184,
	3472, 3381, 210, 1712, 1260, 1156, 807, 2203, 1583, 3322,
	2632, 1753, 749, 1202, 1473, 2416, 1981, 3098, 210, 1055,
	2913, 3170, 210, 210, 1321, 1983, 2417, 770, 2129, 2422,
	2460, 769, 2205, 1737, 1738, 2177, 571, 806, 1518, 1749,
	760, 2786, 1733, 1614, 1890, 1709, 760, 3091, 210, 1710,
	210, 761, 1888, 210, 760, 2631, 2149, 2269, 3456, 2158,
	1723, 1724, 3422, 3138, 2291, 3224, 3353, 3130, 210, 2385,
	1734, 2185, 1368, 2024, 3088, 210, 3000, 210, 1716, 210,
	1510, 1511, 2229, 1775, 631, 210, 2266, 1750, 210, 757,
	210, 3008, 210, 2267, 210, 210, 2188, 210, 1156, 1156,
	1156, 2184, 1156, 2237, 3486, 2323, 210, 210, 2603, 210,
	210, 1317, 2787, 2262, 750, 3089, 2252, 590, 210, 573,
	1558, 1746, 2256, 3169, 2412, 1987, 2217, 2219, 2274, 2208,
	2276, 1970, 210, 3099, 210, 1711, 3420, 210, 3419, 210,
	2362, 210, 1369, 2336, 2337, 3507, 2374, 1713, 2375, 2365,
	751, 2269, 2388, 2269, 1739, 630, 1397, 2238, 690, 210,
	210, 210, 2332, 210, 1147, 1863, 2225, 2418, 1340, 2887,
	1329, 2199, 1319, 2314, 747, 2314, 2420, 2236, 1175, 2305,
	1170, 2246, 2248, 2249, 2250, 517, 210, 1562, 583, 586,
	2253, 2279, 1639, 2270, 3455, 1017, 798, 1021, 3351, 2347,
	2338, 2948, 3464, 1715, 2295, 3462, 2021, 208, 2325, 2364,
	2366, 3261, 3142, 1712, 567, 2335, 2373, 1740, 1826, 3131,
	1565, 3171, 139, 2367, 2318, 2368, 2693, 3352, 2390, 2303,
	2334, 572, 1789, 1555, 2329, 1015, 2330, 518, 2331, 1560,
	2383, 1010, 508, 2333, 1405, 1406, 1002, 2387, 87, 3006,
	87, 1300, 87, 2349, 1563, 2339, 1170, 1170, 3084, 1968,
	1726, 3085, 1971, 1687, 2384, 3047, 748, 1562, 1558, 3501,
	2376, 569, 2377, 3229, 2378, 519, 1561, 520, 3228, 2577,
	3211, 3324, 2438, 2439, 2843, 210, 2413, 1611, 1995, 3302,
	2901, 2694, 3484, 2546, 2611, 3103, 1716, 2448, 3087, 2449,
	1565, 629, 3102, 628, 1684, 2607, 2304, 1473, 566, 2286,
	3090, 1967, 2283, 1809, 1798, 1797, 591, 592, 993, 2127,
	993, 2395, 1170, 996, 2393, 1771, 1707, 808, 87, 2785,
	632, 3361, 1404, 1914, 1563, 1562, 87, 1405, 1895, 2434,
	1680, 2386, 2965, 87, 570, 3146, 2280, 996, 1263, 2239,
	1564, 2392, 3249, 3247, 3212, 568, 796, 825, 747, 2618,
	3485, 2617, 2404, 1406, 1858, 2868, 2543, 2542, 1565, 2121,
	1682, 992, 1234, 992, 1055, 2526, 2411, 2164, 2531, 1354,
	798, 1248, 2163, 2538, 2539, 2162, 1683, 1560, 804, 1235,
	1246, 2540, 3487, 210, 523, 688, 2293, 3307, 3219, 3122,
	2736, 210, 1563, 1807, 594, 593, 2664, 3048, 210, 749,
	3086, 210, 210, 1055, 807, 3500, 797, 3469, 3245, 3209,
	2844, 3053, 1055, 1341, 1561, 1404, 2845, 2858, 3325, 210,
	1564, 1712, 2564, 1915, 2455, 2123, 1969, 2038, 1382, 3364,
	2122, 3471, 2545, 2582, 210, 3101, 3437, 3319, 1364, 3308,
	748, 3210, 3189, 1362, 595, 596, 1351, 1349, 2593, 2554,
	3046, 2535, 210, 210, 210, 2939, 788, 2553, 210, 2565,
	2566, 210, 2518, 994, 2595, 994, 2548, 3220, 210, 210,
	210, 210, 210, 1347, 1478, 1614, 2568, 2601, 2240, 2241,
	681, 2573, 2604, 2605, 210, 210, 210, 2572, 1564, 2769,
	2552, 2581, 1487, 210, 3365, 2549, 1493, 1345, 2619, 2555,
	2622, 750, 2532, 3091, 3309, 210, 1156, 2483, 210, 1343,
	2423, 1614, 2578, 2290, 1335, 2547, 1055, 2521, 2522, 2523,
	2608, 1244, 2620, 1055, 2624, 2625, 2264, 2231, 210, 2563,
	3088, 210, 210, 3081, 2183, 1593, 1590, 751, 1383, 1311,
	2519, 210, 2591, 2592, 1156, 210, 3079, 1156, 1156, 1156,
	1887, 800, 3083, 2643, 210, 2381, 2644, 2579, 2580, 2380,
	210, 2678, 2672, 2370, 1247, 1897, 210, 1871, 210, 1672,
	2537, 3089, 1521, 1245, 2596, 210, 1381, 522, 2635, 2636,
	1314, 2602, 2637, 749, 686, 687, 1363, 2559, 2037, 2585,
	2660, 1361, 1714, 1224, 1350, 1348, 2362, 3415, 1156, 1156,
	3117, 3110, 3082, 2709, 3358, 2362, 210, 210, 2633, 2567,
	210, 2656, 2657, 3077, 2963, 2658, 2918, 1714, 2575, 2651,
	2639, 1346, 2916, 2652, 1639, 2612, 2900, 87, 2646, 758,
	1579, 2692, 1582, 210, 2700, 1055, 210, 210, 1055, 210,
	2682, 2654, 2649, 2655, 2677, 1344, 2661, 1170, 2676, 2237,
	1756, 2309, 2298, 2297, 2277, 210, 1839, 1342, 1756, 2560,
	1639, 2683, 1334, 1838, 2685, 2686, 2687, 1786, 2402, 1243,
	2717, 2718, 2719, 1836, 2720, 2721, 1834, 1831, 1829, 679,
	680, 1827, 2647, 795, 1818, 750, 2648, 1768, 1766, 2723,
	2722, 1757, 1744, 2699, 2706, 1886, 912, 1741, 1055, 2708,
	2558, 2753, 1728, 2715, 2738, 1717, 2797, 2754, 2696, 1055,
	974, 210, 139, 2743, 3084, 2729, 2730, 3085, 2734, 1611,
	2562, 751, 3265, 1600, 1408, 3466, 1614, 807, 1703, 2575,
	2772, 3387, 3165, 3160, 975, 206, 3159, 511, 512, 2363,
	2403, 529, 511, 529, 539, 544, 1199, 2204, 560, 3267,
	763, 765, 2204, 825, 3087, 1611, 206, 825, 2202, 2221,
	2750, 2781, 2782, 2220, 2974, 1139, 3090, 1725, 2204, 2751,
	1139, 1867, 2755, 1869, 678, 1614, 1614, 2757, 206, 2218,
	1379, 1380, 1415, 1416, 3314, 1415, 1416, 3288, 3054, 2855,
	2242, 1614, 1614, 2224, 1412, 2561, 524, 2259, 2261, 2228,
	2226, 1170, 3357, 3327, 210, 3482, 2777, 1409, 1418, 2260,
	2227, 2952, 2947, 2883, 2317, 2108, 1675, 976, 1606, 210,
	2583, 2269, 1614, 3499, 3329, 1055, 2808, 2796, 2489, 2490,
	2803, 1486, 2809, 2807, 2041, 1417, 2810, 2877, 1417, 2889,
	2812, 1164, 2792, 535, 1053, 210, 2788, 2790, 2791, 1415,
	1416, 1324, 2847, 2196, 2195, 2820, 2822, 1323, 2196, 2896,
	2589, 2197, 2872, 2045, 2039, 996, 3086, 2012, 1366, 511,
	511, 1365, 3025, 2888, 2784, 1639, 1484, 206, 1482, 2856,
	996, 2864, 2865, 3508, 993, 3299, 2848, 3203, 3201, 1927,
	2813, 210, 3133, 2859, 3071, 2998, 2991, 2861, 2862, 2980,
	2958, 139, 2925, 2942, 2794, 1927, 2823, 2941, 993, 996,
	2940, 2915, 2716, 2690, 2688, 2800, 2372, 2371, 2327, 2302,
	2278, 1999, 1885, 2936, 1639, 1639, 210, 210, 210, 1884,
	1883, 2879, 1821, 2886, 1820, 1819, 2851, 992, 1801, 1779,
	1639, 1639, 1778, 1055, 210, 1774, 1773, 1772, 1156, 808,
	1770, 2893, 1769, 1399, 1378, 1377, 1272, 1271, 1270, 1269,
	1268, 992, 210, 2917, 1267, 2919, 2904, 2955, 2976, 1266,
	1611, 1639, 1265, 1264, 1614, 210, 210, 1156, 1156, 1156,
	2967, 210, 210, 210, 1262, 1257, 210, 210, 2971, 1256,
	210, 210, 2323, 1156, 2929, 1599, 1255, 210, 2930, 2931,
	1254, 2970, 1253, 1216, 1215, 1214, 1213, 1212, 2966, 1211,
	1055, 2938, 1210, 2237, 1204, 1198, 1196, 2961, 1195, 1611,
	1611, 2362, 1020, 1019, 949, 859, 1678, 771, 623, 815,
	755, 2885, 3222, 1372, 74, 1611, 1611, 2999, 2956, 994,
	3023, 2957, 2951, 1206, 610, 68, 2914, 3369, 2626, 1870,
	2968, 2535, 1339, 788, 1872, 210, 788, 788, 2551, 2978,
	2977, 2132, 2972, 994, 3350, 3032, 1611, 2983, 2982, 2459,
	3294, 3183, 1614, 2988, 2989, 2036, 3019, 2987, 2990, 1503,
	2997, 2994, 2996, 70, 3011, 3010, 847, 3002, 2612, 932,
	1786, 3007, 3129, 3128, 2984, 2985, 2986, 2993, 3078, 2903,
	2352, 3126, 3125, 814, 1058, 1688, 853, 1701, 2179, 2069,
	1610, 1990, 856, 1612, 858, 857, 1613, 210, 1505, 855,
	1609, 2292, 2321, 1639, 1251, 808, 734, 1055, 735, 1055,
	1692, 3059, 1993, 2031, 2454, 1500, 827, 849, 1487, 2028,
	1013, 826, 1487, 2556, 2703, 2882, 3151, 1913, 2394, 210,
	210, 210, 1910, 626, 2486, 2013, 3045, 1005, 2091, 2084,
	2080, 210, 1386, 1475, 2322, 1045, 830, 210, 1991, 210,
	1491, 2428, 210, 210, 210, 3097, 2570, 2710, 2174, 3074,
	3075, 3384, 1921, 210, 210, 1156, 3107, 3108, 1055, 3096,
	1156, 1788, 973, 3056, 3057, 972, 210, 3105, 1139, 3055,
	3058, 3064, 971, 3061, 3063, 3375, 983, 3060, 3372, 3067,
	1007, 210, 2572, 3076, 1055, 2670, 1681, 1156, 1611, 678,
	2189, 1639, 3106, 1467, 2679, 843, 3123, 1169, 3062, 2536,
	1582, 2737, 1221, 3313, 3120, 3095, 1466, 767, 825, 3304,
	1018, 1032, 1031, 1030, 1139, 2610, 210, 560, 3505, 3148,
	2911, 177, 87, 3114, 3150, 174, 1055, 176, 1557, 175,
	3164, 2927, 3119, 206, 2663, 206, 206, 3124, 1161, 90,
	206, 3136, 3161, 35, 17, 115, 3135, 3147, 206, 1177,
	114, 113, 1055, 112, 111, 3149, 110, 109, 3144, 108,
	107, 106, 105, 104, 103, 996, 996, 102, 3115, 3132,
	3155, 101, 3116, 1201, 3137, 100, 99, 98, 97, 96,
	95, 94, 93, 92, 91, 556, 1611, 1223, 3195, 3172,
	1055, 206, 206, 553, 1161, 50, 49, 3154, 210, 89,
	210, 88, 1055, 210, 16, 3066, 206, 33, 3175, 14,
	54, 210, 55, 13, 1259, 29, 1786, 30, 80, 79,
	3180, 1614, 28, 15, 27, 3191, 25, 11, 206, 206,
	206, 206, 1161, 210, 8, 3206, 87, 7, 10, 1567,
	560, 12, 206, 206, 3196, 3197, 1139, 144, 143, 73,
	142, 210, 72, 3205, 3199, 210, 141, 140, 71, 23,
	3204, 9, 3240, 210, 136, 3254, 2953, 87, 1156, 3248,
	67, 138, 137, 210, 64, 135, 1614, 3253, 813, 134,
	3225, 65, 87, 133, 87, 2672, 132, 3266, 66, 131,
	3258, 21, 3200, 3260, 210, 210, 3257, 5, 53, 6,
	3263, 3167, 2744, 3246, 83, 84, 993, 31, 206, 62,
	61, 3252, 3274, 3275, 210, 60, 3232, 3233, 20, 52,
	210, 993, 206, 19, 168, 167, 2970, 87, 3262, 87,
	210, 3269, 1053, 3268, 3264, 996, 3238, 544, 166, 165,
	160, 159, 164, 162, 3310, 161, 163, 158, 3301, 130,
	993, 170, 169, 156, 152, 151, 87, 155, 3181, 992,
	157, 821, 1614, 3285, 154, 153, 3292, 150, 171, 3300,
	1639, 129, 57, 128, 992, 127, 3270, 3287, 3297, 126,
	125, 124, 210, 1156, 3278, 3321, 56, 18, 210, 2,
	3231, 1, 1156, 1156, 0, 0, 3181, 0, 1156, 3343,
	0, 0, 210, 992, 210, 0, 0, 0, 1930, 0,
	0, 0, 3257, 3328, 0, 3334, 3348, 0, 3349, 0,
	3331, 3335, 3354, 3340, 0, 1639, 210, 0, 0, 0,
	0, 3347, 210, 210, 0, 1055, 3341, 3342, 0, 3366,
	0, 3339, 3346, 210, 210, 0, 3367, 0, 0, 3388,
	0, 3378, 0, 0, 3382, 0, 3390, 1170, 3392, 0,
	0, 994, 0, 0, 0, 1611, 3399, 3379, 3371, 0,
	3400, 3374, 3377, 0, 3386, 0, 994, 210, 0, 0,
	0, 0, 3394, 996, 3396, 1139, 0, 1990, 0, 0,
	3426, 996, 0, 0, 0, 0, 0, 0, 3414, 3413,
	3411, 3412, 0, 0, 996, 994, 0, 0, 1487, 0,
	0, 1639, 3428, 3444, 0, 3446, 210, 3442, 0, 0,
	1611, 0, 0, 3452, 0, 0, 0, 0, 3451, 0,
	511, 0, 3454, 3448, 3443, 0, 210, 0, 0, 0,
	0, 3445, 0, 3447, 0, 0, 2323, 0, 0, 3389,
	0, 206, 0, 206, 3460, 3463, 206, 3461, 0, 0,
	210, 0, 210, 3468, 3467, 0, 1177, 3470, 1161, 206,
	1139, 0, 3474, 3476, 3473, 3478, 3480, 206, 1177, 529,
	0, 3481, 206, 1177, 3475, 0, 0, 3374, 560, 0,
	3377, 0, 3386, 0, 3489, 0, 3488, 0, 0, 0,
	3496, 0, 0, 3495, 0, 3497, 1611, 3498, 0, 0,
	0, 0, 0, 3502, 0, 3449, 3450, 0, 3509, 3453,
	3510, 0, 0, 0, 3503, 3504, 0, 0, 983, 0,
	0, 0, 0, 0, 0, 3517, 3518, 0, 3513, 3514,
	3515, 1930, 0, 983, 1139, 0, 0, 0, 0, 0,
	3522, 0, 0, 3520, 0, 0, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2425, 2426, 0, 0, 813, 0, 0, 0, 813, 2489,
	2490, 0, 2507, 2508, 2509, 0, 0, 0, 0, 0,
	1415, 1416, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	1179, 0, 1183, 0, 1189, 0, 1418, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 993, 993, 0, 206,
	0, 0, 87, 87, 0, 0, 87, 0, 0, 0,
	2504, 0, 0, 1417, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 0, 0, 87, 87, 0, 0, 87,
	0, 2512, 2513, 2514, 206, 206, 0, 0, 75, 992,
	992, 206, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 1806, 76, 0, 0, 0, 0, 0, 1309, 0,
	206, 0, 206, 0, 206, 1312, 0, 0, 511, 0,
	0, 0, 0, 2495, 0, 0, 1139, 0, 0, 0,
	1822, 808, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 1446, 1447, 0, 1415,
	1416, 560, 0, 0, 0, 678, 0, 0, 0, 0,
	0, 206, 0, 1161, 206, 0, 0, 0, 0, 0,
	0, 994, 994, 0, 0, 1418, 560, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 993, 2505, 206, 206,
	0, 206, 0, 206, 0, 206, 0, 206, 1438, 0,
	0, 0, 1417, 0, 0, 1892, 0, 0, 1893, 58,
	1894, 0, 0, 0, 2171, 0, 0, 0, 0, 206,
	0, 59, 0, 0, 0, 1468, 1469, 1470, 1471, 1472,
	0, 78, 0, 0, 0, 63, 0, 0, 544, 992,
	0, 0, 0, 0, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 1501, 0, 145, 81, 69, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2506,
	0, 0, 0, 1423, 0, 178, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 75, 0, 673, 0, 0,
	116, 0, 0, 0, 85, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 180, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 983, 983,
	0, 994, 993, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 993, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 179, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 87, 0, 0,
	1551, 1551, 1551, 0, 173, 2765, 2766, 992, 0, 2501,
	2502, 2503, 511, 0, 0, 992, 2500, 2498, 2499, 2491,
	2492, 2493, 2494, 2496, 2497, 148, 0, 206, 992, 1427,
	1419, 1420, 1421, 1422, 1424, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 206, 0, 511, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 1439,
	0, 1139, 0, 0, 0, 2824, 2825, 2826, 2827, 2828,
	2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838,
	2839, 2840, 2841, 2842, 0, 2846, 0, 0, 1489, 994,
	145, 81, 1494, 82, 0, 0, 0, 994, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 983, 1139,
	994, 0, 178, 0, 0, 0, 0, 0, 0, 529,
	0, 0, 0, 0, 673, 0, 0, 116, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 2212, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 206, 0, 0, 0, 1419,
	1420, 1421, 1422, 1424, 1425, 149, 1917, 0, 206, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 206, 0, 0, 0, 206, 2271,
	0, 173, 0, 1139, 0, 0, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 206, 0, 1177, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1806, 0, 983, 0, 0, 0,
	0, 2212, 0, 511, 983, 2326, 0, 0, 0, 0,
	0, 206, 0, 0, 206, 0, 206, 0, 206, 0,
	206, 206, 0, 1161, 0, 0, 0, 0, 0, 0,
	0, 0, 2345, 678, 0, 2212, 2212, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1177, 2086,
	1177, 0, 0, 1161, 0, 1161, 0, 1161, 0, 0,
	0, 0, 1139, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 206, 206, 206, 87, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 0, 0, 0, 0,
	0, 87, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 1911, 0, 1916, 1417, 0, 0, 0,
	0, 1923, 0, 0, 1437, 0, 0, 0, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 0, 1972, 0, 1974, 1975, 1976, 1977,
	2768, 1177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2001, 1440, 1441, 1442,
	1443, 0, 660, 0, 0, 0, 0, 1423, 0, 0,
	0, 1488, 0, 0, 0, 2026, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 0, 0, 0, 643, 2082, 0, 2093,
	2095, 2100, 1990, 0, 0, 644, 0, 0, 0, 206,
	0, 0, 0, 0, 1415, 1416, 0, 0, 0, 0,
	645, 0, 0, 0, 206, 0, 0, 0, 0, 511,
	0, 1438, 0, 0, 0, 0, 665, 511, 0, 0,
	1418, 0, 1415, 1416, 511, 0, 0, 511, 511, 0,
	0, 646, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1177, 0, 1417, 1418, 647,
	3188, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	1177, 0, 0, 0, 0, 0, 0, 0, 0, 648,
	1139, 0, 649, 0, 0, 1417, 0, 0, 2212, 2212,
	206, 0, 0, 1437, 2212, 1444, 0, 2614, 0, 0,
	0, 0, 0, 3214, 2212, 2614, 2212, 2614, 2614, 664,
	0, 2763, 0, 1439, 0, 0, 0, 0, 0, 0,
	206, 206, 206, 0, 0, 0, 0, 0, 1440, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1423, 2762,
	0, 206, 0, 0, 1161, 0, 0, 1139, 0, 0,
	0, 0, 0, 0, 0, 1997, 1440, 1441, 1442, 1443,
	0, 0, 0, 87, 2666, 0, 1423, 2668, 2212, 1445,
	1446, 1447, 0, 0, 1489, 0, 0, 206, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 1161, 1445, 1446, 1447,
	0, 651, 2212, 3291, 511, 0, 2086, 2086, 0, 0,
	0, 2212, 0, 0, 2273, 0, 2275, 668, 652, 0,
	0, 2090, 1438, 0, 0, 0, 0, 0, 0, 0,
	1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0,
	0, 0, 206, 1806, 0, 667, 1806, 0, 0, 0,
	1438, 0, 653, 0, 0, 654, 0, 0, 0, 0,
	0, 662, 0, 0, 1139, 0, 1139, 0, 655, 2749,
	0, 0, 1161, 206, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 1444, 656, 663, 0,
	0, 0, 0, 0, 0, 657, 0, 2086, 2086, 2086,
	0, 0, 0, 0, 1439, 0, 0, 659, 0, 0,
	0, 913, 658, 0, 1444, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 666, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 661, 0, 2805, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 2408, 2409, 0, 1139,
	0, 0, 2415, 0, 0, 0, 0, 0, 0, 206,
	206, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425,
	511, 2429, 2430, 0, 0, 69, 0, 2026, 0, 0,
	0, 0, 0, 0, 0, 511, 2437, 1139, 0, 1428,
	1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0, 1139,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 1177, 2457, 0, 85, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 2472, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 560, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2100, 2100, 2100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1551, 0, 2949, 206, 206, 0, 0, 0, 2541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2212, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2345, 2345, 0, 0, 0, 0, 678, 678, 2212,
	0, 0, 1806, 1806, 0, 0, 678, 2212, 0, 0,
	0, 2086, 2086, 206, 813, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2090, 2090,
	145, 81, 2629, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3033, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 0, 673, 0, 825, 116, 0, 0,
	0, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086,
	2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086, 2086,
	180, 2086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 117, 1177, 0, 206, 0, 0, 0, 0,
	0, 2701, 0, 0, 0, 149, 0, 0, 206, 2090,
	2090, 2090, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 2212, 2212, 2212, 0, 0,
	0, 173, 0, 0, 0, 0, 0, 1177, 0, 0,
	0, 0, 0, 2212, 0, 2614, 0, 0, 1177, 1177,
	206, 0, 1303, 0, 0, 0, 0, 0, 0, 206,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2756, 0, 3141, 0, 1923,
	0, 0, 0, 0, 0, 2760, 2761, 0, 0, 2764,
	0, 0, 0, 2767, 0, 0, 0, 0, 0, 0,
	0, 0, 2771, 0, 0, 0, 0, 0, 0, 0,
	0, 2778, 1177, 0, 2541, 0, 0, 0, 207, 1060,
	207, 207, 1060, 0, 1060, 207, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 2798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2814, 2815, 0, 2816, 2817, 2818,
	0, 0, 2819, 0, 0, 0, 2821, 0, 0, 0,
	0, 0, 0, 0, 1060, 1060, 207, 207, 0, 1415,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 2212, 0, 2614, 2849, 2850, 3208,
	0, 0, 0, 0, 0, 1418, 0, 206, 0, 0,
	0, 0, 0, 207, 207, 207, 207, 0, 1060, 1060,
	0, 0, 0, 1060, 0, 2867, 1060, 207, 207, 560,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 3208, 0, 0,
	0, 2212, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 1177,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 2897,
	0, 0, 0, 0, 0, 0, 2414, 0, 0, 0,
	206, 206, 0, 207, 2905, 2908, 0, 0, 0, 0,
	0, 0, 0, 1440, 1441, 1442, 1443, 207, 0, 0,
	2805, 0, 0, 1423, 0, 0, 511, 0, 2926, 0,
	0, 577, 0, 2090, 2090, 0, 3208, 0, 2489, 2490,
	0, 2507, 2508, 2509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 1445, 1446, 1447, 3015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 1551, 2614, 0, 0, 0, 0, 2504,
	0, 0, 2979, 0, 0, 0, 0, 1438, 1177, 0,
	1177, 0, 0, 2090, 2090, 2090, 2090, 2090, 2090, 2090,
	2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090, 2090,
	2090, 2090, 3362, 2090, 0, 0, 0, 0, 1177, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	2212, 3012, 3013, 0, 0, 0, 0, 3017, 3018, 0,
	0, 0, 3021, 3022, 0, 0, 0, 0, 0, 3026,
	0, 0, 2495, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 2805, 0, 0, 0, 0, 3030, 0,
	0, 0, 0, 0, 0, 3034, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 2086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1415, 1416, 2212, 0, 2510, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3208, 0, 0, 0, 1418, 0, 0, 2086,
	0, 207, 0, 0, 879, 0, 2505, 1418, 0, 0,
	0, 0, 1060, 0, 207, 207, 1177, 0, 2212, 0,
	0, 1060, 207, 1417, 0, 0, 0, 207, 0, 0,
	0, 1437, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 1437, 205, 0, 0, 0, 0, 2908, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 584, 0, 1428, 1426, 1427, 1419,
	1420, 1421, 1422, 1424, 1425, 0, 0, 2407, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 1440, 1441, 1442, 1443, 2506, 2086,
	0, 0, 0, 0, 1423, 1440, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2908, 0, 0, 0, 1445, 1446, 1447, 988, 0,
	0, 0, 0, 0, 0, 0, 1445, 1446, 1447, 0,
	0, 0, 0, 3176, 3177, 3178, 0, 0, 0, 0,
	0, 0, 0, 2489, 2490, 0, 2507, 2508, 2509, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 3186, 3187,
	0, 0, 2774, 1060, 207, 995, 0, 0, 1438, 0,
	1060, 0, 3194, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 2501, 2502,
	2503, 0, 0, 0, 0, 2500, 2498, 2499, 2491, 2492,
	2493, 2494, 2496, 2497, 2504, 0, 0, 0, 0, 207,
	207, 0, 0, 2908, 0, 0, 207, 0, 0, 0,
	0, 3230, 0, 0, 0, 0, 0, 0, 0, 3236,
	0, 0, 813, 0, 0, 207, 3241, 207, 0, 207,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 2908,
	1439, 0, 2908, 0, 0, 0, 0, 0, 0, 1056,
	0, 1439, 1157, 0, 1056, 0, 0, 2495, 0, 0,
	0, 2908, 2908, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 1060, 0, 0,
	0, 0, 0, 1060, 0, 0, 207, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 1060,
	0, 0, 0, 0, 1157, 1157, 207, 0, 0, 2510,
	0, 0, 3303, 207, 207, 3306, 207, 0, 207, 0,
	207, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2505, 0, 0, 207, 0, 0, 0, 1157, 1157,
	0, 0, 0, 1157, 0, 0, 1157, 1428, 1426, 1427,
	1419, 1420, 1421, 1422, 1424, 1425, 0, 0, 1428, 1426,
	1427, 1419, 1420, 1421, 1422, 1424, 1425, 0, 2090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 2090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3410, 3410, 3410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3429,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2908, 0, 2908, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3410, 0, 0, 0,
	0, 0, 0, 2489, 2490, 0, 2507, 2508, 2509, 0,
	0, 2090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 2773, 205, 205, 0, 0, 0, 205, 0,
	0, 0, 0, 2501, 2502, 2503, 584, 0, 1060, 0,
	2500, 2498, 2499, 2491, 2492, 2493, 2494, 2496, 2497, 0,
	0, 207, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2504, 0, 0, 0, 0, 0,
	0, 3410, 0, 0, 0, 0, 0, 0, 0, 205,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 2489, 2490, 0, 2507, 2508, 2509, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 205, 205, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 205, 0, 0, 0, 0, 0, 2495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 0, 0, 0, 0,
	0, 0, 1168, 2504, 0, 0, 1060, 0, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 0, 0, 207,
	0, 1157, 577, 0, 0, 0, 0, 577, 0, 2510,
	207, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 1060, 0, 1415, 1416,
	205, 1448, 1449, 1450, 1458, 1459, 1460, 0, 1056, 207,
	1060, 2505, 0, 207, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 0, 1418, 0, 2495, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	1276, 1276, 1276, 1168, 207, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 1307, 1308, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 2510, 207,
	0, 207, 0, 207, 0, 207, 207, 0, 0, 1060,
	1060, 1060, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2506, 0, 0, 0, 0, 0, 207,
	2505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1371, 0, 1440, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1423, 1157, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 207, 207, 0, 207, 0, 1455, 0, 0, 1465,
	0, 0, 0, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 1433, 0, 0, 0, 0, 883,
	0, 0, 2506, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 2501, 2502, 2503, 1438, 0, 0, 0,
	2500, 2498, 2499, 2491, 2492, 2493, 2494, 2496, 2497, 1581,
	0, 995, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 1581, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 0, 0,
	584, 0, 0, 0, 0, 1157, 0, 1157, 0, 0,
	0, 0, 0, 1157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1157, 1157,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 1439, 0,
	0, 0, 2501, 2502, 2503, 0, 0, 0, 0, 2500,
	2498, 2499, 2491, 2492, 2493, 2494, 2496, 2497, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 1588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 1597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 1454, 0, 584, 1429, 1430,
	1436, 1435, 1431, 1457, 0, 1428, 1426, 1427, 1419, 1420,
	1421, 1422, 1424, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 205, 205, 1056, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 207, 207, 205, 0,
	205, 0, 205, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 207, 0, 0, 1060, 207, 0, 1060, 1060,
	1060, 0, 0, 0, 1056, 207, 0, 0, 0, 205,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 584, 205, 0, 205,
	0, 205, 0, 205, 0, 205, 1781, 0, 0, 1060,
	1060, 0, 0, 1793, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 1252, 0, 1812, 0, 1812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 207, 1060,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1793, 0, 0, 1855, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 1157, 0, 0, 0,
	1060, 0, 0, 1868, 0, 0, 0, 0, 0, 0,
	1056, 1875, 0, 1877, 0, 1879, 0, 1881, 0, 1882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	1158, 0, 1057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1157,
	1157, 1157, 0, 1157, 0, 995, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1158, 1158, 0, 0, 1060, 0, 0, 995,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1158, 1158, 0, 0,
	0, 1158, 0, 0, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 1448, 1449,
	1450, 1458, 1459, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 1418, 1158, 0, 0, 1464, 0, 0, 207, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 207, 0, 0, 1417, 1060,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 205, 1434, 0, 0, 0, 0, 2155, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 1060, 1060,
	1060, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 207, 0,
	0, 0, 205, 0, 0, 0, 584, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 1440,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 205, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 1465, 0, 0, 0,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 205, 0, 205, 1056, 205, 0, 205, 205,
	0, 1461, 0, 1462, 0, 0, 0, 0, 0, 0,
	1432, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 1438, 1056, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 1060, 0,
	1060, 1463, 0, 0, 0, 0, 1168, 0, 0, 0,
	0, 0, 0, 205, 205, 205, 1452, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2289, 0, 0, 0,
	205, 1793, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 207, 1060, 1444, 0, 1060,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 0, 0, 2328, 0, 1439, 1276, 0, 1276, 1158,
	1276, 0, 1168, 1168, 0, 1060, 0, 1157, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	1456, 0, 0, 0, 1056, 0, 2369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 1157, 0, 1060, 1157, 1157,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2389, 1168, 2391,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2405, 0, 0, 0, 0, 1157,
	1157, 0, 1454, 0, 0, 1429, 1430, 1436, 1435, 1431,
	1457, 1060, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424,
	1425, 0, 0, 1060, 0, 3041, 0, 0, 3040, 0,
	0, 0, 207, 0, 0, 0, 1056, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1158, 995, 0, 0, 0, 0, 0, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 1060,
	0, 1581, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 207, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 205,
	205, 0, 0, 0, 0, 0, 0, 1581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 1158, 0, 1158, 0, 0, 0, 0,
	0, 1158, 0, 207, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 1060, 0, 1158, 1158, 0, 1060,
	0, 0, 0, 0, 0, 205, 1056, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 2606, 0, 0, 1415, 1416, 0, 1448, 1449,
	1450, 1458, 1459, 1460, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 1418, 2642, 1168, 2289, 1464, 0, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 205, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 205,
	0, 0, 0, 1434, 1056, 0, 0, 0, 0, 1157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2680,
	0, 0, 0, 2684, 0, 0, 0, 0, 0, 0,
	0, 0, 2691, 0, 0, 0, 0, 0, 1157, 1157,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 0, 1157, 0, 0, 0, 0, 1440,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 1423,
	0, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2733, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 1465, 0, 0, 0,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2752, 0, 1168, 0, 0,
	0, 1461, 0, 1462, 0, 0, 1057, 0, 0, 0,
	1432, 1433, 0, 2758, 0, 0, 0, 995, 995, 0,
	0, 0, 1057, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 1056, 0,
	1056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1439, 1157, 0, 0, 1056,
	0, 1157, 0, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 205, 205, 0, 0, 1056, 0, 0, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 995, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 1429, 1430, 1436, 1435, 1431,
	1457, 0, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424,
	1425, 0, 0, 0, 0, 2477, 0, 0, 2478, 0,
	0, 1056, 0, 0, 0, 0, 0, 1158, 1158, 1158,
	0, 1158, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 0, 0, 2950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2962, 0, 0, 601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 995, 602, 621, 0, 1157,
	0, 0, 0, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3001, 1581, 603, 0, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 0,
	0, 0, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 625, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 205, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 1448, 1449, 1450, 1458, 1459, 1460, 607,
	0, 0, 608, 631, 0, 0, 0, 634, 0, 1451,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	1464, 0, 0, 0, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 1157, 1157, 0, 0, 0, 0, 1157,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 630, 0, 1056, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3109, 0, 0, 0, 0, 0, 0, 0,
	0, 2289, 609, 1057, 1440, 1441, 1442, 1443, 0, 0,
	0, 612, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 1465, 1057, 0, 0, 1445, 1446, 1447, 0, 0,
	0, 1057, 0, 0, 0, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 1461, 0, 1462, 0,
	0, 0, 0, 0, 0, 1432, 1433, 205, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 620, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 205, 205,
	629, 0, 628, 0, 0, 617, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 618, 0, 0,
	0, 1452, 624, 0, 0, 0, 0, 635, 0, 632,
	0, 0, 0, 0, 622, 1158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 0, 3215,
	0, 0, 1057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1158, 0, 0, 1158, 1158, 1158, 0,
	1439, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3259, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 1158, 0,
	0, 0, 3284, 1168, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 1415, 1416, 0, 1448, 1449, 1450, 1458,
	1459, 1460, 0, 0, 1057, 0, 0, 1057, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 1464, 0, 0, 0, 1454, 0, 0,
	1429, 1430, 1436, 1435, 1431, 1457, 0, 1428, 1426, 1427,
	1419, 1420, 1421, 1422, 1424, 1425, 1417, 0, 0, 0,
	2022, 0, 0, 2023, 1437, 0, 0, 0, 0, 0,
	3333, 1434, 0, 0, 0, 0, 0, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3368, 0, 0, 0, 0, 0, 1440, 1441, 1442,
	1443, 3383, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 1465, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 1462, 0, 0, 0, 0, 0, 0, 1432, 1433,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 0, 0, 1158, 0, 1415,
	1416, 0, 1448, 1449, 1450, 1458, 1459, 1460, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 1418, 1158, 1158, 1158, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1057,
	1437, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1454, 0, 0, 1429, 1430, 1436, 1435, 1431, 1457, 0,
	1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0,
	0, 0, 0, 0, 0, 0, 3039, 0, 0, 0,
	0, 0, 0, 1440, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	1465, 1636, 0, 0, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 1057, 0,
	0, 0, 0, 0, 0, 1461, 0, 1462, 0, 0,
	0, 0, 0, 0, 1432, 1433, 0, 0, 0, 1648,
	1630, 1637, 1620, 1658, 1657, 0, 0, 1622, 1621, 1453,
	0, 0, 0, 0, 0, 1668, 1669, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1158, 1463, 0, 1057, 0, 1158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 0, 0, 1659, 0, 1655, 1654, 0,
	0, 0, 0, 1057, 0, 0, 1158, 0, 0, 1653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 1652,
	1650, 1651, 0, 0, 0, 1057, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 1632, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 1641, 1635, 1643, 1645, 1646, 1647, 1642,
	0, 1640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1664, 1665, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1656, 0, 0,
	0, 1633, 0, 1634, 0, 0, 1454, 0, 0, 1429,
	1430, 1436, 1435, 1431, 1457, 0, 1428, 1426, 1427, 1419,
	1420, 1421, 1422, 1424, 1425, 0, 0, 0, 0, 0,
	0, 0, 2776, 0, 0, 0, 0, 1158, 0, 0,
	0, 1649, 0, 0, 0, 1617, 1615, 1616, 1619, 1618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1625, 1626, 1628, 1629, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1644, 1627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1623, 0, 1660, 1661, 1662, 1663, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1158, 0, 1631, 0, 0, 0, 0, 1638,
	1666, 1158, 1158, 0, 0, 0, 0, 1158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 215, 216, 217, 218, 219,
	1061, 220, 1062, 1063, 1064, 1065, 462, 1066, 1067, 1068,
	1069, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 1070, 228, 229, 230, 231, 232, 233, 1071,
	1072, 234, 467, 468, 469, 1073, 235, 470, 1074, 1059,
	1075, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 1076, 245, 0, 246, 247, 248, 1077, 934, 249,
	250, 1078, 1079, 1081, 1080, 1082, 1083, 1084, 251, 252,
	253, 254, 255, 256, 471, 472, 1085, 257, 1086, 259,
	258, 1087, 260, 1088, 1089, 261, 262, 263, 1090, 264,
	1091, 265, 266, 1092, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 1093, 212, 1094, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 1095, 283, 1096, 1097, 935, 284, 285, 1098, 286,
	477, 1099, 478, 287, 1100, 288, 289, 290, 291, 479,
	480, 481, 339, 937, 292, 293, 1101, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1102, 936, 299,
	482, 301, 300, 302, 303, 304, 483, 1103, 484, 1104,
	306, 938, 485, 939, 307, 308, 309, 940, 310, 311,
	0, 0, 312, 313, 314, 315, 1105, 317, 316, 1106,
	318, 486, 941, 319, 320, 942, 1107, 321, 322, 1108,
	1109, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 943, 335, 336, 338, 337, 1110,
	214, 944, 1111, 487, 488, 340, 341, 1112, 342, 343,
	344, 1113, 1114, 346, 347, 348, 1115, 1116, 349, 489,
	945, 350, 946, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 1117, 358, 359, 491, 360, 492, 361, 1118,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 1119, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1120, 384, 947, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1121, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1122, 411, 391, 392, 412,
	948, 413, 495, 414, 415, 1123, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 1124, 427,
	428, 426, 1125, 429, 430, 431, 432, 433, 271, 434,
	1126, 497, 498, 499, 500, 1127, 441, 1128, 435, 436,
	501, 437, 502, 1129, 438, 439, 440, 0, 442, 443,
	1130, 1131, 444, 445, 446, 447, 448, 450, 1132, 451,
	1133, 449, 452, 453, 454, 503, 504, 505, 1134, 456,
	455, 506, 1135, 1136, 1137, 1138, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 0, 0, 0,
	0, 0, 2142, 0, 0, 0, 0, 0, 0, 0,
	2143, 215, 216, 217, 218, 219, 1061, 220, 1062, 1063,
	1064, 1065, 462, 1066, 1067, 1068, 1069, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 1070, 228,
	229, 230, 231, 232, 233, 1071, 1072, 234, 467, 468,
	469, 1073, 235, 470, 1074, 1059, 1075, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1076, 245, 0,
	246, 247, 248, 1077, 934, 249, 250, 1078, 1079, 1081,
	1080, 1082, 1083, 1084, 251, 252, 253, 254, 255, 256,
	471, 472, 1085, 257, 1086, 259, 258, 1087, 260, 1088,
	1089, 261, 262, 263, 1090, 264, 1091, 265, 266, 1092,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 1093, 212, 1094, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 1095, 283, 1096,
	1097, 935, 284, 285, 1098, 286, 477, 1099, 478, 287,
	1100, 288, 289, 290, 291, 479, 480, 481, 339, 937,
	292, 293, 1101, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 1102, 936, 299, 482, 301, 300, 302,
	303, 304, 483, 1103, 484, 1104, 306, 938, 485, 939,
	307, 308, 309, 940, 310, 311, 0, 0, 312, 313,
	314, 315, 1105, 317, 316, 1106, 318, 486, 941, 319,
	320, 942, 1107, 321, 322, 1108, 1109, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	943, 335, 336, 338, 337, 1110, 214, 944, 1111, 487,
	488, 340, 341, 1112, 342, 343, 344, 1113, 1114, 346,
	347, 348, 1115, 1116, 349, 489, 945, 350, 946, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 1117, 358,
	359, 491, 360, 492, 361, 1118, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 1119, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 1120, 384, 947, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	1121, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 1122, 411, 391, 392, 412, 948, 413, 495, 414,
	415, 1123, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 1124, 427, 428, 426, 1125, 429,
	430, 431, 432, 433, 271, 434, 1126, 497, 498, 499,
	500, 1127, 441, 1128, 435, 436, 501, 437, 502, 1129,
	438, 439, 440, 0, 442, 443, 1130, 1131, 444, 445,
	446, 447, 448, 450, 1132, 451, 1133, 449, 452, 453,
	454, 503, 504, 505, 1134, 456, 455, 506, 1135, 1136,
	1137, 1138, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3065, 215,
	216, 217, 218, 219, 1061, 220, 1062, 1063, 1064, 1065,
	462, 1066, 1067, 1068, 1069, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 1070, 228, 229, 230,
	231, 232, 233, 1071, 1072, 234, 467, 468, 469, 1073,
	235, 470, 1074, 1059, 1075, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 1076, 245, 0, 246, 247,
	248, 1077, 934, 249, 250, 1078, 1079, 1081, 1080, 1082,
	1083, 1084, 251, 252, 253, 254, 255, 256, 471, 472,
	1085, 257, 1086, 259, 258, 1087, 260, 1088, 1089, 261,
	262, 263, 1090, 264, 1091, 265, 266, 1092, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	1093, 212, 1094, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 1095, 283, 1096, 1097, 935,
	284, 285, 1098, 286, 477, 1099, 478, 287, 1100, 288,
	289, 290, 291, 479, 480, 481, 339, 937, 292, 293,
	1101, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 1102, 936, 299, 482, 301, 300, 302, 303, 304,
	483, 1103, 484, 1104, 306, 938, 485, 939, 307, 308,
	309, 940, 310, 311, 0, 0, 312, 313, 314, 315,
	1105, 317, 316, 1106, 318, 486, 941, 319, 320, 942,
	1107, 321, 322, 1108, 1109, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 943, 335,
	336, 338, 337, 1110, 214, 944, 1111, 487, 488, 340,
	341, 1112, 342, 343, 344, 1113, 1114, 346, 347, 348,
	1115, 1116, 349, 489, 945, 350, 946, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 1117, 358, 359, 491,
	360, 492, 361, 1118, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 1119, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	1120, 384, 947, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 1121, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 1122,
	411, 391, 392, 412, 948, 413, 495, 414, 415, 1123,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 1124, 427, 428, 426, 1125, 429, 430, 431,
	432, 433, 271, 434, 1126, 497, 498, 499, 500, 1127,
	441, 1128, 435, 436, 501, 437, 502, 1129, 438, 439,
	440, 0, 442, 443, 1130, 1131, 444, 445, 446, 447,
	448, 450, 1132, 451, 1133, 449, 452, 453, 454, 503,
	504, 505, 1134, 456, 455, 506, 1135, 1136, 1137, 1138,
	457, 458, 507, 459, 460, 461, 1054, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3182, 0, 215, 216, 217, 218, 219, 1061, 220,
	1062, 1063, 1064, 1065, 462, 1066, 1067, 1068, 1069, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	1070, 228, 229, 230, 231, 232, 233, 1071, 1072, 234,
	467, 468, 469, 1073, 235, 470, 1074, 1059, 1075, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 1076,
	245, 0, 246, 247, 248, 1077, 934, 249, 250, 1078,
	1079, 1081, 1080, 1082, 1083, 1084, 251, 252, 253, 254,
	255, 256, 471, 472, 1085, 257, 1086, 259, 258, 1087,
	260, 1088, 1089, 261, 262, 263, 1090, 264, 1091, 265,
	266, 1092, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 1093, 212, 1094, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 1095,
	283, 1096, 1097, 935, 284, 285, 1098, 286, 477, 1099,
	478, 287, 1100, 288, 289, 290, 291, 479, 480, 481,
	339, 937, 292, 293, 1101, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 1102, 936, 299, 482, 301,
	300, 302, 303, 304, 483, 1103, 484, 1104, 306, 938,
	485, 939, 307, 308, 309, 940, 310, 311, 0, 0,
	312, 313, 314, 315, 1105, 317, 316, 1106, 318, 486,
	941, 319, 320, 942, 1107, 321, 322, 1108, 1109, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 943, 335, 336, 338, 337, 1110, 214, 944,
	1111, 487, 488, 340, 341, 1112, 342, 343, 344, 1113,
	1114, 346, 347, 348, 1115, 1116, 349, 489, 945, 350,
	946, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	1117, 358, 359, 491, 360, 492, 361, 1118, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 1119,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 1120, 384, 947, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 1121, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 1122, 411, 391, 392, 412, 948, 413,
	495, 414, 415, 1123, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 1124, 427, 428, 426,
	1125, 429, 430, 431, 432, 433, 271, 434, 1126, 497,
	498, 499, 500, 1127, 441, 1128, 435, 436, 501, 437,
	502, 1129, 438, 439, 440, 0, 442, 443, 1130, 1131,
	444, 445, 446, 447, 448, 450, 1132, 451, 1133, 449,
	452, 453, 454, 503, 504, 505, 1134, 456, 455, 506,
	1135, 1136, 1137, 1138, 457, 458, 507, 459, 460, 461,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2801, 0, 215, 216, 217,
	218, 219, 1061, 220, 1062, 1063, 1064, 1065, 462, 1066,
	1067, 1068, 1069, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 1070, 228, 229, 230, 231, 232,
	233, 1071, 1072, 234, 467, 468, 469, 1073, 235, 470,
	1074, 1059, 1075, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 1076, 245, 0, 246, 247, 248, 1077,
	934, 249, 250, 1078, 1079, 1081, 1080, 1082, 1083, 1084,
	251, 252, 253, 254, 255, 256, 471, 472, 1085, 257,
	1086, 259, 258, 1087, 260, 1088, 1089, 261, 262, 263,
	1090, 264, 1091, 265, 266, 1092, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 1093, 212,
	1094, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 1095, 283, 1096, 1097, 935, 284, 285,
	1098, 286, 477, 1099, 478, 287, 1100, 288, 289, 290,
	291, 479, 480, 481, 339, 937, 292, 293, 1101, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 1102,
	936, 299, 482, 301, 300, 302, 303, 304, 483, 1103,
	484, 1104, 306, 938, 485, 939, 307, 308, 309, 940,
	310, 311, 0, 0, 312, 313, 314, 315, 1105, 317,
	316, 1106, 318, 486, 941, 319, 320, 942, 1107, 321,
	322, 1108, 1109, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 943, 335, 336, 338,
	337, 1110, 214, 944, 1111, 487, 488, 340, 341, 1112,
	342, 343, 344, 1113, 1114, 346, 347, 348, 1115, 1116,
	349, 489, 945, 350, 946, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 1117, 358, 359, 491, 360, 492,
	361, 1118, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 1119, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 1120, 384,
	947, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 1121, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 1122, 411, 391,
	392, 412, 948, 413, 495, 414, 415, 1123, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	1124, 427, 428, 426, 1125, 429, 430, 431, 432, 433,
	271, 434, 1126, 497, 498, 499, 500, 1127, 441, 1128,
	435, 436, 501, 437, 502, 1129, 438, 439, 440, 0,
	442, 443, 1130, 1131, 444, 445, 446, 447, 448, 450,
	1132, 451, 1133, 449, 452, 453, 454, 503, 504, 505,
	1134, 456, 455, 506, 1135, 1136, 1137, 1138, 457, 458,
	507, 459, 460, 461, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2793,
	0, 215, 216, 217, 218, 219, 1061, 220, 1062, 1063,
	1064, 1065, 462, 1066, 1067, 1068, 1069, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 1070, 228,
	229, 230, 231, 232, 233, 1071, 1072, 234, 467, 468,
	469, 1073, 235, 470, 1074, 1059, 1075, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1076, 245, 0,
	246, 247, 248, 1077, 934, 249, 250, 1078, 1079, 1081,
	1080, 1082, 1083, 1084, 251, 252, 253, 254, 255, 256,
	471, 472, 1085, 257, 1086, 259, 258, 1087, 260, 1088,
	1089, 261, 262, 263, 1090, 264, 1091, 265, 266, 1092,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 1093, 212, 1094, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 1095, 283, 1096,
	1097, 935, 284, 285, 1098, 286, 477, 1099, 478, 287,
	1100, 288, 289, 290, 291, 479, 480, 481, 339, 937,
	292, 293, 1101, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 1102, 936, 299, 482, 301, 300, 302,
	303, 304, 483, 1103, 484, 1104, 306, 938, 485, 939,
	307, 308, 309, 940, 310, 311, 0, 0, 312, 313,
	314, 315, 1105, 317, 316, 1106, 318, 486, 941, 319,
	320, 942, 1107, 321, 322, 1108, 1109, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	943, 335, 336, 338, 337, 1110, 214, 944, 1111, 487,
	488, 340, 341, 1112, 342, 343, 344, 1113, 1114, 346,
	347, 348, 1115, 1116, 349, 489, 945, 350, 946, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 1117, 358,
	359, 491, 360, 492, 361, 1118, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 1119, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 1120, 384, 947, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	1121, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 1122, 411, 391, 392, 412, 948, 413, 495, 414,
	415, 1123, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 1124, 427, 428, 426, 1125, 429,
	430, 431, 432, 433, 271, 434, 1126, 497, 498, 499,
	500, 1127, 441, 1128, 435, 436, 501, 437, 502, 1129,
	438, 439, 440, 0, 442, 443, 1130, 1131, 444, 445,
	446, 447, 448, 450, 1132, 451, 1133, 449, 452, 453,
	454, 503, 504, 505, 1134, 456, 455, 506, 1135, 1136,
	1137, 1138, 457, 458, 507, 459, 460, 461, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2665, 0, 215, 216, 217, 218, 219,
	1061, 220, 1062, 1063, 1064, 1065, 462, 1066, 1067, 1068,
	1069, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 1070, 228, 229, 230, 231, 232, 233, 1071,
	1072, 234, 467, 468, 469, 1073, 235, 470, 1074, 1059,
	1075, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 1076, 245, 0, 246, 247, 248, 1077, 934, 249,
	250, 1078, 1079, 1081, 1080, 1082, 1083, 1084, 251, 252,
	253, 254, 255, 256, 471, 472, 1085, 257, 1086, 259,
	258, 1087, 260, 1088, 1089, 261, 262, 263, 1090, 264,
	1091, 265, 266, 1092, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 1093, 212, 1094, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 1095, 283, 1096, 1097, 935, 284, 285, 1098, 286,
	477, 1099, 478, 287, 1100, 288, 289, 290, 291, 479,
	480, 481, 339, 937, 292, 293, 1101, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1102, 936, 299,
	482, 301, 300, 302, 303, 304, 483, 1103, 484, 1104,
	306, 938, 485, 939, 307, 308, 309, 940, 310, 311,
	0, 0, 312, 313, 314, 315, 1105, 317, 316, 1106,
	318, 486, 941, 319, 320, 942, 1107, 321, 322, 1108,
	1109, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 943, 335, 336, 338, 337, 1110,
	214, 944, 1111, 487, 488, 340, 341, 1112, 342, 343,
	344, 1113, 1114, 346, 347, 348, 1115, 1116, 349, 489,
	945, 350, 946, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 1117, 358, 359, 491, 360, 492, 361, 1118,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 1119, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1120, 384, 947, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1121, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1122, 411, 391, 392, 412,
	948, 413, 495, 414, 415, 1123, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 1124, 427,
	428, 426, 1125, 429, 430, 431, 432, 433, 271, 434,
	1126, 497, 498, 499, 500, 1127, 441, 1128, 435, 436,
	501, 437, 502, 1129, 438, 439, 440, 0, 442, 443,
	1130, 1131, 444, 445, 446, 447, 448, 450, 1132, 451,
	1133, 449, 452, 453, 454, 503, 504, 505, 1134, 456,
	455, 506, 1135, 1136, 1137, 1138, 457, 458, 507, 459,
	460, 461, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2035, 0, 215,
	216, 217, 218, 219, 1061, 220, 1062, 1063, 1064, 1065,
	462, 1066, 1067, 1068, 1069, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 1070, 228, 229, 230,
	231, 232, 233, 1071, 1072, 234, 467, 468, 469, 1073,
	235, 470, 1074, 1059, 1075, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 1076, 245, 0, 246, 247,
	248, 1077, 934, 249, 250, 1078, 1079, 1081, 1080, 1082,
	1083, 1084, 251, 252, 253, 254, 255, 256, 471, 472,
	1085, 257, 1086, 259, 258, 1087, 260, 1088, 1089, 261,
	262, 263, 1090, 264, 1091, 265, 266, 1092, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	1093, 212, 1094, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 1095, 283, 1096, 1097, 935,
	284, 285, 1098, 286, 477, 1099, 478, 287, 1100, 288,
	289, 290, 291, 479, 480, 481, 339, 937, 292, 293,
	1101, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 1102, 936, 299, 482, 301, 300, 302, 303, 304,
	483, 1103, 484, 1104, 306, 938, 485, 939, 307, 308,
	309, 940, 310, 311, 0, 0, 312, 313, 314, 315,
	1105, 317, 316, 1106, 318, 486, 941, 319, 320, 942,
	1107, 321, 322, 1108, 1109, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 943, 335,
	336, 338, 337, 1110, 214, 944, 1111, 487, 488, 340,
	341, 1112, 342, 343, 344, 1113, 1114, 346, 347, 348,
	1115, 1116, 349, 489, 945, 350, 946, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 1117, 358, 359, 491,
	360, 492, 361, 1118, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 1119, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	1120, 384, 947, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 1121, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 1122,
	411, 391, 392, 412, 948, 413, 495, 414, 415, 1123,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 1124, 427, 428, 426, 1125, 429, 430, 431,
	432, 433, 271, 434, 1126, 497, 498, 499, 500, 1127,
	441, 1128, 435, 436, 501, 437, 502, 1129, 438, 439,
	440, 0, 442, 443, 1130, 1131, 444, 445, 446, 447,
	448, 450, 1132, 451, 1133, 449, 452, 453, 454, 503,
	504, 505, 1134, 456, 455, 506, 1135, 1136, 1137, 1138,
	457, 458, 507, 459, 460, 461, 1162, 0, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1764, 0, 0, 0, 215, 216, 217, 218, 219,
	1061, 220, 1062, 1063, 1064, 1065, 462, 1066, 1067, 1068,
	1069, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 1070, 228, 229, 230, 231, 232, 233, 1071,
	1072, 234, 467, 468, 469, 1073, 235, 470, 1074, 1059,
	1075, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 1076, 245, 0, 246, 247, 248, 1077, 934, 249,
	250, 1078, 1079, 1081, 1080, 1082, 1083, 1084, 251, 252,
	253, 254, 255, 256, 471, 472, 1085, 257, 1086, 259,
	258, 1087, 260, 1088, 1089, 261, 262, 263, 1090, 264,
	1091, 265, 266, 1092, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 1093, 212, 1094, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 1095, 283, 1096, 1097, 935, 284, 285, 1098, 286,
	477, 1099, 478, 287, 1100, 288, 289, 290, 291, 479,
	480, 481, 339, 937, 292, 293, 1101, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1102, 936, 299,
	482, 301, 300, 302, 303, 304, 483, 1103, 484, 1104,
	306, 938, 485, 939, 307, 308, 309, 940, 310, 311,
	0, 0, 312, 313, 314, 315, 1105, 317, 316, 1106,
	318, 486, 941, 319, 320, 942, 1107, 321, 322, 1108,
	1109, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 943, 335, 336, 338, 337, 1110,
	214, 944, 1111, 487, 488, 340, 341, 1112, 342, 343,
	344, 1113, 1114, 346, 347, 348, 1115, 1116, 349, 489,
	945, 350, 946, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 1117, 358, 359, 491, 360, 492, 361, 1118,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 1119, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1120, 384, 947, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1121, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1122, 411, 391, 392, 412,
	948, 413, 495, 414, 415, 1123, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 1124, 427,
	428, 426, 1125, 429, 430, 431, 432, 433, 271, 434,
	1126, 497, 498, 499, 500, 1127, 441, 1128, 435, 436,
	501, 437, 502, 1129, 438, 439, 440, 0, 442, 443,
	1130, 1131, 444, 445, 446, 447, 448, 450, 1132, 451,
	1133, 449, 452, 453, 454, 503, 504, 505, 1134, 456,
	455, 506, 1135, 1136, 1137, 1138, 457, 458, 507, 459,
	460, 461, 1051, 0, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 1061, 220, 1062, 1063,
	1064, 1065, 462, 1066, 1067, 1068, 1069, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 1070, 228,
	229, 230, 231, 232, 233, 1071, 1072, 234, 467, 468,
	469, 1073, 235, 470, 1074, 1059, 1075, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1076, 245, 0,
	246, 247, 248, 1077, 934, 249, 250, 1078, 1079, 1081,
	1080, 1082, 1083, 1084, 251, 252, 253, 254, 255, 256,
	471, 472, 1085, 257, 1086, 259, 258, 1087, 260, 1088,
	1089, 261, 262, 263, 1090, 264, 1091, 265, 266, 1092,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 1093, 212, 1094, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 1095, 283, 1096,
	1097, 935, 284, 285, 1098, 286, 477, 1099, 478, 287,
	1100, 288, 289, 290, 291, 479, 480, 481, 339, 937,
	292, 293, 1101, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 1102, 936, 299, 482, 301, 300, 302,
	303, 304, 483, 1103, 484, 1104, 306, 938, 485, 939,
	307, 308, 309, 940, 310, 311, 0, 0, 312, 313,
	314, 315, 1105, 317, 316, 1106, 318, 486, 941, 319,
	320, 942, 1107, 321, 322, 1108, 1109, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	943, 335, 336, 338, 337, 1110, 214, 944, 1111, 487,
	488, 340, 341, 1112, 342, 343, 344, 1113, 1114, 346,
	347, 348, 1115, 1116, 349, 489, 945, 350, 946, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 1117, 358,
	359, 491, 360, 492, 361, 1118, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 1119, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 1120, 384, 947, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	1121, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 1122, 411, 391, 392, 412, 948, 413, 495, 414,
	415, 1123, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 1124, 427, 428, 426, 1125, 429,
	430, 431, 432, 433, 271, 434, 1126, 497, 498, 499,
	500, 1127, 441, 1128, 435, 436, 501, 437, 502, 1129,
	438, 439, 440, 0, 442, 443, 1130, 1131, 444, 445,
	446, 447, 448, 450, 1132, 451, 1133, 449, 452, 453,
	454, 503, 504, 505, 1134, 456, 455, 506, 1135, 1136,
	1137, 1138, 457, 458, 507, 459, 460, 461, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	1061, 220, 1062, 1063, 1064, 1065, 462, 1066, 1067, 1068,
	1069, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 1070, 228, 229, 230, 231, 232, 233, 1071,
	1072, 234, 467, 468, 469, 1073, 235, 470, 1074, 1059,
	1075, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 1076, 245, 0, 246, 247, 248, 1077, 934, 249,
	250, 1078, 1079, 1081, 1080, 1082, 1083, 1084, 251, 252,
	253, 254, 255, 256, 471, 472, 1085, 257, 1086, 259,
	258, 1087, 260, 1088, 1089, 261, 262, 263, 1090, 264,
	1091, 265, 266, 1092, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 1093, 212, 1094, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 1095, 283, 1096, 1097, 935, 284, 285, 1098, 286,
	477, 1099, 478, 287, 1100, 288, 289, 290, 291, 479,
	480, 481, 339, 937, 292, 293, 1101, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1102, 936, 299,
	482, 301, 300, 302, 303, 304, 483, 1103, 484, 1104,
	306, 938, 485, 939, 307, 308, 309, 940, 310, 311,
	0, 0, 312, 313, 314, 315, 1105, 317, 316, 1106,
	318, 486, 941, 319, 320, 942, 1107, 321, 322, 1108,
	1109, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 943, 335, 336, 338, 337, 1110,
	214, 944, 1111, 487, 488, 340, 341, 1112, 342, 343,
	344, 1113, 1114, 346, 347, 348, 1115, 1116, 349, 489,
	945, 350, 946, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 1117, 358, 359, 491, 360, 492, 361, 1118,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 1119, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1120, 384, 947, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1121, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1122, 411, 391, 392, 412,
	948, 413, 495, 414, 415, 1123, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 1124, 427,
	428, 426, 1125, 429, 430, 431, 432, 433, 271, 434,
	1126, 497, 498, 499, 500, 1127, 441, 1128, 435, 436,
	501, 437, 502, 1129, 438, 439, 440, 0, 442, 443,
	1130, 1131, 444, 445, 446, 447, 448, 450, 1132, 451,
	1133, 449, 452, 453, 454, 503, 504, 505, 1134, 456,
	455, 506, 1135, 1136, 1137, 1138, 457, 458, 507, 459,
	460, 461, 2011, 0, 876, 833, 834, 835, 831, 832,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 2008, 220, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 221, 222, 223,
	224, 463, 891, 870, 902, 860, 901, 900, 0, 228,
	862, 861, 231, 232, 233, 852, 924, 234, 960, 961,
	469, 0, 235, 931, 0, 914, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 934, 249, 250, 917, 915, 916,
	921, 919, 918, 920, 251, 252, 253, 254, 905, 256,
	898, 897, 822, 257, 0, 259, 258, 0, 260, 2009,
	0, 261, 896, 263, 0, 264, 0, 265, 266, 0,
	828, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	951, 952, 841, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 895, 893, 894, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 958, 0, 851, 287,
	0, 288, 289, 290, 291, 926, 927, 930, 339, 937,
	292, 293, 0, 294, 295, 872, 0, 0, 0, 213,
	296, 298, 305, 0, 936, 299, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 306, 938, 928, 939,
	307, 308, 309, 940, 910, 911, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 959, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 864, 332,
	943, 335, 336, 338, 337, 819, 214, 944, 842, 929,
	899, 340, 341, 0, 873, 343, 874, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 953,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 954, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 892, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 829,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 865, 866, 868, 869, 402, 406, 409,
	410, 922, 411, 391, 392, 412, 948, 413, 887, 867,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 933,
	420, 421, 422, 955, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 863, 0, 906, 907, 908,
	909, 0, 441, 0, 435, 436, 956, 437, 957, 840,
	438, 439, 440, 0, 442, 443, 0, 823, 444, 445,
	446, 447, 448, 450, 923, 451, 0, 871, 452, 453,
	454, 503, 903, 950, 2007, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 820, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 2010, 0, 0, 0, 0, 0, 0,
	846, 2006, 0, 0, 809, 844, 876, 833, 834, 835,
	831, 832, 845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 925, 850, 0, 0, 0, 221,
	222, 223, 224, 463, 891, 870, 902, 860, 901, 900,
	0, 228, 862, 861, 231, 232, 233, 852, 924, 234,
	960, 961, 469, 0, 235, 931, 0, 914, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 934, 249, 250, 917,
	915, 916, 921, 919, 918, 920, 251, 252, 253, 254,
	905, 256, 898, 897, 822, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 896, 263, 0, 264, 0, 265,
	266, 0, 828, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 951, 952, 841, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 895, 893, 894, 0, 282, 0,
	283, 0, 0, 935, 284, 285, 0, 286, 958, 0,
	851, 287, 0, 288, 289, 290, 291, 926, 927, 930,
	339, 937, 292, 293, 0, 294, 295, 872, 0, 0,
	0, 213, 296, 298, 305, 0, 936, 299, 884, 875,
	886, 888, 889, 890, 885, 0, 877, 0, 306, 938,
	928, 939, 307, 308, 309, 940, 910, 911, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 959,
	941, 319, 320, 942, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	864, 332, 943, 335, 336, 338, 337, 819, 214, 944,
	842, 929, 899, 340, 341, 0, 873, 343, 874, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 945, 350,
	946, 953, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 954, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 892, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 947, 385, 386, 387,
	388, 829, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 178, 407, 408, 865, 866, 868, 869, 402,
	406, 409, 410, 922, 411, 391, 392, 412, 948, 413,
	887, 867, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 933, 420, 421, 422, 955, 0, 427, 428, 426,
	180, 429, 430, 431, 432, 433, 271, 863, 0, 906,
	907, 908, 909, 0, 441, 0, 435, 436, 956, 437,
	957, 840, 438, 439, 440, 0, 442, 443, 0, 823,
	444, 445, 446, 447, 448, 450, 923, 451, 0, 871,
	452, 453, 454, 1301, 903, 950, 0, 456, 455, 506,
	0, 0, 0, 172, 457, 458, 507, 459, 460, 461,
	820, 173, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 816, 817, 876, 833, 834, 835, 831,
	832, 845, 1492, 1490, 0, 0, 0, 844, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 925, 850, 0, 0, 0, 221, 222,
	223, 224, 463, 891, 870, 902, 860, 901, 900, 0,
	228, 862, 861, 231, 232, 233, 852, 924, 234, 960,
	961, 469, 0, 235, 931, 0, 914, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 934, 249, 250, 917, 915,
	916, 921, 919, 918, 920, 251, 252, 253, 254, 905,
	256, 898, 897, 822, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 896, 263, 0, 264, 0, 265, 266,
	0, 828, 267, 268, 270, 272, 269, 273, 274, 275,
	276, 951, 952, 841, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 895, 893, 894, 0, 282, 0, 283,
	0, 0, 935, 284, 285, 0, 286, 958, 0, 851,
	287, 0, 288, 289, 290, 291, 926, 927, 930, 339,
	937, 292, 293, 0, 294, 295, 872, 0, 0, 0,
	213, 296, 298, 305, 0, 936, 299, 884, 875, 886,
	888, 889, 890, 885, 0, 877, 0, 306, 938, 928,
	939, 307, 308, 309, 940, 910, 911, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 959, 941,
	319, 320, 942, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 864,
	332, 943, 335, 336, 338, 337, 819, 214, 944, 842,
	929, 899, 340, 341, 0, 873, 343, 874, 0, 0,
	346, 347, 348, 0, 0, 349, 489, 945, 350, 946,
	953, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 954, 360, 492, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 892, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 947, 385, 386, 387, 388,
	829, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 178, 407, 408, 865, 866, 868, 869, 402, 406,
	409, 410, 922, 411, 391, 392, 412, 948, 413, 887,
	867, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	933, 420, 421, 422, 955, 0, 427, 428, 426, 180,
	429, 430, 431, 432, 433, 271, 863, 0, 906, 907,
	908, 909, 0, 441, 0, 435, 436, 956, 437, 957,
	840, 438, 439, 440, 0, 442, 443, 0, 823, 444,
	445, 446, 447, 448, 450, 923, 451, 0, 871, 452,
	453, 454, 1301, 903, 950, 0, 456, 455, 506, 0,
	0, 0, 172, 457, 458, 507, 459, 460, 461, 820,
	173, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 816, 817, 876, 833, 834, 835, 831, 832,
	845, 1492, 2427, 0, 0, 0, 844, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 221, 222, 223,
	224, 463, 891, 870, 902, 860, 901, 900, 0, 228,
	862, 861, 231, 232, 233, 852, 924, 234, 960, 961,
	469, 0, 235, 931, 0, 914, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 934, 249, 250, 917, 915, 916,
	921, 919, 918, 920, 251, 252, 253, 254, 905, 256,
	898, 897, 822, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 896, 263, 0, 264, 0, 265, 266, 0,
	828, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	951, 952, 841, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 895, 893, 894, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 958, 0, 851, 287,
	0, 288, 289, 290, 291, 926, 927, 930, 339, 937,
	292, 293, 0, 294, 295, 872, 0, 0, 0, 213,
	296, 298, 305, 0, 936, 299, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 306, 938, 928, 939,
	307, 308, 309, 940, 910, 911, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 959, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 864, 332,
	943, 335, 336, 338, 337, 819, 214, 944, 842, 929,
	899, 340, 341, 0, 873, 343, 874, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 953,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 954, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 892, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 829,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	178, 407, 408, 865, 866, 868, 869, 402, 406, 409,
	410, 922, 411, 391, 392, 412, 948, 413, 887, 867,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 933,
	420, 421, 422, 955, 0, 427, 428, 426, 180, 429,
	430, 431, 432, 433, 271, 863, 0, 906, 907, 908,
	909, 0, 441, 0, 435, 436, 956, 437, 957, 840,
	438, 439, 440, 0, 442, 443, 0, 823, 444, 445,
	446, 447, 448, 450, 923, 451, 0, 871, 452, 453,
	454, 1301, 903, 950, 0, 456, 455, 506, 0, 0,
	0, 172, 457, 458, 507, 459, 460, 461, 820, 173,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 876, 833, 834, 835, 831, 832, 845,
	1492, 1490, 0, 0, 0, 844, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 925, 850, 0, 0, 0, 221, 222, 223, 224,
	463, 891, 870, 902, 860, 901, 900, 2096, 228, 862,
	861, 231, 232, 233, 852, 924, 234, 960, 961, 469,
	0, 235, 931, 0, 914, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 934, 249, 250, 917, 915, 916, 921,
	919, 918, 920, 251, 252, 253, 254, 905, 256, 898,
	897, 822, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 896, 263, 0, 264, 0, 265, 266, 0, 828,
	267, 268, 270, 272, 269, 273, 274, 275, 276, 951,
	952, 841, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 895, 893, 894, 0, 282, 0, 283, 0, 2101,
	935, 284, 285, 0, 286, 958, 0, 851, 287, 0,
	288, 289, 290, 291, 926, 927, 930, 339, 937, 292,
	293, 0, 294, 295, 872, 0, 0, 0, 213, 296,
	298, 305, 0, 936, 299, 884, 875, 886, 888, 889,
	890, 885, 0, 877, 0, 306, 938, 928, 939, 307,
	308, 309, 940, 910, 911, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 2097, 318, 959, 941, 319, 320,
	942, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 864, 332, 943,
	335, 336, 338, 337, 819, 214, 944, 842, 929, 899,
	340, 341, 0, 873, 343, 874, 0, 0, 346, 347,
	348, 0, 0, 349, 489, 945, 350, 946, 953, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	954, 360, 492, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 892, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 947, 385, 386, 387, 388, 829, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 865, 866, 868, 869, 402, 406, 409, 410,
	922, 411, 391, 392, 412, 948, 413, 887, 867, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 933, 420,
	421, 422, 955, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 863, 0, 906, 907, 908, 909,
	0, 441, 2098, 435, 436, 956, 437, 957, 840, 438,
	439, 440, 0, 442, 443, 0, 823, 444, 445, 446,
	447, 448, 450, 923, 451, 0, 871, 452, 453, 454,
	503, 903, 950, 0, 456, 455, 506, 0, 0, 0,
	0, 457, 458, 507, 459, 460, 461, 820, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	816, 817, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 812, 844, 876, 833, 834, 835, 831,
	832, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 925, 850, 0, 0, 0, 221, 222,
	223, 224, 463, 891, 870, 902, 860, 901, 900, 0,
	228, 862, 861, 231, 232, 233, 852, 924, 234, 960,
	961, 469, 0, 235, 931, 0, 914, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 934, 249, 250, 917, 915,
	916, 921, 919, 918, 920, 251, 252, 253, 254, 905,
	256, 898, 897, 822, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 896, 263, 0, 264, 0, 265, 266,
	0, 828, 267, 268, 270, 272, 269, 273, 274, 275,
	276, 951, 952, 841, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 895, 893, 894, 0, 282, 0, 283,
	0, 0, 935, 284, 285, 0, 286, 958, 0, 851,
	287, 0, 288, 289, 290, 291, 926, 927, 930, 339,
	937, 292, 293, 0, 294, 295, 872, 0, 0, 0,
	213, 296, 298, 305, 0, 936, 299, 884, 875, 886,
	888, 889, 890, 885, 0, 877, 0, 306, 938, 928,
	939, 307, 308, 309, 940, 910, 911, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 959, 941,
	319, 320, 942, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 864,
	332, 943, 335, 336, 338, 337, 819, 214, 944, 842,
	929, 899, 340, 341, 0, 873, 343, 874, 824, 0,
	346, 347, 348, 0, 0, 349, 489, 945, 350, 946,
	953, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 954, 360, 492, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 892, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 947, 385, 386, 387, 388,
	829, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 865, 866, 868, 869, 402, 406,
	409, 410, 922, 411, 391, 392, 412, 948, 413, 887,
	867, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	933, 420, 421, 422, 955, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 863, 0, 906, 907,
	908, 909, 0, 441, 0, 435, 436, 956, 437, 957,
	840, 438, 439, 440, 0, 442, 443, 0, 823, 444,
	445, 446, 447, 448, 450, 923, 451, 0, 871, 452,
	453, 454, 503, 903, 950, 0, 456, 455, 506, 0,
	0, 0, 0, 457, 458, 507, 459, 460, 461, 820,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 816, 817, 876, 833, 834, 835, 831, 832,
	845, 846, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 221, 222, 223,
	224, 463, 891, 870, 902, 860, 901, 900, 0, 228,
	862, 861, 231, 232, 233, 852, 924, 234, 960, 961,
	469, 0, 235, 931, 0, 914, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 3380, 248, 0, 934, 249, 250, 917, 915, 916,
	921, 919, 918, 920, 251, 252, 253, 254, 905, 256,
	898, 897, 822, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 896, 263, 0, 264, 0, 265, 266, 0,
	828, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	951, 952, 841, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 895, 893, 894, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 958, 0, 851, 287,
	0, 288, 289, 290, 291, 926, 927, 930, 339, 937,
	292, 293, 0, 294, 295, 872, 0, 0, 0, 213,
	296, 298, 305, 0, 936, 299, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 306, 938, 928, 939,
	307, 308, 309, 940, 910, 911, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 959, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 864, 332,
	943, 335, 336, 338, 337, 819, 214, 944, 842, 929,
	899, 340, 341, 0, 873, 343, 874, 824, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 953,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 954, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 892, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 829,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 865, 866, 868, 869, 402, 406, 409,
	410, 922, 411, 391, 392, 412, 948, 413, 887, 867,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 933,
	420, 421, 422, 955, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 863, 0, 906, 907, 908,
	909, 0, 441, 0, 435, 436, 956, 437, 957, 840,
	438, 439, 440, 0, 442, 443, 0, 823, 444, 445,
	446, 447, 448, 450, 923, 451, 0, 871, 452, 453,
	454, 503, 903, 950, 0, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 820, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 876, 833, 834, 835, 831, 832, 845,
	846, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 925, 850, 0, 0, 0, 221, 222, 223, 224,
	463, 891, 870, 902, 860, 901, 900, 0, 228, 862,
	861, 231, 232, 233, 852, 924, 234, 960, 961, 469,
	0, 235, 931, 0, 914, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	3239, 248, 0, 934, 249, 250, 917, 915, 916, 921,
	919, 918, 920, 251, 252, 253, 254, 905, 256, 898,
	897, 822, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 896, 263, 0, 264, 0, 265, 266, 0, 828,
	267, 268, 270, 272, 269, 273, 274, 275, 276, 951,
	952, 841, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 895, 893, 894, 0, 282, 0, 283, 0, 0,
	935, 284, 285, 0, 286, 958, 0, 851, 287, 0,
	288, 289, 290, 291, 926, 927, 930, 339, 937, 292,
	293, 0, 294, 295, 872, 0, 0, 0, 213, 296,
	298, 305, 0, 936, 299, 884, 875, 886, 888, 889,
	890, 885, 0, 877, 0, 306, 938, 928, 939, 307,
	308, 309, 940, 910, 911, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 959, 941, 319, 320,
	942, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 864, 332, 943,
	335, 336, 338, 337, 819, 214, 944, 842, 929, 899,
	340, 341, 0, 873, 343, 874, 824, 0, 346, 347,
	348, 0, 0, 349, 489, 945, 350, 946, 953, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	954, 360, 492, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 892, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 947, 385, 386, 387, 388, 829, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 865, 866, 868, 869, 402, 406, 409, 410,
	922, 411, 391, 392, 412, 948, 413, 887, 867, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 933, 420,
	421, 422, 955, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 863, 0, 906, 907, 908, 909,
	0, 441, 0, 435, 436, 956, 437, 957, 840, 438,
	439, 440, 0, 442, 443, 0, 823, 444, 445, 446,
	447, 448, 450, 923, 451, 0, 871, 452, 453, 454,
	503, 903, 950, 0, 456, 455, 506, 0, 0, 0,
	0, 457, 458, 507, 459, 460, 461, 820, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	816, 817, 876, 833, 834, 835, 831, 832, 845, 846,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	925, 850, 0, 0, 0, 221, 222, 223, 224, 463,
	891, 870, 902, 860, 901, 900, 0, 228, 862, 861,
	231, 232, 233, 852, 924, 234, 960, 961, 469, 0,
	235, 931, 0, 914, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 934, 249, 250, 917, 915, 916, 921, 919,
	918, 920, 251, 252, 253, 254, 905, 256, 898, 897,
	822, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	896, 263, 0, 264, 0, 265, 266, 0, 828, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 951, 952,
	841, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	895, 893, 894, 0, 282, 0, 283, 0, 0, 935,
	284, 285, 0, 286, 958, 0, 851, 287, 0, 288,
	289, 290, 291, 926, 927, 930, 339, 937, 292, 293,
	0, 294, 295, 872, 0, 0, 0, 213, 296, 298,
	305, 0, 936, 299, 884, 875, 886, 888, 889, 890,
	885, 0, 877, 0, 306, 938, 928, 939, 307, 308,
	309, 940, 910, 911, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 959, 941, 319, 320, 942,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 864, 332, 943, 335,
	336, 338, 337, 819, 2973, 944, 842, 929, 899, 340,
	341, 0, 873, 343, 874, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 945, 350, 946, 953, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 954,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 892, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 947, 385, 386, 387, 388, 829, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 865, 866, 868, 869, 402, 406, 409, 410, 922,
	411, 391, 392, 412, 948, 413, 887, 867, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 933, 420, 421,
	422, 955, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 863, 0, 906, 907, 908, 909, 0,
	441, 0, 435, 436, 956, 437, 957, 840, 438, 439,
	440, 0, 442, 443, 0, 823, 444, 445, 446, 447,
	448, 450, 923, 451, 0, 871, 452, 453, 454, 503,
	903, 950, 0, 456, 455, 506, 0, 0, 0, 0,
	457, 458, 507, 459, 460, 461, 820, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 816,
	817, 1552, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 844, 876, 833, 834, 835, 831, 832,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 221, 222, 223,
	224, 463, 891, 870, 902, 860, 901, 900, 0, 228,
	862, 861, 231, 232, 233, 852, 924, 234, 960, 961,
	469, 0, 235, 931, 0, 914, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 934, 249, 250, 917, 915, 916,
	921, 919, 918, 920, 251, 252, 253, 254, 905, 256,
	898, 897, 822, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 896, 263, 0, 264, 0, 265, 266, 0,
	828, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	951, 952, 841, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 895, 893, 894, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 958, 0, 851, 287,
	0, 288, 289, 290, 291, 926, 927, 930, 339, 937,
	292, 293, 0, 294, 295, 872, 0, 0, 0, 213,
	296, 298, 305, 0, 936, 299, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 306, 938, 928, 939,
	307, 308, 309, 940, 910, 911, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 959, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 864, 332,
	943, 335, 336, 338, 337, 819, 214, 944, 842, 929,
	899, 340, 341, 0, 873, 343, 874, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 953,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 954, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 892, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 829,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 865, 866, 868, 869, 402, 406, 409,
	410, 922, 411, 391, 392, 412, 948, 413, 887, 867,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 933,
	420, 421, 422, 955, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 863, 0, 906, 907, 908,
	909, 0, 441, 0, 435, 436, 956, 437, 957, 840,
	438, 439, 440, 0, 442, 443, 0, 823, 444, 445,
	446, 447, 448, 450, 923, 451, 0, 871, 452, 453,
	454, 503, 903, 950, 2780, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 820, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 876, 833, 834, 835, 831, 832, 845,
	846, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 925, 850, 0, 0, 0, 221, 222, 223, 224,
	463, 891, 870, 902, 860, 901, 900, 0, 228, 862,
	861, 231, 232, 233, 852, 924, 234, 960, 961, 469,
	0, 235, 931, 0, 914, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 934, 249, 250, 917, 915, 916, 921,
	919, 918, 920, 251, 252, 253, 254, 905, 256, 898,
	897, 822, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 896, 263, 0, 264, 0, 265, 266, 0, 828,
	267, 268, 270, 272, 269, 273, 274, 275, 276, 951,
	952, 841, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 895, 893, 894, 0, 282, 0, 283, 0, 0,
	935, 284, 285, 0, 286, 958, 0, 851, 287, 0,
	288, 289, 290, 291, 926, 927, 930, 339, 937, 292,
	293, 0, 294, 295, 872, 0, 0, 0, 1925, 296,
	298, 305, 0, 936, 299, 884, 875, 886, 888, 889,
	890, 885, 0, 877, 0, 306, 938, 928, 939, 307,
	308, 309, 940, 910, 911, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 959, 941, 319, 320,
	942, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 864, 332, 943,
	335, 336, 338, 337, 819, 214, 944, 842, 929, 899,
	340, 341, 0, 873, 343, 874, 0, 0, 346, 347,
	348, 0, 0, 349, 489, 945, 350, 946, 953, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	954, 360, 492, 361, 1924, 362, 0, 363, 364, 365,
	366, 367, 368, 892, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 947, 385, 386, 387, 388, 829, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 865, 866, 868, 869, 402, 406, 409, 410,
	922, 411, 391, 392, 412, 948, 413, 887, 867, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 933, 420,
	421, 422, 955, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 863, 0, 906, 907, 908, 909,
	0, 441, 0, 435, 436, 956, 437, 957, 840, 438,
	439, 440, 0, 442, 443, 0, 823, 444, 445, 446,
	447, 448, 450, 923, 451, 0, 871, 452, 453, 454,
	503, 903, 950, 0, 456, 455, 506, 0, 0, 0,
	0, 457, 458, 507, 459, 460, 461, 820, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	816, 817, 876, 833, 834, 835, 831, 832, 845, 846,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	925, 850, 0, 0, 0, 221, 222, 223, 224, 463,
	891, 870, 902, 860, 901, 900, 0, 228, 862, 861,
	231, 232, 233, 852, 924, 234, 960, 961, 469, 0,
	235, 931, 0, 914, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 934, 249, 250, 917, 915, 916, 921, 919,
	918, 920, 251, 252, 253, 254, 905, 256, 898, 897,
	822, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	896, 263, 0, 264, 0, 265, 266, 0, 828, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 951, 952,
	841, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	895, 893, 894, 0, 282, 0, 283, 0, 0, 935,
	284, 285, 0, 286, 958, 0, 851, 287, 0, 288,
	289, 290, 291, 926, 927, 930, 339, 937, 292, 293,
	0, 294, 295, 872, 0, 0, 0, 213, 296, 298,
	305, 0, 936, 299, 884, 875, 886, 888, 889, 890,
	885, 0, 877, 0, 306, 938, 928, 939, 307, 308,
	309, 940, 910, 911, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 959, 941, 319, 320, 942,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 864, 332, 943, 335,
	336, 338, 337, 819, 214, 944, 842, 929, 899, 340,
	341, 0, 873, 343, 874, 824, 0, 346, 347, 348,
	0, 0, 349, 489, 945, 350, 946, 953, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 954,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 892, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 947, 385, 386, 387, 388, 829, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 865, 866, 868, 869, 402, 406, 409, 410, 922,
	411, 391, 392, 412, 948, 413, 887, 867, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 933, 420, 421,
	422, 955, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 863, 0, 906, 907, 908, 909, 0,
	441, 0, 435, 436, 956, 437, 957, 840, 438, 439,
	440, 0, 442, 443, 0, 823, 444, 445, 446, 447,
	448, 450, 923, 451, 0, 871, 452, 453, 454, 503,
	903, 950, 0, 456, 455, 506, 0, 0, 0, 0,
	457, 458, 507, 459, 460, 461, 820, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 816,
	817, 876, 833, 834, 835, 831, 832, 845, 846, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 925,
	850, 0, 0, 0, 221, 222, 223, 224, 463, 891,
	870, 902, 860, 901, 900, 0, 228, 862, 861, 231,
	232, 233, 852, 924, 234, 960, 961, 469, 0, 235,
	931, 0, 914, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 934, 249, 250, 917, 915, 916, 921, 919, 918,
	920, 251, 252, 253, 254, 905, 256, 898, 897, 822,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 896,
	263, 0, 264, 0, 265, 266, 0, 828, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 951, 952, 841,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 895,
	893, 894, 0, 282, 0, 283, 0, 0, 935, 284,
	285, 0, 286, 958, 0, 851, 287, 0, 288, 289,
	290, 291, 926, 927, 930, 339, 937, 292, 293, 0,
	294, 295, 872, 0, 0, 0, 213, 296, 298, 305,
	0, 936, 299, 884, 875, 886, 888, 889, 890, 885,
	0, 877, 0, 306, 938, 928, 939, 307, 308, 309,
	940, 910, 911, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 959, 941, 319, 320, 942, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 864, 332, 943, 335, 336,
	338, 337, 819, 214, 944, 842, 929, 899, 340, 341,
	0, 873, 343, 874, 0, 0, 346, 347, 348, 0,
	0, 349, 489, 945, 350, 946, 953, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 954, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 892, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 947, 385, 386, 387, 388, 829, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	865, 866, 868, 869, 402, 406, 409, 410, 922, 411,
	391, 392, 412, 948, 413, 887, 867, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 933, 420, 421, 422,
	955, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 863, 0, 906, 907, 908, 909, 0, 441,
	0, 435, 436, 956, 437, 957, 840, 438, 439, 440,
	0, 442, 443, 0, 823, 444, 445, 446, 447, 448,
	450, 923, 451, 0, 871, 452, 453, 454, 503, 903,
	950, 0, 456, 455, 506, 0, 0, 0, 0, 457,
	458, 507, 459, 460, 461, 820, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 816, 817,
	1552, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 844, 876, 833, 834, 835, 831, 832, 845,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 925, 850, 0, 0, 0, 221, 222, 223, 224,
	463, 891, 870, 902, 860, 901, 900, 0, 228, 862,
	861, 231, 232, 233, 852, 924, 234, 960, 961, 469,
	0, 235, 931, 0, 914, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 934, 249, 250, 917, 915, 916, 921,
	919, 918, 920, 251, 252, 253, 254, 905, 256, 898,
	897, 822, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 896, 263, 0, 264, 0, 265, 266, 0, 828,
	267, 268, 270, 272, 269, 273, 274, 275, 276, 951,
	952, 841, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 895, 893, 894, 0, 282, 0, 283, 0, 2101,
	935, 284, 285, 0, 286, 958, 0, 851, 287, 0,
	288, 289, 290, 291, 926, 927, 930, 339, 937, 292,
	293, 0, 294, 295, 872, 0, 0, 0, 213, 296,
	298, 305, 0, 936, 299, 884, 875, 886, 888, 889,
	890, 885, 0, 877, 0, 306, 938, 928, 939, 307,
	308, 309, 940, 910, 911, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 959, 941, 319, 320,
	942, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 864, 332, 943,
	335, 336, 338, 337, 819, 214, 944, 842, 929, 899,
	340, 341, 0, 873, 343, 874, 0, 0, 346, 347,
	348, 0, 0, 349, 489, 945, 350, 946, 953, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	954, 360, 492, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 892, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 947, 385, 386, 387, 388, 829, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 865, 866, 868, 869, 402, 406, 409, 410,
	922, 411, 391, 392, 412, 948, 413, 887, 867, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 933, 420,
	421, 422, 955, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 863, 0, 906, 907, 908, 909,
	0, 441, 0, 435, 436, 956, 437, 957, 840, 438,
	439, 440, 0, 442, 443, 0, 823, 444, 445, 446,
	447, 448, 450, 923, 451, 0, 871, 452, 453, 454,
	503, 903, 950, 0, 456, 455, 506, 0, 0, 0,
	0, 457, 458, 507, 459, 460, 461, 820, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	816, 817, 876, 833, 834, 835, 831, 832, 845, 846,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	925, 850, 0, 0, 0, 221, 222, 223, 224, 463,
	891, 870, 902, 860, 901, 900, 0, 228, 862, 861,
	231, 232, 233, 852, 924, 234, 960, 961, 469, 0,
	235, 931, 0, 914, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 934, 249, 250, 917, 915, 916, 921, 919,
	918, 920, 251, 252, 253, 254, 905, 256, 898, 897,
	822, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	896, 263, 0, 264, 0, 265, 266, 0, 828, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 951, 952,
	841, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	895, 893, 894, 0, 282, 0, 283, 0, 0, 935,
	284, 285, 0, 286, 958, 0, 851, 287, 0, 288,
	289, 290, 291, 926, 927, 930, 339, 937, 292, 293,
	0, 294, 295, 872, 0, 0, 0, 213, 296, 298,
	305, 0, 936, 299, 884, 875, 886, 888, 889, 890,
	885, 0, 877, 0, 306, 938, 928, 939, 307, 308,
	309, 940, 910, 911, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 959, 941, 319, 320, 942,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 864, 332, 943, 335,
	336, 338, 337, 819, 214, 944, 842, 929, 899, 340,
	341, 0, 873, 343, 874, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 945, 350, 946, 953, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 954,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 892, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 947, 385, 386, 387, 388, 829, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 865, 866, 868, 869, 402, 406, 409, 410, 922,
	411, 391, 392, 412, 948, 413, 887, 867, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 933, 420, 421,
	422, 955, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 863, 0, 906, 907, 908, 909, 0,
	441, 0, 435, 436, 956, 437, 957, 840, 438, 439,
	440, 0, 442, 443, 0, 823, 444, 445, 446, 447,
	448, 450, 923, 451, 0, 871, 452, 453, 454, 503,
	903, 950, 0, 456, 455, 506, 0, 0, 0, 0,
	457, 458, 507, 459, 460, 461, 820, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 816,
	817, 0, 0, 0, 0, 0, 0, 0, 846, 1490,
	0, 0, 2106, 844, 876, 833, 834, 835, 831, 832,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 221, 222, 223,
	224, 463, 891, 870, 902, 860, 901, 900, 0, 228,
	862, 861, 231, 232, 233, 852, 924, 234, 960, 961,
	469, 0, 235, 931, 0, 914, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 934, 249, 250, 917, 915, 916,
	921, 919, 918, 920, 251, 252, 253, 254, 905, 256,
	898, 897, 822, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 896, 263, 0, 264, 0, 265, 266, 0,
	828, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	951, 952, 841, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 895, 893, 894, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 958, 0, 851, 287,
	0, 288, 289, 290, 291, 926, 927, 930, 339, 937,
	292, 293, 0, 294, 295, 872, 0, 0, 0, 213,
	296, 298, 305, 0, 936, 299, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 306, 938, 928, 939,
	307, 308, 309, 940, 910, 911, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 959, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 864, 332,
	943, 335, 336, 338, 337, 819, 214, 944, 842, 929,
	899, 340, 341, 0, 873, 343, 874, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 953,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 954, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 892, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 829,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 865, 866, 868, 869, 402, 406, 409,
	410, 922, 411, 391, 392, 412, 948, 413, 887, 867,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 933,
	420, 421, 422, 955, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 863, 0, 906, 907, 908,
	909, 0, 441, 0, 435, 436, 956, 437, 957, 840,
	438, 439, 440, 0, 442, 443, 0, 823, 444, 445,
	446, 447, 448, 450, 923, 451, 0, 871, 452, 453,
	454, 503, 903, 950, 0, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 820, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 2104, 844, 876, 833, 834, 835,
	831, 832, 845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 925, 850, 0, 0, 0, 221,
	222, 223, 224, 463, 891, 870, 902, 860, 901, 900,
	0, 228, 862, 861, 231, 232, 233, 852, 924, 234,
	960, 961, 469, 0, 235, 931, 0, 914, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 934, 249, 250, 917,
	915, 916, 921, 919, 918, 920, 251, 252, 253, 254,
	905, 256, 898, 897, 822, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 896, 263, 0, 264, 0, 265,
	266, 0, 828, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 951, 952, 841, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 895, 893, 894, 0, 282, 0,
	283, 0, 0, 935, 284, 285, 0, 286, 958, 0,
	851, 287, 0, 288, 289, 290, 291, 926, 927, 930,
	339, 937, 292, 293, 0, 294, 295, 872, 0, 0,
	0, 213, 296, 298, 305, 0, 936, 299, 884, 875,
	886, 888, 889, 890, 885, 0, 877, 0, 306, 938,
	928, 939, 307, 308, 309, 940, 910, 911, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 959,
	941, 319, 320, 942, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	864, 332, 943, 335, 336, 338, 337, 819, 214, 944,
	842, 929, 899, 340, 341, 0, 873, 343, 874, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 945, 350,
	946, 953, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 954, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 892, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 947, 385, 386, 387,
	388, 829, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 865, 866, 868, 869, 402,
	406, 409, 410, 922, 411, 391, 392, 412, 948, 413,
	887, 867, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 933, 420, 421, 422, 955, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 863, 0, 906,
	907, 908, 909, 0, 441, 0, 435, 436, 956, 437,
	957, 840, 438, 439, 440, 0, 442, 443, 0, 823,
	444, 445, 446, 447, 448, 450, 923, 451, 0, 871,
	452, 453, 454, 503, 903, 950, 0, 456, 455, 506,
	0, 0, 0, 0, 457, 458, 507, 459, 460, 461,
	820, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 816, 817, 0, 0, 0, 0, 0,
	0, 0, 846, 0, 0, 0, 2092, 844, 876, 833,
	834, 835, 831, 832, 845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 925, 850, 0, 0,
	0, 221, 222, 223, 224, 463, 891, 870, 902, 860,
	901, 900, 0, 228, 862, 861, 231, 232, 233, 852,
	924, 234, 960, 961, 469, 0, 235, 931, 0, 914,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 934, 249,
	250, 917, 915, 916, 921, 919, 918, 920, 251, 252,
	253, 254, 905, 256, 898, 897, 822, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 896, 263, 0, 264,
	0, 265, 266, 0, 828, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 951, 952, 841, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 895, 893, 894, 0,
	282, 0, 283, 0, 0, 935, 284, 285, 0, 286,
	958, 0, 851, 287, 0, 288, 289, 290, 291, 926,
	927, 930, 339, 937, 292, 293, 0, 294, 295, 872,
	0, 0, 0, 213, 296, 298, 305, 0, 936, 299,
	884, 875, 886, 888, 889, 890, 885, 0, 877, 0,
	306, 938, 928, 939, 307, 308, 309, 940, 910, 911,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 959, 941, 319, 320, 942, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 864, 332, 943, 335, 336, 338, 337, 819,
	214, 944, 842, 929, 899, 340, 341, 0, 873, 343,
	874, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	945, 350, 946, 953, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 954, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 892, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 947, 385,
	386, 387, 388, 829, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 865, 866, 868,
	869, 402, 406, 409, 410, 922, 411, 391, 392, 412,
	948, 413, 887, 867, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 933, 420, 421, 422, 955, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 863,
	0, 906, 907, 908, 909, 0, 441, 0, 435, 436,
	956, 437, 957, 840, 438, 439, 440, 0, 442, 443,
	0, 823, 444, 445, 446, 447, 448, 450, 923, 451,
	0, 871, 452, 453, 454, 503, 903, 950, 0, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 820, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 816, 817, 0, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 0, 2081, 844,
	876, 833, 834, 835, 831, 832, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 221, 222, 223, 224, 463, 891, 870,
	902, 860, 901, 900, 0, 228, 862, 861, 231, 232,
	233, 852, 924, 234, 960, 961, 469, 0, 235, 931,
	0, 914, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	934, 249, 250, 917, 915, 916, 921, 919, 918, 920,
	251, 252, 253, 254, 905, 256, 898, 897, 822, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 896, 263,
	0, 264, 0, 265, 266, 0, 828, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 951, 952, 841, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 895, 893,
	894, 0, 282, 0, 283, 0, 0, 935, 284, 285,
	0, 286, 958, 0, 851, 287, 0, 288, 289, 290,
	291, 926, 927, 930, 339, 937, 292, 293, 0, 294,
	295, 872, 0, 0, 0, 213, 296, 298, 305, 0,
	936, 299, 884, 875, 886, 888, 889, 890, 885, 0,
	877, 0, 306, 938, 928, 939, 307, 308, 309, 940,
	910, 911, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 959, 941, 319, 320, 942, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 864, 332, 943, 335, 336, 338,
	337, 819, 214, 944, 842, 929, 899, 340, 341, 0,
	873, 343, 874, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 945, 350, 946, 953, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 954, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	892, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	947, 385, 386, 387, 388, 829, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 865,
	866, 868, 869, 402, 406, 409, 410, 922, 411, 391,
	392, 412, 948, 413, 887, 867, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 933, 420, 421, 422, 955,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 863, 0, 906, 907, 908, 909, 0, 441, 0,
	435, 436, 956, 437, 957, 840, 438, 439, 440, 0,
	442, 443, 0, 823, 444, 445, 446, 447, 448, 450,
	923, 451, 0, 871, 452, 453, 454, 503, 903, 950,
	0, 456, 455, 506, 0, 0, 0, 0, 457, 458,
	507, 459, 460, 461, 820, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	2079, 844, 2071, 833, 834, 835, 831, 832, 845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	925, 850, 0, 0, 0, 221, 222, 223, 224, 463,
	891, 870, 902, 860, 901, 900, 0, 228, 862, 861,
	231, 232, 233, 852, 924, 234, 960, 961, 469, 0,
	235, 931, 0, 914, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 934, 249, 250, 917, 915, 916, 921, 919,
	918, 920, 251, 252, 253, 254, 905, 2074, 898, 897,
	822, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	896, 263, 0, 264, 0, 265, 266, 0, 828, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 951, 952,
	841, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	895, 893, 894, 0, 282, 0, 283, 0, 0, 935,
	284, 285, 0, 286, 958, 0, 851, 287, 0, 288,
	289, 290, 2075, 926, 927, 930, 339, 937, 292, 293,
	0, 294, 295, 872, 0, 0, 0, 213, 296, 298,
	305, 0, 936, 299, 884, 875, 886, 888, 889, 890,
	885, 0, 877, 0, 306, 938, 928, 939, 307, 308,
	309, 940, 910, 911, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 959, 941, 319, 320, 942,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 2076, 2073, 333, 864, 332, 943, 335,
	336, 338, 337, 819, 214, 944, 842, 929, 899, 340,
	341, 0, 873, 343, 874, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 945, 350, 946, 953, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 954,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 892, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 947, 385, 386, 387, 388, 829, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 2077, 0, 407,
	408, 865, 866, 868, 869, 402, 406, 409, 410, 922,
	411, 391, 392, 412, 948, 413, 887, 867, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 933, 420, 421,
	422, 955, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 863, 0, 906, 907, 908, 909, 0,
	441, 0, 435, 436, 956, 437, 957, 840, 438, 439,
	440, 0, 442, 443, 0, 823, 444, 445, 446, 447,
	448, 450, 923, 451, 0, 871, 452, 453, 454, 503,
	903, 950, 0, 456, 455, 506, 0, 0, 0, 0,
	457, 458, 507, 459, 2072, 461, 820, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 816,
	817, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 2068, 844, 2071, 833, 834, 835, 831, 832,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 221, 222, 223,
	224, 463, 891, 870, 902, 860, 901, 900, 0, 228,
	862, 861, 231, 232, 233, 852, 924, 234, 960, 961,
	469, 0, 235, 931, 0, 914, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 934, 249, 250, 917, 915, 916,
	921, 919, 918, 920, 251, 252, 253, 254, 905, 2074,
	898, 897, 822, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 896, 263, 0, 264, 0, 265, 266, 0,
	828, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	951, 952, 841, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 895, 893, 894, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 958, 0, 851, 287,
	0, 288, 289, 290, 2075, 926, 927, 930, 339, 937,
	292, 293, 0, 294, 295, 872, 0, 0, 0, 213,
	296, 298, 305, 0, 936, 299, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 306, 938, 928, 939,
	307, 308, 309, 940, 910, 911, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 959, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 2076, 2073, 333, 864, 332,
	943, 335, 336, 338, 337, 819, 214, 944, 842, 929,
	899, 340, 341, 0, 873, 343, 874, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 953,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 954, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 892, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 829,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 2077,
	0, 407, 408, 865, 866, 868, 869, 402, 406, 409,
	410, 922, 411, 391, 392, 412, 948, 413, 887, 867,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 933,
	420, 421, 422, 955, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 863, 0, 906, 907, 908,
	909, 0, 441, 0, 435, 436, 956, 437, 957, 840,
	438, 439, 440, 0, 442, 443, 0, 823, 444, 445,
	446, 447, 448, 450, 923, 451, 0, 871, 452, 453,
	454, 503, 903, 950, 0, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 2072, 461, 820, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 876, 833, 834, 835, 831, 832, 845,
	846, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 925, 850, 0, 0, 0, 221, 222, 223, 224,
	463, 891, 870, 902, 860, 901, 900, 0, 228, 862,
	861, 231, 232, 233, 852, 924, 234, 960, 961, 469,
	0, 235, 931, 0, 914, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 934, 249, 250, 917, 915, 916, 921,
	919, 918, 920, 251, 252, 253, 254, 905, 256, 898,
	897, 822, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 896, 263, 0, 264, 0, 265, 266, 0, 828,
	267, 268, 270, 272, 269, 273, 274, 275, 276, 951,
	952, 841, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 895, 893, 894, 0, 282, 0, 283, 0, 0,
	935, 284, 285, 0, 286, 958, 0, 851, 287, 0,
	288, 289, 290, 291, 926, 927, 930, 339, 937, 292,
	293, 0, 294, 295, 872, 0, 0, 0, 213, 296,
	298, 305, 0, 936, 299, 884, 875, 886, 888, 889,
	890, 885, 0, 877, 0, 306, 938, 928, 939, 307,
	308, 309, 940, 910, 911, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 959, 941, 319, 320,
	942, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 864, 332, 943,
	335, 336, 338, 337, 819, 214, 944, 842, 929, 899,
	340, 341, 0, 873, 343, 874, 0, 0, 346, 347,
	348, 0, 0, 349, 489, 945, 350, 946, 953, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	954, 360, 492, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 892, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 947, 385, 386, 387, 388, 829, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 865, 866, 868, 869, 402, 406, 409, 410,
	922, 411, 391, 392, 412, 948, 413, 887, 867, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 933, 420,
	421, 422, 955, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 863, 0, 906, 907, 908, 909,
	0, 441, 0, 435, 436, 956, 437, 957, 840, 438,
	439, 440, 0, 442, 443, 0, 823, 444, 445, 446,
	447, 448, 450, 923, 451, 0, 871, 452, 453, 454,
	503, 903, 950, 0, 456, 455, 506, 0, 0, 0,
	0, 457, 458, 507, 459, 460, 461, 820, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	816, 817, 0, 0, 0, 0, 0, 1498, 0, 846,
	0, 0, 0, 0, 844, 876, 833, 834, 835, 831,
	832, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 1912, 220, 0,
	0, 0, 0, 925, 850, 0, 0, 0, 221, 222,
	223, 224, 463, 891, 870, 902, 860, 901, 900, 0,
	228, 862, 861, 231, 232, 233, 852, 924, 234, 960,
	961, 469, 0, 235, 931, 0, 914, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 934, 249, 250, 917, 915,
	916, 921, 919, 918, 920, 251, 252, 253, 254, 905,
	256, 898, 897, 822, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 896, 263, 0, 264, 0, 265, 266,
	0, 828, 267, 268, 270, 272, 269, 273, 274, 275,
	276, 951, 952, 841, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 895, 893, 894, 0, 282, 0, 283,
	0, 0, 935, 284, 285, 0, 286, 958, 0, 851,
	287, 0, 288, 289, 290, 291, 926, 927, 930, 339,
	937, 292, 293, 0, 294, 295, 872, 0, 0, 0,
	213, 296, 298, 305, 0, 936, 299, 884, 875, 886,
	888, 889, 890, 885, 0, 877, 0, 306, 938, 928,
	939, 307, 308, 309, 940, 910, 911, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 959, 941,
	319, 320, 942, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 864,
	332, 943, 335, 336, 338, 337, 819, 214, 944, 842,
	929, 899, 340, 341, 0, 873, 343, 874, 0, 0,
	346, 347, 348, 0, 0, 349, 489, 945, 350, 946,
	953, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 954, 360, 492, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 892, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 947, 385, 386, 387, 388,
	829, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 865, 866, 868, 869, 402, 406,
	409, 410, 922, 411, 391, 392, 412, 948, 413, 887,
	867, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	933, 420, 421, 422, 955, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 863, 0, 906, 907,
	908, 909, 0, 441, 0, 435, 436, 956, 437, 957,
	840, 438, 439, 440, 0, 442, 443, 0, 823, 444,
	445, 446, 447, 448, 450, 923, 451, 0, 871, 452,
	453, 454, 503, 903, 950, 0, 456, 455, 506, 0,
	0, 0, 0, 457, 458, 507, 459, 460, 461, 820,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 816, 817, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 0, 0, 1191, 844, 876, 833, 834,
	835, 831, 832, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 925, 850, 0, 0, 0,
	221, 222, 223, 224, 463, 891, 870, 902, 860, 901,
	900, 0, 228, 862, 861, 231, 232, 233, 852, 924,
	234, 960, 961, 469, 0, 235, 931, 0, 914, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 934, 249, 250,
	917, 915, 916, 921, 919, 918, 920, 251, 252, 253,
	254, 905, 256, 898, 897, 822, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 896, 263, 0, 264, 0,
	265, 266, 0, 828, 267, 268, 270, 272, 269, 273,
	274, 275, 276, 951, 952, 841, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 895, 893, 894, 0, 282,
	0, 283, 0, 0, 935, 284, 285, 0, 286, 958,
	0, 851, 287, 0, 288, 289, 290, 291, 1190, 927,
	930, 339, 937, 292, 293, 0, 294, 295, 872, 0,
	0, 0, 213, 296, 298, 305, 0, 936, 299, 884,
	875, 886, 888, 889, 890, 885, 0, 877, 0, 306,
	938, 928, 939, 307, 308, 309, 940, 910, 911, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	959, 941, 319, 320, 942, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 864, 332, 943, 335, 336, 338, 337, 819, 214,
	944, 842, 929, 899, 340, 341, 0, 873, 343, 874,
	0, 0, 346, 347, 348, 0, 0, 349, 489, 945,
	350, 946, 953, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 954, 360, 492, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 892, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 947, 385, 386,
	387, 388, 829, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 865, 866, 868, 869,
	402, 406, 409, 410, 922, 411, 391, 392, 412, 948,
	413, 887, 867, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 933, 420, 421, 422, 955, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 863, 0,
	906, 907, 908, 909, 0, 441, 0, 435, 436, 956,
	437, 957, 840, 438, 439, 440, 0, 442, 443, 0,
	823, 444, 445, 446, 447, 448, 450, 923, 451, 0,
	871, 452, 453, 454, 503, 903, 950, 0, 456, 455,
	506, 0, 0, 0, 0, 457, 458, 507, 459, 460,
	461, 820, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 816, 817, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 1185, 844, 876,
	833, 834, 835, 831, 832, 845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 925, 850, 0,
	0, 0, 221, 222, 223, 224, 463, 891, 870, 902,
	860, 901, 900, 0, 228, 862, 861, 231, 232, 233,
	852, 924, 234, 960, 961, 469, 0, 235, 931, 0,
	914, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 934,
	249, 250, 917, 915, 916, 921, 919, 918, 920, 251,
	252, 253, 254, 905, 256, 898, 897, 822, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 896, 263, 0,
	264, 0, 265, 266, 0, 828, 267, 268, 270, 272,
	269, 273, 274, 275, 276, 951, 952, 841, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 895, 893, 894,
	0, 282, 0, 283, 0, 0, 935, 284, 285, 0,
	286, 958, 0, 851, 287, 0, 288, 289, 290, 291,
	1184, 927, 930, 339, 937, 292, 293, 0, 294, 295,
	872, 0, 0, 0, 213, 296, 298, 305, 0, 936,
	299, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 306, 938, 928, 939, 307, 308, 309, 940, 910,
	911, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 959, 941, 319, 320, 942, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 864, 332, 943, 335, 336, 338, 337,
	819, 214, 944, 842, 929, 899, 340, 341, 0, 873,
	343, 874, 0, 0, 346, 347, 348, 0, 0, 349,
	489, 945, 350, 946, 953, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 954, 360, 492, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 892,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 947,
	385, 386, 387, 388, 829, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 865, 866,
	868, 869, 402, 406, 409, 410, 922, 411, 391, 392,
	412, 948, 413, 887, 867, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 933, 420, 421, 422, 955, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	863, 0, 906, 907, 908, 909, 0, 441, 0, 435,
	436, 956, 437, 957, 840, 438, 439, 440, 0, 442,
	443, 0, 823, 444, 445, 446, 447, 448, 450, 923,
	451, 0, 871, 452, 453, 454, 503, 903, 950, 0,
	456, 455, 506, 0, 0, 0, 0, 457, 458, 507,
	459, 460, 461, 820, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 816, 817, 0, 0,
	0, 0, 0, 0, 0, 846, 0, 0, 0, 1180,
	844, 876, 833, 834, 835, 831, 832, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 925,
	850, 0, 0, 0, 221, 222, 223, 224, 463, 891,
	870, 902, 860, 901, 900, 0, 228, 862, 861, 231,
	232, 233, 852, 924, 234, 960, 961, 469, 0, 235,
	931, 0, 914, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 934, 249, 250, 917, 915, 916, 921, 919, 918,
	920, 251, 252, 253, 254, 905, 256, 898, 897, 822,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 896,
	263, 0, 264, 0, 265, 266, 0, 828, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 951, 952, 841,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 895,
	893, 894, 0, 282, 0, 283, 0, 0, 935, 284,
	285, 0, 286, 958, 0, 851, 287, 0, 288, 289,
	290, 291, 926, 927, 930, 339, 937, 292, 293, 0,
	294, 295, 872, 0, 0, 0, 213, 296, 298, 305,
	0, 936, 299, 884, 875, 886, 888, 889, 890, 885,
	0, 877, 0, 306, 938, 928, 939, 307, 308, 309,
	940, 910, 911, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 959, 941, 319, 320, 942, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 864, 332, 943, 335, 336,
	338, 337, 819, 214, 944, 842, 929, 899, 340, 341,
	0, 873, 343, 874, 0, 0, 346, 347, 348, 0,
	0, 349, 489, 945, 350, 946, 953, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 954, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 892, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 947, 385, 386, 387, 388, 829, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	865, 866, 868, 869, 402, 406, 409, 410, 922, 411,
	391, 392, 412, 948, 413, 887, 867, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 933, 420, 421, 422,
	955, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 863, 0, 906, 907, 908, 909, 0, 441,
	0, 435, 436, 956, 437, 957, 840, 438, 439, 440,
	0, 442, 443, 0, 823, 444, 445, 446, 447, 448,
	450, 923, 451, 0, 871, 452, 453, 454, 503, 903,
	950, 0, 456, 455, 506, 0, 0, 0, 0, 457,
	458, 507, 459, 460, 461, 820, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 816, 817,
	876, 833, 834, 835, 831, 832, 845, 846, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 221, 222, 223, 224, 463, 891, 870,
	902, 860, 901, 900, 0, 228, 862, 861, 231, 232,
	233, 852, 924, 234, 960, 961, 469, 0, 235, 931,
	0, 914, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	934, 249, 250, 917, 915, 916, 921, 919, 918, 920,
	251, 252, 253, 254, 905, 256, 898, 897, 822, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 896, 263,
	0, 264, 0, 265, 266, 0, 828, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 951, 952, 841, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 895, 893,
	894, 0, 282, 0, 283, 0, 0, 935, 284, 285,
	0, 286, 958, 0, 851, 287, 0, 288, 289, 290,
	291, 926, 927, 930, 339, 937, 292, 293, 0, 294,
	295, 872, 0, 0, 0, 213, 296, 298, 305, 0,
	936, 299, 884, 875, 886, 888, 889, 890, 885, 0,
	877, 0, 306, 938, 928, 939, 307, 308, 309, 940,
	910, 911, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 959, 941, 319, 320, 942, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 864, 332, 943, 335, 336, 338,
	337, 819, 214, 944, 842, 929, 899, 340, 341, 0,
	873, 343, 874, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 945, 350, 946, 953, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 954, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	892, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	947, 385, 386, 387, 388, 829, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 865,
	866, 868, 869, 402, 406, 409, 410, 922, 411, 391,
	392, 412, 948, 413, 887, 867, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 933, 420, 421, 422, 955,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 863, 0, 906, 907, 908, 909, 0, 441, 0,
	435, 436, 956, 437, 957, 840, 438, 439, 440, 0,
	442, 443, 0, 823, 444, 445, 446, 447, 448, 450,
	923, 451, 0, 871, 452, 453, 454, 503, 903, 950,
	0, 456, 455, 506, 0, 0, 0, 0, 457, 458,
	507, 459, 460, 461, 820, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 876,
	833, 834, 835, 831, 832, 845, 846, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 925, 850, 0,
	0, 0, 221, 222, 223, 224, 463, 891, 870, 902,
	860, 901, 900, 0, 228, 862, 861, 231, 232, 233,
	852, 924, 234, 960, 961, 469, 0, 235, 931, 0,
	914, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 934,
	249, 3409, 917, 915, 916, 921, 919, 918, 920, 251,
	252, 253, 254, 905, 256, 898, 897, 822, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 896, 263, 0,
	264, 0, 265, 266, 0, 828, 267, 268, 270, 272,
	269, 273, 274, 275, 276, 951, 952, 841, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 895, 893, 894,
	0, 282, 0, 283, 0, 0, 935, 284, 285, 0,
	286, 958, 0, 851, 287, 0, 288, 289, 290, 291,
	926, 927, 930, 339, 937, 292, 293, 0, 294, 295,
	872, 0, 0, 0, 213, 296, 298, 305, 0, 936,
	299, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 306, 938, 928, 939, 307, 308, 309, 940, 910,
	911, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 959, 941, 319, 320, 942, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 864, 332, 943, 335, 336, 338, 337,
	819, 214, 944, 842, 929, 899, 340, 341, 0, 873,
	343, 874, 0, 0, 346, 347, 348, 0, 0, 349,
	489, 945, 350, 946, 953, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 954, 360, 492, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 892,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 947,
	385, 386, 387, 388, 829, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 865, 866,
	868, 869, 402, 406, 409, 410, 922, 411, 391, 392,
	412, 948, 413, 887, 867, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 933, 420, 421, 422, 955, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	863, 0, 906, 907, 908, 909, 0, 441, 0, 435,
	436, 956, 437, 957, 840, 438, 439, 440, 0, 3408,
	443, 0, 823, 444, 445, 446, 447, 448, 450, 923,
	451, 0, 871, 452, 453, 454, 503, 903, 950, 0,
	456, 455, 506, 0, 0, 0, 0, 457, 458, 507,
	459, 460, 461, 820, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 816, 817, 876, 833,
	834, 835, 831, 832, 845, 846, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 925, 850, 0, 0,
	0, 221, 222, 223, 224, 3407, 891, 870, 902, 860,
	901, 900, 0, 228, 862, 861, 231, 232, 233, 852,
	924, 234, 960, 961, 469, 0, 235, 931, 0, 914,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 934, 249,
	3409, 917, 915, 916, 921, 919, 918, 920, 251, 252,
	253, 254, 905, 256, 898, 897, 822, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 896, 263, 0, 264,
	0, 265, 266, 0, 828, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 951, 952, 841, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 895, 893, 894, 0,
	282, 0, 283, 0, 0, 935, 284, 285, 0, 286,
	958, 0, 851, 287, 0, 288, 289, 290, 291, 926,
	927, 930, 339, 937, 292, 293, 0, 294, 295, 872,
	0, 0, 0, 213, 296, 298, 305, 0, 936, 299,
	884, 875, 886, 888, 889, 890, 885, 0, 877, 0,
	306, 938, 928, 939, 307, 308, 309, 940, 910, 911,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 959, 941, 319, 320, 942, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 864, 332, 943, 335, 336, 338, 337, 819,
	214, 944, 842, 929, 899, 340, 341, 0, 873, 343,
	874, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	945, 350, 946, 953, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 954, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 892, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 947, 385,
	386, 387, 388, 829, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 865, 866, 868,
	869, 402, 406, 409, 410, 922, 411, 391, 392, 412,
	948, 413, 887, 867, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 933, 420, 421, 422, 955, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 863,
	0, 906, 907, 908, 909, 0, 441, 0, 435, 436,
	956, 437, 957, 840, 438, 439, 440, 0, 3408, 443,
	0, 823, 444, 445, 446, 447, 448, 450, 923, 451,
	0, 871, 452, 453, 454, 503, 903, 950, 0, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 820, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 816, 817, 876, 833, 834,
	835, 831, 832, 845, 846, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 925, 850, 0, 0, 0,
	221, 222, 223, 224, 463, 891, 870, 902, 860, 901,
	900, 0, 228, 862, 861, 231, 232, 233, 852, 924,
	234, 960, 961, 469, 0, 235, 931, 0, 914, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 934, 249, 250,
	917, 915, 916, 921, 919, 918, 920, 251, 252, 253,
	254, 905, 256, 898, 897, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 896, 263, 0, 264, 0,
	265, 266, 0, 828, 267, 268, 270, 272, 269, 273,
	274, 275, 276, 951, 952, 841, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 895, 893, 894, 0, 282,
	0, 283, 0, 0, 935, 284, 285, 0, 286, 958,
	0, 851, 287, 0, 288, 289, 290, 291, 926, 927,
	930, 339, 937, 292, 293, 0, 294, 295, 872, 0,
	0, 0, 213, 296, 298, 305, 0, 936, 299, 884,
	875, 886, 888, 889, 890, 885, 0, 877, 0, 306,
	938, 928, 939, 307, 308, 309, 940, 910, 911, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	959, 941, 319, 320, 942, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 864, 332, 943, 335, 336, 338, 337, 0, 214,
	944, 842, 929, 899, 340, 341, 0, 873, 343, 874,
	0, 0, 346, 347, 348, 0, 0, 349, 489, 945,
	350, 946, 953, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 954, 360, 492, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 892, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 947, 385, 386,
	387, 388, 829, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 865, 866, 868, 869,
	402, 406, 409, 410, 922, 411, 391, 392, 412, 948,
	413, 887, 867, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 933, 420, 421, 422, 955, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 863, 0,
	906, 907, 908, 909, 0, 441, 0, 435, 436, 956,
	437, 957, 840, 438, 439, 440, 0, 442, 443, 0,
	0, 444, 445, 446, 447, 448, 450, 923, 451, 0,
	871, 452, 453, 454, 503, 903, 950, 0, 456, 455,
	506, 0, 0, 0, 0, 457, 458, 507, 459, 460,
	461, 876, 833, 834, 835, 831, 832, 845, 0, 2089,
	0, 0, 0, 0, 2087, 2088, 0, 0, 215, 216,
	217, 218, 219, 846, 220, 0, 0, 0, 844, 925,
	850, 0, 0, 0, 221, 222, 223, 224, 0, 891,
	870, 902, 860, 901, 900, 0, 228, 862, 861, 231,
	232, 233, 852, 924, 234, 960, 961, 469, 0, 235,
	931, 0, 914, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 934, 249, 3409, 917, 915, 916, 921, 919, 918,
	920, 251, 252, 253, 254, 905, 256, 898, 897, 822,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 896,
	263, 0, 264, 0, 265, 266, 0, 828, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 951, 952, 841,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 895,
	893, 894, 0, 282, 0, 283, 0, 0, 935, 284,
	285, 0, 286, 958, 0, 851, 287, 0, 288, 289,
	290, 291, 926, 927, 930, 339, 0, 292, 293, 0,
	294, 295, 872, 0, 0, 0, 213, 296, 298, 305,
	0, 936, 299, 884, 875, 886, 888, 889, 890, 885,
	0, 877, 0, 306, 0, 928, 0, 307, 308, 309,
	940, 910, 911, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 959, 941, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 864, 332, 943, 335, 336,
	338, 337, 819, 214, 0, 842, 929, 899, 340, 341,
	0, 873, 343, 874, 0, 0, 346, 347, 348, 0,
	0, 349, 489, 945, 350, 946, 953, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 954, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 892, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 947, 385, 386, 387, 388, 829, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	865, 866, 868, 869, 402, 406, 409, 410, 922, 411,
	391, 392, 412, 0, 413, 887, 867, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 933, 420, 421, 422,
	955, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 863, 0, 906, 907, 908, 909, 0, 441,
	0, 435, 436, 956, 437, 957, 840, 438, 439, 440,
	0, 3408, 443, 0, 823, 444, 445, 446, 447, 448,
	450, 923, 451, 0, 871, 452, 453, 454, 503, 903,
	950, 0, 456, 455, 506, 0, 0, 0, 0, 457,
	458, 507, 459, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 997, 0, 816, 817,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 0, 844, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 925, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 924, 234,
	467, 468, 469, 0, 235, 931, 0, 914, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 934, 249, 250, 917,
	915, 916, 921, 919, 918, 920, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 951, 952, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 935, 284, 285, 0, 286, 958, 0,
	478, 287, 0, 288, 289, 290, 291, 926, 927, 930,
	339, 937, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 936, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 938,
	928, 939, 307, 308, 309, 940, 310, 311, 0, 0,
	312, 313, 314, 315, 984, 317, 316, 0, 318, 959,
	941, 319, 320, 942, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 943, 335, 336, 338, 337, 0, 214, 944,
	0, 929, 488, 340, 341, 0, 342, 343, 344, 0,
	989, 346, 347, 348, 0, 0, 349, 489, 945, 350,
	946, 953, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 954, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 947, 385, 386, 387,
	388, 494, 991, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 178, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 922, 411, 391, 392, 412, 948, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 955, 0, 427, 428, 426,
	180, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 956, 437,
	957, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 923, 451, 0, 449,
	452, 453, 454, 1301, 504, 505, 0, 456, 455, 506,
	997, 0, 0, 172, 457, 458, 507, 459, 460, 461,
	0, 173, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 925, 0,
	981, 0, 1584, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 924, 234, 467, 468, 469, 0, 235, 931,
	0, 914, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	934, 249, 250, 917, 915, 916, 921, 919, 918, 920,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 951, 952, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 935, 284, 285,
	0, 286, 958, 0, 478, 287, 0, 288, 289, 290,
	291, 926, 927, 930, 339, 937, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	936, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 938, 928, 939, 307, 308, 309, 940,
	310, 311, 0, 0, 312, 313, 314, 315, 984, 317,
	316, 0, 318, 959, 941, 319, 320, 942, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 943, 335, 336, 338,
	337, 0, 214, 944, 0, 929, 488, 340, 341, 0,
	342, 343, 344, 0, 989, 346, 347, 348, 0, 0,
	349, 489, 945, 350, 946, 953, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 954, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	947, 385, 386, 387, 388, 494, 991, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 178, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 922, 411, 391,
	392, 412, 948, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 955,
	0, 427, 428, 426, 180, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 956, 437, 957, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	923, 451, 0, 449, 452, 453, 454, 1301, 504, 505,
	0, 456, 455, 506, 0, 0, 0, 172, 457, 458,
	507, 459, 460, 461, 0, 173, 0, 0, 2534, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 1584, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 924, 234, 467, 468, 469, 0, 235, 931,
	0, 914, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	934, 249, 250, 917, 915, 916, 921, 919, 918, 920,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 951, 952, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 935, 284, 285,
	0, 286, 958, 0, 478, 287, 0, 288, 289, 290,
	291, 926, 927, 930, 339, 937, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	936, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 938, 928, 939, 307, 308, 309, 940,
	310, 311, 0, 0, 312, 313, 314, 315, 984, 317,
	316, 0, 318, 959, 941, 319, 320, 942, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 943, 335, 336, 338,
	337, 0, 214, 944, 0, 929, 488, 340, 341, 0,
	342, 343, 344, 0, 989, 346, 347, 348, 0, 0,
	349, 489, 945, 350, 946, 953, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 954, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	947, 385, 386, 387, 388, 494, 991, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 922, 411, 391,
	392, 412, 948, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 955,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 956, 437, 957, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	923, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 0, 980, 0, 997, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 981, 925, 986, 0, 0, 0,
	221, 222, 223, 224, 463, 464, 225, 465, 226, 227,
	466, 0, 228, 229, 230, 231, 232, 233, 0, 924,
	234, 467, 468, 469, 0, 235, 931, 0, 914, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 934, 249, 250,
	917, 915, 916, 921, 919, 918, 920, 251, 252, 253,
	254, 255, 256, 471, 472, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 473, 267, 268, 270, 272, 269, 273,
	274, 275, 276, 951, 952, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 476, 280, 281, 0, 282,
	0, 283, 0, 0, 935, 284, 285, 0, 286, 958,
	0, 478, 287, 0, 288, 289, 290, 291, 926, 927,
	930, 339, 937, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 936, 299, 482,
	301, 300, 302, 303, 304, 483, 0, 484, 0, 306,
	938, 928, 939, 307, 308, 309, 940, 310, 311, 0,
	0, 312, 313, 314, 315, 984, 317, 316, 0, 318,
	959, 941, 319, 320, 942, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 943, 335, 336, 338, 337, 0, 214,
	944, 0, 929, 488, 340, 341, 0, 342, 343, 344,
	0, 989, 346, 347, 348, 0, 0, 349, 489, 945,
	350, 946, 953, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 954, 360, 492, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 493, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 947, 385, 386,
	387, 388, 494, 991, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 922, 411, 391, 392, 412, 948,
	413, 495, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 955, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 0,
	497, 498, 499, 500, 0, 441, 0, 435, 436, 956,
	437, 957, 0, 438, 439, 440, 0, 442, 443, 0,
	0, 444, 445, 446, 447, 448, 450, 923, 451, 0,
	449, 452, 453, 454, 503, 504, 505, 0, 456, 455,
	506, 997, 0, 0, 0, 457, 458, 507, 459, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 925,
	0, 981, 0, 986, 221, 222, 223, 224, 463, 464,
	225, 465, 226, 227, 466, 0, 228, 229, 230, 231,
	232, 233, 0, 924, 234, 467, 468, 469, 0, 235,
	931, 0, 914, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 934, 249, 250, 917, 915, 916, 921, 919, 918,
	920, 251, 252, 253, 254, 255, 256, 471, 472, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 473, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 951, 952, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 476,
	280, 281, 0, 282, 0, 283, 0, 0, 935, 284,
	285, 0, 286, 958, 0, 478, 287, 0, 288, 289,
	290, 291, 926, 927, 930, 339, 937, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	0, 936, 299, 482, 301, 300, 302, 303, 304, 483,
	0, 484, 0, 306, 938, 928, 939, 307, 308, 309,
	940, 310, 311, 0, 0, 312, 313, 314, 315, 984,
	317, 316, 0, 318, 959, 941, 319, 320, 942, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 943, 335, 336,
	338, 337, 0, 214, 944, 0, 929, 488, 340, 341,
	0, 342, 343, 344, 0, 989, 346, 347, 348, 0,
	0, 349, 489, 945, 350, 946, 953, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 954, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 493, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 947, 385, 386, 387, 388, 494, 991, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 922, 411,
	391, 392, 412, 948, 413, 495, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	955, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 0, 497, 498, 499, 500, 0, 441,
	0, 435, 436, 956, 437, 957, 0, 438, 439, 440,
	0, 442, 443, 0, 0, 444, 445, 446, 447, 448,
	450, 923, 451, 0, 449, 452, 453, 454, 503, 504,
	505, 0, 456, 455, 506, 997, 0, 0, 0, 457,
	458, 507, 459, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 925, 0, 981, 0, 986, 221, 222,
	223, 224, 463, 464, 225, 465, 226, 227, 466, 0,
	228, 229, 230, 231, 232, 233, 0, 924, 234, 467,
	468, 469, 0, 235, 931, 0, 914, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 934, 249, 250, 917, 915,
	916, 921, 919, 918, 920, 251, 252, 253, 254, 255,
	256, 471, 472, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 473, 267, 268, 270, 272, 269, 273, 274, 275,
	276, 951, 952, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 476, 280, 281, 0, 282, 0, 283,
	0, 0, 935, 284, 285, 0, 286, 958, 0, 478,
	287, 0, 288, 289, 290, 291, 926, 927, 930, 339,
	937, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 936, 299, 482, 301, 300,
	302, 303, 304, 483, 0, 484, 0, 306, 938, 928,
	939, 307, 308, 309, 940, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 959, 941,
	319, 320, 942, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 943, 335, 336, 338, 337, 0, 214, 944, 0,
	929, 488, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 489, 945, 350, 946,
	953, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 954, 360, 492, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 493, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 947, 385, 386, 387, 388,
	494, 991, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 922, 411, 391, 392, 412, 948, 413, 495,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 955, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 0, 497, 498,
	499, 500, 0, 441, 0, 435, 436, 956, 437, 957,
	0, 438, 439, 440, 0, 442, 443, 0, 0, 444,
	445, 446, 447, 448, 450, 923, 451, 0, 449, 452,
	453, 454, 503, 504, 505, 0, 456, 455, 506, 809,
	0, 1155, 0, 457, 458, 507, 459, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 462,
	0, 1479, 0, 0, 221, 222, 223, 224, 463, 464,
	225, 465, 226, 227, 466, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 467, 468, 469, 0, 235,
	470, 0, 1059, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 934, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 471, 472, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 473, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 474, 475, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 476,
	280, 281, 0, 282, 0, 283, 0, 0, 935, 284,
	285, 0, 286, 477, 0, 478, 287, 0, 288, 289,
	290, 291, 479, 480, 481, 339, 937, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 936, 299, 482, 301, 300, 302, 303, 304, 483,
	0, 484, 0, 306, 938, 485, 939, 307, 308, 309,
	940, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 486, 941, 319, 320, 942, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 943, 335, 336,
	338, 337, 0, 0, 944, 0, 487, 488, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 489, 945, 350, 946, 490, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 491, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 493, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 947, 385, 386, 387, 388, 494, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 178, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 948, 413, 495, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	496, 0, 427, 428, 426, 180, 429, 430, 431, 432,
	433, 271, 434, 0, 497, 498, 499, 500, 0, 441,
	0, 435, 436, 501, 437, 502, 0, 438, 439, 440,
	0, 442, 443, 0, 0, 444, 445, 446, 447, 448,
	450, 0, 451, 0, 449, 452, 453, 454, 1301, 504,
	505, 0, 456, 455, 506, 1298, 0, 1155, 172, 457,
	458, 507, 459, 460, 461, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 462, 0, 148, 0, 0,
	221, 222, 223, 224, 463, 464, 225, 465, 226, 227,
	466, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 467, 468, 469, 0, 235, 470, 0, 1059, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 934, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 471, 472, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 473, 267, 268, 270, 272, 269, 273,
	274, 275, 276, 474, 475, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 476, 280, 281, 0, 282,
	0, 283, 0, 0, 935, 284, 285, 0, 286, 477,
	0, 478, 287, 0, 288, 289, 290, 291, 479, 480,
	481, 339, 937, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 936, 299, 482,
	301, 300, 302, 303, 304, 483, 0, 484, 0, 306,
	938, 485, 939, 307, 308, 309, 940, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	486, 941, 319, 320, 942, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 943, 335, 336, 338, 337, 0, 0,
	944, 0, 487, 488, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 489, 945,
	350, 946, 490, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 491, 360, 492, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 493, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 947, 385, 386,
	387, 388, 494, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 178, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 948,
	413, 495, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 496, 0, 427, 428,
	426, 180, 429, 430, 431, 432, 433, 271, 434, 0,
	497, 498, 499, 500, 0, 441, 0, 435, 436, 501,
	437, 502, 0, 438, 439, 440, 0, 442, 443, 0,
	0, 444, 445, 446, 447, 448, 450, 0, 451, 0,
	449, 452, 453, 454, 1301, 504, 505, 0, 456, 455,
	506, 0, 0, 0, 172, 457, 458, 507, 459, 460,
	461, 0, 173, 0, 0, 0, 0, 1155, 1154, 0,
	0, 0, 0, 1152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 462, 0, 0, 0, 0,
	221, 222, 223, 224, 463, 464, 225, 465, 226, 227,
	466, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 467, 468, 469, 0, 235, 470, 0, 1059, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 934, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 471, 472, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 473, 267, 268, 270, 272, 269, 273,
	274, 275, 276, 474, 475, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 476, 280, 281, 0, 282,
	0, 283, 0, 0, 935, 284, 285, 0, 286, 477,
	0, 478, 287, 0, 288, 289, 290, 291, 479, 480,
	481, 339, 937, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 936, 299, 482,
	301, 300, 302, 303, 304, 483, 0, 484, 0, 306,
	938, 485, 939, 307, 308, 309, 940, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	486, 941, 319, 320, 942, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 943, 335, 336, 338, 337, 0, 0,
	944, 0, 487, 488, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 489, 945,
	350, 946, 490, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 491, 360, 492, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 493, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 947, 385, 386,
	387, 388, 494, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 948,
	413, 495, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 496, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 0,
	497, 498, 499, 500, 0, 441, 0, 435, 436, 501,
	437, 502, 0, 438, 439, 440, 0, 442, 443, 0,
	0, 444, 445, 446, 447, 448, 450, 0, 451, 0,
	449, 452, 453, 454, 503, 504, 505, 0, 456, 455,
	506, 0, 0, 0, 0, 457, 458, 507, 459, 460,
	461, 1155, 1154, 0, 0, 0, 0, 1152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 2728, 220, 0, 0, 0, 0, 462,
	0, 0, 0, 0, 221, 222, 223, 224, 463, 464,
	225, 465, 226, 227, 466, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 467, 468, 469, 0, 235,
	470, 0, 1059, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 934, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 471, 472, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 473, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 474, 475, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 476,
	280, 281, 0, 282, 0, 283, 0, 0, 935, 284,
	285, 0, 286, 477, 0, 478, 287, 0, 288, 289,
	290, 291, 479, 480, 481, 339, 937, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 936, 299, 482, 301, 300, 302, 303, 304, 483,
	0, 484, 0, 306, 938, 485, 939, 307, 308, 309,
	940, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 486, 941, 319, 320, 942, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 943, 335, 336,
	338, 337, 0, 0, 944, 0, 487, 488, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 489, 945, 350, 946, 490, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 491, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 493, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 947, 385, 386, 387, 388, 494, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 948, 413, 495, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	496, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 0, 497, 498, 499, 500, 0, 441,
	0, 435, 436, 501, 437, 502, 0, 438, 439, 440,
	0, 442, 443, 0, 0, 444, 445, 446, 447, 448,
	450, 0, 451, 0, 449, 452, 453, 454, 503, 504,
	505, 0, 456, 455, 506, 997, 0, 0, 0, 457,
	458, 507, 459, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 925, 0, 0, 0, 1305, 221, 222,
	223, 224, 463, 464, 225, 465, 226, 227, 466, 0,
	228, 229, 230, 231, 232, 233, 0, 924, 234, 467,
	468, 469, 0, 235, 931, 0, 914, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 934, 249, 250, 917, 915,
	916, 921, 919, 918, 920, 251, 252, 253, 254, 255,
	256, 471, 472, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 473, 267, 268, 270, 272, 269, 273, 274, 275,
	276, 951, 952, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 476, 280, 281, 0, 282, 0, 283,
	0, 0, 935, 284, 285, 0, 286, 958, 0, 478,
	287, 0, 288, 289, 290, 291, 926, 927, 930, 339,
	937, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 936, 299, 482, 301, 300,
	302, 303, 304, 483, 0, 484, 0, 306, 938, 928,
	939, 307, 308, 309, 940, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 959, 941,
	319, 320, 942, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 943, 335, 336, 338, 337, 0, 214, 944, 0,
	929, 488, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 489, 945, 350, 946,
	953, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 954, 360, 492, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 493, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 947, 385, 386, 387, 388,
	494, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 922, 411, 391, 392, 412, 948, 413, 495,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 955, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 0, 497, 498,
	499, 500, 0, 441, 0, 435, 436, 956, 437, 957,
	0, 438, 439, 440, 0, 442, 443, 0, 0, 444,
	445, 446, 447, 448, 450, 923, 451, 0, 449, 452,
	453, 454, 503, 504, 505, 0, 456, 455, 506, 809,
	0, 209, 0, 457, 458, 507, 459, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 462,
	0, 0, 0, 0, 221, 222, 223, 224, 463, 464,
	225, 465, 226, 227, 466, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 467, 468, 469, 0, 235,
	470, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 471, 472, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 473, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 476,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 477, 0, 478, 287, 0, 288, 289,
	290, 291, 479, 480, 481, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 482, 301, 300, 302, 303, 304, 483,
	0, 484, 0, 306, 0, 485, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 486, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 487, 488, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 489, 0, 350, 0, 490, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 491, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 493, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 494, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 178, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 495, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	496, 0, 427, 428, 426, 180, 429, 430, 431, 432,
	433, 271, 434, 0, 497, 498, 499, 500, 0, 441,
	0, 435, 436, 501, 437, 502, 0, 438, 439, 440,
	0, 442, 443, 0, 0, 444, 445, 446, 447, 448,
	450, 0, 451, 0, 449, 452, 453, 454, 1301, 504,
	505, 0, 456, 455, 506, 209, 0, 0, 172, 457,
	458, 507, 459, 460, 461, 0, 173, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 462, 0, 0, 0, 148, 221, 222,
	223, 224, 463, 464, 225, 465, 226, 227, 466, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 467,
	468, 469, 0, 235, 470, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 471, 472, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 473, 267, 268, 270, 272, 269, 273, 274, 275,
	276, 474, 475, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 476, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 477, 0, 478,
	287, 0, 288, 289, 290, 291, 479, 480, 481, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 482, 301, 300,
	302, 303, 304, 483, 0, 484, 0, 306, 0, 485,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 486, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	487, 488, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 489, 0, 350, 0,
	490, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 491, 360, 492, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 493, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	494, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 495,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 496, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 0, 497, 498,
	499, 500, 0, 441, 0, 435, 436, 501, 437, 502,
	0, 438, 439, 440, 0, 442, 443, 0, 0, 444,
	445, 446, 447, 448, 450, 0, 451, 0, 449, 452,
	453, 454, 503, 504, 505, 0, 456, 455, 506, 209,
	0, 0, 0, 457, 458, 507, 459, 460, 461, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 462, 0, 0,
	0, 1589, 221, 222, 223, 224, 463, 464, 225, 465,
	226, 227, 466, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 467, 468, 469, 0, 235, 470, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 471, 472, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 473, 267, 268, 270, 272,
	269, 273, 274, 275, 276, 474, 475, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 476, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 477, 0, 478, 287, 0, 288, 289, 290, 291,
	479, 480, 481, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 482, 301, 300, 302, 303, 304, 483, 0, 484,
	0, 306, 0, 485, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 486, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 487, 488, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	489, 0, 350, 0, 490, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 491, 360, 492, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 493,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 494, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 495, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 496, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 0, 497, 498, 499, 500, 0, 441, 0, 435,
	436, 501, 437, 502, 0, 438, 439, 440, 0, 442,
	443, 0, 0, 444, 445, 446, 447, 448, 450, 0,
	451, 0, 449, 452, 453, 454, 503, 504, 505, 0,
	456, 455, 506, 209, 0, 0, 0, 457, 458, 507,
	459, 460, 461, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 462, 0, 2681, 0, 0, 221, 222, 223, 224,
	463, 464, 225, 465, 226, 227, 466, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 467, 468, 469,
	0, 235, 470, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 471,
	472, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 473,
	267, 268, 270, 272, 269, 273, 274, 275, 276, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 476, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 477, 0, 478, 287, 0,
	288, 289, 290, 291, 479, 480, 481, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 482, 301, 300, 302, 303,
	304, 483, 0, 484, 0, 306, 0, 485, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 486, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 487, 488,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 489, 0, 350, 0, 490, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	491, 360, 492, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 493, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 494, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 495, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 496, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 0, 497, 498, 499, 500,
	0, 441, 0, 435, 436, 501, 437, 502, 0, 438,
	439, 440, 0, 442, 443, 0, 0, 444, 445, 446,
	447, 448, 450, 0, 451, 0, 449, 452, 453, 454,
	503, 504, 505, 0, 456, 455, 506, 209, 0, 0,
	0, 457, 458, 507, 459, 460, 461, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 462, 0, 0, 0, 2324,
	221, 222, 223, 224, 463, 464, 225, 465, 226, 227,
	466, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 467, 468, 469, 0, 235, 470, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 471, 472, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 473, 267, 268, 270, 272, 269, 273,
	274, 275, 276, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 476, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 477,
	0, 478, 287, 0, 288, 289, 290, 291, 479, 480,
	481, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 482,
	301, 300, 302, 303, 304, 483, 0, 484, 0, 306,
	0, 485, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	486, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 487, 488, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 489, 0,
	350, 0, 490, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 491, 360, 492, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 493, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 494, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 495, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 496, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 0,
	497, 498, 499, 500, 0, 441, 0, 435, 436, 501,
	437, 502, 0, 438, 439, 440, 0, 442, 443, 0,
	0, 444, 445, 446, 447, 448, 450, 0, 451, 0,
	449, 452, 453, 454, 503, 504, 505, 0, 456, 455,
	506, 209, 0, 0, 0, 457, 458, 507, 459, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 462,
	0, 0, 0, 2804, 221, 222, 223, 224, 463, 464,
	225, 465, 226, 227, 466, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 467, 468, 469, 0, 235,
	470, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 471, 472, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 473, 267, 268,
	270, 272, 269, 273, 274, 275, 276, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 476,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 477, 0, 478, 287, 0, 288, 289,
	290, 291, 479, 480, 481, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 482, 301, 300, 302, 303, 304, 483,
	0, 484, 0, 306, 0, 485, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 486, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 487, 488, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 489, 0, 350, 0, 490, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 491, 360,
	492, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 493, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 494, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 495, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	496, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 0, 497, 498, 499, 500, 0, 441,
	0, 435, 436, 501, 437, 502, 0, 438, 439, 440,
	0, 442, 443, 0, 0, 444, 445, 446, 447, 448,
	450, 0, 451, 0, 449, 452, 453, 454, 503, 504,
	505, 0, 456, 455, 506, 685, 0, 576, 0, 457,
	458, 507, 459, 460, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 462, 0, 1849, 0, 0,
	221, 222, 223, 224, 463, 464, 225, 465, 226, 227,
	466, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 467, 468, 469, 0, 235, 470, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 582,
	254, 255, 256, 471, 472, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 473, 267, 268, 270, 272, 269, 273,
	274, 275, 276, 474, 475, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 476, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 477,
	0, 478, 287, 0, 288, 289, 290, 291, 479, 480,
	481, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 0, 299, 482,
	301, 300, 302, 303, 304, 483, 0, 484, 0, 306,
	0, 485, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	486, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 214,
	0, 0, 487, 488, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 489, 0,
	350, 0, 490, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 491, 360, 492, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 493, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 494, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 495, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 496, 0, 427, 428,
	426, 581, 429, 430, 431, 432, 433, 271, 434, 0,
	497, 498, 499, 500, 0, 441, 0, 435, 436, 501,
	437, 502, 0, 438, 439, 440, 0, 442, 443, 0,
	0, 444, 445, 446, 447, 448, 450, 0, 451, 0,
	449, 452, 453, 454, 503, 504, 505, 0, 456, 455,
	506, 0, 575, 0, 576, 457, 458, 507, 459, 460,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 585, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 582, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 581, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 576, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 585, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 582, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 1873, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 581, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 576, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 585, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 582, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 581, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 585, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 1328, 0,
	1155, 1154, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 1059, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	934, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 212,
	0, 0, 0, 0, 0, 1327, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 935, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 937, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	936, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 938, 485, 939, 307, 308, 309, 940,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 941, 319, 320, 942, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 943, 335, 336, 338,
	337, 0, 0, 944, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 945, 350, 946, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 1326, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	947, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 948, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 0, 0, 0, 0, 457, 458,
	507, 459, 460, 461, 1296, 0, 1155, 1154, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 1059, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 934, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 935, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 1295, 480, 481,
	339, 937, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 936, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 938,
	485, 939, 307, 308, 309, 940, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	941, 319, 320, 942, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 943, 335, 336, 338, 337, 0, 0, 944,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 945, 350,
	946, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 947, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 948, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	0, 0, 0, 0, 457, 458, 507, 459, 460, 461,
	1292, 0, 1155, 1154, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 467, 468, 469, 0,
	235, 470, 0, 1059, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 934, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 471, 472,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 0, 283, 0, 0, 935,
	284, 285, 0, 286, 477, 0, 478, 287, 0, 288,
	289, 290, 291, 1291, 480, 481, 339, 937, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 936, 299, 482, 301, 300, 302, 303, 304,
	483, 0, 484, 0, 306, 938, 485, 939, 307, 308,
	309, 940, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 486, 941, 319, 320, 942,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 943, 335,
	336, 338, 337, 0, 0, 944, 0, 487, 488, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 945, 350, 946, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 491,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 947, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 948, 413, 495, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 0, 497, 498, 499, 500, 0,
	441, 0, 435, 436, 501, 437, 502, 0, 438, 439,
	440, 0, 442, 443, 0, 0, 444, 445, 446, 447,
	448, 450, 0, 451, 0, 449, 452, 453, 454, 503,
	504, 505, 0, 456, 455, 506, 0, 0, 0, 0,
	457, 458, 507, 459, 460, 461, 1230, 0, 1155, 1154,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 1059,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 934, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 935, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 1229,
	480, 481, 339, 937, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 936, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 938, 485, 939, 307, 308, 309, 940, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 941, 319, 320, 942, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 943, 335, 336, 338, 337, 0,
	0, 944, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	945, 350, 946, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 947, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	948, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 1227, 0, 1155, 1154, 0, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 1059, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 934, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 1226, 480, 481, 339, 937,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 936, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 938, 485, 939,
	307, 308, 309, 940, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	943, 335, 336, 338, 337, 0, 0, 944, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 948, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 1148, 0,
	1155, 1154, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 1059, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	934, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 935, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 1150, 480, 481, 339, 937, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	936, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 938, 485, 939, 307, 308, 309, 940,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 941, 319, 320, 942, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 943, 335, 336, 338,
	337, 0, 0, 944, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 945, 350, 946, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	947, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 948, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 0, 0, 0, 0, 457, 458,
	507, 459, 460, 461, 1155, 1154, 0, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 1059, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 934, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 935, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 937,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 936, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 938, 485, 939,
	307, 308, 309, 940, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 941, 319,
	320, 942, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	943, 335, 336, 338, 337, 0, 0, 944, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 945, 350, 946, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 947, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 948, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 1155, 1154,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 1059,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 934, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 935, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 937, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 936, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 938, 485, 939, 307, 308, 309, 940, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 941, 319, 320, 942, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 943, 335, 336, 338, 337, 0,
	0, 944, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	945, 350, 946, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 947, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	948, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 1155, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 1059,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 934, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 935, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 937, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 936, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 938, 485, 939, 307, 308, 309, 940, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 941, 319, 320, 942, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 943, 335, 336, 338, 337, 0,
	0, 944, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	945, 350, 946, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 947, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	948, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 2213, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 2210, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 2359, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 2216, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 2356, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	2358, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 2355, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 2215,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 2357, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 2213, 235, 470, 0, 0,
	2207, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 2210, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 2216, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 2206,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 2215,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 2214, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 1373, 0, 209, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 1376, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 1374, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 1375, 455, 506, 1143, 0,
	209, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 1145, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 989, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 1140, 0, 209, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 1142, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	989, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	1047, 0, 209, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 467, 468, 469, 0,
	235, 470, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 471, 472,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 477, 0, 478, 287, 0, 288,
	289, 290, 291, 1049, 480, 481, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 0, 299, 482, 301, 300, 302, 303, 304,
	483, 0, 484, 0, 306, 0, 485, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 486, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 214, 0, 0, 487, 488, 340,
	341, 0, 342, 343, 344, 0, 989, 346, 347, 348,
	0, 0, 349, 489, 0, 350, 0, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 491,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 495, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 0, 497, 498, 499, 500, 0,
	441, 0, 435, 436, 501, 437, 502, 0, 438, 439,
	440, 0, 442, 443, 0, 0, 444, 445, 446, 447,
	448, 450, 0, 451, 0, 449, 452, 453, 454, 503,
	504, 505, 0, 456, 455, 506, 538, 0, 209, 0,
	457, 458, 507, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 537, 219,
	527, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 530, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 531, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 532, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 526, 0, 209, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 527, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 530, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 531, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	532, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 989, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 2288, 0,
	209, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 1856, 0, 209, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 479, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 209, 456, 455, 506,
	0, 0, 0, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 479, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	1792, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	1785, 0, 209, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 467, 468, 469, 0,
	235, 470, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 471, 472,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 477, 0, 478, 287, 0, 288,
	289, 290, 291, 1784, 480, 481, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 0, 299, 482, 301, 300, 302, 303, 304,
	483, 0, 484, 0, 306, 0, 485, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 486, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 214, 0, 0, 487, 488, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 0, 350, 0, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 491,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 495, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 0, 497, 498, 499, 500, 0,
	441, 0, 435, 436, 501, 437, 502, 0, 438, 439,
	440, 0, 442, 443, 0, 0, 444, 445, 446, 447,
	448, 450, 0, 451, 0, 449, 452, 453, 454, 503,
	504, 505, 0, 456, 455, 506, 1780, 0, 209, 0,
	457, 458, 507, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 1782,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 1285, 0, 209, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 1284, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 1282, 0,
	209, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 1281, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 1279, 0, 209, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 1278, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	1275, 0, 209, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 467, 468, 469, 0,
	235, 470, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 471, 472,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 477, 0, 478, 287, 0, 288,
	289, 290, 291, 1274, 480, 481, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 0, 299, 482, 301, 300, 302, 303, 304,
	483, 0, 484, 0, 306, 0, 485, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 486, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 214, 0, 0, 487, 488, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 0, 350, 0, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 491,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 495, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 0, 497, 498, 499, 500, 0,
	441, 0, 435, 436, 501, 437, 502, 0, 438, 439,
	440, 0, 442, 443, 0, 0, 444, 445, 446, 447,
	448, 450, 0, 451, 0, 449, 452, 453, 454, 503,
	504, 505, 0, 456, 455, 506, 1250, 0, 209, 0,
	457, 458, 507, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 1165, 0, 209, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 1167, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 530, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 531, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	532, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 1880, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 1878, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 1876, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 677, 0,
	209, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 676, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 675, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	209, 456, 455, 506, 0, 0, 0, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 2359,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 3127, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 515, 0, 209, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 514, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 479, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 513, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 209, 456, 455, 506,
	0, 0, 0, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 2147, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 479, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	209, 2346, 0, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	209, 456, 455, 506, 0, 0, 0, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 2928, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 209, 2346, 0, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 2343, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 209, 456, 455, 506, 0, 0,
	0, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 215, 216, 217, 218, 219, 1862, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 1854, 0,
	209, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 558, 0, 209, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 1025, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 479, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 559, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 555, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 554,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	1804, 0, 209, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 467, 468, 469, 0,
	235, 470, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 471, 472,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 477, 0, 478, 287, 0, 288,
	289, 290, 291, 1803, 480, 481, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 482, 301, 300, 302, 303, 304,
	483, 0, 484, 0, 306, 0, 485, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 486, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 487, 488, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 0, 350, 0, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 491,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 495, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 0, 497, 498, 499, 500, 0,
	441, 0, 435, 436, 501, 437, 502, 0, 438, 439,
	440, 0, 442, 443, 0, 0, 444, 445, 446, 447,
	448, 450, 0, 451, 0, 449, 452, 453, 454, 503,
	504, 505, 0, 456, 455, 506, 558, 0, 209, 0,
	457, 458, 507, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 548, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 559, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 555,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 1304, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 554, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 1289, 0, 209, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 235, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 1288, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 494,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 497, 498, 499,
	500, 0, 441, 0, 435, 436, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 1238, 0,
	209, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 1237, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 1222, 0, 209, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 479, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	1159, 0, 209, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 467, 468, 469, 0,
	235, 470, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 471, 472,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 477, 0, 478, 287, 0, 288,
	289, 290, 291, 479, 480, 481, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 482, 301, 300, 302, 303, 304,
	483, 0, 484, 0, 306, 0, 485, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 486, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 487, 488, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 0, 350, 0, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 491,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 495, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 0, 497, 498, 499, 500, 0,
	441, 0, 435, 436, 501, 437, 502, 0, 438, 439,
	440, 0, 442, 443, 0, 0, 444, 445, 446, 447,
	448, 450, 0, 451, 0, 449, 452, 453, 454, 503,
	504, 505, 0, 456, 455, 506, 558, 0, 209, 0,
	457, 458, 507, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 1025, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 559, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 555,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 554, 498, 499, 500, 0, 441, 0, 435, 1026,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	1008, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 558, 0, 209, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 462, 0, 0, 0, 0, 221, 222, 223,
	224, 463, 464, 225, 465, 226, 227, 466, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 467, 468,
	469, 0, 548, 470, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 546, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	471, 472, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	473, 267, 268, 270, 272, 269, 273, 274, 275, 276,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 476, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 477, 0, 478, 287,
	0, 288, 289, 290, 291, 479, 480, 481, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 482, 301, 300, 302,
	303, 304, 483, 0, 484, 0, 306, 0, 485, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 486, 0, 319,
	320, 0, 0, 321, 547, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 559,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 487,
	488, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 489, 0, 350, 0, 490,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 491, 360, 492, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 493, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 549,
	389, 0, 390, 394, 395, 555, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 550,
	410, 0, 411, 391, 392, 412, 0, 413, 495, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 496, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 0, 554, 498, 499,
	500, 0, 441, 0, 435, 552, 501, 437, 502, 0,
	438, 439, 440, 0, 442, 443, 0, 0, 444, 445,
	446, 447, 448, 450, 0, 451, 0, 449, 452, 453,
	454, 503, 504, 505, 0, 456, 455, 506, 542, 0,
	209, 0, 457, 458, 507, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 462, 0,
	0, 0, 0, 221, 222, 223, 224, 463, 464, 225,
	465, 226, 227, 466, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 467, 468, 469, 0, 235, 470,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 471, 472, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 473, 267, 268, 270,
	272, 269, 273, 274, 275, 276, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 476, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 477, 0, 478, 287, 0, 288, 289, 290,
	291, 479, 480, 481, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 482, 301, 300, 302, 303, 304, 483, 0,
	484, 0, 306, 0, 485, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 486, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 487, 488, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 489, 0, 350, 0, 490, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 491, 360, 492,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	493, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 494, 389, 0, 390, 543,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 495, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 496,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 0, 497, 498, 499, 500, 0, 441, 0,
	435, 436, 501, 437, 502, 0, 438, 439, 440, 0,
	442, 443, 0, 0, 444, 445, 446, 447, 448, 450,
	0, 451, 0, 449, 452, 453, 454, 503, 504, 505,
	0, 456, 455, 506, 540, 0, 209, 0, 457, 458,
	507, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 462, 0, 0, 0, 0, 221,
	222, 223, 224, 463, 464, 225, 465, 226, 227, 466,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	467, 468, 469, 0, 235, 470, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 471, 472, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 473, 267, 268, 270, 272, 269, 273, 274,
	275, 276, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 476, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 477, 0,
	478, 287, 0, 288, 289, 290, 291, 479, 480, 481,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 482, 301,
	300, 302, 303, 304, 483, 0, 484, 0, 306, 0,
	485, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 486,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 487, 488, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 489, 0, 350,
	0, 490, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 491, 360, 492, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 493, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 494, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	495, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 496, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 0, 497,
	498, 499, 500, 0, 441, 0, 435, 436, 501, 437,
	502, 0, 438, 439, 440, 0, 442, 443, 0, 0,
	444, 445, 446, 447, 448, 450, 0, 451, 0, 449,
	452, 453, 454, 503, 504, 505, 0, 456, 455, 506,
	534, 0, 209, 0, 457, 458, 507, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	462, 0, 0, 0, 0, 221, 222, 223, 224, 463,
	464, 225, 465, 226, 227, 466, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 467, 468, 469, 0,
	235, 470, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 471, 472,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 473, 267,
	268, 270, 272, 269, 273, 274, 275, 276, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	476, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 477, 0, 478, 287, 0, 288,
	289, 290, 291, 479, 480, 481, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 482, 301, 300, 302, 303, 304,
	483, 0, 484, 0, 306, 0, 485, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 486, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 487, 488, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 489, 0, 350, 0, 490, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 491,
	360, 492, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 493, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 494, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 495, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 496, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 0, 497, 498, 499, 500, 0,
	441, 0, 435, 436, 501, 437, 502, 0, 438, 439,
	440, 0, 442, 443, 0, 0, 444, 445, 446, 447,
	448, 450, 0, 451, 0, 449, 452, 453, 454, 503,
	504, 505, 0, 456, 455, 506, 510, 0, 209, 0,
	457, 458, 507, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 2623,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 2621,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 2609,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 2306,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 543, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 1816, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 0, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 1258,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 1200,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 287, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 493, 963,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 209, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 221, 222, 223, 224, 463, 464, 225, 465, 226,
	227, 466, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 467, 468, 469, 0, 235, 470, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 471, 472, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 473, 267, 268, 270, 272, 269,
	273, 274, 275, 276, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 476, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	477, 0, 478, 0, 0, 288, 289, 290, 291, 479,
	480, 481, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	482, 301, 300, 302, 303, 304, 483, 0, 484, 0,
	306, 0, 485, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 486, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 487, 488, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 489,
	0, 350, 0, 490, 351, 345, 352, 353, 0, 355,
	356, 357, 0, 358, 359, 491, 360, 492, 361, 0,
	362, 0, 363, 364, 365, 0, 367, 368, 493, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 494, 0, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 495, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 496, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	0, 497, 498, 499, 500, 0, 441, 0, 435, 436,
	501, 437, 502, 0, 438, 439, 440, 0, 442, 443,
	0, 0, 444, 445, 446, 447, 448, 450, 0, 451,
	0, 449, 452, 453, 454, 503, 504, 505, 0, 456,
	455, 506, 0, 0, 0, 0, 457, 458, 507, 459,
	460, 461, 1415, 1416, 0, 1448, 1449, 1450, 1458, 1459,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 1448, 1449, 1450, 1458, 1459, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 1441, 1442, 1443,
	0, 0, 1417, 0, 0, 0, 1423, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 1465, 0, 0, 0, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	1462, 0, 0, 0, 0, 0, 0, 1432, 1433, 0,
	0, 0, 0, 1440, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 1453, 1423, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 1463, 0,
	1465, 0, 0, 0, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 0, 1462, 0, 0,
	0, 0, 0, 0, 1432, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 1444, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 1448, 1449, 1450, 1458, 1459, 1460, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 1439,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 1456, 0, 0, 0, 0, 1454,
	0, 1437, 1429, 1430, 1436, 1435, 1431, 1457, 1434, 1428,
	1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0, 0,
	0, 0, 0, 0, 0, 2480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 1448, 1449, 1450, 1458,
	1459, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 1440, 1441, 1442, 1443, 0, 1418,
	0, 0, 0, 1464, 1423, 0, 1454, 0, 0, 1429,
	1430, 1436, 1435, 1431, 1457, 0, 1428, 1426, 1427, 1419,
	1420, 1421, 1422, 1424, 1425, 0, 1417, 0, 1455, 0,
	0, 1465, 2479, 0, 1437, 1445, 1446, 1447, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 1462, 0,
	0, 0, 0, 0, 0, 1432, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 1463, 1423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 1465, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 1462, 1444, 0, 0, 0, 0, 0, 1432, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 1448, 1449, 1450,
	1458, 1459, 1460, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 1439, 1464, 0, 0, 1454, 0, 0,
	1429, 1430, 1436, 1435, 1431, 1457, 0, 1428, 1426, 1427,
	1419, 1420, 1421, 1422, 1424, 1425, 0, 1417, 1456, 0,
	0, 0, 0, 2476, 0, 1437, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 1448, 1449, 1450, 1458, 1459, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 1441,
	1442, 1443, 0, 0, 1417, 0, 0, 0, 1423, 0,
	1454, 0, 1437, 1429, 1430, 1436, 1435, 1431, 1457, 1434,
	1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0,
	0, 0, 1455, 0, 0, 1465, 2475, 0, 0, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 1462, 0, 0, 0, 0, 0, 0, 1432,
	1433, 0, 0, 0, 0, 1440, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 1453, 1423, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	1463, 0, 1465, 0, 0, 0, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 1462,
	0, 0, 0, 0, 0, 0, 1432, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 1444, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1415, 1416, 0, 1448, 1449, 1450, 1458, 1459,
	1460, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 1439, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1456, 0, 0, 0,
	0, 1454, 0, 1437, 1429, 1430, 1436, 1435, 1431, 1457,
	1434, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425,
	0, 0, 0, 0, 0, 0, 0, 2474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 1448, 1449,
	1450, 1458, 1459, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 1440, 1441, 1442, 1443,
	0, 1418, 0, 0, 0, 1464, 1423, 0, 1454, 0,
	0, 1429, 1430, 1436, 1435, 1431, 1457, 0, 1428, 1426,
	1427, 1419, 1420, 1421, 1422, 1424, 1425, 0, 1417, 0,
	1455, 0, 0, 1465, 2023, 0, 1437, 1445, 1446, 1447,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	1462, 0, 0, 0, 0, 0, 0, 1432, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 1463, 1423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 1465, 0, 0, 0,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 1462, 1444, 0, 0, 0, 0, 0,
	1432, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 1448,
	1449, 1450, 1458, 1459, 1460, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 1439, 1464, 0, 0, 1454,
	0, 0, 1429, 1430, 1436, 1435, 1431, 1457, 0, 1428,
	1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0, 1417,
	1456, 0, 3363, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 1448, 1449, 1450, 1458,
	1459, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 1441, 1442, 1443, 0, 0, 1417, 0, 0, 0,
	1423, 0, 1454, 0, 1437, 1429, 1430, 1436, 1435, 1431,
	1457, 1434, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424,
	1425, 0, 0, 0, 1455, 3359, 0, 1465, 0, 0,
	0, 1445, 1446, 1447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 1462, 0, 0, 0, 0, 0,
	0, 1432, 1433, 0, 0, 0, 0, 1440, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 1453, 1423, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 1463, 0, 1465, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 1462, 0, 0, 0, 0, 0, 0, 1432, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 1444, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1415, 1416, 0, 1448, 1449, 1450,
	1458, 1459, 1460, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 1439, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1456, 0,
	0, 0, 0, 1454, 0, 1437, 1429, 1430, 1436, 1435,
	1431, 1457, 1434, 1428, 1426, 1427, 1419, 1420, 1421, 1422,
	1424, 1425, 0, 0, 0, 0, 3290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	1448, 1449, 1450, 1458, 1459, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 1440, 1441,
	1442, 1443, 0, 1418, 0, 0, 0, 1464, 1423, 0,
	1454, 0, 0, 1429, 1430, 1436, 1435, 1431, 1457, 0,
	1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0,
	1417, 0, 1455, 3289, 0, 1465, 0, 0, 1437, 1445,
	1446, 1447, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 1462, 0, 0, 0, 0, 0, 0, 1432,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	1463, 1423, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 1465, 0,
	0, 0, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 1462, 1444, 0, 0, 0,
	0, 0, 1432, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 1448, 1449, 1450, 1458, 1459, 1460, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 1439, 1464, 0,
	0, 1454, 0, 0, 1429, 1430, 1436, 1435, 1431, 1457,
	0, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425,
	0, 1417, 1456, 0, 3185, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 1448, 1449,
	1450, 1458, 1459, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 1441, 1442, 1443, 0, 0, 1417, 0,
	0, 0, 1423, 0, 1454, 0, 1437, 1429, 1430, 1436,
	1435, 1431, 1457, 1434, 1428, 1426, 1427, 1419, 1420, 1421,
	1422, 1424, 1425, 0, 0, 0, 1455, 3092, 0, 1465,
	0, 0, 0, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 1462, 0, 0, 0,
	0, 0, 0, 1432, 1433, 0, 0, 0, 0, 1440,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 1453, 1423,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 1463, 0, 1465, 0, 0, 0,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 1462, 0, 0, 0, 0, 0, 0,
	1432, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	1444, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 1448,
	1449, 1450, 1458, 1459, 1460, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 1439, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	1456, 0, 0, 0, 0, 1454, 0, 1437, 1429, 1430,
	1436, 1435, 1431, 1457, 1434, 1428, 1426, 1427, 1419, 1420,
	1421, 1422, 1424, 1425, 0, 0, 0, 0, 3044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 1448, 1449, 1450, 1458, 1459, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	1440, 1441, 1442, 1443, 0, 1418, 0, 0, 0, 1464,
	1423, 0, 1454, 0, 0, 1429, 1430, 1436, 1435, 1431,
	1457, 0, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424,
	1425, 0, 1417, 0, 1455, 3043, 0, 1465, 0, 0,
	1437, 1445, 1446, 1447, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 1462, 0, 0, 0, 0, 0,
	0, 1432, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 1463, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	1465, 0, 0, 0, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 0, 1462, 1444, 0,
	0, 0, 0, 0, 1432, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1415, 1416, 0, 1448, 1449, 1450, 1458, 1459, 1460, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 1439,
	1464, 0, 0, 1454, 0, 0, 1429, 1430, 1436, 1435,
	1431, 1457, 0, 1428, 1426, 1427, 1419, 1420, 1421, 1422,
	1424, 1425, 0, 1417, 1456, 0, 3042, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	1448, 1449, 1450, 1458, 1459, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 1441, 1442, 1443, 0, 0,
	1417, 0, 0, 0, 1423, 0, 1454, 0, 1437, 1429,
	1430, 1436, 1435, 1431, 1457, 1434, 1428, 1426, 1427, 1419,
	1420, 1421, 1422, 1424, 1425, 0, 0, 0, 1455, 3009,
	0, 1465, 0, 0, 0, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 1462, 0,
	0, 0, 0, 0, 0, 1432, 1433, 0, 0, 0,
	0, 1440, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	1453, 1423, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 1463, 0, 1465, 0,
	0, 0, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 1462, 0, 0, 0, 0,
	0, 0, 1432, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 1444, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 1448, 1449, 1450, 1458, 1459, 1460, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 1439, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1456, 0, 0, 0, 0, 1454, 0, 1437,
	1429, 1430, 1436, 1435, 1431, 1457, 1434, 1428, 1426, 1427,
	1419, 1420, 1421, 1422, 1424, 1425, 0, 0, 0, 0,
	2811, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1423, 3459, 1454, 0, 0, 1429, 1430, 1436,
	1435, 1431, 1457, 0, 1428, 1426, 1427, 1419, 1420, 1421,
	1422, 1424, 1425, 0, 0, 2431, 1455, 0, 0, 1465,
	0, 0, 0, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 1462, 0, 0, 0,
	0, 0, 0, 1432, 1433, 0, 0, 0, 1415, 1416,
	0, 1448, 1449, 1450, 1458, 1459, 1460, 0, 1453, 0,
	0, 0, 0, 0, 0, 0, 1438, 1451, 0, 0,
	0, 0, 2402, 0, 1418, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 3458,
	2114, 0, 0, 0, 0, 0, 0, 1415, 1416, 0,
	1448, 1449, 1450, 1458, 1459, 1460, 0, 0, 0, 0,
	1444, 0, 0, 0, 2403, 0, 1451, 0, 0, 0,
	2113, 0, 0, 1418, 0, 0, 0, 1464, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 1441, 1442, 1443, 0, 0, 0, 0,
	1417, 0, 1423, 1456, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 1465,
	0, 0, 0, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 1462, 0, 0, 0,
	0, 0, 0, 1432, 1433, 0, 0, 0, 0, 0,
	0, 1440, 1441, 1442, 1443, 0, 0, 0, 1453, 0,
	0, 1423, 0, 0, 0, 1454, 1438, 0, 1429, 1430,
	1436, 1435, 1431, 1457, 0, 1428, 1426, 1427, 1419, 1420,
	1421, 1422, 1424, 1425, 1463, 1455, 0, 0, 1465, 0,
	0, 0, 1445, 1446, 1447, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 1462, 0, 0, 0, 0,
	0, 0, 1432, 1433, 0, 0, 0, 1415, 1416, 0,
	1448, 1449, 1450, 1458, 1459, 1460, 0, 1453, 0, 0,
	1444, 0, 0, 0, 0, 1438, 1451, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 1464, 1439, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	1417, 0, 0, 1456, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1415, 1416, 0, 1448,
	1449, 1450, 1458, 1459, 1460, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 1464, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 1441, 1442, 1443, 0, 0, 0, 0, 1417,
	0, 1423, 1456, 2519, 0, 1454, 2518, 1437, 1429, 1430,
	1436, 1435, 1431, 1457, 1434, 1428, 1426, 1427, 1419, 1420,
	1421, 1422, 1424, 1425, 0, 1455, 0, 0, 1465, 0,
	0, 0, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 1462, 0, 0, 0, 0,
	0, 0, 1432, 1433, 0, 0, 0, 0, 0, 0,
	1440, 1441, 1442, 1443, 0, 0, 0, 1453, 0, 0,
	1423, 0, 0, 0, 1454, 1438, 0, 1429, 1430, 1436,
	1435, 1431, 1457, 0, 1428, 1426, 1427, 1419, 1420, 1421,
	1422, 1424, 1425, 1463, 1455, 0, 0, 1465, 0, 0,
	0, 1445, 1446, 1447, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 1462, 0, 0, 0, 0, 0,
	0, 1432, 1433, 0, 0, 0, 1415, 1416, 0, 1448,
	1449, 1450, 1458, 1459, 1460, 0, 1453, 0, 0, 1444,
	0, 0, 0, 0, 1438, 1451, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 1464, 1439, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 806, 1417,
	0, 0, 1456, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 1416, 0, 1448, 1449,
	1450, 1458, 1459, 1460, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 2520, 0,
	0, 1418, 0, 0, 0, 1464, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 1441, 1442, 1443, 0, 0, 0, 0, 1417, 0,
	1423, 1456, 0, 0, 1454, 0, 1437, 1429, 1430, 1436,
	1435, 1431, 1457, 1434, 1428, 1426, 1427, 1419, 1420, 1421,
	1422, 1424, 1425, 0, 1455, 0, 0, 1465, 0, 0,
	0, 1445, 1446, 1447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 1462, 0, 0, 0, 0, 0,
	0, 1432, 1433, 0, 0, 0, 0, 0, 0, 1440,
	1441, 1442, 1443, 0, 0, 0, 1453, 0, 0, 1423,
	0, 0, 0, 1454, 1438, 0, 1429, 1430, 1436, 1435,
	1431, 1457, 0, 1428, 1426, 1427, 1419, 1420, 1421, 1422,
	1424, 1425, 1463, 1455, 0, 0, 1465, 0, 0, 0,
	1445, 1446, 1447, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 1462, 0, 0, 0, 0, 0, 0,
	1432, 1433, 0, 0, 0, 1415, 1416, 0, 1448, 1449,
	1450, 1458, 1459, 1460, 0, 1453, 0, 0, 1444, 0,
	0, 0, 0, 1438, 1451, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 1464, 1439, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 1417, 0,
	0, 1456, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2799, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 1423,
	1456, 0, 0, 1454, 2525, 0, 1429, 1430, 1436, 1435,
	1431, 1457, 0, 1428, 1426, 1427, 1419, 1420, 1421, 1422,
	1424, 1425, 0, 1455, 0, 0, 1465, 0, 0, 0,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 1462, 0, 0, 0, 0, 0, 0,
	1432, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 1454, 1438, 0, 1429, 1430, 1436, 1435, 1431,
	1457, 0, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424,
	1425, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 1448, 1449, 1450, 1458,
	1459, 1460, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 1464, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	1456, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1415, 1416, 0, 1448, 1449, 1450, 1458,
	1459, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 2473, 0, 0, 1418,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 1417, 1423, 0, 0,
	0, 0, 1454, 0, 1437, 1429, 1430, 1436, 1435, 1431,
	1457, 1434, 1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424,
	1425, 1455, 0, 0, 1465, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 1462, 0, 0, 0, 0, 0, 0, 1432, 1433,
	0, 0, 0, 0, 0, 0, 0, 1440, 1441, 1442,
	1443, 0, 0, 1453, 0, 0, 0, 1423, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 1455, 0, 0, 1465, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	2487, 1462, 0, 0, 0, 0, 0, 0, 1432, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 1444, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1415, 1416, 0, 1448, 1449, 1450, 1458, 1459, 1460,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 1464, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 1456, 0,
	1454, 0, 1437, 1429, 1430, 1436, 1435, 1431, 1457, 1434,
	1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 0,
	0, 1415, 1416, 0, 1448, 1449, 1450, 1458, 1459, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 1417, 1423, 0, 0, 0, 0,
	1454, 0, 1437, 1429, 1430, 1436, 1435, 1431, 1457, 1434,
	1428, 1426, 1427, 1419, 1420, 1421, 1422, 1424, 1425, 1455,
	0, 0, 1465, 0, 0, 0, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 1462,
	0, 0, 0, 0, 0, 0, 1432, 1433, 0, 0,
	0, 0, 0, 0, 0, 1440, 1441, 1442, 1443, 0,
	0, 1453, 0, 0, 0, 1423, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 1455,
	0, 0, 1465, 0, 0, 0, 1445, 1446, 1447, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 1462,
	0, 0, 0, 0, 0, 0, 1432, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 1444, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1415,
	1416, 0, 1448, 1449, 1450, 1458, 1459, 1460, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 1464,
	0, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 1456, 0, 1454, 0,
	1437, 1429, 1430, 1436, 1435, 1431, 1457, 1434, 1428, 1426,
	1427, 1419, 1420, 1421, 1422, 1424, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 1454, 0,
	0, 1429, 1430, 1436, 1435, 1431, 1457, 0, 1428, 1426,
	1427, 1419, 1420, 1421, 1422, 1424, 1425, 1455, 0, 0,
	1465, 0, 0, 0, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 1461, 58, 1462, 0, 0,
	0, 0, 0, 0, 1432, 1433, 0, 0, 59, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 63, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 120, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	38, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 75, 0, 0, 121, 0, 0, 0, 0,
	40, 85, 0, 717, 0, 747, 76, 43, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 1439,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 753,
	722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 0, 0, 725, 0,
	0, 0, 754, 0, 0, 0, 0, 0, 731, 732,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 748, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 0, 0, 1429,
	1430, 1436, 1435, 1431, 1457, 0, 1428, 1426, 1427, 1419,
	1420, 1421, 1422, 1424, 1425, 78, 727, 0, 0, 0,
	0, 0, 0, 45, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 729, 0, 0, 0, 0, 48, 145, 81, 0,
	82, 0, 46, 0, 0, 0, 122, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 178,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 116, 752, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 737, 0, 148,
	0, 0, 3, 738, 0, 0, 0, 0, 0, 0,
	719, 0, 750, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744,
}
var sqlPact = [...]int{

	71459, -1000, -1000, -1000, -1000, -1000, -1000, 280, 278, 274,
	271, 269, 258, 257, 256, 255, -1000, -1000, -1000, 254,
	-1000, -1000, 244, -1000, 242, 240, 239, 238, -1000, 237,
	231, -1000, -1000, -1000, -1000, 228, 220, 218, 49830, 1725,
	61004, 52712, 1645, 2132, 44440, 60588, 44024, 60172, 59756, 216,
	-1000, 59340, 208, 207, 194, -1000, -1000, 186, 1680, 36090,
	184, 179, 177, 1855, 174, 163, -1000, 160, -1000, 8680,
	1284, -1000, 157, 156, -1000, 4490, 509, 51886, 2228, 155,
	152, 35673, 2133, -1000, -1000, 1571, -1000, -1000, 151, 150,
	149, 148, 147, 142, 138, 134, 127, -1000, 126, 124,
	123, 113, 111, 110, 108, 107, 105, 104, 99, 97,
	94, 90, 89, 88, 87, -1000, 71581, 1461, 1409, 1406,
	1401, 1395, 1386, 890, 86, 84, 82, 80, 78, 77,
	-1000, -1000, 76, 75, 74, 73, -1000, 72, 71, 188,
	69, 64, 62, 60, 59, 2094, 2154, 1280, 505, 17031,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 65104, 61414, 56, -45, 55, -1000, 2458, 898,
	29843, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 503, -1000, -1000, -1000, 328, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1618, 730,
	-1000, -1000, -1000, 58924, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 61414, -1000, 1724, -37, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 726, -1000, 1718, 144, 1675, -1000, -1000,
	-1000, -1000, -1000, 61414, -1000, -1000, 2771, 2770, 1594, 725,
	58514, -1000, 1237, -1000, 841, 19678, -1000, 1077, -1000, 19678,
	325, -1000, -1000, -1000, -1000, -1000, 43608, 13960, 43192, 42776,
	39876, 58098, 13534, 49420, 1076, -1000, -1000, -1000, -1000, -1000,
	30, 37320, 61414, -1000, 324, -1000, -1000, -1000, -1000, -1000,
	-1000, 25967, 498, 25515, 485, 25063, 454, -1000, -1000, -1000,
	-1000, 2766, 2764, 989, 2763, 2416, 64694, 1385, 2762, 1283,
	1058, 935, 2760, 2757, 2755, 2754, 2753, 2752, 2751, 1193,
	57682, 2196, 39450, 39024, 49830, 49830, 1933, 57266, -1000, -1000,
	1109, 1092, -1000, -1000, -1000, -1000, 2269, 2128, 2119, 49004,
	-1000, -1000, 2750, 2748, 2744, 2737, 2733, 64284, 1376, 2732,
	1877, 2721, 2720, 2717, 2712, 2708, 2707, 2706, 2705, 2704,
	-1000, 48588, 48172, 47756, 47340, 56850, 38598, 38172, -1000, -1000,
	-1000, 31503, 4922, 56434, 32357, 49830, 49830, -1000, -1000, 26406,
	-23, -1000, -1000, -1000, 2139, -1000, 26406, -23, -1000, 2183,
	1483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1910,
	1358, 2599, 37746, 1567, 1195, 2262, 1294, 1906, 2257, 2245,
	2221, 2195, 2194, 1330, 1917, 1281, 1296, 2191, 2186, 2616,
	1526, 42360, 2703, 2702, 2457, 2176, 2138, -1000, -1000, -1000,
	-1000, 1269, -1000, -1000, -1000, 44850, -1000, -1000, 1045, -1000,
	-1000, 1045, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1071,
	63464, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1323, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1513, -1000, 1553, -1000, -1000,
	2701, 2154, 1850, 2448, 2448, 2448, 2495, 496, 481, -1000,
	188, -1000, -1000, 70930, -1000, -1000, 26406, 26406, 26406, 26406,
	26406, 1486, -1000, 724, -1000, -1000, 776, -1000, 720, 651,
	-1000, -1000, -1000, -1000, -1000, -1000, 715, 2623, -1000, 937,
	-1000, -1000, -1000, -1000, 2573, -1000, 16140, -1000, -1000, -1000,
	474, 712, 26406, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 321,
	855, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 643, 1389, 641, 641, 641,
	-1000, -1000, 916, -1000, -1000, -1000, 402, 639, 346, 637,
	-1000, -1000, -1000, -1000, 2175, 711, 701, -1000, 699, 694,
	693, -1000, -1000, -1000, 692, 691, 690, 686, 683, 682,
	681, 680, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 910,
	-1000, 679, 678, 673, 672, 671, 663, 662, 661, 657,
	-1000, -1000, 29, 61414, -1000, 503, 29, -1000, -1000, 656,
	-1000, 20117, 20117, 20117, -1000, -1000, 1716, 26406, -1000, 1924,
	-1000, 502, -226, 830, 30671, -1000, 28996, 830, 765, 33601,
	-1000, 2136, -1000, -1000, 652, 314, -1000, -1000, 2135, 61414,
	14384, 61414, 49830, 49830, -1000, 2365, 26406, -1000, -1000, 40300,
	36910, 61414, 50240, 2534, 9687, 36910, 61414, 2172, -1000, -1000,
	-1000, 61414, -1000, 26406, -1000, 2532, 1236, 17, -1000, -1000,
	-1000, -1000, -1000, -1000, 1860, 1882, 1015, 1752, 1100, -1000,
	19678, 2392, -1000, -1000, -1000, 300, 14384, -1000, 1762, 2335,
	1159, -1000, 1749, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1329, 2332, -1000, 1540, 2327, 1297, -1000, -1000, 881,
	2322, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1557, -1000, -1000, 2442, -1000, -1000, 1427, 2321, -208, -1000,
	-1000, 40300, 37320, 27, -1000, -1000, -19, -1000, 13108, 70930,
	-1000, -1000, -1000, 70930, 826, -1000, -1000, 2318, -1000, 70930,
	820, -1000, -1000, 2317, -1000, -1000, -1000, 2700, -1000, 2698,
	1820, 2695, 2694, 2693, -1000, 1671, 1377, 2690, -1000, 2687,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 46924, 46508, 931,
	-1000, 1715, -1000, -1000, 46092, 872, 1810, -1000, -1000, 1809,
	-1000, 891, -1000, 2686, 56018, 1964, 872, 1808, -1000, -1000,
	-1000, -1000, -1000, 49830, -1000, 49830, -1000, 49830, -1000, 1196,
	-1000, 63874, -226, -1000, -1000, -1000, -1000, -1000, 2314, 2683,
	2682, 2680, -1000, 61414, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 180, 2311, -1000, -1000, 180, 2308, -1000,
	180, 2307, -1000, 166, 2306, -1000, -1000, 1648, 2303, -1000,
	-152, 2293, -1000, -1000, -152, 2286, -1000, 19, -1000, -1000,
	-1000, 898, -1000, 31087, 55602, 40300, 866, 684, 35257, 70930,
	-1000, 40300, 70930, -1000, 46092, -1000, 55186, 45682, -1000, -1000,
	1128, 1900, -1000, -1000, -1000, -1000, 40300, 40300, -1000, 54770,
	-1000, 1561, 1251, 2447, 49830, -1000, -1000, -1000, 2455, 2170,
	-1000, 36500, 51470, -1000, 51060, -1000, 50650, -1000, 49830, -1000,
	49830, -1000, 2678, 2677, 2670, 2298, 1408, 1400, 61414, -1000,
	-1000, 61414, -1000, 61414, -1000, -1000, -1000, 1858, -1000, -1000,
	-1000, -1000, 49830, -1000, -1000, -1000, -1000, -1000, -1000, 2168,
	-1000, 1313, -1000, 1116, -1000, -1000, 181, -1000, -1000, 17,
	-1000, 63464, -1000, -1000, 2154, 1850, -1000, 61414, -1000, -1000,
	-1000, 2154, 1732, 1943, 24611, 1932, 26406, 188, -1000, -1000,
	188, 188, 19239, -1000, -1000, 9687, 9687, 14384, 1084, 26406,
	26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406,
	26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406,
	26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406, 26406,
	26406, 26406, 26406, 26406, 1830, 26406, 1070, 26406, 26406, 26406,
	26406, 1367, -1000, -1000, 1501, 544, 1677, -1000, 2588, 2588,
	2588, 71288, 71288, 586, 2669, 776, -1000, 26406, -1000, -23,
	26406, 14810, -1000, 2609, 1220, -1000, -1000, 481, 8809, 1779,
	-1000, 467, 15262, -1000, -1000, -1000, 16140, 651, 24159, 26406,
	905, 70930, 12684, 2198, 2020, -1000, 2606, -1000, -1000, 2576,
	-1000, -1000, -1000, -1000, 2576, 1083, 1062, 2605, -1000, 2576,
	2576, 650, 763, 762, 760, 758, 631, 26406, 26406, 26406,
	26406, 26406, 26406, 26406, 26406, -1000, 23720, 23268, 22816, 27723,
	22364, 26406, 16579, 21912, 21460, 61414, 29, 2531, 26406, 132,
	-1000, 69536, -1000, 132, 132, 649, 4, 70930, 1948, 1948,
	30257, 1856, 1502, 1502, 1502, -1000, 648, 754, 50, 44,
	40, -1000, -1000, 39, 32, 830, 10124, 53122, 1532, 830,
	830, 298, 339, 466, 28582, 1924, 53122, -1000, -1000, 49830,
	647, 14810, 14384, 1157, -5, 295, 1928, 1925, 1920, -1000,
	1255, -6, 866, 1067, 18, -1000, 3555, -10, -1000, 959,
	-1000, -1000, -1000, -1000, 139, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 909, 646, 644,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 643, 1389, 641, 641, 641, -1000, -1000, -1000,
	402, 639, 346, 637, -1000, -1000, -1000, -1000, -1000, -1000,
	2134, -19, 50240, 852, -11, 997, 17, -1000, 1045, -1000,
	1263, -1000, -1000, -1000, -1000, -1000, -1000, 1141, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2621, -1000, 2595, -1000, -1000,
	2603, 28, -1000, -1000, 14384, -1000, 12, 1366, -1000, 41944,
	2452, 2436, 2432, 1192, -1000, 1166, 2494, 44850, 2513, 2523,
	48, -1000, 2127, -1000, -1000, 840, 1311, 1060, 44850, 1540,
	-1000, 9687, -1000, 1995, 2491, 1221, 1202, 1221, 1221, 1218,
	-1000, 44850, 1053, 1441, 40300, -1000, 1050, -1000, 8, 2510,
	2522, 46, -1000, 2126, 1049, -1000, -1000, 49830, 14384, 825,
	27, 37320, 61414, 294, -1000, 26406, -23, 26406, -23, -1000,
	-1000, 2284, -1000, -1000, -1000, 2668, 1342, 1875, -1000, -1000,
	-1000, 636, 1807, 1540, 1804, -1000, -1000, 45266, 2113, 61414,
	1941, 24, 49830, -1000, -1000, 1432, -1000, 2283, 2282, 642,
	2667, -1000, 1712, 1801, -1000, -1000, -1000, 63054, 1095, 2281,
	897, 164, 2530, 164, 34429, -1000, 61414, -1000, 61414, -1000,
	-1000, -1000, 2666, -1000, 49830, -1000, -1000, 49830, -1000, 49830,
	-1000, 49830, -1000, 49830, 49830, -1000, 61414, 40300, 40300, 40300,
	3782, 41124, -21, 464, -1000, 54360, 61414, 961, 41534, 61414,
	2394, -193, 866, 825, -1000, 825, -1000, 49830, 2166, -1000,
	-1000, -1000, -1000, -1000, -1000, 2665, 2664, -1000, 871, -1000,
	-1000, 61414, -1000, 61414, -1000, -1000, 61414, -1000, 61414, -1000,
	61414, -1000, -1000, -1000, -1000, -1000, 1227, -1000, 2162, -1000,
	2158, -1000, 67, -1000, -1000, -1000, -1000, 1713, 49830, 49830,
	49830, -1000, 44850, -1000, -1000, 2154, -1000, -1000, -1000, -1000,
	-1000, 70930, -1000, 487, -1000, -1000, 70930, 1316, 1935, -1000,
	1935, 26, -1000, 69457, 1894, 49830, -1000, -1000, -1000, -1000,
	-1000, 838, 606, 606, 1073, 1073, 1073, 1073, 2521, 3569,
	3738, 260, 213, 213, 213, 213, 213, 213, 213, 213,
	1249, 837, 837, 1249, 1249, 1249, 1249, 1249, 837, 837,
	837, 213, 213, 213, 71288, 71010, 5829, 26406, 26406, 1043,
	1500, 544, 5498, 26406, 5840, 5840, 5840, 5840, -1000, 1518,
	-1000, -1000, -1000, -1000, 2110, 622, 27723, 27723, -1000, -1000,
	-1000, -1000, 15701, 26406, -1000, -1000, -1000, -1000, 21008, -1000,
	-1000, 68976, -244, 459, -189, 0, -1000, 26406, 26406, 26406,
	457, -1000, 451, -1000, -1000, 1041, -1000, 1040, 1039, 1035,
	-1000, 621, 291, 26406, 61414, -1000, 66750, 751, -47, -1000,
	-22, 1208, -1000, 26406, 287, -1000, 1503, 620, 618, 447,
	-26, -1000, 446, 836, 835, 434, 433, 428, 26406, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 70652,
	66673, 66392, 66289, 8204, 66008, 65931, -28, 427, -1000, 2107,
	-189, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 425, -1000,
	421, -1000, 70572, -189, 420, 714, -1000, 27723, 27723, 27723,
	-1000, 418, -1000, 69736, -1000, 70094, 20569, 20569, 20569, 413,
	70294, 26406, -189, -30, -1000, -32, -1000, -1000, 617, -36,
	897, 20117, 29426, 14384, -1000, 897, 897, 26406, -1000, 26406,
	1904, -1000, -1000, -1000, 1903, 1776, 1948, 30257, -1000, -1000,
	-1000, -1000, 53122, 746, 830, -1000, -1000, -1000, -1000, -1000,
	53122, -1000, 2573, 2302, -1000, -1000, -1000, 61414, 503, -1000,
	53122, 53122, 14384, 830, -1000, 412, 32771, 0, 285, -1000,
	-1000, 14384, 2014, 2014, 2014, -1000, -1000, 2091, 61414, 2546,
	-1000, 1420, -1000, 9687, -1000, 775, 1048, -1000, 2602, 615,
	-1000, 2576, 2576, 61414, 101, 19678, -1000, 1045, -1000, -1000,
	1309, -1000, 1362, -1000, 1052, -1000, -1000, -1000, 19678, -1000,
	1544, 61414, 61414, 49830, -1000, -1000, 1800, 62644, 1789, 9687,
	61414, -1000, -1000, 612, 611, 1893, 1891, 61414, 61414, 62234,
	61824, 61414, 1390, 26406, 1504, 1334, -23, -23, -1000, -1000,
	-23, 609, 1112, 49830, 49830, 49830, 1295, -1000, -1000, -1000,
	-1000, -1000, 49830, -1000, -1000, 2600, -1000, 1221, -1000, -1000,
	-1000, 1221, 1540, 1291, 49830, 40300, 880, 61414, 1456, -23,
	-23, -1000, -1000, -23, 608, 14384, 1347, -1000, 1972, -1000,
	-1000, -1000, 12260, 70930, -1000, 70930, -1000, 61414, -1000, 919,
	61414, 41534, 867, 2278, -1000, 1540, 2274, 503, -1000, -1000,
	34015, -19, 866, 40300, 49830, 24, 40300, 40300, 40300, 2662,
	607, 2661, -1000, 49830, 2261, 1709, 1786, 2343, 798, 61414,
	1514, -1000, 26406, 1411, -1000, 33187, 943, 61414, 1276, 95,
	-1000, -1000, -1000, 53, 61414, -1000, 2660, -1000, -1000, 180,
	180, 180, -1000, 166, 1648, -1000, -152, -152, -1000, -1000,
	3782, 866, 20, 605, -1000, 809, 808, 31933, 40300, -50,
	-1000, -1000, -1000, -1000, -1000, 49830, 61414, 688, 1961, 61414,
	-55, -1000, 145, 604, -1000, 866, -1000, -1000, 879, -1000,
	1114, -1000, -1000, -1000, -19, -19, -1000, -1000, -1000, -1000,
	1226, 1225, 61414, -1000, 14384, 61414, 49830, 14384, 49830, -1000,
	-1000, -1000, -1000, -1000, 1316, -1000, 26406, -1000, -1000, -1000,
	19239, -1000, -1000, -1000, 49830, -209, 26406, 26406, 4581, 4553,
	26406, 27723, 27723, -1000, 26406, 4352, -1000, -1000, -1000, -1000,
	-1000, 2089, 603, 26406, 9687, 6412, 6022, -1000, 410, 9518,
	1249, -1000, 26406, -1000, 407, 18800, -1000, 69815, -4, -57,
	-1000, 2619, 1833, 1617, 1345, 1243, 2584, 11836, -189, -59,
	-1000, -1000, 769, -1000, 2340, -1000, 26406, 70015, 11412, -1000,
	34843, 901, 1514, -1000, -1000, 2576, 827, -1000, -1000, -1000,
	827, -1000, 68899, 9687, 9687, 26406, 26406, -1000, 26406, 26406,
	26406, -1000, -1000, 26406, -1000, -1000, 2062, 26406, -1000, 9687,
	9687, 27723, 27723, 27723, 27723, 27723, 27723, 27723, 27723, 27723,
	27723, 27723, 27723, 27723, 27723, 27723, 27723, 27723, 27723, 27723,
	1915, 27723, 2567, 2567, 2567, -1000, 2143, 2062, 26406, 26406,
	9687, 406, 405, 399, -1000, 26406, -189, -1000, -1000, 3782,
	-1000, 2010, -1000, -51, -1000, 1924, -1000, -1000, 2010, 2010,
	-67, 70930, 30257, 30257, -1000, 598, 26406, 1902, -1000, 750,
	-1000, -68, -1000, 53122, -1000, 749, -236, -1000, 804, -1000,
	-1000, -1000, -1000, 503, -1000, -1000, -1000, 68, 53122, -1000,
	-74, -1000, 2529, 395, 14384, -1000, -1000, -1000, -1000, -1000,
	-1000, -23, -19, 1649, 2618, -1000, 2581, 764, 739, 394,
	2576, 393, 391, -19, 61414, -1000, 17, -1000, -1000, -1000,
	26406, -1000, -1000, 2431, 1034, 1033, -1000, 2256, -1000, 1785,
	-1000, 947, -1000, 1325, -1000, 26406, 26406, 584, 583, 1418,
	2659, 2252, 1648, 2246, 1648, -1000, -1000, 849, -1000, 70930,
	582, 580, -1000, 12, 1351, 878, -1000, -1000, 26406, 26406,
	53946, -1000, 2442, 2442, -1000, 1032, -1000, -1000, -1000, 1540,
	1031, -1000, -1000, 1422, -1000, -1000, 876, -1000, -1000, 26406,
	-1000, 8, 1025, 866, 2055, -1000, 2658, 2655, 2651, 390,
	-83, -7, 9687, 2528, 1686, 61414, 49830, 49830, 2527, 828,
	-1000, 2573, -1000, -1000, -1000, -1000, 872, -1000, -1000, 2648,
	-1000, 957, 14384, 49830, 2244, 1868, 798, 40714, -1000, 872,
	1943, 70930, -1000, 1276, 18348, 2438, -84, -1000, -1000, -1000,
	897, 34429, 30257, 26406, 2647, -85, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 53536, 53536, 40300, 40300, 40300, 866,
	61414, 61414, 41534, 2644, 579, 61414, 61414, 575, -1000, 61414,
	61414, 2643, 40300, -1000, -1000, 1555, 49830, -1000, -1000, 871,
	-1000, -1000, 1464, 1738, 1464, 1573, 68618, -1000, 2383, 14384,
	2524, 5840, 26406, 26406, 275, 5647, 449, 5840, 26406, 26406,
	9687, 6617, -90, 26406, 26406, -1000, 26406, 736, 70930, 2617,
	26406, 387, 386, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 385, -1000, -1000, -1000, -1000, -1000, 70930, 26406,
	49, -1000, -1000, -1000, 65514, -1000, 26406, 379, 375, -1000,
	-1000, -1000, 372, 365, 9192, 7514, 68515, 68234, 68157, 70930,
	2143, 70930, -1000, -1000, 723, 723, 1194, 1194, 1194, 1194,
	2567, 674, 633, 361, 534, 534, 534, 600, 542, 542,
	534, 534, 534, 2050, 1896, 573, 6511, -1000, -1000, 70930,
	70930, 363, -1000, -1000, -1000, -189, 362, 2001, 2489, -1000,
	30257, 2001, 2001, -1000, -1000, 1776, 61414, 70930, 30257, -226,
	-1000, 2573, -1000, -1000, 2302, -1000, 10560, -1000, 14384, -1000,
	-1000, 32771, -1000, 571, -1000, 47, -1000, -1000, -1000, 735,
	2642, 756, -1000, 360, -1000, -1000, -19, 70930, 61414, 61414,
	61414, 2243, -1000, 2219, -1000, 67876, -91, -1000, 69457, 26406,
	61414, -1000, 1512, 1940, 983, -1000, 61414, -1000, 61414, -1000,
	-1000, 61414, 61414, 49830, 2225, -92, 70930, -54, -1000, 803,
	-1000, -1000, 49830, 49830, 40300, 2224, -97, 14384, -1000, 40300,
	-1000, -1000, -1000, 1957, -1000, 52296, 1674, -23, -1000, 2640,
	569, 1540, -23, -1000, 1542, -1000, 732, -1000, -1000, 568,
	61414, 1695, 559, 14384, 1872, 798, 40714, -1000, 1095, 1276,
	-1000, -1000, -112, -1000, 555, -23, 1514, -1000, -133, 70930,
	-1000, 799, -1000, -98, -1000, -1000, 357, -1000, 2391, 2388,
	-1000, -1000, 26406, 557, 549, 61414, 2387, -1000, -1000, -99,
	1684, -1000, -1000, -1000, -1000, 14384, 1307, -1000, -1000, -1000,
	-1000, 2383, 5840, 5840, 26406, 26406, 26406, 5840, 6617, -108,
	-1000, 5840, 5840, -189, -1000, -1000, 69815, -1000, -1000, -1000,
	70930, 10988, 1465, -1000, 67773, -1000, -1000, -1000, -1000, 26406,
	26406, -1000, -1000, -1000, -1000, -1000, 27723, 2042, 548, 9687,
	-1000, -1000, 883, 26406, 26406, 1924, 883, 883, -1000, -113,
	-1000, 830, -1000, -1000, -1000, 2573, 47, -1000, 2636, 14384,
	716, -1000, 2635, -1000, -1000, -1000, -1000, 61414, -1000, 61414,
	-1000, 14384, 61414, 2026, 1772, -1000, -1000, 1886, 546, 27723,
	49830, 793, 2034, 1443, 26406, -1000, -114, -118, 1770, -1000,
	-1000, 1765, 26406, -1000, 9687, 1648, 1648, -120, -122, -1000,
	26406, 1012, 61414, 17909, -1000, -1000, -1000, 26406, 1010, -1000,
	-152, 1456, 1986, -1000, -1000, -1000, -1000, 1885, -1000, -1000,
	61414, 1884, 870, -1000, 41534, 867, -1000, -1000, 865, -1000,
	26406, -1000, 49830, 26406, 1694, -1000, 798, 40714, -1000, 2343,
	-1000, 2362, 61414, 2422, -1000, 1943, 544, -1000, 866, 543,
	531, -124, 26406, 26406, -126, 521, 866, -154, -1000, 772,
	771, -1000, -1000, 49830, 49830, -1000, 5840, 5840, 5840, -1000,
	340, -1000, -1000, 1514, 2488, -1000, 67492, 67415, 3558, 27723,
	9687, -131, -1000, 61414, 70930, -189, -1000, -1000, -1000, 53122,
	675, -1000, 2633, -1000, -1000, 1753, -1000, -1000, -1000, 61414,
	1784, -1000, -1000, 26406, 6511, 519, 26406, -1000, -1000, 1954,
	2084, 1957, 518, -1000, -1000, -1000, -1000, 1314, -1000, -1000,
	70930, 2470, -1000, -1000, 517, 516, 70930, 515, 797, 2037,
	-1000, 70930, 512, 867, -1000, 1477, 1674, 511, -1000, -1000,
	-1000, 1926, 332, 2519, 865, -1000, 2565, -1000, -132, 957,
	-136, 49830, 40714, -1000, 1868, 1119, -137, 61414, 1276, -1000,
	-1000, 40300, 40300, 1443, -138, -143, -1000, 40300, -1000, 1684,
	-1000, 61414, -1000, 61414, -1000, -1000, -1000, 1647, 26406, -1000,
	-1000, 3558, -145, -1000, -180, -1000, 2518, -1000, -1000, -1000,
	-1000, -1000, 2234, 67134, 1841, 61414, 67031, 2074, -1000, -1000,
	1456, 61414, 49830, 952, 14384, 1464, 1464, 26406, 17470, 1469,
	26406, -1000, 49830, 61414, -1000, 2386, 1957, -23, -1000, -1000,
	1443, 508, 1443, 507, -1000, 1872, 1184, -1000, 897, -1000,
	-1000, -153, -155, 1957, 1443, -1000, -161, -1000, -162, -163,
	330, 27284, 27284, 27284, -189, -1000, 61414, 506, 2214, -1000,
	1621, 1529, -20, 960, -1000, -1000, 2034, -170, 503, -1000,
	26406, -1000, -171, -1000, 942, -175, -1000, 941, -176, -1000,
	2036, -1000, -181, 501, -194, -1000, -1000, -1000, 1456, 870,
	1957, 26406, 1957, 26406, -1000, 34429, -1000, 866, 866, 1456,
	1957, 866, -1000, -1000, -1000, -1000, -1000, 28147, 1652, 1228,
	69257, -1000, -1000, -1000, -1000, 61414, -1000, 1688, 1685, 1260,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1841, 70930,
	-1000, 1464, 1985, -1000, 1464, 2031, -1000, 1468, -1000, 61414,
	-1000, 61414, 867, -1000, 1456, -198, 1456, -199, -196, -1000,
	-1000, -1000, 1456, -1000, 2525, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2369, -1000, 969, 1790, 1790, 1621, -1000, 500,
	-1000, 499, -1000, -210, -1000, -1000, 892, 1443, 892, 1443,
	-1000, -1000, 26845, -1000, 2551, -1000, -1000, 1907, -1000, 2034,
	26406, 26406, 1575, -1000, 2631, 1957, -1000, 1957, -1000, -1000,
	-1000, -1000, -1000, -211, -212, -1000, -1000, -1000, -1000, 1456,
	1456, 1456, 1008, 892, 892, -1000, 486, -1000, -1000, 26406,
	-218, 1456, -1000,
}
var sqlPgo = [...]int{

	0, 3271, 3269, 3267, 3266, 3261, 3260, 3259, 3255, 3253,
	3252, 3251, 3248, 3247, 3245, 3244, 3240, 3237, 3235, 3234,
	3233, 3232, 3231, 3229, 3227, 3226, 3225, 3223, 3222, 3221,
	3220, 3219, 3218, 3205, 3204, 3203, 3199, 3198, 3195, 3190,
	3189, 3187, 3185, 3184, 3182, 3181, 31, 3179, 3178, 3177,
	3171, 3169, 3168, 3166, 3163, 3161, 3159, 3155, 3154, 3152,
	3151, 3150, 3146, 3145, 38, 3144, 213, 3141, 3139, 3138,
	3137, 3136, 3132, 3130, 3129, 3128, 3127, 212, 3121, 99,
	3119, 3118, 3117, 3114, 3107, 211, 3106, 3104, 3103, 3102,
	3099, 3098, 3097, 3095, 3093, 101, 3092, 3090, 3089, 3087,
	3084, 3081, 3079, 3076, 3075, 3073, 193, 3065, 210, 3064,
	3063, 3062, 3061, 3060, 3059, 3058, 3057, 3056, 3055, 3051,
	3047, 3044, 3043, 3042, 3041, 3040, 3039, 3037, 3036, 3034,
	3033, 3031, 3030, 3025, 219, 143, 3024, 3023, 209, 205,
	3019, 3014, 93, 91, 97, 3011, 92, 161, 195, 1395,
	186, 3009, 3007, 3005, 3001, 3000, 76, 130, 132, 134,
	129, 90, 2998, 2995, 66, 64, 36, 26, 104, 2993,
	2992, 2991, 2446, 94, 2989, 2987, 203, 192, 2986, 1228,
	2983, 133, 74, 111, 30, 89, 2982, 119, 18, 2981,
	131, 53, 2979, 125, 63, 33, 5874, 6008, 2977, 114,
	217, 70, 162, 167, 166, 171, 156, 135, 502, 2975,
	190, 2974, 68, 148, 2973, 2970, 2966, 56, 144, 75,
	2965, 2, 8, 141, 35, 86, 11, 2958, 12, 2955,
	2952, 2945, 2942, 23, 128, 2941, 120, 73, 2932, 29,
	2931, 14, 168, 2928, 181, 2927, 96, 2926, 199, 151,
	146, 13, 179, 2921, 2920, 2918, 2916, 2915, 107, 17,
	98, 2914, 2913, 108, 187, 2912, 34, 139, 69, 113,
	222, 87, 169, 84, 175, 138, 183, 2910, 2909, 2908,
	170, 2907, 2905, 152, 160, 2904, 2903, 216, 40, 50,
	182, 57, 2902, 2898, 127, 2897, 150, 2896, 2895, 2894,
	208, 136, 157, 5, 62, 95, 25, 7, 180, 123,
	83, 79, 2893, 3008, 1573, 2779, 2891, 118, 85, 54,
	81, 124, 201, 55, 2890, 2889, 3241, 2887, 2886, 2885,
	2884, 142, 2883, 2882, 2880, 112, 58, 72, 2878, 2876,
	126, 65, 10, 88, 204, 77, 163, 188, 191, 2874,
	140, 2872, 37, 109, 2871, 153, 196, 165, 2870, 295,
	115, 2869, 164, 2868, 2866, 2865, 2864, 51, 2863, 2862,
	200, 2860, 116, 2859, 2858, 147, 110, 184, 106, 28,
	2857, 103, 206, 2856, 149, 32, 2855, 117, 44, 0,
	6829, 4881, 5591, 2854, 1947, 2853, 159, 102, 2852, 2851,
	2850, 71, 2849, 59, 2848, 2843, 43, 2842, 15, 6,
	9, 19, 16, 1126, 1073, 2839, 2836, 80, 100, 121,
	2833, 207, 178, 2829, 2825, 2821, 67, 2820, 22, 2819,
	20, 2815, 2814, 27, 4, 2811, 2808, 185, 2804, 189,
	2802, 2799, 2546, 2798, 202, 105, 2797, 137, 155, 2796,
	2795, 2794, 2793, 197, 2784, 194, 2783, 21, 24, 3,
	2782, 2780, 2778, 154, 1, 2379, 2777, 2776, 61, 158,
	2775, 2774, 145,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 34, 34,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 13, 13, 24, 24,
	14, 14, 26, 26, 15, 15, 27, 27, 444, 444,
	18, 29, 19, 30, 12, 445, 445, 445, 445, 22,
	20, 20, 31, 31, 145, 145, 145, 145, 17, 17,
	25, 25, 158, 158, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 443, 443, 160, 160, 159,
	155, 155, 446, 446, 161, 161, 161, 163, 163, 35,
	35, 93, 93, 93, 146, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 81, 81, 387, 387, 388, 388,
	141, 141, 142, 142, 142, 142, 143, 143, 144, 144,
	144, 49, 37, 37, 37, 37, 37, 37, 37, 38,
	38, 38, 38, 39, 39, 39, 39, 39, 39, 40,
	40, 40, 40, 40, 40, 47, 47, 47, 47, 135,
	135, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 451, 451, 452, 452, 453, 453, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 61, 61, 235, 235, 211, 211, 62, 62,
	62, 63, 63, 64, 64, 51, 51, 439, 439, 249,
	249, 354, 354, 66, 66, 67, 67, 67, 67, 67,
	67, 68, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 75, 75,
	75, 76, 76, 76, 73, 73, 73, 71, 71, 71,
	70, 70, 70, 74, 74, 74, 72, 72, 72, 250,
	250, 77, 77, 77, 77, 77, 77, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	356, 356, 78, 78, 78, 324, 324, 82, 82, 82,
	281, 281, 83, 83, 83, 83, 83, 84, 84, 84,
	84, 94, 94, 94, 94, 442, 442, 242, 242, 176,
	176, 176, 176, 89, 89, 89, 89, 90, 90, 90,
	91, 91, 140, 140, 100, 100, 100, 100, 100, 99,
	99, 99, 99, 99, 99, 41, 41, 41, 42, 42,
	43, 43, 44, 44, 45, 45, 46, 46, 46, 46,
	46, 102, 102, 447, 447, 104, 101, 101, 101, 103,
	103, 103, 103, 105, 106, 106, 106, 106, 106, 106,
	107, 107, 381, 381, 257, 257, 379, 379, 395, 395,
	380, 380, 215, 215, 215, 215, 215, 216, 216, 216,
	386, 386, 386, 386, 386, 386, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 125, 125, 125, 134, 134,
	134, 134, 134, 134, 134, 127, 127, 127, 117, 117,
	109, 109, 109, 109, 113, 113, 113, 113, 113, 110,
	110, 114, 114, 116, 116, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 111, 111, 111, 111, 120, 120,
	120, 120, 287, 287, 287, 119, 119, 339, 339, 130,
	130, 130, 130, 130, 130, 338, 338, 126, 126, 126,
	126, 129, 129, 129, 129, 271, 271, 123, 123, 123,
	124, 124, 124, 128, 128, 131, 131, 131, 131, 112,
	112, 112, 456, 456, 456, 132, 132, 122, 122, 133,
	133, 133, 133, 133, 133, 133, 133, 121, 121, 121,
	115, 440, 440, 437, 437, 437, 437, 437, 437, 437,
	438, 438, 441, 441, 87, 87, 87, 56, 56, 457,
	457, 457, 57, 57, 458, 458, 458, 455, 455, 455,
	455, 455, 455, 455, 455, 217, 217, 218, 218, 305,
	305, 305, 305, 305, 221, 221, 162, 162, 162, 224,
	225, 225, 222, 222, 223, 223, 223, 227, 227, 226,
	229, 229, 228, 304, 402, 402, 404, 404, 404, 404,
	404, 404, 404, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 400, 400, 400, 401, 396, 396, 397,
	397, 397, 397, 219, 219, 220, 220, 220, 220, 398,
	399, 240, 240, 342, 403, 403, 405, 405, 407, 459,
	459, 459, 459, 459, 459, 460, 460, 303, 303, 233,
	233, 408, 408, 408, 408, 409, 409, 409, 409, 409,
	412, 411, 410, 410, 410, 410, 410, 334, 334, 334,
	60, 60, 60, 268, 268, 267, 267, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 137, 137, 58, 58, 58, 168, 168, 55, 55,
	55, 462, 462, 59, 59, 59, 463, 463, 65, 65,
	65, 65, 65, 65, 54, 54, 54, 54, 54, 464,
	464, 288, 288, 286, 286, 239, 239, 341, 180, 180,
	156, 156, 156, 21, 23, 23, 16, 16, 32, 32,
	33, 33, 28, 28, 448, 448, 449, 449, 88, 88,
	92, 92, 92, 98, 98, 136, 136, 136, 136, 136,
	136, 136, 36, 36, 36, 36, 48, 48, 48, 48,
	96, 466, 466, 466, 97, 97, 465, 465, 175, 175,
	175, 175, 177, 177, 300, 300, 301, 301, 467, 467,
	302, 302, 302, 302, 170, 169, 171, 171, 53, 53,
	53, 164, 164, 165, 165, 166, 166, 167, 167, 468,
	468, 85, 85, 85, 139, 139, 210, 210, 296, 296,
	296, 234, 234, 185, 185, 299, 299, 297, 297, 297,
	297, 266, 266, 266, 138, 138, 245, 245, 259, 259,
	260, 260, 351, 351, 261, 95, 95, 149, 149, 147,
	147, 147, 147, 147, 147, 469, 469, 148, 148, 148,
	150, 150, 150, 150, 150, 150, 150, 153, 153, 153,
	153, 154, 154, 154, 152, 152, 419, 419, 419, 421,
	421, 422, 418, 418, 420, 420, 461, 461, 270, 270,
	270, 231, 232, 230, 230, 237, 237, 236, 238, 238,
	340, 340, 340, 264, 264, 264, 264, 291, 291, 289,
	289, 290, 290, 292, 292, 293, 293, 293, 294, 294,
	295, 295, 263, 263, 320, 320, 151, 151, 151, 244,
	244, 244, 246, 246, 311, 311, 311, 311, 311, 311,
	312, 312, 310, 310, 310, 310, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 344, 344, 247, 247, 345,
	298, 298, 435, 435, 435, 436, 436, 337, 337, 346,
	346, 346, 346, 346, 346, 335, 335, 336, 336, 352,
	353, 353, 274, 274, 274, 274, 272, 272, 275, 275,
	275, 275, 273, 273, 347, 347, 347, 347, 265, 265,
	348, 348, 348, 349, 306, 307, 307, 357, 357, 357,
	357, 357, 372, 243, 243, 243, 243, 243, 470, 470,
	358, 358, 358, 358, 358, 358, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 362, 362,
	362, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 371,
	371, 371, 371, 371, 363, 363, 368, 368, 369, 369,
	369, 364, 365, 370, 370, 370, 370, 471, 471, 374,
	374, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	360, 360, 360, 367, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 282, 282, 283,
	283, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 315, 315, 315, 315,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 413, 413, 413, 413, 413,
	413, 413, 413, 416, 416, 417, 417, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 423, 423, 424, 424,
	426, 426, 427, 427, 428, 429, 429, 429, 430, 431,
	431, 425, 425, 432, 432, 432, 432, 433, 433, 434,
	434, 434, 434, 434, 326, 326, 327, 327, 333, 333,
	333, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 178, 178, 178,
	178, 178, 255, 255, 253, 253, 253, 256, 256, 254,
	254, 252, 252, 251, 251, 323, 323, 321, 321, 325,
	325, 276, 276, 373, 373, 373, 373, 373, 373, 373,
	277, 277, 277, 285, 278, 278, 279, 279, 279, 279,
	279, 317, 318, 280, 280, 280, 319, 319, 328, 332,
	332, 331, 330, 330, 329, 329, 308, 308, 309, 309,
	262, 262, 472, 472, 258, 258, 350, 350, 350, 350,
	213, 213, 248, 248, 212, 212, 205, 205, 206, 206,
	206, 206, 241, 241, 375, 375, 375, 376, 377, 378,
	322, 195, 194, 182, 183, 193, 192, 191, 181, 184,
	188, 189, 190, 186, 187, 201, 200, 199, 197, 198,
	355, 207, 207, 208, 208, 208, 209, 209, 209, 209,
	179, 179, 202, 202, 203, 204, 204, 196, 196, 196,
	172, 172, 172, 173, 173, 174, 174, 385, 385, 383,
	383, 383, 384, 384, 384, 384, 382, 382, 382, 382,
	382, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 391, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 394, 394,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 9, 6, 9, 6, 5, 6, 5, 1, 1,
	5, 5, 6, 6, 4, 4, 4, 4, 3, 4,
	4, 7, 4, 7, 5, 3, 5, 7, 4, 12,
	4, 12, 1, 3, 5, 5, 2, 5, 3, 6,
	4, 6, 5, 6, 6, 4, 8, 3, 4, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 2, 0, 1, 1, 0, 2, 0, 7,
	2, 5, 6, 2, 1, 6, 4, 9, 7, 12,
	12, 12, 9, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 3, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	3, 3, 4, 3, 4, 7, 4, 4, 4, 3,
	5, 7, 4, 3, 3, 4, 3, 3, 3, 3,
	3, 2, 0, 1, 0, 1, 0, 3, 3, 3,
	3, 3, 6, 4, 4, 4, 3, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 5,
	3, 3, 3, 4, 3, 4, 3, 5, 4, 5,
	3, 4, 5, 3, 4, 3, 4, 3, 3, 4,
	4, 5, 0, 1, 1, 3, 4, 1, 0, 5,
	4, 6, 4, 6, 4, 1, 0, 3, 4, 4,
	5, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 3,
	4, 3, 1, 1, 1, 2, 3, 2, 3, 6,
	6, 7, 9, 7, 9, 3, 4, 5, 5, 3,
	5, 2, 0, 1, 1, 1, 1, 3, 2, 2,
	2, 1, 2, 0, 3, 3, 2, 10, 13, 0,
	2, 3, 9, 12, 0, 2, 3, 1, 1, 2,
	2, 2, 2, 1, 0, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 5,
	8, 5, 11, 3, 0, 2, 4, 3, 3, 1,
	5, 1, 3, 1, 2, 0, 1, 2, 2, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 3, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 2,
	3, 4, 3, 4, 5, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 1, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 3, 4,
	1, 5, 3, 4, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	5, 6, 4, 6, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 1, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 2, 1, 0, 2, 5, 7,
	2, 1, 1, 2, 4, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 4, 1, 2,
	1, 4, 1, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 2, 5, 1, 4, 2, 5, 1, 4,
	3, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 5, 4, 6, 3,
	5, 4, 6, 4, 6, 5, 7, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 1, 5, 5, 3, 1, 1,
	1, 2, 2, 2, 4, 3, 5, 6, 8, 6,
	5, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 1, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 453, -79, -49, -47, -82, -83, -67,
	-81, -84, -78, -94, -98, -88, -100, -136, -3, -35,
	-37, -50, -66, -68, -77, -86, -85, -87, -89, -93,
	-92, -41, -95, -99, -108, -137, -138, -139, 81, 68,
	121, 103, 108, 128, 154, 284, 313, 323, 307, -103,
	-104, 342, -36, -48, -97, -96, -4, -10, 27, 39,
	-38, -39, -40, 53, -58, -55, -52, -61, -450, 83,
	-420, -69, -72, -74, -454, 113, 127, 171, 276, -90,
	-91, 309, 311, -43, -42, 122, -147, -149, -101, -102,
	-140, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, 345, 390, 40, 354,
	69, 116, 317, 21, -5, -6, -7, -8, -9, -11,
	-23, -51, -53, -54, -56, -57, -65, -59, -60, -419,
	-70, -71, -73, -75, -76, 308, -150, -148, 450, 403,
	-13, -18, -19, -14, -15, -17, -20, -16, -24, -29,
	-30, -26, -27, -25, -28, -31, -32, -33, -34, -21,
	-22, -12, 421, 429, -153, -151, -152, -154, 330, 411,
	368, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, -197, -202, -203, -204, -196, -172, -391, -394, 4,
	-389, -392, 133, 179, 246, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 40, 43, 45, 46, 49, 50,
	51, 52, 53, 54, 57, 62, 67, 68, 69, 70,
	71, 76, 73, 74, 75, 78, 80, 81, 82, 85,
	86, 94, 95, 96, 97, 98, 99, 103, 106, 105,
	108, 111, 112, 113, 115, 117, 118, 121, 122, 125,
	123, 374, 124, 126, 127, 128, 129, 139, 140, 141,
	143, 144, 146, 148, 152, 153, 155, 159, 161, 162,
	163, 164, 170, 171, 173, 174, 180, 175, 181, 185,
	188, 187, 189, 190, 191, 182, 196, 200, 201, 202,
	204, 205, 208, 209, 210, 211, 214, 213, 216, 219,
	220, 223, 224, 227, 228, 230, 231, 234, 232, 235,
	233, 236, 239, 237, 238, 241, 242, 244, 243, 168,
	251, 252, 254, 255, 256, 271, 259, 260, 261, 264,
	267, 270, 272, 273, 274, 275, 276, 277, 279, 280,
	282, 284, 286, 288, 289, 290, 291, 292, 293, 295,
	296, 298, 299, 300, 301, 302, 307, 304, 305, 306,
	308, 309, 310, 311, 313, 315, 316, 317, 318, 320,
	322, 343, 344, 356, 323, 324, 325, 326, 327, 328,
	329, 333, 337, 334, 335, 336, 338, 331, 332, 339,
	340, 342, 345, 347, 349, 350, 353, 354, 355, 357,
	360, 361, 362, 358, 359, 352, 367, 365, 366, 369,
	370, 371, 372, 373, 375, 384, 385, 387, 390, 391,
	392, 382, 394, 395, 398, 399, 400, 401, 402, 407,
	403, 405, 408, 409, 410, 416, 415, 422, 423, 425,
	426, 427, 32, 41, 42, 44, 47, 58, 59, 60,
	63, 100, 101, 120, 130, 131, 142, 156, 158, 165,
	166, 167, 186, 192, 194, 198, 217, 249, 250, 265,
	269, 281, 283, 294, 319, 348, 363, 377, 378, 379,
	380, 386, 388, 411, 412, 413, 417, 424, 257, -190,
	2, -172, -172, 284, 26, 2, 26, 280, 332, 370,
	372, 2, 195, 2, -442, -242, 2, 26, -176, -172,
	83, 154, 330, -190, 2, -442, -242, 24, 2, -172,
	2, -177, 2, 323, -172, 453, 78, 224, 62, 319,
	339, -106, 385, -105, 377, 325, -107, -381, 2, 239,
	-172, 453, 453, 453, 453, 2, 368, 274, 415, 331,
	404, 96, 291, 179, -437, 2, 4, -392, -389, -206,
	-205, 368, 96, -204, -196, 443, -203, 453, 453, 453,
	2, 201, 202, 290, 289, 339, 340, 453, 453, 453,
	2, 25, 56, 77, 80, 102, 129, 149, 152, 262,
	-451, 231, 271, 288, 325, 338, 367, 375, 387, -455,
	355, 57, 404, -462, 392, 111, -286, 96, 372, 370,
	224, 153, 399, 315, 157, 397, 106, 185, 402, 401,
	453, 453, 25, 56, 65, 80, 111, 129, 149, 152,
	-453, 271, 288, 322, 325, 338, 367, 375, 392, 387,
	2, 415, 331, 368, 179, 96, 404, 315, 287, -79,
	2, 450, 29, 342, -146, 368, 195, 2, -172, 201,
	202, 2, 453, 453, -437, 2, 201, 202, 2, 57,
	327, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 2, -134, 339,
	355, 163, 39, 62, 26, 67, 97, 155, 179, 180,
	209, 77, 78, -287, -339, -338, 369, 326, 332, 365,
	385, 83, 405, 316, 427, 292, 123, 4, 96, 239,
	341, 377, 224, 38, 71, -461, 2, 368, -465, 2,
	385, 385, 2, -465, 2, -465, 2, -175, 2, 385,
	381, -466, 385, 424, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, -148, -150, -149, 453,
	453, 453, 453, 453, -134, 339, 2, 62, 26, -469,
	147, -236, -237, 396, 193, 119, 263, -147, -149, 2,
	-419, -379, 2, -313, -395, -315, 441, 442, 436, 245,
	428, -326, 102, 397, 257, -394, -316, -328, 120, 319,
	-256, 8, 9, 5, 6, 7, -179, -359, -322, -367,
	389, 132, 248, -209, 455, 10, 450, -416, -149, -327,
	33, 158, 55, -383, -208, -361, -369, -365, -366, -470,
	45, 51, 50, 375, 238, 333, 334, 349, 335, 336,
	43, 407, 175, 254, 256, 187, 4, 194, -207, -196,
	-413, -414, -389, -390, 186, 192, 188, 348, 189, 190,
	191, 42, 294, 143, 144, 142, 112, 101, 100, 250,
	47, 46, 44, 412, -370, 98, 377, 378, 379, 380,
	204, 205, -172, -391, 65, 88, 89, 87, 92, 91,
	93, 90, 341, 404, 56, 32, 165, 166, 198, 249,
	167, 63, -415, 359, 84, 151, 184, 169, 197, 199,
	203, 218, 221, 240, 247, 266, 268, 314, 346, -471,
	413, 130, 131, 269, 281, 363, 386, 388, 156, 217,
	58, 59, -421, 295, -422, -190, -421, 453, 453, 454,
	453, -230, -231, -232, 2, 26, 109, 450, 2, -343,
	2, 448, -347, -149, 212, -346, 450, -344, -197, 258,
	-417, 320, -413, -414, -179, -196, -208, 4, -233, 450,
	452, 96, 368, 66, 2, -281, 450, -172, 26, -146,
	257, 381, 454, -324, 450, 257, 150, 260, -172, 2,
	2, 343, 2, 450, -106, 60, 385, -301, 2, -302,
	-169, -170, -171, -352, 200, 286, 293, 430, 427, -379,
	-447, 150, 433, 381, -379, -257, 452, 2, -347, 165,
	-197, 2, -194, -382, 4, -389, -392, -390, -393, 65,
	-391, 26, 28, 29, 30, 31, 33, 34, 35, 36,
	48, 55, 56, 61, 64, 66, 77, 83, 87, 88,
	90, 89, 91, 92, 93, 102, 104, 107, 109, 110,
	114, 116, 119, 132, 134, 147, 149, 150, 154, 157,
	160, 172, 183, 193, 195, 212, 215, 222, 225, 226,
	245, 248, 253, 257, 258, 262, 263, 278, 285, 297,
	312, 330, 341, 351, 364, 368, 376, 381, 383, 389,
	396, 397, 404, 406, 414, 418, 419, 420, 421, -394,
	2, -347, 165, 2, -199, 165, -347, -202, 2, -387,
	165, -385, 10, -384, 5, 4, -389, -392, -390, 2,
	-181, -172, 2, -193, -382, 2, -212, 165, -197, -198,
	-202, 381, 454, -248, -205, -206, -241, -172, 452, -313,
	2, -95, 2, -313, 165, 2, -95, 165, 2, -313,
	165, 2, -95, 165, 2, 2, 2, 387, 2, 80,
	165, -172, 368, 95, 2, 306, -452, 322, 391, 415,
	2, 2, 2, 2, 2, 2, 2, 368, 331, -463,
	295, -186, 2, -172, 147, -387, 165, 2, -387, 165,
	2, -200, -202, -200, 179, 196, -181, 165, 2, 372,
	370, 372, 370, 150, 2, 195, 2, 195, 2, -348,
	2, -349, -197, 2, 2, 2, 2, 2, 165, -172,
	368, 95, 2, 211, 2, 2, 2, 2, 2, 2,
	2, 2, 2, -250, 165, 2, -197, -250, 165, 2,
	-250, 165, 2, -213, 165, 2, -212, -181, 165, 2,
	-388, 165, 2, -387, -388, 165, 2, -356, 2, -355,
	-384, 411, -79, 450, 339, 450, -387, -197, -197, -313,
	-95, 150, -313, -95, 147, 2, 96, 368, -134, 2,
	147, 406, 2, 8, 2, -387, 292, 139, 2, 343,
	2, 62, -287, 427, 150, 2, -271, 2, 421, -440,
	2, 257, 150, 2, 150, 2, 150, 2, 150, 2,
	150, 2, 289, 340, 202, 384, 210, 124, 150, -271,
	2, 150, 2, 150, 2, 5, 2, 200, 286, 356,
	2, -197, -456, 2, 368, 415, 331, 2, 2, 73,
	74, 150, 2, 150, 427, 2, -265, -347, -300, -301,
	-300, 381, -177, -469, -236, -237, -134, 343, 2, 2,
	-469, -264, -289, -290, 222, 134, 253, -270, 26, 109,
	-270, -270, 49, 451, 451, 11, 12, 64, 37, 441,
	442, 443, 444, 145, 445, 446, 439, 440, 438, 431,
	432, 435, 206, 207, 79, 434, 433, 72, 229, 321,
	135, 136, 137, 138, 303, 176, 177, 178, 14, 15,
	16, 30, 262, 221, 428, 169, 346, 436, 17, 18,
	19, 197, 199, 247, 41, 172, -178, -214, -313, -313,
	-313, -313, -313, 268, 450, -262, -308, 448, -149, 450,
	450, 450, 5, 450, 5, -378, 8, -149, -313, -326,
	451, -254, 450, -149, -326, -321, 450, 319, 448, 450,
	-329, -313, 452, -423, 422, -363, 450, 283, -362, 450,
	-362, -362, 416, -360, 450, 429, 423, 450, -360, 450,
	450, 147, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 416, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 454, -421, -233, 450, -258,
	-350, -313, 443, -258, -258, 257, -251, -313, 84, -274,
	203, 240, 151, 218, 314, 184, -378, -80, -66, -77,
	-85, -95, -108, -138, -139, -310, 455, -337, 429, -149,
	-344, -196, -149, -346, 450, -343, -337, 443, -197, 450,
	150, 450, 452, 150, -241, -382, -181, -197, -207, -208,
	108, -251, -387, -437, -241, -176, 34, -323, -357, -358,
	-371, -359, -368, -364, -367, 299, 300, 298, 302, 301,
	45, 51, 50, 375, 238, 333, 334, 349, 335, 336,
	43, 407, 175, 254, 256, 187, 4, 44, 412, -370,
	194, 186, 192, 188, 348, 189, 190, 191, 42, 294,
	143, 144, 142, 112, 101, 100, 250, 47, 46, 98,
	377, 378, 379, 380, 204, 205, 413, 359, 58, 59,
	-437, -241, 147, -381, -251, 34, -301, 2, -467, 454,
	220, -216, 228, 244, 162, 258, 425, 251, -386, 5,
	4, -322, -334, 102, 224, -367, 9, 442, -375, 8,
	441, -380, -379, 86, 452, -382, -158, 304, -157, 23,
	27, 113, 409, 125, -223, 181, 274, 120, 352, 400,
	-444, -445, 324, 373, 374, 75, 251, 304, 120, -267,
	-269, 34, 94, 242, 270, 52, 173, 233, 234, 354,
	417, 120, 304, 421, 120, -445, 304, -445, -160, 352,
	400, -444, -445, 324, 304, -159, -223, 120, 455, -387,
	-248, 454, 454, -382, 443, 120, 120, 120, 120, 2,
	2, 245, 2, 2, 2, 152, -455, -453, 2, 2,
	2, -197, 165, -199, 165, 2, -202, 415, -235, 257,
	-439, -249, 368, -197, -168, -418, 421, 245, 245, 34,
	450, 2, -183, 165, 2, -173, -172, 179, -418, 245,
	-348, -210, -197, -210, 342, -190, 34, -310, 120, 2,
	2, 2, -172, -161, 454, 54, 310, 120, -161, 120,
	-161, 120, -161, 454, 120, -161, 120, 454, 120, 120,
	451, 454, -356, -387, -144, 421, 150, 83, 450, 450,
	-146, -388, -439, -181, 2, -197, 2, 368, 204, -387,
	-387, -381, 26, 344, 2, 289, 340, 74, -197, 68,
	-441, 147, -438, 315, -437, -197, 96, -197, 96, -197,
	96, -197, -197, 2, 2, 2, 147, 2, 384, 2,
	384, 2, -172, -172, -172, 220, -197, 147, 368, 179,
	368, -161, 454, -177, -469, -264, -381, -469, -290, -289,
	-292, -313, 26, -295, 141, 241, -313, -315, -148, -148,
	-148, -238, -340, -313, 285, 179, -372, -357, -357, -195,
	-382, 377, -313, -313, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, 221, 169, 346,
	41, 172, -313, 381, -313, -313, -313, -313, 237, 245,
	248, 389, 132, 398, 109, 251, -472, 364, 36, -319,
	-149, -255, 450, -333, 31, 351, 26, -326, 450, 2,
	-308, -313, -309, -252, -251, -251, 451, 414, 26, 109,
	443, 2, 8, -282, -284, 426, 236, 99, 164, 235,
	-283, 329, 451, 454, 34, 451, -313, -252, -325, -321,
	-251, -332, -331, 418, -382, 443, -424, 140, 157, 8,
	-376, 8, -376, 377, 377, 8, -376, -376, 450, 451,
	2, 451, 2, 451, 2, 451, 2, 451, 2, -313,
	-313, -313, -313, -313, -313, -313, -251, -276, 2, -373,
	-251, 4, 426, 236, 99, 164, 235, 329, -276, 2,
	-277, 2, -313, -251, -278, -314, -315, 441, 442, 436,
	-326, -279, 2, -313, -252, -313, 48, 215, 383, -280,
	-313, 150, -251, -251, 2, -251, 2, -422, 34, -251,
	-244, 454, 150, 34, 4, -244, -244, 450, 451, 454,
	-275, 161, 232, 227, -275, -343, -274, 203, -272, 266,
	-272, -272, -435, 450, 449, 453, 453, 453, 453, 453,
	-337, -182, 448, 456, -382, -336, -335, 34, -190, 264,
	-337, -337, 452, 451, -336, -197, 450, -251, -382, 357,
	451, 452, 197, 197, 197, 320, 451, -144, 381, 421,
	-79, 259, 451, 454, -243, 33, 448, -284, 450, -374,
	416, 450, 450, 150, -242, -447, 451, 385, -302, -215,
	293, 350, 305, 337, 366, 9, 8, 8, 454, -382,
	454, -448, 77, 381, 66, -304, 165, 66, -396, -184,
	77, -397, -172, 61, 397, 285, 149, -448, 77, -448,
	77, 77, 342, 355, 49, -347, 37, 37, 26, -95,
	216, 150, 427, 368, 179, 381, -347, -269, -357, 94,
	233, 234, 49, -377, -375, 442, -377, 49, -377, -377,
	-377, 421, -199, -347, 381, 275, -387, 381, 454, 37,
	37, 26, -95, 216, 150, 381, -212, -182, -353, -352,
	-205, -172, 452, -313, -95, -313, -95, 120, 2, -463,
	211, 450, -219, 245, -268, -267, 245, -201, 2, -197,
	150, -241, -354, 195, 454, -249, 275, 120, 120, 450,
	117, 291, 2, 257, 245, -183, 165, -164, 371, 120,
	-307, -306, 419, -296, -95, 450, 102, 34, -296, -259,
	-260, -351, -261, -184, 450, -190, -172, 2, -197, -250,
	-250, -250, -212, -213, -181, -387, -388, -388, -79, -355,
	451, 451, -143, 261, -142, -172, 5, -146, 406, -218,
	-305, -304, -400, -401, -396, 221, 179, 397, 196, 133,
	-234, -185, -184, 95, -144, -352, -144, -353, -353, -197,
	147, 2, 2, -271, -241, -241, -181, -181, -181, 339,
	147, 147, 452, -271, 291, 96, 368, 274, 179, -197,
	-212, -197, -347, -469, -293, -375, 450, -294, 319, 320,
	454, -156, 35, 107, 208, -197, 427, 118, -313, -313,
	381, -472, 364, -319, 118, -313, 237, 248, 389, 132,
	398, 109, 251, 150, 450, -314, -314, 451, -253, -313,
	-313, 449, 458, 451, -237, 454, -236, -313, -251, -251,
	451, 451, 381, 381, 381, 381, 450, 452, -251, -241,
	449, 449, 454, 451, -330, -331, 114, -313, 452, -429,
	267, 450, 450, 451, 451, 454, 451, 427, 427, 451,
	451, 451, -313, 34, 454, 454, 454, 451, 454, 454,
	454, 451, 451, 150, 451, 451, -285, 278, 451, 11,
	12, 441, 442, 443, 444, 145, 445, 446, 439, 440,
	438, 431, 432, 433, 72, 229, 321, 14, 15, 16,
	197, 172, -314, -314, -314, 451, -317, -318, 150, 147,
	34, -280, -280, -280, 451, 150, -251, 451, 451, 450,
	451, -307, -350, -246, 2, -343, -192, -382, -307, -307,
	-251, -313, 203, 203, -273, 406, 257, -275, -343, -335,
	451, -436, -378, -337, -336, -378, -312, -311, 148, 35,
	107, 243, 168, -190, -233, -336, -336, -382, -337, 451,
	-247, -345, -417, -237, 452, -382, -135, 5, 248, -135,
	-135, 150, -241, 24, 279, -357, 448, 449, 8, 8,
	450, -376, -376, -241, 150, -379, -301, 395, 70, 293,
	377, -379, -157, 304, -184, -184, -197, 245, -304, 165,
	-163, 245, -357, -191, -172, 450, 450, 208, 208, -184,
	-191, 165, -184, 165, -191, -191, -443, 293, 252, -313,
	223, 291, 246, -158, 304, -95, -95, -95, 450, -447,
	406, 108, -197, -212, -201, 304, -207, -377, -377, -267,
	304, -199, -387, 421, -181, -159, -95, -95, -95, 450,
	-182, -160, 304, -141, 174, 443, -172, 415, -172, -217,
	-220, -218, -184, -457, 423, 421, 120, 120, -233, -211,
	-197, 448, -144, -387, -197, -387, -387, -387, 2, 450,
	2, -197, 120, 257, 245, -165, 115, -468, 433, -181,
	-237, -313, -266, -299, 312, 257, -234, 411, -190, -266,
	-245, 454, 150, 433, 452, -234, 2, -161, -161, -161,
	-161, -161, -79, -144, 454, 450, 433, 433, 450, -387,
	-387, 451, 454, -197, -183, 179, 179, -189, -173, 451,
	454, 452, 450, -144, -44, 421, 368, 339, 339, -172,
	-193, -181, -197, -194, -212, -294, -313, -340, -197, 455,
	-313, -313, 118, 118, -313, -314, -314, -313, 118, 150,
	450, -313, -323, 30, 30, 451, 454, -309, -313, 451,
	414, -237, -237, 451, 5, 236, 164, 235, -283, 235,
	-283, -283, 8, 443, -382, 451, -321, 116, -313, 376,
	-382, 443, -430, -187, 450, -172, 419, -236, -376, -360,
	-360, 451, -372, -357, -313, -313, -313, -313, -313, -313,
	-317, -313, -372, -357, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, 109, 245, 251, -314, -318, -317, -313,
	-313, -357, 451, 451, 451, -251, -79, -263, 157, -353,
	454, -263, -263, 451, -343, -343, 450, -313, 203, 449,
	451, 454, -336, 449, 454, 457, 433, -233, 452, -335,
	451, 454, -298, 34, 451, -382, -95, 260, 5, 8,
	448, 449, 451, -376, 451, 451, -241, -313, 381, 381,
	120, 245, 408, -402, -397, -313, -239, -341, -313, 450,
	450, -155, 113, 342, -449, 2, 120, -161, 120, -161,
	425, 450, 450, 381, 421, -251, -313, -145, 102, -381,
	-445, -445, 381, 381, 275, 421, -251, 381, -144, 150,
	2, 2, 2, 451, 451, 454, -403, 34, 255, -172,
	-197, -199, 34, -62, 421, -352, -378, -168, 2, -288,
	406, -182, -197, 120, -166, 214, -468, -385, -418, -291,
	-289, -266, -258, 246, 76, 451, -307, -260, -246, -313,
	2, 451, -142, -143, -387, -387, -387, -144, -146, -146,
	-305, 2, 450, -183, -173, 450, -146, -185, 2, -388,
	261, -197, -271, -225, -224, 274, 251, -225, 258, 451,
	-156, -182, -313, -313, 118, 30, 30, -313, -313, -323,
	451, -313, -313, -251, 449, 5, -313, 451, 451, 451,
	-313, 452, -431, -172, -313, 451, 451, 451, 451, 454,
	454, 451, 451, 451, 451, -318, 150, 109, 251, 450,
	451, 451, -320, 160, 49, -343, -320, -320, -273, -241,
	-343, -310, -378, -311, -182, 448, -382, -345, 450, 452,
	449, 2, 448, 451, -184, -184, -304, 120, -404, 77,
	-406, 64, 133, 83, 245, 248, 397, 285, 61, 102,
	297, 34, 451, 451, 454, -156, -239, -241, 245, 361,
	102, 245, 102, 95, 392, -184, -191, -241, -241, -197,
	126, 451, 454, 433, -201, -199, -387, 126, 451, -182,
	-388, -221, 182, -184, -401, -398, -399, 285, -405, -407,
	133, 285, -95, 2, 450, -219, -268, -95, 261, 449,
	450, -172, 257, 450, -182, -167, 213, -468, -385, -164,
	-266, -297, 450, 257, -95, -237, 433, 451, 451, 95,
	95, -239, 450, 450, -241, 95, 451, -45, -46, 179,
	77, 277, -194, 368, 179, -156, -313, -313, -313, 451,
	-237, -382, 443, -425, 274, 451, -313, -313, -314, 150,
	450, -323, -426, 420, -313, -251, -426, -426, 451, -337,
	-378, 2, 448, 2, -304, -191, -195, -188, -172, 133,
	165, 248, 208, 450, -314, -197, 450, 2, -459, 104,
	183, -303, -460, 82, 362, -341, 451, 451, 248, 248,
	-313, -357, -161, -161, 451, 451, -313, 381, -381, 81,
	-379, -313, 381, -222, -223, 172, -403, 208, -188, 208,
	-458, 421, -217, -457, -63, -64, 382, -352, -239, -197,
	-239, 257, -468, -385, -165, 110, -241, 77, -291, -319,
	-144, 450, 450, 451, -239, -239, 451, 450, -144, 454,
	26, 450, 26, 450, -197, -212, 451, -237, 49, 451,
	451, -314, -323, 451, -427, -428, -187, -336, 449, 2,
	-406, -188, 245, -313, -174, 450, -313, 183, 105, 170,
	-221, 450, 297, -180, 64, 450, 450, 450, 433, 150,
	450, -457, 272, 450, 95, 242, 451, 34, -64, 9,
	451, -288, 451, -197, -385, -166, 401, 246, 451, -191,
	-266, -388, -388, -303, 451, 451, -388, -46, -241, -241,
	-432, 291, 320, 159, -251, 451, 454, 34, 120, 451,
	-408, 230, -172, 451, 105, 170, -222, -241, -197, -446,
	406, -195, -227, -226, -224, -229, -228, -224, -251, -379,
	81, 272, -251, -197, -240, -342, -184, 95, -221, -95,
	-303, 450, -303, 450, -167, 342, -306, 451, 451, -221,
	-303, 451, 451, 451, 451, -433, -434, 41, 394, 86,
	-313, -433, -433, -428, -430, 133, -409, -412, -411, 257,
	347, 151, 273, 451, 361, 417, -459, 451, -233, -313,
	451, 454, 411, 451, 454, 411, 451, 150, 451, 450,
	451, 454, -222, -458, -221, -239, -221, -239, -259, -144,
	-144, -222, -221, -144, -434, 282, 146, 319, 282, 146,
	-188, -411, 257, -412, 257, 401, 106, -408, -226, 172,
	-228, 150, 272, -241, -342, -457, -222, 451, -222, 451,
	-307, -222, 30, -410, 242, 310, 54, 342, -410, -409,
	450, 450, 451, -464, 419, -303, -464, -303, -434, 22,
	248, 102, -459, -251, -251, -162, 54, 310, 2, -221,
	-221, 451, 451, -222, -222, -222, 381, -464, -464, 450,
	-251, 451, -222,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 357, 358,
	360, 361, 362, 364, 365, 367, 369, 371, 373, 374,
	376, 378, 379, 380, 381, 382, 384, 386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 444,
	446, 0, 895, 897, 899, 901, 27, 28, 0, 0,
	182, 184, 186, 0, 211, 213, 215, 216, 218, -2,
	0, 311, 312, 314, 316, -2, -2, 0, 0, 433,
	435, 0, 0, 455, 456, 0, 985, -2, 449, 451,
	453, 516, 518, 520, 522, 524, 526, 528, 529, 531,
	533, 535, 537, 539, 541, 543, 545, 547, 549, 551,
	553, 555, 557, 559, 561, 563, -2, -2, -2, 0,
	-2, -2, -2, 913, 31, 33, 35, 37, 39, 41,
	60, 267, 268, 270, 272, 274, 277, 278, 280, 1024,
	318, 320, 322, 324, 326, 0, -2, 1036, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 50, 67, 68,
	69, 70, 71, 72, 73, 74, 53, 55, 56, 62,
	63, 65, 0, 0, 1000, 1002, 1004, 1006, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 23,
	359, 363, 366, 368, 370, 372, 375, 377, 383, 385,
	387, 790, 1628, 1642, 1643, 1644, 1647, 1648, 1649, 1650,
	1651, 1652, 1981, 2061, 2062, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 0, 411,
	409, 1622, 412, 1817, 414, 416, 305, 306, 307, 308,
	309, 310, 0, 165, 0, 426, 420, 425, 427, 429,
	430, 431, 432, 406, 404, 0, 426, 1674, 424, 893,
	894, 888, 889, 1850, 923, 445, -2, -2, -2, 1950,
	-2, 477, -2, 484, 1953, 1852, 487, 0, 489, -2,
	492, 896, 898, 900, 29, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 150, -2, -2, -2, -2,
	0, 0, 1709, 1598, 1644, 1601, 1596, 183, 185, 187,
	188, 0, 0, 0, 0, 0, 0, 212, 214, 217,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 698,
	0, 0, 703, 841, 842, 863, 0, 0, 0, 0,
	313, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 0, 0, 0, 245, 351,
	352, 0, 1025, 0, 0, 0, 0, 163, 154, 0,
	0, 686, 434, 436, 0, 153, 0, 0, 892, 0,
	0, 450, 452, 454, 517, 519, 521, 523, 525, 527,
	530, 532, 534, 536, 538, 540, 542, 544, 546, 548,
	550, 552, 554, 556, 558, 560, 562, 564, 565, 0,
	0, 0, 0, -2, -2, 0, -2, -2, 0, 0,
	0, 0, 0, 0, 0, 0, -2, -2, -2, 0,
	0, 0, -2, -2, 0, 0, 0, 568, 570, 571,
	572, 0, 614, 617, 625, 0, 832, 1026, 925, 903,
	916, 925, 905, 906, 907, 908, 909, 914, 915, 918,
	0, 910, 911, 912, 32, 34, 36, 38, 40, 42,
	269, 271, 273, 275, 279, 281, -2, 998, 999, 319,
	321, 323, 325, 327, 437, 0, 439, 0, 569, 989,
	0, -2, 0, 1030, 1030, 1030, 0, 0, 999, 997,
	0, 442, 443, 496, 497, 1261, 0, 0, 0, 0,
	0, 1496, 1345, 0, 498, -2, 1376, 1378, 1929, 1950,
	1495, 1380, 1381, 1382, 1383, 1384, 0, 0, 1387, 0,
	1389, 1390, 1391, 1392, 0, 1394, 0, 1398, 1399, 1400,
	0, 1934, 1575, 1640, -2, 1166, 1167, 1168, 1169, 1170,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1636, 0,
	1467, 1414, -2, 1661, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1718, -2, -2, -2,
	-2, -2, -2, -2, 1222, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1964, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 0, 1918, 1935, 1936, 1941, 1943,
	1937, 1926, 1437, -2, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1223,
	-2, 1930, 1931, 1946, 1947, 1952, 1957, 1958, 1933, 1942,
	-2, -2, 1016, 1825, 1019, 790, 1017, 1001, 1003, 0,
	1005, 0, 0, 0, 1010, 1033, 1031, 0, 1067, 1014,
	1015, 1025, 1085, 1108, 0, 1090, 0, 1108, 1134, 0,
	1095, 1845, 1415, 1416, 0, 1644, 1641, -2, 0, 0,
	0, 0, 0, 0, 208, 407, 0, 413, 415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 922, 447,
	448, 0, 472, 0, 476, 1925, -2, -2, 480, 926,
	930, 931, 932, 933, 0, 0, 0, 0, 0, 486,
	0, 0, 473, 474, 490, 493, 0, 51, 0, 1935,
	1134, 52, 0, 1612, 1666, 1667, 1668, 1669, 1670, 1964,
	1980, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	54, 0, 1935, 57, 0, 1935, 0, -2, 61, 0,
	1935, 166, 167, 1657, 1658, 1662, 1663, 1664, 1665, 64,
	0, 1618, 66, 0, 1615, 75, 0, 1935, 0, 1595,
	-2, 0, 0, 678, 1592, 1597, 679, 1602, 0, 189,
	190, 191, 192, 193, 1935, 195, 196, 0, 198, 199,
	1935, 201, 202, 0, 204, 220, 221, 0, 223, 0,
	1935, 0, 0, 0, 229, -2, 246, 0, 243, 0,
	233, 234, 236, 237, 238, 239, 240, 0, 0, 0,
	847, 285, 283, 1623, 0, -2, 1935, 835, 838, 1935,
	840, 852, 1626, 0, -2, 0, 1023, 1935, 940, 699,
	700, 701, 702, 0, 304, 0, 953, 0, 955, 0,
	975, 1140, 1085, 247, 248, 249, 250, 251, 1935, 0,
	0, 0, 256, 0, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 146, 1935, 330, 349, 146, 1935, 333,
	146, 1935, 336, 146, 1935, 339, 1590, 146, 1935, 342,
	343, 1935, 345, 168, 346, 1935, 348, 0, -2, 400,
	1630, -2, 354, 0, -2, 0, 180, 0, 0, 684,
	685, 0, 890, 891, 0, 457, 0, 0, 566, 567,
	0, 0, 577, 578, 579, 580, 1823, 1733, 583, 0,
	586, -2, 0, 0, 0, 590, 591, 592, 0, 683,
	594, 0, 0, 596, 0, 600, 0, 603, 0, 605,
	0, 607, -2, -2, -2, 0, 0, 0, 0, 633,
	634, 0, 639, 0, 642, 643, 644, 0, 646, 647,
	648, 649, 0, 651, 652, -2, -2, 656, 658, 0,
	665, 0, 669, 0, 573, 574, 146, 1138, 902, -2,
	904, 0, 920, 992, -2, 0, 438, 0, 441, 996,
	990, 995, 1045, 1046, 0, 0, 0, 0, 1028, 1029,
	0, 0, 0, 987, 988, 0, 0, 0, 0, 1501,
	1502, 1503, 1504, 1505, 1506, 1509, 1510, 1507, 1508, 1511,
	1512, 0, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 1515,
	1516, 0, 0, 1518, 0, 1520, 0, 0, 0, 0,
	0, 0, 1324, 1326, 1583, 0, 0, 1517, 1266, 1267,
	1268, 1303, 1304, 0, 0, 1377, 1580, 1579, 1379, 0,
	1532, 0, 1386, 0, 1258, 1393, 1609, -2, 0, 1496,
	1527, 0, 0, 1401, 1402, 1403, 0, 0, 1532, 0,
	0, 1574, 0, 1469, 0, 1202, 0, 1203, 1204, 0,
	1205, 1206, 1219, 1232, 0, 0, 0, 0, 1236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1224, 0, 0, 0, 1555,
	-2, 0, 0, 0, 0, 0, 1018, 0, 0, 1071,
	1584, 1588, 1589, 1071, 1071, 0, 0, 1533, 1131, 1131,
	0, 0, 1127, 1127, 1127, 1125, 1102, 0, 388, 390,
	392, 394, 395, 396, 398, 1108, 0, 1118, 0, 1108,
	1108, 0, -2, 1090, 0, 0, 1118, 1135, 1136, 0,
	0, 0, 0, 0, 0, 1645, 0, 0, 0, 1632,
	0, 0, 180, 0, 418, 428, 1025, 0, 1535, 1157,
	1151, 1160, 1161, 1162, 1163, 1209, 1210, 1211, 1212, 1213,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, -2, 1220, 1222,
	1243, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1215, 0, 1190, 1190, 1190, 1207, 1208, 1231,
	1242, 1234, 1242, 1238, 1158, 1159, 1225, 1226, 1227, 1228,
	0, 422, 0, 0, 0, 0, -2, 482, 0, 928,
	0, 934, 507, 508, 509, 936, 937, 0, 485, 510,
	511, 512, 513, 514, 515, 0, 807, 0, 809, 1604,
	0, 483, 500, 488, 0, 494, 76, 885, 112, 0,
	885, 885, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 100, 108, 88, 89, 0, 0, 0, 0, 58,
	815, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 99, 0, 94, 78, 0,
	0, 0, 102, 110, 0, 137, 139, 0, 0, 1121,
	677, 0, 0, 1645, 1600, 0, 0, 0, 0, 222,
	224, 0, 226, 227, 228, 0, 846, 0, 235, 232,
	276, 764, 1935, 814, 1935, 812, 1627, 0, 0, 0,
	302, 297, 0, 299, 833, 0, 1022, 0, 0, 0,
	0, 853, 0, 1935, 858, 1614, 1653, 1654, 942, 0,
	1146, 0, 956, 0, 0, 1141, 0, 1143, 0, 253,
	254, 255, 0, 328, 0, 144, 145, 0, 331, 0,
	334, 0, 337, 0, 0, 340, 0, 0, 0, 0,
	1025, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 180, 180, 1121, 459, 1121, 461, 0, 0, 581,
	582, 584, 585, 587, 588, -2, -2, 666, 636, 635,
	593, 0, 671, 1841, 681, 595, 1709, 598, 1709, 601,
	1709, 604, 606, 609, 628, 616, 0, 620, 0, 622,
	0, 624, 636, 637, 640, 645, 650, 0, 0, 0,
	0, 831, 0, 919, 993, 995, 440, 991, 1043, 1044,
	1049, 1053, 1054, 1057, 1060, 1061, 1051, 1261, 1011, 1012,
	1013, 1037, 1038, 872, 0, 2061, 1262, 1152, 1263, 1264,
	1611, 0, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, -2, -2, -2, -2, -2, -2, -2, -2,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, -2, -2, -2, 1301, 1302, -2, 1519, 1521, 0,
	1583, 0, -2, 0, -2, -2, -2, -2, 1321, 0,
	1323, 1328, 1330, 1332, 0, 0, 0, 0, 1582, 1342,
	1566, 1567, 0, 0, 1498, 1499, 1500, 1327, 0, 1346,
	1581, 1578, 0, 0, 1531, 1036, 1405, 0, 0, 0,
	0, 1412, 0, 1610, 1257, 1244, 1245, 1246, 1247, 1248,
	1249, 1259, 1397, 1529, 0, 1528, 0, 0, 0, 1539,
	0, 1573, 1569, 0, 1633, 1639, 1477, 0, 0, 0,
	0, 1607, 0, 0, 0, 0, 0, 0, 0, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	1542, -2, -2, -2, -2, -2, -2, -2, 0, 1451,
	0, 1453, 1533, 1552, 0, 0, 1347, 0, 0, 0,
	1496, 0, 1456, 1533, 1560, 0, 0, 0, 0, 0,
	1533, 0, 1565, 0, 1463, 0, 1465, 1020, 0, 0,
	1146, 0, 0, 0, 1587, 1146, 1146, 0, 1066, 0,
	0, 1128, 1129, 1130, 0, 0, 1131, 0, 1122, 1126,
	1123, 1124, 0, 0, 1108, 389, 391, 393, 397, 399,
	1118, 1082, 0, 0, 1613, 1088, 1117, 0, 790, 1107,
	1118, 1118, 0, -2, 1092, 0, 0, 1036, -2, 181,
	789, 0, 0, 0, 0, 408, 410, 0, 0, 0,
	402, 0, 405, 0, 1147, 1150, 0, 1164, 0, 0,
	-2, 0, 0, 0, 0, 0, 475, 0, 927, 935,
	0, 504, 0, 506, 0, 808, 1606, 1605, 0, 495,
	0, 0, 0, 0, 884, 116, 1935, 0, 148, 0,
	0, 758, 1619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 90,
	0, 0, 0, 0, 0, 0, 0, 816, 817, 819,
	825, 827, 0, 821, 1608, 0, 822, 0, 824, 826,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 91, 0, 0, 0, 0, 1594, 171, 1120,
	1593, 1603, 0, 194, 197, 200, 203, 0, 230, 0,
	0, 706, 689, 0, 810, 813, 0, 790, 845, 1625,
	0, 284, 180, 0, 0, 298, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 1935, 944, 950, 0,
	1036, 1145, 0, 973, 958, 0, 0, 0, 973, 977,
	978, 980, 981, 0, 0, 1142, 0, 257, 350, 146,
	146, 146, 1591, 146, 146, 169, 344, 347, 353, 401,
	1025, 180, 178, 1804, 176, 173, 175, 0, 0, 0,
	707, 709, 710, 711, 712, 0, 1654, 0, 1762, 1654,
	0, 961, 963, 0, 151, 180, 296, 458, 463, 575,
	0, 611, 630, 589, 682, 680, 597, 599, 602, 619,
	0, 0, 0, 632, 0, 0, 0, 0, 0, 667,
	668, 670, 1139, 994, 0, 1055, 0, 1052, 1058, 1059,
	0, 1040, 870, 871, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 1343, 0, -2, 1322, 1325, 1329, 1331,
	1333, 0, 0, 0, 0, 0, 0, 1522, 0, 1524,
	1344, 1576, 1579, 1494, 0, 0, 1035, 1036, 1036, 0,
	1411, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	1537, 1538, 0, 1404, 0, 1570, 0, 0, 0, 1413,
	0, 0, 0, 1214, 1188, 0, 1242, 1240, 1241, 1235,
	1242, 1239, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 1436, 1448, 0, 1450, 1452, 0, 0, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1350, 1351, 1352, 1455, 1558, 1559, 0, 0,
	0, 0, 0, 0, 1461, 0, 1564, 1462, 1464, 1025,
	1068, 1063, 1585, 1121, 1070, 1072, 1586, 1616, 1063, 1063,
	0, 1534, 0, 0, 1112, 0, 0, 0, 1114, 0,
	1103, 0, 1105, 1118, 1087, 0, 0, 1080, 0, 1076,
	1077, 1078, 1079, 790, 1116, 1089, 1093, 1633, 0, 1137,
	0, 1097, 1100, 0, 0, 1646, 205, 209, 210, 206,
	207, 0, 417, 0, 0, 1536, 0, 1153, 0, 0,
	0, 0, 0, 421, 0, 471, -2, 502, 503, 505,
	0, 501, 113, 885, 0, 0, 876, 0, 118, 1935,
	127, 0, 735, 0, 1617, 0, 0, 0, 0, 887,
	0, 1935, 146, 1935, 146, 129, 132, 0, 136, 134,
	0, 0, 726, 77, 885, 80, 84, 92, 0, 0,
	0, 98, 0, 0, 878, 0, 820, 823, 829, 59,
	0, 880, 874, 0, 873, 138, 82, 86, 93, 0,
	882, 79, 0, 180, 0, 1599, 0, 0, 0, 0,
	0, 705, 775, 0, 0, 0, 0, 0, 0, 290,
	286, 0, 295, 301, 300, 836, -2, 839, 848, 0,
	850, 862, 0, 0, 0, 946, 950, 0, 949, 1023,
	1048, 1144, 951, 973, 0, 0, 0, 960, 957, 954,
	1146, 0, 0, 0, 0, 0, 252, 329, 332, 335,
	338, 341, 355, 155, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 1654, 1654, 0, 1621, 0,
	0, 0, 0, 152, 460, 0, 0, 621, 623, 636,
	659, 660, 721, 0, 721, 0, 0, 1039, 872, 0,
	1265, 1306, 0, 0, -2, 0, 0, 1310, 0, 0,
	0, -2, 0, 0, 0, 1523, 1525, 0, 1578, 1406,
	0, 0, 0, 1410, 1388, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 0, 1395, 1396, 1497, 1540, 1568, 1572, 0,
	1634, 1638, 1475, 1476, 1480, 1624, 0, 0, 0, 1233,
	1237, 1417, 0, 0, 0, 0, 0, 0, 0, 1541,
	1551, 1553, 1348, 1349, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, -2, -2, -2, 1366, 1367, 1368,
	-2, -2, -2, 0, 0, 0, 1554, 1556, 1557, 1561,
	1562, 0, 1458, 1459, 1460, 1563, 0, 1065, 0, 1069,
	0, 1065, 1065, 1032, 1110, 0, 0, 1133, 0, 1085,
	1104, 0, 1094, 1083, 0, 1084, 0, 1115, 0, 1091,
	1096, 0, 1099, 0, 1406, -2, 164, 419, 403, 0,
	0, 1155, 1165, 0, 1217, 1221, 423, 1119, 0, 0,
	0, 0, 147, 733, 757, 0, 0, 865, 872, 0,
	0, 120, 0, 0, 0, 128, 0, 125, 0, 131,
	135, 0, 0, 0, 0, 0, 95, 96, 97, 0,
	101, 103, 0, 0, 0, 0, 0, 0, 149, 0,
	225, 844, 231, 715, 763, 0, 765, 0, 690, 0,
	764, 814, 0, 282, 0, 289, 0, 834, 849, 0,
	0, 0, 0, 0, 948, 950, 0, 941, 942, 973,
	1047, 952, 971, -2, 970, 0, 1036, 979, 976, 982,
	983, 0, 177, 0, 172, 174, 0, 158, 0, 0,
	708, 713, 0, 0, 0, 0, 0, 962, 964, 0,
	0, 576, 631, 661, 720, 0, 0, 663, 1050, 1056,
	1041, 872, 1308, 1312, 0, 0, 0, 1314, -2, 0,
	1336, -2, -2, 1526, 1577, 1385, 1036, 1407, 1409, 1260,
	1571, 0, 1482, 1479, 0, 1466, 1189, 1427, 1428, 0,
	0, 1431, 1433, 1434, 1435, 1550, 0, 0, 0, 0,
	1457, 1021, 1471, 0, 0, 1073, 1471, 1471, 1111, 0,
	1113, 1108, 1106, 1081, 1074, 0, 1634, 1098, 0, 0,
	1148, 1154, 0, 1216, 114, 115, 117, 0, 734, 0,
	737, 0, 0, 0, 0, 744, 745, 0, 0, 0,
	0, 0, 779, 788, 0, 867, 0, 0, 0, 122,
	141, 0, 0, 886, 0, 146, 146, 0, 0, 877,
	0, 0, 0, 0, 879, 881, 875, 0, 0, 883,
	170, 723, 0, 775, 767, 768, 769, 0, 774, 776,
	0, 0, 694, 691, 706, 689, 811, 843, 0, 287,
	0, 861, 0, 0, 0, 938, 950, 0, 943, 944,
	303, 0, 0, 0, 959, 1048, 0, 179, 180, 0,
	0, 0, 0, 0, 0, 0, 180, 462, 464, 0,
	0, 470, 719, 0, 0, 1042, 1316, -2, -2, 1337,
	0, 1635, 1637, 1036, 0, 1468, 0, 0, -2, 0,
	0, 0, 1007, 0, 1064, 1062, 1008, 1009, 1132, 1118,
	0, 1101, 0, 1156, 119, 0, 738, 739, 1620, 741,
	0, 743, 746, 0, 748, 1656, 0, 752, 759, 780,
	0, 715, 0, 785, 786, 866, 761, 0, 121, 123,
	140, 869, 124, 130, 0, 0, 81, 0, 0, 1703,
	105, 83, 0, 689, 722, 0, 766, 0, 777, 778,
	692, 0, 0, 0, 288, 291, 0, 294, 0, 862,
	0, 0, 0, 945, 946, 0, 0, 0, 973, 984,
	157, 0, 0, 788, 0, 0, 756, 0, 162, 0,
	466, 0, 468, 0, 662, 664, 1408, 1486, 0, 1429,
	1430, -2, 0, 1374, 1470, 1472, 0, 1086, 1075, 1149,
	736, 740, 0, 0, 794, 0, 0, 0, 783, 784,
	723, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 687, 0, 0, 695, 0, 715, 0, 292, 293,
	788, 0, 788, 0, 947, 948, 0, 966, 967, 969,
	974, 0, 0, 715, 788, 755, 0, 465, 0, 0,
	0, 0, 0, 0, 1481, 1375, 0, 0, 0, 747,
	799, 0, 0, 0, 781, 782, 779, 0, 790, 126,
	0, 868, 0, 727, 0, 0, 730, 0, 0, 106,
	1703, 104, 0, 0, 0, 771, 773, 696, 723, 694,
	715, 0, 715, 0, 939, 0, 968, 180, 180, 723,
	715, 180, 467, 469, 1478, 1483, 1487, -2, 1898, 1706,
	0, 1484, 1485, 1473, 1474, 0, 749, 795, 796, 0,
	791, 792, 793, 1655, 750, 751, 760, 787, 794, 142,
	724, 0, 0, 725, 0, 0, 109, 0, 111, 0,
	770, 0, 689, 693, 723, 0, 723, 0, 1146, 159,
	160, 753, 723, 161, 0, 1489, 1490, 1491, 1492, 1493,
	742, 797, 0, 798, 0, 0, 0, 799, 728, 0,
	731, 0, 107, 0, 772, 688, 859, 788, 859, 788,
	965, 754, 0, 800, 0, 803, 804, 0, 801, 779,
	0, 0, 718, 854, 0, 715, 856, 715, 1488, 802,
	805, 806, 762, 0, 0, 714, 716, 717, 860, 723,
	723, 723, 0, 859, 859, 729, 0, 855, 857, 0,
	0, 723, 732,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 439, 3, 445, 440, 3,
	450, 451, 443, 441, 454, 442, 452, 444, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 458, 3,
	431, 433, 432, 435, 455, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 448, 3, 449, 446, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 456, 438, 457, 436,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 434, 57774, 437,
	57775, 447, 57776, 453, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1053
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1181
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1223
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1260
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1264
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1270
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1280
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1289
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1300
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1304
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1310
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1328
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1342
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1353
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1372
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1392
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1396
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1407
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1424
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1436
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1459
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1473
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1499
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1510
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1515
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1520
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1530
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1598
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1683
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1734
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1737
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1767
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1771
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1808
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1817
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1823
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1828
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1833
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1838
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1843
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1847
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1863
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1866
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1874
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1882
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1892
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1906
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = nil
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1944
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1959
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1960
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1978
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1983
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2038
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2059
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2063
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2067
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2093
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2108
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2109
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2110
		{
			return helpWith(sqllex, "CREATE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "create cast")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2120
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2121
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2122
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2123
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2124
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2125
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplemented(sqllex, "create operator")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplemented(sqllex, "create publication")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplemented(sqllex, "create rule")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			return unimplemented(sqllex, "create server")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2131
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2132
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2133
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2137
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2140
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2141
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2144
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2145
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			return unimplemented(sqllex, "drop server")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2164
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2165
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2166
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2167
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2171
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2172
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2173
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2176
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2177
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2178
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2189
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2205
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2211
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2215
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2224
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2231
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2243
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2247
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2258
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2270
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2278
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2286
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2300
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2317
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2321
		{

			sqlVAL.union.val = nil
		}
	case 303:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2335
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "DELETE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2352
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2355
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2356
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2357
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2358
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2359
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2369
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2370
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{
			return helpWith(sqllex, "DROP")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2374
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2375
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2376
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2377
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2378
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2386
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2393
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2401
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2408
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2420
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2423
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2431
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2439
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2454
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2462
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2469
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2484
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2492
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2499
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2503
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2508
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2534
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2551
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "DELETE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2560
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "INSERT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2563
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2565
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2569
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2574
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2575
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2576
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2581
		{
			return helpWith(sqllex, "DELETE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2582
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "INSERT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2585
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2594
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2616
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2624
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2628
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2642
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2649
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2661
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2665
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2675
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2683
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2687
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2710
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2714
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2718
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2721
		{
			return helpWith(sqllex, "GRANT")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2741
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2749
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2752
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2757
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2761
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2771
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2789
		{
			return helpWith(sqllex, "RESET")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2790
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2798
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2802
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2816
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2830
		{
			return helpWith(sqllex, "USE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2835
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2836
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2837
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2843
		{
			return helpWith(sqllex, "USE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2859
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2877
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2895
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2903
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2911
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2917
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2931
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2935
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2939
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2943
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2967
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2987
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3012
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3017
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3021
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3040
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3047
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3053
		{
			return unimplemented(sqllex, "set from current")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3062
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3067
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3074
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3078
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3095
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3116
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3130
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3138
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3142
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3148
		{
			sqlVAL.union.val = tree.Low
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3152
		{
			sqlVAL.union.val = tree.Normal
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3156
		{
			sqlVAL.union.val = tree.High
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3175
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3180
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3184
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3197
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3211
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3213
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3216
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3217
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3218
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3219
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3222
		{
			return helpWith(sqllex, "SHOW")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3229
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3230
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3242
		{
			sqlVAL.str = "client_encoding"
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			sqlVAL.str = "timezone"
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3246
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3264
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3268
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3279
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3287
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3302
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3310
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3336
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3347
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3374
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3395
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3399
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3403
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3412
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3415
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3426
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3431
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3444
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3447
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3451
		{
			sqlVAL.union.val = true
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3453
		{
			sqlVAL.union.val = true
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3455
		{
			sqlVAL.union.val = false
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3466
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = true
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3470
		{
			sqlVAL.union.val = false
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3489
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3493
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3496
		{
			sqlVAL.union.val = true
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3497
		{
			sqlVAL.union.val = false
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3513
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3544
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = true
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3548
		{
			sqlVAL.union.val = false
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3555
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3562
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3576
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3583
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3595
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3600
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3609
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3621
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3641
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3649
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3652
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3656
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3660
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3664
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3672
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3680
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3694
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3698
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3709
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3717
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3721
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3728
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3853
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3857
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3861
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3900
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3904
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3909
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3913
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3922
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3929
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3933
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3945
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3954
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3957
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3993
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4005
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4018
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4019
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4020
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4024
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4035
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4047
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4048
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4049
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4063
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4064
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4065
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4066
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4067
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4068
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4069
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4070
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4075
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4091
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4097
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4100
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4104
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4113
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4120
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4125
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4130
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4143
		{
			sqlVAL.str = ""
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4156
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4163
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4170
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4176
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4186
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4196
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4206
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4220
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4235
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4241
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4249
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4253
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4257
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4261
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4265
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4283
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4287
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4295
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4307
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4317
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4321
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4325
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4332
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4354
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4364
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4381
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4404
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4414
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4428
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4438
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4448
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4463
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4470
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4487
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4507
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4513
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4517
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4528
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4529
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4530
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4531
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4533
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4560
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4584
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4592
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4596
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4605
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4621
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4633
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4653
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4657
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4663
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4667
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4673
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4692
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4697
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4701
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4705
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4708
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4712
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4713
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4715
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4716
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4717
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4720
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4722
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4724
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4727
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4729
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4730
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4732
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4734
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4742
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4745
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4753
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4760
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = nil
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4778
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4782
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4785
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4790
		{
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4791
		{
		}
	case 843:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4799
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4807
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4808
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4811
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4812
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4818
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4820
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4822
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4824
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4826
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4828
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4844
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4858
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4873
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4887
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4901
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4904
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4905
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4909
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4924
		{
			sqlVAL.union.val = false
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4930
		{
			sqlVAL.union.val = true
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = false
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4940
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4953
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4964
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.str = ""
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = tree.Descending
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 873:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4990
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5000
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5006
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5014
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5020
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5028
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5034
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5042
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5046
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5051
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5055
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5056
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5067
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5077
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5089
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5097
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5100
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5104
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5105
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5106
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5125
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5127
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5130
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5140
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5143
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5148
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5157
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5158
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5159
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5174
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5177
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5178
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.str = ""
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5186
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5190
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.str = ""
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5200
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5204
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5214
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5220
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5224
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5237
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5239
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5243
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5256
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5262
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5274
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5278
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5288
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5308
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5316
		{
			sqlVAL.str = ""
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5322
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.str = ""
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5336
		{
			sqlVAL.str = ""
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.str = ""
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5351
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5352
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5364
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5371
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5378
		{
			return helpWith(sqllex, "INSERT")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5396
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5400
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5409
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5416
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5454
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5462
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5471
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5472
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5480
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5485
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5489
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 974:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5517
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5521
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5522
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5543
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5546
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5550
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5593
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5599
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5603
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5618
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5626
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5634
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5643
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5644
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5649
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5684
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5685
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5686
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5721
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5735
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5747
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5751
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5791
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5803
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5807
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5811
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5833
		{
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5834
		{
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5838
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.union.val = nil
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5848
		{
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5852
		{
			sqlVAL.union.val = true
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5856
		{
			sqlVAL.union.val = false
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5860
		{
			sqlVAL.union.val = false
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = true
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5877
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5878
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5892
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5898
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5912
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5917
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5932
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5941
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5952
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5956
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5985
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6002
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6008
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6009
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6012
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6013
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6034
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6040
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6044
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6066
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6068
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6080
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6083
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6085
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6105
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6110
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6115
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6126
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6133
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6138
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6153
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6157
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6196
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6210
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6245
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6256
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6280
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6286
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6308
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6310
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = nil
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6329
		{
			sqlVAL.union.val = true
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6333
		{
			sqlVAL.union.val = false
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6365
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6390
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6403
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6409
		{
			sqlVAL.str = tree.AstFull
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.str = tree.AstRight
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.str = tree.AstInner
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6427
		{
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6428
		{
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6449
		{
			sqlVAL.str = tree.AstHash
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6457
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.str = ""
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6490
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6495
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6513
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6519
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6527
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6556
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6569
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6577
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6578
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6592
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6600
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6602
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6610
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6622
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6623
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6640
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6644
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6652
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6656
		{
			sqlVAL.union.val = types.String
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6660
		{
			sqlVAL.union.val = types.Name
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6664
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6689
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6697
		{
			sqlVAL.union.val = types.INet
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6701
		{
			sqlVAL.union.val = types.Oid
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6705
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6744
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6752
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6760
		{
			sqlVAL.union.val = nil
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6771
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6775
		{
			sqlVAL.union.val = types.Int2
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6779
		{
			sqlVAL.union.val = types.Int2
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6783
		{
			sqlVAL.union.val = types.Int4
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6787
		{
			sqlVAL.union.val = types.Int
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6791
		{
			sqlVAL.union.val = types.Int
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = types.Int
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6799
		{
			sqlVAL.union.val = types.Float4
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = types.Float4
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = types.Float
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = types.Float
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6819
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6827
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6835
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6843
		{
			sqlVAL.union.val = types.Bool
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6847
		{
			sqlVAL.union.val = types.Bool
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = types.RegType
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6876
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6889
		{
			sqlVAL.union.val = types.Float
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6895
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6901
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6923
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6941
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6945
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6949
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = types.String
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = true
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6963
		{
			sqlVAL.union.val = false
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = types.Date
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6972
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6977
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6985
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6987
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6995
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7011
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = true
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = false
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = false
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = types.Interval
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = tree.Year
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = tree.Month
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = tree.Day
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = tree.Month
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = nil
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = tree.Second
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7098
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7133
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7142
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7386
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7452
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7474
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7668
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7673
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7682
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7700
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7709
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7748
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7759
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7760
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7775
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7786
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7807
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7827
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7895
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7900
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7905
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7907
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7910
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7915
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7920
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7925
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7930
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7939
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7940
		{
			return unimplemented(sqllex, "treat")
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7961
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7966
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7971
		{
			return unimplemented(sqllex, "within group")
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7972
		{
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7991
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8007
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.str = ""
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8098
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8111
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8139
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8143
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8147
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8185
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = tree.Any
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = tree.Some
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = tree.All
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.Div
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = tree.LT
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = tree.GT
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = tree.LE
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = tree.GE
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.union.val = tree.NE
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = tree.Like
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8255
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8311
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8377
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8453
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8496
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8540
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8545
		{
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8546
		{
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8550
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8585
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8618
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8626
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8676
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8692
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8701
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8712
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8721
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8729
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8833
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8837
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8841
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8855
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8859
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8863
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8876
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8894
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8907
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8914
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8939
		{
			sqlVAL.str = ""
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8945
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8949
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
