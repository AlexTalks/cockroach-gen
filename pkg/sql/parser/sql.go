// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:570
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9276

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 965,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	176, 801,
	193, 801,
	207, 229,
	279, 229,
	287, 657,
	314, 229,
	323, 657,
	360, 657,
	384, 229,
	407, 657,
	-2, 0,
	-1, 75,
	207, 233,
	-2, 0,
	-1, 76,
	105, 965,
	182, 965,
	393, 965,
	394, 965,
	-2, 0,
	-1, 87,
	118, 939,
	132, 939,
	190, 939,
	218, 939,
	247, 939,
	256, 939,
	389, 939,
	-2, 926,
	-1, 115,
	123, 581,
	206, 581,
	377, 581,
	-2, 0,
	-1, 116,
	4, 967,
	21, 967,
	22, 967,
	23, 967,
	24, 967,
	25, 967,
	27, 967,
	32, 967,
	37, 967,
	38, 967,
	39, 967,
	40, 967,
	41, 967,
	42, 967,
	43, 967,
	44, 967,
	45, 967,
	46, 967,
	48, 967,
	49, 967,
	50, 967,
	51, 967,
	52, 967,
	53, 967,
	56, 967,
	57, 967,
	58, 967,
	59, 967,
	61, 967,
	62, 967,
	66, 967,
	67, 967,
	68, 967,
	69, 967,
	70, 967,
	72, 967,
	73, 967,
	74, 967,
	75, 967,
	77, 967,
	79, 967,
	80, 967,
	81, 967,
	84, 967,
	85, 967,
	93, 967,
	94, 967,
	95, 967,
	96, 967,
	97, 967,
	98, 967,
	99, 967,
	100, 967,
	102, 967,
	104, 967,
	105, 967,
	107, 967,
	110, 967,
	111, 967,
	112, 967,
	114, 967,
	116, 967,
	117, 967,
	119, 967,
	120, 967,
	121, 967,
	122, 967,
	123, 967,
	124, 967,
	125, 967,
	126, 967,
	127, 967,
	128, 967,
	129, 967,
	131, 967,
	137, 967,
	138, 967,
	139, 967,
	140, 967,
	141, 967,
	142, 967,
	144, 967,
	146, 967,
	150, 967,
	151, 967,
	153, 967,
	154, 967,
	156, 967,
	157, 967,
	159, 967,
	160, 967,
	161, 967,
	162, 967,
	163, 967,
	164, 967,
	165, 967,
	166, 967,
	167, 967,
	168, 967,
	171, 967,
	172, 967,
	176, 967,
	177, 967,
	178, 967,
	179, 967,
	182, 967,
	183, 967,
	184, 967,
	185, 967,
	186, 967,
	187, 967,
	188, 967,
	189, 967,
	191, 967,
	193, 967,
	196, 967,
	197, 967,
	198, 967,
	200, 967,
	201, 967,
	204, 967,
	205, 967,
	206, 967,
	207, 967,
	209, 967,
	210, 967,
	212, 967,
	213, 967,
	215, 967,
	216, 967,
	219, 967,
	220, 967,
	223, 967,
	225, 967,
	226, 967,
	227, 967,
	228, 967,
	229, 967,
	230, 967,
	231, 967,
	232, 967,
	233, 967,
	235, 967,
	236, 967,
	237, 967,
	238, 967,
	240, 967,
	243, 967,
	244, 967,
	245, 967,
	246, 967,
	248, 967,
	249, 967,
	250, 967,
	252, 967,
	253, 967,
	254, 967,
	257, 967,
	258, 967,
	260, 967,
	262, 967,
	263, 967,
	264, 967,
	265, 967,
	266, 967,
	267, 967,
	268, 967,
	269, 967,
	270, 967,
	272, 967,
	273, 967,
	274, 967,
	275, 967,
	276, 967,
	278, 967,
	280, 967,
	281, 967,
	282, 967,
	283, 967,
	284, 967,
	285, 967,
	286, 967,
	287, 967,
	288, 967,
	290, 967,
	291, 967,
	292, 967,
	293, 967,
	294, 967,
	296, 967,
	297, 967,
	298, 967,
	299, 967,
	300, 967,
	301, 967,
	302, 967,
	303, 967,
	305, 967,
	307, 967,
	308, 967,
	309, 967,
	310, 967,
	311, 967,
	312, 967,
	314, 967,
	315, 967,
	316, 967,
	317, 967,
	318, 967,
	319, 967,
	320, 967,
	321, 967,
	323, 967,
	324, 967,
	325, 967,
	326, 967,
	327, 967,
	328, 967,
	329, 967,
	330, 967,
	331, 967,
	332, 967,
	334, 967,
	335, 967,
	336, 967,
	337, 967,
	339, 967,
	340, 967,
	341, 967,
	342, 967,
	344, 967,
	345, 967,
	346, 967,
	347, 967,
	348, 967,
	349, 967,
	350, 967,
	351, 967,
	352, 967,
	353, 967,
	354, 967,
	355, 967,
	357, 967,
	358, 967,
	359, 967,
	361, 967,
	362, 967,
	363, 967,
	364, 967,
	365, 967,
	366, 967,
	367, 967,
	368, 967,
	369, 967,
	371, 967,
	372, 967,
	373, 967,
	374, 967,
	377, 967,
	378, 967,
	379, 967,
	380, 967,
	381, 967,
	383, 967,
	384, 967,
	385, 967,
	387, 967,
	388, 967,
	391, 967,
	392, 967,
	393, 967,
	394, 967,
	395, 967,
	397, 967,
	399, 967,
	400, 967,
	401, 967,
	402, 967,
	403, 967,
	404, 967,
	405, 967,
	407, 967,
	408, 967,
	409, 967,
	414, 967,
	415, 967,
	416, 967,
	417, 967,
	418, 967,
	419, 967,
	-2, 0,
	-1, 117,
	1, 858,
	196, 858,
	278, 858,
	285, 858,
	445, 858,
	-2, 0,
	-1, 119,
	1, 858,
	445, 858,
	-2, 0,
	-1, 120,
	1, 858,
	445, 858,
	-2, 0,
	-1, 121,
	1, 862,
	445, 862,
	-2, 0,
	-1, 145,
	118, 938,
	132, 938,
	190, 938,
	218, 938,
	247, 938,
	256, 938,
	389, 938,
	-2, 935,
	-1, 175,
	4, 974,
	5, 974,
	6, 974,
	7, 974,
	8, 974,
	9, 974,
	10, 974,
	21, 974,
	22, 974,
	23, 974,
	24, 974,
	25, 974,
	27, 974,
	32, 974,
	33, 974,
	37, 974,
	38, 974,
	39, 974,
	40, 974,
	41, 974,
	42, 974,
	43, 974,
	44, 974,
	45, 974,
	46, 974,
	48, 974,
	49, 974,
	50, 974,
	51, 974,
	52, 974,
	53, 974,
	54, 974,
	55, 974,
	56, 974,
	57, 974,
	58, 974,
	59, 974,
	61, 974,
	62, 974,
	64, 974,
	66, 974,
	67, 974,
	68, 974,
	69, 974,
	70, 974,
	72, 974,
	73, 974,
	74, 974,
	75, 974,
	77, 974,
	79, 974,
	80, 974,
	81, 974,
	83, 974,
	84, 974,
	85, 974,
	86, 974,
	87, 974,
	88, 974,
	89, 974,
	90, 974,
	91, 974,
	92, 974,
	93, 974,
	94, 974,
	95, 974,
	96, 974,
	97, 974,
	98, 974,
	99, 974,
	100, 974,
	101, 974,
	102, 974,
	104, 974,
	105, 974,
	107, 974,
	110, 974,
	111, 974,
	112, 974,
	114, 974,
	116, 974,
	117, 974,
	119, 974,
	120, 974,
	121, 974,
	122, 974,
	123, 974,
	124, 974,
	125, 974,
	126, 974,
	127, 974,
	128, 974,
	129, 974,
	130, 974,
	131, 974,
	137, 974,
	138, 974,
	139, 974,
	140, 974,
	141, 974,
	142, 974,
	144, 974,
	146, 974,
	149, 974,
	150, 974,
	151, 974,
	153, 974,
	154, 974,
	156, 974,
	157, 974,
	159, 974,
	160, 974,
	161, 974,
	162, 974,
	163, 974,
	164, 974,
	165, 974,
	166, 974,
	167, 974,
	168, 974,
	169, 974,
	171, 974,
	172, 974,
	176, 974,
	177, 974,
	178, 974,
	179, 974,
	181, 974,
	182, 974,
	183, 974,
	184, 974,
	185, 974,
	186, 974,
	187, 974,
	188, 974,
	189, 974,
	191, 974,
	193, 974,
	194, 974,
	195, 974,
	196, 974,
	197, 974,
	198, 974,
	199, 974,
	200, 974,
	201, 974,
	204, 974,
	205, 974,
	206, 974,
	207, 974,
	209, 974,
	210, 974,
	212, 974,
	213, 974,
	214, 974,
	215, 974,
	216, 974,
	217, 974,
	219, 974,
	220, 974,
	223, 974,
	225, 974,
	226, 974,
	227, 974,
	228, 974,
	229, 974,
	230, 974,
	231, 974,
	232, 974,
	233, 974,
	234, 974,
	235, 974,
	236, 974,
	237, 974,
	238, 974,
	239, 974,
	240, 974,
	241, 974,
	242, 974,
	243, 974,
	244, 974,
	245, 974,
	246, 974,
	248, 974,
	249, 974,
	250, 974,
	253, 974,
	254, 974,
	257, 974,
	258, 974,
	259, 974,
	260, 974,
	261, 974,
	262, 974,
	263, 974,
	264, 974,
	265, 974,
	266, 974,
	267, 974,
	268, 974,
	269, 974,
	270, 974,
	272, 974,
	273, 974,
	274, 974,
	275, 974,
	276, 974,
	278, 974,
	280, 974,
	281, 974,
	282, 974,
	283, 974,
	284, 974,
	285, 974,
	286, 974,
	287, 974,
	288, 974,
	290, 974,
	291, 974,
	292, 974,
	293, 974,
	294, 974,
	296, 974,
	297, 974,
	298, 974,
	299, 974,
	300, 974,
	301, 974,
	302, 974,
	303, 974,
	305, 974,
	306, 974,
	307, 974,
	308, 974,
	309, 974,
	310, 974,
	311, 974,
	312, 974,
	314, 974,
	315, 974,
	316, 974,
	317, 974,
	318, 974,
	319, 974,
	320, 974,
	321, 974,
	323, 974,
	324, 974,
	325, 974,
	326, 974,
	327, 974,
	328, 974,
	329, 974,
	330, 974,
	331, 974,
	332, 974,
	333, 974,
	334, 974,
	335, 974,
	336, 974,
	337, 974,
	338, 974,
	339, 974,
	340, 974,
	341, 974,
	342, 974,
	344, 974,
	345, 974,
	346, 974,
	347, 974,
	348, 974,
	349, 974,
	350, 974,
	351, 974,
	352, 974,
	353, 974,
	354, 974,
	355, 974,
	357, 974,
	358, 974,
	359, 974,
	361, 974,
	362, 974,
	363, 974,
	364, 974,
	365, 974,
	366, 974,
	367, 974,
	368, 974,
	369, 974,
	371, 974,
	372, 974,
	373, 974,
	374, 974,
	377, 974,
	378, 974,
	379, 974,
	380, 974,
	381, 974,
	382, 974,
	383, 974,
	384, 974,
	385, 974,
	387, 974,
	388, 974,
	390, 974,
	391, 974,
	392, 974,
	393, 974,
	394, 974,
	395, 974,
	396, 974,
	397, 974,
	399, 974,
	400, 974,
	401, 974,
	402, 974,
	403, 974,
	404, 974,
	405, 974,
	407, 974,
	408, 974,
	409, 974,
	414, 974,
	415, 974,
	416, 974,
	417, 974,
	418, 974,
	419, 974,
	420, 974,
	428, 974,
	433, 974,
	434, 974,
	435, 974,
	442, 974,
	447, 974,
	-2, 0,
	-1, 535,
	148, 1632,
	375, 1632,
	425, 1632,
	444, 1632,
	-2, 0,
	-1, 536,
	148, 1708,
	375, 1708,
	425, 1708,
	444, 1708,
	-2, 0,
	-1, 537,
	148, 1622,
	375, 1622,
	425, 1622,
	444, 1622,
	-2, 0,
	-1, 539,
	148, 1790,
	375, 1790,
	425, 1790,
	444, 1790,
	-2, 0,
	-1, 541,
	148, 1818,
	375, 1818,
	425, 1818,
	444, 1818,
	-2, 0,
	-1, 548,
	148, 1716,
	375, 1716,
	425, 1716,
	444, 1716,
	-2, 456,
	-1, 565,
	444, 1582,
	446, 1582,
	-2, 626,
	-1, 566,
	444, 1584,
	446, 1584,
	-2, 627,
	-1, 567,
	444, 1583,
	446, 1583,
	-2, 628,
	-1, 568,
	446, 1531,
	-2, 629,
	-1, 712,
	1, 554,
	441, 554,
	443, 554,
	445, 554,
	-2, 0,
	-1, 713,
	1, 625,
	145, 625,
	441, 625,
	443, 625,
	445, 625,
	-2, 0,
	-1, 719,
	1, 568,
	441, 568,
	443, 568,
	445, 568,
	-2, 0,
	-1, 721,
	1, 572,
	441, 572,
	443, 572,
	445, 572,
	-2, 0,
	-1, 723,
	1, 582,
	441, 582,
	443, 582,
	445, 582,
	-2, 0,
	-1, 724,
	1, 591,
	441, 591,
	443, 591,
	445, 591,
	-2, 0,
	-1, 725,
	1, 593,
	441, 593,
	443, 593,
	445, 593,
	-2, 0,
	-1, 729,
	1, 607,
	441, 607,
	443, 607,
	445, 607,
	-2, 0,
	-1, 730,
	1, 609,
	441, 609,
	443, 609,
	445, 609,
	-2, 0,
	-1, 773,
	132, 978,
	218, 978,
	247, 978,
	-2, 935,
	-1, 788,
	132, 977,
	218, 977,
	247, 977,
	-2, 935,
	-1, 812,
	444, 1581,
	-2, 464,
	-1, 841,
	442, 1573,
	-2, 1564,
	-1, 847,
	5, 1105,
	-2, 1613,
	-1, 848,
	5, 1106,
	-2, 1617,
	-1, 849,
	5, 1107,
	-2, 1616,
	-1, 850,
	5, 1108,
	-2, 1816,
	-1, 851,
	5, 1109,
	-2, 1718,
	-1, 852,
	5, 1110,
	-2, 1782,
	-1, 853,
	5, 1111,
	-2, 1784,
	-1, 854,
	5, 1112,
	-2, 1795,
	-1, 855,
	5, 1113,
	-2, 1785,
	-1, 856,
	5, 1114,
	-2, 1786,
	-1, 857,
	5, 1115,
	-2, 1612,
	-1, 858,
	5, 1116,
	-2, 1829,
	-1, 859,
	5, 1117,
	-2, 1683,
	-1, 860,
	5, 1118,
	-2, 1725,
	-1, 861,
	5, 1119,
	-2, 1727,
	-1, 862,
	5, 1120,
	-2, 1687,
	-1, 863,
	5, 1121,
	442, 1591,
	-2, 1582,
	-1, 864,
	5, 1177,
	442, 1177,
	-2, 1864,
	-1, 869,
	442, 1592,
	-2, 1583,
	-1, 871,
	5, 1125,
	-2, 1862,
	-1, 872,
	5, 1126,
	-2, 1863,
	-1, 873,
	5, 1127,
	-2, 1686,
	-1, 874,
	5, 1128,
	-2, 1875,
	-1, 875,
	5, 1129,
	-2, 1688,
	-1, 876,
	5, 1130,
	-2, 1689,
	-1, 877,
	5, 1131,
	-2, 1690,
	-1, 878,
	5, 1132,
	-2, 1844,
	-1, 879,
	5, 1133,
	-2, 1873,
	-1, 880,
	5, 1134,
	-2, 1667,
	-1, 881,
	5, 1135,
	-2, 1668,
	-1, 882,
	5, 1149,
	-2, 1856,
	-1, 884,
	5, 1124,
	-2, 1852,
	-1, 885,
	5, 1124,
	-2, 1851,
	-1, 886,
	5, 1124,
	-2, 1868,
	-1, 887,
	5, 1141,
	-2, 1846,
	-1, 888,
	5, 1142,
	-2, 1614,
	-1, 889,
	5, 1152,
	-2, 1845,
	-1, 890,
	5, 1154,
	-2, 1884,
	-1, 892,
	5, 1165,
	-2, 1642,
	-1, 893,
	5, 1176,
	-2, 1877,
	-1, 894,
	5, 1168,
	-2, 1878,
	-1, 895,
	5, 1176,
	-2, 1879,
	-1, 896,
	5, 1172,
	-2, 1880,
	-1, 897,
	5, 1092,
	-2, 1696,
	-1, 898,
	5, 1093,
	-2, 1697,
	-1, 899,
	444, 1579,
	-2, 1563,
	-1, 900,
	442, 1904,
	-2, 1580,
	-1, 920,
	5, 1160,
	-2, 1805,
	-1, 937,
	5, 1159,
	-2, 1885,
	-1, 947,
	5, 1161,
	408, 1161,
	-2, 1847,
	-1, 948,
	5, 1162,
	408, 1162,
	-2, 1848,
	-1, 984,
	442, 1591,
	-2, 1582,
	-1, 1013,
	148, 1818,
	375, 1818,
	425, 1818,
	444, 1818,
	-2, 0,
	-1, 1014,
	1, 444,
	445, 444,
	-2, 870,
	-1, 1132,
	296, 1561,
	435, 1561,
	-2, 1560,
	-1, 1188,
	287, 657,
	407, 657,
	-2, 228,
	-1, 1208,
	268, 963,
	-2, 774,
	-1, 1217,
	251, 1586,
	-2, 0,
	-1, 1281,
	1, 335,
	441, 335,
	443, 335,
	445, 335,
	-2, 937,
	-1, 1284,
	4, 1883,
	11, 1883,
	12, 1883,
	14, 1883,
	15, 1883,
	16, 1883,
	17, 1883,
	18, 1883,
	19, 1883,
	21, 1883,
	22, 1883,
	23, 1883,
	24, 1883,
	25, 1883,
	27, 1883,
	30, 1883,
	32, 1883,
	34, 1883,
	37, 1883,
	38, 1883,
	39, 1883,
	40, 1883,
	41, 1883,
	42, 1883,
	43, 1883,
	44, 1883,
	45, 1883,
	46, 1883,
	48, 1883,
	49, 1883,
	50, 1883,
	51, 1883,
	52, 1883,
	53, 1883,
	56, 1883,
	57, 1883,
	58, 1883,
	59, 1883,
	61, 1883,
	62, 1883,
	63, 1883,
	66, 1883,
	67, 1883,
	68, 1883,
	69, 1883,
	70, 1883,
	71, 1883,
	72, 1883,
	73, 1883,
	74, 1883,
	75, 1883,
	77, 1883,
	78, 1883,
	79, 1883,
	80, 1883,
	81, 1883,
	83, 1883,
	84, 1883,
	85, 1883,
	93, 1883,
	94, 1883,
	95, 1883,
	96, 1883,
	97, 1883,
	98, 1883,
	99, 1883,
	100, 1883,
	102, 1883,
	104, 1883,
	105, 1883,
	107, 1883,
	110, 1883,
	111, 1883,
	112, 1883,
	114, 1883,
	116, 1883,
	117, 1883,
	119, 1883,
	120, 1883,
	121, 1883,
	122, 1883,
	123, 1883,
	124, 1883,
	125, 1883,
	126, 1883,
	127, 1883,
	128, 1883,
	129, 1883,
	133, 1883,
	134, 1883,
	135, 1883,
	136, 1883,
	137, 1883,
	138, 1883,
	139, 1883,
	140, 1883,
	141, 1883,
	142, 1883,
	143, 1883,
	144, 1883,
	146, 1883,
	149, 1883,
	150, 1883,
	151, 1883,
	153, 1883,
	154, 1883,
	156, 1883,
	157, 1883,
	159, 1883,
	160, 1883,
	161, 1883,
	162, 1883,
	163, 1883,
	164, 1883,
	165, 1883,
	166, 1883,
	167, 1883,
	168, 1883,
	169, 1883,
	170, 1883,
	171, 1883,
	172, 1883,
	173, 1883,
	174, 1883,
	175, 1883,
	177, 1883,
	178, 1883,
	179, 1883,
	181, 1883,
	182, 1883,
	183, 1883,
	184, 1883,
	185, 1883,
	186, 1883,
	187, 1883,
	188, 1883,
	189, 1883,
	191, 1883,
	193, 1883,
	194, 1883,
	195, 1883,
	196, 1883,
	197, 1883,
	198, 1883,
	199, 1883,
	200, 1883,
	201, 1883,
	202, 1883,
	203, 1883,
	204, 1883,
	205, 1883,
	206, 1883,
	207, 1883,
	209, 1883,
	210, 1883,
	212, 1883,
	213, 1883,
	214, 1883,
	215, 1883,
	216, 1883,
	217, 1883,
	219, 1883,
	220, 1883,
	223, 1883,
	224, 1883,
	225, 1883,
	226, 1883,
	227, 1883,
	228, 1883,
	229, 1883,
	230, 1883,
	231, 1883,
	232, 1883,
	233, 1883,
	234, 1883,
	235, 1883,
	236, 1883,
	237, 1883,
	238, 1883,
	241, 1883,
	243, 1883,
	244, 1883,
	245, 1883,
	246, 1883,
	248, 1883,
	249, 1883,
	250, 1883,
	253, 1883,
	254, 1883,
	255, 1883,
	257, 1883,
	258, 1883,
	260, 1883,
	262, 1883,
	263, 1883,
	264, 1883,
	265, 1883,
	266, 1883,
	267, 1883,
	268, 1883,
	269, 1883,
	270, 1883,
	272, 1883,
	273, 1883,
	274, 1883,
	275, 1883,
	276, 1883,
	278, 1883,
	280, 1883,
	281, 1883,
	282, 1883,
	283, 1883,
	284, 1883,
	285, 1883,
	286, 1883,
	287, 1883,
	288, 1883,
	290, 1883,
	291, 1883,
	292, 1883,
	293, 1883,
	294, 1883,
	295, 1883,
	296, 1883,
	297, 1883,
	298, 1883,
	299, 1883,
	300, 1883,
	301, 1883,
	302, 1883,
	303, 1883,
	305, 1883,
	306, 1883,
	307, 1883,
	308, 1883,
	309, 1883,
	310, 1883,
	311, 1883,
	312, 1883,
	313, 1883,
	314, 1883,
	315, 1883,
	316, 1883,
	317, 1883,
	318, 1883,
	319, 1883,
	320, 1883,
	321, 1883,
	323, 1883,
	324, 1883,
	325, 1883,
	326, 1883,
	327, 1883,
	328, 1883,
	329, 1883,
	330, 1883,
	331, 1883,
	332, 1883,
	334, 1883,
	335, 1883,
	336, 1883,
	337, 1883,
	338, 1883,
	339, 1883,
	340, 1883,
	341, 1883,
	342, 1883,
	344, 1883,
	345, 1883,
	346, 1883,
	347, 1883,
	348, 1883,
	349, 1883,
	350, 1883,
	351, 1883,
	352, 1883,
	353, 1883,
	354, 1883,
	355, 1883,
	357, 1883,
	358, 1883,
	359, 1883,
	361, 1883,
	362, 1883,
	363, 1883,
	364, 1883,
	365, 1883,
	366, 1883,
	367, 1883,
	368, 1883,
	369, 1883,
	371, 1883,
	372, 1883,
	373, 1883,
	374, 1883,
	377, 1883,
	378, 1883,
	379, 1883,
	380, 1883,
	381, 1883,
	383, 1883,
	384, 1883,
	385, 1883,
	387, 1883,
	388, 1883,
	391, 1883,
	392, 1883,
	393, 1883,
	394, 1883,
	395, 1883,
	397, 1883,
	399, 1883,
	400, 1883,
	401, 1883,
	402, 1883,
	403, 1883,
	404, 1883,
	405, 1883,
	407, 1883,
	408, 1883,
	409, 1883,
	414, 1883,
	415, 1883,
	416, 1883,
	417, 1883,
	418, 1883,
	419, 1883,
	420, 1883,
	421, 1883,
	423, 1883,
	424, 1883,
	425, 1883,
	426, 1883,
	427, 1883,
	428, 1883,
	430, 1883,
	431, 1883,
	432, 1883,
	433, 1883,
	434, 1883,
	435, 1883,
	436, 1883,
	437, 1883,
	438, 1883,
	440, 1883,
	443, 1883,
	444, 1883,
	446, 1883,
	447, 1883,
	-2, 0,
	-1, 1287,
	148, 1790,
	375, 1790,
	425, 1790,
	444, 1790,
	-2, 0,
	-1, 1356,
	1, 1836,
	441, 1836,
	443, 1836,
	444, 1836,
	445, 1836,
	-2, 605,
	-1, 1357,
	1, 1788,
	441, 1788,
	443, 1788,
	444, 1788,
	445, 1788,
	-2, 606,
	-1, 1370,
	1, 865,
	445, 865,
	-2, 870,
	-1, 1375,
	132, 977,
	218, 977,
	247, 977,
	-2, 935,
	-1, 1468,
	118, 939,
	132, 939,
	190, 939,
	218, 939,
	247, 939,
	256, 939,
	389, 939,
	-2, 1333,
	-1, 1521,
	443, 1466,
	-2, 0,
	-1, 1556,
	118, 939,
	132, 939,
	190, 939,
	218, 939,
	247, 939,
	256, 939,
	389, 939,
	-2, 1049,
	-1, 1610,
	442, 1164,
	-2, 1152,
	-1, 1649,
	1, 446,
	445, 446,
	-2, 870,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1213,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1214,
	-1, 1902,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1215,
	-1, 1903,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1216,
	-1, 1904,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1905,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1218,
	-1, 1906,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1219,
	-1, 1907,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1220,
	-1, 1919,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1232,
	-1, 1920,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1233,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1234,
	-1, 1924,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1239,
	-1, 1930,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1243,
	-1, 1932,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1251,
	-1, 1933,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1252,
	-1, 1934,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1253,
	-1, 1935,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1254,
	-1, 2028,
	5, 1121,
	148, 1477,
	442, 1591,
	-2, 1582,
	-1, 2029,
	148, 1478,
	-2, 1840,
	-1, 2030,
	148, 1479,
	-2, 1715,
	-1, 2031,
	148, 1480,
	-2, 1643,
	-1, 2032,
	148, 1481,
	-2, 1677,
	-1, 2033,
	148, 1482,
	-2, 1713,
	-1, 2034,
	148, 1483,
	-2, 1781,
	-1, 2102,
	1, 1050,
	83, 1050,
	118, 1050,
	132, 1050,
	145, 1050,
	149, 1050,
	155, 1050,
	158, 1050,
	181, 1050,
	190, 1050,
	199, 1050,
	214, 1050,
	218, 1050,
	234, 1050,
	247, 1050,
	251, 1050,
	256, 1050,
	304, 1050,
	306, 1050,
	389, 1050,
	398, 1050,
	411, 1050,
	412, 1050,
	413, 1050,
	422, 1050,
	441, 1050,
	443, 1050,
	445, 1050,
	446, 1050,
	-2, 1049,
	-1, 2107,
	442, 1565,
	-2, 1577,
	-1, 2127,
	442, 1163,
	-2, 1153,
	-1, 2339,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1241,
	-1, 2340,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1245,
	-1, 2346,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1247,
	-1, 2525,
	196, 870,
	278, 870,
	285, 870,
	-2, 443,
	-1, 2596,
	443, 1536,
	446, 1536,
	-2, 1552,
	-1, 2610,
	268, 963,
	-2, 774,
	-1, 2687,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1249,
	-1, 2694,
	194, 0,
	195, 0,
	241, 0,
	-2, 1268,
	-1, 2757,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1297,
	-1, 2758,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1298,
	-1, 2759,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1299,
	-1, 2763,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1303,
	-1, 2764,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1304,
	-1, 2765,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1305,
	-1, 2807,
	442, 1566,
	-2, 1578,
	-1, 2887,
	444, 1986,
	-2, 912,
	-1, 2929,
	194, 0,
	195, 0,
	241, 0,
	-2, 1269,
	-1, 2932,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1272,
	-1, 2933,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1274,
	-1, 3075,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1273,
	-1, 3076,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1275,
	-1, 3086,
	194, 0,
	-2, 1306,
	-1, 3177,
	194, 0,
	-2, 1307,
	-1, 3286,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1843,
}

const sqlPrivate = 57344

const sqlLast = 68210

var sqlAct = [...]int{

	869, 3368, 3114, 3285, 3117, 3295, 3257, 3358, 3140, 1568,
	2252, 3030, 3259, 2597, 3256, 3243, 3296, 2261, 3297, 1814,
	2059, 3103, 2725, 3284, 3143, 3181, 2253, 3044, 2878, 1887,
	798, 2367, 2825, 2094, 2873, 2988, 3067, 1947, 2619, 207,
	1273, 207, 207, 1383, 32, 207, 207, 207, 207, 207,
	1580, 2883, 207, 2594, 2826, 1136, 3090, 2293, 789, 546,
	567, 1037, 2365, 2632, 199, 2627, 2332, 1551, 977, 2249,
	2621, 2229, 2226, 1581, 2488, 985, 2501, 1549, 207, 2964,
	2448, 1341, 567, 2292, 2284, 2464, 1772, 1775, 2533, 2286,
	1129, 2262, 1530, 2155, 1765, 1764, 1692, 1793, 2209, 663,
	1701, 2157, 868, 2475, 2447, 1494, 2095, 2148, 3182, 1476,
	1884, 1960, 1880, 1559, 1269, 797, 138, 2090, 4, 1148,
	2780, 2328, 1678, 1025, 1145, 1719, 86, 1725, 1370, 1680,
	2631, 2227, 1990, 1531, 2056, 865, 1944, 2187, 2595, 2210,
	1138, 1282, 1256, 1266, 2186, 1761, 2255, 2097, 786, 1202,
	201, 2506, 2296, 514, 1016, 1276, 1972, 2082, 972, 1978,
	3141, 1540, 568, 569, 951, 200, 969, 1961, 2024, 1457,
	207, 207, 2067, 145, 1384, 530, 1382, 1781, 788, 540,
	1466, 146, 563, 1232, 1489, 639, 1280, 608, 498, 825,
	1156, 1691, 138, 522, 974, 658, 949, 517, 704, 1369,
	525, 1388, 1214, 2796, 205, 2363, 2797, 1815, 2254, 1550,
	572, 1795, 1795, 1795, 2258, 2204, 2211, 3396, 3387, 3386,
	2076, 2076, 2076, 1396, 1397, 575, 2682, 3367, 3354, 1975,
	1732, 3002, 572, 3352, 3317, 3315, 3002, 2076, 2076, 3312,
	1807, 3309, 3313, 2638, 3310, 3306, 2639, 575, 1732, 1399,
	3282, 3281, 841, 1732, 1732, 3278, 3277, 3238, 1807, 1807,
	2120, 1396, 1397, 175, 672, 3229, 3228, 3222, 3002, 3002,
	1732, 2523, 2069, 3216, 794, 1398, 3002, 793, 1396, 1397,
	980, 793, 3214, 1418, 2174, 3002, 3179, 1399, 1728, 2120,
	3165, 966, 1976, 1732, 3162, 3131, 3130, 3002, 1732, 1732,
	3123, 177, 3122, 1732, 1399, 3002, 3096, 3077, 3058, 1732,
	2120, 2651, 774, 1398, 2211, 2076, 3026, 952, 952, 2076,
	773, 3020, 2382, 3001, 2076, 175, 3002, 2383, 2931, 2925,
	1398, 2120, 2897, 2889, 2802, 2890, 2890, 2803, 2783, 2792,
	998, 808, 2793, 781, 176, 1421, 1422, 1423, 1424, 2786,
	3239, 2117, 2076, 812, 169, 1404, 2718, 955, 956, 1732,
	1977, 1974, 170, 177, 1003, 2658, 2461, 953, 2659, 2076,
	2459, 2458, 2412, 2076, 2076, 2076, 2395, 2384, 2282, 2396,
	2076, 1811, 3166, 147, 1732, 1426, 1427, 1428, 2133, 2420,
	2421, 2076, 2119, 1404, 175, 2120, 2114, 2109, 2075, 2076,
	1732, 2076, 1810, 1807, 2783, 1811, 176, 2068, 3021, 1732,
	1404, 999, 2659, 2201, 2420, 2421, 169, 2438, 2439, 2440,
	2146, 1652, 2651, 2236, 170, 2331, 1731, 2144, 1526, 1155,
	983, 867, 177, 2927, 957, 175, 1419, 1343, 954, 780,
	1426, 1427, 1428, 779, 2640, 147, 778, 777, 175, 2435,
	776, 772, 1979, 2420, 2421, 771, 2438, 2439, 2440, 770,
	1796, 1796, 1796, 2641, 3184, 769, 2979, 2076, 2313, 2015,
	2943, 2366, 2926, 177, 2435, 176, 1396, 1397, 2093, 1429,
	1430, 1431, 1439, 1440, 1441, 169, 177, 768, 767, 766,
	765, 1419, 1671, 170, 764, 1432, 763, 762, 761, 702,
	701, 700, 1399, 207, 1165, 1445, 699, 1425, 698, 697,
	1177, 696, 207, 2435, 147, 695, 176, 1467, 694, 693,
	692, 2426, 691, 690, 689, 1420, 169, 688, 1398, 176,
	687, 686, 685, 207, 170, 684, 1418, 683, 682, 681,
	207, 2420, 2421, 1415, 2638, 680, 2426, 679, 678, 1973,
	671, 670, 630, 629, 588, 2257, 207, 1040, 207, 207,
	1141, 207, 1040, 207, 587, 586, 578, 577, 147, 999,
	2068, 207, 207, 2125, 576, 1024, 2013, 553, 552, 1029,
	1420, 1159, 551, 550, 534, 2426, 197, 196, 195, 194,
	193, 192, 191, 190, 189, 188, 207, 2441, 1421, 1422,
	1423, 1424, 2436, 2011, 1803, 1794, 1860, 187, 1404, 979,
	207, 996, 1141, 1141, 207, 207, 186, 207, 185, 184,
	183, 182, 181, 1132, 180, 179, 1164, 2436, 1169, 207,
	1175, 178, 2891, 2800, 1436, 1446, 2441, 207, 1426, 1427,
	1428, 2504, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 207, 207, 207, 207, 207, 1141, 1141, 2389, 1442,
	1443, 1141, 999, 207, 1141, 207, 2436, 1413, 1414, 2378,
	1014, 2214, 2110, 2426, 1176, 2101, 1676, 1151, 1215, 1215,
	2009, 2007, 1434, 1400, 1401, 1402, 1403, 1405, 1406, 1419,
	1552, 2437, 2242, 1566, 1478, 1483, 1171, 1277, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 1444, 1817, 1497, 1141,
	1161, 1497, 1395, 1292, 1496, 1134, 2437, 1496, 1031, 1011,
	1295, 572, 1033, 987, 1126, 1131, 3302, 796, 3283, 207,
	3212, 3172, 3113, 1158, 1157, 1500, 575, 3059, 1495, 3052,
	2981, 1219, 2963, 207, 3169, 2962, 2950, 2949, 3167, 812,
	2948, 2947, 2941, 812, 2436, 2437, 2940, 2939, 207, 2938,
	1425, 1124, 2862, 2815, 2814, 2812, 1124, 1208, 1211, 2806,
	2777, 2776, 2775, 1816, 2702, 2698, 2499, 138, 1420, 1270,
	1285, 2455, 2662, 2446, 2419, 2416, 2415, 794, 2413, 2402,
	2401, 2400, 2397, 2394, 1260, 1263, 2372, 2371, 2364, 2283,
	2102, 1283, 1983, 1437, 1395, 1375, 1737, 1769, 2431, 2429,
	2430, 2422, 2423, 2424, 2425, 2427, 2428, 1216, 1478, 1289,
	965, 1735, 1465, 1479, 175, 1477, 2432, 2433, 2434, 1394,
	175, 3394, 1376, 2431, 2429, 2430, 2422, 2423, 2424, 2425,
	2427, 2428, 3366, 2437, 3365, 2122, 3318, 986, 2420, 2421,
	2727, 3273, 3271, 3207, 2420, 2421, 3204, 3201, 3200, 2243,
	1170, 3196, 177, 3190, 1306, 2432, 2433, 2434, 177, 3161,
	3160, 1950, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427,
	2428, 3109, 3088, 3064, 3038, 1435, 3063, 3042, 1410, 1411,
	1417, 1416, 1412, 1438, 3039, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 1299, 176, 3034, 2517, 2978, 1368,
	2014, 176, 2961, 2911, 2908, 169, 2841, 1672, 2188, 2840,
	2829, 169, 1374, 170, 2828, 2788, 2327, 2693, 2652, 170,
	3051, 2613, 2583, 1373, 2564, 2543, 2542, 1381, 823, 2519,
	2460, 2393, 2392, 2377, 147, 2355, 2223, 1501, 1371, 1956,
	147, 207, 2481, 1498, 1490, 1487, 2129, 2128, 1396, 1397,
	794, 2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428, 2105,
	2087, 774, 1671, 2074, 2005, 1461, 1565, 207, 1529, 773,
	2426, 1377, 1525, 1524, 1399, 1537, 2426, 207, 1040, 207,
	207, 207, 1523, 1391, 1392, 1522, 1521, 1141, 567, 207,
	207, 1499, 1520, 567, 207, 2420, 2421, 1519, 1577, 207,
	1398, 1518, 1517, 1644, 1574, 1515, 175, 2012, 2241, 1514,
	1513, 1512, 1511, 1510, 1509, 1508, 1507, 1506, 1528, 1505,
	1504, 1647, 1040, 2420, 2421, 1038, 2438, 2439, 2440, 1503,
	1149, 1480, 1560, 2980, 2010, 1462, 1460, 175, 2543, 1455,
	1010, 1001, 1534, 1535, 177, 993, 1674, 2935, 2811, 2795,
	2791, 2436, 2381, 2088, 2420, 2421, 1479, 1818, 1646, 2515,
	1491, 1492, 2420, 2421, 980, 1458, 980, 1671, 1561, 3205,
	1671, 1028, 2622, 3057, 138, 177, 3022, 1548, 1026, 2567,
	1696, 1396, 1397, 2435, 2798, 2654, 2653, 176, 952, 2211,
	794, 1552, 1366, 1497, 1314, 2399, 3369, 169, 2398, 1496,
	2337, 2176, 1023, 1570, 2839, 170, 981, 1399, 2042, 1975,
	2190, 2008, 2006, 2599, 1815, 2598, 1572, 1485, 176, 1510,
	1658, 1027, 1557, 759, 3144, 3091, 147, 2426, 169, 1343,
	1766, 2668, 1649, 1398, 1510, 1342, 170, 1527, 572, 1547,
	2437, 2578, 1575, 572, 1714, 1141, 207, 2254, 1396, 1397,
	3170, 1670, 1040, 575, 3168, 2426, 1554, 147, 575, 2729,
	1991, 760, 3112, 2127, 1516, 1470, 3303, 2387, 1493, 1475,
	1576, 2592, 1976, 1757, 1399, 1643, 1192, 3314, 1396, 1397,
	3311, 2634, 1124, 2821, 1686, 3253, 802, 1578, 2874, 2290,
	3342, 207, 207, 3221, 2426, 2420, 2421, 3341, 207, 2527,
	1398, 3012, 1190, 1663, 1399, 1770, 2441, 755, 207, 1180,
	1303, 792, 1338, 1404, 983, 753, 983, 207, 2134, 207,
	812, 207, 3304, 1662, 1661, 207, 1124, 1671, 1668, 3391,
	1398, 3138, 1716, 1573, 3134, 1718, 2436, 207, 1722, 1849,
	1977, 1974, 2123, 1426, 1427, 1428, 3133, 751, 749, 1464,
	964, 1700, 2159, 746, 3132, 2855, 1756, 2431, 2429, 2430,
	2422, 2423, 2424, 2425, 2427, 2428, 2422, 2423, 2424, 2425,
	2427, 2428, 1191, 1847, 2852, 2436, 2851, 1141, 207, 1141,
	1404, 1340, 1753, 791, 1141, 1659, 2150, 792, 207, 207,
	2818, 2817, 2376, 2375, 1419, 1337, 572, 2844, 1141, 1141,
	1729, 207, 1726, 1787, 1778, 1028, 2374, 207, 1158, 1157,
	1404, 575, 567, 207, 787, 207, 2373, 207, 2150, 207,
	1665, 207, 1693, 2341, 1819, 2437, 2206, 2426, 3029, 2149,
	2516, 207, 1979, 1721, 2200, 207, 1730, 625, 2197, 2162,
	1426, 1427, 1428, 2178, 207, 2116, 3220, 1028, 1798, 793,
	1690, 1800, 1931, 1301, 1802, 1027, 1124, 1372, 1805, 791,
	1828, 1154, 2001, 207, 2437, 1747, 1746, 2194, 2000, 207,
	2566, 1889, 1785, 1694, 1695, 1406, 1225, 1300, 1224, 734,
	734, 2250, 1223, 1420, 1222, 1857, 1296, 1672, 2188, 1040,
	3072, 1419, 1244, 979, 1203, 979, 743, 1027, 1783, 1186,
	1780, 785, 785, 794, 2669, 2177, 826, 1858, 2436, 1824,
	1613, 2858, 1820, 3119, 626, 1946, 1946, 1283, 1867, 2424,
	2425, 2427, 2428, 2108, 2169, 793, 1954, 2671, 1864, 1973,
	1201, 1952, 1379, 3275, 1813, 2432, 2433, 2434, 2831, 1666,
	2168, 1561, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427,
	2428, 1784, 1315, 1826, 1827, 1859, 1569, 1011, 2670, 1333,
	1885, 1886, 572, 1812, 1991, 1351, 1336, 1200, 2316, 2161,
	735, 735, 1962, 1963, 1040, 891, 1831, 575, 3341, 1297,
	1420, 2428, 790, 2430, 2422, 2423, 2424, 2425, 2427, 2428,
	1962, 1988, 1672, 2188, 1838, 1672, 2188, 2437, 1009, 991,
	1677, 2310, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1365,
	1334, 3008, 1979, 677, 1862, 1539, 2629, 207, 2526, 2575,
	3381, 1865, 2329, 2330, 1188, 3333, 2023, 1696, 2027, 2027,
	2040, 824, 1962, 3361, 2630, 2060, 2062, 3300, 1861, 1942,
	2066, 1040, 207, 1863, 2570, 1713, 1343, 3197, 1866, 2319,
	2712, 207, 774, 1698, 207, 774, 774, 1040, 790, 1795,
	1876, 1940, 990, 1877, 1878, 3236, 1203, 2528, 657, 1856,
	2709, 2555, 1402, 1403, 1405, 1406, 2106, 794, 1488, 1987,
	757, 1543, 2160, 756, 2103, 2115, 2853, 2629, 2238, 1688,
	794, 747, 988, 1124, 794, 1928, 2842, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 1302, 2089, 736, 736,
	2554, 2099, 2100, 1546, 1848, 2999, 1958, 2422, 2423, 2424,
	2425, 2427, 2428, 747, 748, 628, 627, 3332, 2147, 747,
	1733, 1541, 1020, 2198, 980, 2917, 207, 1985, 2710, 1311,
	2318, 2996, 1979, 2137, 2989, 2079, 1544, 554, 1846, 3006,
	3082, 980, 1672, 1669, 3301, 2139, 2315, 2987, 1243, 1348,
	2832, 1998, 1936, 2991, 952, 1185, 1542, 1040, 3348, 3264,
	1937, 3209, 207, 1938, 1454, 794, 1943, 2035, 1124, 2051,
	207, 2064, 2997, 2477, 2999, 138, 3120, 2140, 2118, 510,
	207, 3234, 2084, 2085, 2080, 2391, 2083, 2072, 2073, 1982,
	2138, 2098, 793, 207, 2912, 1650, 1141, 1557, 737, 737,
	2996, 1702, 2990, 505, 1021, 2809, 3359, 1004, 207, 1040,
	3235, 1022, 207, 207, 1926, 1929, 2173, 3299, 1706, 2151,
	1979, 1499, 3298, 2317, 2124, 2343, 1945, 1015, 1545, 2919,
	560, 1349, 2352, 1953, 1298, 1124, 738, 738, 207, 1717,
	207, 2997, 1320, 207, 744, 2557, 2203, 3331, 1688, 2233,
	2132, 1124, 3340, 3007, 2350, 1378, 2181, 1132, 207, 3382,
	1703, 2216, 1925, 2218, 1681, 207, 2559, 207, 1682, 207,
	2163, 2165, 3360, 3338, 983, 207, 1955, 2586, 207, 2131,
	207, 2180, 207, 2195, 207, 207, 2135, 207, 1141, 1141,
	1141, 983, 1141, 1491, 1492, 1470, 207, 207, 1796, 207,
	1830, 1350, 3150, 1939, 3362, 207, 2256, 2224, 2256, 2558,
	2992, 562, 1941, 2993, 2154, 3041, 207, 2617, 207, 2302,
	2476, 1008, 2207, 2245, 1759, 2308, 2208, 2309, 1536, 2278,
	2279, 1707, 2189, 2191, 2192, 2193, 2171, 207, 207, 207,
	3069, 207, 2047, 1002, 2247, 1681, 2179, 989, 2995, 1682,
	997, 2199, 497, 1683, 2864, 2347, 1387, 1888, 2265, 2196,
	2998, 1124, 572, 2918, 207, 1685, 2348, 2959, 1681, 2353,
	2589, 1697, 1682, 3376, 1158, 2212, 2221, 575, 1539, 2992,
	1745, 620, 2993, 1927, 2507, 3125, 3124, 1386, 2237, 1020,
	981, 1543, 981, 3107, 1708, 1709, 2289, 3187, 2274, 2304,
	2820, 2305, 556, 1704, 2618, 2539, 138, 2766, 1312, 2280,
	2260, 2276, 2314, 1124, 2267, 2535, 1454, 2995, 561, 1687,
	2271, 1020, 2272, 1546, 2273, 2246, 2228, 2225, 2275, 2998,
	1705, 579, 1283, 2281, 1683, 1779, 1768, 2291, 899, 2303,
	3068, 2081, 1992, 2277, 1543, 1767, 1685, 2344, 3011, 506,
	619, 1741, 2321, 979, 3210, 3010, 1544, 1683, 558, 1313,
	1872, 2994, 1310, 207, 2708, 2182, 1386, 2369, 2370, 1685,
	979, 1021, 2380, 1385, 3244, 2490, 1546, 203, 1022, 500,
	501, 1853, 2379, 518, 500, 518, 528, 533, 2879, 2326,
	549, 1321, 2324, 1653, 1541, 555, 3045, 2222, 203, 1246,
	1687, 507, 1387, 1021, 2960, 1657, 2349, 2323, 1688, 1544,
	1022, 3108, 2545, 1710, 3375, 2351, 666, 2544, 2335, 1825,
	203, 2113, 2478, 1687, 2078, 2107, 783, 2077, 734, 1542,
	2994, 559, 2112, 2111, 3070, 2235, 3192, 2561, 2767, 508,
	791, 509, 557, 1217, 2768, 2342, 2491, 3115, 1545, 3031,
	785, 1040, 1385, 2663, 676, 3345, 1873, 794, 2462, 2457,
	1218, 1231, 1777, 2469, 2470, 3142, 2588, 207, 2965, 1655,
	207, 2781, 1229, 512, 3247, 2471, 1711, 207, 1996, 3347,
	207, 207, 1040, 3193, 1656, 784, 2489, 3316, 3105, 1688,
	3206, 1040, 618, 3009, 617, 1363, 3211, 207, 3087, 2183,
	2184, 1545, 2386, 2485, 2958, 2450, 2512, 1345, 500, 500,
	2857, 207, 1688, 2495, 2496, 2449, 203, 2692, 1679, 735,
	2522, 2508, 621, 3106, 3116, 669, 580, 581, 207, 207,
	207, 1331, 3248, 2511, 207, 2145, 2484, 207, 1329, 2414,
	1696, 3194, 1684, 2524, 207, 207, 207, 207, 207, 2503,
	2498, 2354, 980, 2494, 2502, 2529, 2232, 2205, 207, 207,
	980, 980, 2175, 2466, 980, 2130, 207, 1567, 2452, 2453,
	2454, 2473, 2474, 2480, 2514, 2479, 1327, 2492, 207, 1141,
	1325, 207, 2463, 1564, 1323, 1364, 1317, 1040, 980, 1227,
	1293, 2536, 787, 1845, 2312, 1040, 2311, 2562, 2307, 2563,
	207, 1855, 1835, 207, 207, 1645, 1502, 1207, 3294, 2540,
	583, 582, 1995, 207, 3241, 2985, 1141, 207, 2877, 1141,
	1141, 1141, 2532, 1684, 2493, 2541, 207, 2581, 2837, 2582,
	2569, 2835, 207, 2547, 2606, 2551, 2552, 2546, 207, 2549,
	207, 1362, 1756, 2525, 2509, 2510, 1684, 207, 2483, 674,
	675, 1230, 2486, 1344, 2819, 1124, 2530, 736, 2616, 745,
	584, 585, 1228, 511, 2625, 2601, 2047, 2047, 2576, 2600,
	1141, 1141, 2251, 2240, 2560, 2239, 2219, 1330, 207, 207,
	2565, 1809, 207, 2650, 1328, 2602, 1124, 1686, 1808, 2520,
	2521, 2624, 1806, 2620, 207, 1124, 1040, 207, 207, 1040,
	207, 2571, 983, 2666, 2584, 2579, 2636, 2574, 2180, 2580,
	983, 983, 1686, 2585, 983, 2572, 207, 812, 1804, 2573,
	667, 668, 1326, 1801, 1799, 1797, 1324, 1788, 1738, 812,
	1322, 2633, 1316, 1688, 2577, 1226, 1844, 1736, 983, 1727,
	2633, 1715, 1726, 1712, 1699, 1689, 2720, 3154, 1726, 2644,
	2645, 2646, 2333, 2647, 2648, 782, 2623, 737, 1389, 1040,
	2676, 3342, 1724, 3267, 794, 2661, 2047, 2047, 2047, 2665,
	1040, 2607, 207, 3061, 2609, 2610, 2611, 2642, 138, 750,
	752, 2649, 1723, 3060, 1675, 961, 2695, 2635, 1182, 2150,
	2150, 1124, 3156, 1696, 2167, 738, 2888, 3199, 1587, 1124,
	2166, 2164, 1360, 1361, 1832, 2730, 1851, 3174, 2966, 962,
	1720, 2704, 2705, 2706, 2677, 2673, 1396, 1397, 1573, 2185,
	1667, 2674, 2170, 2334, 2680, 2656, 2657, 2678, 1393, 513,
	1396, 1397, 2202, 1694, 1695, 2172, 3240, 3213, 2868, 2513,
	1390, 994, 1399, 2863, 2805, 2259, 2065, 1648, 1579, 3374,
	666, 3357, 2420, 2421, 1467, 2700, 2810, 2778, 1885, 2736,
	981, 1396, 1397, 2142, 2141, 207, 1305, 1612, 1398, 2715,
	2142, 1005, 1304, 2719, 1885, 2746, 524, 981, 549, 207,
	2726, 979, 1398, 2732, 2518, 1040, 2143, 2733, 2004, 979,
	979, 963, 2003, 979, 203, 2735, 203, 203, 2794, 1146,
	1124, 203, 2743, 1124, 207, 2774, 2002, 1999, 2770, 203,
	1160, 2745, 1997, 2816, 2711, 2713, 2714, 979, 1970, 1347,
	2936, 2707, 1346, 1584, 1465, 1463, 3383, 3099, 3055, 2468,
	3033, 2907, 2896, 2771, 1184, 2872, 2808, 2861, 2860, 2859,
	2834, 2643, 2614, 2782, 2612, 2269, 2244, 207, 1206, 2799,
	2220, 1957, 203, 203, 1791, 1146, 138, 2731, 2787, 2779,
	2497, 980, 1790, 1124, 1875, 2845, 1789, 203, 1771, 2505,
	2784, 2785, 2790, 1749, 1124, 1242, 1748, 1744, 1743, 1742,
	207, 207, 207, 1740, 2854, 2801, 1739, 2856, 1380, 203,
	203, 203, 203, 1146, 1359, 1358, 1339, 1040, 207, 1335,
	1332, 549, 1141, 203, 1318, 1255, 2849, 1254, 1253, 1252,
	1251, 1250, 1249, 1248, 1247, 1245, 1240, 1239, 1238, 207,
	1237, 1236, 1199, 2823, 1198, 1197, 1196, 2836, 2892, 2838,
	1195, 1194, 207, 207, 1141, 1141, 1141, 1193, 207, 207,
	207, 1187, 1181, 207, 207, 2850, 1756, 1179, 2884, 2843,
	207, 1178, 1007, 1006, 936, 2180, 2903, 2881, 846, 1651,
	758, 612, 2916, 1040, 2047, 2047, 742, 203, 3118, 1353,
	74, 2880, 2867, 2505, 2885, 1189, 599, 68, 2833, 3252,
	2813, 203, 2869, 732, 2553, 1834, 2871, 1319, 1760, 1124,
	1836, 2482, 2086, 3233, 2944, 2390, 533, 2043, 2882, 3180,
	2934, 3081, 2886, 1994, 1484, 2894, 70, 834, 207, 919,
	2893, 983, 2265, 2986, 2875, 2822, 2295, 2899, 2294, 801,
	1043, 2898, 980, 2906, 2930, 1660, 840, 1673, 2921, 2909,
	2126, 2910, 2026, 2466, 2914, 1583, 843, 2904, 2905, 1585,
	845, 844, 1586, 1486, 2047, 2047, 2047, 2047, 2047, 2047,
	2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
	2047, 2047, 2047, 842, 2047, 1582, 2870, 2234, 2263, 207,
	1234, 722, 1664, 1951, 1149, 1989, 2385, 1038, 2970, 1040,
	2922, 1040, 1481, 814, 836, 1986, 1000, 813, 2487, 2900,
	2901, 2902, 2628, 1587, 1587, 2804, 3050, 1871, 207, 207,
	207, 1124, 2325, 1868, 2957, 615, 2417, 1971, 992, 2048,
	207, 2041, 2037, 1367, 1456, 2264, 207, 1030, 207, 3005,
	817, 207, 207, 207, 207, 207, 1949, 1472, 2359, 2500,
	3015, 3016, 207, 207, 1141, 2637, 1040, 2717, 1141, 2121,
	1879, 3004, 1758, 960, 2968, 2969, 959, 958, 2723, 2971,
	3258, 2973, 2502, 3255, 2915, 207, 1654, 2984, 1040, 2136,
	2977, 1141, 1612, 1612, 1448, 2603, 980, 1124, 830, 2467,
	2664, 207, 983, 1204, 3003, 3198, 1447, 2967, 3028, 1538,
	754, 3189, 1019, 1018, 1017, 2538, 980, 2983, 3032, 500,
	979, 2982, 207, 3037, 3380, 2830, 2974, 1756, 1040, 174,
	171, 3065, 173, 3023, 2625, 172, 3014, 2847, 2587, 3013,
	203, 90, 203, 3019, 3053, 203, 3047, 3018, 1584, 1584,
	3036, 3062, 3035, 3024, 1040, 1160, 37, 1146, 203, 3049,
	3046, 3056, 3048, 36, 3054, 35, 203, 1160, 518, 17,
	114, 203, 1160, 113, 112, 111, 110, 549, 109, 108,
	107, 106, 105, 3027, 2972, 104, 103, 102, 101, 3071,
	1040, 100, 99, 2807, 2633, 98, 207, 3093, 207, 3073,
	1040, 207, 97, 96, 95, 3043, 94, 93, 92, 207,
	3078, 91, 34, 1124, 545, 1124, 542, 50, 981, 3025,
	49, 89, 3089, 88, 16, 33, 981, 981, 14, 3102,
	981, 54, 207, 55, 13, 3094, 3095, 29, 30, 80,
	79, 28, 15, 27, 25, 207, 983, 26, 11, 3097,
	8, 7, 207, 3100, 981, 10, 12, 1141, 800, 3146,
	24, 143, 207, 3137, 142, 73, 983, 3121, 141, 72,
	1124, 3155, 140, 2356, 2357, 139, 71, 23, 9, 22,
	135, 979, 3147, 207, 67, 3149, 3101, 137, 136, 3159,
	64, 3135, 1124, 134, 133, 65, 3127, 3153, 3145, 132,
	131, 66, 207, 130, 21, 3158, 3163, 3164, 207, 5,
	2884, 53, 3152, 6, 3066, 2667, 207, 83, 3157, 84,
	31, 3128, 3129, 2625, 203, 62, 3151, 61, 60, 1587,
	20, 52, 1124, 19, 165, 164, 163, 3186, 162, 3195,
	158, 3183, 157, 207, 207, 161, 159, 3185, 160, 3178,
	3173, 2043, 2043, 156, 129, 167, 166, 154, 1124, 151,
	150, 207, 1141, 153, 3208, 155, 3098, 207, 152, 203,
	203, 1141, 1141, 2443, 2444, 2445, 203, 3227, 149, 207,
	168, 207, 128, 57, 127, 126, 1776, 125, 3231, 124,
	3232, 123, 3219, 3215, 1124, 203, 56, 203, 1612, 203,
	18, 207, 2, 500, 1124, 3237, 1, 207, 207, 0,
	1040, 3225, 3226, 3230, 3249, 1792, 3250, 3218, 3260, 0,
	207, 0, 0, 0, 0, 979, 0, 0, 0, 3270,
	0, 3272, 3203, 3224, 3268, 3261, 3202, 812, 3265, 3254,
	0, 0, 0, 3280, 0, 979, 3262, 0, 0, 3279,
	207, 2043, 2043, 2043, 1584, 3223, 549, 3274, 0, 3276,
	0, 0, 3305, 0, 0, 0, 1146, 203, 3269, 3290,
	3291, 0, 0, 3293, 0, 3292, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 203, 207, 3319, 0, 2976,
	203, 203, 3321, 203, 3323, 203, 0, 203, 3328, 203,
	3330, 0, 3329, 3325, 3320, 207, 0, 3326, 3327, 1850,
	2047, 0, 0, 1852, 3322, 0, 3324, 0, 0, 0,
	0, 0, 203, 0, 3339, 3337, 3336, 0, 0, 207,
	3260, 0, 0, 3343, 0, 3344, 3346, 3307, 3349, 0,
	3351, 533, 3353, 3350, 0, 0, 3355, 549, 3356, 2047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3364,
	3363, 0, 0, 0, 0, 3371, 0, 3370, 0, 3372,
	0, 3373, 1396, 1397, 0, 0, 0, 3377, 0, 2265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3384, 0, 3385, 0, 3378, 3379, 1399, 0,
	3392, 3393, 0, 3388, 3389, 3390, 1038, 0, 0, 0,
	0, 0, 0, 0, 1124, 3397, 0, 0, 0, 0,
	812, 0, 0, 0, 1398, 3395, 0, 981, 0, 0,
	0, 0, 3079, 0, 0, 0, 0, 0, 0, 2047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 800, 0, 0, 0, 800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3079, 0,
	0, 2688, 2689, 0, 0, 0, 0, 0, 1888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 1166, 0, 1172, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	500, 0, 0, 0, 0, 0, 0, 203, 0, 500,
	0, 0, 203, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1587, 0, 2043,
	2043, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755,
	2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765,
	0, 2769, 0, 0, 0, 0, 0, 1291, 0, 0,
	0, 0, 1587, 0, 1294, 1419, 0, 0, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2420, 2421, 0,
	2438, 2439, 2440, 0, 518, 0, 1612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2697, 0, 0, 2043,
	2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
	2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 0, 2043,
	2158, 1612, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 2435, 203, 0,
	0, 0, 1584, 0, 1420, 0, 0, 0, 0, 0,
	0, 203, 2420, 2421, 0, 2438, 2439, 2440, 1888, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	203, 2213, 0, 0, 0, 0, 0, 1584, 0, 0,
	0, 0, 0, 1449, 1450, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 1160, 0,
	0, 203, 981, 0, 0, 0, 0, 0, 0, 2426,
	0, 0, 2435, 1469, 0, 0, 1776, 0, 0, 1482,
	0, 0, 981, 2158, 0, 500, 0, 2268, 0, 0,
	0, 0, 0, 203, 0, 0, 203, 0, 203, 0,
	203, 0, 203, 203, 0, 1146, 0, 0, 0, 0,
	0, 0, 1587, 0, 2287, 666, 0, 2158, 0, 0,
	2441, 0, 659, 203, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 1160, 0, 1160, 0, 0, 0,
	0, 0, 0, 0, 2426, 0, 0, 58, 0, 661,
	2436, 0, 0, 0, 0, 203, 203, 203, 59, 203,
	0, 1587, 1587, 0, 0, 0, 0, 0, 0, 0,
	0, 2442, 63, 0, 0, 0, 0, 1587, 1587, 0,
	0, 1612, 203, 0, 1396, 1397, 0, 0, 0, 0,
	1439, 1440, 1441, 0, 0, 2441, 0, 0, 1532, 1532,
	1532, 0, 69, 0, 0, 0, 0, 0, 1587, 0,
	1399, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2436, 0, 0, 0, 0,
	1612, 1612, 75, 0, 0, 0, 1398, 1584, 0, 2437,
	0, 85, 0, 0, 1418, 76, 1612, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 800, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1612, 0, 0,
	0, 1160, 0, 77, 0, 0, 1584, 1584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1584, 1584, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 2437, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1584, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 2432,
	2433, 2434, 0, 0, 0, 0, 2431, 2429, 2430, 2422,
	2423, 2424, 2425, 2427, 2428, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 203, 203, 0, 0,
	203, 0, 0, 0, 0, 500, 0, 0, 500, 78,
	1434, 0, 0, 0, 0, 500, 0, 1419, 500, 500,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1160, 0, 3086, 0, 0,
	144, 81, 0, 82, 2432, 2433, 2434, 0, 0, 1160,
	0, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428,
	0, 0, 175, 0, 0, 0, 203, 2158, 2534, 0,
	1587, 0, 2158, 0, 662, 2534, 3110, 115, 0, 0,
	0, 0, 2158, 2534, 2158, 2534, 2534, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 203, 203, 0, 0,
	177, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 2043, 203, 0, 0, 1146,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 148, 0, 0, 2591, 1612,
	0, 2593, 2596, 176, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 169, 2043, 203, 0, 0, 0, 0,
	0, 170, 0, 0, 203, 0, 3177, 0, 0, 0,
	1146, 0, 0, 0, 0, 0, 2158, 0, 500, 0,
	0, 0, 660, 0, 0, 2158, 0, 0, 2420, 2421,
	0, 2438, 2439, 2440, 0, 1584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 203, 1776, 0, 0,
	1776, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 2672, 0, 0, 1146, 203, 0, 203, 0,
	0, 0, 0, 0, 2043, 1869, 0, 1874, 2435, 0,
	0, 0, 0, 1881, 203, 0, 0, 0, 0, 0,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 0, 1930, 0, 1932, 1933,
	1934, 1935, 0, 0, 0, 122, 0, 0, 0, 0,
	2728, 58, 0, 0, 0, 0, 0, 0, 1959, 0,
	2426, 0, 59, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 63, 1984, 1587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 69, 0, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 0, 0, 0, 0, 2039,
	0, 2050, 2052, 2057, 0, 0, 41, 0, 0, 1587,
	0, 42, 0, 0, 0, 0, 75, 203, 0, 120,
	0, 2436, 0, 500, 40, 85, 0, 1612, 0, 76,
	43, 0, 0, 0, 0, 0, 0, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 1160, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1612, 0,
	0, 0, 0, 1584, 0, 1587, 0, 0, 0, 0,
	0, 0, 2420, 2421, 0, 2438, 2439, 2440, 0, 0,
	0, 0, 0, 0, 0, 549, 0, 0, 0, 0,
	2437, 2696, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1584, 0, 0, 0, 2865, 203,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2435, 0, 1612, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 2158, 203, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2287, 2287, 0, 0, 0, 0, 666, 666, 2158, 0,
	0, 1776, 1776, 48, 144, 81, 0, 82, 203, 46,
	1584, 0, 0, 121, 0, 2215, 0, 2217, 0, 47,
	2432, 2433, 2434, 0, 2426, 0, 175, 2431, 2429, 2430,
	2422, 2423, 2424, 2425, 2427, 2428, 0, 0, 51, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 2945, 0, 0, 0,
	0, 1467, 0, 0, 0, 2441, 835, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 59, 0, 0, 0, 2436, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 169, 0, 0,
	0, 0, 203, 0, 0, 170, 0, 1160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 69, 147, 0, 0, 3,
	900, 0, 0, 87, 0, 0, 2158, 2534, 2158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 0,
	0, 0, 0, 0, 2158, 75, 2534, 0, 0, 1160,
	1160, 203, 2158, 2534, 85, 0, 0, 0, 76, 204,
	203, 203, 0, 0, 2437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2339, 2340, 0, 0, 58,
	204, 2346, 0, 3040, 0, 775, 0, 0, 0, 0,
	59, 0, 0, 0, 795, 0, 77, 0, 0, 2158,
	2360, 2361, 204, 0, 63, 0, 1984, 0, 0, 0,
	0, 0, 0, 0, 0, 2368, 0, 0, 0, 0,
	1160, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 2388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2403, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 2432, 2433, 2434, 76, 0, 0,
	0, 2431, 2429, 2430, 2422, 2423, 2424, 2425, 2427, 2428,
	0, 0, 0, 0, 2158, 0, 2534, 0, 0, 3104,
	0, 0, 78, 2057, 2057, 2057, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 1532, 0,
	0, 0, 0, 0, 0, 0, 2472, 0, 0, 0,
	549, 0, 0, 144, 81, 0, 82, 0, 1396, 1397,
	0, 0, 0, 2596, 0, 0, 0, 0, 0, 0,
	203, 0, 866, 0, 0, 175, 0, 0, 0, 0,
	1160, 0, 0, 0, 1399, 0, 0, 662, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 800, 0, 0, 0, 0, 0, 0, 0,
	1398, 202, 0, 177, 800, 0, 0, 0, 1418, 0,
	2728, 0, 0, 0, 0, 0, 500, 0, 0, 0,
	0, 0, 573, 0, 3104, 0, 116, 0, 0, 2556,
	0, 78, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 573, 0, 176, 0, 0, 0,
	0, 2158, 2534, 0, 2691, 0, 169, 0, 0, 0,
	0, 0, 144, 81, 170, 82, 0, 0, 0, 203,
	1421, 1422, 1423, 1424, 0, 2534, 0, 0, 0, 0,
	1404, 0, 0, 0, 175, 147, 0, 1160, 0, 1160,
	0, 0, 0, 0, 0, 0, 662, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3245,
	1426, 1427, 1428, 0, 2626, 1160, 203, 0, 0, 0,
	0, 0, 177, 58, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 116, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 2728, 0,
	0, 1419, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 69, 0,
	0, 0, 0, 170, 0, 0, 0, 2679, 0, 0,
	0, 1881, 0, 0, 2158, 0, 0, 2683, 2684, 0,
	0, 2687, 0, 0, 147, 2690, 0, 0, 75, 0,
	0, 0, 0, 3104, 2694, 0, 0, 85, 0, 0,
	0, 76, 0, 2701, 0, 0, 2472, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 1160, 87, 0,
	87, 0, 87, 0, 0, 0, 0, 2721, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 2737, 2738, 0, 2739,
	2740, 2741, 0, 0, 2742, 0, 0, 0, 2744, 0,
	0, 0, 0, 0, 0, 0, 204, 1045, 204, 204,
	1045, 0, 1045, 204, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 2772,
	2773, 0, 0, 0, 0, 0, 0, 795, 87, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 2789, 0, 0,
	0, 0, 1045, 1045, 204, 204, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 78, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 1399, 0,
	0, 204, 204, 204, 204, 0, 1045, 1045, 0, 0,
	0, 1045, 0, 0, 1045, 204, 144, 81, 0, 82,
	0, 0, 2824, 2827, 1398, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 2846, 0, 0, 0, 0,
	662, 0, 0, 115, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 775, 0, 177, 0, 2686, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 204, 1421, 1422, 1423, 1424, 0, 116,
	0, 0, 0, 0, 1404, 0, 0, 0, 0, 1532,
	1468, 148, 0, 0, 1474, 0, 0, 0, 0, 176,
	2895, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 1426, 1427, 1428, 170, 202, 0,
	202, 202, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 573, 0, 0, 0, 0, 1286, 0,
	0, 0, 0, 0, 0, 2923, 2924, 0, 0, 0,
	0, 2928, 2929, 0, 0, 0, 2932, 2933, 0, 0,
	0, 0, 0, 2937, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 202, 0, 0,
	0, 0, 2942, 0, 0, 0, 0, 0, 0, 2946,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 202, 202, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 202, 1553, 0,
	1556, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2827, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	204, 204, 0, 0, 0, 0, 0, 1045, 204, 0,
	0, 1396, 1397, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 1399, 0, 0,
	0, 0, 1045, 0, 0, 0, 0, 0, 2827, 0,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 1398, 0, 3074, 3075, 3076, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 3084, 3085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 3092, 0, 0, 0, 0,
	566, 0, 0, 0, 0, 0, 0, 2685, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1399,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 2827, 1404, 0, 0, 0, 0, 0, 0,
	3126, 0, 0, 0, 0, 1398, 0, 0, 0, 0,
	0, 0, 800, 1418, 0, 1045, 204, 0, 0, 3139,
	0, 0, 1045, 1426, 1427, 1428, 0, 0, 975, 2827,
	0, 0, 2827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2827, 2827, 0, 0, 0, 0, 2345,
	0, 204, 204, 0, 1555, 0, 982, 198, 204, 202,
	0, 0, 0, 795, 1419, 1421, 1422, 1423, 1424, 0,
	0, 0, 202, 1555, 0, 1404, 0, 204, 0, 204,
	573, 204, 0, 0, 0, 573, 0, 0, 0, 3188,
	0, 0, 3191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 1045, 0, 1045,
	0, 0, 0, 0, 1045, 0, 0, 0, 0, 204,
	0, 0, 0, 1420, 0, 0, 1419, 0, 1045, 1045,
	0, 0, 0, 0, 0, 775, 0, 204, 775, 775,
	0, 0, 204, 204, 0, 204, 0, 204, 0, 204,
	0, 204, 0, 0, 0, 800, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3289, 3289, 3289, 0, 0, 0,
	0, 0, 0, 1948, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 3308, 0, 0, 0, 795, 573, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1045,
	1468, 2827, 0, 2827, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3289, 0, 0, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 202, 202, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 202, 0, 202, 0, 0, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1045, 1556, 0, 3289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 1399, 0, 0,
	0, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 1398, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 1045, 0, 0, 573, 202, 0, 202, 0, 202,
	0, 202, 0, 202, 204, 0, 0, 1045, 0, 0,
	0, 0, 0, 0, 0, 1041, 0, 0, 1142, 0,
	1041, 0, 0, 0, 0, 0, 202, 2338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 0, 1404, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1142, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 1427, 1428, 0, 0, 87, 0,
	0, 0, 0, 0, 1396, 1397, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 1142, 1142, 0, 1045, 0, 1142,
	1399, 0, 1142, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 1398, 0, 87, 0,
	87, 0, 0, 204, 1418, 0, 1045, 0, 0, 0,
	0, 0, 0, 0, 1035, 0, 0, 1142, 204, 1045,
	0, 1153, 204, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 204, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 1420, 0, 0, 1404, 0, 0, 0,
	0, 982, 0, 0, 0, 204, 202, 1235, 204, 0,
	204, 0, 204, 0, 204, 204, 0, 0, 1045, 1045,
	1045, 0, 1045, 0, 0, 0, 1426, 1427, 1428, 1259,
	1259, 1259, 1153, 0, 0, 204, 1042, 0, 0, 1143,
	0, 1042, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1948, 204, 204, 204,
	0, 204, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 0, 0,
	0, 1143, 1143, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 0, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 1143, 1143, 0, 0, 0,
	1143, 0, 202, 1143, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	202, 0, 0, 0, 573, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 202, 970, 0, 0, 0,
	0, 0, 0, 0, 970, 970, 1041, 0, 970, 0,
	0, 0, 0, 0, 0, 1142, 566, 0, 0, 0,
	0, 566, 0, 0, 0, 0, 0, 202, 0, 0,
	202, 0, 202, 0, 202, 0, 202, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1041, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 0, 0, 0, 202,
	202, 202, 0, 202, 0, 0, 0, 0, 0, 87,
	0, 87, 1045, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1562, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 0, 0, 0, 204, 204,
	1041, 0, 0, 0, 795, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 1045,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 87,
	0, 0, 0, 0, 0, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 1045, 204, 0, 1045,
	1045, 1045, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 1045, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 1042, 982, 0, 0, 1142, 0, 1142, 0, 0,
	982, 982, 1142, 0, 982, 0, 1045, 0, 204, 1045,
	204, 0, 0, 0, 0, 0, 1142, 1142, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 1555, 0,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 1751,
	0, 0, 0, 0, 0, 1399, 1763, 0, 1445, 1045,
	202, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	1045, 0, 0, 0, 0, 1235, 0, 1782, 0, 1782,
	0, 1398, 0, 0, 0, 970, 0, 0, 0, 1418,
	202, 202, 0, 0, 0, 0, 1415, 1041, 1555, 0,
	0, 0, 0, 0, 1143, 0, 0, 0, 0, 0,
	202, 1042, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 1822, 0, 202,
	0, 1421, 1422, 1423, 1424, 0, 0, 0, 202, 0,
	0, 1404, 0, 0, 0, 1833, 0, 0, 0, 0,
	0, 1839, 0, 1840, 0, 1841, 0, 1842, 0, 1843,
	0, 0, 1041, 0, 0, 1045, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 1854, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 1442, 1443, 649, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 202, 0, 0, 1434, 1143, 631, 1143, 0,
	0, 0, 1419, 1143, 0, 0, 970, 0, 202, 1041,
	0, 0, 0, 0, 0, 0, 0, 1143, 1143, 1444,
	0, 0, 0, 0, 0, 1041, 0, 632, 0, 0,
	0, 0, 0, 1433, 0, 0, 633, 0, 0, 0,
	0, 204, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 634, 0, 0, 0, 0, 0, 1045, 204, 0,
	0, 0, 1045, 0, 0, 0, 0, 654, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1045, 1045, 1045, 0, 0, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 1042, 0,
	204, 0, 0, 0, 0, 0, 1437, 0, 0, 637,
	0, 0, 638, 1045, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 653, 0,
	970, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2104, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 1042, 0, 0, 0, 0, 1435, 0,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 2953, 0, 0, 2952, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 87, 640, 0, 0, 1045,
	0, 1045, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 657, 641, 0, 0, 0, 87, 0, 0, 0,
	1042, 0, 0, 0, 0, 0, 1142, 1142, 1142, 0,
	1142, 0, 0, 202, 202, 0, 1042, 0, 0, 656,
	0, 0, 0, 204, 0, 0, 642, 0, 0, 643,
	202, 0, 204, 204, 1045, 651, 1045, 0, 1045, 0,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 1045, 0,
	0, 1045, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 645, 652, 0, 0, 0, 1153, 0, 0, 0,
	0, 646, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 648, 0, 0, 0, 0, 647, 1045, 0,
	0, 0, 0, 0, 0, 0, 2231, 0, 655, 0,
	0, 1763, 0, 0, 0, 0, 0, 0, 0, 650,
	0, 0, 0, 0, 1045, 0, 1042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2270, 0, 0, 1259, 0, 1259, 0,
	1259, 0, 1153, 1153, 0, 0, 0, 0, 0, 0,
	1045, 0, 0, 0, 1948, 1143, 0, 0, 0, 0,
	1045, 0, 0, 2306, 0, 0, 0, 0, 1042, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 2320, 1153, 2322, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 1045, 0, 0,
	0, 0, 2336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 202, 0, 1143, 1143, 1143,
	0, 1143, 0, 0, 202, 202, 0, 0, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	1041, 0, 0, 0, 1432, 0, 0, 0, 0, 1041,
	0, 1399, 0, 0, 1445, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 1045, 0, 0, 0, 0, 1398, 0, 0,
	0, 1045, 1045, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	1045, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 1142, 0, 0,
	0, 0, 0, 0, 0, 1041, 0, 1421, 1422, 1423,
	1424, 202, 0, 1041, 0, 0, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1142, 0, 0, 1142, 1142, 1142,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 1142, 1142,
	0, 1434, 0, 0, 0, 0, 2531, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1041, 1444, 0, 1041, 0, 0,
	1042, 0, 0, 0, 0, 0, 2568, 2231, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1042, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 0, 202, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 2604, 0, 0, 0, 2608, 0, 1420, 1041, 0,
	0, 0, 0, 0, 2615, 0, 0, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	202, 0, 1437, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 202, 0, 0, 0, 1399, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2660, 0, 1143, 0,
	0, 0, 1398, 0, 0, 0, 1042, 0, 0, 0,
	1418, 0, 0, 0, 1042, 0, 2675, 1415, 1153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2681, 1143, 0, 0, 1143, 1143,
	1143, 0, 0, 0, 1435, 0, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 1041, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 2408, 0, 0,
	2409, 0, 1421, 1422, 1423, 1424, 0, 0, 0, 0,
	0, 0, 1404, 0, 0, 0, 0, 0, 0, 1143,
	1143, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 1042, 1432, 0, 1042, 0,
	0, 0, 0, 1399, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 1434, 1418, 0, 0,
	0, 0, 0, 1419, 1415, 1041, 0, 0, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 1042, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 1142, 1142, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 0, 1404,
	0, 1041, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2866,
	0, 0, 0, 1434, 1042, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 2876, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 1041, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 1410, 1411, 1417, 1416, 1412, 1438, 2913, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 1425, 1980, 0, 0, 1981, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1142, 0, 1041, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1042, 0, 0, 0,
	0, 1143, 0, 0, 1437, 0, 1041, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 1143, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 1041, 0,
	0, 0, 2951, 0, 0, 0, 0, 0, 1041, 0,
	0, 3017, 0, 0, 0, 0, 0, 0, 0, 0,
	2231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1142, 0, 0, 1042, 0,
	1042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1621, 1603, 1610, 1593, 1631, 1630, 0,
	0, 1595, 1594, 0, 0, 0, 0, 0, 0, 1641,
	1642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 0, 1042, 0, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1632,
	0, 1628, 1627, 0, 0, 0, 0, 1042, 0, 0,
	1143, 0, 0, 1626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3111, 0, 0,
	1142, 0, 0, 0, 0, 0, 0, 0, 0, 1142,
	1142, 0, 1625, 1623, 1624, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3148, 0, 0, 1042, 1605, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 0, 1614, 1608, 1616, 1618, 1619,
	1620, 1615, 0, 1613, 0, 0, 0, 0, 0, 0,
	0, 3171, 1637, 1638, 0, 0, 0, 0, 0, 1042,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 0, 0, 0,
	1606, 0, 1607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 3217,
	0, 0, 0, 0, 0, 0, 0, 0, 1622, 0,
	0, 0, 1590, 1588, 1589, 1592, 1591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3251, 1598, 1599, 1601,
	1602, 0, 0, 0, 0, 0, 0, 0, 3266, 0,
	0, 0, 1617, 1600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1596, 0, 1633, 1634, 1635, 1636, 0, 0, 0,
	0, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	1143, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1604, 0, 0, 0, 0, 1611, 1639, 0, 0,
	0, 0, 0, 1039, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	212, 213, 214, 215, 216, 1046, 217, 1047, 1048, 1049,
	1050, 451, 1051, 1052, 1053, 1054, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 1055, 224, 225, 226,
	227, 228, 229, 1056, 1057, 230, 456, 457, 458, 1058,
	231, 459, 1059, 1044, 1060, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 1061, 241, 0, 242, 243,
	244, 1062, 921, 245, 246, 1063, 1064, 1066, 1065, 1067,
	1068, 1069, 247, 248, 249, 250, 251, 252, 460, 461,
	1070, 253, 1071, 255, 254, 1072, 256, 1073, 1074, 257,
	258, 259, 1075, 260, 1076, 261, 262, 1077, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 1078,
	209, 1079, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 1080, 279, 1081, 1082, 922, 280,
	281, 1083, 282, 466, 1084, 467, 283, 1085, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 924, 1086,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 1087,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 1088,
	473, 1089, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 1090, 312, 311,
	1091, 313, 475, 928, 314, 315, 929, 1092, 316, 317,
	1093, 1094, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 1095, 211,
	931, 1096, 476, 477, 332, 333, 1097, 334, 335, 336,
	1098, 1099, 338, 339, 1100, 1101, 340, 478, 932, 341,
	933, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	1102, 349, 480, 350, 481, 351, 1103, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 1104, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 1105, 374, 934, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 1106, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 1107, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 1108, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 1109, 417, 418, 416, 1110,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 1111,
	486, 487, 488, 489, 1112, 1113, 426, 427, 490, 428,
	491, 1114, 429, 430, 431, 0, 432, 433, 1115, 1116,
	434, 435, 436, 437, 439, 1117, 440, 1118, 438, 441,
	442, 443, 492, 493, 494, 1119, 445, 444, 495, 1120,
	1121, 1122, 1123, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1039, 0, 0, 0, 0, 0, 0, 0, 2091,
	0, 0, 0, 0, 0, 0, 0, 2092, 212, 213,
	214, 215, 216, 1046, 217, 1047, 1048, 1049, 1050, 451,
	1051, 1052, 1053, 1054, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 1055, 224, 225, 226, 227, 228,
	229, 1056, 1057, 230, 456, 457, 458, 1058, 231, 459,
	1059, 1044, 1060, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 1061, 241, 0, 242, 243, 244, 1062,
	921, 245, 246, 1063, 1064, 1066, 1065, 1067, 1068, 1069,
	247, 248, 249, 250, 251, 252, 460, 461, 1070, 253,
	1071, 255, 254, 1072, 256, 1073, 1074, 257, 258, 259,
	1075, 260, 1076, 261, 262, 1077, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 1078, 209, 1079,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 1080, 279, 1081, 1082, 922, 280, 281, 1083,
	282, 466, 1084, 467, 283, 1085, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 924, 1086, 474, 292,
	0, 0, 0, 210, 291, 293, 300, 1087, 923, 294,
	471, 296, 295, 297, 298, 299, 472, 1088, 473, 1089,
	301, 925, 926, 302, 303, 304, 927, 305, 306, 0,
	0, 307, 308, 309, 310, 1090, 312, 311, 1091, 313,
	475, 928, 314, 315, 929, 1092, 316, 317, 1093, 1094,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 930, 328, 329, 331, 330, 1095, 211, 931, 1096,
	476, 477, 332, 333, 1097, 334, 335, 336, 1098, 1099,
	338, 339, 1100, 1101, 340, 478, 932, 341, 933, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 1102, 349,
	480, 350, 481, 351, 1103, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 1104, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 1105, 374, 934, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 1106,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	1107, 401, 381, 382, 402, 935, 403, 484, 404, 405,
	1108, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 1109, 417, 418, 416, 1110, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 1111, 486, 487,
	488, 489, 1112, 1113, 426, 427, 490, 428, 491, 1114,
	429, 430, 431, 0, 432, 433, 1115, 1116, 434, 435,
	436, 437, 439, 1117, 440, 1118, 438, 441, 442, 443,
	492, 493, 494, 1119, 445, 444, 495, 1120, 1121, 1122,
	1123, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 1039, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2975, 212, 213,
	214, 215, 216, 1046, 217, 1047, 1048, 1049, 1050, 451,
	1051, 1052, 1053, 1054, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 1055, 224, 225, 226, 227, 228,
	229, 1056, 1057, 230, 456, 457, 458, 1058, 231, 459,
	1059, 1044, 1060, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 1061, 241, 0, 242, 243, 244, 1062,
	921, 245, 246, 1063, 1064, 1066, 1065, 1067, 1068, 1069,
	247, 248, 249, 250, 251, 252, 460, 461, 1070, 253,
	1071, 255, 254, 1072, 256, 1073, 1074, 257, 258, 259,
	1075, 260, 1076, 261, 262, 1077, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 1078, 209, 1079,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 1080, 279, 1081, 1082, 922, 280, 281, 1083,
	282, 466, 1084, 467, 283, 1085, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 924, 1086, 474, 292,
	0, 0, 0, 210, 291, 293, 300, 1087, 923, 294,
	471, 296, 295, 297, 298, 299, 472, 1088, 473, 1089,
	301, 925, 926, 302, 303, 304, 927, 305, 306, 0,
	0, 307, 308, 309, 310, 1090, 312, 311, 1091, 313,
	475, 928, 314, 315, 929, 1092, 316, 317, 1093, 1094,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 930, 328, 329, 331, 330, 1095, 211, 931, 1096,
	476, 477, 332, 333, 1097, 334, 335, 336, 1098, 1099,
	338, 339, 1100, 1101, 340, 478, 932, 341, 933, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 1102, 349,
	480, 350, 481, 351, 1103, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 1104, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 1105, 374, 934, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 1106,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	1107, 401, 381, 382, 402, 935, 403, 484, 404, 405,
	1108, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 1109, 417, 418, 416, 1110, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 1111, 486, 487,
	488, 489, 1112, 1113, 426, 427, 490, 428, 491, 1114,
	429, 430, 431, 0, 432, 433, 1115, 1116, 434, 435,
	436, 437, 439, 1117, 440, 1118, 438, 441, 442, 443,
	492, 493, 494, 1119, 445, 444, 495, 1120, 1121, 1122,
	1123, 446, 447, 496, 448, 449, 450, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3080, 0, 212, 213, 214, 215, 216, 1046,
	217, 1047, 1048, 1049, 1050, 451, 1051, 1052, 1053, 1054,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	1055, 224, 225, 226, 227, 228, 229, 1056, 1057, 230,
	456, 457, 458, 1058, 231, 459, 1059, 1044, 1060, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 1061,
	241, 0, 242, 243, 244, 1062, 921, 245, 246, 1063,
	1064, 1066, 1065, 1067, 1068, 1069, 247, 248, 249, 250,
	251, 252, 460, 461, 1070, 253, 1071, 255, 254, 1072,
	256, 1073, 1074, 257, 258, 259, 1075, 260, 1076, 261,
	262, 1077, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 1078, 209, 1079, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 1080, 279,
	1081, 1082, 922, 280, 281, 1083, 282, 466, 1084, 467,
	283, 1085, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 924, 1086, 474, 292, 0, 0, 0, 210,
	291, 293, 300, 1087, 923, 294, 471, 296, 295, 297,
	298, 299, 472, 1088, 473, 1089, 301, 925, 926, 302,
	303, 304, 927, 305, 306, 0, 0, 307, 308, 309,
	310, 1090, 312, 311, 1091, 313, 475, 928, 314, 315,
	929, 1092, 316, 317, 1093, 1094, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 930, 328, 329,
	331, 330, 1095, 211, 931, 1096, 476, 477, 332, 333,
	1097, 334, 335, 336, 1098, 1099, 338, 339, 1100, 1101,
	340, 478, 932, 341, 933, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 1102, 349, 480, 350, 481, 351,
	1103, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 1104, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 1105, 374, 934,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 1106, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 1107, 401, 381, 382,
	402, 935, 403, 484, 404, 405, 1108, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 1109,
	417, 418, 416, 1110, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 1111, 486, 487, 488, 489, 1112, 1113,
	426, 427, 490, 428, 491, 1114, 429, 430, 431, 0,
	432, 433, 1115, 1116, 434, 435, 436, 437, 439, 1117,
	440, 1118, 438, 441, 442, 443, 492, 493, 494, 1119,
	445, 444, 495, 1120, 1121, 1122, 1123, 446, 447, 496,
	448, 449, 450, 1039, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2724, 0,
	212, 213, 214, 215, 216, 1046, 217, 1047, 1048, 1049,
	1050, 451, 1051, 1052, 1053, 1054, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 1055, 224, 225, 226,
	227, 228, 229, 1056, 1057, 230, 456, 457, 458, 1058,
	231, 459, 1059, 1044, 1060, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 1061, 241, 0, 242, 243,
	244, 1062, 921, 245, 246, 1063, 1064, 1066, 1065, 1067,
	1068, 1069, 247, 248, 249, 250, 251, 252, 460, 461,
	1070, 253, 1071, 255, 254, 1072, 256, 1073, 1074, 257,
	258, 259, 1075, 260, 1076, 261, 262, 1077, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 1078,
	209, 1079, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 1080, 279, 1081, 1082, 922, 280,
	281, 1083, 282, 466, 1084, 467, 283, 1085, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 924, 1086,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 1087,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 1088,
	473, 1089, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 1090, 312, 311,
	1091, 313, 475, 928, 314, 315, 929, 1092, 316, 317,
	1093, 1094, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 1095, 211,
	931, 1096, 476, 477, 332, 333, 1097, 334, 335, 336,
	1098, 1099, 338, 339, 1100, 1101, 340, 478, 932, 341,
	933, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	1102, 349, 480, 350, 481, 351, 1103, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 1104, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 1105, 374, 934, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 1106, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 1107, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 1108, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 1109, 417, 418, 416, 1110,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 1111,
	486, 487, 488, 489, 1112, 1113, 426, 427, 490, 428,
	491, 1114, 429, 430, 431, 0, 432, 433, 1115, 1116,
	434, 435, 436, 437, 439, 1117, 440, 1118, 438, 441,
	442, 443, 492, 493, 494, 1119, 445, 444, 495, 1120,
	1121, 1122, 1123, 446, 447, 496, 448, 449, 450, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2716, 0, 212, 213, 214, 215,
	216, 1046, 217, 1047, 1048, 1049, 1050, 451, 1051, 1052,
	1053, 1054, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 1055, 224, 225, 226, 227, 228, 229, 1056,
	1057, 230, 456, 457, 458, 1058, 231, 459, 1059, 1044,
	1060, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 1061, 241, 0, 242, 243, 244, 1062, 921, 245,
	246, 1063, 1064, 1066, 1065, 1067, 1068, 1069, 247, 248,
	249, 250, 251, 252, 460, 461, 1070, 253, 1071, 255,
	254, 1072, 256, 1073, 1074, 257, 258, 259, 1075, 260,
	1076, 261, 262, 1077, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 1078, 209, 1079, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	1080, 279, 1081, 1082, 922, 280, 281, 1083, 282, 466,
	1084, 467, 283, 1085, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 924, 1086, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 1087, 923, 294, 471, 296,
	295, 297, 298, 299, 472, 1088, 473, 1089, 301, 925,
	926, 302, 303, 304, 927, 305, 306, 0, 0, 307,
	308, 309, 310, 1090, 312, 311, 1091, 313, 475, 928,
	314, 315, 929, 1092, 316, 317, 1093, 1094, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 930,
	328, 329, 331, 330, 1095, 211, 931, 1096, 476, 477,
	332, 333, 1097, 334, 335, 336, 1098, 1099, 338, 339,
	1100, 1101, 340, 478, 932, 341, 933, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 1102, 349, 480, 350,
	481, 351, 1103, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 1104, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 1105,
	374, 934, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 1106, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 1107, 401,
	381, 382, 402, 935, 403, 484, 404, 405, 1108, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 1109, 417, 418, 416, 1110, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 1111, 486, 487, 488, 489,
	1112, 1113, 426, 427, 490, 428, 491, 1114, 429, 430,
	431, 0, 432, 433, 1115, 1116, 434, 435, 436, 437,
	439, 1117, 440, 1118, 438, 441, 442, 443, 492, 493,
	494, 1119, 445, 444, 495, 1120, 1121, 1122, 1123, 446,
	447, 496, 448, 449, 450, 1039, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2590, 0, 212, 213, 214, 215, 216, 1046, 217, 1047,
	1048, 1049, 1050, 451, 1051, 1052, 1053, 1054, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 1055, 224,
	225, 226, 227, 228, 229, 1056, 1057, 230, 456, 457,
	458, 1058, 231, 459, 1059, 1044, 1060, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 1061, 241, 0,
	242, 243, 244, 1062, 921, 245, 246, 1063, 1064, 1066,
	1065, 1067, 1068, 1069, 247, 248, 249, 250, 251, 252,
	460, 461, 1070, 253, 1071, 255, 254, 1072, 256, 1073,
	1074, 257, 258, 259, 1075, 260, 1076, 261, 262, 1077,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 1078, 209, 1079, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 1080, 279, 1081, 1082,
	922, 280, 281, 1083, 282, 466, 1084, 467, 283, 1085,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	924, 1086, 474, 292, 0, 0, 0, 210, 291, 293,
	300, 1087, 923, 294, 471, 296, 295, 297, 298, 299,
	472, 1088, 473, 1089, 301, 925, 926, 302, 303, 304,
	927, 305, 306, 0, 0, 307, 308, 309, 310, 1090,
	312, 311, 1091, 313, 475, 928, 314, 315, 929, 1092,
	316, 317, 1093, 1094, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 930, 328, 329, 331, 330,
	1095, 211, 931, 1096, 476, 477, 332, 333, 1097, 334,
	335, 336, 1098, 1099, 338, 339, 1100, 1101, 340, 478,
	932, 341, 933, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 1102, 349, 480, 350, 481, 351, 1103, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	1104, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 1105, 374, 934, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 1106, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 1107, 401, 381, 382, 402, 935,
	403, 484, 404, 405, 1108, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 1109, 417, 418,
	416, 1110, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 1111, 486, 487, 488, 489, 1112, 1113, 426, 427,
	490, 428, 491, 1114, 429, 430, 431, 0, 432, 433,
	1115, 1116, 434, 435, 436, 437, 439, 1117, 440, 1118,
	438, 441, 442, 443, 492, 493, 494, 1119, 445, 444,
	495, 1120, 1121, 1122, 1123, 446, 447, 496, 448, 449,
	450, 1039, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1993, 0, 212, 213,
	214, 215, 216, 1046, 217, 1047, 1048, 1049, 1050, 451,
	1051, 1052, 1053, 1054, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 1055, 224, 225, 226, 227, 228,
	229, 1056, 1057, 230, 456, 457, 458, 1058, 231, 459,
	1059, 1044, 1060, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 1061, 241, 0, 242, 243, 244, 1062,
	921, 245, 246, 1063, 1064, 1066, 1065, 1067, 1068, 1069,
	247, 248, 249, 250, 251, 252, 460, 461, 1070, 253,
	1071, 255, 254, 1072, 256, 1073, 1074, 257, 258, 259,
	1075, 260, 1076, 261, 262, 1077, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 1078, 209, 1079,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 1080, 279, 1081, 1082, 922, 280, 281, 1083,
	282, 466, 1084, 467, 283, 1085, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 924, 1086, 474, 292,
	0, 0, 0, 210, 291, 293, 300, 1087, 923, 294,
	471, 296, 295, 297, 298, 299, 472, 1088, 473, 1089,
	301, 925, 926, 302, 303, 304, 927, 305, 306, 0,
	0, 307, 308, 309, 310, 1090, 312, 311, 1091, 313,
	475, 928, 314, 315, 929, 1092, 316, 317, 1093, 1094,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 930, 328, 329, 331, 330, 1095, 211, 931, 1096,
	476, 477, 332, 333, 1097, 334, 335, 336, 1098, 1099,
	338, 339, 1100, 1101, 340, 478, 932, 341, 933, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 1102, 349,
	480, 350, 481, 351, 1103, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 1104, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 1105, 374, 934, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 1106,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	1107, 401, 381, 382, 402, 935, 403, 484, 404, 405,
	1108, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 1109, 417, 418, 416, 1110, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 1111, 486, 487,
	488, 489, 1112, 1113, 426, 427, 490, 428, 491, 1114,
	429, 430, 431, 0, 432, 433, 1115, 1116, 434, 435,
	436, 437, 439, 1117, 440, 1118, 438, 441, 442, 443,
	492, 493, 494, 1119, 445, 444, 495, 1120, 1121, 1122,
	1123, 446, 447, 496, 448, 449, 450, 1147, 0, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1734, 0, 0, 0, 212, 213, 214, 215,
	216, 1046, 217, 1047, 1048, 1049, 1050, 451, 1051, 1052,
	1053, 1054, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 1055, 224, 225, 226, 227, 228, 229, 1056,
	1057, 230, 456, 457, 458, 1058, 231, 459, 1059, 1044,
	1060, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 1061, 241, 0, 242, 243, 244, 1062, 921, 245,
	246, 1063, 1064, 1066, 1065, 1067, 1068, 1069, 247, 248,
	249, 250, 251, 252, 460, 461, 1070, 253, 1071, 255,
	254, 1072, 256, 1073, 1074, 257, 258, 259, 1075, 260,
	1076, 261, 262, 1077, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 1078, 209, 1079, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	1080, 279, 1081, 1082, 922, 280, 281, 1083, 282, 466,
	1084, 467, 283, 1085, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 924, 1086, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 1087, 923, 294, 471, 296,
	295, 297, 298, 299, 472, 1088, 473, 1089, 301, 925,
	926, 302, 303, 304, 927, 305, 306, 0, 0, 307,
	308, 309, 310, 1090, 312, 311, 1091, 313, 475, 928,
	314, 315, 929, 1092, 316, 317, 1093, 1094, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 930,
	328, 329, 331, 330, 1095, 211, 931, 1096, 476, 477,
	332, 333, 1097, 334, 335, 336, 1098, 1099, 338, 339,
	1100, 1101, 340, 478, 932, 341, 933, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 1102, 349, 480, 350,
	481, 351, 1103, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 1104, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 1105,
	374, 934, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 1106, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 1107, 401,
	381, 382, 402, 935, 403, 484, 404, 405, 1108, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 1109, 417, 418, 416, 1110, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 1111, 486, 487, 488, 489,
	1112, 1113, 426, 427, 490, 428, 491, 1114, 429, 430,
	431, 0, 432, 433, 1115, 1116, 434, 435, 436, 437,
	439, 1117, 440, 1118, 438, 441, 442, 443, 492, 493,
	494, 1119, 445, 444, 495, 1120, 1121, 1122, 1123, 446,
	447, 496, 448, 449, 450, 1036, 0, 1039, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 1046,
	217, 1047, 1048, 1049, 1050, 451, 1051, 1052, 1053, 1054,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	1055, 224, 225, 226, 227, 228, 229, 1056, 1057, 230,
	456, 457, 458, 1058, 231, 459, 1059, 1044, 1060, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 1061,
	241, 0, 242, 243, 244, 1062, 921, 245, 246, 1063,
	1064, 1066, 1065, 1067, 1068, 1069, 247, 248, 249, 250,
	251, 252, 460, 461, 1070, 253, 1071, 255, 254, 1072,
	256, 1073, 1074, 257, 258, 259, 1075, 260, 1076, 261,
	262, 1077, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 1078, 209, 1079, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 1080, 279,
	1081, 1082, 922, 280, 281, 1083, 282, 466, 1084, 467,
	283, 1085, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 924, 1086, 474, 292, 0, 0, 0, 210,
	291, 293, 300, 1087, 923, 294, 471, 296, 295, 297,
	298, 299, 472, 1088, 473, 1089, 301, 925, 926, 302,
	303, 304, 927, 305, 306, 0, 0, 307, 308, 309,
	310, 1090, 312, 311, 1091, 313, 475, 928, 314, 315,
	929, 1092, 316, 317, 1093, 1094, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 930, 328, 329,
	331, 330, 1095, 211, 931, 1096, 476, 477, 332, 333,
	1097, 334, 335, 336, 1098, 1099, 338, 339, 1100, 1101,
	340, 478, 932, 341, 933, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 1102, 349, 480, 350, 481, 351,
	1103, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 1104, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 1105, 374, 934,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 1106, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 1107, 401, 381, 382,
	402, 935, 403, 484, 404, 405, 1108, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 1109,
	417, 418, 416, 1110, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 1111, 486, 487, 488, 489, 1112, 1113,
	426, 427, 490, 428, 491, 1114, 429, 430, 431, 0,
	432, 433, 1115, 1116, 434, 435, 436, 437, 439, 1117,
	440, 1118, 438, 441, 442, 443, 492, 493, 494, 1119,
	445, 444, 495, 1120, 1121, 1122, 1123, 446, 447, 496,
	448, 449, 450, 1039, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 1046, 217, 1047, 1048, 1049,
	1050, 451, 1051, 1052, 1053, 1054, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 1055, 224, 225, 226,
	227, 228, 229, 1056, 1057, 230, 456, 457, 458, 1058,
	231, 459, 1059, 1044, 1060, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 1061, 241, 0, 242, 243,
	244, 1062, 921, 245, 246, 1063, 1064, 1066, 1065, 1067,
	1068, 1069, 247, 248, 249, 250, 251, 252, 460, 461,
	1070, 253, 1071, 255, 254, 1072, 256, 1073, 1074, 257,
	258, 259, 1075, 260, 1076, 261, 262, 1077, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 1078,
	209, 1079, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 1080, 279, 1081, 1082, 922, 280,
	281, 1083, 282, 466, 1084, 467, 283, 1085, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 924, 1086,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 1087,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 1088,
	473, 1089, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 1090, 312, 311,
	1091, 313, 475, 928, 314, 315, 929, 1092, 316, 317,
	1093, 1094, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 1095, 211,
	931, 1096, 476, 477, 332, 333, 1097, 334, 335, 336,
	1098, 1099, 338, 339, 1100, 1101, 340, 478, 932, 341,
	933, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	1102, 349, 480, 350, 481, 351, 1103, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 1104, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 1105, 374, 934, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 1106, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 1107, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 1108, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 1109, 417, 418, 416, 1110,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 1111,
	486, 487, 488, 489, 1112, 1113, 426, 427, 490, 428,
	491, 1114, 429, 430, 431, 0, 432, 433, 1115, 1116,
	434, 435, 436, 437, 439, 1117, 440, 1118, 438, 441,
	442, 443, 492, 493, 494, 1119, 445, 444, 495, 1120,
	1121, 1122, 1123, 446, 447, 496, 448, 449, 450, 1969,
	0, 863, 820, 821, 822, 818, 819, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 1966, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 452, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 252, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 1967, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 432, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	492, 890, 937, 1965, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 807, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 1968, 0, 0, 0, 0, 0, 0, 833,
	1964, 0, 0, 796, 831, 863, 820, 821, 822, 818,
	819, 832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 912, 837, 0, 0, 0, 218, 219,
	220, 452, 878, 857, 889, 847, 888, 887, 0, 224,
	849, 848, 227, 228, 229, 839, 911, 230, 947, 948,
	458, 0, 231, 918, 0, 901, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 904, 902, 903,
	908, 906, 905, 907, 247, 248, 249, 250, 892, 252,
	885, 884, 809, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 883, 259, 0, 260, 0, 261, 262, 0,
	815, 263, 264, 266, 269, 265, 270, 271, 272, 938,
	939, 828, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 882, 880, 881, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 945, 0, 838, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 913, 914, 917,
	924, 0, 915, 859, 0, 0, 0, 210, 291, 293,
	300, 0, 923, 294, 871, 862, 873, 875, 876, 877,
	872, 0, 864, 0, 301, 925, 926, 302, 303, 304,
	927, 897, 898, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 946, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 851, 325, 930, 328, 329, 331, 330,
	806, 211, 931, 829, 916, 886, 332, 333, 0, 860,
	335, 861, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 940, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 941, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 879, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 816, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 175, 397, 398, 852, 853, 855, 856,
	392, 396, 399, 400, 909, 401, 381, 382, 402, 935,
	403, 874, 854, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 920, 410, 411, 412, 942, 0, 417, 418,
	416, 177, 419, 420, 421, 422, 423, 267, 424, 268,
	850, 0, 893, 894, 895, 896, 0, 0, 426, 427,
	943, 428, 944, 827, 429, 430, 431, 0, 432, 433,
	0, 810, 434, 435, 436, 437, 439, 910, 440, 0,
	858, 441, 442, 443, 1284, 890, 937, 0, 445, 444,
	495, 0, 0, 0, 169, 446, 447, 496, 448, 449,
	450, 807, 170, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 803, 804, 863, 820, 821, 822,
	818, 819, 832, 1473, 1471, 0, 0, 0, 831, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 452, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	252, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 175, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 177, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 432,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 1284, 890, 937, 0, 445,
	444, 495, 0, 0, 0, 169, 446, 447, 496, 448,
	449, 450, 807, 170, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 863, 820, 821,
	822, 818, 819, 832, 1473, 2358, 0, 0, 0, 831,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 912, 837, 0, 0, 0,
	218, 219, 220, 452, 878, 857, 889, 847, 888, 887,
	0, 224, 849, 848, 227, 228, 229, 839, 911, 230,
	947, 948, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	892, 252, 885, 884, 809, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 883, 259, 0, 260, 0, 261,
	262, 0, 815, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 828, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 882, 880, 881, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 838,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 859, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 871, 862, 873, 875,
	876, 877, 872, 0, 864, 0, 301, 925, 926, 302,
	303, 304, 927, 897, 898, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 851, 325, 930, 328, 329,
	331, 330, 806, 211, 931, 829, 916, 886, 332, 333,
	0, 860, 335, 861, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 879,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 816, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 175, 397, 398, 852, 853,
	855, 856, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 874, 854, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 920, 410, 411, 412, 942, 0,
	417, 418, 416, 177, 419, 420, 421, 422, 423, 267,
	424, 268, 850, 0, 893, 894, 895, 896, 0, 0,
	426, 427, 943, 428, 944, 827, 429, 430, 431, 0,
	432, 433, 0, 810, 434, 435, 436, 437, 439, 910,
	440, 0, 858, 441, 442, 443, 1284, 890, 937, 0,
	445, 444, 495, 0, 0, 0, 169, 446, 447, 496,
	448, 449, 450, 807, 170, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 803, 804, 863, 820,
	821, 822, 818, 819, 832, 1473, 1471, 0, 0, 0,
	831, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 912, 837, 0, 0,
	0, 218, 219, 220, 452, 878, 857, 889, 847, 888,
	887, 2053, 224, 849, 848, 227, 228, 229, 839, 911,
	230, 947, 948, 458, 0, 231, 918, 0, 901, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	904, 902, 903, 908, 906, 905, 907, 247, 248, 249,
	250, 892, 252, 885, 884, 809, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 883, 259, 0, 260, 0,
	261, 262, 0, 815, 263, 264, 266, 269, 265, 270,
	271, 272, 938, 939, 828, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 882, 880, 881, 0, 278, 0,
	279, 0, 2058, 922, 280, 281, 0, 282, 945, 0,
	838, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	913, 914, 917, 924, 0, 915, 859, 0, 0, 0,
	210, 291, 293, 300, 0, 923, 294, 871, 862, 873,
	875, 876, 877, 872, 0, 864, 0, 301, 925, 926,
	302, 303, 304, 927, 897, 898, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 2054, 313, 946, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 851, 325, 930, 328,
	329, 331, 330, 806, 211, 931, 829, 916, 886, 332,
	333, 0, 860, 335, 861, 0, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 940, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 941, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	879, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 816, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 852,
	853, 855, 856, 392, 396, 399, 400, 909, 401, 381,
	382, 402, 935, 403, 874, 854, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 920, 410, 411, 412, 942,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 850, 0, 893, 894, 895, 896, 0,
	2055, 426, 427, 943, 428, 944, 827, 429, 430, 431,
	0, 432, 433, 0, 810, 434, 435, 436, 437, 439,
	910, 440, 0, 858, 441, 442, 443, 492, 890, 937,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 807, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 803, 804, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	799, 831, 863, 820, 821, 822, 818, 819, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	912, 837, 0, 0, 0, 218, 219, 220, 452, 878,
	857, 889, 847, 888, 887, 0, 224, 849, 848, 227,
	228, 229, 839, 911, 230, 947, 948, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 892, 252, 885, 884, 809,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 883,
	259, 0, 260, 0, 261, 262, 0, 815, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 828, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 882, 880,
	881, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 838, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	859, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 871, 862, 873, 875, 876, 877, 872, 0, 864,
	0, 301, 925, 926, 302, 303, 304, 927, 897, 898,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	851, 325, 930, 328, 329, 331, 330, 806, 211, 931,
	829, 916, 886, 332, 333, 0, 860, 335, 861, 811,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 879, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 816,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 852, 853, 855, 856, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 874, 854,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 920,
	410, 411, 412, 942, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 850, 0, 893,
	894, 895, 896, 0, 0, 426, 427, 943, 428, 944,
	827, 429, 430, 431, 0, 432, 433, 0, 810, 434,
	435, 436, 437, 439, 910, 440, 0, 858, 441, 442,
	443, 492, 890, 937, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 807, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 803, 804, 863, 820, 821, 822, 818, 819, 832,
	833, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 912, 837, 0, 0, 0, 218, 219, 220, 452,
	878, 857, 889, 847, 888, 887, 0, 224, 849, 848,
	227, 228, 229, 839, 911, 230, 947, 948, 458, 0,
	231, 918, 0, 901, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 3263,
	244, 0, 921, 245, 246, 904, 902, 903, 908, 906,
	905, 907, 247, 248, 249, 250, 892, 252, 885, 884,
	809, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	883, 259, 0, 260, 0, 261, 262, 0, 815, 263,
	264, 266, 269, 265, 270, 271, 272, 938, 939, 828,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 882,
	880, 881, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 945, 0, 838, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 913, 914, 917, 924, 0,
	915, 859, 0, 0, 0, 210, 291, 293, 300, 0,
	923, 294, 871, 862, 873, 875, 876, 877, 872, 0,
	864, 0, 301, 925, 926, 302, 303, 304, 927, 897,
	898, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 946, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 851, 325, 930, 328, 329, 331, 330, 806, 211,
	931, 829, 916, 886, 332, 333, 0, 860, 335, 861,
	811, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 940, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 941, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 879, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	816, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 852, 853, 855, 856, 392, 396,
	399, 400, 909, 401, 381, 382, 402, 935, 403, 874,
	854, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	920, 410, 411, 412, 942, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 850, 0,
	893, 894, 895, 896, 0, 0, 426, 427, 943, 428,
	944, 827, 429, 430, 431, 0, 432, 433, 0, 810,
	434, 435, 436, 437, 439, 910, 440, 0, 858, 441,
	442, 443, 492, 890, 937, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 807,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 0, 803, 804, 863, 820, 821, 822, 818, 819,
	832, 833, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 912, 837, 0, 0, 0, 218, 219, 220,
	452, 878, 857, 889, 847, 888, 887, 0, 224, 849,
	848, 227, 228, 229, 839, 911, 230, 947, 948, 458,
	0, 231, 918, 0, 901, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	3136, 244, 0, 921, 245, 246, 904, 902, 903, 908,
	906, 905, 907, 247, 248, 249, 250, 892, 252, 885,
	884, 809, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 883, 259, 0, 260, 0, 261, 262, 0, 815,
	263, 264, 266, 269, 265, 270, 271, 272, 938, 939,
	828, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	882, 880, 881, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 945, 0, 838, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 913, 914, 917, 924,
	0, 915, 859, 0, 0, 0, 210, 291, 293, 300,
	0, 923, 294, 871, 862, 873, 875, 876, 877, 872,
	0, 864, 0, 301, 925, 926, 302, 303, 304, 927,
	897, 898, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 946, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 851, 325, 930, 328, 329, 331, 330, 806,
	211, 931, 829, 916, 886, 332, 333, 0, 860, 335,
	861, 811, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 940, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 941, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 879, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 816, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 852, 853, 855, 856, 392,
	396, 399, 400, 909, 401, 381, 382, 402, 935, 403,
	874, 854, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 920, 410, 411, 412, 942, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 850,
	0, 893, 894, 895, 896, 0, 0, 426, 427, 943,
	428, 944, 827, 429, 430, 431, 0, 432, 433, 0,
	810, 434, 435, 436, 437, 439, 910, 440, 0, 858,
	441, 442, 443, 492, 890, 937, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	807, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 803, 804, 863, 820, 821, 822, 818,
	819, 832, 833, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 912, 837, 0, 0, 0, 218, 219,
	220, 452, 878, 857, 889, 847, 888, 887, 0, 224,
	849, 848, 227, 228, 229, 839, 911, 230, 947, 948,
	458, 0, 231, 918, 0, 901, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 904, 902, 903,
	908, 906, 905, 907, 247, 248, 249, 250, 892, 252,
	885, 884, 809, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 883, 259, 0, 260, 0, 261, 262, 0,
	815, 263, 264, 266, 269, 265, 270, 271, 272, 938,
	939, 828, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 882, 880, 881, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 945, 0, 838, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 913, 914, 917,
	924, 0, 915, 859, 0, 0, 0, 210, 291, 293,
	300, 0, 923, 294, 871, 862, 873, 875, 876, 877,
	872, 0, 864, 0, 301, 925, 926, 302, 303, 304,
	927, 897, 898, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 946, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 851, 325, 930, 328, 329, 331, 330,
	806, 2887, 931, 829, 916, 886, 332, 333, 0, 860,
	335, 861, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 940, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 941, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 879, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 816, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 852, 853, 855, 856,
	392, 396, 399, 400, 909, 401, 381, 382, 402, 935,
	403, 874, 854, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 920, 410, 411, 412, 942, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	850, 0, 893, 894, 895, 896, 0, 0, 426, 427,
	943, 428, 944, 827, 429, 430, 431, 0, 432, 433,
	0, 810, 434, 435, 436, 437, 439, 910, 440, 0,
	858, 441, 442, 443, 492, 890, 937, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 807, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 803, 804, 1533, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 831, 863,
	820, 821, 822, 818, 819, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 912, 837, 0,
	0, 0, 218, 219, 220, 452, 878, 857, 889, 847,
	888, 887, 0, 224, 849, 848, 227, 228, 229, 839,
	911, 230, 947, 948, 458, 0, 231, 918, 0, 901,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 904, 902, 903, 908, 906, 905, 907, 247, 248,
	249, 250, 892, 252, 885, 884, 809, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 883, 259, 0, 260,
	0, 261, 262, 0, 815, 263, 264, 266, 269, 265,
	270, 271, 272, 938, 939, 828, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 882, 880, 881, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 945,
	0, 838, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 913, 914, 917, 924, 0, 915, 859, 0, 0,
	0, 210, 291, 293, 300, 0, 923, 294, 871, 862,
	873, 875, 876, 877, 872, 0, 864, 0, 301, 925,
	926, 302, 303, 304, 927, 897, 898, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 946, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 851, 325, 930,
	328, 329, 331, 330, 806, 211, 931, 829, 916, 886,
	332, 333, 0, 860, 335, 861, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 940, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 941, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 879, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 816, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	852, 853, 855, 856, 392, 396, 399, 400, 909, 401,
	381, 382, 402, 935, 403, 874, 854, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 920, 410, 411, 412,
	942, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 850, 0, 893, 894, 895, 896,
	0, 0, 426, 427, 943, 428, 944, 827, 429, 430,
	431, 0, 432, 433, 0, 810, 434, 435, 436, 437,
	439, 910, 440, 0, 858, 441, 442, 443, 492, 890,
	937, 2703, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 807, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 803, 804,
	863, 820, 821, 822, 818, 819, 832, 833, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 912, 837,
	0, 0, 0, 218, 219, 220, 452, 878, 857, 889,
	847, 888, 887, 0, 224, 849, 848, 227, 228, 229,
	839, 911, 230, 947, 948, 458, 0, 231, 918, 0,
	901, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 904, 902, 903, 908, 906, 905, 907, 247,
	248, 249, 250, 892, 252, 885, 884, 809, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 883, 259, 0,
	260, 0, 261, 262, 0, 815, 263, 264, 266, 269,
	265, 270, 271, 272, 938, 939, 828, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 882, 880, 881, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	945, 0, 838, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 913, 914, 917, 924, 0, 915, 859, 0,
	0, 0, 1883, 291, 293, 300, 0, 923, 294, 871,
	862, 873, 875, 876, 877, 872, 0, 864, 0, 301,
	925, 926, 302, 303, 304, 927, 897, 898, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 946,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 851, 325,
	930, 328, 329, 331, 330, 806, 211, 931, 829, 916,
	886, 332, 333, 0, 860, 335, 861, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 940, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 941,
	350, 481, 351, 1882, 352, 0, 353, 354, 355, 356,
	357, 358, 879, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 816, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 852, 853, 855, 856, 392, 396, 399, 400, 909,
	401, 381, 382, 402, 935, 403, 874, 854, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 920, 410, 411,
	412, 942, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 850, 0, 893, 894, 895,
	896, 0, 0, 426, 427, 943, 428, 944, 827, 429,
	430, 431, 0, 432, 433, 0, 810, 434, 435, 436,
	437, 439, 910, 440, 0, 858, 441, 442, 443, 492,
	890, 937, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 807, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 803,
	804, 863, 820, 821, 822, 818, 819, 832, 833, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 452, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 252, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 811, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 432, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	492, 890, 937, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 807, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 863, 820, 821, 822, 818, 819, 832, 833,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	912, 837, 0, 0, 0, 218, 219, 220, 452, 878,
	857, 889, 847, 888, 887, 0, 224, 849, 848, 227,
	228, 229, 839, 911, 230, 947, 948, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 892, 252, 885, 884, 809,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 883,
	259, 0, 260, 0, 261, 262, 0, 815, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 828, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 882, 880,
	881, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 838, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	859, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 871, 862, 873, 875, 876, 877, 872, 0, 864,
	0, 301, 925, 926, 302, 303, 304, 927, 897, 898,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	851, 325, 930, 328, 329, 331, 330, 806, 211, 931,
	829, 916, 886, 332, 333, 0, 860, 335, 861, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 879, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 816,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 852, 853, 855, 856, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 874, 854,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 920,
	410, 411, 412, 942, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 850, 0, 893,
	894, 895, 896, 0, 0, 426, 427, 943, 428, 944,
	827, 429, 430, 431, 0, 432, 433, 0, 810, 434,
	435, 436, 437, 439, 910, 440, 0, 858, 441, 442,
	443, 492, 890, 937, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 807, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 803, 804, 1533, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 831, 863, 820, 821, 822,
	818, 819, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 452, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	252, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	2058, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 432,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 492, 890, 937, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 807, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 863, 820, 821,
	822, 818, 819, 832, 833, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 912, 837, 0, 0, 0,
	218, 219, 220, 452, 878, 857, 889, 847, 888, 887,
	0, 224, 849, 848, 227, 228, 229, 839, 911, 230,
	947, 948, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	892, 252, 885, 884, 809, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 883, 259, 0, 260, 0, 261,
	262, 0, 815, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 828, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 882, 880, 881, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 838,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 859, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 871, 862, 873, 875,
	876, 877, 872, 0, 864, 0, 301, 925, 926, 302,
	303, 304, 927, 897, 898, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 851, 325, 930, 328, 329,
	331, 330, 806, 211, 931, 829, 916, 886, 332, 333,
	0, 860, 335, 861, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 879,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 816, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 852, 853,
	855, 856, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 874, 854, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 920, 410, 411, 412, 942, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 850, 0, 893, 894, 895, 896, 0, 0,
	426, 427, 943, 428, 944, 827, 429, 430, 431, 0,
	432, 433, 0, 810, 434, 435, 436, 437, 439, 910,
	440, 0, 858, 441, 442, 443, 492, 890, 937, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 807, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 803, 804, 0, 0,
	0, 0, 0, 0, 0, 833, 1471, 0, 0, 2063,
	831, 863, 820, 821, 822, 818, 819, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 452, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 252, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 432, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	492, 890, 937, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 807, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 2061, 831, 863, 820, 821, 822, 818,
	819, 832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 912, 837, 0, 0, 0, 218, 219,
	220, 452, 878, 857, 889, 847, 888, 887, 0, 224,
	849, 848, 227, 228, 229, 839, 911, 230, 947, 948,
	458, 0, 231, 918, 0, 901, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 904, 902, 903,
	908, 906, 905, 907, 247, 248, 249, 250, 892, 252,
	885, 884, 809, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 883, 259, 0, 260, 0, 261, 262, 0,
	815, 263, 264, 266, 269, 265, 270, 271, 272, 938,
	939, 828, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 882, 880, 881, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 945, 0, 838, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 913, 914, 917,
	924, 0, 915, 859, 0, 0, 0, 210, 291, 293,
	300, 0, 923, 294, 871, 862, 873, 875, 876, 877,
	872, 0, 864, 0, 301, 925, 926, 302, 303, 304,
	927, 897, 898, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 946, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 851, 325, 930, 328, 329, 331, 330,
	806, 211, 931, 829, 916, 886, 332, 333, 0, 860,
	335, 861, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 940, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 941, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 879, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 816, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 852, 853, 855, 856,
	392, 396, 399, 400, 909, 401, 381, 382, 402, 935,
	403, 874, 854, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 920, 410, 411, 412, 942, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	850, 0, 893, 894, 895, 896, 0, 0, 426, 427,
	943, 428, 944, 827, 429, 430, 431, 0, 432, 433,
	0, 810, 434, 435, 436, 437, 439, 910, 440, 0,
	858, 441, 442, 443, 492, 890, 937, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 807, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 803, 804, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 2049, 831, 863,
	820, 821, 822, 818, 819, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 912, 837, 0,
	0, 0, 218, 219, 220, 452, 878, 857, 889, 847,
	888, 887, 0, 224, 849, 848, 227, 228, 229, 839,
	911, 230, 947, 948, 458, 0, 231, 918, 0, 901,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 904, 902, 903, 908, 906, 905, 907, 247, 248,
	249, 250, 892, 252, 885, 884, 809, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 883, 259, 0, 260,
	0, 261, 262, 0, 815, 263, 264, 266, 269, 265,
	270, 271, 272, 938, 939, 828, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 882, 880, 881, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 945,
	0, 838, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 913, 914, 917, 924, 0, 915, 859, 0, 0,
	0, 210, 291, 293, 300, 0, 923, 294, 871, 862,
	873, 875, 876, 877, 872, 0, 864, 0, 301, 925,
	926, 302, 303, 304, 927, 897, 898, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 946, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 851, 325, 930,
	328, 329, 331, 330, 806, 211, 931, 829, 916, 886,
	332, 333, 0, 860, 335, 861, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 940, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 941, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 879, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 816, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	852, 853, 855, 856, 392, 396, 399, 400, 909, 401,
	381, 382, 402, 935, 403, 874, 854, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 920, 410, 411, 412,
	942, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 850, 0, 893, 894, 895, 896,
	0, 0, 426, 427, 943, 428, 944, 827, 429, 430,
	431, 0, 432, 433, 0, 810, 434, 435, 436, 437,
	439, 910, 440, 0, 858, 441, 442, 443, 492, 890,
	937, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 807, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 803, 804,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 2038, 831, 863, 820, 821, 822, 818, 819, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 912, 837, 0, 0, 0, 218, 219, 220, 452,
	878, 857, 889, 847, 888, 887, 0, 224, 849, 848,
	227, 228, 229, 839, 911, 230, 947, 948, 458, 0,
	231, 918, 0, 901, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 904, 902, 903, 908, 906,
	905, 907, 247, 248, 249, 250, 892, 252, 885, 884,
	809, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	883, 259, 0, 260, 0, 261, 262, 0, 815, 263,
	264, 266, 269, 265, 270, 271, 272, 938, 939, 828,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 882,
	880, 881, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 945, 0, 838, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 913, 914, 917, 924, 0,
	915, 859, 0, 0, 0, 210, 291, 293, 300, 0,
	923, 294, 871, 862, 873, 875, 876, 877, 872, 0,
	864, 0, 301, 925, 926, 302, 303, 304, 927, 897,
	898, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 946, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 851, 325, 930, 328, 329, 331, 330, 806, 211,
	931, 829, 916, 886, 332, 333, 0, 860, 335, 861,
	0, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 940, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 941, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 879, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	816, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 852, 853, 855, 856, 392, 396,
	399, 400, 909, 401, 381, 382, 402, 935, 403, 874,
	854, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	920, 410, 411, 412, 942, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 850, 0,
	893, 894, 895, 896, 0, 0, 426, 427, 943, 428,
	944, 827, 429, 430, 431, 0, 432, 433, 0, 810,
	434, 435, 436, 437, 439, 910, 440, 0, 858, 441,
	442, 443, 492, 890, 937, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 807,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 0, 803, 804, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 2036, 831, 2028, 820, 821,
	822, 818, 819, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 912, 837, 0, 0, 0,
	218, 219, 220, 452, 878, 857, 889, 847, 888, 887,
	0, 224, 849, 848, 227, 228, 229, 839, 911, 230,
	947, 948, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	892, 2031, 885, 884, 809, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 883, 259, 0, 260, 0, 261,
	262, 0, 815, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 828, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 882, 880, 881, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 838,
	283, 0, 284, 285, 2032, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 859, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 871, 862, 873, 875,
	876, 877, 872, 0, 864, 0, 301, 925, 926, 302,
	303, 304, 927, 897, 898, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 2033, 2030, 326, 851, 325, 930, 328, 329,
	331, 330, 806, 211, 931, 829, 916, 886, 332, 333,
	0, 860, 335, 861, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 879,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 816, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 2034, 0, 397, 398, 852, 853,
	855, 856, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 874, 854, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 920, 410, 411, 412, 942, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 850, 0, 893, 894, 895, 896, 0, 0,
	426, 427, 943, 428, 944, 827, 429, 430, 431, 0,
	432, 433, 0, 810, 434, 435, 436, 437, 439, 910,
	440, 0, 858, 441, 442, 443, 492, 890, 937, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 2029, 450, 807, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 803, 804, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 2025,
	831, 2028, 820, 821, 822, 818, 819, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 452, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 2031, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 2032, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 2033, 2030, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 2034, 0,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 432, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	492, 890, 937, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 2029, 450, 807, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 863, 820, 821, 822, 818, 819, 832, 833,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	912, 837, 0, 0, 0, 218, 219, 220, 452, 878,
	857, 889, 847, 888, 887, 0, 224, 849, 848, 227,
	228, 229, 839, 911, 230, 947, 948, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 892, 252, 885, 884, 809,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 883,
	259, 0, 260, 0, 261, 262, 0, 815, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 828, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 882, 880,
	881, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 838, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	859, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 871, 862, 873, 875, 876, 877, 872, 0, 864,
	0, 301, 925, 926, 302, 303, 304, 927, 897, 898,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	851, 325, 930, 328, 329, 331, 330, 806, 211, 931,
	829, 916, 886, 332, 333, 0, 860, 335, 861, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 879, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 816,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 852, 853, 855, 856, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 874, 854,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 920,
	410, 411, 412, 942, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 850, 0, 893,
	894, 895, 896, 0, 0, 426, 427, 943, 428, 944,
	827, 429, 430, 431, 0, 432, 433, 0, 810, 434,
	435, 436, 437, 439, 910, 440, 0, 858, 441, 442,
	443, 492, 890, 937, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 807, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 803, 804, 0, 0, 0, 0, 0, 1479, 0,
	833, 0, 0, 0, 0, 831, 863, 820, 821, 822,
	818, 819, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 1870, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 452, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	252, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 432,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 492, 890, 937, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 807, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 1174, 831,
	863, 820, 821, 822, 818, 819, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 912, 837,
	0, 0, 0, 218, 219, 220, 452, 878, 857, 889,
	847, 888, 887, 0, 224, 849, 848, 227, 228, 229,
	839, 911, 230, 947, 948, 458, 0, 231, 918, 0,
	901, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 904, 902, 903, 908, 906, 905, 907, 247,
	248, 249, 250, 892, 252, 885, 884, 809, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 883, 259, 0,
	260, 0, 261, 262, 0, 815, 263, 264, 266, 269,
	265, 270, 271, 272, 938, 939, 828, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 882, 880, 881, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	945, 0, 838, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1173, 914, 917, 924, 0, 915, 859, 0,
	0, 0, 210, 291, 293, 300, 0, 923, 294, 871,
	862, 873, 875, 876, 877, 872, 0, 864, 0, 301,
	925, 926, 302, 303, 304, 927, 897, 898, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 946,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 851, 325,
	930, 328, 329, 331, 330, 806, 211, 931, 829, 916,
	886, 332, 333, 0, 860, 335, 861, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 940, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 941,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 879, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 816, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 852, 853, 855, 856, 392, 396, 399, 400, 909,
	401, 381, 382, 402, 935, 403, 874, 854, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 920, 410, 411,
	412, 942, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 850, 0, 893, 894, 895,
	896, 0, 0, 426, 427, 943, 428, 944, 827, 429,
	430, 431, 0, 432, 433, 0, 810, 434, 435, 436,
	437, 439, 910, 440, 0, 858, 441, 442, 443, 492,
	890, 937, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 807, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 803,
	804, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 1168, 831, 863, 820, 821, 822, 818, 819,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 912, 837, 0, 0, 0, 218, 219, 220,
	452, 878, 857, 889, 847, 888, 887, 0, 224, 849,
	848, 227, 228, 229, 839, 911, 230, 947, 948, 458,
	0, 231, 918, 0, 901, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 904, 902, 903, 908,
	906, 905, 907, 247, 248, 249, 250, 892, 252, 885,
	884, 809, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 883, 259, 0, 260, 0, 261, 262, 0, 815,
	263, 264, 266, 269, 265, 270, 271, 272, 938, 939,
	828, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	882, 880, 881, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 945, 0, 838, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1167, 914, 917, 924,
	0, 915, 859, 0, 0, 0, 210, 291, 293, 300,
	0, 923, 294, 871, 862, 873, 875, 876, 877, 872,
	0, 864, 0, 301, 925, 926, 302, 303, 304, 927,
	897, 898, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 946, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 851, 325, 930, 328, 329, 331, 330, 806,
	211, 931, 829, 916, 886, 332, 333, 0, 860, 335,
	861, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 940, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 941, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 879, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 816, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 852, 853, 855, 856, 392,
	396, 399, 400, 909, 401, 381, 382, 402, 935, 403,
	874, 854, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 920, 410, 411, 412, 942, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 850,
	0, 893, 894, 895, 896, 0, 0, 426, 427, 943,
	428, 944, 827, 429, 430, 431, 0, 432, 433, 0,
	810, 434, 435, 436, 437, 439, 910, 440, 0, 858,
	441, 442, 443, 492, 890, 937, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	807, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 803, 804, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 1163, 831, 863, 820,
	821, 822, 818, 819, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 912, 837, 0, 0,
	0, 218, 219, 220, 452, 878, 857, 889, 847, 888,
	887, 0, 224, 849, 848, 227, 228, 229, 839, 911,
	230, 947, 948, 458, 0, 231, 918, 0, 901, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	904, 902, 903, 908, 906, 905, 907, 247, 248, 249,
	250, 892, 252, 885, 884, 809, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 883, 259, 0, 260, 0,
	261, 262, 0, 815, 263, 264, 266, 269, 265, 270,
	271, 272, 938, 939, 828, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 882, 880, 881, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 945, 0,
	838, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	913, 914, 917, 924, 0, 915, 859, 0, 0, 0,
	210, 291, 293, 300, 0, 923, 294, 871, 862, 873,
	875, 876, 877, 872, 0, 864, 0, 301, 925, 926,
	302, 303, 304, 927, 897, 898, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 946, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 851, 325, 930, 328,
	329, 331, 330, 806, 211, 931, 829, 916, 886, 332,
	333, 0, 860, 335, 861, 0, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 940, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 941, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	879, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 816, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 852,
	853, 855, 856, 392, 396, 399, 400, 909, 401, 381,
	382, 402, 935, 403, 874, 854, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 920, 410, 411, 412, 942,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 850, 0, 893, 894, 895, 896, 0,
	0, 426, 427, 943, 428, 944, 827, 429, 430, 431,
	0, 432, 433, 0, 810, 434, 435, 436, 437, 439,
	910, 440, 0, 858, 441, 442, 443, 492, 890, 937,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 807, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 803, 804, 863,
	820, 821, 822, 818, 819, 832, 833, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 912, 837, 0,
	0, 0, 218, 219, 220, 452, 878, 857, 889, 847,
	888, 887, 0, 224, 849, 848, 227, 228, 229, 839,
	911, 230, 947, 948, 458, 0, 231, 918, 0, 901,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 904, 902, 903, 908, 906, 905, 907, 247, 248,
	249, 250, 892, 252, 885, 884, 809, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 883, 259, 0, 260,
	0, 261, 262, 0, 815, 263, 264, 266, 269, 265,
	270, 271, 272, 938, 939, 828, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 882, 880, 881, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 945,
	0, 838, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 913, 914, 917, 924, 0, 915, 859, 0, 0,
	0, 210, 291, 293, 300, 0, 923, 294, 871, 862,
	873, 875, 876, 877, 872, 0, 864, 0, 301, 925,
	926, 302, 303, 304, 927, 897, 898, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 946, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 851, 325, 930,
	328, 329, 331, 330, 806, 211, 931, 829, 916, 886,
	332, 333, 0, 860, 335, 861, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 940, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 941, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 879, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 816, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	852, 853, 855, 856, 392, 396, 399, 400, 909, 401,
	381, 382, 402, 935, 403, 874, 854, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 920, 410, 411, 412,
	942, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 850, 0, 893, 894, 895, 896,
	0, 0, 426, 427, 943, 428, 944, 827, 429, 430,
	431, 0, 432, 433, 0, 810, 434, 435, 436, 437,
	439, 910, 440, 0, 858, 441, 442, 443, 492, 890,
	937, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 807, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 803, 804,
	863, 820, 821, 822, 818, 819, 832, 833, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 912, 837,
	0, 0, 0, 218, 219, 220, 452, 878, 857, 889,
	847, 888, 887, 0, 224, 849, 848, 227, 228, 229,
	839, 911, 230, 947, 948, 458, 0, 231, 918, 0,
	901, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 3288, 904, 902, 903, 908, 906, 905, 907, 247,
	248, 249, 250, 892, 252, 885, 884, 809, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 883, 259, 0,
	260, 0, 261, 262, 0, 815, 263, 264, 266, 269,
	265, 270, 271, 272, 938, 939, 828, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 882, 880, 881, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	945, 0, 838, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 913, 914, 917, 924, 0, 915, 859, 0,
	0, 0, 210, 291, 293, 300, 0, 923, 294, 871,
	862, 873, 875, 876, 877, 872, 0, 864, 0, 301,
	925, 926, 302, 303, 304, 927, 897, 898, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 946,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 851, 325,
	930, 328, 329, 331, 330, 806, 211, 931, 829, 916,
	886, 332, 333, 0, 860, 335, 861, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 940, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 941,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 879, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 816, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 852, 853, 855, 856, 392, 396, 399, 400, 909,
	401, 381, 382, 402, 935, 403, 874, 854, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 920, 410, 411,
	412, 942, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 850, 0, 893, 894, 895,
	896, 0, 0, 426, 427, 943, 428, 944, 827, 429,
	430, 431, 0, 3287, 433, 0, 810, 434, 435, 436,
	437, 439, 910, 440, 0, 858, 441, 442, 443, 492,
	890, 937, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 807, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 803,
	804, 863, 820, 821, 822, 818, 819, 832, 833, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 3286, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 3288, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 252, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 3287, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	492, 890, 937, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 807, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 863, 820, 821, 822, 818, 819, 832, 833,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	912, 837, 0, 0, 0, 218, 219, 220, 452, 878,
	857, 889, 847, 888, 887, 0, 224, 849, 848, 227,
	228, 229, 839, 911, 230, 947, 948, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 892, 252, 885, 884, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 883,
	259, 0, 260, 0, 261, 262, 0, 815, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 828, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 882, 880,
	881, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 838, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	859, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 871, 862, 873, 875, 876, 877, 872, 0, 864,
	0, 301, 925, 926, 302, 303, 304, 927, 897, 898,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	851, 325, 930, 328, 329, 331, 330, 0, 211, 931,
	829, 916, 886, 332, 333, 0, 860, 335, 861, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 879, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 816,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 852, 853, 855, 856, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 874, 854,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 920,
	410, 411, 412, 942, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 850, 0, 893,
	894, 895, 896, 0, 0, 426, 427, 943, 428, 944,
	827, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 910, 440, 0, 858, 441, 442,
	443, 492, 890, 937, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 863, 820,
	821, 822, 818, 819, 832, 0, 2046, 0, 0, 0,
	0, 2044, 2045, 0, 0, 212, 213, 214, 215, 216,
	833, 217, 0, 0, 0, 831, 912, 837, 0, 0,
	0, 218, 219, 220, 0, 878, 857, 889, 847, 888,
	887, 0, 224, 849, 848, 227, 228, 229, 839, 911,
	230, 947, 948, 458, 0, 231, 918, 0, 901, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 3288,
	904, 902, 903, 908, 906, 905, 907, 247, 248, 249,
	250, 892, 252, 885, 884, 809, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 883, 259, 0, 260, 0,
	261, 262, 0, 815, 263, 264, 266, 269, 265, 270,
	271, 272, 938, 939, 828, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 882, 880, 881, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 945, 0,
	838, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	913, 914, 917, 0, 0, 915, 859, 0, 0, 0,
	210, 291, 293, 300, 0, 923, 294, 871, 862, 873,
	875, 876, 877, 872, 0, 864, 0, 301, 0, 0,
	302, 303, 304, 927, 897, 898, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 946, 928, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 851, 325, 930, 328,
	329, 331, 330, 806, 211, 0, 829, 916, 886, 332,
	333, 0, 860, 335, 861, 0, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 940, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 941, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	879, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 816, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 852,
	853, 855, 856, 392, 396, 399, 400, 909, 401, 381,
	382, 402, 0, 403, 874, 854, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 920, 410, 411, 412, 942,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 850, 0, 893, 894, 895, 896, 0,
	0, 426, 427, 943, 428, 944, 827, 429, 430, 431,
	0, 3287, 433, 0, 810, 434, 435, 436, 437, 439,
	910, 440, 0, 858, 441, 442, 443, 492, 890, 937,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 796, 0, 984, 0, 803, 804, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 831, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 911, 230, 456, 457,
	458, 0, 231, 918, 0, 901, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 904, 902, 903,
	908, 906, 905, 907, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 938,
	939, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 945, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 913, 914, 917,
	924, 0, 915, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 923, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 925, 926, 302, 303, 304,
	927, 305, 306, 0, 0, 307, 308, 309, 310, 971,
	312, 311, 0, 313, 946, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 930, 328, 329, 331, 330,
	0, 211, 931, 0, 916, 477, 332, 333, 0, 334,
	335, 336, 0, 976, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 940, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 941, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 483, 978, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 175, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 909, 401, 381, 382, 402, 935,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 942, 0, 417, 418,
	416, 177, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	943, 428, 944, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 910, 440, 0,
	438, 441, 442, 443, 1284, 493, 494, 0, 445, 444,
	495, 984, 0, 0, 169, 446, 447, 496, 448, 449,
	450, 0, 170, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 912,
	0, 968, 0, 1558, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 911, 230, 456, 457, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 925, 926, 302, 303, 304, 927, 305, 306, 0,
	0, 307, 308, 309, 310, 971, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 930, 328, 329, 331, 330, 0, 211, 931, 0,
	916, 477, 332, 333, 0, 334, 335, 336, 0, 976,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 483, 978,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 175,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 942, 0, 417, 418, 416, 177, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 943, 428, 944, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 910, 440, 0, 438, 441, 442, 443,
	1284, 493, 494, 0, 445, 444, 495, 0, 0, 0,
	169, 446, 447, 496, 448, 449, 450, 0, 170, 0,
	0, 2465, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 1558,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 912, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 911, 230, 456, 457, 458, 0,
	231, 918, 0, 901, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 904, 902, 903, 908, 906,
	905, 907, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 938, 939, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 945, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 913, 914, 917, 924, 0,
	915, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 971, 312, 311,
	0, 313, 946, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 0, 211,
	931, 0, 916, 477, 332, 333, 0, 334, 335, 336,
	0, 976, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 940, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 941, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	483, 978, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 909, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 942, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 943, 428,
	944, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 910, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 0,
	967, 0, 984, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 968,
	912, 973, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 911, 230, 456, 457, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 925, 926, 302, 303, 304, 927, 305, 306,
	0, 0, 307, 308, 309, 310, 971, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 930, 328, 329, 331, 330, 0, 211, 931,
	0, 916, 477, 332, 333, 0, 334, 335, 336, 0,
	976, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 483,
	978, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 942, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 943, 428, 944,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 910, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 984, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 912, 0, 968, 0,
	973, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 911,
	230, 456, 457, 458, 0, 231, 918, 0, 901, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	904, 902, 903, 908, 906, 905, 907, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 938, 939, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 945, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	913, 914, 917, 924, 0, 915, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 971, 312, 311, 0, 313, 946, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 0, 211, 931, 0, 916, 477, 332,
	333, 0, 334, 335, 336, 0, 976, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 940, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 941, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 483, 978, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 909, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 942,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 943, 428, 944, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	910, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 984, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 912, 0, 968, 0, 973, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 911, 230, 456, 457, 458,
	0, 231, 918, 0, 901, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 904, 902, 903, 908,
	906, 905, 907, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 938, 939,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 945, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 913, 914, 917, 924,
	0, 915, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 923, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 925, 926, 302, 303, 304, 927,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 946, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 930, 328, 329, 331, 330, 0,
	211, 931, 0, 916, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 940, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 941, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 483, 978, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 909, 401, 381, 382, 402, 935, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 942, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 943,
	428, 944, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 910, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	796, 0, 1140, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 1460, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 1044, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 924, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 923,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 925, 926, 302, 303, 304, 927, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 930, 328, 329, 331, 330, 0, 0, 931,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	175, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 935, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 177, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 1284, 493, 494, 0, 445, 444, 495, 1281, 0,
	1140, 169, 446, 447, 496, 448, 449, 450, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	147, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	1044, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 924, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 923, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	925, 926, 302, 303, 304, 927, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	930, 328, 329, 331, 330, 0, 0, 931, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 175, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 935, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 177, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 1284,
	493, 494, 0, 445, 444, 495, 0, 0, 0, 169,
	446, 447, 496, 448, 449, 450, 0, 170, 0, 0,
	0, 0, 1140, 1139, 0, 0, 0, 0, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 1044, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 924, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 923,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 925, 926, 302, 303, 304, 927, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 930, 328, 329, 331, 330, 0, 0, 931,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 935, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 1140, 1139,
	0, 0, 0, 0, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	2655, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 1044, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 924, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 0, 0, 931, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 984, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 912, 0, 0, 0, 1288, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 911, 230, 456, 457, 458,
	0, 231, 918, 0, 901, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 904, 902, 903, 908,
	906, 905, 907, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 938, 939,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 945, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 913, 914, 917, 924,
	0, 915, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 923, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 925, 926, 302, 303, 304, 927,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 946, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 930, 328, 329, 331, 330, 0,
	211, 931, 0, 916, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 940, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 941, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 909, 401, 381, 382, 402, 935, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 942, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 943,
	428, 944, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 910, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	796, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	175, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 177, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 1284, 493, 494, 0, 445, 444, 495, 206, 0,
	0, 169, 446, 447, 496, 448, 449, 450, 0, 170,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	147, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 206, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 1563, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	206, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	2605, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 206, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 2266, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 673, 0, 565, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 2727, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 571, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	570, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	0, 564, 0, 565, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 574, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 571, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 570,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 565, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 574, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 571, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 1837, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 570, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 565, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 574, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 571, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 210,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 211, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 570, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 206,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 574, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 1309, 0, 1140, 1139, 0,
	0, 0, 0, 1137, 0, 0, 0, 0, 0, 0,
	574, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 1044, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	1308, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 924, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 923, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 925, 926, 302,
	303, 304, 927, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 930, 328, 329,
	331, 330, 0, 0, 931, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 1307, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 935, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 1279, 0, 1140, 1139, 0, 0, 0,
	0, 1137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 1044, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1278, 469, 470,
	924, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 923, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 925, 926, 302, 303, 304,
	927, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 930, 328, 329, 331, 330,
	0, 0, 931, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 935,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 1275, 0, 1140, 1139, 0, 0, 0, 0, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 1044, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1274, 469, 470, 924, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 0, 0,
	931, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 1213,
	0, 1140, 1139, 0, 0, 0, 0, 1137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 1044, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1212, 469, 470, 924, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 923, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 925, 926, 302, 303, 304, 927, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 930, 328, 329, 331, 330, 0, 0, 931, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 935, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 1210, 0, 1140,
	1139, 0, 0, 0, 0, 1137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 1044,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1209, 469, 470, 924, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 923, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 925,
	926, 302, 303, 304, 927, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 930,
	328, 329, 331, 330, 0, 0, 931, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 935, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 1133, 0, 1140, 1139, 0,
	0, 0, 0, 1137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 1044, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 1135,
	469, 470, 924, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 923, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 925, 926, 302,
	303, 304, 927, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 930, 328, 329,
	331, 330, 0, 0, 931, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 935, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 1140, 1139, 0, 0, 0, 0, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 1044, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 924, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 0, 0,
	931, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 1140,
	1139, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 1044,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 924, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 923, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 925,
	926, 302, 303, 304, 927, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 930,
	328, 329, 331, 330, 0, 0, 931, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 935, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 1140, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 1044, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 924, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 923, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 925, 926, 302, 303, 304, 927, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 930, 328, 329, 331, 330, 0, 0, 931, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 935, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 206, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 2159,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 2156, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	2301, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 2162, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 2298, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 2300, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 2297, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 2161, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 2299,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 206, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 2159, 231, 459, 0, 0, 2153, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 2156, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 2162, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 2152, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 2161, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 2160, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 1354, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 1357, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 1355,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 1356, 444, 495, 1128,
	0, 206, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1130, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 976,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 1125, 0, 206,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1127, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 976, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 1032, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 1034,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 210,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 211, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 976, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 527, 0, 206, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 526, 216, 516, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 519, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 520, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 521, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 515, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 516, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 519, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 520, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 521, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 206, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 976, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 2230, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 1823,
	0, 206, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 206, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 1762,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 1755,
	0, 206, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1754, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 1750, 0, 206,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1752, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 1268, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 1267,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 210,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 211, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 1265, 0, 206, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1264, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 1262, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1261, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 1258,
	0, 206, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1257, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 1233, 0, 206,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 1150, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 1152,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 210,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 211, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 206,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 206, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 519,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 520,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 521,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 665, 0, 206,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 664, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 504, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 503,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 502,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 206,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 2096,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 206, 2288, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 206, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 2848, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 206, 2288, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 2285, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 206, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 212, 213, 214, 215, 216, 1829, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 1821, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 547,
	0, 206, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 1012, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	548, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 544, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 543, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 1774, 0, 206,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1773, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 547, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 537, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 548, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	544, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 1287, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 543, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 1272, 0, 206, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1271, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 1221, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1220, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 1205,
	0, 206, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 1144, 0, 206,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 547, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 1012, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 548, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	544, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 543, 487, 488, 489, 0, 0,
	426, 1013, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 206,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 212, 213, 214, 215,
	216, 995, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 547, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 537, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	535, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 536, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 548, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 538, 379, 0, 380, 384, 385,
	544, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 539, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 543, 487, 488, 489, 0, 0,
	426, 541, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 531, 0, 206, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 532, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 529, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 523,
	0, 206, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 499, 0, 206,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 206, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 206, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 2550, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 206, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 2548, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 206, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 2537,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 206,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 2248, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 206, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 532, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 206, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 1786, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 0, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 206, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1241, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 206, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 1183,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 206,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 950, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 206, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 0, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 0, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	0, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 0,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 1399, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 1399, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 1398, 0, 0, 0, 0, 1404,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 1434, 1404, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 1425, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1437,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	1398, 0, 2699, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1421, 1422, 1423, 1424, 0, 1398, 0, 2411, 0, 0,
	1404, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 1434, 1404, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1425, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	1437, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 1398, 0, 2410, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 2407, 0,
	0, 1404, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 1434, 1404, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1425, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1437, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 0, 1398, 0, 2406, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 2405,
	0, 0, 1404, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 1434, 1404, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 1425, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1437, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 0, 0, 1398, 0, 1981, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 1421, 1422, 1423, 1424, 3246, 1398, 0,
	0, 0, 0, 1404, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 1421, 1422,
	1423, 1424, 0, 0, 0, 0, 0, 1434, 1404, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 1425, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 1437, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 3242, 1398, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 3176, 1398,
	0, 0, 0, 0, 1404, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 1434, 1404,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 1425, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 1437, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 3175, 1398, 0, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 3083,
	1398, 0, 0, 0, 0, 1404, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 0, 1434,
	1404, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 1425, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 1437, 0, 0, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 3000, 1398, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424,
	2956, 1398, 0, 0, 0, 0, 1404, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 1421, 1422, 1423, 1424, 0, 0, 0, 0, 0,
	1434, 1404, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1425, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 1437, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 2955, 1398, 0, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423,
	1424, 2954, 1398, 0, 0, 0, 0, 1404, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 1421, 1422, 1423, 1424, 0, 0, 0, 0,
	0, 1434, 1404, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 1425,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 1437, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 2920, 1398, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422,
	1423, 1424, 2734, 1398, 0, 0, 0, 0, 1404, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 1434, 1404, 3335, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	1425, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 1437, 0,
	0, 2333, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 2362, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 2334, 0, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421,
	1422, 1423, 1424, 0, 1398, 0, 0, 0, 0, 1404,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 1434, 1404, 0, 2450, 0, 0, 2449,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 1425, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2071, 0, 0, 1420, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1437,
	0, 2070, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	1398, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1421, 1422, 1423, 1424, 0, 1398, 0, 0, 0, 0,
	1404, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 1434, 1404, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1425, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 793, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	1437, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1421, 1422, 1423, 1424, 0, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 1399, 0, 0, 1445, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 1398,
	0, 0, 0, 0, 0, 1434, 0, 1418, 0, 0,
	0, 0, 1419, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 0, 1404,
	0, 0, 0, 1425, 2456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 1437, 0, 0, 0,
	1442, 1443, 0, 1432, 0, 0, 0, 2451, 1413, 1414,
	1399, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 2722, 0,
	1419, 0, 0, 0, 0, 0, 1398, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 1444, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 0, 1404, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 1436, 1446, 1437, 0, 1426, 1427, 1428, 0,
	1432, 0, 0, 0, 0, 0, 0, 1399, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 1398, 0, 0, 0, 0, 0, 0,
	1434, 1418, 0, 0, 0, 0, 0, 1419, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 1433, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 0, 1404, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 1437, 0, 0, 1442, 1443, 0, 1432, 0, 0,
	0, 2404, 1413, 1414, 1399, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	1398, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 1444, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2418, 0, 1435, 0, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 1425, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 0, 0,
	1404, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 1436, 1446, 1437, 0,
	1426, 1427, 1428, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	0, 0, 0, 0, 1434, 1418, 0, 0, 0, 0,
	0, 1419, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 1433, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 1437, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 1399, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 1398, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 1444, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 1425,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 0, 1404, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	1436, 1446, 1437, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 1399, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 0, 1418, 1434, 0,
	0, 0, 0, 0, 1415, 1419, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 1435, 0, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 591, 610, 0, 0, 0, 0, 1404,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 593, 0, 0,
	0, 0, 0, 0, 1420, 1436, 1446, 0, 0, 1426,
	1427, 1428, 703, 616, 734, 0, 0, 0, 0, 594,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 1437,
	0, 0, 0, 0, 0, 0, 710, 0, 1413, 1414,
	0, 0, 0, 0, 0, 595, 0, 0, 708, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 596, 0, 0, 597, 620,
	0, 709, 0, 623, 0, 0, 711, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 717, 718, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 712, 0, 0, 0,
	0, 1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 1425, 733, 0, 0, 0, 0, 0, 619, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 598, 1437, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 714, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 0, 0,
	720, 0, 0, 0, 0, 603, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 0, 0, 0, 604, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 609, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 605, 0, 0,
	618, 0, 617, 0, 0, 0, 0, 606, 0, 0,
	0, 719, 0, 0, 0, 0, 0, 0, 607, 0,
	0, 0, 0, 613, 0, 0, 0, 0, 624, 0,
	621, 0, 0, 0, 611, 0, 0, 0, 730, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 723, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 724, 0, 0, 0, 740, 741, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
}
var sqlPact = [...]int{

	4324, -1000, -1000, -1000, -1000, -1000, -1000, 186, 180, 179,
	177, 176, 175, 174, 173, 171, -1000, -1000, -1000, 162,
	-1000, -1000, 150, -1000, 149, 148, 147, 146, -1000, 145,
	144, -1000, -1000, -1000, -1000, 143, 142, 141, 47775, 1621,
	57125, 48993, 1697, 2091, 42489, 56717, 42081, 56309, 55901, 139,
	-1000, 55493, 138, 137, 133, -1000, -1000, 132, 1655, 34299,
	129, 122, 121, 1949, 120, 119, -1000, 109, -1000, 67698,
	1242, -1000, 108, 107, -1000, 7302, 3780, 48585, 2143, 106,
	105, 33890, 2072, -1000, -1000, 1204, -1000, -1000, 103, 102,
	100, 94, 93, 92, 90, 87, 86, -1000, 85, 82,
	79, 78, 77, 75, 74, 73, 70, 66, 64, 63,
	61, 56, 55, 54, -1000, 67790, 1404, 1261, 1256, 1255,
	1223, 1215, 755, 53, 52, 51, 49, 45, 44, -1000,
	-1000, 43, 42, 20, 14, -1000, 10, 6, 126, 5,
	2, 1, -2, -6, 2044, 2067, 1103, 725, 15998, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61145,
	57527, -7, -88, -11, -1000, 2403, 818, 28578, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 405, -1000,
	-1000, -1000, 279, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1507, 613, -1000,
	-1000, -1000, 55085, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57527, -1000, 1619, -35, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 609, -1000, 1612, 216, 1474, -1000, -1000, -1000,
	-1000, -1000, 57527, -1000, -1000, 2671, 2670, 1506, 608, 54683,
	-1000, 1745, -1000, 693, 18597, -1000, 940, -1000, 18597, 274,
	-1000, -1000, -1000, -1000, -1000, 41673, 12983, 41265, 40857, 38013,
	54275, 12565, 47373, 996, -1000, -1000, -1000, -1000, -1000, -17,
	35505, 57527, -1000, 266, -1000, -1000, -1000, -1000, -1000, -1000,
	24774, 502, 24330, 694, 23886, 508, -1000, -1000, -1000, -1000,
	2669, 2665, 839, 2660, 2329, 60743, 1315, 2659, 1236, 898,
	779, 2655, 2649, 2648, 2644, 2643, 2642, 2640, 1117, 53867,
	2082, 37595, 37177, 47775, 47775, 1887, 53459, -1000, -1000, 1030,
	1024, -1000, -1000, -1000, -1000, 2207, 2090, 2079, 46965, -1000,
	-1000, 2639, 2638, 2636, 2635, 2634, 60341, 1308, 2633, 1812,
	2632, 2631, 2630, 2629, 2628, 2627, 2626, 2625, 2623, -1000,
	46557, 46149, 45741, 45333, 53051, 36759, 36341, -1000, -1000, -1000,
	30206, 5136, 52643, 31044, 47775, -1000, -1000, 25205, -59, -1000,
	-1000, -1000, 2062, -1000, 25205, -59, -1000, 1394, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1385, 1218, 2484, 35923, 1647,
	1043, 2204, 2622, 1760, 2202, 2198, 2194, 2156, 2149, 2618,
	1188, 2617, 1099, 2614, 1143, 2125, 2537, 1473, 40449, 2613,
	2612, 2350, 2113, 2057, -1000, -1000, -1000, -1000, 1100, -1000,
	-1000, -1000, 42891, -1000, -1000, 1446, -1000, -1000, 1446, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 992, 59537, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1179, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1386, -1000, 1440, -1000, -1000, 2606, 2067, 1775,
	2352, 2352, 2352, 2400, 386, 361, -1000, 126, -1000, -1000,
	67304, -1000, -1000, 25205, 25205, 25205, 25205, 25205, 1423, -1000,
	607, -1000, -1000, 635, -1000, 604, 533, -1000, -1000, -1000,
	-1000, -1000, -1000, 603, 2540, -1000, 817, -1000, -1000, -1000,
	-1000, 2466, -1000, 15123, -1000, -1000, -1000, 383, 599, 25205,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 251, 713, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 513, 1313, 512, 512, 512, -1000, -1000, 770,
	-1000, -1000, -1000, 296, 511, 293, 505, -1000, -1000, -1000,
	-1000, 2081, 597, 588, -1000, 587, 585, 584, -1000, -1000,
	-1000, 583, 582, 581, 580, 579, 578, 577, 573, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 766, -1000, 570, 569,
	565, 560, 554, 553, 550, 541, 540, -1000, -1000, -18,
	57527, -1000, 405, -18, -1000, -1000, 536, -1000, 19028, 19028,
	19028, -1000, -1000, 1597, 25205, -1000, 1815, -1000, 4683, -238,
	680, 29390, -1000, 27747, 680, 643, 32264, -1000, 2055, -1000,
	-1000, 534, 249, -1000, -1000, 2039, 57527, 13399, 57527, 47775,
	47775, -1000, -1000, 25205, -1000, -1000, 38429, 35103, 57527, 48177,
	2434, 8812, 35103, 57527, 2080, -1000, -1000, -1000, 57527, -1000,
	25205, -1000, 2433, 1713, -25, -1000, -1000, -1000, -1000, -1000,
	1797, 1866, 878, 1229, -1000, 18597, 2319, -1000, -1000, -1000,
	232, 13399, -1000, 1842, 2246, 1016, -1000, 1646, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1267, 2245, -1000, 1687,
	2244, 1259, -1000, -1000, 741, 2242, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1463, -1000, -1000, 2339, -1000,
	-1000, 2086, 2240, -159, 38429, 35505, -20, -1000, -1000, -37,
	-1000, 12147, 67304, -1000, -1000, -1000, 67304, 702, -1000, -1000,
	2238, -1000, 67304, 687, -1000, -1000, 2229, -1000, -1000, -1000,
	2604, -1000, 2601, 1732, 2597, 2596, 2595, -1000, 1750, 1299,
	2594, -1000, 2591, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	44925, 44517, 776, -1000, 1593, -1000, -1000, 44109, 727, 1726,
	-1000, -1000, 1717, -1000, 773, -1000, 2586, 52235, 1906, 727,
	1716, -1000, -1000, -1000, -1000, -1000, 47775, -1000, 47775, -1000,
	47775, -1000, 1127, -1000, 59939, -238, -1000, -1000, -1000, -1000,
	-1000, 2228, 2584, 2580, 2572, -1000, 57527, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 159, 2226, -1000, -1000,
	159, 2225, -1000, 159, 2224, -1000, 158, 2219, -1000, -1000,
	1516, 2193, -1000, -43, 2189, -1000, -1000, -43, 2182, -1000,
	-41, -1000, -1000, -1000, 818, -1000, 29798, 51827, 38429, 711,
	625, 67304, -1000, 38429, 67304, -1000, -1000, 51419, 43707, -1000,
	-1000, 1059, 1839, -1000, -1000, -1000, -1000, 38429, 38429, -1000,
	51011, -1000, -1000, -1000, 1484, 2351, 47775, -1000, -1000, 2077,
	-1000, 34701, 47775, -1000, 47775, -1000, 47775, -1000, 47775, -1000,
	47775, -1000, -1000, -1000, -1000, -1000, 2211, 1281, 1247, -1000,
	57527, -1000, -1000, 2359, 57527, -1000, -1000, -1000, 1785, -1000,
	-1000, -1000, -1000, 47775, -1000, -1000, -1000, -1000, -1000, -1000,
	2076, -1000, 1219, -1000, 1057, -1000, -1000, 160, -1000, -1000,
	-25, -1000, 59537, -1000, -1000, 2067, 1775, -1000, 57527, -1000,
	-1000, -1000, 2067, 1629, 1854, 23442, 1841, 25205, 126, -1000,
	-1000, 126, 126, 18166, -1000, -1000, 8812, 8812, 13399, 1010,
	25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205,
	25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205,
	25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205, 25205,
	25205, 25205, 25205, 25205, 25205, 1565, 25205, 987, 25205, 25205,
	25205, 25205, 1441, -1000, -1000, 1390, 429, 1410, -1000, 2470,
	2470, 2470, 67471, 67471, 507, 2569, 635, -1000, 25205, -1000,
	-59, 25205, 13817, -1000, 2530, 1021, -1000, -1000, 361, 8179,
	1675, -1000, 359, 14261, -1000, -1000, -1000, 15123, 533, 22998,
	25205, 760, 67304, 11731, 2094, 1943, -1000, 2524, -1000, -1000,
	2466, -1000, -1000, -1000, -1000, 2519, 1007, 1001, 2518, -1000,
	2504, 2500, 532, 679, 678, 601, 574, 467, 25205, 25205,
	25205, 25205, 25205, 25205, 25205, 25205, -1000, 22567, 22123, 21679,
	26498, 21235, 25205, 15554, 20791, 20347, 57527, -18, 2432, 25205,
	124, -1000, 66147, -1000, 124, 124, 531, -45, 67304, 1848,
	1845, 28984, 1762, 1447, 1447, 1447, -1000, 528, 622, 680,
	9219, 49395, 1454, 680, 680, 231, 269, 357, 27341, 1815,
	49395, -1000, -1000, 47775, 527, 13817, 13399, 1084, -46, 228,
	1859, 1858, 1847, -1000, -47, 711, 980, -62, -1000, 4802,
	-51, -1000, 812, -1000, -1000, -1000, -1000, 131, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	765, 515, 514, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 513, 1313, 512, 512, 512,
	-1000, -1000, -1000, 296, 511, 293, 505, -1000, -1000, -1000,
	-1000, -1000, -1000, 2037, -37, 48177, 706, -55, 850, -25,
	-1000, 1446, -1000, 1368, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2539, -1000, 2475,
	-1000, -1000, 2498, -19, -1000, -1000, 13399, -1000, -26, 1263,
	-1000, 40041, 2345, 2344, 2338, 1116, -1000, 1087, 2394, 42891,
	2418, 72, -1000, 2034, -1000, -1000, 692, 1055, 978, 42891,
	1687, -1000, 8812, -1000, 1892, 2391, 1069, 1072, 1069, 1069,
	964, -1000, 42891, 973, 1375, 38429, -1000, 969, -1000, -33,
	2415, 3, -1000, 2029, 961, -1000, -1000, 47775, 13399, 677,
	-20, 35505, 57527, 227, -1000, 25205, -59, 25205, -59, -1000,
	-1000, 2177, -1000, -1000, -1000, 2568, 1289, 1810, -1000, -1000,
	-1000, 504, 1708, 1687, 1707, -1000, -1000, 43299, 2028, 57527,
	1863, -23, 47775, -1000, -1000, 1330, -1000, 2176, 2174, 576,
	2564, -1000, 1592, 1706, -1000, -1000, -1000, 59135, 1028, 2173,
	746, 113, 2431, 113, 33076, -1000, 57527, -1000, 57527, -1000,
	-1000, -1000, 2563, -1000, 47775, -1000, -1000, 47775, -1000, 47775,
	-1000, 47775, -1000, 47775, 47775, -1000, 57527, 38429, 38429, 38429,
	4802, 39237, -65, 356, -1000, 50609, 57527, 801, 39639, -206,
	677, -1000, 677, -1000, 47775, 2073, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 57527, -1000, 57527, -1000, -1000,
	-1000, -1000, -1000, -1000, 1180, -1000, 2071, -1000, 2069, -1000,
	24, -1000, -1000, -1000, -1000, 1383, 47775, 47775, 47775, -1000,
	42891, -1000, -1000, 2067, -1000, -1000, -1000, -1000, -1000, 67304,
	-1000, 484, -1000, -1000, 67304, 1221, 1870, -1000, 1870, -21,
	-1000, 65766, 1834, 47775, -1000, -1000, -1000, -1000, -1000, 691,
	1147, 1147, 947, 947, 947, 947, 2425, 1080, 3351, 267,
	3833, 3833, 3833, 3833, 3833, 3833, 3833, 3833, 1177, 250,
	250, 1177, 1177, 1177, 1177, 1177, 250, 250, 250, 3833,
	3833, 3833, 67471, 465, 6240, 25205, 25205, 958, 1389, 429,
	5852, 25205, 6413, 6413, 6413, 6413, -1000, 1644, -1000, -1000,
	-1000, -1000, 2023, 503, 26498, 26498, -1000, -1000, -1000, -1000,
	14692, 25205, -1000, -1000, -1000, -1000, 19903, -1000, -1000, 65385,
	-245, 355, -131, 25, -1000, 25205, 25205, 25205, 354, -1000,
	353, -1000, -1000, 951, -1000, 941, 928, 927, -1000, 501,
	225, 25205, 57527, -1000, 63099, 621, -119, -1000, -66, 1064,
	-1000, 25205, 214, -1000, 1445, 500, 499, 350, -67, 349,
	689, 686, 348, 347, 346, 25205, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 67157, 62793, 62718, 62412,
	7864, 62337, 62031, -71, 345, -1000, 2011, -131, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 343, -1000, 342, -1000, 66990,
	-131, 341, 3661, -1000, 26498, 26498, 26498, -1000, 340, -1000,
	65841, -1000, 66843, 19472, 19472, 19472, 338, 66676, 25205, -131,
	-72, -1000, -73, -1000, -1000, 498, -77, 746, 19028, 28169,
	13399, -1000, 746, 746, 25205, -1000, 25205, 28984, 28984, 1442,
	1843, 28984, -1000, -1000, -1000, -1000, 49395, 509, 680, 49395,
	-1000, 2466, 1960, -1000, -1000, -1000, 57527, 405, -1000, 49395,
	49395, 13399, 680, -1000, 333, 31450, 25, 197, -1000, -1000,
	13399, 1899, 1899, 1899, -1000, 2005, 57527, 2435, -1000, -1000,
	8812, -1000, 629, 899, -1000, 2496, 497, -1000, 2466, 2466,
	57527, 123, 18597, -1000, 1446, -1000, -1000, 1140, -1000, 1292,
	-1000, -1000, -1000, -1000, 18597, -1000, 1865, 47775, 57527, 57527,
	-1000, -1000, 1696, 58733, 1686, 8812, 57527, -1000, -1000, 494,
	493, 1833, 1828, 57527, 57527, 58331, 57929, 57527, 1335, 25205,
	1546, 1761, -59, -1000, -59, 492, 982, 47775, 47775, 1258,
	-1000, -1000, -1000, -1000, -1000, 47775, -1000, -1000, 2482, -1000,
	1069, -1000, -1000, -1000, 1069, 1687, 1233, 47775, 38429, 738,
	57527, 1332, -59, -1000, -59, 490, 13399, 1501, -1000, 1921,
	-1000, 1645, -1000, -1000, 11315, 67304, -1000, 67304, -1000, 57527,
	-1000, 774, 57527, 39639, 710, 2170, -1000, 1687, 2166, 405,
	-1000, -1000, 32670, -37, 711, 38429, 47775, -23, 38429, 38429,
	38429, 2562, 489, 2560, -1000, 47775, 2159, 1586, 1685, 2199,
	657, 57527, 1456, -1000, 25205, 1293, -1000, 31858, 788, 57527,
	1222, 98, -1000, -1000, -1000, 19, 57527, -1000, 2559, -1000,
	-1000, 159, 159, 159, -1000, 158, 1516, -1000, -43, -43,
	-1000, -1000, 4802, 711, -24, 486, -1000, 671, 670, 30628,
	38429, -78, -1000, -1000, -1000, -1000, -1000, 47775, 57527, 606,
	1897, 57527, -1000, 711, -1000, 728, -1000, 1054, -37, -37,
	-1000, 1137, 1106, 57527, -1000, 13399, 57527, 47775, 13399, 47775,
	-1000, -1000, -1000, -1000, -1000, 1221, -1000, 25205, -1000, -1000,
	-1000, 18166, -1000, -1000, -1000, 47775, -221, 25205, 25205, 5760,
	5381, 25205, 26498, 26498, -1000, 25205, 4977, -1000, -1000, -1000,
	-1000, -1000, 1989, 485, 25205, 8812, 4501, 3586, -1000, 332,
	61956, 1177, -1000, 25205, -1000, 331, 17735, -1000, 66222, 21,
	21, -1000, 2536, 1754, 1419, 1331, 1201, 2481, 10899, -131,
	-87, -1000, -1000, 626, -1000, 2251, -1000, 25205, 66528, 10483,
	-1000, 33482, 758, 1456, -1000, -1000, 2466, 688, -1000, -1000,
	-1000, 688, -1000, 65079, 8812, 8812, 25205, 25205, -1000, 25205,
	25205, 25205, -1000, -1000, 25205, -1000, -1000, 1987, 25205, -1000,
	8812, 8812, 26498, 26498, 26498, 26498, 26498, 26498, 26498, 26498,
	26498, 26498, 26498, 26498, 26498, 26498, 26498, 26498, 26498, 26498,
	26498, 1819, 26498, 2461, 2461, 2461, -1000, 1980, 1987, 25205,
	25205, 8812, 329, 328, 327, -1000, 25205, -131, -1000, -1000,
	4802, -1000, 1936, -1000, -108, -1000, 1815, -1000, -1000, 1936,
	1936, -94, 67304, -1000, 1442, -1000, 483, 25205, 28984, -1000,
	619, -1000, -104, -1000, 49395, -1000, 618, -243, -1000, 669,
	-1000, -1000, -1000, 405, -1000, -1000, -1000, 189, 49395, -1000,
	-109, -1000, 2430, 326, 13399, -1000, -1000, -1000, -1000, -1000,
	-1000, -59, -37, 1472, -1000, 2468, -1000, 617, 322, 2466,
	321, 320, -37, 57527, -1000, -25, -1000, -1000, -1000, -1000,
	-1000, -1000, 926, 925, -1000, 2155, -1000, 1681, -1000, 793,
	-1000, 1202, 25205, 25205, 482, 478, 1336, 2558, 2132, 1516,
	2129, 1516, -1000, -1000, 697, -1000, 67304, 477, 474, -1000,
	-26, 1231, -1000, -1000, 25205, 25205, 50203, -1000, 2339, -1000,
	911, -1000, -1000, -1000, 1687, 909, -1000, -1000, 1328, -1000,
	-1000, -1000, -1000, 25205, -1000, -33, 890, 711, 1982, 1063,
	-1000, 2557, 2556, 2555, 319, -34, -1000, 2429, 1625, 57527,
	47775, 47775, 2424, 677, -1000, 2466, -1000, -1000, -1000, -1000,
	727, -1000, -1000, 2553, -1000, 800, 13399, 47775, 2119, 1798,
	657, 38835, -1000, 727, 1854, -1000, 67304, -1000, 1222, 17291,
	2341, -110, -1000, 188, -1000, -1000, -1000, 746, 33076, 28984,
	25205, 2550, -111, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49801, 49801, 38429, 38429, 38429, 711, 57527, 57527, 39639,
	2549, 472, 57527, 57527, 471, -1000, -1000, -1000, 1460, 47775,
	-1000, -1000, 726, -1000, -1000, 1378, 1638, -1000, 1497, 65004,
	-1000, 2337, 13399, 2439, 6413, 25205, 25205, 212, 442, 403,
	6413, 25205, 25205, 8812, 67616, -115, 25205, 25205, -1000, 25205,
	616, 67304, 2535, 25205, 316, 314, 313, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 309, -1000, -1000, -1000, -1000,
	-1000, 67304, 25205, 26, -1000, -1000, -1000, 61547, -1000, 25205,
	308, 307, -1000, -1000, -1000, 304, 303, 8326, 7108, 64698,
	64623, 64317, 67304, 1980, 67304, -1000, -1000, 994, 994, 1053,
	1053, 1053, 1053, 2461, 1061, 1194, 530, 378, 378, 378,
	837, 843, 843, 378, 378, 378, 1976, 1779, 470, 1022,
	-1000, -1000, 67304, 67304, 302, -1000, -1000, -1000, -131, 299,
	1930, 2380, -1000, 28984, 1930, 1930, -1000, -1000, 57527, 67304,
	-1000, -238, -1000, 2466, -1000, -1000, 1960, -1000, 9647, -1000,
	13399, -1000, -1000, 31450, -1000, 466, -1000, 22, -1000, -1000,
	602, -1000, -1000, 297, -1000, -1000, -37, 57527, 57527, 57527,
	2116, -1000, 1591, -1000, 64242, -120, -1000, 65766, 25205, 57527,
	-1000, 1420, 1874, 826, -1000, 57527, -1000, 57527, -1000, -1000,
	57527, 57527, 47775, 57527, 57527, -122, 67304, -38, -1000, 661,
	-1000, 47775, 47775, 38429, -127, 13399, -1000, 38429, 967, -1000,
	-1000, -1000, 1890, -59, -1000, 2548, 464, 1687, -59, -1000,
	443, -1000, -1000, 452, 57527, 1584, 445, 13399, 1807, 657,
	38835, -1000, 1028, 1222, -1000, -1000, -39, -1000, 488, -59,
	57527, 2546, 1456, -1000, -42, 67304, -1000, 658, -1000, -135,
	-1000, -1000, 294, -1000, 2309, 2299, -1000, -1000, 25205, 444,
	441, 57527, 1784, -1000, -1000, -1000, -1000, 13399, 1040, -1000,
	-1000, -1000, 2337, 6413, 6413, 25205, 25205, 25205, 6413, 67616,
	-136, -1000, 6413, 6413, -131, -1000, -1000, 66222, -1000, -1000,
	-1000, -1000, 67304, 10067, 1393, -1000, 63936, -1000, -1000, -1000,
	-1000, 25205, 25205, -1000, -1000, -1000, -1000, -1000, 26498, 1970,
	440, 8812, -1000, -1000, 723, 25205, 25205, 1815, 723, 723,
	-137, 680, -1000, -1000, -1000, 2466, 22, -1000, 2545, 13399,
	-1000, -1000, -1000, -1000, -1000, 57527, -1000, 57527, -1000, 13399,
	57527, 1977, 1671, -1000, -1000, 1827, 439, 26498, 47775, 730,
	1964, 1342, 25205, -1000, -141, -143, 1664, -1000, -1000, 1663,
	25205, -1000, 8812, 1516, 1516, -147, -148, -1000, 889, 881,
	869, 57527, 16860, -1000, -1000, -1000, 866, -1000, -43, 25205,
	1332, 1915, 721, -1000, 39639, 710, -1000, -1000, -1000, 25205,
	-1000, 47775, 25205, 1571, -1000, 657, 38835, -1000, 2199, -1000,
	2258, 57527, 2336, -1000, -1000, -1000, 1854, 429, -1000, 711,
	428, 427, -149, 25205, 25205, -153, -64, -1000, 722, 718,
	-1000, -1000, 47775, -1000, 6413, 6413, 6413, -1000, 288, -1000,
	-1000, 1456, 2379, -1000, 63861, 63555, 4217, 26498, 8812, -157,
	-1000, 57527, 67304, -131, -1000, -1000, -1000, 49395, 23, -1000,
	-1000, 1660, -1000, -1000, -1000, 57527, 1678, -1000, -1000, 25205,
	1022, 421, 25205, -1000, -1000, 1876, 1999, 1890, 419, -1000,
	-1000, -1000, -1000, 1268, -1000, -1000, 67304, 2354, -1000, -1000,
	416, 415, 57527, 57527, 414, 654, 1962, -1000, 411, 67304,
	710, -1000, 1416, -1000, 1880, 287, 2423, -161, 800, -170,
	47775, 38835, -1000, 1798, 963, -176, 57527, 1222, -1000, -1000,
	38429, 38429, 1342, -177, -178, -1000, 1784, -1000, 57527, -1000,
	57527, -1000, -1000, 1418, 25205, -1000, -1000, 4217, -186, -1000,
	-96, -1000, 2422, -1000, -1000, -1000, -1000, 2115, 63480, 1769,
	57527, 63174, 1990, -1000, -1000, 1332, 57527, 47775, 797, 13399,
	1378, 1378, -1000, -1000, 25205, 16429, 1414, 25205, -1000, 47775,
	-1000, 2289, 1890, -59, 1342, 410, 1342, 409, -1000, 1807,
	1109, -1000, 746, -1000, -1000, -187, -188, 1890, 1342, -1000,
	-1000, -192, -193, 285, 26067, 26067, 26067, -131, -1000, 57527,
	408, 2097, -1000, 1491, 1398, 283, 823, -1000, -1000, 1964,
	-198, 405, -1000, 25205, -1000, -202, -1000, 787, -204, -1000,
	784, -208, -1000, 1959, -1000, -209, 404, -1000, 1332, 721,
	1890, 25205, 1890, 25205, -1000, 33076, -1000, 711, 711, 1332,
	1890, -1000, -1000, -1000, -1000, -1000, 26914, 1493, 1224, 65460,
	-1000, -1000, -1000, -1000, 57527, -1000, 1542, 1521, 1095, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1769, 67304, -1000,
	1378, 1905, -1000, 1378, 1951, -1000, 1413, -1000, 57527, 710,
	-1000, 1332, -210, 1332, -215, -203, -1000, -1000, -1000, 1332,
	2441, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2276, -1000,
	814, 1490, 1490, 1491, -1000, 402, -1000, 400, -1000, -216,
	-1000, 695, 1342, 695, 1342, -1000, -1000, 25636, -1000, 2447,
	-1000, -1000, 1792, -1000, 1964, 25205, 25205, 1477, -1000, 2544,
	1890, -1000, 1890, -1000, -1000, -1000, -1000, -1000, -224, -225,
	-1000, -1000, -1000, -1000, 1332, 1332, 1332, 864, 695, 695,
	-1000, 389, -1000, -1000, 25205, -226, 1332, -1000,
}
var sqlPgo = [...]int{

	0, 3196, 3192, 3190, 3186, 3181, 3179, 3177, 3175, 3174,
	3173, 3172, 3170, 3168, 3158, 3155, 3153, 3150, 3149, 3147,
	3146, 3145, 3144, 3143, 3138, 3136, 3135, 3132, 3130, 3128,
	3126, 3125, 3124, 3123, 3121, 3120, 3118, 3117, 3115, 3110,
	3109, 3107, 3105, 3104, 36, 3103, 3101, 3099, 3094, 3093,
	3091, 3090, 3089, 3085, 3084, 3083, 3080, 3078, 3077, 3074,
	3070, 3069, 3068, 3067, 3066, 3065, 3062, 3059, 3058, 3055,
	3054, 3051, 3050, 3046, 118, 3045, 3041, 3040, 3038, 3037,
	3034, 3033, 3032, 3031, 3030, 3029, 3028, 3027, 3024, 44,
	3023, 3021, 3018, 3015, 3014, 3013, 3011, 3010, 3007, 3006,
	179, 3004, 3002, 3001, 2998, 2997, 2996, 2994, 2993, 2992,
	2985, 2982, 2981, 2978, 2977, 2976, 2975, 2972, 2971, 2970,
	2969, 2968, 2966, 2965, 2964, 2963, 2960, 198, 151, 2959,
	2955, 2953, 2946, 2931, 2928, 89, 84, 19, 2927, 99,
	126, 181, 4696, 173, 2925, 2922, 2920, 2919, 2915, 66,
	129, 122, 127, 125, 97, 2914, 2905, 69, 38, 28,
	27, 95, 2904, 2903, 2902, 1958, 87, 2901, 2900, 197,
	175, 2896, 938, 2895, 124, 117, 86, 93, 63, 2893,
	108, 21, 2890, 147, 88, 2889, 119, 61, 29, 5002,
	5938, 90, 202, 71, 64, 165, 150, 163, 162, 135,
	252, 2888, 177, 2885, 114, 143, 2884, 2879, 2876, 53,
	138, 11, 8, 160, 6, 2874, 14, 2873, 12, 2870,
	2867, 2866, 2863, 75, 130, 2862, 31, 58, 2860, 32,
	9, 153, 2859, 172, 2855, 85, 2849, 190, 145, 142,
	20, 167, 2848, 2847, 2846, 2840, 2837, 92, 17, 91,
	2835, 2834, 120, 176, 2833, 65, 131, 72, 100, 201,
	81, 157, 103, 161, 168, 2832, 2831, 2829, 134, 2828,
	2827, 159, 156, 2826, 2825, 34, 43, 174, 51, 2823,
	2822, 121, 2817, 146, 2816, 2815, 2812, 199, 128, 154,
	4, 57, 83, 26, 10, 169, 111, 77, 74, 2808,
	2899, 1118, 1196, 2807, 104, 80, 37, 79, 109, 189,
	50, 2806, 2805, 341, 2804, 2803, 2802, 2796, 132, 2795,
	2793, 2792, 106, 33, 67, 2791, 112, 54, 113, 194,
	76, 158, 166, 183, 2790, 133, 2788, 139, 98, 2787,
	141, 186, 73, 2785, 1541, 105, 2783, 184, 2763, 2762,
	2761, 2760, 1416, 2759, 2756, 1485, 2755, 110, 2752, 2750,
	137, 144, 180, 30, 2747, 59, 478, 2746, 140, 55,
	2745, 155, 40, 0, 6039, 4770, 5788, 2740, 204, 2739,
	152, 101, 2738, 2736, 2735, 2733, 35, 15, 5, 7,
	18, 16, 431, 102, 2729, 2727, 68, 94, 115, 2726,
	196, 164, 2724, 2723, 2721, 56, 2719, 25, 2715, 22,
	2714, 2713, 23, 3, 2712, 2711, 182, 2710, 2708, 2707,
	2705, 2449, 2704, 191, 2703, 96, 2699, 123, 107, 2698,
	2697, 2696, 2695, 185, 2690, 187, 2689, 13, 24, 2,
	2688, 2686, 2681, 149, 1, 2279, 2680, 2679, 70, 148,
	62, 2678, 2674, 136,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	423, 423, 17, 27, 18, 28, 12, 425, 425, 425,
	425, 21, 19, 19, 29, 138, 138, 138, 138, 16,
	16, 24, 24, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 422, 422, 153, 153, 152, 148,
	148, 426, 426, 154, 154, 154, 156, 156, 33, 33,
	87, 87, 87, 139, 80, 80, 80, 80, 80, 80,
	80, 75, 75, 371, 371, 372, 372, 134, 134, 135,
	135, 135, 135, 136, 136, 137, 137, 137, 47, 35,
	35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 45, 45, 45, 45, 128, 128, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 431, 431,
	432, 432, 433, 433, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 59,
	59, 225, 225, 203, 203, 49, 418, 418, 238, 238,
	339, 339, 61, 61, 62, 62, 62, 62, 62, 62,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 70, 70, 70,
	71, 71, 71, 68, 68, 68, 66, 66, 66, 65,
	65, 65, 69, 69, 69, 67, 67, 67, 239, 239,
	72, 72, 72, 72, 72, 72, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 341, 341, 73,
	73, 311, 311, 76, 76, 269, 269, 77, 77, 77,
	77, 77, 78, 78, 78, 78, 88, 88, 88, 88,
	421, 421, 231, 231, 169, 169, 169, 169, 83, 83,
	83, 83, 84, 84, 84, 85, 85, 133, 133, 94,
	94, 94, 94, 94, 93, 93, 93, 93, 93, 93,
	39, 39, 39, 40, 40, 41, 41, 42, 42, 43,
	43, 44, 44, 44, 44, 44, 96, 96, 427, 427,
	98, 95, 95, 95, 97, 97, 97, 97, 99, 100,
	100, 100, 100, 100, 100, 101, 101, 365, 365, 246,
	246, 363, 363, 379, 379, 364, 364, 207, 207, 207,
	207, 207, 208, 208, 208, 370, 370, 370, 370, 370,
	370, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 118, 118,
	118, 127, 127, 127, 127, 127, 127, 127, 120, 120,
	120, 111, 111, 103, 103, 103, 103, 107, 107, 107,
	107, 107, 104, 104, 108, 108, 110, 110, 112, 112,
	112, 112, 112, 112, 105, 105, 105, 105, 114, 114,
	114, 114, 113, 113, 123, 123, 123, 123, 123, 123,
	325, 325, 119, 119, 119, 119, 122, 122, 122, 122,
	260, 260, 117, 117, 117, 121, 121, 124, 124, 124,
	124, 106, 106, 106, 436, 436, 436, 125, 125, 116,
	116, 126, 126, 126, 126, 126, 126, 126, 115, 115,
	115, 424, 424, 109, 419, 419, 416, 416, 416, 416,
	416, 416, 416, 417, 417, 420, 420, 81, 81, 81,
	54, 54, 437, 437, 437, 55, 55, 438, 438, 438,
	435, 435, 435, 435, 435, 435, 435, 435, 209, 209,
	210, 210, 292, 292, 292, 292, 292, 211, 211, 155,
	155, 155, 214, 215, 215, 212, 212, 213, 213, 213,
	217, 217, 216, 219, 219, 218, 291, 384, 384, 385,
	385, 385, 385, 385, 385, 385, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 382, 382, 382, 383,
	380, 380, 381, 381, 381, 381, 439, 439, 439, 439,
	439, 439, 440, 440, 290, 290, 223, 223, 387, 387,
	387, 387, 388, 388, 388, 388, 388, 391, 390, 389,
	389, 389, 389, 389, 321, 321, 321, 58, 58, 58,
	257, 257, 256, 256, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 130, 130,
	56, 56, 56, 161, 161, 53, 53, 53, 442, 442,
	57, 57, 57, 443, 443, 60, 60, 60, 60, 60,
	60, 52, 52, 52, 52, 52, 444, 444, 275, 275,
	274, 274, 229, 229, 327, 173, 173, 149, 149, 149,
	20, 22, 22, 15, 15, 15, 15, 15, 15, 30,
	30, 31, 31, 26, 26, 428, 428, 429, 429, 82,
	82, 86, 86, 86, 92, 92, 129, 129, 129, 129,
	129, 129, 129, 34, 34, 34, 34, 46, 46, 46,
	46, 90, 446, 446, 446, 91, 91, 445, 445, 168,
	168, 168, 168, 170, 170, 287, 287, 288, 288, 447,
	447, 289, 289, 289, 163, 162, 164, 164, 51, 51,
	51, 157, 157, 158, 158, 159, 159, 160, 160, 448,
	448, 79, 79, 79, 132, 132, 202, 202, 283, 283,
	283, 224, 224, 178, 178, 286, 286, 284, 284, 284,
	284, 255, 255, 255, 131, 131, 234, 234, 248, 248,
	249, 249, 336, 336, 250, 89, 89, 142, 142, 140,
	140, 140, 140, 140, 140, 449, 449, 141, 141, 141,
	143, 143, 143, 143, 143, 143, 143, 146, 146, 146,
	146, 147, 147, 147, 145, 145, 398, 398, 398, 400,
	400, 401, 397, 397, 399, 399, 441, 441, 259, 259,
	259, 221, 222, 220, 220, 450, 450, 227, 227, 226,
	228, 228, 326, 326, 326, 253, 253, 253, 253, 278,
	278, 276, 276, 277, 277, 279, 279, 280, 280, 280,
	281, 281, 282, 282, 252, 252, 307, 307, 144, 144,
	144, 233, 233, 233, 235, 235, 298, 298, 298, 298,
	298, 299, 299, 297, 297, 297, 297, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 329, 329, 236, 236,
	330, 285, 285, 414, 414, 414, 415, 415, 324, 324,
	331, 331, 331, 331, 331, 331, 322, 322, 323, 323,
	337, 338, 338, 263, 263, 263, 263, 261, 261, 262,
	262, 332, 332, 332, 332, 254, 254, 333, 333, 333,
	334, 293, 294, 294, 342, 342, 342, 342, 357, 232,
	232, 232, 451, 451, 343, 343, 343, 343, 343, 343,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 347, 347, 347, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 356, 356, 356, 356, 356, 348, 348,
	353, 353, 354, 354, 354, 349, 350, 355, 355, 355,
	355, 452, 452, 359, 359, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 345, 345, 345, 352, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 270, 270, 271, 271, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	302, 302, 302, 302, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 392,
	392, 392, 392, 392, 392, 392, 392, 395, 395, 396,
	396, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	402, 402, 403, 403, 405, 405, 406, 406, 407, 408,
	408, 408, 409, 410, 410, 404, 404, 411, 411, 411,
	411, 412, 412, 413, 413, 413, 413, 413, 313, 313,
	314, 314, 320, 320, 320, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 171, 171, 171, 171, 171, 244, 244, 242, 242,
	242, 245, 245, 243, 243, 241, 241, 240, 240, 310,
	310, 308, 308, 312, 312, 264, 264, 358, 358, 358,
	358, 358, 358, 358, 265, 265, 265, 273, 266, 266,
	267, 267, 267, 267, 267, 304, 305, 268, 268, 268,
	306, 306, 315, 319, 319, 318, 317, 317, 316, 316,
	295, 295, 296, 296, 251, 251, 453, 453, 247, 247,
	335, 335, 335, 335, 205, 205, 237, 237, 204, 204,
	197, 197, 198, 198, 198, 198, 230, 230, 360, 360,
	360, 361, 362, 309, 188, 187, 175, 176, 186, 185,
	184, 174, 177, 181, 182, 183, 179, 180, 193, 192,
	191, 190, 340, 199, 199, 200, 200, 200, 201, 201,
	201, 201, 172, 172, 194, 194, 195, 196, 196, 189,
	189, 189, 165, 165, 165, 166, 166, 167, 167, 369,
	369, 367, 367, 367, 368, 368, 368, 368, 366, 366,
	366, 366, 366, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 375, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 378, 378,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 6, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 6, 1, 2, 1, 3,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 3, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 4, 4, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 2, 3, 3, 3, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 6, 3, 4, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	10, 13, 0, 2, 3, 9, 12, 0, 2, 3,
	1, 1, 2, 2, 2, 2, 1, 0, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 5, 8, 5, 11, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 1, 1,
	8, 7, 5, 0, 1, 6, 7, 6, 5, 3,
	4, 14, 17, 14, 17, 4, 0, 2, 2, 0,
	1, 0, 1, 3, 2, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 3, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 2,
	3, 4, 3, 4, 5, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 2, 1, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 4, 1, 2, 1, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 2, 5, 1, 4,
	2, 5, 1, 4, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 1, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	5, 4, 6, 3, 5, 4, 6, 4, 6, 5,
	7, 3, 3, 3, 3, 3, 4, 3, 2, 4,
	2, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 1, 5,
	5, 3, 1, 1, 1, 2, 2, 2, 4, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 8, 6, 4, 6, 6, 6,
	4, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 1, 2,
	3, 2, 3, 2, 3, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 2,
	2, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 445, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -129, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -130, -131, -132, 80, 67,
	120, 102, 107, 126, 152, 276, 305, 315, 299, -97,
	-98, 334, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -430, 82,
	-399, -64, -67, -69, -434, 112, 125, 163, 269, -84,
	-85, 301, 303, -41, -40, 121, -140, -142, -95, -96,
	-133, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, 337, 383, 39, 346, 68,
	115, 309, 21, -5, -6, -7, -8, -9, -11, -22,
	-49, -51, -52, -54, -55, -60, -57, -58, -398, -65,
	-66, -68, -70, -71, 300, -143, -141, 442, 395, -13,
	-17, -18, -14, -16, -19, -15, -23, -27, -28, -25,
	-24, -26, -29, -30, -31, -32, -20, -21, -12, 413,
	421, -146, -144, -145, -147, 322, 403, 360, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, -190, -194,
	-195, -196, -189, -165, -375, -378, 4, -373, -376, 131,
	176, 240, 21, 22, 23, 24, 25, 27, 37, 38,
	39, 42, 44, 45, 48, 49, 50, 51, 52, 53,
	56, 61, 66, 67, 68, 69, 70, 75, 72, 73,
	74, 77, 79, 80, 81, 84, 85, 93, 94, 95,
	96, 97, 98, 102, 105, 104, 107, 110, 111, 112,
	114, 116, 117, 120, 121, 124, 122, 366, 368, 123,
	125, 126, 127, 137, 138, 139, 141, 142, 144, 146,
	150, 151, 153, 157, 159, 160, 161, 162, 163, 164,
	165, 177, 172, 178, 182, 185, 184, 186, 187, 188,
	179, 193, 196, 197, 198, 200, 201, 204, 205, 206,
	207, 210, 209, 212, 215, 216, 219, 220, 223, 225,
	226, 228, 229, 227, 230, 233, 231, 232, 235, 236,
	238, 237, 245, 246, 248, 249, 250, 264, 253, 254,
	257, 260, 263, 265, 266, 267, 268, 269, 270, 272,
	274, 276, 278, 280, 281, 282, 283, 284, 285, 287,
	288, 290, 291, 292, 293, 294, 299, 296, 297, 298,
	300, 301, 302, 303, 305, 307, 308, 309, 310, 312,
	314, 335, 336, 348, 315, 316, 317, 318, 319, 320,
	321, 325, 329, 326, 327, 328, 330, 323, 324, 331,
	332, 334, 337, 339, 341, 342, 345, 346, 347, 349,
	352, 353, 354, 350, 351, 344, 359, 357, 358, 361,
	362, 363, 364, 365, 367, 369, 377, 378, 380, 383,
	384, 385, 387, 388, 391, 392, 393, 394, 399, 395,
	397, 400, 401, 402, 408, 407, 414, 415, 417, 418,
	419, 32, 40, 41, 43, 46, 57, 58, 59, 62,
	99, 100, 119, 128, 129, 140, 154, 156, 166, 167,
	168, 183, 189, 191, 171, 213, 243, 244, 258, 262,
	273, 275, 286, 311, 340, 355, 371, 372, 373, 374,
	379, 381, 403, 404, 405, 409, 416, 251, -183, 2,
	-165, -165, 276, 26, 2, 26, 272, 324, 362, 364,
	2, 192, 2, -421, -231, 2, 26, -169, -165, 82,
	152, 322, -183, 2, -421, -231, 24, 2, -165, 2,
	-170, 2, 315, -165, 445, 77, 220, 61, 311, 331,
	-100, 378, -99, 371, 317, -101, -365, 2, 233, -165,
	445, 445, 445, 445, 2, 360, 267, 407, 323, 396,
	95, 283, 176, -416, 2, 4, -376, -373, -198, -197,
	360, 95, -196, -189, 435, -195, 445, 445, 445, 2,
	197, 198, 282, 281, 331, 332, 445, 445, 445, 2,
	25, 55, 76, 79, 101, 127, 147, 150, 255, -431,
	226, 264, 280, 317, 330, 359, 369, 380, -435, 347,
	56, 396, -442, 385, 110, -274, 95, 364, 362, 220,
	151, 392, 307, 155, 390, 105, 182, 394, 393, 445,
	445, 25, 55, 64, 79, 110, 127, 147, 150, -433,
	264, 280, 314, 317, 330, 359, 369, 385, 380, 2,
	407, 323, 360, 176, 95, 396, 307, 279, -74, 2,
	442, 29, 334, -139, 360, 2, -165, 197, 198, 2,
	445, 445, -416, 2, 197, 198, 2, 319, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 2, -127, 331, 347, 160, 38, 61,
	26, 66, 96, 153, 176, 177, 205, 76, 77, 281,
	220, 198, -325, 332, 361, 318, 357, 378, 82, 397,
	308, 419, -424, 122, 4, 95, 233, 333, 371, 70,
	365, 366, -441, 2, 360, -445, 2, 378, 378, 2,
	-445, 2, -445, 2, -168, 2, 378, 375, -446, 378,
	416, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, -141, -143, -142, 445, 445, 445, 445,
	445, -127, 331, 2, 61, 26, -449, 145, -226, -227,
	389, 190, 118, 256, -140, -142, 2, -398, -363, 2,
	-300, -379, -302, 433, 434, 428, 239, 420, -313, 101,
	390, 251, -378, -303, -315, 119, 311, -245, 8, 9,
	5, 6, 7, -172, -344, -309, -352, 382, 130, 242,
	-201, 447, 10, 442, -395, -142, -314, 33, 156, 54,
	-367, -200, -346, -354, -350, -351, -451, 44, 50, 49,
	369, 232, 325, 326, 341, 327, 328, 42, 399, 172,
	248, 250, 184, 4, 191, -199, -189, -392, -393, -373,
	-374, 183, 189, 185, 340, 186, 187, 188, 41, 286,
	141, 142, 140, 111, 100, 99, 244, 46, 45, 43,
	404, -355, 97, 371, 372, 373, 374, 200, 201, -165,
	-375, 64, 87, 88, 86, 91, 90, 92, 89, 333,
	396, 55, 32, 166, 167, 171, 243, 168, 62, -394,
	351, 83, 149, 181, 169, 194, 195, 199, 214, 217,
	234, 241, 259, 261, 306, 338, -452, 405, 128, 129,
	262, 273, 355, 379, 381, 154, 213, 57, 58, -400,
	287, -401, -183, -400, 445, 445, 446, 445, -220, -221,
	-222, 2, 26, 108, 442, 2, -328, 2, 440, -332,
	-142, 208, -331, 442, -329, -190, 252, -396, 312, -392,
	-393, -172, -189, -200, 4, -223, 442, 444, 95, 360,
	65, 2, -269, 442, -165, 26, -139, 251, 375, 446,
	-311, 442, 251, 148, 253, -165, 2, 2, 335, 2,
	442, -100, 59, 378, -288, 2, -289, -162, -163, -164,
	196, 278, 285, 419, -363, -427, 148, 425, 375, -363,
	-246, 444, 2, -332, 166, -190, 2, -187, -366, 4,
	-373, -376, -374, -377, 64, -375, 26, 28, 29, 30,
	31, 33, 34, 35, 36, 47, 54, 55, 60, 63,
	65, 76, 82, 86, 87, 89, 88, 90, 91, 92,
	101, 103, 106, 108, 109, 113, 115, 118, 130, 132,
	145, 147, 148, 152, 155, 158, 170, 180, 190, 192,
	208, 211, 218, 221, 222, 239, 242, 247, 251, 252,
	255, 256, 271, 277, 289, 304, 322, 333, 343, 356,
	360, 370, 375, 376, 382, 389, 390, 396, 398, 406,
	410, 411, 412, 413, -378, 2, -332, 166, 2, -191,
	166, -332, -194, 2, -371, 166, -369, 10, -368, 5,
	4, -373, -376, -374, 2, -174, -165, 2, -186, -366,
	2, -204, 166, -190, 375, 446, -237, -197, -198, -230,
	-165, 444, -300, 2, -89, 2, -300, 166, 2, -89,
	166, 2, -300, 166, 2, -89, 166, 2, 2, 2,
	380, 2, 79, 166, -165, 360, 94, 2, 298, -432,
	314, 384, 407, 2, 2, 2, 2, 2, 2, 2,
	360, 323, -443, 287, -179, 2, -165, 145, -371, 166,
	2, -371, 166, 2, -192, -194, -192, 176, 193, -174,
	166, 2, 364, 362, 364, 362, 148, 2, 192, 2,
	192, 2, -333, 2, -334, -190, 2, 2, 2, 2,
	2, 166, -165, 360, 94, 2, 207, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -239, 166, 2, -190,
	-239, 166, 2, -239, 166, 2, -205, 166, 2, -204,
	-174, 166, 2, -372, 166, 2, -371, -372, 166, 2,
	-341, 2, -340, -368, 403, -74, 442, 331, 442, -371,
	-190, -300, -89, 148, -300, -89, 2, 95, 360, -127,
	2, 145, 398, 2, 8, 2, -371, 284, 137, 2,
	335, 2, 281, 332, 61, 419, 148, 2, 2, -419,
	2, 251, 148, 2, 148, 2, 148, 2, 148, 2,
	148, 2, 2, 281, 332, 2, 377, 206, 123, 2,
	148, -260, 2, 413, 148, 2, 5, 2, 196, 278,
	348, 2, -190, -436, 2, 360, 407, 323, 2, 2,
	72, 73, 148, 2, 148, 419, 2, -254, -332, -287,
	-288, -287, 375, -170, -449, -226, -227, -127, 335, 2,
	2, -449, -253, -276, -277, 218, 132, 247, -259, 26,
	108, -259, -259, 48, 443, 443, 11, 12, 63, 37,
	433, 434, 435, 436, 143, 437, 438, 431, 432, 430,
	423, 424, 427, 202, 203, 78, 426, 425, 71, 224,
	313, 133, 134, 135, 136, 295, 173, 174, 175, 14,
	15, 16, 30, 255, 217, 420, 169, 338, 428, 17,
	18, 19, 194, 195, 241, 40, 170, -171, -206, -300,
	-300, -300, -300, -300, 261, 442, -251, -295, 440, -142,
	442, 442, 442, 5, 442, 5, -362, 8, -142, -300,
	-313, 443, -243, 442, -142, -313, -308, 442, 311, 440,
	442, -316, -300, 444, -402, 414, -348, 442, 275, -347,
	442, -347, -347, 408, -345, 442, 421, 415, 442, -345,
	442, 442, 145, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 408, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 446, -400, -223, 442,
	-247, -335, -300, 435, -247, -247, 251, -240, -300, 83,
	-263, 199, 234, 149, 214, 306, 181, -362, -74, -297,
	447, -324, 421, -142, -329, -189, -142, -331, 442, -328,
	-324, 435, -190, 442, 148, 442, 444, 148, -230, -366,
	-174, -190, -199, -200, -240, -371, -416, -230, -169, 34,
	-310, -342, -343, -356, -344, -353, -349, -352, 291, 292,
	290, 294, 293, 44, 50, 49, 369, 232, 325, 326,
	341, 327, 328, 42, 399, 172, 248, 250, 184, 4,
	43, 404, -355, 191, 183, 189, 185, 340, 186, 187,
	188, 41, 286, 141, 142, 140, 111, 100, 99, 244,
	46, 45, 97, 371, 372, 373, 374, 200, 201, 405,
	351, 57, 58, -416, -230, 145, -365, -240, 34, -288,
	2, -447, 446, 216, -208, 223, 238, 159, 252, 417,
	-370, 5, 4, -309, -321, 101, 220, -352, 9, 434,
	-360, 8, 433, -364, -363, 85, 444, -366, -151, 296,
	-150, 23, 27, 112, 401, 124, -213, 178, 267, 119,
	344, -423, -425, 316, 367, 368, 74, 245, 296, 119,
	-256, -258, 34, 93, 236, 263, 51, 164, 227, 228,
	346, 409, 119, 296, 413, 119, -425, 296, -425, -153,
	344, -423, -425, 316, 296, -152, -213, 119, 447, -371,
	-237, 446, 446, -366, 435, 119, 119, 119, 119, 2,
	2, 239, 2, 2, 2, 150, -435, -433, 2, 2,
	2, -190, 166, -191, 166, 2, -194, 407, -225, 251,
	-418, -238, 360, -190, -161, -397, 413, 239, 239, 34,
	442, 2, -176, 166, 2, -166, -165, 176, -397, 239,
	-333, -202, -190, -202, 334, -183, 34, -297, 119, 2,
	2, 2, -165, -154, 446, 53, 302, 119, -154, 119,
	-154, 119, -154, 446, 119, -154, 119, 446, 119, 119,
	443, 446, -341, -371, -137, 413, 148, 82, 442, -372,
	-174, 2, -190, 2, 360, 200, -371, -371, -365, 26,
	336, 2, 73, -190, -420, 145, -417, 307, -416, -190,
	-190, -190, -190, -190, 145, 2, 377, 2, 377, 2,
	-165, 67, -165, 216, -190, 145, 360, 176, 360, -154,
	446, -170, -449, -253, -365, -449, -277, -276, -279, -300,
	26, -282, 139, 235, -300, -302, -141, -141, -141, -228,
	-326, -300, 277, 176, -357, -342, -342, -188, -366, 371,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, -300, -300, -300, 217, 169, 338, 40, 170,
	-300, 375, -300, -300, -300, -300, 231, 239, 242, 382,
	130, 391, 108, 245, -453, 356, 36, -306, -142, -244,
	442, -320, 31, 343, 26, -313, 442, 2, -295, -300,
	-296, -241, -240, -240, 443, 406, 26, 108, 435, 2,
	8, -270, -272, 418, 230, 98, 161, 229, -271, 321,
	443, 446, 34, 443, -300, -241, -312, -308, -240, -319,
	-318, 410, -366, 435, -403, 138, 155, 8, -362, 8,
	371, 371, 8, 8, 8, 442, 443, 2, 443, 2,
	443, 2, 443, 2, 443, 2, -300, -300, -300, -300,
	-300, -300, -300, -240, -264, 2, -358, -240, 4, 418,
	230, 98, 161, 229, 321, -264, 2, -265, 2, -300,
	-240, -266, -301, -302, 433, 434, 428, -313, -267, 2,
	-300, -241, -300, 47, 211, 376, -268, -300, 148, -240,
	-240, 2, -240, 2, -401, 34, -240, -233, 446, 148,
	34, 4, -233, -233, 442, 443, 446, 199, 199, -328,
	-263, 199, -261, 259, -261, -261, -414, 442, 441, -324,
	-175, 440, 448, -366, -323, -322, 34, -183, 257, -324,
	-324, 444, 443, -323, -190, 442, -240, -366, 349, 443,
	444, 194, 194, 194, 443, -137, 375, 413, -74, 443,
	446, -232, 33, 440, -272, 442, -359, 408, 442, 442,
	148, -231, -427, 443, 378, -289, -207, 285, 342, 297,
	329, 9, 8, 8, 446, -366, 446, 375, -428, 76,
	65, -291, 166, 65, -380, -177, 76, -381, -165, 60,
	390, 277, 147, -428, 76, -428, 76, 76, 334, 347,
	48, -332, 37, -89, 212, 148, 419, 360, 375, -332,
	-258, -342, 93, 227, 228, 48, -361, -360, 434, -361,
	48, -361, -361, -361, 413, -191, -332, 375, 268, -371,
	375, 446, 37, -89, 212, 148, 375, -204, -175, -338,
	-337, 422, -197, -165, 444, -300, -89, -300, -89, 119,
	2, -443, 207, 442, -223, 239, -257, -256, 239, -193,
	2, -190, 148, -230, -339, 192, 446, -238, 268, 119,
	119, 442, 116, 283, 2, 251, 239, -176, 166, -157,
	363, 119, -294, -293, 411, -283, -89, 442, 101, 34,
	-283, -248, -249, -336, -250, -177, 442, -183, -165, 2,
	-190, -239, -239, -239, -204, -205, -174, -371, -372, -372,
	-74, -340, 443, 443, -136, 254, -135, -165, 5, -139,
	398, -210, -292, -291, -382, -383, -380, 217, 176, 390,
	193, 131, -137, -337, -338, -338, -190, 145, -230, -230,
	331, 145, 145, 444, -260, 283, 95, 360, 267, 176,
	-190, -204, -190, -332, -449, -280, -360, 442, -281, 311,
	312, 446, -149, 35, 106, 204, -190, 419, 117, -300,
	-300, 375, -453, 356, -306, 117, -300, 231, 242, 382,
	130, 391, 108, 245, 148, 442, -301, -301, 443, -242,
	-300, -300, 441, 450, 443, -450, 446, -226, -300, -240,
	-240, 443, 443, 375, 375, 375, 375, 442, 444, -240,
	-230, 441, 441, 446, 443, -317, -318, 113, -300, 444,
	-408, 260, 442, 442, 443, 443, 446, 443, 419, 419,
	443, 443, 443, -300, 34, 446, 446, 446, 443, 446,
	446, 446, 443, 443, 148, 443, 443, -273, 271, 443,
	11, 12, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 425, 71, 224, 313, 14, 15,
	16, 194, 170, -301, -301, -301, 443, -304, -305, 148,
	145, 34, -268, -268, -268, 443, 148, -240, 443, 443,
	442, 443, -294, -335, -235, 2, -328, -185, -366, -294,
	-294, -240, -300, -328, -328, -262, 398, 251, 199, -328,
	-322, 443, -415, -362, -324, -323, -362, -299, -298, 146,
	35, 106, 237, -183, -223, -323, -323, -366, -324, 443,
	-236, -330, -396, -450, 444, -366, -128, 5, 242, -128,
	-128, 148, -230, 24, -342, 440, 441, 8, 8, 442,
	-362, -362, -230, 148, -363, -288, 388, 69, 285, -363,
	-150, -190, -177, -184, -165, 239, -291, 166, -156, 239,
	-342, -184, 442, 442, 204, 204, -177, -184, 166, -177,
	166, -184, -184, -422, 285, 246, -300, 219, 283, 240,
	-151, 296, -89, -89, 442, -427, 398, 107, -190, -193,
	296, -199, -361, -361, -256, 296, -191, -371, 413, -174,
	-152, -89, -89, 442, -175, -153, 296, -134, 165, 245,
	435, -165, 407, -165, -209, -210, -165, -437, 415, 413,
	119, 119, -223, -203, -190, 440, -137, -371, -190, -371,
	-371, -371, 2, 442, 2, -190, 119, 251, 239, -158,
	114, -448, 425, -174, -227, -226, -300, -255, -286, 304,
	251, -224, -178, -177, 403, -183, -255, -234, 446, 148,
	425, 444, -224, 2, -154, -154, -154, -154, -154, -74,
	-137, 446, 442, 425, 425, 442, -371, -371, 443, 446,
	-190, -176, 176, 176, -182, -166, -137, -42, 413, 360,
	331, 331, -165, -186, -174, -190, -187, -204, -281, -300,
	-326, -190, 447, -300, -300, 117, 117, -300, -301, -301,
	-300, 117, 148, 442, -300, -310, 30, 30, 443, 446,
	-296, -300, 443, 406, -450, -450, -450, 5, 230, 161,
	229, -271, 229, -271, -271, 8, 435, -366, 443, -308,
	115, -300, 370, -366, 435, -409, -180, 442, -165, 411,
	-226, -362, -345, -345, 443, -357, -342, -300, -300, -300,
	-300, -300, -300, -304, -300, -357, -342, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, 108, 239, 245, -301,
	-305, -304, -300, -300, -342, 443, 443, 443, -240, -74,
	-252, 155, -338, 446, -252, -252, 443, -262, 442, -300,
	-328, 441, 443, 446, -323, 441, 446, 449, 425, -223,
	444, -322, 443, 446, -285, 34, 443, -366, -89, 253,
	8, 441, 443, -362, 443, 443, -230, 375, 375, 119,
	239, 400, -384, -381, -300, -229, -327, -300, 442, 442,
	-148, 112, 334, -429, 2, 119, -154, 119, -154, 417,
	442, 442, 375, -428, 76, -240, -300, -138, 101, -365,
	-425, 375, 375, 268, -240, 375, -137, 148, 358, 2,
	2, 2, 443, 34, 249, -165, -190, -191, 34, -338,
	-362, -161, 2, -275, 398, -175, -190, 119, -159, 210,
	-448, -369, -397, -278, -276, -255, -247, 240, 75, 443,
	446, 444, -294, -249, -235, -300, 2, 443, -135, -136,
	-371, -371, -371, -137, -139, -139, -292, 2, 442, -176,
	-166, 442, 254, -190, -260, -215, -214, 267, 245, 252,
	443, -149, -175, -300, -300, 117, 30, 30, -300, -300,
	-310, 443, -300, -300, -240, 441, 5, -300, 443, 443,
	443, 443, -300, 444, -410, -165, -300, 443, 443, 443,
	443, 446, 446, 443, 443, 443, 443, -305, 148, 108,
	245, 442, 443, 443, -307, 158, 48, -328, -307, -307,
	-230, -297, -362, -298, -175, 440, -366, -330, 442, 444,
	441, 443, -177, -184, -291, 119, -385, 76, -386, 63,
	131, 82, 239, 242, 390, 277, 60, 101, 289, 34,
	443, 443, 446, -149, -229, -230, 239, 353, 101, 239,
	101, 94, 385, -177, -184, -230, -230, -190, -177, -184,
	443, 446, 425, -193, -191, -371, 443, -175, -372, 371,
	-211, 179, -89, 2, 442, -223, -257, -89, 441, 442,
	-165, 251, 442, -175, -160, 209, -448, -369, -157, -255,
	-284, 442, 251, -89, -178, 2, -227, 425, 443, 443,
	94, 94, -229, 442, 442, -230, -43, -44, 176, 76,
	270, -187, 360, -149, -300, -300, -300, 443, -450, -366,
	435, -404, 267, 443, -300, -300, -301, 148, 442, -310,
	-405, 412, -300, -240, -405, -405, 443, -324, -362, 2,
	-291, -184, -188, -181, -165, 131, 166, 242, 204, 442,
	-301, -190, 442, 2, -439, 103, 180, -290, -440, 81,
	354, -327, 443, 443, 242, 242, -300, -342, -154, -154,
	443, 443, 375, 375, 375, -365, 80, -363, 375, -300,
	-212, -213, 170, -438, 413, -209, -437, -229, -190, -229,
	251, -448, -369, -158, 109, -230, 76, -278, -306, -137,
	442, 442, 443, -229, -229, 443, 446, 26, 442, 26,
	442, -190, 443, -227, 48, 443, 443, -301, -310, 443,
	-406, -407, -180, -323, 441, -386, -181, 239, -300, -167,
	442, -300, 180, 104, 162, -211, 442, 289, -173, 63,
	442, 442, -177, -184, 442, 425, 148, 442, -437, 265,
	94, 236, 443, 34, 443, -275, 443, -190, -369, -159,
	393, 240, 443, -184, -255, -372, -372, -290, 443, 443,
	-44, -230, -230, -411, 283, 312, 157, -240, 443, 446,
	34, 119, 443, -387, 225, -165, 443, 104, 162, -212,
	-230, -190, -426, 398, -188, -217, -216, -214, -219, -218,
	-214, -240, -363, 80, 265, -240, -190, 94, -211, -89,
	-290, 442, -290, 442, -160, 334, -293, 443, 443, -211,
	-290, 443, 443, 443, -412, -413, 40, 387, 85, -300,
	-412, -412, -407, -409, 131, -388, -391, -390, 251, 339,
	149, 266, 443, 353, 409, -439, 443, -223, -300, 443,
	446, 403, 443, 446, 403, 443, 148, 443, 442, -212,
	-438, -211, -229, -211, -229, -248, -137, -137, -212, -211,
	-413, 274, 144, 311, 274, 144, -181, -390, 251, -391,
	251, 393, 105, -387, -216, 170, -218, 148, 265, -230,
	-437, -212, 443, -212, 443, -294, -212, 30, -389, 236,
	302, 53, 334, -389, -388, 442, 442, 443, -444, 411,
	-290, -444, -290, -413, 22, 242, 101, -439, -240, -240,
	-155, 53, 302, 2, -211, -211, 443, 443, -212, -212,
	-212, 375, -444, -444, 442, -240, 443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 336, 337,
	339, 340, 341, 343, 344, 346, 348, 350, 352, 353,
	355, 357, 358, 359, 360, 361, 363, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 409,
	411, 0, 836, 838, 840, 842, 27, 28, 0, 0,
	169, 171, 173, 0, 198, 200, 202, 203, 205, -2,
	0, 290, 291, 293, 295, -2, -2, 0, 0, 398,
	400, 0, 0, 420, 421, 0, 925, -2, 414, 416,
	418, 481, 483, 485, 487, 489, 491, 493, 494, 496,
	498, 500, 502, 504, 506, 508, 510, 512, 514, 516,
	518, 520, 522, 524, 526, -2, -2, -2, 0, -2,
	-2, -2, 854, 31, 33, 35, 37, 39, 41, 59,
	254, 255, 257, 259, 261, 264, 265, 267, 964, 297,
	299, 301, 303, 305, 0, -2, 978, 0, 0, 43,
	44, 45, 46, 47, 48, 49, 66, 67, 68, 69,
	70, 71, 72, 52, 54, 55, 61, 62, 64, 0,
	0, 940, 942, 944, 946, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 23, 338, 342, 345,
	347, 349, 351, 354, 356, 362, 364, 366, 727, 1561,
	1574, 1575, 1576, 1579, 1580, 1581, 1582, 1583, 1584, 1905,
	1985, 1986, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 0, 376, 374,
	1555, 377, 1742, 379, 381, 284, 285, 286, 287, 288,
	289, 0, 152, 0, 391, 385, 390, 392, 394, 395,
	396, 397, 372, 370, 0, 391, 1606, 389, 834, 835,
	829, 830, 1775, 864, 410, -2, -2, -2, 1874, -2,
	442, -2, 449, 1877, 1777, 452, 0, 454, -2, 457,
	837, 839, 841, 29, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, -2, -2, -2, -2, 0,
	0, 1640, 1532, 1576, 1535, 1530, 170, 172, 174, 175,
	0, 0, 0, 0, 0, 0, 199, 201, 204, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 783, 0,
	0, 0, 0, 0, 0, 0, 0, 650, 651, 0,
	0, 656, 778, 779, 800, 0, 0, 0, 0, 292,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 232, 330, 331,
	0, 965, 0, 0, 0, 150, 143, 0, 0, 639,
	399, 401, 0, 142, 0, 0, 833, 0, 415, 417,
	419, 482, 484, 486, 488, 490, 492, 495, 497, 499,
	501, 503, 505, 507, 509, 511, 513, 515, 517, 519,
	521, 523, 525, 527, 528, 0, 0, 0, 0, 0,
	532, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 531, 533, 534, 535, 0, 580,
	621, 622, 0, 769, 966, 866, 844, 857, 866, 846,
	847, 848, 849, 850, 855, 856, 859, 0, 851, 852,
	853, 32, 34, 36, 38, 40, 42, 256, 258, 260,
	262, 266, 268, -2, 938, 939, 298, 300, 302, 304,
	306, 402, 0, 404, 0, 532, 929, 0, -2, 0,
	970, 970, 970, 0, 0, 939, 937, 0, 407, 408,
	461, 462, 1195, 0, 0, 0, 0, 0, 1430, 1279,
	0, 463, -2, 1310, 1312, 1853, 1874, 1429, 1314, 1315,
	1316, 1317, 1318, 0, 0, 1321, 0, 1323, 1324, 1325,
	1326, 0, 1328, 0, 1332, 1333, 1334, 0, 1858, 1509,
	1572, -2, 1100, 1101, 1102, 1103, 1104, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1568, 0, 1401, 1348, -2,
	1593, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1649, -2, -2, -2, -2, -2, -2,
	-2, 1156, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1888, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 0, 1842, 1859, 1860, 1865, 1867, 1861, 1850, 1371,
	-2, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1157, -2, 1854, 1855,
	1870, 1871, 1876, 1881, 1882, 1857, 1866, -2, -2, 956,
	1750, 959, 727, 957, 941, 943, 0, 945, 0, 0,
	0, 950, 973, 971, 0, 1009, 954, 955, 965, 1026,
	1049, 0, 1031, 0, 1049, 1071, 0, 1036, 1770, 1349,
	1350, 0, 1576, 1573, -2, 0, 0, 0, 0, 0,
	0, 195, 373, 0, 378, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 863, 412, 413, 0, 437,
	0, 441, 1849, -2, -2, 445, 867, 871, 872, 873,
	0, 0, 0, 0, 451, 0, 0, 438, 439, 455,
	458, 0, 50, 0, 1859, 1071, 51, 0, 1545, 1598,
	1599, 1600, 1601, 1602, 1888, 1904, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 53, 0, 1859, 56, 0,
	1859, 0, -2, 60, 0, 1859, 153, 154, 1589, 1590,
	1594, 1595, 1596, 1597, 63, 0, 1551, 65, 0, 1548,
	73, 0, 1859, 1529, 0, 0, 631, 1526, 1531, 632,
	1536, 0, 176, 177, 178, 179, 180, 1859, 182, 183,
	0, 185, 186, 1859, 188, 189, 0, 191, 207, 208,
	0, 210, 0, 1859, 0, 0, 0, 216, -2, 233,
	0, 230, 0, 220, 221, 223, 224, 225, 226, 227,
	0, 0, 0, 784, 272, 270, 1556, 0, -2, 1859,
	772, 775, 1859, 777, 789, 1559, 0, -2, 0, 963,
	1859, 880, 652, 653, 654, 655, 0, 283, 0, 893,
	0, 895, 0, 915, 1077, 1026, 234, 235, 236, 237,
	238, 1859, 0, 0, 0, 243, 0, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 135, 1859, 309, 328,
	135, 1859, 312, 135, 1859, 315, 135, 1859, 318, 1524,
	135, 1859, 321, 322, 1859, 324, 155, 325, 1859, 327,
	0, -2, 367, 1562, -2, 333, 0, -2, 0, 167,
	0, 637, 638, 0, 831, 832, 422, 0, 0, 529,
	530, 0, 0, 540, 541, 542, 543, 1748, 1664, 546,
	0, 549, 570, 584, 0, 0, 0, 553, 555, 636,
	557, 0, 0, 559, 0, 561, 0, 563, 0, 565,
	0, 567, 569, 571, 585, 573, 0, 0, 0, 583,
	0, 588, 589, 0, 0, 594, 595, 596, 0, 598,
	599, 600, 601, 0, 603, 604, -2, -2, 608, 610,
	0, 616, 0, 620, 0, 536, 537, 135, 1075, 843,
	-2, 845, 0, 861, 932, -2, 0, 403, 0, 406,
	936, 930, 935, 987, 988, 0, 0, 0, 0, 968,
	969, 0, 0, 0, 927, 928, 0, 0, 0, 0,
	1435, 1436, 1437, 1438, 1439, 1440, 1443, 1444, 1441, 1442,
	1445, 1446, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1449, 1450, 0, 0, 1452, 0, 1454, 0, 0, 0,
	0, 0, 0, 1258, 1260, 1517, 0, 0, 1451, 1200,
	1201, 1202, 1237, 1238, 0, 0, 1311, 1514, 1513, 1313,
	0, 1466, 0, 1320, 0, 1192, 1327, 1542, -2, 0,
	1430, 1461, 0, 0, 1335, 1336, 1337, 0, 0, 1466,
	0, 0, 1508, 0, 1403, 0, 1136, 0, 1137, 1138,
	0, 1139, 1140, 1153, 1166, 0, 0, 0, 0, 1170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1158, 0, 0, 0,
	1489, -2, 0, 0, 0, 0, 0, 958, 0, 0,
	1013, 1518, 1522, 1523, 1013, 1013, 0, 0, 1467, 0,
	0, 0, 0, 1068, 1068, 1068, 1066, 1043, 0, 1049,
	0, 1059, 0, 1049, 1049, 0, -2, 1031, 0, 0,
	1059, 1072, 1073, 0, 0, 0, 0, 0, 0, 1577,
	0, 0, 0, 1564, 0, 167, 0, 383, 393, 965,
	0, 1469, 1091, 1087, 1094, 1095, 1096, 1097, 1143, 1144,
	1145, 1146, 1147, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	-2, 1154, 1156, 1177, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1149, 0, 1124, 1124, 1124,
	1141, 1142, 1165, 1176, 1168, 1176, 1172, 1092, 1093, 1159,
	1160, 1161, 1162, 0, 387, 0, 0, 0, 0, -2,
	447, 0, 869, 0, 874, 472, 473, 474, 876, 877,
	450, 475, 476, 477, 478, 479, 480, 0, 744, 0,
	746, 1538, 0, 448, 465, 453, 0, 459, 74, 826,
	103, 0, 826, 826, 0, 0, 122, 0, 0, 0,
	0, 0, 92, 99, 80, 81, 0, 0, 0, 0,
	57, 752, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 767, 0, 0, 0, 0, 91, 0, 86, 76,
	0, 0, 94, 101, 0, 126, 128, 0, 0, 1062,
	630, 0, 0, 1577, 1534, 0, 0, 0, 0, 209,
	211, 0, 213, 214, 215, 0, 783, 0, 222, 219,
	263, 727, 1859, 751, 1859, 749, 1560, 0, 0, 0,
	281, 276, 0, 278, 770, 0, 962, 0, 0, 0,
	0, 790, 0, 1859, 795, 1547, 1585, 1586, 882, 0,
	1083, 0, 896, 0, 0, 1078, 0, 1080, 0, 240,
	241, 242, 0, 307, 0, 133, 134, 0, 310, 0,
	313, 0, 316, 0, 0, 319, 0, 0, 0, 0,
	965, 0, 0, 0, 145, 0, 0, 0, 0, 167,
	1062, 424, 1062, 426, 0, 0, 544, 545, 547, 548,
	550, 551, 617, 552, 556, 0, 624, 1766, 634, 558,
	560, 562, 564, 566, 0, 575, 0, 577, 0, 579,
	591, 590, 592, 597, 602, 0, 0, 0, 0, 768,
	0, 860, 933, 935, 405, 931, 985, 986, 991, 995,
	996, 999, 1002, 1003, 993, 1195, 951, 952, 953, 979,
	980, 809, 0, 1985, 1196, 1088, 1197, 1198, 1544, 0,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	-2, -2, -2, -2, -2, -2, -2, -2, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, -2,
	-2, -2, 1235, 1236, -2, 1453, 1455, 0, 1517, 0,
	-2, 0, -2, -2, -2, -2, 1255, 0, 1257, 1262,
	1264, 1266, 0, 0, 0, 0, 1516, 1276, 1500, 1501,
	0, 0, 1432, 1433, 1434, 1261, 0, 1280, 1515, 1512,
	0, 0, 1465, 976, 1339, 0, 0, 0, 0, 1346,
	0, 1543, 1191, 1178, 1179, 1180, 1181, 1182, 1183, 1193,
	1331, 1463, 0, 1462, 0, 0, 0, 1473, 0, 1507,
	1503, 0, 1565, 1571, 1411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1383, 0, 1476, -2, -2,
	-2, -2, -2, -2, -2, 0, 1385, 0, 1387, 1467,
	1486, 0, 0, 1281, 0, 0, 0, 1430, 0, 1390,
	1467, 1494, 0, 0, 0, 0, 0, 1467, 0, 1499,
	0, 1397, 0, 1399, 960, 0, 0, 1083, 0, 0,
	0, 1521, 1083, 1083, 0, 1008, 0, 0, 0, 0,
	0, 0, 1063, 1067, 1064, 1065, 0, 0, 1049, 1059,
	1023, 0, 0, 1546, 1029, 1058, 0, 727, 1048, 1059,
	1059, 0, -2, 1033, 0, 0, 976, -2, 168, 726,
	0, 0, 0, 0, 375, 0, 0, 0, 369, 371,
	0, 1084, 1086, 0, 1098, 0, 0, -2, 0, 0,
	0, 0, 0, 440, 0, 868, 875, 0, 469, 0,
	471, 745, 1540, 1539, 0, 460, 0, 0, 0, 0,
	825, 105, 1859, 0, 137, 0, 0, 711, 1552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	753, 754, 756, 762, 764, 0, 758, 1541, 0, 759,
	0, 761, 763, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 1528, 158,
	1061, 0, 1527, 1537, 0, 181, 184, 187, 190, 0,
	217, 0, 0, 659, 642, 0, 747, 750, 0, 727,
	782, 1558, 0, 271, 167, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 788, 0, 0, 0, 1859, 884,
	890, 0, 978, 1082, 0, 913, 898, 0, 0, 0,
	913, 917, 918, 920, 921, 0, 0, 1079, 0, 244,
	329, 135, 135, 135, 1525, 135, 135, 156, 323, 326,
	332, 368, 965, 167, 165, 1730, 163, 160, 162, 0,
	0, 0, 660, 662, 663, 664, 665, 0, 1586, 0,
	1692, 1586, 140, 167, 423, 428, 538, 0, 635, 633,
	574, 0, 0, 0, 587, 0, 0, 0, 0, 0,
	618, 619, 623, 1076, 934, 0, 997, 0, 994, 1000,
	1001, 0, 982, 807, 808, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1277, 0, -2, 1256, 1259, 1263,
	1265, 1267, 0, 0, 0, 0, 0, 0, 1456, 0,
	1458, 1278, 1510, 1513, 1428, 0, 0, 975, 976, 976,
	976, 1345, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 1471, 1472, 0, 1338, 0, 1504, 0, 0, 0,
	1347, 0, 0, 0, 1148, 1122, 0, 1176, 1174, 1175,
	1169, 1176, 1173, 0, 0, 0, 0, 0, 1366, 0,
	0, 0, 1370, 1382, 0, 1384, 1386, 0, 0, 1388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1284, 1285, 1286, 1389, 1492, 1493, 0,
	0, 0, 0, 0, 0, 1395, 0, 1498, 1396, 1398,
	965, 1010, 1005, 1519, 1062, 1012, 1014, 1520, 1549, 1005,
	1005, 0, 1468, 1051, 0, 1053, 0, 0, 0, 1055,
	0, 1044, 0, 1046, 1059, 1028, 0, 0, 1021, 0,
	1018, 1019, 1020, 727, 1057, 1030, 1034, 1565, 0, 1074,
	0, 1038, 1041, 0, 0, 1578, 192, 196, 197, 193,
	194, 0, 382, 0, 1470, 0, 1089, 0, 0, 0,
	0, 0, 386, 0, 436, -2, 467, 468, 470, 466,
	104, 813, 0, 0, 1550, 0, 107, 1859, 116, 0,
	688, 0, 0, 0, 0, 0, 828, 0, 1859, 135,
	1859, 135, 118, 121, 0, 125, 123, 0, 0, 679,
	75, 826, 78, 84, 0, 0, 0, 90, 0, 819,
	0, 757, 760, 766, 58, 0, 821, 811, 0, 810,
	127, 79, 85, 0, 823, 77, 0, 167, 0, 0,
	1533, 0, 0, 0, 0, 658, -2, 0, 0, 0,
	0, 0, 0, 1062, 273, 0, 275, 280, 279, 773,
	-2, 776, 785, 0, 787, 799, 0, 0, 0, 886,
	890, 0, 889, 963, 990, 977, 1081, 891, 913, 0,
	0, 0, 901, 903, 900, 897, 894, 1083, 0, 0,
	0, 0, 0, 239, 308, 311, 314, 317, 320, 334,
	144, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 1586, 1586, 0, 1554, 141, 425, 0, 0,
	576, 578, 591, 611, 612, 674, 0, 615, 0, 0,
	981, 809, 0, 1199, 1240, 0, 0, -2, 0, 0,
	1244, 0, 0, 0, -2, 0, 0, 0, 1457, 1459,
	0, 1512, 1340, 0, 0, 0, 0, 1322, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 0, 1329, 1330, 1431, 1474,
	1502, 1506, 0, 1566, 1570, 1409, 1410, 1414, 1557, 0,
	0, 0, 1167, 1171, 1351, 0, 0, 0, 0, 0,
	0, 0, 1475, 1485, 1487, 1282, 1283, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, -2, -2, -2,
	1300, 1301, 1302, -2, -2, -2, 0, 0, 0, 1488,
	1490, 1491, 1495, 1496, 0, 1392, 1393, 1394, 1497, 0,
	1007, 0, 1011, 0, 1007, 1007, 972, 1052, 0, 1070,
	1054, 1026, 1045, 0, 1035, 1024, 0, 1025, 0, 1056,
	0, 1032, 1037, 0, 1040, 0, 1340, -2, 151, 384,
	0, 1090, 1099, 0, 1151, 1155, 388, 0, 0, 0,
	0, 136, 686, 710, 0, 0, 802, 809, 0, 0,
	109, 0, 0, 0, 117, 0, 114, 0, 120, 124,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 0,
	93, 0, 0, 0, 0, 0, 138, 0, 0, 212,
	781, 218, 668, 0, 643, 0, 727, 751, 0, 269,
	0, 771, 786, 0, 0, 0, 0, 0, 888, 890,
	0, 881, 882, 913, 989, 892, 911, -2, 910, 0,
	0, 0, 978, 919, 916, 922, 923, 0, 164, 0,
	159, 161, 0, 147, 0, 0, 661, 666, 0, 0,
	0, 0, 0, 539, 586, 613, 673, 0, 0, 992,
	998, 983, 809, 1242, 1246, 0, 0, 0, 1248, -2,
	0, 1270, -2, -2, 1460, 1511, 1319, 976, 1341, 1343,
	1344, 1194, 1505, 0, 1416, 1413, 0, 1400, 1123, 1361,
	1362, 0, 0, 1365, 1367, 1368, 1369, 1484, 0, 0,
	0, 0, 1391, 961, 1405, 0, 0, 1015, 1405, 1405,
	0, 1049, 1047, 1022, 1016, 0, 1566, 1039, 0, 0,
	1085, 1150, 815, 817, 106, 0, 687, 0, 690, 0,
	0, 0, 0, 697, 698, 0, 0, 0, 0, 0,
	716, 725, 0, 804, 0, 0, 0, 111, 130, 0,
	0, 827, 0, 135, 135, 0, 0, 814, 0, 0,
	0, 0, 0, 820, 822, 812, 0, 824, 157, 0,
	676, 0, 647, 644, 659, 642, 748, 780, 274, 0,
	798, 0, 0, 0, 878, 890, 0, 883, 884, 282,
	0, 0, 0, 899, 902, 904, 990, 0, 166, 167,
	0, 0, 0, 0, 0, 0, 427, 429, 0, 0,
	435, 672, 0, 984, 1250, -2, -2, 1271, 0, 1567,
	1569, 978, 0, 1402, 0, 0, -2, 0, 0, 0,
	947, 0, 1006, 1004, 948, 949, 1069, 1059, 0, 1042,
	108, 0, 691, 692, 1553, 694, 0, 696, 699, 0,
	701, 1588, 0, 705, 712, 717, 0, 668, 0, 722,
	723, 803, 714, 0, 110, 112, 129, 806, 113, 119,
	0, 0, 0, 0, 0, 0, 1634, 96, 0, 1060,
	642, 675, 0, 645, 0, 0, 0, 0, 799, 0,
	0, 0, 885, 886, 0, 0, 0, 913, 924, 146,
	0, 0, 725, 0, 0, 709, 0, 431, 0, 433,
	0, 614, 1342, 1420, 0, 1363, 1364, -2, 0, 1308,
	1404, 1406, 0, 1027, 1017, 689, 693, 0, 0, 731,
	0, 0, 0, 720, 721, 676, 0, 0, 132, 0,
	0, 0, 816, 818, 0, 0, 0, 0, 640, 0,
	648, 0, 668, 0, 725, 0, 725, 0, 887, 888,
	0, 906, 907, 909, 914, 0, 0, 668, 725, 708,
	430, 0, 0, 0, 0, 0, 0, 1415, 1309, 0,
	0, 0, 700, 736, 0, 0, 0, 718, 719, 716,
	0, 727, 115, 0, 805, 0, 680, 0, 0, 683,
	0, 0, 97, 1634, 95, 0, 0, 649, 676, 647,
	668, 0, 668, 0, 879, 0, 908, 167, 167, 676,
	668, 432, 434, 1412, 1417, 1421, -2, 1823, 1637, 0,
	1418, 1419, 1407, 1408, 0, 702, 732, 733, 0, 728,
	729, 730, 1587, 703, 704, 713, 724, 731, 131, 677,
	0, 0, 678, 0, 0, 100, 0, 102, 0, 642,
	646, 676, 0, 676, 0, 1083, 148, 149, 706, 676,
	0, 1423, 1424, 1425, 1426, 1427, 695, 734, 0, 735,
	0, 0, 0, 736, 681, 0, 684, 0, 98, 0,
	641, 796, 725, 796, 725, 905, 707, 0, 737, 0,
	740, 741, 0, 738, 716, 0, 0, 671, 791, 0,
	668, 793, 668, 1422, 739, 742, 743, 715, 0, 0,
	667, 669, 670, 797, 676, 676, 676, 0, 796, 796,
	682, 0, 792, 794, 0, 0, 676, 685,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 446, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 450, 3,
	423, 425, 424, 427, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 448, 430, 449, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1033
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1038
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1042
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1043
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1044
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1046
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1047
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1048
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1049
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1050
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1054
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1123
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1124
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1135
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1150
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1154
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1163
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1179
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1210
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1233
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1237
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1246
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1257
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1261
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1267
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1288
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1300
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1307
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1319
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1326
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1334
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1339
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1343
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1354
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1362
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1375
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1391
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1401
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1405
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1419
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1428
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1470
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1485
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1494
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1506
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1535
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1554
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1563
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1575
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1583
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1584
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1588
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1606
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1645
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1674
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1704
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1745
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1754
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1764
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1773
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1782
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1790
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1809
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1817
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1825
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1845
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1857
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1863
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1873
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1877
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1881
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1887
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1907
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1917
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1925
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1927
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1930
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1940
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1949
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1959
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1966
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1995
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2002
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2006
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2010
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2019
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2035
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2041
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2045
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2057
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2058
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2060
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2061
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2062
		{
			return helpWith(sqllex, "CREATE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplemented(sqllex, "create cast")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2072
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2073
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2075
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2076
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "create operator")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplemented(sqllex, "create publication")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplemented(sqllex, "create rule")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "create server")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2088
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2089
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2092
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2093
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2096
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2097
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2101
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2102
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2104
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2105
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2106
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2107
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2109
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2111
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2112
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplemented(sqllex, "drop server")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2123
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2124
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2126
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2128
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2129
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2130
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2131
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2141
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2157
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2163
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2172
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2181
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2191
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2195
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2201
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2216
		{

			sqlVAL.union.val = nil
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2230
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return helpWith(sqllex, "DELETE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2247
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2254
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2263
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2265
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2266
		{
			return helpWith(sqllex, "DROP")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2272
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2300
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2357
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2376
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2379
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2387
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2394
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2407
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2434
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2437
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2439
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2447
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2454
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2458
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return helpWith(sqllex, "DELETE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2465
		{
			return helpWith(sqllex, "INSERT")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2466
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2468
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2469
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2483
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2497
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2512
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2522
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2528
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2532
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2585
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2592
		{
			return helpWith(sqllex, "GRANT")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2620
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2623
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2628
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2632
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2647
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			return helpWith(sqllex, "RESET")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2677
		{
			return helpWith(sqllex, "RESET")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2685
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2699
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "USE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2706
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2707
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2709
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2713
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2714
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2715
		{
			return helpWith(sqllex, "USE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2731
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2746
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2749
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2767
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2784
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2788
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2794
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2798
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2812
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2844
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2860
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2864
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2886
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2894
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2898
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2917
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2924
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2930
		{
			return unimplemented(sqllex, "set from current")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2939
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2944
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2951
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3003
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3007
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3011
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3019
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = tree.Low
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3029
		{
			sqlVAL.union.val = tree.Normal
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3033
		{
			sqlVAL.union.val = tree.High
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3057
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3061
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3077
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3078
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3080
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3082
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3087
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3088
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3089
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3090
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3091
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3092
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3093
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3094
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3095
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3097
		{
			return helpWith(sqllex, "SHOW")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3104
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.str = "client_encoding"
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3120
		{
			sqlVAL.str = "timezone"
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3135
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3144
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3153
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3164
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3188
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3196
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3213
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3217
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3220
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3222
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3225
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3233
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3265
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3273
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3281
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3291
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3301
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3309
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3317
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3327
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3362
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3365
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3384
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3391
		{
			sqlVAL.union.val = true
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = false
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3403
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3405
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3409
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3429
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3445
		{
			sqlVAL.union.val = true
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = false
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3453
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3457
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3460
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3471
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3479
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3484
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3489
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3493
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3501
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3510
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3519
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3532
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3535
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3543
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3546
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3550
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3558
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3569
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3602
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3611
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3614
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3622
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3634
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3639
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3759
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3763
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3767
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3806
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3815
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3819
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3828
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3835
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3839
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3860
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3863
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3899
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3916
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3934
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3935
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3936
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3940
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3956
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3973
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3974
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3975
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3989
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3990
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3991
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3992
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3993
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3994
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3995
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3996
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4001
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4017
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4026
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4030
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4043
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4050
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4055
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4060
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4066
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.str = ""
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4080
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4086
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4100
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4106
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4126
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4147
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4162
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4176
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4184
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4210
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4214
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4218
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4222
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4226
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4230
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4234
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4248
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4252
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4256
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4263
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4285
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4295
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4307
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4345
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4361
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4362
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4363
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4364
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4365
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4366
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4397
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4425
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4438
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4446
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4474
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4482
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4500
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4525
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4534
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4542
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4546
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4553
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4556
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4557
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4558
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4561
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4563
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4565
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4568
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4570
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4571
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4573
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4586
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4594
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4601
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4605
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = nil
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4626
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4631
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4632
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4640
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4652
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4653
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4656
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4657
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4663
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4665
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4667
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4669
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4671
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4673
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4689
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4707
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4726
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4744
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4762
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4765
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4766
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4770
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = false
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = true
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = false
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4814
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.str = ""
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4834
		{
			sqlVAL.union.val = tree.Descending
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4838
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4844
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4851
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4861
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4875
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4889
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4903
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4917
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4919
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4923
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4937
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4953
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4967
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4992
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4993
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4996
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4997
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5008
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5018
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5027
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5030
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5038
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5041
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5045
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5046
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5047
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5063
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5066
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5071
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5081
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5084
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5089
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5093
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5098
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5099
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5100
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5108
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5115
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5118
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5119
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.str = ""
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5127
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5131
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5135
		{
			sqlVAL.str = ""
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5161
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5165
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5178
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5180
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5184
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5205
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5225
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5235
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5245
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5249
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5253
		{
			sqlVAL.str = ""
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5263
		{
			sqlVAL.str = ""
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.str = ""
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5283
		{
			sqlVAL.str = ""
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5288
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5289
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5308
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5315
		{
			return helpWith(sqllex, "INSERT")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5333
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5337
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5350
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5361
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5365
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5375
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5399
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5403
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5416
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5417
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5425
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 914:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5451
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5462
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5466
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5467
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5471
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5491
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5495
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5544
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5548
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5567
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5575
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5579
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5583
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5588
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5589
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5594
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5629
		{
			return helpWith(sqllex, "SELECT")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5630
		{
			return helpWith(sqllex, "VALUES")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5631
		{
			return helpWith(sqllex, "TABLE")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5653
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5666
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5680
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5692
		{
			return helpWith(sqllex, "SELECT")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5696
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5705
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5714
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5736
		{
			return helpWith(sqllex, "TABLE")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5752
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5756
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 961:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5778
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5779
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5787
		{
			sqlVAL.union.val = nil
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5792
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5793
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5797
		{
			sqlVAL.union.val = true
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5801
		{
			sqlVAL.union.val = false
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5805
		{
			sqlVAL.union.val = false
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = true
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5822
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5823
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5826
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5827
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5841
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5861
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5870
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5889
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5898
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5909
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5913
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5922
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5935
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5942
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5955
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5959
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5965
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5966
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5969
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5970
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6023
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6025
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6040
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6042
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6062
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6067
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6072
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6089
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6109
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = flags
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6145
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6159
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6180
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6190
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6194
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6210
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6226
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6238
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6240
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6243
		{
			sqlVAL.union.val = nil
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6259
		{
			sqlVAL.union.val = true
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6263
		{
			sqlVAL.union.val = false
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6303
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6320
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6333
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6339
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6347
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6351
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6357
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6358
		{
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6381
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6385
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6394
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6412
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6416
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6422
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6430
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6451
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6463
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6477
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6486
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6501
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6510
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6530
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6531
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6556
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6560
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6564
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6576
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6580
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6592
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6596
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6616
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = nil
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6662
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6666
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6670
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6682
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6686
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6768
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6783
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6789
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6795
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6817
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = true
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = false
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6863
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6867
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6871
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6872
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6873
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6875
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6882
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6884
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6887
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = true
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = false
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = false
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = tree.Year
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = tree.Month
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = tree.Day
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = tree.Month
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6959
		{
			sqlVAL.union.val = nil
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = tree.Second
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6968
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7003
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7012
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7256
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7298
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7322
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7344
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7478
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7538
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7543
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7552
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7570
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7579
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7618
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7629
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7630
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7643
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7654
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7675
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7677
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7681
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7695
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7705
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7709
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7763
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7768
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7770
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7773
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7775
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7778
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7783
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7785
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7788
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7793
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7795
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7798
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7807
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7808
		{
			return unimplemented(sqllex, "treat")
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7829
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7834
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7839
		{
			return unimplemented(sqllex, "within group")
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7840
		{
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7875
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.str = ""
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7960
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7966
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7979
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8053
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = tree.Any
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = tree.Some
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = tree.All
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8080
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = tree.Div
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = tree.LT
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = tree.GT
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = tree.LE
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = tree.GE
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = tree.NE
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = tree.Like
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8133
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8199
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8364
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8387
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8413
		{
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8414
		{
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8428
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8453
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8473
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8485
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8548
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8559
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8570
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8580
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8782
		{
			sqlVAL.str = ""
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8788
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
