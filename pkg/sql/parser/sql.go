// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8430

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 897,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 732,
	-2, 0,
	-1, 60,
	102, 897,
	174, 897,
	373, 897,
	374, 897,
	-2, 0,
	-1, 74,
	114, 871,
	127, 871,
	182, 871,
	208, 871,
	237, 871,
	245, 871,
	370, 871,
	-2, 860,
	-1, 110,
	119, 548,
	198, 548,
	360, 548,
	-2, 0,
	-1, 115,
	4, 899,
	20, 899,
	21, 899,
	22, 899,
	23, 899,
	25, 899,
	30, 899,
	35, 899,
	36, 899,
	37, 899,
	38, 899,
	39, 899,
	40, 899,
	41, 899,
	42, 899,
	43, 899,
	44, 899,
	46, 899,
	47, 899,
	48, 899,
	49, 899,
	50, 899,
	51, 899,
	52, 899,
	55, 899,
	56, 899,
	57, 899,
	58, 899,
	60, 899,
	61, 899,
	65, 899,
	66, 899,
	67, 899,
	68, 899,
	69, 899,
	71, 899,
	72, 899,
	73, 899,
	74, 899,
	76, 899,
	78, 899,
	79, 899,
	82, 899,
	83, 899,
	91, 899,
	92, 899,
	93, 899,
	94, 899,
	95, 899,
	96, 899,
	97, 899,
	98, 899,
	100, 899,
	102, 899,
	104, 899,
	107, 899,
	108, 899,
	110, 899,
	111, 899,
	113, 899,
	115, 899,
	116, 899,
	117, 899,
	118, 899,
	119, 899,
	120, 899,
	121, 899,
	122, 899,
	123, 899,
	124, 899,
	132, 899,
	133, 899,
	134, 899,
	135, 899,
	136, 899,
	137, 899,
	139, 899,
	141, 899,
	145, 899,
	147, 899,
	148, 899,
	150, 899,
	152, 899,
	153, 899,
	154, 899,
	155, 899,
	156, 899,
	157, 899,
	158, 899,
	159, 899,
	160, 899,
	163, 899,
	164, 899,
	169, 899,
	170, 899,
	171, 899,
	174, 899,
	175, 899,
	176, 899,
	177, 899,
	178, 899,
	179, 899,
	180, 899,
	181, 899,
	183, 899,
	185, 899,
	188, 899,
	189, 899,
	190, 899,
	192, 899,
	193, 899,
	196, 899,
	197, 899,
	198, 899,
	200, 899,
	201, 899,
	203, 899,
	205, 899,
	206, 899,
	209, 899,
	210, 899,
	213, 899,
	215, 899,
	218, 899,
	219, 899,
	220, 899,
	221, 899,
	222, 899,
	224, 899,
	225, 899,
	226, 899,
	227, 899,
	232, 899,
	233, 899,
	234, 899,
	235, 899,
	236, 899,
	238, 899,
	239, 899,
	241, 899,
	242, 899,
	243, 899,
	246, 899,
	247, 899,
	249, 899,
	251, 899,
	252, 899,
	253, 899,
	254, 899,
	255, 899,
	256, 899,
	257, 899,
	258, 899,
	260, 899,
	261, 899,
	262, 899,
	263, 899,
	264, 899,
	266, 899,
	267, 899,
	268, 899,
	269, 899,
	270, 899,
	271, 899,
	272, 899,
	273, 899,
	274, 899,
	276, 899,
	277, 899,
	278, 899,
	279, 899,
	280, 899,
	282, 899,
	283, 899,
	284, 899,
	285, 899,
	286, 899,
	287, 899,
	288, 899,
	290, 899,
	292, 899,
	293, 899,
	294, 899,
	295, 899,
	296, 899,
	297, 899,
	299, 899,
	300, 899,
	301, 899,
	302, 899,
	303, 899,
	304, 899,
	305, 899,
	307, 899,
	308, 899,
	309, 899,
	310, 899,
	311, 899,
	312, 899,
	313, 899,
	314, 899,
	315, 899,
	317, 899,
	318, 899,
	319, 899,
	320, 899,
	322, 899,
	323, 899,
	324, 899,
	325, 899,
	327, 899,
	328, 899,
	329, 899,
	330, 899,
	331, 899,
	332, 899,
	333, 899,
	334, 899,
	335, 899,
	336, 899,
	337, 899,
	338, 899,
	340, 899,
	341, 899,
	343, 899,
	344, 899,
	345, 899,
	346, 899,
	347, 899,
	348, 899,
	349, 899,
	350, 899,
	351, 899,
	352, 899,
	354, 899,
	355, 899,
	356, 899,
	357, 899,
	360, 899,
	361, 899,
	362, 899,
	363, 899,
	365, 899,
	366, 899,
	368, 899,
	369, 899,
	372, 899,
	373, 899,
	374, 899,
	375, 899,
	377, 899,
	379, 899,
	380, 899,
	381, 899,
	382, 899,
	383, 899,
	384, 899,
	386, 899,
	387, 899,
	388, 899,
	393, 899,
	394, 899,
	395, 899,
	396, 899,
	397, 899,
	398, 899,
	-2, 0,
	-1, 136,
	114, 870,
	127, 870,
	182, 870,
	208, 870,
	237, 870,
	245, 870,
	370, 870,
	-2, 863,
	-1, 141,
	1, 793,
	188, 793,
	266, 793,
	271, 793,
	424, 793,
	425, 793,
	-2, 0,
	-1, 143,
	1, 793,
	424, 793,
	425, 793,
	-2, 0,
	-1, 144,
	1, 793,
	424, 793,
	425, 793,
	-2, 0,
	-1, 145,
	1, 797,
	424, 797,
	425, 797,
	-2, 0,
	-1, 171,
	4, 906,
	5, 906,
	6, 906,
	7, 906,
	8, 906,
	9, 906,
	20, 906,
	21, 906,
	22, 906,
	23, 906,
	25, 906,
	30, 906,
	31, 906,
	35, 906,
	36, 906,
	37, 906,
	38, 906,
	39, 906,
	40, 906,
	41, 906,
	42, 906,
	43, 906,
	44, 906,
	46, 906,
	47, 906,
	48, 906,
	49, 906,
	50, 906,
	51, 906,
	52, 906,
	53, 906,
	54, 906,
	55, 906,
	56, 906,
	57, 906,
	58, 906,
	60, 906,
	61, 906,
	63, 906,
	65, 906,
	66, 906,
	67, 906,
	68, 906,
	69, 906,
	71, 906,
	72, 906,
	73, 906,
	74, 906,
	76, 906,
	78, 906,
	79, 906,
	81, 906,
	82, 906,
	83, 906,
	84, 906,
	85, 906,
	86, 906,
	87, 906,
	88, 906,
	89, 906,
	90, 906,
	91, 906,
	92, 906,
	93, 906,
	94, 906,
	95, 906,
	96, 906,
	97, 906,
	98, 906,
	99, 906,
	100, 906,
	102, 906,
	104, 906,
	107, 906,
	108, 906,
	110, 906,
	111, 906,
	113, 906,
	115, 906,
	116, 906,
	117, 906,
	118, 906,
	119, 906,
	120, 906,
	121, 906,
	122, 906,
	123, 906,
	124, 906,
	125, 906,
	126, 906,
	132, 906,
	133, 906,
	134, 906,
	135, 906,
	136, 906,
	137, 906,
	139, 906,
	141, 906,
	144, 906,
	145, 906,
	147, 906,
	148, 906,
	150, 906,
	152, 906,
	153, 906,
	154, 906,
	155, 906,
	156, 906,
	157, 906,
	158, 906,
	159, 906,
	160, 906,
	161, 906,
	163, 906,
	164, 906,
	169, 906,
	170, 906,
	171, 906,
	173, 906,
	174, 906,
	175, 906,
	176, 906,
	177, 906,
	178, 906,
	179, 906,
	180, 906,
	181, 906,
	183, 906,
	185, 906,
	186, 906,
	187, 906,
	188, 906,
	189, 906,
	190, 906,
	191, 906,
	192, 906,
	193, 906,
	196, 906,
	197, 906,
	198, 906,
	200, 906,
	201, 906,
	203, 906,
	204, 906,
	205, 906,
	206, 906,
	207, 906,
	209, 906,
	210, 906,
	213, 906,
	215, 906,
	216, 906,
	217, 906,
	218, 906,
	219, 906,
	220, 906,
	221, 906,
	222, 906,
	223, 906,
	224, 906,
	225, 906,
	226, 906,
	227, 906,
	228, 906,
	230, 906,
	231, 906,
	232, 906,
	233, 906,
	234, 906,
	235, 906,
	236, 906,
	238, 906,
	239, 906,
	242, 906,
	243, 906,
	246, 906,
	247, 906,
	248, 906,
	249, 906,
	250, 906,
	251, 906,
	252, 906,
	253, 906,
	254, 906,
	255, 906,
	256, 906,
	257, 906,
	258, 906,
	260, 906,
	261, 906,
	262, 906,
	263, 906,
	264, 906,
	266, 906,
	267, 906,
	268, 906,
	269, 906,
	270, 906,
	271, 906,
	272, 906,
	273, 906,
	274, 906,
	276, 906,
	277, 906,
	278, 906,
	279, 906,
	280, 906,
	282, 906,
	283, 906,
	284, 906,
	285, 906,
	286, 906,
	287, 906,
	288, 906,
	290, 906,
	291, 906,
	292, 906,
	293, 906,
	294, 906,
	295, 906,
	296, 906,
	297, 906,
	299, 906,
	300, 906,
	301, 906,
	302, 906,
	303, 906,
	304, 906,
	305, 906,
	307, 906,
	308, 906,
	309, 906,
	310, 906,
	311, 906,
	312, 906,
	313, 906,
	314, 906,
	315, 906,
	316, 906,
	317, 906,
	318, 906,
	319, 906,
	320, 906,
	321, 906,
	322, 906,
	323, 906,
	324, 906,
	325, 906,
	327, 906,
	328, 906,
	329, 906,
	330, 906,
	331, 906,
	332, 906,
	333, 906,
	334, 906,
	335, 906,
	336, 906,
	337, 906,
	338, 906,
	340, 906,
	341, 906,
	343, 906,
	344, 906,
	345, 906,
	346, 906,
	347, 906,
	348, 906,
	349, 906,
	350, 906,
	351, 906,
	352, 906,
	354, 906,
	355, 906,
	356, 906,
	357, 906,
	360, 906,
	361, 906,
	362, 906,
	363, 906,
	364, 906,
	365, 906,
	366, 906,
	368, 906,
	369, 906,
	372, 906,
	373, 906,
	374, 906,
	375, 906,
	376, 906,
	377, 906,
	379, 906,
	380, 906,
	381, 906,
	382, 906,
	383, 906,
	384, 906,
	386, 906,
	387, 906,
	388, 906,
	393, 906,
	394, 906,
	395, 906,
	396, 906,
	397, 906,
	398, 906,
	399, 906,
	407, 906,
	412, 906,
	413, 906,
	414, 906,
	421, 906,
	427, 906,
	-2, 0,
	-1, 174,
	1, 57,
	425, 57,
	-2, 897,
	-1, 207,
	423, 1484,
	426, 1484,
	-2, 591,
	-1, 208,
	423, 1486,
	426, 1486,
	-2, 592,
	-1, 209,
	423, 1485,
	426, 1485,
	-2, 593,
	-1, 210,
	426, 1426,
	-2, 594,
	-1, 622,
	143, 1601,
	358, 1601,
	404, 1601,
	423, 1601,
	-2, 0,
	-1, 623,
	143, 1524,
	358, 1524,
	404, 1524,
	423, 1524,
	-2, 0,
	-1, 625,
	143, 1675,
	358, 1675,
	404, 1675,
	423, 1675,
	-2, 0,
	-1, 627,
	143, 1704,
	358, 1704,
	404, 1704,
	423, 1704,
	-2, 0,
	-1, 634,
	143, 1606,
	358, 1606,
	404, 1606,
	423, 1606,
	-2, 421,
	-1, 669,
	1, 521,
	420, 521,
	422, 521,
	424, 521,
	425, 521,
	-2, 0,
	-1, 670,
	1, 590,
	140, 590,
	420, 590,
	422, 590,
	424, 590,
	425, 590,
	-2, 0,
	-1, 676,
	1, 535,
	420, 535,
	422, 535,
	424, 535,
	425, 535,
	-2, 0,
	-1, 678,
	1, 539,
	420, 539,
	422, 539,
	424, 539,
	425, 539,
	-2, 0,
	-1, 680,
	1, 549,
	420, 549,
	422, 549,
	424, 549,
	425, 549,
	-2, 0,
	-1, 681,
	1, 555,
	420, 555,
	422, 555,
	424, 555,
	425, 555,
	-2, 0,
	-1, 682,
	1, 558,
	420, 558,
	422, 558,
	424, 558,
	425, 558,
	-2, 0,
	-1, 686,
	1, 572,
	420, 572,
	422, 572,
	424, 572,
	425, 572,
	-2, 0,
	-1, 687,
	1, 574,
	420, 574,
	422, 574,
	424, 574,
	425, 574,
	-2, 0,
	-1, 715,
	127, 910,
	208, 910,
	237, 910,
	-2, 866,
	-1, 723,
	127, 909,
	208, 909,
	237, 909,
	-2, 864,
	-1, 750,
	421, 1780,
	-2, 1198,
	-1, 751,
	421, 1781,
	-2, 1199,
	-1, 780,
	421, 1478,
	-2, 1469,
	-1, 781,
	5, 1048,
	421, 1493,
	-2, 1484,
	-1, 782,
	421, 1494,
	-2, 1485,
	-1, 789,
	5, 1032,
	-2, 1514,
	-1, 790,
	5, 1033,
	-2, 1519,
	-1, 791,
	5, 1034,
	-2, 1518,
	-1, 792,
	5, 1035,
	-2, 1700,
	-1, 793,
	5, 1036,
	-2, 1608,
	-1, 794,
	5, 1037,
	-2, 1668,
	-1, 795,
	5, 1038,
	-2, 1670,
	-1, 796,
	5, 1039,
	-2, 1671,
	-1, 797,
	5, 1040,
	-2, 1672,
	-1, 798,
	5, 1041,
	-2, 1680,
	-1, 799,
	5, 1042,
	-2, 1712,
	-1, 800,
	5, 1043,
	-2, 1578,
	-1, 801,
	5, 1044,
	-2, 1513,
	-1, 802,
	5, 1045,
	-2, 1616,
	-1, 803,
	5, 1046,
	-2, 1617,
	-1, 804,
	5, 1047,
	-2, 1582,
	-1, 805,
	5, 1096,
	421, 1096,
	-2, 1747,
	-1, 825,
	5, 1069,
	-2, 1515,
	-1, 826,
	5, 1087,
	-2, 1543,
	-1, 828,
	5, 1061,
	-2, 1565,
	-1, 829,
	5, 1062,
	-2, 1566,
	-1, 830,
	5, 1053,
	-2, 1581,
	-1, 831,
	5, 1054,
	-2, 1583,
	-1, 832,
	5, 1055,
	-2, 1584,
	-1, 833,
	5, 1056,
	-2, 1585,
	-1, 834,
	5, 1020,
	-2, 1591,
	-1, 835,
	5, 1021,
	-2, 1592,
	-1, 836,
	5, 1084,
	-2, 1690,
	-1, 837,
	5, 1094,
	-2, 1702,
	-1, 838,
	5, 1059,
	-2, 1727,
	-1, 839,
	5, 1086,
	-2, 1728,
	-1, 840,
	5, 1068,
	-2, 1729,
	-1, 841,
	5, 1086,
	-2, 1730,
	-1, 842,
	5, 1086,
	-2, 1731,
	-1, 843,
	5, 1051,
	-2, 1734,
	-1, 844,
	5, 1051,
	-2, 1735,
	-1, 847,
	5, 1076,
	-2, 1739,
	-1, 849,
	5, 1052,
	-2, 1745,
	-1, 850,
	5, 1057,
	-2, 1746,
	-1, 852,
	5, 1051,
	-2, 1751,
	-1, 855,
	5, 1060,
	-2, 1756,
	-1, 856,
	5, 1058,
	-2, 1758,
	-1, 858,
	5, 1088,
	-2, 1760,
	-1, 859,
	5, 1090,
	-2, 1761,
	-1, 860,
	5, 1092,
	-2, 1762,
	-1, 863,
	5, 1083,
	-2, 1766,
	-1, 933,
	421, 1493,
	-2, 1484,
	-1, 948,
	282, 1466,
	414, 1466,
	-2, 1465,
	-1, 1097,
	256, 895,
	-2, 717,
	-1, 1106,
	240, 1488,
	-2, 0,
	-1, 1149,
	1, 288,
	420, 288,
	424, 288,
	425, 288,
	-2, 869,
	-1, 1152,
	4, 1765,
	10, 1765,
	11, 1765,
	13, 1765,
	14, 1765,
	15, 1765,
	16, 1765,
	17, 1765,
	18, 1765,
	20, 1765,
	21, 1765,
	22, 1765,
	23, 1765,
	25, 1765,
	28, 1765,
	30, 1765,
	32, 1765,
	35, 1765,
	36, 1765,
	37, 1765,
	38, 1765,
	39, 1765,
	40, 1765,
	41, 1765,
	42, 1765,
	43, 1765,
	44, 1765,
	46, 1765,
	47, 1765,
	48, 1765,
	49, 1765,
	50, 1765,
	51, 1765,
	52, 1765,
	55, 1765,
	56, 1765,
	57, 1765,
	58, 1765,
	60, 1765,
	61, 1765,
	62, 1765,
	65, 1765,
	66, 1765,
	67, 1765,
	68, 1765,
	69, 1765,
	70, 1765,
	71, 1765,
	72, 1765,
	73, 1765,
	74, 1765,
	76, 1765,
	77, 1765,
	78, 1765,
	79, 1765,
	81, 1765,
	82, 1765,
	83, 1765,
	91, 1765,
	92, 1765,
	93, 1765,
	94, 1765,
	95, 1765,
	96, 1765,
	97, 1765,
	98, 1765,
	100, 1765,
	102, 1765,
	104, 1765,
	107, 1765,
	108, 1765,
	110, 1765,
	111, 1765,
	113, 1765,
	115, 1765,
	116, 1765,
	117, 1765,
	118, 1765,
	119, 1765,
	120, 1765,
	121, 1765,
	122, 1765,
	123, 1765,
	124, 1765,
	128, 1765,
	129, 1765,
	130, 1765,
	131, 1765,
	132, 1765,
	133, 1765,
	134, 1765,
	135, 1765,
	136, 1765,
	137, 1765,
	138, 1765,
	139, 1765,
	141, 1765,
	144, 1765,
	145, 1765,
	147, 1765,
	148, 1765,
	150, 1765,
	152, 1765,
	153, 1765,
	154, 1765,
	155, 1765,
	156, 1765,
	157, 1765,
	158, 1765,
	159, 1765,
	160, 1765,
	161, 1765,
	162, 1765,
	163, 1765,
	164, 1765,
	165, 1765,
	166, 1765,
	167, 1765,
	169, 1765,
	170, 1765,
	171, 1765,
	173, 1765,
	174, 1765,
	175, 1765,
	176, 1765,
	177, 1765,
	178, 1765,
	179, 1765,
	180, 1765,
	181, 1765,
	183, 1765,
	185, 1765,
	186, 1765,
	187, 1765,
	188, 1765,
	189, 1765,
	190, 1765,
	191, 1765,
	192, 1765,
	193, 1765,
	194, 1765,
	195, 1765,
	196, 1765,
	197, 1765,
	198, 1765,
	200, 1765,
	201, 1765,
	203, 1765,
	204, 1765,
	205, 1765,
	206, 1765,
	207, 1765,
	209, 1765,
	210, 1765,
	213, 1765,
	214, 1765,
	215, 1765,
	218, 1765,
	219, 1765,
	220, 1765,
	221, 1765,
	222, 1765,
	223, 1765,
	224, 1765,
	225, 1765,
	226, 1765,
	227, 1765,
	230, 1765,
	232, 1765,
	233, 1765,
	234, 1765,
	235, 1765,
	236, 1765,
	238, 1765,
	239, 1765,
	242, 1765,
	243, 1765,
	244, 1765,
	246, 1765,
	247, 1765,
	249, 1765,
	251, 1765,
	252, 1765,
	253, 1765,
	254, 1765,
	255, 1765,
	256, 1765,
	257, 1765,
	258, 1765,
	260, 1765,
	261, 1765,
	262, 1765,
	263, 1765,
	264, 1765,
	266, 1765,
	267, 1765,
	268, 1765,
	269, 1765,
	270, 1765,
	271, 1765,
	272, 1765,
	273, 1765,
	274, 1765,
	276, 1765,
	277, 1765,
	278, 1765,
	279, 1765,
	280, 1765,
	281, 1765,
	282, 1765,
	283, 1765,
	284, 1765,
	285, 1765,
	286, 1765,
	287, 1765,
	288, 1765,
	290, 1765,
	291, 1765,
	292, 1765,
	293, 1765,
	294, 1765,
	295, 1765,
	296, 1765,
	297, 1765,
	298, 1765,
	299, 1765,
	300, 1765,
	301, 1765,
	302, 1765,
	303, 1765,
	304, 1765,
	305, 1765,
	307, 1765,
	308, 1765,
	309, 1765,
	310, 1765,
	311, 1765,
	312, 1765,
	313, 1765,
	314, 1765,
	315, 1765,
	317, 1765,
	318, 1765,
	319, 1765,
	320, 1765,
	321, 1765,
	322, 1765,
	323, 1765,
	324, 1765,
	325, 1765,
	327, 1765,
	328, 1765,
	329, 1765,
	330, 1765,
	331, 1765,
	332, 1765,
	333, 1765,
	334, 1765,
	335, 1765,
	336, 1765,
	337, 1765,
	338, 1765,
	340, 1765,
	341, 1765,
	343, 1765,
	344, 1765,
	345, 1765,
	346, 1765,
	347, 1765,
	348, 1765,
	349, 1765,
	350, 1765,
	351, 1765,
	352, 1765,
	354, 1765,
	355, 1765,
	356, 1765,
	357, 1765,
	360, 1765,
	361, 1765,
	362, 1765,
	363, 1765,
	365, 1765,
	366, 1765,
	368, 1765,
	369, 1765,
	372, 1765,
	373, 1765,
	374, 1765,
	375, 1765,
	377, 1765,
	379, 1765,
	380, 1765,
	381, 1765,
	382, 1765,
	383, 1765,
	384, 1765,
	386, 1765,
	387, 1765,
	388, 1765,
	393, 1765,
	394, 1765,
	395, 1765,
	396, 1765,
	397, 1765,
	398, 1765,
	399, 1765,
	400, 1765,
	402, 1765,
	403, 1765,
	404, 1765,
	405, 1765,
	406, 1765,
	407, 1765,
	409, 1765,
	410, 1765,
	411, 1765,
	412, 1765,
	413, 1765,
	414, 1765,
	415, 1765,
	416, 1765,
	417, 1765,
	419, 1765,
	422, 1765,
	423, 1765,
	426, 1765,
	427, 1765,
	-2, 0,
	-1, 1171,
	143, 1675,
	358, 1675,
	404, 1675,
	423, 1675,
	-2, 0,
	-1, 1200,
	143, 1704,
	358, 1704,
	404, 1704,
	423, 1704,
	-2, 0,
	-1, 1201,
	188, 805,
	266, 805,
	271, 805,
	-2, 408,
	-1, 1280,
	127, 909,
	208, 909,
	237, 909,
	-2, 867,
	-1, 1364,
	114, 871,
	127, 871,
	182, 871,
	208, 871,
	237, 871,
	245, 871,
	370, 871,
	-2, 1241,
	-1, 1414,
	422, 1361,
	-2, 0,
	-1, 1422,
	188, 805,
	266, 805,
	271, 805,
	-2, 800,
	-1, 1456,
	114, 871,
	127, 871,
	182, 871,
	208, 871,
	237, 871,
	245, 871,
	370, 871,
	-2, 979,
	-1, 1663,
	188, 805,
	266, 805,
	271, 805,
	-2, 410,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1131,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1132,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1133,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1134,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1135,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1136,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1137,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1138,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1150,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1151,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1152,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1157,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1161,
	-1, 1806,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1169,
	-1, 1807,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1170,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1171,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1172,
	-1, 1890,
	5, 1048,
	143, 1372,
	421, 1493,
	-2, 1484,
	-1, 1891,
	143, 1373,
	-2, 1723,
	-1, 1892,
	143, 1374,
	-2, 1605,
	-1, 1893,
	143, 1375,
	-2, 1544,
	-1, 1894,
	143, 1376,
	-2, 1573,
	-1, 1895,
	143, 1377,
	-2, 1604,
	-1, 1896,
	143, 1378,
	-2, 1667,
	-1, 1970,
	1, 980,
	81, 980,
	114, 980,
	127, 980,
	144, 980,
	149, 980,
	151, 980,
	173, 980,
	182, 980,
	191, 980,
	204, 980,
	208, 980,
	223, 980,
	237, 980,
	240, 980,
	245, 980,
	289, 980,
	291, 980,
	370, 980,
	378, 980,
	390, 980,
	391, 980,
	401, 980,
	420, 980,
	422, 980,
	424, 980,
	425, 980,
	426, 980,
	-2, 979,
	-1, 1975,
	421, 1470,
	-2, 1482,
	-1, 2057,
	422, 1431,
	426, 1431,
	-2, 1458,
	-1, 2183,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1159,
	-1, 2184,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1163,
	-1, 2190,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1165,
	-1, 2421,
	256, 895,
	-2, 717,
	-1, 2489,
	188, 805,
	266, 805,
	271, 805,
	-2, 407,
	-1, 2507,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1167,
	-1, 2514,
	186, 0,
	187, 0,
	230, 0,
	-2, 1186,
	-1, 2575,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1216,
	-1, 2576,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1217,
	-1, 2577,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1218,
	-1, 2581,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1222,
	-1, 2582,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1223,
	-1, 2583,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1224,
	-1, 2625,
	421, 1471,
	-2, 1483,
	-1, 2739,
	186, 0,
	187, 0,
	230, 0,
	-2, 1187,
	-1, 2742,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1190,
	-1, 2743,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1192,
	-1, 2888,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1191,
	-1, 2889,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1193,
	-1, 2899,
	186, 0,
	-2, 1225,
	-1, 2987,
	186, 0,
	-2, 1226,
	-1, 3081,
	38, 0,
	161, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1726,
}

const sqlPrivate = 57344

const sqlLast = 58487

var sqlAct = [...]int{

	782, 2670, 1930, 3143, 3080, 2927, 3089, 2084, 3058, 2839,
	3060, 3045, 3090, 2545, 3091, 3057, 1081, 2113, 2916, 2991,
	3079, 2634, 2092, 2854, 1761, 2436, 2176, 2878, 2682, 2810,
	2687, 1593, 1055, 1962, 952, 2795, 1139, 724, 2459, 2220,
	2428, 209, 2218, 2461, 1821, 2635, 497, 1283, 2692, 2441,
	2285, 2055, 774, 497, 1451, 492, 1594, 2059, 2338, 2081,
	497, 1103, 2903, 497, 497, 1449, 497, 209, 2430, 497,
	497, 1135, 2327, 1369, 1459, 1542, 497, 945, 2773, 968,
	2303, 590, 2093, 1541, 497, 2058, 1538, 1547, 1430, 1987,
	2314, 1550, 2040, 1488, 1963, 1752, 1958, 779, 2598, 2284,
	547, 962, 1833, 1747, 2992, 2172, 1372, 543, 2440, 1504,
	568, 28, 73, 1422, 1978, 2403, 1510, 1539, 865, 732,
	130, 1431, 1861, 1467, 765, 1688, 1818, 2636, 1469, 1927,
	1843, 2840, 918, 2015, 2041, 1203, 1400, 582, 1855, 1402,
	1132, 1122, 2056, 494, 210, 2086, 211, 2062, 1950, 1834,
	921, 1886, 1563, 954, 2014, 900, 1150, 1440, 1359, 632,
	1935, 136, 2345, 1284, 1282, 772, 497, 497, 1687, 585,
	137, 626, 612, 773, 1148, 1557, 1119, 723, 1059, 1965,
	130, 1480, 923, 1421, 477, 661, 1288, 898, 2614, 2205,
	3170, 2615, 1565, 205, 1944, 493, 1565, 1565, 497, 497,
	497, 957, 497, 497, 971, 971, 605, 2114, 3164, 1450,
	477, 3163, 1944, 497, 497, 1944, 2042, 2085, 3140, 3137,
	3115, 3109, 2809, 1519, 2809, 1944, 3108, 3105, 3102, 3099,
	1944, 3106, 3103, 1519, 3077, 2502, 480, 2479, 1519, 540,
	3076, 1577, 3075, 3074, 1519, 597, 1577, 1577, 915, 728,
	3040, 729, 3027, 2447, 2126, 948, 1519, 3020, 2448, 3018,
	599, 2809, 480, 2809, 3016, 2989, 738, 728, 2809, 2126,
	1944, 929, 2971, 2961, 965, 2956, 2708, 2809, 2954, 1519,
	2945, 1513, 2809, 2944, 1519, 28, 2937, 1519, 3041, 2936,
	1519, 2909, 716, 2809, 130, 1519, 2042, 2975, 2890, 2834,
	1080, 715, 2126, 1944, 2830, 2808, 2741, 2706, 1944, 2809,
	2126, 2699, 2698, 2620, 2610, 2604, 2699, 2621, 2611, 1944,
	2523, 2601, 2518, 2469, 1519, 733, 1944, 2408, 1174, 2300,
	938, 942, 947, 1944, 2416, 2116, 2252, 2251, 2245, 544,
	1944, 1944, 2246, 2244, 2211, 901, 901, 1944, 2144, 1074,
	2212, 2125, 1944, 1937, 902, 2126, 477, 1061, 1186, 1060,
	1577, 2112, 575, 146, 546, 1582, 2109, 2051, 39, 1519,
	1944, 1519, 926, 40, 1943, 1519, 2601, 1581, 1944, 40,
	141, 1582, 904, 1936, 905, 1666, 2257, 2258, 44, 2275,
	2276, 2277, 2708, 171, 44, 2030, 1175, 1976, 2257, 2258,
	2408, 2175, 2155, 1518, 2737, 1426, 1838, 1058, 480, 46,
	143, 174, 1170, 1169, 171, 2257, 2258, 574, 2275, 2276,
	2277, 45, 2449, 51, 1299, 1300, 1168, 1566, 2788, 173,
	1944, 1566, 1566, 2736, 1167, 1166, 1165, 1164, 1163, 2089,
	1162, 2450, 1969, 52, 1161, 576, 2272, 54, 2219, 1302,
	173, 58, 1160, 59, 578, 144, 1079, 1159, 60, 59,
	72, 1299, 1300, 1158, 60, 61, 1157, 1156, 1155, 1154,
	172, 906, 903, 722, 721, 2272, 1301, 720, 719, 165,
	718, 714, 713, 712, 2257, 2258, 1302, 166, 711, 62,
	710, 172, 63, 709, 708, 707, 1685, 706, 63, 705,
	704, 700, 2257, 2258, 699, 1073, 497, 497, 138, 497,
	957, 957, 497, 1301, 2263, 497, 698, 659, 497, 658,
	1175, 657, 656, 655, 497, 654, 2263, 653, 652, 138,
	651, 650, 1370, 649, 497, 497, 497, 497, 497, 957,
	957, 2447, 648, 2263, 2272, 647, 957, 646, 1858, 645,
	2257, 2258, 1307, 2275, 2276, 2277, 1527, 644, 643, 1299,
	1300, 642, 2278, 641, 1096, 640, 1573, 2257, 2258, 2746,
	1564, 1731, 639, 638, 637, 636, 1143, 621, 497, 620,
	497, 619, 618, 617, 1302, 616, 1093, 531, 530, 1307,
	2273, 2278, 497, 503, 64, 502, 501, 1067, 483, 1072,
	64, 1078, 2273, 482, 171, 481, 1859, 65, 195, 194,
	2272, 1301, 2263, 193, 192, 497, 1108, 1519, 191, 2273,
	190, 189, 139, 66, 188, 67, 497, 75, 139, 66,
	2263, 67, 187, 68, 3096, 186, 1936, 145, 185, 1136,
	173, 1175, 69, 171, 184, 183, 171, 2257, 2258, 171,
	2275, 2276, 2277, 171, 577, 182, 1121, 110, 729, 181,
	83, 1172, 180, 110, 179, 2517, 957, 178, 177, 176,
	1860, 1857, 142, 175, 2274, 2700, 1126, 1129, 2263, 173,
	2618, 172, 173, 2341, 780, 173, 2274, 1307, 2273, 173,
	165, 2217, 2207, 2164, 2052, 2263, 2045, 1876, 166, 1151,
	1452, 1874, 497, 2274, 1691, 1466, 1179, 2272, 115, 1376,
	1217, 1083, 1064, 1184, 1329, 1330, 1331, 3078, 140, 138,
	172, 1872, 1295, 172, 1299, 1300, 172, 2982, 1870, 165,
	172, 1868, 165, 2257, 2258, 165, 2957, 166, 2926, 165,
	166, 1201, 2876, 166, 2872, 2978, 2862, 166, 2976, 1302,
	1590, 2772, 2771, 1281, 2273, 1280, 1211, 1862, 545, 1367,
	1215, 2088, 1068, 1322, 138, 1524, 2765, 4, 138, 2411,
	1062, 2273, 2274, 2758, 2757, 2263, 1301, 2756, 2269, 2270,
	2271, 2752, 2751, 2750, 1321, 2268, 2266, 2267, 2259, 2260,
	2261, 2262, 2264, 2265, 2749, 2720, 2718, 1198, 2266, 2267,
	2259, 2260, 2261, 2262, 2264, 2265, 2624, 2269, 2270, 2271,
	2257, 2258, 2595, 1589, 2268, 2266, 2267, 2259, 2260, 2261,
	2262, 2264, 2265, 2278, 2594, 2593, 2531, 2735, 1305, 1306,
	1308, 1309, 2407, 2336, 1279, 2296, 914, 2283, 2274, 2256,
	2253, 2250, 1324, 1325, 1326, 1327, 2249, 1323, 1218, 1856,
	2247, 2273, 1307, 2225, 2224, 2274, 2206, 2117, 932, 1970,
	1295, 2263, 1829, 1303, 1304, 1305, 1306, 1308, 1309, 729,
	1294, 1299, 1300, 2131, 1522, 1373, 1380, 1362, 3168, 1329,
	1330, 1331, 3151, 2268, 2266, 2267, 2259, 2260, 2261, 2262,
	2264, 2265, 3150, 1082, 716, 497, 1302, 2547, 3069, 3064,
	497, 1686, 2016, 715, 2259, 2260, 2261, 2262, 2264, 2265,
	2171, 3022, 3013, 1291, 1292, 3012, 1437, 3009, 1428, 3008,
	1296, 3003, 778, 1301, 3000, 2974, 497, 2861, 1322, 2973,
	1823, 2922, 2257, 2258, 2901, 2274, 2848, 2273, 2263, 2844,
	2842, 2787, 2269, 2270, 2271, 2770, 2473, 2320, 2709, 2268,
	2266, 2267, 2259, 2260, 2261, 2262, 2264, 2265, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 2685, 2267, 2259,
	2260, 2261, 2262, 2264, 2265, 2677, 1398, 2676, 1460, 1401,
	2674, 2652, 2651, 2641, 1404, 2640, 2606, 1830, 2513, 2475,
	2467, 1447, 1411, 2392, 2376, 1328, 1909, 1434, 1435, 1307,
	2355, 2354, 2299, 2234, 2233, 2230, 1363, 2199, 1403, 1299,
	1300, 1408, 1323, 2133, 2273, 1973, 1955, 1942, 929, 1866,
	929, 2274, 2355, 1533, 1465, 1448, 1329, 1330, 1331, 1429,
	731, 1420, 1419, 1414, 1302, 729, 1413, 130, 1412, 2269,
	2270, 2271, 1410, 1409, 1406, 1405, 2268, 2266, 2267, 2259,
	2260, 2261, 2262, 2264, 2265, 1396, 1395, 1394, 957, 497,
	2263, 1301, 1393, 1487, 1392, 971, 171, 1425, 1391, 1423,
	1475, 1391, 1390, 1457, 1389, 1322, 1388, 1387, 1386, 901,
	1385, 1384, 1377, 497, 971, 497, 497, 1427, 1362, 1197,
	1181, 1591, 1176, 209, 1153, 1147, 928, 1511, 2274, 2994,
	2875, 2744, 173, 1454, 1534, 2717, 2613, 497, 497, 2609,
	2210, 1956, 2128, 1373, 497, 2471, 497, 1875, 497, 1360,
	1546, 1873, 497, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 2268, 2266, 2267, 2259, 2260, 2261, 2262, 2264,
	2265, 1871, 2979, 172, 1685, 2977, 1685, 1506, 1869, 1461,
	1580, 1867, 165, 2143, 957, 2431, 771, 2925, 1481, 1323,
	166, 1685, 2257, 2258, 1417, 2867, 2711, 2710, 2616, 2042,
	1418, 1452, 497, 957, 209, 497, 497, 957, 1214, 1415,
	1391, 138, 2950, 957, 1554, 1416, 209, 497, 1192, 1277,
	497, 497, 2396, 2650, 2391, 1552, 497, 2387, 896, 2142,
	1661, 2018, 477, 1061, 2375, 1060, 2291, 2290, 2289, 2288,
	1530, 2181, 2259, 2260, 2261, 2262, 2264, 2265, 971, 1649,
	1659, 1210, 1382, 1672, 2114, 1543, 2904, 957, 957, 3097,
	497, 2481, 897, 2386, 1599, 497, 477, 1517, 1500, 1858,
	209, 497, 2085, 497, 2549, 497, 1121, 497, 1844, 497,
	2215, 1399, 3107, 3104, 480, 913, 2443, 2630, 3054, 497,
	2683, 497, 1439, 1681, 1222, 2119, 539, 510, 200, 497,
	497, 497, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 1568,
	3026, 3098, 1570, 3130, 1270, 1572, 1537, 2822, 480, 1575,
	1556, 1653, 1379, 1559, 1256, 890, 2145, 1859, 497, 888,
	1618, 1561, 971, 2491, 3167, 886, 2949, 1151, 2948, 1989,
	892, 2947, 2946, 883, 1663, 2664, 1717, 477, 3131, 1268,
	2659, 2658, 2627, 1715, 2626, 1443, 1096, 2229, 1583, 477,
	930, 1723, 1734, 2838, 171, 1922, 2261, 2262, 2264, 2265,
	1921, 1482, 520, 1198, 1684, 1587, 2228, 1596, 1725, 1980,
	538, 509, 1599, 1599, 1446, 1660, 1753, 1760, 2227, 2472,
	2655, 1860, 1857, 1269, 2226, 2185, 1835, 1585, 1479, 480,
	173, 1367, 1441, 1255, 2115, 2035, 1835, 971, 1673, 1650,
	1848, 480, 1689, 477, 1677, 1444, 1920, 2029, 2025, 1697,
	1483, 1484, 1992, 1212, 2006, 1805, 1980, 1424, 1057, 1884,
	1919, 1763, 1220, 2082, 1442, 1188, 2981, 1979, 1889, 1889,
	2494, 172, 1900, 1902, 521, 1907, 1309, 1835, 1618, 1618,
	165, 2316, 2039, 702, 3025, 497, 1729, 497, 166, 727,
	1085, 1730, 1934, 1706, 1693, 480, 1219, 2669, 690, 1213,
	1470, 1676, 1675, 1471, 1685, 1682, 1732, 1733, 1862, 138,
	716, 971, 497, 716, 716, 1461, 2050, 1751, 737, 1743,
	1820, 497, 1744, 1745, 497, 1596, 1596, 971, 1974, 610,
	1728, 497, 1445, 1299, 1300, 729, 1820, 1885, 1999, 497,
	1841, 729, 611, 2496, 3072, 1827, 611, 497, 1700, 2929,
	1825, 2148, 2495, 1230, 1971, 1298, 1189, 726, 1302, 497,
	2129, 1196, 957, 2150, 1957, 1998, 1560, 2643, 1967, 1968,
	2161, 1862, 1816, 497, 971, 1991, 1947, 1831, 3122, 497,
	497, 2173, 2174, 1839, 3153, 1301, 1472, 691, 1981, 2022,
	1844, 2818, 1814, 2151, 497, 1254, 1679, 497, 1474, 929,
	1856, 196, 1599, 2438, 3005, 2149, 2009, 2383, 2538, 1686,
	2016, 1686, 2016, 1502, 948, 1251, 929, 1565, 1897, 2315,
	728, 497, 1191, 497, 1918, 497, 1686, 2016, 497, 2265,
	497, 729, 497, 2483, 497, 497, 2023, 497, 957, 957,
	957, 2008, 1932, 957, 2036, 1276, 1993, 1995, 1476, 3130,
	497, 2003, 497, 1952, 1953, 1940, 1941, 1931, 1985, 2541,
	1948, 1307, 690, 1252, 2490, 932, 901, 932, 1618, 1457,
	2037, 2001, 2539, 523, 522, 2107, 2108, 2032, 1984, 2007,
	1619, 1990, 737, 2378, 1267, 1499, 1485, 1810, 1329, 1330,
	1331, 2024, 201, 2008, 2047, 1811, 2049, 1397, 1812, 2492,
	1221, 1664, 1817, 2653, 1727, 2103, 507, 1680, 2486, 2017,
	2019, 2020, 2021, 497, 884, 1596, 692, 766, 884, 2196,
	2816, 1985, 477, 1061, 885, 2043, 894, 2134, 2087, 893,
	2087, 2118, 884, 1477, 1716, 1507, 532, 1322, 2105, 2194,
	1470, 1714, 1202, 1471, 514, 725, 1862, 3093, 2096, 2110,
	1977, 691, 971, 2121, 497, 2806, 3146, 3037, 478, 1862,
	2373, 130, 3121, 495, 497, 2091, 497, 202, 1084, 2100,
	516, 2101, 130, 2102, 480, 2104, 2644, 542, 1503, 1985,
	586, 593, 2803, 542, 478, 3038, 586, 608, 497, 497,
	497, 1586, 497, 615, 2120, 2485, 1151, 2439, 2130, 2111,
	2660, 635, 2098, 1651, 2880, 1190, 2138, 2930, 2139, 2482,
	693, 497, 1207, 1470, 2132, 1477, 1471, 2073, 1231, 3154,
	2367, 1323, 2804, 703, 1477, 2187, 1472, 537, 2817, 1443,
	1532, 1813, 2026, 1404, 2191, 1411, 513, 2884, 1474, 1815,
	2895, 1819, 1401, 2952, 2135, 2192, 2438, 1826, 694, 2197,
	2137, 2395, 1566, 2232, 204, 2366, 1357, 3094, 1446, 1473,
	2166, 2146, 1966, 1951, 1837, 1699, 1232, 728, 203, 1229,
	1264, 1297, 529, 1477, 201, 2722, 1949, 1195, 2712, 1187,
	692, 2729, 2484, 542, 542, 3120, 2202, 1207, 1476, 1444,
	1208, 931, 2369, 1367, 524, 1209, 1802, 2879, 497, 1472,
	1509, 3092, 536, 928, 1238, 928, 199, 3129, 2188, 1686,
	1683, 1474, 2371, 2222, 2223, 495, 495, 495, 1508, 963,
	495, 3127, 2584, 2768, 2168, 3095, 2853, 2851, 1207, 3144,
	478, 1063, 2170, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 197, 2079, 510, 2885, 1505, 2077, 1536, 1265, 202,
	1436, 2799, 2370, 1185, 2800, 1173, 500, 1287, 508, 2400,
	1515, 1476, 2939, 2404, 2938, 1208, 2920, 1483, 1484, 2997,
	1209, 2629, 2351, 1477, 693, 200, 1445, 2347, 2193, 3159,
	2080, 506, 1286, 2821, 2078, 198, 2195, 2881, 2802, 2186,
	2820, 3145, 2298, 505, 1555, 1545, 729, 1544, 2805, 971,
	1468, 1540, 1535, 2301, 2537, 2310, 1208, 1739, 2308, 2309,
	3046, 1209, 694, 1266, 1720, 497, 1667, 2688, 497, 1800,
	1803, 3147, 515, 2328, 1286, 497, 539, 509, 497, 497,
	971, 2855, 2921, 2214, 2010, 2357, 204, 511, 497, 497,
	497, 534, 2331, 2356, 497, 2585, 1477, 497, 2179, 1694,
	203, 2324, 2586, 2769, 497, 497, 497, 497, 497, 2317,
	1946, 2332, 2333, 1285, 2054, 1799, 1945, 497, 1118, 2053,
	2071, 2323, 2305, 2409, 497, 726, 535, 2340, 1116, 2671,
	2312, 2313, 1357, 580, 2318, 2335, 497, 957, 199, 2322,
	497, 1107, 1287, 2325, 2801, 929, 971, 1740, 1599, 1473,
	497, 2348, 2352, 929, 929, 1285, 971, 929, 2329, 2319,
	538, 3158, 603, 971, 2293, 2294, 2295, 1106, 2302, 2819,
	533, 573, 36, 197, 3134, 497, 3, 497, 2377, 497,
	525, 929, 957, 497, 957, 957, 957, 930, 497, 930,
	497, 1096, 1239, 2841, 497, 2399, 572, 35, 2417, 497,
	596, 497, 1439, 2069, 2774, 2918, 2599, 200, 497, 2011,
	2012, 571, 32, 2384, 1618, 2342, 2344, 198, 1475, 484,
	1865, 1985, 1473, 2374, 3136, 497, 497, 2445, 526, 1801,
	957, 2358, 2433, 2361, 2434, 2372, 932, 2919, 1096, 2405,
	2850, 2388, 2393, 1475, 2900, 2466, 1671, 497, 2379, 1274,
	2767, 2382, 2390, 932, 2330, 2668, 2394, 2389, 2286, 2353,
	2419, 1596, 2410, 2477, 527, 1443, 528, 2359, 2413, 2363,
	2364, 882, 1511, 495, 1091, 497, 495, 2512, 1511, 495,
	2406, 1261, 963, 2380, 2458, 1111, 2248, 2381, 2414, 1599,
	497, 495, 1259, 2470, 1446, 2432, 2198, 2423, 570, 79,
	1117, 495, 495, 495, 495, 963, 2136, 1669, 569, 78,
	1115, 729, 1441, 566, 23, 579, 2451, 2476, 971, 567,
	24, 1670, 565, 30, 2034, 1444, 2442, 1249, 971, 2005,
	2457, 1247, 564, 21, 1526, 2442, 562, 20, 537, 2849,
	1245, 2515, 130, 497, 1442, 635, 36, 593, 1464, 601,
	602, 936, 504, 563, 19, 1618, 1275, 1182, 1713, 495,
	1243, 2287, 1599, 2452, 2453, 2454, 2163, 2455, 2456, 2489,
	2159, 35, 2160, 2162, 2533, 2534, 2535, 2158, 2487, 2488,
	2444, 2140, 1193, 1241, 2550, 2498, 32, 594, 595, 2500,
	1273, 2493, 1703, 635, 552, 15, 553, 16, 1235, 1599,
	1599, 1652, 1596, 1753, 2553, 507, 485, 486, 561, 57,
	2596, 1383, 1445, 536, 1114, 887, 889, 1092, 2519, 1864,
	1599, 1599, 1260, 3088, 1753, 2564, 560, 56, 1618, 2525,
	2559, 551, 55, 1258, 497, 559, 12, 550, 50, 557,
	47, 2666, 2552, 514, 1514, 2588, 497, 2546, 558, 48,
	549, 49, 971, 2526, 3043, 1599, 2339, 2617, 2792, 2592,
	2540, 2542, 2543, 2563, 2561, 1618, 1618, 2612, 1248, 495,
	556, 7, 1246, 79, 928, 1596, 555, 6, 554, 38,
	2648, 1244, 2646, 78, 488, 487, 1618, 1618, 23, 2657,
	2628, 928, 2427, 1961, 24, 2589, 1712, 30, 548, 37,
	2425, 1242, 2608, 2083, 2208, 2663, 2600, 21, 2075, 2074,
	2597, 20, 1596, 1596, 2605, 2072, 2068, 2602, 2603, 497,
	497, 1618, 497, 1579, 1240, 929, 2667, 497, 19, 130,
	1489, 489, 490, 1596, 1596, 513, 971, 539, 971, 1234,
	2619, 957, 2678, 1578, 1576, 1574, 1571, 1569, 1493, 1567,
	1525, 1523, 534, 2632, 1512, 1113, 1501, 1498, 497, 1486,
	1478, 2429, 910, 929, 2701, 2966, 1289, 3131, 1596, 15,
	2874, 16, 2873, 2694, 2177, 2690, 1690, 1980, 957, 497,
	497, 1980, 2968, 57, 911, 1997, 2008, 535, 1996, 1490,
	497, 2693, 1994, 971, 497, 497, 971, 497, 2654, 2697,
	2836, 56, 2038, 2033, 2672, 497, 55, 2028, 2689, 2675,
	12, 2673, 50, 971, 47, 2681, 2680, 2004, 2691, 1657,
	1658, 538, 2141, 48, 2647, 49, 2649, 581, 2726, 1299,
	1300, 533, 2684, 2305, 2686, 3007, 2811, 2695, 2731, 2703,
	2702, 1233, 510, 2984, 2178, 7, 1985, 1290, 2775, 1299,
	1300, 6, 2013, 38, 1494, 2740, 929, 508, 497, 2719,
	2714, 2715, 615, 2000, 1293, 912, 2031, 542, 2727, 2002,
	3042, 2465, 2723, 37, 1302, 2847, 1599, 2623, 2090, 2707,
	506, 1301, 2076, 2067, 1933, 2096, 1662, 1592, 1455, 3142,
	931, 3157, 505, 495, 1370, 2724, 604, 969, 1056, 2257,
	2258, 1301, 1299, 1300, 2716, 1438, 2153, 2152, 930, 2732,
	2544, 1224, 2474, 2153, 1495, 1496, 1223, 497, 2154, 1899,
	1854, 515, 2766, 1491, 2747, 930, 509, 971, 1263, 971,
	2536, 1262, 932, 1380, 1378, 2912, 511, 497, 497, 497,
	932, 932, 1618, 2865, 932, 2705, 1272, 1271, 1257, 1253,
	1492, 1250, 497, 1236, 1194, 1665, 895, 497, 701, 497,
	2928, 2645, 497, 497, 497, 497, 497, 3053, 932, 497,
	497, 957, 2814, 688, 2365, 971, 1702, 2812, 1237, 957,
	1704, 2321, 2464, 1954, 3036, 2780, 2776, 497, 497, 1596,
	2786, 2777, 2778, 2753, 2231, 2781, 2791, 2782, 2990, 2894,
	957, 1863, 1381, 2478, 53, 761, 2843, 824, 1532, 929,
	497, 2793, 2631, 2061, 2060, 2837, 974, 2852, 1674, 497,
	497, 957, 957, 2783, 783, 1096, 478, 1497, 2859, 929,
	2831, 1888, 1754, 785, 2857, 1597, 788, 787, 2637, 2846,
	786, 1598, 1407, 784, 2883, 1595, 740, 2832, 929, 2866,
	1063, 2434, 495, 1531, 2070, 2094, 679, 971, 2869, 2864,
	478, 2858, 2868, 1678, 2789, 1824, 1985, 2856, 1842, 2886,
	2213, 2835, 1374, 753, 1551, 1551, 1840, 1180, 752, 758,
	2326, 495, 929, 495, 2823, 495, 2437, 2622, 2906, 542,
	2860, 1738, 2828, 929, 2169, 1735, 512, 2254, 1146, 971,
	2790, 2893, 1915, 497, 1908, 497, 1904, 971, 497, 1278,
	1358, 2095, 2902, 1216, 2337, 1985, 497, 2446, 2127, 2863,
	1746, 2824, 971, 909, 908, 2200, 2201, 907, 2829, 3059,
	3056, 2915, 2882, 1599, 1668, 2147, 1351, 2442, 757, 635,
	2306, 478, 1063, 586, 2412, 2910, 2933, 2932, 1089, 2934,
	2907, 2908, 3006, 478, 1063, 1350, 891, 963, 495, 2999,
	2913, 1206, 497, 635, 497, 2931, 1205, 957, 2911, 1204,
	928, 2350, 497, 3152, 2953, 2642, 2955, 170, 928, 928,
	2959, 167, 928, 169, 168, 1599, 2398, 82, 34, 2941,
	33, 109, 108, 107, 106, 971, 105, 635, 104, 1618,
	2972, 2964, 495, 103, 102, 101, 928, 478, 495, 2965,
	495, 100, 495, 99, 495, 497, 495, 929, 2280, 2281,
	2282, 497, 2970, 98, 2693, 2969, 1718, 2980, 1719, 497,
	1985, 97, 96, 735, 2963, 690, 495, 495, 495, 3002,
	95, 94, 2983, 2988, 2434, 93, 1596, 2996, 92, 91,
	929, 1618, 929, 90, 2993, 737, 929, 497, 497, 89,
	2995, 88, 87, 497, 1599, 635, 86, 2914, 2958, 3019,
	3017, 85, 84, 631, 957, 3004, 628, 81, 80, 497,
	31, 26, 113, 114, 957, 957, 2942, 2943, 497, 25,
	497, 736, 497, 77, 76, 29, 18, 3039, 1596, 3021,
	11, 17, 22, 135, 2339, 3029, 3024, 134, 3023, 133,
	132, 497, 932, 3032, 497, 131, 497, 14, 971, 13,
	3030, 3031, 3049, 2637, 691, 3062, 3063, 128, 3061, 3065,
	1618, 129, 127, 748, 3066, 126, 3068, 125, 124, 3067,
	123, 3051, 3055, 10, 8, 3073, 2721, 112, 9, 2877,
	932, 2480, 497, 70, 3070, 1142, 71, 2637, 3071, 27,
	43, 42, 41, 111, 161, 160, 3087, 159, 2637, 3085,
	158, 3086, 154, 157, 155, 497, 156, 1596, 3112, 3100,
	3113, 153, 122, 497, 3010, 3111, 163, 162, 151, 148,
	150, 1065, 615, 1069, 542, 1075, 3119, 152, 149, 497,
	147, 3114, 3117, 3118, 930, 3116, 164, 121, 120, 931,
	119, 118, 930, 930, 3128, 3126, 930, 3125, 117, 542,
	3011, 116, 3132, 5, 2, 3061, 931, 3135, 542, 3133,
	929, 495, 3138, 3139, 3141, 1, 0, 0, 1988, 0,
	930, 3028, 0, 932, 0, 3148, 495, 0, 0, 3149,
	0, 0, 0, 692, 495, 0, 3155, 3156, 0, 0,
	0, 0, 0, 3160, 3161, 0, 495, 3162, 0, 0,
	0, 0, 0, 2779, 0, 0, 0, 929, 0, 0,
	495, 3169, 3165, 3166, 0, 0, 478, 2044, 0, 0,
	3171, 0, 2637, 2508, 2509, 0, 0, 0, 0, 0,
	1178, 2057, 0, 0, 1063, 0, 0, 1183, 2815, 0,
	2096, 0, 0, 0, 0, 0, 0, 0, 2825, 2826,
	0, 0, 0, 742, 0, 2637, 0, 2637, 1988, 0,
	542, 2637, 495, 0, 0, 495, 740, 495, 0, 495,
	740, 495, 495, 2845, 963, 734, 0, 693, 0, 0,
	928, 0, 0, 0, 0, 0, 950, 593, 0, 1988,
	2806, 0, 0, 0, 0, 0, 2565, 2566, 2567, 2568,
	2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578,
	2579, 2580, 2581, 2582, 2583, 694, 2587, 2803, 928, 0,
	2796, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 2794, 0, 0, 0, 0, 2798, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	586, 0, 0, 0, 0, 0, 0, 2804, 0, 0,
	0, 0, 0, 0, 0, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	1353, 1354, 1355, 1356, 2797, 0, 0, 0, 0, 0,
	0, 495, 1365, 0, 0, 0, 0, 0, 0, 932,
	1375, 1063, 0, 1063, 0, 0, 0, 0, 0, 0,
	932, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 495, 495, 495, 0, 495,
	0, 0, 0, 0, 0, 2637, 0, 0, 0, 1370,
	0, 0, 0, 0, 0, 0, 0, 0, 495, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 2967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2637, 44, 0, 0, 2799, 0, 1520, 2800,
	0, 0, 0, 0, 1299, 1300, 0, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 0, 1528, 0, 0,
	0, 0, 574, 0, 930, 0, 0, 0, 0, 1302,
	0, 0, 0, 2802, 0, 0, 0, 864, 1302, 0,
	0, 0, 0, 2805, 932, 1063, 0, 0, 0, 0,
	576, 498, 0, 1432, 1432, 1432, 1301, 0, 59, 578,
	0, 0, 930, 60, 1321, 1301, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 932, 0, 932,
	0, 0, 0, 932, 3033, 0, 3034, 0, 0, 0,
	0, 0, 208, 0, 928, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 1097, 1100, 2511, 0, 0,
	3050, 0, 0, 928, 0, 0, 0, 0, 208, 0,
	0, 0, 1324, 1325, 1326, 1327, 0, 0, 0, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 2801,
	0, 1307, 0, 0, 0, 931, 0, 928, 0, 0,
	0, 1692, 0, 931, 931, 930, 0, 931, 928, 1329,
	1330, 1331, 542, 0, 0, 542, 0, 0, 1329, 1330,
	1331, 3110, 542, 0, 0, 542, 542, 0, 0, 0,
	0, 1455, 0, 0, 0, 495, 1988, 2346, 0, 0,
	0, 1988, 0, 0, 2346, 0, 0, 0, 0, 64,
	0, 1988, 2346, 1988, 2346, 2346, 0, 0, 1322, 0,
	0, 0, 0, 0, 495, 0, 0, 1322, 0, 0,
	0, 1531, 0, 0, 924, 0, 0, 139, 66, 0,
	67, 0, 0, 495, 0, 1762, 0, 963, 959, 0,
	0, 973, 973, 0, 0, 0, 0, 495, 171, 0,
	0, 0, 958, 0, 0, 972, 972, 932, 0, 577,
	0, 1225, 110, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 1551, 0, 1551, 1328, 495, 0, 0, 0,
	495, 0, 928, 0, 173, 495, 0, 495, 0, 0,
	0, 963, 1323, 0, 0, 0, 1988, 0, 542, 0,
	0, 1323, 0, 0, 932, 1988, 0, 0, 930, 0,
	1845, 0, 0, 0, 2899, 928, 0, 928, 0, 0,
	0, 928, 2462, 1063, 0, 172, 0, 0, 930, 0,
	1366, 0, 0, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 1063, 0, 0, 930, 0, 0,
	0, 2923, 0, 0, 0, 0, 0, 0, 740, 740,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 2497, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 495, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 0, 0,
	1975, 0, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 0, 0, 0, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 940, 0, 0, 0, 0, 967, 0, 0,
	0, 1736, 0, 1741, 0, 0, 0, 0, 0, 1748,
	2548, 0, 0, 0, 0, 0, 0, 2987, 0, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 0, 1804, 0, 1806, 1807, 1808,
	1809, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1832, 0, 0, 0,
	0, 0, 0, 0, 1365, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 542, 0, 0, 0, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 928, 542, 0, 0, 0, 959, 959, 930,
	0, 930, 0, 1299, 1300, 930, 0, 0, 1906, 0,
	1917, 958, 958, 2639, 0, 1923, 1928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 959, 1302, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	958, 958, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 1301, 0, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 1988, 1551, 0, 1551,
	0, 0, 0, 0, 495, 2156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2257, 2258, 0, 2275,
	2276, 2277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 2516, 1988, 931, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2046, 0,
	2048, 1324, 1325, 1326, 1327, 0, 593, 593, 0, 0,
	0, 1307, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 963, 495, 0, 495, 0, 2272, 0, 0, 0,
	0, 0, 495, 959, 0, 0, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	1087, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2754, 0, 1322, 1125, 1125,
	1125, 967, 0, 0, 2263, 0, 0, 0, 1584, 0,
	0, 0, 1588, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 2278, 0, 1063, 0, 1177, 0, 1302, 0,
	0, 0, 1695, 1696, 1328, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 1988, 2346, 1988, 0, 0, 0,
	2273, 1323, 0, 0, 0, 1301, 0, 0, 2639, 1063,
	0, 0, 0, 1321, 1988, 0, 2346, 0, 0, 1063,
	1063, 495, 1988, 2346, 0, 0, 495, 495, 0, 0,
	0, 0, 2307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2639, 0, 1063, 2057, 0, 0, 0, 0,
	0, 0, 0, 2639, 0, 0, 2506, 0, 0, 0,
	0, 0, 0, 2334, 0, 0, 0, 1988, 0, 0,
	0, 1324, 1325, 1326, 1327, 0, 2462, 2462, 0, 0,
	0, 1307, 0, 0, 2274, 0, 0, 0, 0, 0,
	0, 1828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1366, 0, 0, 2183, 2184, 0, 1329, 1330,
	1331, 2190, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2203, 0, 0, 0, 0, 0, 0, 0, 0, 2402,
	0, 0, 0, 0, 2209, 0, 2402, 1914, 0, 0,
	2216, 0, 0, 0, 0, 2221, 0, 1322, 0, 0,
	1988, 0, 2346, 0, 0, 2917, 0, 0, 0, 0,
	0, 0, 2235, 495, 0, 0, 0, 2639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2269, 2270,
	2271, 0, 0, 0, 0, 2268, 2266, 2267, 2259, 2260,
	2261, 2262, 2264, 2265, 0, 0, 0, 0, 0, 0,
	2639, 1742, 2639, 0, 0, 0, 2639, 0, 0, 495,
	0, 495, 0, 0, 1328, 0, 0, 0, 0, 1063,
	1928, 1928, 1928, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 1432, 0, 0, 0, 0, 0, 0, 0,
	2311, 0, 0, 0, 0, 959, 0, 2027, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 2548, 0, 0, 0, 972, 0, 542, 0,
	0, 973, 0, 0, 0, 0, 2917, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 2522, 0, 0, 208, 2368, 0, 0, 0, 0,
	1462, 2529, 0, 0, 1988, 2346, 0, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2106, 0, 0, 2346, 1910, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 1063, 0, 495,
	0, 959, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 0, 958, 0, 0, 3047, 0,
	959, 1063, 0, 495, 959, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 958, 208, 0, 0, 958, 0,
	2639, 2435, 0, 0, 958, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2548,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 959, 0, 0, 0, 972,
	0, 0, 1063, 0, 0, 2625, 0, 2639, 958, 958,
	1988, 0, 0, 0, 0, 0, 0, 0, 740, 740,
	0, 208, 0, 0, 0, 0, 2917, 0, 0, 2257,
	2258, 740, 2275, 2276, 2277, 0, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 2499, 0, 0,
	0, 1748, 0, 0, 0, 0, 0, 2503, 2504, 0,
	0, 2507, 0, 0, 0, 2510, 0, 0, 0, 973,
	1558, 0, 1558, 0, 2514, 0, 0, 0, 0, 0,
	0, 2520, 0, 972, 0, 0, 0, 0, 0, 2272,
	0, 2527, 0, 0, 0, 2311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2554, 2555, 0, 2556, 2557, 2558,
	0, 0, 1914, 1914, 2560, 0, 0, 0, 0, 0,
	0, 2562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 1655, 969, 0, 0, 1056,
	0, 2257, 2258, 0, 2275, 2276, 2277, 2263, 972, 0,
	0, 0, 2590, 2591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2279, 0, 0, 0, 0, 0, 0, 0, 1701,
	0, 0, 2607, 0, 0, 1707, 0, 1708, 0, 1709,
	0, 1710, 0, 1711, 0, 2278, 0, 0, 0, 0,
	0, 2272, 0, 0, 0, 1914, 1914, 1914, 973, 0,
	0, 0, 0, 1721, 1105, 0, 0, 0, 0, 0,
	2633, 0, 972, 2273, 973, 0, 0, 0, 0, 0,
	0, 762, 74, 0, 0, 0, 0, 0, 972, 0,
	0, 2656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2661, 0, 0, 0, 2662, 0, 959,
	0, 0, 2665, 0, 0, 0, 0, 0, 0, 2263,
	0, 973, 2785, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1910, 1910, 1432, 0, 0, 2274, 0, 0,
	0, 0, 0, 0, 0, 2704, 0, 2278, 575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 0, 1299, 1300, 959, 959, 959, 0, 0,
	959, 0, 2385, 0, 44, 2273, 0, 0, 0, 958,
	958, 958, 0, 0, 958, 0, 0, 0, 1302, 0,
	0, 0, 717, 0, 0, 0, 0, 0, 0, 0,
	730, 2733, 2734, 574, 0, 0, 0, 2738, 2739, 0,
	0, 0, 2742, 2743, 0, 1301, 0, 2418, 0, 2420,
	2421, 2422, 0, 1321, 2745, 1910, 1910, 1910, 2748, 0,
	2891, 576, 0, 0, 0, 919, 74, 0, 1972, 59,
	578, 2269, 2270, 2271, 60, 2755, 0, 0, 2268, 2266,
	2267, 2259, 2260, 2261, 2262, 2264, 2265, 0, 0, 2274,
	0, 0, 0, 0, 0, 2468, 2505, 0, 0, 0,
	0, 0, 2891, 0, 0, 0, 0, 0, 63, 973,
	1762, 1324, 1325, 1326, 1327, 0, 0, 967, 0, 0,
	0, 1307, 0, 972, 0, 1762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1914, 1914, 0, 0, 0, 0, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2813, 0, 0, 0, 0, 2099,
	0, 0, 1125, 0, 1125, 0, 1125, 0, 967, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2269, 2270, 2271, 0, 1322, 1056, 0,
	2268, 2266, 2267, 2259, 2260, 2261, 2262, 2264, 2265, 0,
	64, 0, 0, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
	1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
	1914, 1914, 0, 1914, 0, 0, 0, 0, 139, 66,
	0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 2887, 2888, 2889, 1328, 0, 0, 0, 0, 0,
	577, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 2897, 2898, 0, 0, 0,
	0, 0, 2122, 0, 0, 173, 0, 0, 2157, 0,
	2905, 0, 0, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 1762, 0, 0, 0, 0, 0, 0, 0, 0,
	1910, 1910, 2165, 967, 2167, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 2940, 2123, 0, 0,
	0, 0, 0, 166, 0, 2180, 973, 0, 0, 0,
	0, 0, 0, 0, 2951, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 138, 2124, 0, 0, 74, 0,
	74, 0, 74, 0, 578, 0, 0, 973, 0, 0,
	0, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 972, 0, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
	1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
	1910, 1910, 63, 1910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 2713, 959, 0, 0, 0, 2998, 0,
	0, 3001, 0, 973, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 973, 0, 0, 0, 972, 0, 0,
	973, 0, 0, 0, 0, 0, 3014, 972, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 74, 0, 959,
	0, 959, 959, 959, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 958, 958, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 139, 66, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 3084, 3084, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 0,
	3101, 0, 2343, 0, 577, 1299, 1300, 110, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 3084, 0, 173,
	1302, 1105, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 2833, 1301, 0, 972,
	0, 0, 0, 0, 2397, 1321, 1361, 0, 1364, 972,
	172, 0, 1318, 0, 0, 1371, 0, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 166, 3084, 0,
	0, 0, 0, 2415, 0, 0, 0, 0, 0, 0,
	0, 0, 2424, 0, 2426, 0, 2870, 2871, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 1327, 0, 0, 0,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	0, 1914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1914, 973,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 2501, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 74,
	0, 0, 1453, 0, 1456, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 973, 0, 0, 959, 0,
	0, 0, 0, 0, 1914, 0, 1328, 972, 0, 972,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 958,
	973, 0, 0, 973, 1299, 1300, 0, 0, 0, 0,
	0, 1910, 0, 0, 972, 0, 0, 972, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1910, 0,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 2761, 0, 0,
	0, 2760, 0, 0, 0, 0, 0, 2189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2679, 1324, 1325, 1326, 1327, 0, 0, 0, 0,
	0, 0, 1307, 0, 973, 0, 973, 0, 0, 0,
	0, 1299, 1300, 0, 1910, 0, 0, 0, 972, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	1330, 1331, 0, 0, 0, 0, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 973, 0, 0, 0, 959, 0, 0, 2725,
	0, 967, 958, 1301, 0, 0, 972, 0, 0, 2728,
	958, 1321, 0, 0, 0, 0, 0, 959, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 959, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 958, 2182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1325, 1326, 1327, 0, 973, 0, 0, 0, 0, 1307,
	0, 0, 0, 0, 0, 1328, 0, 0, 972, 0,
	717, 0, 0, 717, 717, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 972, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1822, 0, 972, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 2827, 0,
	1364, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 1328, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 919, 1299, 1300, 0, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 1335, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 1301, 0, 0, 0,
	0, 959, 959, 0, 1321, 958, 0, 0, 74, 0,
	0, 1318, 0, 0, 0, 958, 958, 0, 0, 0,
	2924, 0, 0, 0, 0, 74, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 74,
	0, 74, 1324, 1325, 1326, 1327, 2960, 0, 2962, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 1299, 1300, 0, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 74, 1339, 1349, 0, 0, 1329,
	1330, 1331, 1335, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	1345, 1346, 0, 0, 0, 0, 0, 0, 1316, 1317,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 0,
	0, 1337, 0, 0, 1321, 0, 0, 0, 1322, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 0, 0, 3015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3035, 0, 0, 0,
	0, 0, 1324, 1325, 1326, 1327, 0, 0, 0, 0,
	0, 0, 1307, 0, 0, 1328, 0, 0, 0, 0,
	3052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 1339, 1349, 0, 0, 1329,
	1330, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1345, 1346, 0, 0, 0, 0, 0, 0, 1316, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 1822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 1364, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319,
	1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 0, 0, 0, 1328, 2240, 0, 0, 0,
	2241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 1340, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 919,
	0, 0, 1318, 0, 0, 0, 0, 919, 919, 0,
	0, 919, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319,
	1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 0, 1324, 1325, 1326, 1327, 0, 0, 0,
	2759, 0, 0, 1307, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 1349, 0, 0,
	1329, 1330, 1331, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 1337, 0, 0, 0, 0, 0, 74, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 0, 0, 0,
	0, 2243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 0, 0, 1853, 0, 781, 769, 770, 767,
	768, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 1850, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 1851, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	919, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	74, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 919, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	74, 799, 467, 468, 469, 254, 863, 1849, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 1852, 0, 0, 0,
	0, 0, 0, 756, 1847, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1822,
	258, 259, 260, 261, 975, 262, 976, 977, 978, 979,
	214, 980, 981, 982, 983, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 984, 269, 270, 271, 272,
	273, 274, 275, 985, 986, 276, 219, 220, 221, 987,
	277, 222, 988, 960, 989, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 990, 287, 0, 288, 289,
	991, 866, 290, 291, 992, 993, 995, 994, 996, 997,
	998, 292, 293, 499, 294, 295, 296, 223, 224, 999,
	297, 1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004,
	302, 303, 1005, 304, 1006, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 1007, 867, 1008, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	1009, 320, 1010, 1011, 868, 321, 1012, 322, 229, 1013,
	230, 1014, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 870, 1015, 237, 330, 0, 0, 0, 1016, 329,
	331, 338, 1017, 869, 332, 234, 334, 333, 335, 336,
	337, 235, 1018, 236, 1019, 339, 871, 872, 340, 341,
	342, 873, 343, 344, 0, 0, 345, 346, 347, 1020,
	349, 348, 1021, 238, 874, 350, 351, 875, 1022, 352,
	353, 1023, 1024, 354, 0, 355, 935, 934, 356, 357,
	359, 360, 358, 876, 361, 362, 364, 363, 1025, 1026,
	877, 1027, 239, 365, 240, 366, 367, 1028, 368, 369,
	1029, 1030, 370, 371, 1031, 1032, 372, 241, 878, 373,
	879, 242, 374, 375, 376, 377, 378, 379, 380, 1033,
	381, 243, 382, 244, 383, 1034, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 1035, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 1036,
	404, 880, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 1037, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 1038, 429, 410, 411,
	430, 881, 431, 247, 432, 433, 1039, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 1040,
	444, 445, 1041, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 1042, 249, 250, 251, 454, 1043, 1044,
	455, 456, 252, 253, 1045, 457, 458, 0, 459, 460,
	1046, 1047, 461, 462, 463, 465, 1048, 466, 1049, 464,
	467, 468, 469, 254, 255, 1050, 471, 470, 256, 1051,
	1052, 1053, 1054, 472, 473, 257, 474, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 1959,
	0, 0, 0, 0, 0, 0, 0, 0, 1960, 258,
	259, 260, 261, 975, 262, 976, 977, 978, 979, 214,
	980, 981, 982, 983, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 984, 269, 270, 271, 272, 273,
	274, 275, 985, 986, 276, 219, 220, 221, 987, 277,
	222, 988, 960, 989, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 990, 287, 0, 288, 289, 991,
	866, 290, 291, 992, 993, 995, 994, 996, 997, 998,
	292, 293, 499, 294, 295, 296, 223, 224, 999, 297,
	1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004, 302,
	303, 1005, 304, 1006, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 1007, 867, 1008, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 1009,
	320, 1010, 1011, 868, 321, 1012, 322, 229, 1013, 230,
	1014, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	870, 1015, 237, 330, 0, 0, 0, 1016, 329, 331,
	338, 1017, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 1018, 236, 1019, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 1020, 349,
	348, 1021, 238, 874, 350, 351, 875, 1022, 352, 353,
	1023, 1024, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 1025, 1026, 877,
	1027, 239, 365, 240, 366, 367, 1028, 368, 369, 1029,
	1030, 370, 371, 1031, 1032, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 1033, 381,
	243, 382, 244, 383, 1034, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 1035, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 1036, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 1037, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 1038, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 1039, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 1040, 444,
	445, 1041, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 1042, 249, 250, 251, 454, 1043, 1044, 455,
	456, 252, 253, 1045, 457, 458, 0, 459, 460, 1046,
	1047, 461, 462, 463, 465, 1048, 466, 1049, 464, 467,
	468, 469, 254, 255, 1050, 471, 470, 256, 1051, 1052,
	1053, 1054, 472, 473, 257, 474, 475, 476, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2784, 258,
	259, 260, 261, 975, 262, 976, 977, 978, 979, 214,
	980, 981, 982, 983, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 984, 269, 270, 271, 272, 273,
	274, 275, 985, 986, 276, 219, 220, 221, 987, 277,
	222, 988, 960, 989, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 990, 287, 0, 288, 289, 991,
	866, 290, 291, 992, 993, 995, 994, 996, 997, 998,
	292, 293, 499, 294, 295, 296, 223, 224, 999, 297,
	1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004, 302,
	303, 1005, 304, 1006, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 1007, 867, 1008, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 1009,
	320, 1010, 1011, 868, 321, 1012, 322, 229, 1013, 230,
	1014, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	870, 1015, 237, 330, 0, 0, 0, 1016, 329, 331,
	338, 1017, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 1018, 236, 1019, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 1020, 349,
	348, 1021, 238, 874, 350, 351, 875, 1022, 352, 353,
	1023, 1024, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 1025, 1026, 877,
	1027, 239, 365, 240, 366, 367, 1028, 368, 369, 1029,
	1030, 370, 371, 1031, 1032, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 1033, 381,
	243, 382, 244, 383, 1034, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 1035, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 1036, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 1037, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 1038, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 1039, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 1040, 444,
	445, 1041, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 1042, 249, 250, 251, 454, 1043, 1044, 455,
	456, 252, 253, 1045, 457, 458, 0, 459, 460, 1046,
	1047, 461, 462, 463, 465, 1048, 466, 1049, 464, 467,
	468, 469, 254, 255, 1050, 471, 470, 256, 1051, 1052,
	1053, 1054, 472, 473, 257, 474, 475, 476, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2892, 258, 259, 260, 261, 975, 262,
	976, 977, 978, 979, 214, 980, 981, 982, 983, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 984,
	269, 270, 271, 272, 273, 274, 275, 985, 986, 276,
	219, 220, 221, 987, 277, 222, 988, 960, 989, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 990,
	287, 0, 288, 289, 991, 866, 290, 291, 992, 993,
	995, 994, 996, 997, 998, 292, 293, 499, 294, 295,
	296, 223, 224, 999, 297, 1000, 298, 1001, 299, 1002,
	1003, 300, 301, 1004, 302, 303, 1005, 304, 1006, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 1007,
	867, 1008, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 1009, 320, 1010, 1011, 868, 321,
	1012, 322, 229, 1013, 230, 1014, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 870, 1015, 237, 330, 0,
	0, 0, 1016, 329, 331, 338, 1017, 869, 332, 234,
	334, 333, 335, 336, 337, 235, 1018, 236, 1019, 339,
	871, 872, 340, 341, 342, 873, 343, 344, 0, 0,
	345, 346, 347, 1020, 349, 348, 1021, 238, 874, 350,
	351, 875, 1022, 352, 353, 1023, 1024, 354, 0, 355,
	935, 934, 356, 357, 359, 360, 358, 876, 361, 362,
	364, 363, 1025, 1026, 877, 1027, 239, 365, 240, 366,
	367, 1028, 368, 369, 1029, 1030, 370, 371, 1031, 1032,
	372, 241, 878, 373, 879, 242, 374, 375, 376, 377,
	378, 379, 380, 1033, 381, 243, 382, 244, 383, 1034,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 1035,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 1036, 404, 880, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	1037, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	1038, 429, 410, 411, 430, 881, 431, 247, 432, 433,
	1039, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 1040, 444, 445, 1041, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 1042, 249, 250,
	251, 454, 1043, 1044, 455, 456, 252, 253, 1045, 457,
	458, 0, 459, 460, 1046, 1047, 461, 462, 463, 465,
	1048, 466, 1049, 464, 467, 468, 469, 254, 255, 1050,
	471, 470, 256, 1051, 1052, 1053, 1054, 472, 473, 257,
	474, 475, 476, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2530, 258,
	259, 260, 261, 975, 262, 976, 977, 978, 979, 214,
	980, 981, 982, 983, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 984, 269, 270, 271, 272, 273,
	274, 275, 985, 986, 276, 219, 220, 221, 987, 277,
	222, 988, 960, 989, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 990, 287, 0, 288, 289, 991,
	866, 290, 291, 992, 993, 995, 994, 996, 997, 998,
	292, 293, 499, 294, 295, 296, 223, 224, 999, 297,
	1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004, 302,
	303, 1005, 304, 1006, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 1007, 867, 1008, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 1009,
	320, 1010, 1011, 868, 321, 1012, 322, 229, 1013, 230,
	1014, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	870, 1015, 237, 330, 0, 0, 0, 1016, 329, 331,
	338, 1017, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 1018, 236, 1019, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 1020, 349,
	348, 1021, 238, 874, 350, 351, 875, 1022, 352, 353,
	1023, 1024, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 1025, 1026, 877,
	1027, 239, 365, 240, 366, 367, 1028, 368, 369, 1029,
	1030, 370, 371, 1031, 1032, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 1033, 381,
	243, 382, 244, 383, 1034, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 1035, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 1036, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 1037, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 1038, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 1039, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 1040, 444,
	445, 1041, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 1042, 249, 250, 251, 454, 1043, 1044, 455,
	456, 252, 253, 1045, 457, 458, 0, 459, 460, 1046,
	1047, 461, 462, 463, 465, 1048, 466, 1049, 464, 467,
	468, 469, 254, 255, 1050, 471, 470, 256, 1051, 1052,
	1053, 1054, 472, 473, 257, 474, 475, 476, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2521, 258, 259, 260, 261, 975, 262,
	976, 977, 978, 979, 214, 980, 981, 982, 983, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 984,
	269, 270, 271, 272, 273, 274, 275, 985, 986, 276,
	219, 220, 221, 987, 277, 222, 988, 960, 989, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 990,
	287, 0, 288, 289, 991, 866, 290, 291, 992, 993,
	995, 994, 996, 997, 998, 292, 293, 499, 294, 295,
	296, 223, 224, 999, 297, 1000, 298, 1001, 299, 1002,
	1003, 300, 301, 1004, 302, 303, 1005, 304, 1006, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 1007,
	867, 1008, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 1009, 320, 1010, 1011, 868, 321,
	1012, 322, 229, 1013, 230, 1014, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 870, 1015, 237, 330, 0,
	0, 0, 1016, 329, 331, 338, 1017, 869, 332, 234,
	334, 333, 335, 336, 337, 235, 1018, 236, 1019, 339,
	871, 872, 340, 341, 342, 873, 343, 344, 0, 0,
	345, 346, 347, 1020, 349, 348, 1021, 238, 874, 350,
	351, 875, 1022, 352, 353, 1023, 1024, 354, 0, 355,
	935, 934, 356, 357, 359, 360, 358, 876, 361, 362,
	364, 363, 1025, 1026, 877, 1027, 239, 365, 240, 366,
	367, 1028, 368, 369, 1029, 1030, 370, 371, 1031, 1032,
	372, 241, 878, 373, 879, 242, 374, 375, 376, 377,
	378, 379, 380, 1033, 381, 243, 382, 244, 383, 1034,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 1035,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 1036, 404, 880, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	1037, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	1038, 429, 410, 411, 430, 881, 431, 247, 432, 433,
	1039, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 1040, 444, 445, 1041, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 1042, 249, 250,
	251, 454, 1043, 1044, 455, 456, 252, 253, 1045, 457,
	458, 0, 459, 460, 1046, 1047, 461, 462, 463, 465,
	1048, 466, 1049, 464, 467, 468, 469, 254, 255, 1050,
	471, 470, 256, 1051, 1052, 1053, 1054, 472, 473, 257,
	474, 475, 476, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2401, 258,
	259, 260, 261, 975, 262, 976, 977, 978, 979, 214,
	980, 981, 982, 983, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 984, 269, 270, 271, 272, 273,
	274, 275, 985, 986, 276, 219, 220, 221, 987, 277,
	222, 988, 960, 989, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 990, 287, 0, 288, 289, 991,
	866, 290, 291, 992, 993, 995, 994, 996, 997, 998,
	292, 293, 499, 294, 295, 296, 223, 224, 999, 297,
	1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004, 302,
	303, 1005, 304, 1006, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 1007, 867, 1008, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 1009,
	320, 1010, 1011, 868, 321, 1012, 322, 229, 1013, 230,
	1014, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	870, 1015, 237, 330, 0, 0, 0, 1016, 329, 331,
	338, 1017, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 1018, 236, 1019, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 1020, 349,
	348, 1021, 238, 874, 350, 351, 875, 1022, 352, 353,
	1023, 1024, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 1025, 1026, 877,
	1027, 239, 365, 240, 366, 367, 1028, 368, 369, 1029,
	1030, 370, 371, 1031, 1032, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 1033, 381,
	243, 382, 244, 383, 1034, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 1035, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 1036, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 1037, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 1038, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 1039, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 1040, 444,
	445, 1041, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 1042, 249, 250, 251, 454, 1043, 1044, 455,
	456, 252, 253, 1045, 457, 458, 0, 459, 460, 1046,
	1047, 461, 462, 463, 465, 1048, 466, 1049, 464, 467,
	468, 469, 254, 255, 1050, 471, 470, 256, 1051, 1052,
	1053, 1054, 472, 473, 257, 474, 475, 476, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1846, 258, 259, 260, 261, 975, 262,
	976, 977, 978, 979, 214, 980, 981, 982, 983, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 984,
	269, 270, 271, 272, 273, 274, 275, 985, 986, 276,
	219, 220, 221, 987, 277, 222, 988, 960, 989, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 990,
	287, 0, 288, 289, 991, 866, 290, 291, 992, 993,
	995, 994, 996, 997, 998, 292, 293, 499, 294, 295,
	296, 223, 224, 999, 297, 1000, 298, 1001, 299, 1002,
	1003, 300, 301, 1004, 302, 303, 1005, 304, 1006, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 1007,
	867, 1008, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 1009, 320, 1010, 1011, 868, 321,
	1012, 322, 229, 1013, 230, 1014, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 870, 1015, 237, 330, 0,
	0, 0, 1016, 329, 331, 338, 1017, 869, 332, 234,
	334, 333, 335, 336, 337, 235, 1018, 236, 1019, 339,
	871, 872, 340, 341, 342, 873, 343, 344, 0, 0,
	345, 346, 347, 1020, 349, 348, 1021, 238, 874, 350,
	351, 875, 1022, 352, 353, 1023, 1024, 354, 0, 355,
	935, 934, 356, 357, 359, 360, 358, 876, 361, 362,
	364, 363, 1025, 1026, 877, 1027, 239, 365, 240, 366,
	367, 1028, 368, 369, 1029, 1030, 370, 371, 1031, 1032,
	372, 241, 878, 373, 879, 242, 374, 375, 376, 377,
	378, 379, 380, 1033, 381, 243, 382, 244, 383, 1034,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 1035,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 1036, 404, 880, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	1037, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	1038, 429, 410, 411, 430, 881, 431, 247, 432, 433,
	1039, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 1040, 444, 445, 1041, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 1042, 249, 250,
	251, 454, 1043, 1044, 455, 456, 252, 253, 1045, 457,
	458, 0, 459, 460, 1046, 1047, 461, 462, 463, 465,
	1048, 466, 1049, 464, 467, 468, 469, 254, 255, 1050,
	471, 470, 256, 1051, 1052, 1053, 1054, 472, 473, 257,
	474, 475, 476, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 258,
	259, 260, 261, 975, 262, 976, 977, 978, 979, 214,
	980, 981, 982, 983, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 984, 269, 270, 271, 272, 273,
	274, 275, 985, 986, 276, 219, 220, 221, 987, 277,
	222, 988, 960, 989, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 990, 287, 0, 288, 289, 991,
	866, 290, 291, 992, 993, 995, 994, 996, 997, 998,
	292, 293, 499, 294, 295, 296, 223, 224, 999, 297,
	1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004, 302,
	303, 1005, 304, 1006, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 1007, 867, 1008, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 1009,
	320, 1010, 1011, 868, 321, 1012, 322, 229, 1013, 230,
	1014, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	870, 1015, 237, 330, 0, 0, 0, 1016, 329, 331,
	338, 1017, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 1018, 236, 1019, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 1020, 349,
	348, 1021, 238, 874, 350, 351, 875, 1022, 352, 353,
	1023, 1024, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 1025, 1026, 877,
	1027, 239, 365, 240, 366, 367, 1028, 368, 369, 1029,
	1030, 370, 371, 1031, 1032, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 1033, 381,
	243, 382, 244, 383, 1034, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 1035, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 1036, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 1037, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 1038, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 1039, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 1040, 444,
	445, 1041, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 1042, 249, 250, 251, 454, 1043, 1044, 455,
	456, 252, 253, 1045, 457, 458, 0, 459, 460, 1046,
	1047, 461, 462, 463, 465, 1048, 466, 1049, 464, 467,
	468, 469, 254, 255, 1050, 471, 470, 256, 1051, 1052,
	1053, 1054, 472, 473, 257, 474, 475, 476, 731, 0,
	781, 769, 770, 767, 768, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 173, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 1152,
	863, 0, 471, 470, 256, 0, 0, 0, 165, 472,
	473, 257, 474, 475, 476, 747, 166, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 1368, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 173, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 1152,
	863, 0, 471, 470, 256, 0, 0, 0, 165, 472,
	473, 257, 474, 475, 476, 747, 166, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 1368, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 1924, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 1929,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 1925, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 1926, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 2696, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	1433, 781, 769, 770, 767, 768, 760, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 763, 0,
	0, 0, 263, 264, 265, 215, 838, 801, 839, 789,
	825, 840, 0, 269, 270, 791, 790, 273, 274, 275,
	764, 816, 276, 841, 842, 221, 0, 277, 823, 0,
	806, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 866, 290,
	291, 809, 807, 808, 813, 811, 810, 812, 292, 293,
	499, 294, 826, 296, 843, 844, 749, 297, 0, 298,
	0, 299, 0, 0, 827, 301, 0, 302, 303, 0,
	304, 0, 754, 305, 306, 308, 311, 307, 312, 313,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 314,
	315, 316, 847, 828, 829, 0, 319, 0, 320, 0,
	0, 868, 321, 0, 322, 848, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 818, 819, 822, 870, 0,
	820, 800, 0, 0, 0, 1750, 329, 331, 338, 0,
	869, 332, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 339, 871, 872, 340, 341, 342, 873, 834,
	835, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	851, 874, 350, 351, 875, 0, 352, 353, 0, 0,
	354, 0, 355, 751, 750, 356, 357, 359, 793, 358,
	876, 361, 362, 364, 363, 746, 0, 877, 777, 821,
	365, 852, 366, 367, 0, 802, 803, 0, 0, 370,
	371, 0, 0, 372, 241, 878, 373, 879, 853, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 854, 382,
	244, 383, 1749, 384, 385, 386, 387, 388, 389, 855,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 880, 405,
	406, 407, 408, 755, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 794, 795, 796, 797,
	421, 427, 428, 814, 429, 410, 411, 430, 881, 431,
	856, 798, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 836, 438, 439, 440, 857, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 792, 453,
	0, 858, 859, 860, 837, 0, 0, 455, 456, 861,
	862, 775, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 815, 466, 0, 799, 467, 468, 469,
	254, 863, 0, 471, 470, 256, 0, 0, 0, 0,
	472, 473, 257, 474, 475, 476, 747, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	0, 0, 0, 739, 759, 781, 769, 770, 767, 768,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 499, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 741, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 0, 471, 470, 256,
	0, 0, 0, 0, 472, 473, 257, 474, 475, 476,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 499, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 0, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 2532, 471, 470, 256,
	0, 0, 0, 0, 472, 473, 257, 474, 475, 476,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 499, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 741, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 0, 471, 470, 256,
	0, 0, 0, 0, 472, 473, 257, 474, 475, 476,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 499, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 0, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 0, 471, 470, 256,
	0, 0, 0, 0, 472, 473, 257, 474, 475, 476,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 1433, 781, 769, 770, 767,
	768, 760, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 1929, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 1916, 759,
	781, 769, 770, 767, 768, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	0, 0, 1905, 759, 781, 769, 770, 767, 768, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 763, 0, 0, 0, 263, 264, 265, 215, 838,
	801, 839, 789, 825, 840, 0, 269, 270, 791, 790,
	273, 274, 275, 764, 816, 276, 841, 842, 221, 0,
	277, 823, 0, 806, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 866, 290, 291, 809, 807, 808, 813, 811, 810,
	812, 292, 293, 499, 294, 826, 296, 843, 844, 749,
	297, 0, 298, 0, 299, 0, 0, 827, 301, 0,
	302, 303, 0, 304, 0, 754, 305, 306, 308, 311,
	307, 312, 313, 845, 846, 776, 867, 0, 0, 0,
	0, 0, 314, 315, 316, 847, 828, 829, 0, 319,
	0, 320, 0, 0, 868, 321, 0, 322, 848, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 818, 819,
	822, 870, 0, 820, 800, 0, 0, 0, 0, 329,
	331, 338, 0, 869, 332, 849, 804, 830, 831, 832,
	833, 850, 0, 805, 0, 339, 871, 872, 340, 341,
	342, 873, 834, 835, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 851, 874, 350, 351, 875, 0, 352,
	353, 0, 0, 354, 0, 355, 751, 750, 356, 357,
	359, 793, 358, 876, 361, 362, 364, 363, 746, 0,
	877, 777, 821, 365, 852, 366, 367, 0, 802, 803,
	0, 0, 370, 371, 0, 0, 372, 241, 878, 373,
	879, 853, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 854, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 855, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 880, 405, 406, 407, 408, 755, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 794,
	795, 796, 797, 421, 427, 428, 814, 429, 410, 411,
	430, 881, 431, 856, 798, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 836, 438, 439, 440, 857, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 792, 453, 0, 858, 859, 860, 837, 0, 0,
	455, 456, 861, 862, 775, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 815, 466, 0, 799,
	467, 468, 469, 254, 863, 0, 471, 470, 256, 0,
	0, 0, 0, 472, 473, 257, 474, 475, 476, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 0, 0, 0, 0, 0, 0,
	0, 756, 0, 0, 0, 0, 1903, 759, 781, 769,
	770, 767, 768, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 763, 0, 0, 0, 263,
	264, 265, 215, 838, 801, 839, 789, 825, 840, 0,
	269, 270, 791, 790, 273, 274, 275, 764, 816, 276,
	841, 842, 221, 0, 277, 823, 0, 806, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 866, 290, 291, 809, 807,
	808, 813, 811, 810, 812, 292, 293, 499, 294, 826,
	296, 843, 844, 749, 297, 0, 298, 0, 299, 0,
	0, 827, 301, 0, 302, 303, 0, 304, 0, 754,
	305, 306, 308, 311, 307, 312, 313, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 314, 315, 316, 847,
	828, 829, 0, 319, 0, 320, 0, 0, 868, 321,
	0, 322, 848, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 818, 819, 822, 870, 0, 820, 800, 0,
	0, 0, 0, 329, 331, 338, 0, 869, 332, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 339,
	871, 872, 340, 341, 342, 873, 834, 835, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 851, 874, 350,
	351, 875, 0, 352, 353, 0, 0, 354, 0, 355,
	751, 750, 356, 357, 359, 793, 358, 876, 361, 362,
	364, 363, 746, 0, 877, 777, 821, 365, 852, 366,
	367, 0, 802, 803, 0, 0, 370, 371, 0, 0,
	372, 241, 878, 373, 879, 853, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 854, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 855, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 880, 405, 406, 407, 408,
	755, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 794, 795, 796, 797, 421, 427, 428,
	814, 429, 410, 411, 430, 881, 431, 856, 798, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 836, 438,
	439, 440, 857, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 792, 453, 0, 858, 859,
	860, 837, 0, 0, 455, 456, 861, 862, 775, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	815, 466, 0, 799, 467, 468, 469, 254, 863, 0,
	471, 470, 256, 0, 0, 0, 0, 472, 473, 257,
	474, 475, 476, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	1901, 759, 781, 769, 770, 767, 768, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 763,
	0, 0, 0, 263, 264, 265, 215, 838, 801, 839,
	789, 825, 840, 0, 269, 270, 791, 790, 273, 274,
	275, 764, 816, 276, 841, 842, 221, 0, 277, 823,
	0, 806, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 866,
	290, 291, 809, 807, 808, 813, 811, 810, 812, 292,
	293, 499, 294, 826, 296, 843, 844, 749, 297, 0,
	298, 0, 299, 0, 0, 827, 301, 0, 302, 303,
	0, 304, 0, 754, 305, 306, 308, 311, 307, 312,
	313, 845, 846, 776, 867, 0, 0, 0, 0, 0,
	314, 315, 316, 847, 828, 829, 0, 319, 0, 320,
	0, 0, 868, 321, 0, 322, 848, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 818, 819, 822, 870,
	0, 820, 800, 0, 0, 0, 0, 329, 331, 338,
	0, 869, 332, 849, 804, 830, 831, 832, 833, 850,
	0, 805, 0, 339, 871, 872, 340, 341, 342, 873,
	834, 835, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 851, 874, 350, 351, 875, 0, 352, 353, 0,
	0, 354, 0, 355, 751, 750, 356, 357, 359, 793,
	358, 876, 361, 362, 364, 363, 746, 0, 877, 777,
	821, 365, 852, 366, 367, 0, 802, 803, 0, 0,
	370, 371, 0, 0, 372, 241, 878, 373, 879, 853,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 854,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	855, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 880,
	405, 406, 407, 408, 755, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 794, 795, 796,
	797, 421, 427, 428, 814, 429, 410, 411, 430, 881,
	431, 856, 798, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 836, 438, 439, 440, 857, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 792,
	453, 0, 858, 859, 860, 837, 0, 0, 455, 456,
	861, 862, 775, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 815, 466, 0, 799, 467, 468,
	469, 254, 863, 0, 471, 470, 256, 0, 0, 0,
	0, 472, 473, 257, 474, 475, 476, 747, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 0, 0, 0, 1898, 759, 1890, 769, 770, 767,
	768, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 1893, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 1894, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	1895, 1892, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 1896, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 1891,
	476, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 1887, 759,
	1890, 769, 770, 767, 768, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 826, 1893, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	1894, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 1895, 1892, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 1896, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 1891, 476, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	0, 0, 0, 0, 0, 1373, 0, 756, 0, 0,
	0, 0, 0, 759, 781, 769, 770, 767, 768, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 1737, 262, 0, 0, 0, 0,
	817, 763, 0, 0, 0, 263, 264, 265, 215, 838,
	801, 839, 789, 825, 840, 0, 269, 270, 791, 790,
	273, 274, 275, 764, 816, 276, 841, 842, 221, 0,
	277, 823, 0, 806, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 866, 290, 291, 809, 807, 808, 813, 811, 810,
	812, 292, 293, 499, 294, 826, 296, 843, 844, 749,
	297, 0, 298, 0, 299, 0, 0, 827, 301, 0,
	302, 303, 0, 304, 0, 754, 305, 306, 308, 311,
	307, 312, 313, 845, 846, 776, 867, 0, 0, 0,
	0, 0, 314, 315, 316, 847, 828, 829, 0, 319,
	0, 320, 0, 0, 868, 321, 0, 322, 848, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 818, 819,
	822, 870, 0, 820, 800, 0, 0, 0, 0, 329,
	331, 338, 0, 869, 332, 849, 804, 830, 831, 832,
	833, 850, 0, 805, 0, 339, 871, 872, 340, 341,
	342, 873, 834, 835, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 851, 874, 350, 351, 875, 0, 352,
	353, 0, 0, 354, 0, 355, 751, 750, 356, 357,
	359, 793, 358, 876, 361, 362, 364, 363, 746, 0,
	877, 777, 821, 365, 852, 366, 367, 0, 802, 803,
	0, 0, 370, 371, 0, 0, 372, 241, 878, 373,
	879, 853, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 854, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 855, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 880, 405, 406, 407, 408, 755, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 794,
	795, 796, 797, 421, 427, 428, 814, 429, 410, 411,
	430, 881, 431, 856, 798, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 836, 438, 439, 440, 857, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 792, 453, 0, 858, 859, 860, 837, 0, 0,
	455, 456, 861, 862, 775, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 815, 466, 0, 799,
	467, 468, 469, 254, 863, 0, 471, 470, 256, 0,
	0, 0, 0, 472, 473, 257, 474, 475, 476, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 0, 0, 0, 0, 0, 0,
	0, 756, 0, 0, 0, 0, 1077, 759, 781, 769,
	770, 767, 768, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 763, 0, 0, 0, 263,
	264, 265, 215, 838, 801, 839, 789, 825, 840, 0,
	269, 270, 791, 790, 273, 274, 275, 764, 816, 276,
	841, 842, 221, 0, 277, 823, 0, 806, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 866, 290, 291, 809, 807,
	808, 813, 811, 810, 812, 292, 293, 499, 294, 826,
	296, 843, 844, 749, 297, 0, 298, 0, 299, 0,
	0, 827, 301, 0, 302, 303, 0, 304, 0, 754,
	305, 306, 308, 311, 307, 312, 313, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 314, 315, 316, 847,
	828, 829, 0, 319, 0, 320, 0, 0, 868, 321,
	0, 322, 848, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 1076, 819, 822, 870, 0, 820, 800, 0,
	0, 0, 0, 329, 331, 338, 0, 869, 332, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 339,
	871, 872, 340, 341, 342, 873, 834, 835, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 851, 874, 350,
	351, 875, 0, 352, 353, 0, 0, 354, 0, 355,
	751, 750, 356, 357, 359, 793, 358, 876, 361, 362,
	364, 363, 746, 0, 877, 777, 821, 365, 852, 366,
	367, 0, 802, 803, 0, 0, 370, 371, 0, 0,
	372, 241, 878, 373, 879, 853, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 854, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 855, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 880, 405, 406, 407, 408,
	755, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 794, 795, 796, 797, 421, 427, 428,
	814, 429, 410, 411, 430, 881, 431, 856, 798, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 836, 438,
	439, 440, 857, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 792, 453, 0, 858, 859,
	860, 837, 0, 0, 455, 456, 861, 862, 775, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	815, 466, 0, 799, 467, 468, 469, 254, 863, 0,
	471, 470, 256, 0, 0, 0, 0, 472, 473, 257,
	474, 475, 476, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	1071, 759, 781, 769, 770, 767, 768, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 763,
	0, 0, 0, 263, 264, 265, 215, 838, 801, 839,
	789, 825, 840, 0, 269, 270, 791, 790, 273, 274,
	275, 764, 816, 276, 841, 842, 221, 0, 277, 823,
	0, 806, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 866,
	290, 291, 809, 807, 808, 813, 811, 810, 812, 292,
	293, 499, 294, 826, 296, 843, 844, 749, 297, 0,
	298, 0, 299, 0, 0, 827, 301, 0, 302, 303,
	0, 304, 0, 754, 305, 306, 308, 311, 307, 312,
	313, 845, 846, 776, 867, 0, 0, 0, 0, 0,
	314, 315, 316, 847, 828, 829, 0, 319, 0, 320,
	0, 0, 868, 321, 0, 322, 848, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 1070, 819, 822, 870,
	0, 820, 800, 0, 0, 0, 0, 329, 331, 338,
	0, 869, 332, 849, 804, 830, 831, 832, 833, 850,
	0, 805, 0, 339, 871, 872, 340, 341, 342, 873,
	834, 835, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 851, 874, 350, 351, 875, 0, 352, 353, 0,
	0, 354, 0, 355, 751, 750, 356, 357, 359, 793,
	358, 876, 361, 362, 364, 363, 746, 0, 877, 777,
	821, 365, 852, 366, 367, 0, 802, 803, 0, 0,
	370, 371, 0, 0, 372, 241, 878, 373, 879, 853,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 854,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	855, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 880,
	405, 406, 407, 408, 755, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 794, 795, 796,
	797, 421, 427, 428, 814, 429, 410, 411, 430, 881,
	431, 856, 798, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 836, 438, 439, 440, 857, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 792,
	453, 0, 858, 859, 860, 837, 0, 0, 455, 456,
	861, 862, 775, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 815, 466, 0, 799, 467, 468,
	469, 254, 863, 0, 471, 470, 256, 0, 0, 0,
	0, 472, 473, 257, 474, 475, 476, 747, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 0, 0, 0, 1066, 759, 781, 769, 770, 767,
	768, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 3083, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	3082, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	3081, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 3083, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	3082, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 826, 296, 843,
	844, 0, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 935, 934,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	0, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 781, 769, 770, 767, 768, 760, 0, 0, 1913,
	0, 0, 0, 0, 1911, 1912, 0, 258, 259, 260,
	261, 0, 262, 756, 0, 0, 0, 817, 763, 759,
	0, 0, 263, 264, 265, 0, 838, 801, 839, 789,
	825, 840, 0, 269, 270, 791, 790, 273, 274, 275,
	764, 816, 276, 841, 842, 221, 0, 277, 823, 0,
	806, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 866, 290,
	3083, 809, 807, 808, 813, 811, 810, 812, 292, 293,
	499, 294, 826, 296, 843, 844, 749, 297, 0, 298,
	0, 299, 0, 0, 827, 301, 0, 302, 303, 0,
	304, 0, 754, 305, 306, 308, 311, 307, 312, 313,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 314,
	315, 316, 847, 828, 829, 0, 319, 0, 320, 0,
	0, 868, 321, 0, 322, 848, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 818, 819, 822, 0, 0,
	820, 800, 0, 0, 0, 0, 329, 331, 338, 0,
	869, 332, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 339, 0, 0, 340, 341, 342, 873, 834,
	835, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	851, 874, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 751, 750, 356, 357, 359, 793, 358,
	876, 361, 362, 364, 363, 746, 0, 0, 777, 821,
	365, 852, 366, 367, 0, 802, 803, 0, 0, 370,
	371, 0, 0, 372, 241, 878, 373, 879, 853, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 854, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 855,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 880, 405,
	406, 407, 408, 755, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 794, 795, 796, 797,
	421, 427, 428, 814, 429, 410, 411, 430, 0, 431,
	856, 798, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 836, 438, 439, 440, 857, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 792, 453,
	0, 858, 859, 860, 837, 0, 0, 455, 456, 861,
	862, 775, 457, 458, 0, 3082, 460, 0, 0, 461,
	462, 463, 465, 815, 466, 0, 799, 467, 468, 469,
	254, 863, 0, 471, 470, 256, 0, 0, 0, 0,
	472, 473, 257, 474, 475, 476, 0, 0, 0, 0,
	0, 0, 731, 0, 933, 0, 0, 0, 0, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	258, 259, 260, 261, 759, 262, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 816, 276, 219, 220, 221, 0,
	277, 823, 0, 806, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 866, 290, 291, 809, 807, 808, 813, 811, 810,
	812, 292, 293, 499, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 868, 321, 0, 322, 848, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 818, 819,
	822, 870, 0, 820, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 869, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 871, 872, 340, 341,
	342, 873, 343, 344, 0, 0, 345, 346, 347, 920,
	349, 348, 0, 851, 874, 350, 351, 875, 0, 352,
	353, 0, 0, 354, 0, 355, 935, 934, 356, 357,
	359, 360, 358, 876, 361, 362, 364, 363, 0, 0,
	877, 0, 821, 365, 240, 366, 367, 0, 368, 369,
	0, 925, 370, 371, 0, 0, 372, 241, 878, 373,
	879, 853, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 854, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 880, 405, 406, 407, 408, 246, 927, 0, 413,
	414, 415, 416, 417, 418, 419, 171, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 814, 429, 410, 411,
	430, 881, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 857, 0,
	444, 445, 173, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 861, 862, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 815, 466, 0, 464,
	467, 468, 469, 1152, 255, 0, 471, 470, 256, 0,
	0, 933, 165, 472, 473, 257, 474, 475, 476, 0,
	166, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 0, 917,
	0, 1458, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 816, 276, 219, 220, 221, 0, 277, 823, 0,
	806, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 866, 290,
	291, 809, 807, 808, 813, 811, 810, 812, 292, 293,
	499, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	845, 846, 0, 867, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 868, 321, 0, 322, 848, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 818, 819, 822, 870, 0,
	820, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	869, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 871, 872, 340, 341, 342, 873, 343,
	344, 0, 0, 345, 346, 347, 920, 349, 348, 0,
	851, 874, 350, 351, 875, 0, 352, 353, 0, 0,
	354, 0, 355, 935, 934, 356, 357, 359, 360, 358,
	876, 361, 362, 364, 363, 0, 0, 877, 0, 821,
	365, 240, 366, 367, 0, 368, 369, 0, 925, 370,
	371, 0, 0, 372, 241, 878, 373, 879, 853, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 854, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 880, 405,
	406, 407, 408, 246, 927, 0, 413, 414, 415, 416,
	417, 418, 419, 171, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 814, 429, 410, 411, 430, 881, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 857, 0, 444, 445, 173,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 861,
	862, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 815, 466, 0, 464, 467, 468, 469,
	1152, 255, 0, 471, 470, 256, 2304, 0, 933, 165,
	472, 473, 257, 474, 475, 476, 0, 166, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 0, 917, 0, 1458, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 816, 276,
	219, 220, 221, 0, 277, 823, 0, 806, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 866, 290, 291, 809, 807,
	808, 813, 811, 810, 812, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 845, 846, 0,
	867, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 868, 321,
	0, 322, 848, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 818, 819, 822, 870, 0, 820, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 869, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	871, 872, 340, 341, 342, 873, 343, 344, 0, 0,
	345, 346, 347, 920, 349, 348, 0, 851, 874, 350,
	351, 875, 0, 352, 353, 0, 0, 354, 0, 355,
	935, 934, 356, 357, 359, 360, 358, 876, 361, 362,
	364, 363, 0, 0, 877, 0, 821, 365, 240, 366,
	367, 0, 368, 369, 0, 925, 370, 371, 0, 0,
	372, 241, 878, 373, 879, 853, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 854, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 880, 405, 406, 407, 408,
	246, 927, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	814, 429, 410, 411, 430, 881, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 857, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 861, 862, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	815, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	471, 470, 256, 916, 0, 933, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 0, 917, 0, 922, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 816, 276, 219, 220, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 499, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 0, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 871, 872, 340,
	341, 342, 873, 343, 344, 0, 0, 345, 346, 347,
	920, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 935, 934, 356,
	357, 359, 360, 358, 876, 361, 362, 364, 363, 0,
	0, 877, 0, 821, 365, 240, 366, 367, 0, 368,
	369, 0, 925, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 246, 927, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 861, 862, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 471, 470, 256,
	0, 0, 933, 0, 472, 473, 257, 474, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 0,
	917, 0, 922, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 816, 276, 219, 220, 221, 0, 277, 823,
	0, 806, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 866,
	290, 291, 809, 807, 808, 813, 811, 810, 812, 292,
	293, 499, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 845, 846, 0, 867, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 868, 321, 0, 322, 848, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 818, 819, 822, 870,
	0, 820, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 869, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 871, 872, 340, 341, 342, 873,
	343, 344, 0, 0, 345, 346, 347, 920, 349, 348,
	0, 851, 874, 350, 351, 875, 0, 352, 353, 0,
	0, 354, 0, 355, 935, 934, 356, 357, 359, 360,
	358, 876, 361, 362, 364, 363, 0, 0, 877, 0,
	821, 365, 240, 366, 367, 0, 368, 369, 0, 925,
	370, 371, 0, 0, 372, 241, 878, 373, 879, 853,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 854,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 880,
	405, 406, 407, 408, 246, 927, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 814, 429, 410, 411, 430, 881,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 857, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	861, 862, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 815, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 471, 470, 256, 0, 0, 933,
	0, 472, 473, 257, 474, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 817, 0, 917, 0, 922,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 816,
	276, 219, 220, 221, 0, 277, 823, 0, 806, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 866, 290, 291, 809,
	807, 808, 813, 811, 810, 812, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 845, 846,
	0, 867, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 868,
	321, 0, 322, 848, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 818, 819, 822, 870, 0, 820, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 851, 874,
	350, 351, 875, 0, 352, 353, 0, 0, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 0, 0, 877, 0, 821, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 878, 373, 879, 853, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 854, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 814, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 857, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 861, 862, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 815, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 471, 470, 256, 0, 0, 933, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 0, 0, 0, 2638, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 816, 276, 219, 220,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 0, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 871, 872,
	340, 341, 342, 873, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 935, 934,
	356, 357, 359, 360, 358, 876, 361, 362, 364, 363,
	0, 0, 877, 0, 821, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 246, 927,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 861, 862, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 471, 470,
	256, 1149, 0, 956, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 1362, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 960, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	866, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 867, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 868, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	870, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 874, 350, 351, 875, 0, 352, 353,
	0, 0, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 0, 0, 877,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 171, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 173, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 1152, 255, 0, 471, 470, 256, 0, 0,
	933, 165, 472, 473, 257, 474, 475, 476, 0, 166,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 0, 0, 0,
	138, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	816, 276, 219, 220, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 0, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 871, 872, 340, 341, 342, 873, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 935, 934, 356, 357, 359, 360, 358, 876,
	361, 362, 364, 363, 0, 0, 877, 0, 821, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 861, 862,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 471, 470, 256, 731, 0, 496, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 499, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 171,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 173, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 1152, 255, 0, 471,
	470, 256, 0, 0, 496, 165, 472, 473, 257, 474,
	475, 476, 0, 166, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 138, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 499, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 471, 470, 256, 0,
	0, 496, 0, 472, 473, 257, 474, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 2097, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	499, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 471, 470, 256, 0, 0, 496, 0,
	472, 473, 257, 474, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 2547, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	471, 470, 256, 0, 0, 0, 0, 472, 473, 257,
	474, 475, 476, 1228, 0, 956, 955, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 1463, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 960, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 499, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 867, 0, 0,
	0, 0, 0, 1227, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 870, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 871, 872, 340,
	341, 342, 873, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 935, 934, 356,
	357, 359, 360, 358, 876, 361, 362, 364, 363, 0,
	0, 877, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 1226, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 881, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 471, 470, 256,
	0, 0, 0, 0, 472, 473, 257, 474, 475, 476,
	1145, 0, 956, 955, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 960, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 866,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 499, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 867, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 868, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 1144, 232, 233, 870,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 869, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 871, 872, 340, 341, 342, 873,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 874, 350, 351, 875, 0, 352, 353, 0,
	0, 354, 0, 355, 935, 934, 356, 357, 359, 360,
	358, 876, 361, 362, 364, 363, 0, 0, 877, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 878, 373, 879, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 880,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 881,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 471, 470, 256, 0, 0, 0,
	0, 472, 473, 257, 474, 475, 476, 1141, 0, 956,
	955, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 960, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 866, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 867, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 868,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1140, 232, 233, 870, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 874,
	350, 351, 875, 0, 352, 353, 0, 0, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 0, 0, 877, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 878, 373, 879, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 471, 470, 256, 0, 0, 0, 0, 472, 473,
	257, 474, 475, 476, 1102, 0, 956, 955, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 960, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	1101, 232, 233, 870, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 871, 872,
	340, 341, 342, 873, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 935, 934,
	356, 357, 359, 360, 358, 876, 361, 362, 364, 363,
	0, 0, 877, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 881, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 1099, 0, 956, 955, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 960, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	866, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 867, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 868, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 1098, 232, 233,
	870, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 874, 350, 351, 875, 0, 352, 353,
	0, 0, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 0, 0, 877,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 471, 470, 256, 0, 0,
	0, 0, 472, 473, 257, 474, 475, 476, 949, 0,
	956, 955, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 960,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 951, 232, 233, 870, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 871, 872, 340, 341, 342, 873, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 935, 934, 356, 357, 359, 360, 358, 876,
	361, 362, 364, 363, 0, 0, 877, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 881, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 956, 955, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 960, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 499, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 870, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 871, 872, 340,
	341, 342, 873, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 935, 934, 356,
	357, 359, 360, 358, 876, 361, 362, 364, 363, 0,
	0, 877, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 881, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 471, 470, 256,
	956, 955, 0, 0, 472, 473, 257, 474, 475, 476,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 960,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 870, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 871, 872, 340, 341, 342, 873, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 935, 934, 356, 357, 359, 360, 358, 876,
	361, 362, 364, 363, 0, 0, 877, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 881, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 956, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	960, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 866, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	499, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 867, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 868, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 870, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	869, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 871, 872, 340, 341, 342, 873, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 874, 350, 351, 875, 0, 352, 353, 0, 0,
	354, 0, 355, 935, 934, 356, 357, 359, 360, 358,
	876, 361, 362, 364, 363, 0, 0, 877, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 878, 373, 879, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 880, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 881, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 471, 470, 256, 600, 0, 207, 0,
	472, 473, 257, 474, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 213, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 212, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	471, 470, 256, 206, 0, 207, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 479, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 213, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 212, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 207, 471, 470, 256,
	0, 0, 0, 0, 472, 473, 257, 474, 475, 476,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 479, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 213, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 1705, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 212, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 207, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 479, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 213, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 212, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 496, 471,
	470, 256, 0, 0, 0, 0, 472, 473, 257, 474,
	475, 476, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 479, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 496,
	471, 470, 256, 0, 0, 0, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 479, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 1989, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	1986, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 2066, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 1992, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 2064, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	2063, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	1991, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 2065, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	496, 471, 470, 256, 0, 0, 0, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 1989, 277, 222, 0, 0,
	1983, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 1986, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 1992, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 1982, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 1991, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 1990, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 471, 470, 256, 607, 0, 496, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 606, 584, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 587, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 499, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 588,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 589,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 471,
	470, 256, 583, 0, 496, 0, 472, 473, 257, 474,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 584, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	587, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 499, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 588, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 589, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 496, 471, 470, 256, 0,
	0, 0, 0, 472, 473, 257, 474, 475, 476, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 587, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 499, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 588, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 589, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 471, 470, 256,
	1120, 0, 496, 0, 472, 473, 257, 474, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 499, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 925,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 471, 470, 256, 944, 0, 496,
	0, 472, 473, 257, 474, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 946, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 925, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 471, 470, 256, 941, 0, 496, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	943, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 925, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 471, 470,
	256, 937, 0, 496, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 939, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	925, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 471, 470, 256, 592, 0,
	496, 0, 472, 473, 257, 474, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 591, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 471, 470, 256, 519, 0, 496, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 518, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 499, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 517, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 496, 471,
	470, 256, 0, 0, 0, 0, 472, 473, 257, 474,
	475, 476, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 1964, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	471, 470, 256, 496, 2463, 0, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 471, 470, 256, 496, 2463,
	0, 0, 472, 473, 257, 474, 475, 476, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 2460, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 496,
	471, 470, 256, 0, 0, 0, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 925, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 471, 470, 256, 1726, 0, 496, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 471, 470,
	256, 1724, 0, 496, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 471, 470, 256, 1722, 0,
	496, 0, 472, 473, 257, 474, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 496, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 258, 259, 260,
	261, 1698, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	499, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 471, 470, 256, 1656, 0, 496, 0,
	472, 473, 257, 474, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	471, 470, 256, 1654, 0, 496, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 499, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 471, 470, 256,
	633, 0, 496, 0, 472, 473, 257, 474, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 1199, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 499, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	634, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 630,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 629, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 471, 470, 256, 1549, 0, 496,
	0, 472, 473, 257, 474, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1548, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 471, 470, 256, 633, 0, 496, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	1199, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 634, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 630, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 629, 250, 251, 454,
	0, 0, 455, 1200, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 471, 470,
	256, 633, 0, 496, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 623,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 634, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	630, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 1171, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 629, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 471, 470, 256, 1138, 0,
	496, 0, 472, 473, 257, 474, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 1137, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 471, 470, 256, 1134, 0, 496, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 499, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1133, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 471,
	470, 256, 1131, 0, 496, 0, 472, 473, 257, 474,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 499, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 1130, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 471, 470, 256, 1128,
	0, 496, 0, 472, 473, 257, 474, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	499, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 1127, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 471, 470, 256, 1124, 0, 496, 0,
	472, 473, 257, 474, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 1123, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 496,
	471, 470, 256, 0, 0, 0, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 258, 259, 260, 261, 1112,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 471, 470, 256, 1110, 0, 496, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	1109, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 471, 470,
	256, 1104, 0, 496, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 471, 470, 256, 1095, 0,
	496, 0, 472, 473, 257, 474, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 1094, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 471, 470, 256, 1090, 0, 496, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 499, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 471,
	470, 256, 1086, 0, 496, 0, 472, 473, 257, 474,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 499, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 1088, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 471, 470, 256, 964,
	0, 496, 0, 472, 473, 257, 474, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	499, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 966, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 471, 470, 256, 961, 0, 496, 0,
	472, 473, 257, 474, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	471, 470, 256, 633, 0, 496, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 623, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 499, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 622, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 634, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 624, 409, 0,
	413, 414, 630, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 625, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 629, 250, 251, 454, 0,
	0, 455, 627, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 471, 470, 256,
	613, 0, 496, 0, 472, 473, 257, 474, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 499, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 614, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 471, 470, 256, 609, 0, 496,
	0, 472, 473, 257, 474, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 471, 470, 256, 598, 0, 496, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 471, 470,
	256, 541, 0, 496, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 499, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 496, 471, 470, 256, 0, 0,
	0, 0, 472, 473, 257, 474, 475, 476, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 499, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 496, 471, 470, 256, 0,
	0, 0, 0, 472, 473, 257, 474, 475, 476, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 499, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 2362,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 496, 471, 470, 256,
	0, 0, 0, 0, 472, 473, 257, 474, 475, 476,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 499, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	2360, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 496, 471, 470,
	256, 0, 0, 0, 0, 472, 473, 257, 474, 475,
	476, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 499, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 2349, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 496, 471,
	470, 256, 0, 0, 0, 0, 472, 473, 257, 474,
	475, 476, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 499, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 614, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 496,
	471, 470, 256, 0, 0, 0, 0, 472, 473, 257,
	474, 475, 476, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 1562, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 499, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 0, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	496, 471, 470, 256, 0, 0, 0, 0, 472, 473,
	257, 474, 475, 476, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 499,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 1553, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 496, 471, 470, 256, 0, 0, 0, 0, 472,
	473, 257, 474, 475, 476, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	499, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	899, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 496, 471, 470, 256, 0, 0, 0, 0,
	472, 473, 257, 474, 475, 476, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 499, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 0, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 0, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 0, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 471, 470, 256, 0, 0, 0,
	0, 472, 473, 257, 474, 475, 476, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 0, 1307, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 1337, 1307, 0, 1321, 0, 0,
	0, 1322, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 1328, 0,
	0, 0, 0, 2242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 1340, 0,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 1301,
	0, 0, 0, 2239, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 2238, 0, 1307, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 1337, 1307, 0, 1321, 0, 0,
	0, 1322, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 1328, 0,
	0, 0, 0, 2237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 3048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1301, 0, 0, 0, 3044,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0,
	0, 1307, 0, 1321, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 1339, 1349, 0, 0, 1329, 1330,
	1331, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0,
	1337, 1307, 0, 1321, 0, 0, 0, 1322, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 1324, 1325, 1326, 1327, 0, 0, 0, 0, 0,
	1337, 1307, 0, 0, 1328, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 1347, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 1328, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 1328, 2986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 0, 2985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 1301, 0, 0, 0, 2935, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 0, 1307, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 1337, 1307, 0, 1321,
	0, 0, 0, 1322, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 1324, 1325, 1326,
	1327, 0, 0, 0, 0, 0, 1337, 1307, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	1328, 2896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 2807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 1301, 0, 0,
	0, 2764, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 0, 1307, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 1339, 1349, 0, 0,
	1329, 1330, 1331, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 1337, 1307, 0, 1321, 0, 0, 0, 1322,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 0, 0, 0,
	0, 0, 1337, 1307, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 1328, 2763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 2762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1348,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 1301, 0, 0, 0, 2730, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1325, 1326, 1327, 1301, 0, 0, 0, 0, 0, 1307,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 1339, 1349, 0, 0, 1329, 1330, 1331, 1335,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1348,
	0, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 1324,
	1325, 1326, 1327, 1301, 0, 0, 0, 0, 1337, 1307,
	0, 1321, 0, 0, 0, 1322, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 1324,
	1325, 1326, 1327, 0, 0, 0, 0, 0, 1337, 1307,
	0, 0, 1328, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 1328, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0,
	0, 0, 1328, 2551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0,
	0, 0, 0, 2524, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 1301,
	0, 0, 0, 1836, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 0, 1307, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 1337, 1307, 3124, 1321, 0, 0,
	0, 1322, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 0, 2287, 1328, 0,
	2286, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 3123,
	0, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 2204, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 1340, 0,
	2177, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 1939, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 1938,
	2178, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 0, 1307, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 1337, 1307, 0, 1321, 0, 0,
	0, 1322, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 728, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 1340, 0,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 0, 1307, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 1335, 0, 0, 0, 2292,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 1337, 1307, 0, 1321, 0, 0,
	2297, 1322, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	2528, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 1340, 0,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 2236,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 0, 1307, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 1337, 1307, 0, 1321, 0, 0,
	0, 1322, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 2255, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 1340, 0,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 0, 1307, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 1337, 1307, 0, 1321, 0, 0,
	0, 1322, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 1299, 1300,
	0, 0, 0, 0, 1342, 1343, 1344, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 1317, 1302, 0, 0, 1348, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	1301, 0, 0, 0, 0, 1323, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 1324, 1325, 1326, 1327,
	0, 0, 0, 0, 0, 1323, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1339,
	1349, 0, 0, 1329, 1330, 1331, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 0,
	0, 0, 1616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 1616, 0,
	0, 0, 0, 0, 0, 0, 1323, 1627, 1612, 1617,
	1600, 1637, 1636, 0, 0, 0, 1602, 1601, 0, 0,
	0, 0, 0, 0, 1646, 1645, 0, 0, 0, 1340,
	0, 0, 0, 1627, 1612, 1617, 1600, 1637, 1636, 0,
	0, 0, 1602, 1601, 0, 0, 0, 0, 0, 0,
	1646, 1645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1638, 0, 1634, 1633, 0, 0, 0,
	0, 0, 0, 0, 0, 1632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1638,
	0, 1634, 1633, 0, 0, 0, 0, 0, 0, 0,
	0, 1632, 0, 1631, 1629, 1630, 0, 1338, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 1312, 1310, 1311,
	1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0, 1631,
	1629, 1630, 1611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1620, 1615, 1621, 1622, 1623, 1624, 1625,
	0, 1619, 0, 0, 0, 0, 0, 0, 1611, 0,
	1643, 1644, 0, 0, 0, 0, 0, 0, 0, 1620,
	1615, 1621, 1622, 1623, 1624, 1625, 0, 1619, 0, 0,
	0, 0, 0, 0, 0, 0, 1643, 1644, 0, 1604,
	0, 660, 0, 690, 0, 0, 0, 0, 0, 0,
	0, 0, 1635, 0, 0, 0, 1613, 1614, 0, 0,
	0, 0, 0, 667, 0, 1604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 665, 0, 0, 1635, 0,
	0, 0, 1613, 1614, 0, 0, 0, 0, 0, 0,
	1628, 0, 0, 0, 1757, 1755, 1756, 1759, 1758, 666,
	0, 0, 0, 0, 668, 0, 0, 0, 695, 0,
	0, 0, 0, 0, 674, 675, 1628, 0, 0, 685,
	0, 0, 0, 0, 0, 0, 0, 1605, 1606, 1607,
	1608, 0, 691, 669, 0, 0, 0, 0, 0, 0,
	0, 1626, 1609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1648, 1605, 1606, 1607, 1608, 689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1626, 1609, 1603,
	0, 0, 1639, 1640, 1641, 1642, 0, 0, 1648, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 664, 0, 0, 1603, 0, 1610, 1639, 1640,
	1641, 1642, 1647, 0, 0, 0, 0, 671, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1610, 0, 0, 0, 0, 1647, 678,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 677,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 680, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 683,
	0, 0, 681, 0, 0, 0, 696, 697, 0, 0,
	0, 0, 0, 694, 0, 0, 0, 0, 0, 0,
	684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 686,
}
var sqlPact = [...]int{

	343, -1000, -14, -1000, -1000, -1000, 249, -1000, -1000, -1000,
	-1000, 245, 244, 243, -1000, 240, 238, 235, 231, 221,
	220, 214, 211, 208, 200, 197, 196, -1000, -1000, 194,
	-1000, -1000, -1000, -1000, 190, 189, 185, -1000, 184, 1539,
	31141, 181, 179, 174, 2107, 49260, 1656, 172, 171, -1000,
	169, 2240, 36523, 1240, 1810, -1000, 164, 163, 1674, 48879,
	337, 2021, 33820, 36136, 2088, 48492, 30754, 2050, 33433, 48105,
	-1000, -1000, 1166, -1000, -1000, 47718, 161, 159, 158, 157,
	155, -1000, 153, 47331, 151, 150, 149, 148, 141, 139,
	137, 134, -1000, 133, 125, 123, 121, 118, 109, 107,
	106, 104, 103, 101, 99, 98, 97, 95, 93, -1000,
	58109, 92, 80, 77, -1000, 1421, 76, 75, 73, 71,
	70, -1000, -1000, 69, 66, 64, 59, 58, 57, -1000,
	108, 56, 54, 53, 50, 49, -1000, 1315, 1028, 2921,
	13451, 1311, 1303, 1297, 1293, 1308, 837, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51927, 49260, 48, -42, 47,
	-1000, 2450, 834, 23341, 343, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35749, 35362, 34975,
	29206, 46944, 46557, 10989, 10989, 1040, -1000, -1000, -1000, -1000,
	-1000, -19, 32284, 49260, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 289, -1000,
	-1000, -1000, -1000, -1000, -1000, 19742, 760, 19318, 347, 18894,
	298, 472, -1000, -1000, -1000, 288, -1000, -1000, -1000, -1000,
	1366, -1000, -1000, -1000, -1000, 46170, 45783, 2167, 45396, 28809,
	28412, 45009, 1889, 1863, 44622, -1000, -1000, 44235, -1000, -1000,
	2302, 2016, 2006, 34588, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 43854, 43467, 43080, 42693, 42306, 28015, 27618,
	674, -1000, -1000, -1000, -1000, 24889, 673, -1000, -1000, -1000,
	-1000, -1000, 45, -1000, 44, 43, -1000, 42, 39, 33,
	28, 20, 16, 14, 13, -1000, 12, 11, -1000, 10,
	2, -1000, -11, -12, 1591, 1721, 2135, 41919, 1162, 49260,
	-1000, 1655, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	671, 49260, -1000, -1000, 20152, 87, -1000, 669, -1000, 2104,
	-1000, 20152, 87, -1000, 1653, 215, 1577, -1000, -1000, -1000,
	1403, 1164, -1000, -1000, 49260, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2642, 1499, 668, 41532, -1000, 1680, -1000, 823,
	14271, -1000, 1035, -1000, 14271, 287, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1434, 1262, 2599, 27221, 1491, 2471, 2286, 2641,
	1842, 2271, 2248, 2228, 2219, 2215, 2639, 1288, 2637, 1175,
	2636, 2180, 2169, 2616, 1622, 977, 2635, 2634, 2137, 2103,
	-1000, -1000, -1000, -1000, 1187, -1000, -1000, -1000, -1000, -1000,
	-1000, 38055, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1315, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1795, 2432, 2432, 2432, 2507, 448,
	438, -1000, 108, -1000, 1598, -1000, 1493, -1000, -1000, -1000,
	57037, -1000, -1000, 20152, 20152, 20152, 20152, 20152, 1546, -1000,
	-1000, -1000, 700, -1000, 667, 585, 11796, -1000, -1000, 2577,
	-1000, -1000, -1000, 456, 20152, -1000, 286, -1000, -1000, -1000,
	-1000, 661, 2619, -1000, 871, -1000, -1000, -1000, 829, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2161, 660, 659, -1000,
	657, 656, 655, -1000, -1000, -1000, 653, 651, 647, 643,
	641, 636, 635, 634, -1000, -1000, -1000, 1374, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 864,
	-1000, 864, 864, 587, 587, 624, 623, 590, 622, -1000,
	-1000, 621, 587, 617, 615, -1000, -1000, 612, 785, -1000,
	770, 611, 610, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1564, -1000, -1000, 1564, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1039, 50784, -1000, -1000, -1000, -21, 49260,
	-1000, 472, -21, -1000, -1000, 608, -1000, 14681, 14681, 14681,
	-1000, -1000, 1650, 20152, -1000, 2011, -1000, 3392, -218, 771,
	24502, -1000, 22567, 771, 735, 26824, -1000, 2095, -1000, -1000,
	603, 282, -1000, -1000, -1000, -1000, -1000, -1000, 1658, 2335,
	1041, -1000, 1344, 2334, -1000, 2388, 2332, 1343, -1000, -1000,
	846, 2331, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1436, -1000, -1000, 1558, 2329, -146, 2217, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1665, -1000, 29601, 32284, -23,
	-1000, -1000, -51, -1000, 10594, 57037, -1000, -1000, -1000, 57037,
	759, -1000, -1000, 2326, -1000, 57037, 650, -1000, -1000, 2325,
	-1000, 2081, 49260, 10989, 49260, 49260, -1000, 602, 1714, 1647,
	-1000, -1000, 31903, 2388, 1713, -1000, -1000, 833, 1709, -1000,
	-1000, 1707, -1000, 472, -1000, -1000, 41145, 51546, 833, 1706,
	-1000, -1000, -1000, 38055, -1000, 49260, -1000, 49260, -1000, 1189,
	-1000, 51165, 144, 2324, -1000, -1000, 144, 2322, -1000, 144,
	2321, -1000, 140, 2320, -1000, -1000, 1505, 2319, -1000, -66,
	2318, -1000, -1000, -66, 2298, -1000, -1000, 20152, -45, -1000,
	-1000, -1000, 834, 30367, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40758, 29601, 31903, 49260, 34201, 29601, 670, 57037, -1000,
	2545, 57914, 29601, 57037, -1000, 31903, 49260, 2151, -1000, 40371,
	39984, 2438, 822, -1000, -1000, 49260, -1000, 20152, -1000, 2544,
	1639, -41, -1000, -1000, -1000, -1000, -1000, 1750, 1984, 982,
	1437, -1000, 14271, 14271, 2383, -1000, 281, 10989, -1000, -1000,
	1092, 1797, -1000, -1000, -1000, -1000, 29601, 29601, -1000, 39597,
	-1000, -1000, -1000, 1486, 49260, -1000, -1000, 2142, -1000, 31522,
	49260, -1000, 49260, -1000, 49260, -1000, 49260, -1000, 49260, -1000,
	-1000, -1000, -1000, -1000, 2246, 1321, 1314, -1000, 49260, -1000,
	49260, -1000, -1000, -1000, 1748, -1000, -1000, -1000, 39216, 38829,
	38442, -1000, -1000, 1302, -1000, 1084, -1000, -1000, 145, -1000,
	-1000, 1795, -1000, 1660, 1837, 18470, 1813, 20152, 108, -1000,
	-1000, 108, 108, 13027, -1000, -1000, -1000, 49260, -1000, 57888,
	57914, 10989, 1047, 20152, 20152, 20152, 20152, 20152, 20152, 20152,
	20152, 20152, 20152, 20152, 20152, 20152, 20152, 20152, 20152, 20152,
	20152, 20152, 20152, 20152, 20152, 20152, 20152, 20152, 20152, 20152,
	20152, 20152, 20152, 20152, 20152, 20152, 20152, 20152, 1798, 20152,
	1037, 20152, 20152, 20152, 20152, 1407, -1000, -1000, 1442, 509,
	1461, -1000, 2582, 2582, 2582, 57397, 57397, 566, 700, -1000,
	20152, -1000, 87, 20152, 438, 55251, 1772, -20, 11386, -1000,
	-1000, -1000, -1000, 18046, 859, 57037, 10199, 7282, -1000, 2603,
	1143, 2176, 1961, 598, 729, 726, 719, 699, 695, 20152,
	20152, 20152, 20152, 20152, 20152, 20152, 20152, -1000, -1000, -1000,
	-1000, -1000, -1000, 2577, -1000, 17636, 17212, -1000, 2602, 16788,
	16364, -1000, 15940, 21382, 15516, 1046, 1032, 986, 981, 20152,
	12206, -1000, -41, -1000, 50784, -1000, 49260, -21, 2542, 20152,
	210, -1000, 56107, -1000, 210, 210, 596, -48, 57037, 1815,
	1809, 23728, 1625, 1555, 1555, 1555, -1000, 595, 691, 771,
	7810, 36904, 1556, 771, 771, 19, 300, 437, 22180, 2011,
	36904, -1000, -1000, 49260, 594, 7282, 10989, -29, 1332, -1000,
	33046, 2407, 2403, 2400, 1188, -1000, 1148, 2506, 38055, 2524,
	87, 2434, 2076, -1000, -1000, 1036, 38055, 2388, -1000, 57914,
	-1000, 1883, 2495, 1139, 1154, 1139, 1139, 1137, 38055, 1030,
	1516, 29601, 2424, 1029, -31, 2521, 87, 2420, 2071, 1017,
	-1000, -1000, 49260, 10989, 2419, 1080, 768, -23, 32284, 49260,
	273, -1000, 20152, 87, 20152, 87, 1124, -55, 271, 1823,
	1818, 19, -1000, 32665, 2541, 2291, 49260, 1826, -1000, 2388,
	2290, -1000, 1501, -1000, 2284, 2283, 2540, 1646, 1696, -1000,
	-1000, -1000, 1642, 1692, 1058, 2278, 852, 340, 2536, 340,
	26050, -1000, 49260, -1000, 49260, -1000, -1000, 49260, -1000, 49260,
	-1000, 49260, -1000, 49260, 49260, -1000, 49260, 29601, 29601, 29601,
	-56, 5023, 30367, -61, 832, 1016, -57, -1000, 435, 49260,
	887, 32665, 5337, -71, -1000, 1081, -1000, -1000, -1000, 452,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 864, 592, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 590, 1374, 587, 587, 587, -1000, -1000, -1000, 785,
	-1000, 770, -1000, -1000, -1000, 864, 864, -1000, -1000, -185,
	2053, -51, 34201, 768, -1000, 768, -1000, 2131, -1000, 2440,
	795, -74, 935, -41, -1000, 1564, -1000, 1220, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2618, -1000, 2589, -1000, -1000, 2601, -24, -1000, -24,
	-1000, 10989, -1000, 49260, 2127, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 49260, -1000, 49260, -1000, -1000, -1000, -1000,
	-1000, -1000, 1196, -1000, 2123, -1000, 2116, -1000, 270, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 49260, 49260, 49260,
	-1000, 38055, -1000, -1000, -1000, -1000, 57037, -1000, 489, -1000,
	-1000, 57037, 1225, 1833, -1000, 1833, -25, -1000, 56037, 1792,
	49260, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 813, 414, 414, 999, 999, 999, 999,
	2529, 861, 3453, 1463, 57628, 57628, 57628, 57628, 57628, 57628,
	57628, 57628, 549, 451, 451, 549, 549, 549, 549, 549,
	451, 451, 451, 57628, 57628, 57628, 57397, 57327, 6101, 20152,
	20152, 1007, 1426, 509, 5964, 20152, 3993, 3993, 3993, 3993,
	-1000, 1554, -1000, -1000, -1000, -1000, 2043, 586, 21382, 21382,
	-1000, -1000, -1000, 11796, 20152, -1000, -1000, -1000, -1000, 585,
	20152, -1000, 55607, -241, 434, -156, 269, 49260, 20152, 690,
	-76, -1000, 1141, -1000, 20152, 268, -1000, -1000, 22, 20152,
	20152, 20152, 432, -1000, 431, -1000, 1006, -1000, 1000, 988,
	969, -1000, 584, 1544, 583, 582, 20152, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 56967, 53127, 52837,
	52767, 6394, 52697, 6825, -79, -84, 428, -1000, 2033, -156,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 424, -1000, 419,
	-85, -1000, -86, -1000, 418, -1000, 56897, -156, 417, 4739,
	-1000, 21382, 21382, 21382, -1000, 415, -1000, 55747, -1000, 811,
	810, 809, 808, 56607, 15092, 15092, 15092, 413, 56537, 20152,
	-156, -1000, -1000, 581, -93, 852, 14681, 22954, 10989, -1000,
	852, 852, 20152, -1000, 20152, 23728, 23728, 1181, 1808, 23728,
	-1000, -1000, -1000, -1000, 36904, 525, 771, 36904, -1000, 2577,
	1822, -1000, -1000, -1000, 49260, 472, -1000, 36904, 36904, 10989,
	771, -1000, 411, 25276, 22, 260, 1731, 49260, 49260, 49260,
	-1000, -1000, 1689, 50403, 1684, 57914, 49260, -1000, -1000, 580,
	579, 1787, 1779, 49260, 49260, 50022, 49641, 49260, 1524, 20152,
	1623, 1418, 87, -1000, 806, 573, 49260, 1341, -1000, -1000,
	-1000, -1000, -1000, 49260, -1000, -1000, 2596, -1000, 1139, -1000,
	-1000, -1000, 1139, 2388, 1265, 49260, 29601, 841, 799, 49260,
	1500, 87, -1000, 796, 572, 10989, 1509, -1000, 794, 49260,
	1928, -1000, 1664, -1000, -1000, 9804, 57037, -1000, 57037, -1000,
	-1000, -1000, 10989, 1898, 1898, 410, -26, -1000, -1000, -1000,
	-1000, -1000, -1000, 1845, 49260, 601, 49260, 87, 49260, 191,
	832, 29601, 49260, 29601, 29601, 29601, 87, 49260, 2275, 49260,
	2267, 2340, 751, 49260, 1562, 20152, 1497, -1000, 25663, 873,
	49260, 1254, 115, -1000, -1000, -1000, 18, 49260, -1000, -1000,
	144, 144, 144, -1000, 140, 1505, -1000, -66, -66, -1000,
	-1000, -1000, 5023, 2031, 37674, 49260, 2538, 832, 569, 29601,
	-99, -1000, 892, 975, 974, -1000, 57914, -1000, 696, 939,
	-1000, 2595, 568, 2577, -1000, 832, 49260, 94, -1000, 839,
	1480, -1000, 14271, 14271, -1000, 1564, -1000, -1000, 1235, -1000,
	1368, -1000, -1000, -1000, -1000, 14271, -1000, -1000, 1068, -51,
	-51, -1000, 1178, 1169, 49260, -1000, -1000, -1000, -1000, 1225,
	-1000, 20152, -1000, -1000, -1000, 13027, -1000, -1000, -1000, 49260,
	-192, 20152, 20152, 5053, 4233, 20152, 21382, 21382, -1000, 20152,
	3444, -1000, -1000, -1000, -1000, -1000, 2024, 567, 20152, 57914,
	4076, 637, -100, 549, -1000, 20152, -1000, 9409, -102, 55181,
	-1000, -1000, 694, 2231, -1000, 20152, 56467, 9014, 404, 13861,
	-1000, 56177, 4, 4, -1000, 2615, 1725, 1394, 1381, 1206,
	2593, -1000, 26437, 854, 1562, 55111, 57888, 57914, 20152, 20152,
	-1000, 20152, 20152, 20152, -1000, -1000, 2577, -1000, 20152, -1000,
	-1000, -1000, -1000, -1000, 2005, 20152, -1000, 57888, 57914, 21382,
	21382, 21382, 21382, 21382, 21382, 21382, 21382, 21382, 21382, 21382,
	21382, 21382, 21382, 21382, 21382, 21382, 21382, 21382, 1757, 21382,
	2579, 2579, 2579, -1000, 2111, 2005, 20152, 20152, -1000, -1000,
	-1000, -1000, 57914, 403, 402, 390, -1000, 20152, -156, 5337,
	-1000, 1947, -1000, -105, -1000, 2011, -1000, -1000, 1947, 1947,
	-107, 57037, -1000, 1181, -1000, 565, 20152, 23728, -1000, 689,
	-1000, -108, -1000, 36904, -1000, 686, -238, -1000, 764, -1000,
	472, -1000, -1000, -1000, 257, 36904, -1000, -109, -1000, 2535,
	384, 10989, -1000, -1000, 966, 964, -1000, 2265, -1000, 1683,
	-1000, 877, -1000, 1250, 20152, 24115, 564, 562, 1399, -1000,
	2257, 1505, 2255, 1505, -1000, -1000, 797, -1000, 57037, 561,
	560, -1000, -29, 1285, -1000, 20152, 20152, -1000, 963, -1000,
	-1000, -1000, 2388, 962, -1000, -1000, 1484, 20152, -1000, -1000,
	-1000, 20152, 20152, -1000, -31, 957, 20152, 2214, 832, 2002,
	1096, -1000, -1000, -1000, -1000, -1000, -1000, 1848, 32665, 49260,
	559, 49260, 556, -1000, -1000, 554, 49260, -1000, -1000, 2388,
	-1000, 833, -1000, -1000, 882, 10989, 546, 10989, 1756, 751,
	29986, -1000, 833, 1837, -1000, 57037, -1000, 1254, 12616, 2415,
	-110, -1000, 252, -1000, -1000, -1000, 852, 26050, 23728, 20152,
	2633, -115, -1000, -1000, -1000, -1000, -1000, -1000, 87, -34,
	527, -1000, 763, 762, -51, 1576, -1000, 29601, 49260, 49260,
	-1000, 2587, -1000, 685, 374, 2577, 373, -1000, -51, 49260,
	-1000, 1572, 10989, 49260, 49260, 10989, 49260, -1000, -1000, -41,
	-1000, -1000, -1000, -1000, 49260, -1000, -1000, -1000, 1580, 54755,
	-1000, 2431, 10989, 2509, 3993, 20152, 20152, 714, 405, 376,
	3993, 20152, 20152, 57914, 57467, -116, 20152, 20152, -1000, 681,
	57037, -1000, -1000, -1000, -1000, -1000, -1000, 57037, 20152, 146,
	-1000, 2609, 20152, 372, 361, 360, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 359, -1000, -1000, 52308, -1000, 20152,
	355, -1000, 352, 351, 6534, 5645, 54685, 54615, 54259, 344,
	57037, 2111, 57037, -1000, -1000, 922, 922, 1152, 1152, 1152,
	1152, 2579, 557, 800, 388, 474, 474, 474, 723, 492,
	492, 474, 474, 474, 1997, 1758, 524, 4861, -1000, -1000,
	57037, 57037, 330, -1000, -1000, -1000, -156, 329, 1943, 2491,
	-1000, 23728, 1943, 1943, -1000, -1000, 49260, 57037, -1000, -218,
	-1000, 2577, -1000, -1000, 1822, -1000, 8219, -1000, 10989, -1000,
	-1000, 25276, -1000, 520, -1000, 5, 49260, 49260, 49260, 2233,
	-1000, 3218, -1000, 54189, -117, -1000, 2464, 2464, 20152, 19,
	24115, 49260, -1000, 1432, 1831, 921, 49260, -1000, 49260, -1000,
	-1000, 49260, 49260, 49260, 49260, 49260, 57037, -118, 49260, 49260,
	29601, 57037, 57037, -123, 10989, 57037, 2417, -1000, 29601, 979,
	1500, 1921, -1000, 519, 24115, 518, 49260, 32665, 2533, -1000,
	-1000, -1000, 515, 2084, 1627, 24115, 1626, 1771, 751, 29986,
	-1000, 1058, 1254, -1000, -1000, -43, -1000, 506, 87, 49260,
	2631, 1562, -1000, -50, 57037, -1000, 761, -1000, 37289, 37289,
	29601, 29601, -1000, 322, 2370, 2368, 680, -1000, -1000, 320,
	-1000, -51, 1669, -1000, -1000, 1522, 1649, -1000, -1000, -1000,
	-1000, -1000, 2431, 3993, 3993, 20152, 20152, 20152, 3993, 57467,
	-124, -1000, 3993, 3993, -1000, 57037, 8619, -1000, 56177, -1000,
	-1000, -1000, -1000, 1525, -1000, 54119, -1000, -1000, -1000, 20152,
	20152, -1000, -1000, -1000, -1000, -1000, -1000, 21382, 1991, 513,
	57914, -1000, -1000, 835, 20152, 20152, 2011, 835, 835, -131,
	771, -1000, -1000, -1000, 2577, 5, -1000, 2623, 10989, -1000,
	-1000, -1000, 49260, -1000, 49260, -1000, 10989, 49260, 1969, 1675,
	-1000, -1000, 1776, 510, 21382, 49260, 736, -1000, 1410, 24115,
	2431, 10989, 2431, 53763, -133, -136, 1673, -1000, -1000, 1671,
	20152, -1000, 57914, 1505, 1505, -139, -142, -1000, 954, 953,
	950, -1000, -1000, -1000, 948, -1000, 784, -66, 20152, -1000,
	-1000, 1530, 24115, -144, 24115, -147, 314, 87, 24115, -1000,
	-1000, 49260, -149, 49260, -1000, 751, 29986, -1000, 2340, -1000,
	2349, 49260, 2397, -1000, -1000, -1000, 1837, 509, -1000, -150,
	-1000, -1000, 832, 508, 504, -1000, -1000, -129, -1000, 724,
	721, -1000, -1000, -1000, 10989, 1064, -1000, 3993, 3993, 3993,
	-1000, -1000, -1000, 305, 1562, 2486, -1000, 53693, 53623, 540,
	21382, 57914, -157, -1000, 49260, 57037, -156, -1000, -1000, -1000,
	36904, 679, -1000, -1000, 1663, -1000, -1000, -1000, 49260, 1681,
	-1000, -1000, 20152, 4861, 503, 20152, -1000, 1848, 500, -1000,
	-1000, -1000, -1000, -1000, -1000, 2464, -1000, 1269, -1000, -1000,
	57037, 2463, -1000, -1000, 498, 496, 49260, 49260, 494, 491,
	20152, 57037, 49260, -158, 1410, -163, -1000, 1848, -1000, -165,
	882, -1000, 490, 29986, -1000, 1756, 1051, -170, 49260, 1254,
	-1000, -1000, -1000, 29601, 29601, 1669, -1000, 49260, -1000, 49260,
	-1000, 49260, -1000, 1428, 20152, -1000, -1000, 540, -172, -1000,
	-138, -1000, 2528, -1000, -1000, -1000, -1000, 2229, 53267, 1735,
	49260, 53197, 1500, 49260, 2431, 49260, 880, 10989, 1522, 1522,
	-1000, -1000, 20152, 20152, 57037, 478, -1000, 1848, 1410, 1500,
	1410, 477, 24115, -1000, 1771, 1167, -1000, 852, -1000, -1000,
	-179, -180, -1000, -182, -188, -1000, 295, 20972, 20972, -156,
	-1000, 49260, 476, 2187, -1000, 1601, 1543, 212, 893, -1000,
	-193, -1000, 472, -1000, 20152, -1000, -194, -1000, 870, -195,
	-1000, 869, -196, -201, 49260, 1500, 1848, -1000, 1848, 24115,
	-202, -1000, 26050, -1000, 832, 832, -1000, -1000, -1000, -1000,
	-1000, 21777, 1563, 1222, 55677, -1000, -1000, -1000, 49260, -1000,
	1621, 1607, 1216, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1735, 57037, -1000, 1522, 1902, -1000, 1522, 1971, -1000, -1000,
	-203, -1000, 1500, 1500, -204, -1000, -173, -1000, -1000, 2551,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2355, -1000, 910,
	1644, 1644, 1601, -1000, 471, -1000, 461, 1472, -1000, -1000,
	1410, -1000, 20562, -1000, 2560, -1000, -1000, 1820, -1000, -1000,
	20152, 20152, -1000, -1000, -1000, 1848, -1000, -1000, -1000, -1000,
	-211, -214, 1500, 1500, 946, -1000, -1000, 457, 20152, -232,
	1500, -1000,
}
var sqlPgo = [...]int{

	0, 3125, 3114, 2066, 3113, 2388, 3111, 3108, 3101, 3100,
	3098, 2368, 3097, 3096, 3090, 3088, 3087, 3080, 3079, 3078,
	3077, 3076, 3072, 3071, 3066, 3064, 3063, 3062, 3060, 3057,
	3055, 3054, 2366, 3053, 2360, 3052, 3051, 3050, 3049, 3046,
	3043, 3041, 3039, 27, 3038, 3037, 3034, 3033, 2340, 3030,
	3028, 2338, 3027, 3025, 2329, 3022, 3021, 3017, 2327, 2325,
	3009, 3007, 2321, 3005, 3000, 2316, 2999, 2298, 2997, 2993,
	2286, 2992, 100, 107, 2991, 2284, 2990, 2986, 2243, 2226,
	2222, 2985, 2212, 2984, 2983, 2209, 2203, 2979, 110, 2973,
	2972, 2971, 2970, 2198, 2188, 2968, 2967, 2966, 171, 2963,
	2101, 2962, 2961, 2956, 2952, 2951, 2949, 2943, 2939, 2938,
	2935, 2931, 2930, 2922, 2921, 2913, 2903, 2901, 2895, 2894,
	2893, 2888, 2886, 2884, 2883, 2882, 2881, 185, 115, 2880,
	2878, 2086, 2061, 2877, 2876, 43, 38, 17, 81, 112,
	170, 4961, 161, 2874, 2873, 2871, 2867, 2865, 26, 128,
	123, 116, 109, 152, 2863, 2861, 59, 40, 30, 23,
	83, 2859, 2856, 2851, 1657, 91, 2849, 2846, 169, 172,
	2845, 1156, 2842, 29, 101, 96, 87, 127, 49, 2838,
	104, 18, 2834, 179, 162, 2830, 79, 32, 24, 3674,
	77, 61, 55, 195, 143, 146, 144, 124, 684, 2828,
	175, 71, 140, 2826, 2825, 2824, 51, 142, 1, 9,
	131, 8, 2822, 15, 2820, 10, 2819, 2817, 2814, 2813,
	16, 108, 39, 37, 2810, 21, 556, 137, 2808, 160,
	2807, 80, 2804, 178, 141, 2, 149, 2803, 88, 22,
	82, 2801, 2800, 98, 164, 2799, 25, 117, 86, 93,
	186, 148, 90, 157, 151, 2796, 2794, 2792, 129, 2788,
	138, 122, 2787, 2786, 28, 47, 163, 48, 2785, 2784,
	105, 2781, 145, 2780, 2777, 2776, 183, 113, 135, 5,
	57, 85, 7, 158, 102, 65, 72, 2770, 2595, 996,
	3213, 2769, 2768, 99, 50, 44, 78, 106, 173, 31,
	2767, 2766, 3023, 2763, 2762, 2760, 130, 2758, 2755, 2753,
	94, 33, 54, 2746, 103, 45, 74, 182, 58, 150,
	132, 176, 121, 2745, 134, 92, 2744, 156, 174, 56,
	2735, 165, 2733, 139, 2732, 2731, 2730, 2727, 52, 2726,
	2725, 2723, 118, 2722, 95, 2721, 136, 133, 154, 73,
	125, 168, 159, 2383, 2714, 153, 34, 2708, 3045, 36,
	0, 3487, 3501, 2706, 147, 89, 2704, 2703, 2702, 2701,
	35, 11, 6, 3, 14, 12, 922, 97, 2697, 2695,
	372, 75, 119, 2694, 187, 155, 2692, 2691, 2689, 62,
	2688, 19, 2684, 13, 2683, 2674, 20, 4, 2673, 2671,
	193, 2670, 2668, 2666, 2517, 2664, 181, 2663, 2657, 114,
	2651, 2650, 2648, 2161, 2646, 2645, 68, 42, 126,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 406, 406, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	405, 405, 152, 152, 151, 147, 147, 408, 408, 153,
	153, 153, 155, 155, 32, 32, 86, 86, 86, 138,
	79, 79, 79, 79, 79, 74, 74, 358, 358, 359,
	359, 134, 134, 135, 135, 135, 135, 136, 136, 137,
	137, 137, 46, 34, 34, 34, 34, 34, 34, 34,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 44, 44, 128, 128,
	47, 47, 47, 47, 47, 47, 47, 47, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 58, 58, 56, 326, 326, 59, 59, 60,
	60, 60, 60, 60, 60, 61, 61, 61, 61, 61,
	61, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 68, 68, 68, 69, 69, 69, 66, 66, 66,
	64, 64, 64, 63, 63, 63, 67, 67, 67, 65,
	65, 65, 234, 234, 70, 70, 70, 70, 70, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 73, 73, 73, 73, 73,
	73, 73, 73, 328, 328, 71, 71, 300, 300, 75,
	75, 259, 259, 76, 76, 76, 76, 76, 77, 77,
	77, 77, 87, 87, 87, 87, 404, 404, 227, 227,
	168, 168, 168, 168, 82, 82, 82, 82, 83, 83,
	83, 84, 84, 133, 133, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 38, 38, 38, 39, 39,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	43, 94, 94, 94, 96, 93, 93, 93, 95, 95,
	95, 95, 97, 97, 98, 98, 98, 98, 98, 98,
	99, 99, 352, 352, 237, 237, 350, 350, 351, 351,
	204, 204, 204, 204, 204, 205, 205, 205, 357, 357,
	357, 357, 357, 357, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 118, 118, 118, 127, 127,
	127, 127, 127, 127, 127, 120, 120, 120, 111, 111,
	101, 101, 101, 101, 107, 107, 107, 107, 107, 102,
	102, 108, 108, 110, 110, 112, 112, 112, 112, 112,
	112, 103, 103, 103, 103, 114, 114, 114, 114, 113,
	113, 123, 123, 123, 123, 123, 123, 313, 313, 119,
	119, 119, 119, 122, 122, 122, 122, 117, 117, 117,
	121, 121, 124, 124, 124, 124, 104, 104, 105, 105,
	106, 106, 125, 125, 116, 116, 126, 126, 126, 126,
	126, 126, 126, 115, 115, 115, 407, 407, 109, 402,
	402, 400, 400, 400, 400, 400, 400, 400, 401, 401,
	403, 403, 80, 80, 80, 52, 52, 53, 53, 206,
	206, 207, 207, 281, 281, 281, 281, 208, 208, 154,
	154, 154, 211, 212, 212, 209, 209, 210, 210, 210,
	214, 214, 213, 216, 216, 215, 280, 368, 368, 369,
	369, 369, 369, 369, 369, 369, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 366, 366, 366, 367,
	364, 364, 365, 365, 365, 365, 411, 411, 279, 279,
	220, 220, 371, 371, 371, 371, 372, 372, 372, 372,
	372, 375, 374, 373, 373, 373, 373, 373, 309, 309,
	309, 57, 57, 57, 248, 248, 247, 247, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 130, 130, 54, 54, 54, 160, 160, 51, 51,
	51, 55, 55, 50, 50, 50, 50, 50, 264, 264,
	264, 263, 263, 225, 225, 315, 315, 315, 172, 172,
	173, 173, 148, 148, 148, 20, 22, 22, 16, 16,
	16, 16, 16, 16, 29, 29, 30, 30, 26, 26,
	409, 409, 410, 410, 81, 81, 85, 85, 85, 91,
	91, 129, 129, 129, 129, 129, 129, 129, 33, 33,
	33, 33, 45, 45, 45, 45, 89, 414, 414, 414,
	90, 90, 413, 413, 167, 167, 167, 167, 169, 169,
	276, 276, 277, 277, 415, 415, 278, 278, 278, 162,
	161, 163, 163, 49, 49, 49, 156, 156, 157, 157,
	158, 158, 159, 159, 416, 416, 78, 78, 78, 132,
	132, 200, 200, 272, 272, 272, 221, 221, 178, 178,
	275, 275, 273, 273, 273, 246, 246, 246, 131, 131,
	230, 230, 239, 239, 240, 240, 323, 323, 241, 88,
	88, 141, 141, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 142, 142, 142, 142, 142, 142, 142, 145,
	145, 145, 145, 146, 146, 146, 144, 144, 382, 382,
	382, 384, 384, 385, 381, 381, 383, 383, 412, 412,
	250, 250, 250, 218, 219, 217, 217, 417, 417, 223,
	223, 222, 224, 224, 314, 314, 314, 244, 244, 244,
	244, 267, 267, 265, 265, 266, 266, 268, 268, 269,
	269, 269, 270, 270, 271, 271, 243, 243, 296, 296,
	143, 143, 143, 229, 229, 229, 231, 231, 286, 286,
	286, 287, 287, 285, 285, 285, 285, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 317, 317, 232, 232,
	318, 274, 274, 398, 398, 398, 399, 399, 312, 312,
	319, 319, 319, 319, 319, 319, 310, 310, 311, 311,
	324, 325, 325, 253, 253, 253, 253, 251, 251, 252,
	252, 320, 320, 320, 320, 245, 245, 321, 321, 321,
	282, 282, 329, 329, 329, 344, 344, 228, 228, 228,
	339, 339, 330, 330, 330, 330, 330, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 333,
	333, 333, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	343, 343, 343, 343, 343, 334, 334, 340, 341, 335,
	336, 342, 342, 342, 342, 346, 346, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 338, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 261, 261, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 290,
	290, 290, 290, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 376, 376, 376, 376,
	376, 376, 376, 376, 379, 379, 380, 380, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 386, 386, 387,
	387, 389, 389, 390, 390, 391, 392, 392, 392, 393,
	394, 394, 388, 388, 395, 395, 395, 396, 396, 397,
	397, 397, 397, 397, 302, 302, 308, 308, 308, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 170, 170, 170, 170, 170,
	236, 236, 235, 235, 299, 299, 297, 297, 301, 301,
	254, 254, 345, 345, 345, 345, 345, 345, 345, 255,
	255, 255, 262, 256, 256, 257, 257, 257, 257, 257,
	293, 294, 258, 258, 258, 295, 295, 303, 307, 307,
	306, 305, 305, 304, 304, 283, 283, 284, 284, 242,
	242, 418, 418, 238, 238, 322, 322, 322, 322, 202,
	202, 233, 233, 201, 201, 195, 195, 196, 196, 196,
	196, 226, 226, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 347, 347, 347, 348, 349, 298,
	188, 187, 175, 176, 186, 185, 184, 174, 177, 181,
	182, 183, 179, 180, 191, 190, 189, 327, 197, 197,
	198, 198, 198, 199, 199, 199, 199, 171, 171, 192,
	192, 193, 194, 194, 164, 164, 164, 165, 165, 166,
	166, 356, 356, 354, 354, 354, 355, 355, 355, 355,
	353, 353, 353, 353, 353, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	6, 9, 12, 12, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 5, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 1, 7, 3, 6, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 6, 3, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 3, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 5, 4, 6, 4, 6, 4, 1, 0, 2,
	3, 3, 3, 6, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 2, 3, 2, 3, 7, 7, 8, 10,
	7, 4, 5, 5, 5, 3, 1, 1, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 8, 11, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 4, 7, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 7, 3, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 6, 3, 13, 16, 9, 12, 4, 2, 2,
	0, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 1, 3, 1, 3,
	8, 5, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 2, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 2, 2, 1, 5, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 51, 78, 66, -54, -51, -48,
	-58, 80, 100, -383, 104, -62, -65, -67, 108, 116,
	121, 122, 146, 155, 257, 264, 286, 288, 290, 299,
	-40, -39, 117, -139, -141, 284, -83, -84, -93, -94,
	-95, -96, -133, 317, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	320, -33, -45, -90, -89, 365, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-382, -63, -64, -66, -68, -69, -142, -140, 421, 285,
	375, 37, 329, 67, 112, 294, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 392, 400, -145, -143, -144,
	-146, 306, 383, 342, 425, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 2, 342, 386, 307,
	376, 93, 168, 269, 255, -400, 2, 4, -362, -360,
	-196, -195, 342, 93, 30, 38, 39, 41, 44, 56,
	57, 58, 61, 97, 98, 115, 123, 124, 135, 148,
	150, 158, 159, 160, 175, 181, 183, 163, 203, 232,
	234, 247, 251, 261, 263, 272, 296, 323, 338, 354,
	355, 356, 362, 363, 383, 384, 388, 395, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 52, 55, 60, 65, 66,
	67, 68, 69, 74, 71, 72, 73, 76, 78, 79,
	82, 83, 91, 92, 94, 95, 96, 100, 102, 104,
	107, 108, 110, 111, 113, 116, 117, 120, 118, 348,
	350, 119, 121, 122, 132, 133, 134, 136, 137, 139,
	141, 145, 147, 152, 153, 154, 155, 156, 157, 169,
	164, 170, 174, 177, 176, 178, 179, 180, 171, 185,
	188, 189, 190, 192, 193, 196, 197, 198, 201, 200,
	205, 206, 209, 210, 213, 215, 218, 219, 222, 220,
	221, 224, 225, 227, 226, 233, 235, 236, 238, 239,
	242, 243, 246, 249, 252, 253, 254, 255, 256, 257,
	258, 260, 262, 264, 266, 267, 268, 269, 270, 271,
	273, 274, 276, 277, 278, 279, 280, 284, 282, 283,
	285, 286, 287, 288, 290, 292, 293, 294, 295, 297,
	318, 319, 331, 299, 300, 301, 302, 303, 304, 305,
	309, 313, 310, 311, 312, 307, 308, 314, 315, 317,
	320, 322, 324, 325, 328, 329, 330, 332, 335, 336,
	337, 333, 334, 327, 340, 341, 343, 344, 345, 346,
	347, 349, 351, 352, 357, 360, 361, 365, 366, 368,
	369, 372, 373, 374, 379, 375, 377, 380, 381, 382,
	387, 386, 393, 394, 396, 397, 398, -194, -164, 414,
	-193, 424, 424, 424, 2, 189, 190, 268, 267, 314,
	315, -189, -192, -193, -194, -164, 4, -360, -362, 93,
	240, 424, 424, 424, 2, 342, 330, 55, 307, 376,
	292, 386, -263, 185, 93, 371, -164, 264, 24, 2,
	102, 174, 374, 373, 24, 260, 308, 344, 346, 2,
	424, 424, 2, 386, 307, 342, 168, 93, 376, 292,
	-183, 2, -164, -73, 2, 421, 27, -72, -5, -48,
	-58, -62, -75, -70, -11, -32, -34, -54, -51, -59,
	-65, -67, -79, -78, -80, -82, -86, -85, -88, -93,
	-94, -100, -131, -132, 80, 25, 108, 317, 117, 184,
	2, -404, -227, 2, 24, -168, -164, 80, 146, 306,
	-138, 342, 2, -164, 189, 190, 2, -183, 2, -400,
	2, 189, 190, 2, -404, -227, 23, 2, -164, 2,
	303, 320, -169, 2, 299, -164, 424, 424, 424, 424,
	424, 424, 210, 60, 296, 314, -98, 361, -97, 354,
	301, -99, -352, 2, 222, -164, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	2, -127, 314, 330, 153, 36, 60, 24, 65, 94,
	147, 168, 169, 197, 75, 76, 267, 210, 190, -313,
	315, 343, 302, 340, 361, 80, 377, 293, -407, 118,
	4, 93, 222, 316, 354, 69, 347, 348, 424, 424,
	424, -412, 2, 342, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, -140, -142, -141, 424, 424,
	424, 424, 424, -222, -223, 370, 182, 114, 245, -139,
	-141, 2, -382, -127, 314, 2, 60, 24, -350, 2,
	-288, 240, -290, 412, 413, 407, 228, 399, -302, 99,
	217, 216, -292, -303, 115, 296, 421, -199, -291, 427,
	9, -379, -141, 31, 53, -197, -164, 7, 8, 5,
	6, -171, -331, -298, -338, 364, 125, 231, -376, -377,
	-198, 4, -360, -354, -332, -341, -336, -337, -339, 42,
	49, 48, 351, 221, 309, 310, 311, 312, 324, 379,
	164, 40, 238, 239, 176, 183, 63, 85, 86, 84,
	89, 88, 90, 87, 316, 376, 54, 30, 158, 159,
	163, 232, 160, 61, -378, 43, 95, 107, 136, 137,
	177, 178, 179, 180, 192, 193, 334, 357, 39, 41,
	44, 56, 57, 97, 98, 123, 124, 135, 148, 175,
	181, 203, 234, 251, 261, 272, 323, 338, 354, 355,
	356, 362, 363, 384, -361, -342, 81, 126, 144, 173,
	161, 186, 187, 191, 204, 207, 223, 230, 248, 250,
	291, 321, -413, 2, 361, 361, 2, -413, 2, -413,
	2, -167, 2, 361, 358, -414, 361, 395, -384, 273,
	-385, -183, -384, 424, 424, 426, 424, -217, -218, -219,
	2, 24, 105, 421, 2, -316, 2, 419, -320, -141,
	199, -319, 421, -317, -189, 241, -380, 297, -376, -377,
	-171, -164, -198, 4, 217, 216, -3, 2, -320, 158,
	-189, 2, -320, 158, 2, -190, 158, -320, -192, 2,
	-358, 158, -356, 9, -355, 5, 4, -360, -362, -361,
	63, 2, -174, -164, 2, -201, 158, -189, -186, -353,
	4, -360, -362, -361, -363, 24, 26, 27, 28, 29,
	31, 32, 33, 34, 45, 53, 54, 59, 62, 64,
	75, 80, 84, 85, 87, 86, 88, 89, 90, 99,
	101, 103, 105, 106, 109, 112, 114, 125, 127, 140,
	142, 143, 146, 149, 151, 162, 168, 172, 182, 184,
	199, 202, 208, 211, 212, 228, 229, 231, 237, 240,
	241, 244, 245, 259, 265, 275, 289, 306, 316, 326,
	339, 342, 353, 358, 359, 364, 370, 371, 376, 378,
	385, 389, 390, 391, 392, -187, -353, 358, 426, -233,
	-195, -196, -226, -164, 423, -288, 2, -88, 2, -288,
	158, 2, -88, 158, 2, -288, 158, 2, -88, 158,
	2, -220, 421, 423, 342, 64, 2, -189, 158, -179,
	2, -164, 140, -190, 158, 2, -192, -358, 158, 2,
	-358, 158, 2, -191, 2, -189, 168, 168, -174, 158,
	2, -164, 24, 143, 2, 184, 2, 184, 2, -321,
	2, -320, -234, 158, 2, -189, -234, 158, 2, -234,
	158, 2, -202, 158, 2, -201, -174, 158, 2, -359,
	158, 2, -358, -359, 158, 2, -259, 421, -328, 2,
	-327, -355, 383, 421, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 314, -138, 240, 358, 426, 421, -189, -288, -88,
	-300, 421, 143, -288, -88, 240, 143, 242, 2, 93,
	342, 398, 24, -164, 2, 318, 2, 421, -98, 58,
	361, -277, 2, -278, -161, -162, -163, 188, 266, 271,
	398, -350, 358, 404, 143, -350, -237, 423, -127, 2,
	140, 378, 2, 7, 2, -358, 270, 132, 2, 318,
	2, 267, 315, 60, 143, 2, 2, -402, 2, 240,
	143, 2, 143, 2, 143, 2, 143, 2, 143, 2,
	2, 267, 315, 2, 360, 198, 119, 2, 143, 2,
	143, 2, 5, 2, 188, 266, 331, 2, 342, 386,
	307, 2, 2, 143, 2, 143, 398, 2, -245, -320,
	-222, -223, -244, -265, -266, 208, 127, 237, -250, 24,
	105, -250, -250, 47, 422, 422, -127, 318, 2, 10,
	11, 62, 35, 412, 413, 414, 415, 138, 416, 417,
	410, 411, 409, 402, 403, 406, 194, 195, 77, 405,
	404, 70, 214, 298, 128, 129, 130, 131, 281, 165,
	166, 167, 13, 14, 15, 28, 244, 207, 399, 161,
	321, 407, 16, 17, 18, 186, 187, 230, 38, 162,
	-170, -203, -288, -288, -288, -288, -288, 250, -242, -283,
	419, -141, 421, 421, -141, -288, -302, -235, 421, -349,
	7, -141, -297, 419, -304, -288, 423, 421, 5, 421,
	5, -386, 393, 140, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 263, -346, 387,
	-346, -346, -333, 421, -333, 421, 421, -334, 421, 421,
	421, -333, 421, 421, 421, 394, 400, 394, 400, 421,
	421, -276, -277, -276, 358, -169, 426, -384, -220, 421,
	-238, -322, -288, 414, -238, -238, 240, -235, -288, 81,
	-253, 191, 223, 144, 204, 291, 173, -349, -73, -285,
	427, -312, 400, -141, -317, -164, -141, -319, 421, -316,
	-312, 414, -189, 421, 143, 421, 423, -150, 282, -149,
	22, 25, 108, 381, 120, -210, 170, 255, 115, 327,
	-406, 117, 300, 349, 350, 282, 115, -247, -249, 32,
	91, 225, 252, 50, 156, 216, 217, 329, 115, 282,
	392, 115, 117, 282, -152, 327, -406, 117, 300, 282,
	-151, -210, 115, 427, 117, 235, -358, -233, 426, 426,
	-353, 414, 115, 115, 115, 115, 143, -226, -353, -189,
	-197, -164, -198, 421, -220, 228, 240, -400, -248, -247,
	228, -160, -381, 392, 228, 228, -220, -176, 158, 2,
	-165, -164, -176, 158, -381, 228, -321, -200, -189, -200,
	317, -183, 32, -153, 426, 52, 287, 115, -153, 115,
	-153, 115, -153, 426, 115, -153, 115, 426, 115, 115,
	-235, 422, 426, -328, -358, -400, -226, -168, -358, 143,
	80, 421, 32, -299, -329, -330, -331, -340, -335, -338,
	42, 49, 48, 351, 221, 309, 310, 311, 312, 324,
	379, 164, 40, 238, 239, 176, 4, 41, -342, 183,
	175, 177, 178, 179, 180, 181, 323, 39, 272, 136,
	137, 135, 107, 98, 97, 234, 44, 43, 95, 354,
	355, 356, 357, 192, 193, 57, 56, 384, 334, -359,
	-400, -226, 140, -174, 2, -189, 2, 71, 72, 398,
	-352, -235, 32, -277, 2, -415, 426, 206, -205, 213,
	227, 152, 241, 396, -357, 5, 4, -298, -309, 99,
	210, -338, 8, 413, -347, 7, 412, -351, -350, -351,
	83, 423, -353, 342, 192, -358, -358, -352, 24, 319,
	2, -189, -403, 140, -401, 292, -400, -189, -189, -189,
	-189, -189, 140, 2, 360, 2, 360, 2, -164, -164,
	206, -189, 2, -191, 2, -190, 2, 342, 168, 342,
	-153, 426, -244, -266, -265, -268, -288, 24, -271, 134,
	224, -288, -290, -140, -140, -140, -224, -314, -288, 265,
	168, -352, -344, -329, -343, 277, 278, 276, 280, 279,
	-329, -188, -353, 354, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, 207,
	161, 321, 38, 162, -288, 358, -288, -288, -288, -288,
	220, 228, 231, 364, 125, 372, 105, 235, -418, 339,
	34, -295, -141, 421, -308, 29, 326, 24, -302, 296,
	421, -283, -288, -284, -236, -235, 422, 32, 426, -236,
	-301, -297, -307, -306, 389, -353, 414, 422, -235, 385,
	24, 105, 414, 2, 7, -260, 397, 219, 96, 154,
	218, -261, 305, -387, 133, 149, 421, 422, 2, 422,
	2, 422, 2, 422, 2, 422, 2, -288, -288, -288,
	-288, -288, -288, -288, -235, -349, -254, 2, -345, -235,
	4, 397, 219, 96, 154, 218, 305, -254, 2, 7,
	-235, 2, -235, 2, -255, 2, -288, -235, -256, -289,
	-290, 412, 413, 407, -302, -257, 2, -288, -236, 354,
	354, 354, 354, -288, 45, 202, 359, -258, -288, 143,
	-235, -169, -385, 32, -235, -229, 426, 143, 32, 4,
	-229, -229, 421, 422, 426, 191, 191, -316, -253, 191,
	-251, 248, -251, -251, -398, 421, 420, -312, -175, 419,
	428, -353, -311, -310, 32, -183, 246, -312, -312, 423,
	422, -311, -189, 421, -235, -353, 426, 358, -409, 75,
	64, -280, 158, 64, -364, -177, 75, -365, -164, 59,
	371, 265, 142, -409, 75, -409, 75, 75, 317, 330,
	47, -320, 35, -88, 73, 143, 358, -320, -249, -329,
	91, 216, 217, 47, -348, -347, 413, -348, 47, -348,
	-348, -348, 392, -190, -320, 358, 256, -358, 73, 358,
	426, 35, -88, 73, 143, 358, -201, -175, 73, 342,
	-325, -324, 401, -195, -164, 423, -288, -88, -288, -88,
	332, 422, 423, 186, 186, -206, -207, -164, -281, -280,
	-366, -367, -364, 185, 168, 371, 126, 32, 115, -226,
	-326, 184, 115, 256, 115, 115, 32, 240, 228, 240,
	228, -156, 345, 115, -282, 390, -272, -88, 421, 99,
	32, -272, -239, -240, -323, -241, -177, 421, -183, -189,
	-234, -234, -234, -201, -202, -174, -358, -359, -359, 422,
	-73, -327, 422, -137, 392, 358, 392, 422, -138, 378,
	-207, -72, 25, 80, 108, 422, 426, -228, 31, 419,
	-260, 421, -346, 421, -137, -324, 143, -227, -325, -325,
	140, 72, 404, 358, 422, 361, -278, -204, 271, 325,
	283, 313, 8, 7, 7, 426, -353, -189, 140, -226,
	-226, 314, 140, 140, 423, -189, -201, -189, -320, -269,
	-347, 421, -270, 296, 297, 426, -148, 33, 103, 196,
	-189, 398, 113, -288, -288, 358, -418, 339, -295, 113,
	-288, 220, 231, 364, 125, 372, 105, 235, 143, 421,
	-289, -289, -235, -288, 420, 430, 422, 423, -226, -288,
	420, 420, 426, -305, -306, 109, -288, 423, -417, 426,
	-222, -288, -235, -235, 422, 422, 358, 358, 358, 358,
	421, -392, 249, 421, 421, -288, 32, 426, 426, 426,
	422, 426, 426, 426, 422, 422, 426, 422, 143, 422,
	422, 422, 422, 422, -262, 259, 422, 10, 11, 412,
	413, 414, 415, 138, 416, 417, 410, 411, 409, 402,
	403, 404, 70, 214, 298, 13, 14, 15, 186, 162,
	-289, -289, -289, 422, -293, -294, 143, 140, 398, 398,
	398, 398, 32, -258, -258, -258, 422, 143, -235, 421,
	422, -282, -322, -231, 2, -316, -185, -353, -282, -282,
	-235, -288, -316, -316, -252, 378, 240, 191, -316, -310,
	422, -399, -349, -312, -311, -349, -287, -286, 141, 226,
	-183, -220, -311, -311, -353, -312, 422, -232, -318, -380,
	-417, 423, -149, -189, -177, -184, -164, 228, -280, 158,
	-155, 228, -329, -184, 421, 421, 196, 196, -177, -184,
	158, -177, 158, -184, -184, -405, 271, 236, -288, 209,
	269, 229, -150, 282, -88, 398, 421, -191, 282, -197,
	-348, -348, -247, 282, -190, -358, 392, 398, -174, -151,
	-88, 398, 421, -175, -152, 282, 398, -189, -134, 157,
	235, 414, -353, -128, 5, 231, -128, 422, 426, 168,
	-176, 168, -182, -165, -88, -189, 143, -137, -358, -190,
	-358, -358, -358, -88, -189, 115, -189, 115, -157, 111,
	-416, 404, -174, -223, -222, -288, -246, -275, 289, 240,
	-221, -178, -177, 383, -183, -246, -230, 426, 143, 404,
	423, -221, -153, -153, -153, -153, -153, -73, 143, -136,
	243, -135, -164, 5, -226, 23, -137, 421, -358, 422,
	-329, 419, 420, 7, 7, 421, -349, -137, -226, 143,
	-41, 392, 269, 93, 342, 255, 168, -350, -350, -277,
	369, 68, 271, -350, 342, 314, 314, -164, -270, -288,
	-314, -189, 427, -288, -288, 113, 113, -288, -289, -289,
	-288, 113, 143, 421, -288, -299, 28, 28, 422, -284,
	-288, 414, -353, 422, 422, -297, 112, -288, 353, -353,
	414, 422, 385, -417, -417, -417, 5, 219, 154, 218,
	-261, 218, -261, -261, 7, -393, -180, 421, -164, 390,
	-222, 422, -344, -329, -288, -288, -288, -288, -288, -349,
	-288, -293, -288, -344, -329, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, 105, 228, 235, -289, -294, -293,
	-288, -288, -329, 422, 422, 422, -235, -72, -243, 149,
	-325, 426, -243, -243, 422, -252, 421, -288, -316, 420,
	422, 426, -311, 420, 426, 429, 404, -220, 423, -310,
	422, 426, -274, 32, 422, -353, 358, 358, 115, 228,
	380, -368, -365, -288, -225, -315, -177, -380, 421, -164,
	421, 421, -147, 108, 317, -410, 115, -153, 115, -153,
	396, 421, 421, 358, -409, 75, -288, -235, 358, 358,
	256, -288, -288, -235, 358, -288, 117, -137, 143, 341,
	-208, 171, -281, -165, 421, -176, 421, 421, -220, -189,
	-248, -160, -264, 378, -175, 421, -175, -158, 201, -416,
	-356, -381, -267, -265, -246, -238, 229, 74, 422, 426,
	423, -282, -240, -231, -288, 2, 422, -88, 426, 421,
	404, 404, 242, -358, -138, -138, 7, 420, 422, -349,
	422, -226, 243, -186, -174, -189, -187, -201, -189, 241,
	422, -148, -175, -288, -288, 113, 28, 28, -288, -288,
	-299, 422, -288, -288, 420, -288, 423, 5, -288, 422,
	422, 422, 422, -394, -164, -288, 422, 422, 422, 426,
	426, 422, 422, 422, 422, 422, -294, 143, 105, 235,
	421, 422, 422, -296, 151, 47, -316, -296, -296, -226,
	-285, -349, -286, -175, 419, -353, -318, 421, 423, -177,
	-184, -280, 115, -369, 75, -370, 62, 126, 80, 228,
	231, 371, 265, 59, 99, 275, 32, 422, 422, 426,
	-173, 62, -173, -288, -225, -226, 228, 336, 99, 228,
	99, 92, 366, -177, -184, -226, -226, -189, -177, -184,
	422, -191, -190, -358, 422, -175, 73, -359, 354, -209,
	-210, 162, 421, -225, 421, -226, -206, 32, 421, 145,
	46, 240, -225, 240, -159, 200, -416, -356, -156, -246,
	-273, 421, 240, -88, -178, 2, -223, 404, -135, -136,
	-358, -358, 422, 92, 92, 420, 422, -42, -43, 168,
	75, 258, -212, -211, 255, 235, -148, -288, -288, -288,
	422, -353, 414, -417, -388, 255, 422, -288, -288, -289,
	143, 421, -299, -389, 391, -288, -235, -389, -389, 422,
	-312, -349, 2, -280, -184, -188, -181, -164, 126, 158,
	231, 196, 421, -289, -189, 421, 2, -279, -411, 79,
	337, -315, -148, -188, -148, 422, 422, 422, 231, 231,
	-288, -329, -153, -153, 422, 422, 358, 358, 358, 358,
	398, -288, 253, -225, 422, -225, 422, 422, -88, -225,
	-189, 422, -189, -416, -356, -157, 106, -226, 75, -267,
	-295, 422, -137, 421, 421, 426, 24, 421, 24, 421,
	-187, 342, 422, -223, 47, 422, 422, -289, -299, 422,
	-390, -391, -180, -311, 420, -370, -181, 228, -288, -166,
	421, -288, -208, 421, -173, 275, -172, 62, 421, 421,
	-177, -184, 421, 421, -288, -189, 422, -279, 422, -208,
	422, -264, 421, -356, -158, 373, 229, 422, -184, -246,
	-359, -359, -43, -226, -226, -189, -395, 269, 297, -235,
	422, 426, 32, 115, 422, -371, 215, -164, 422, -209,
	-226, -148, -189, -408, 378, -188, -214, -213, -211, -216,
	-215, -211, -235, -235, 421, -208, -279, -209, -279, 421,
	-225, -159, 317, -282, 422, 422, 422, 422, 422, -396,
	-397, 38, 368, 83, -288, -396, -391, -393, 126, -372,
	-375, -374, 240, 144, 254, 322, 422, 336, 388, 422,
	-220, -288, 422, 426, 383, 422, 426, 383, 422, 422,
	-226, -209, -208, -208, -225, 422, -239, -137, -137, -397,
	262, 139, 296, 262, 139, -181, -374, 240, -375, 240,
	373, 102, -371, -213, 162, -215, 143, 422, -209, -209,
	422, -282, 28, -373, 225, 287, 52, 317, -373, -372,
	421, 421, -154, 52, 287, -279, -397, 21, 231, 99,
	-235, -235, -208, 422, 422, -209, -209, 358, 421, -235,
	422, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 183, 185, 187, 0, 0, 0, 210, 212, 214,
	215, -2, 0, 0, 0, 245, 246, 248, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 0, 859, -2, 0, 364, 366, 375, 377,
	379, 381, 382, 0, 444, 446, 448, 450, 452, 454,
	456, 458, 460, 461, 463, 465, 467, 469, 471, 473,
	475, 477, 479, 481, 483, 485, 487, 489, 491, 493,
	-2, 771, 773, 775, 777, -2, 62, 64, 66, 68,
	70, 72, 87, 218, 220, 222, 224, 227, 229, 231,
	896, 251, 253, 255, 257, 259, -2, 910, 0, 0,
	0, -2, 0, -2, -2, -2, 789, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 872, 874, 876,
	878, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, -2, -2, -2,
	-2, 0, 0, 1541, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1427, 1481, 1430,
	1425, 184, 186, 188, 189, 0, 0, 0, 0, 0,
	0, 671, 1466, 1479, 1480, 1481, 1484, 1485, 1486, 1541,
	0, 211, 213, 216, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 343, 1631, 345, 347,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	247, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	342, 340, 1461, 284, 285, 0, 0, 325, 326, 327,
	328, 329, 330, 332, 289, 291, 293, 294, 296, 298,
	300, 302, 304, 306, 308, 310, 311, 313, 315, 316,
	318, 320, 321, 323, 732, 0, 0, 0, 0, 0,
	166, 0, 357, 351, 356, 358, 360, 361, 362, 363,
	0, 0, 164, 159, 0, 0, 604, 338, 336, 0,
	158, 0, 0, 768, 0, 357, 1508, 355, 769, 770,
	0, 0, 764, 765, 1661, 799, 365, 367, 376, 378,
	380, 383, -2, -2, 1757, -2, 406, -2, 414, 1760,
	1663, 417, 0, 419, -2, 422, 445, 447, 449, 451,
	453, 455, 457, 459, 462, 464, 466, 468, 470, 472,
	474, 476, 478, 480, 482, 484, 486, 488, 490, 492,
	494, 495, 0, 0, 0, 0, 0, 499, 0, -2,
	-2, 0, 0, 0, 0, 0, -2, 0, -2, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	498, 500, 501, 502, 0, 547, 586, 587, 772, 774,
	776, 0, 712, 898, 63, 65, 67, 69, 71, 219,
	221, 223, 225, 228, 230, -2, 870, 871, 252, 254,
	256, 258, 260, -2, 0, 902, 902, 902, 0, 0,
	871, 869, 0, 368, 0, 370, 0, 499, 373, 374,
	426, 427, 1113, 0, 0, 0, 0, 0, 1244, 1197,
	-2, -2, 1229, 1231, 1736, 1757, 0, 1233, 1234, 0,
	1236, 1240, 1241, 0, 1404, 1473, 1468, 1433, 1434, 1435,
	1436, 0, 0, 1439, 0, 1441, 1442, 1443, 1308, 1255,
	-2, -2, -2, 1477, 1027, 1028, 1029, 1030, 1031, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1769, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 0, 1725, 1742, 1743,
	1748, 1750, 1744, 1733, 1278, -2, -2, 1548, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1737, 1738, -2, 1740, -2,
	-2, 1749, -2, 1753, 1754, -2, -2, 1759, -2, -2,
	-2, 1763, 1764, -2, 1495, 1080, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1782, 1783, 1784, 1785,
	1786, 1787, 801, 779, 792, 801, 781, 782, 783, 784,
	785, 790, 791, 794, 0, 786, 787, 788, 888, 1638,
	891, 671, 889, 873, 875, 0, 877, 0, 0, 0,
	882, 905, 903, 0, 941, 886, 887, 897, 956, 979,
	0, 961, 0, 979, 1001, 0, 966, 1657, 1256, 1257,
	0, 1481, 1478, -2, 1780, 1781, 2, 79, 0, 1742,
	1001, 81, 0, 1742, 84, 0, 1742, 0, -2, 88,
	0, 1742, 167, 168, 1491, 1492, 1496, 1497, 1498, 1499,
	1769, 91, 0, 1457, 99, 0, 1742, 1424, 0, 1454,
	1500, 1501, 1502, 1503, 1504, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 0, 1451, 0, 0, 596,
	1421, 1426, 597, 1431, 0, 190, 191, 192, 193, 194,
	1742, 196, 197, 0, 199, 200, 1742, 202, 203, 0,
	205, 0, 0, 0, 0, 0, 226, 671, 1742, 0,
	233, 1462, 0, 695, 1742, 693, 1465, -2, 1742, 715,
	718, 1742, 720, 671, 722, 1464, -2, 1488, 895, 1742,
	815, 344, 346, 0, 238, 0, 828, 0, 830, 0,
	849, 1007, 151, 1742, 263, 282, 151, 1742, 266, 151,
	1742, 269, 151, 1742, 272, 1419, 151, 1742, 275, 276,
	1742, 278, 169, 279, 1742, 281, 339, 0, 0, -2,
	333, 1467, -2, 0, 331, 290, 292, 295, 297, 299,
	301, 303, 305, 307, 309, 312, 314, 317, 319, 322,
	324, -2, 0, 0, 0, 0, 0, 0, 602, 603,
	0, 0, 0, 766, 767, 0, 0, 0, 387, 0,
	0, 0, 0, 798, 384, 0, 403, 0, 405, 1732,
	-2, -2, 409, 802, 806, 807, 808, 0, 0, 0,
	0, 416, 0, 0, 0, 420, 423, 0, 496, 497,
	0, 0, 507, 508, 509, 510, 1636, 1562, 513, 0,
	516, 537, 551, 0, 0, 520, 522, 601, 524, 0,
	0, 526, 0, 528, 0, 530, 0, 532, 0, 534,
	536, 538, 552, 540, 0, 0, 0, 550, 0, 556,
	0, 559, 560, 561, 0, 563, 564, 565, 0, 0,
	0, 573, 575, 0, 585, 0, 503, 504, 151, 1005,
	-2, 0, 865, 919, 920, 0, 0, 0, 0, 900,
	901, 0, 0, 0, 861, 862, 369, 0, 372, 0,
	0, 0, 0, 1339, 1340, 1341, 1342, 1343, 1344, 1347,
	1348, 1345, 1346, 1349, 1350, 0, 0, 0, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 1353, 1354, 0, 0, 1356, 0, 1358,
	0, 0, 0, 0, 0, 0, 1176, 1178, 1412, 0,
	0, 1355, 1118, 1119, 1120, 1155, 1156, 0, 1230, 1409,
	1408, 1232, 0, 1361, -2, 1362, 1244, 0, 0, 1235,
	1448, 1242, 1243, 1361, 0, 1403, 0, 0, 1438, 0,
	1110, 1310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 1078, 1085,
	1082, 1081, 1066, 0, 1065, 0, 0, 1063, 0, 0,
	0, 1067, 0, 1384, -2, 0, 0, 0, 0, 0,
	0, 778, -2, 780, 0, 796, 0, 890, 0, 0,
	945, 1413, 1417, 1418, 945, 945, 0, 0, 1362, 0,
	0, 0, 0, 998, 998, 998, 996, 973, 0, 979,
	0, 989, 0, 979, 979, 0, -2, 961, 0, 0,
	989, 1002, 1003, 0, 0, 0, 0, 100, 761, 119,
	0, 761, 761, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 115, 107, 108, 0, 0, 85, 696, 0,
	699, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 117, 0,
	142, 144, 0, 0, 0, 0, 992, 595, 0, 0,
	1482, 1429, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 1468, 1469, 610, 0, 0, 0, 236, 691, 694,
	0, 713, 0, 894, 0, 0, 0, 0, 1742, 727,
	1453, 1487, 0, 1742, 817, 0, 1011, 0, 831, 0,
	0, 1008, 0, 261, 0, 149, 150, 0, 264, 0,
	267, 0, 270, 0, 0, 273, 0, 0, 0, 0,
	0, 897, 0, 0, 181, 0, 349, 359, 0, 0,
	0, 0, 897, 0, 1364, 1019, 1022, 1023, 1024, 1110,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1086, 1080, 1096,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1076, 0, 1051, 1051, 1051, 1068, 1069, 1087, 1088,
	1090, 1092, 1094, 1020, 1021, 1086, 1086, 1083, 1084, 181,
	0, 353, 0, 992, 389, 992, 391, 0, 581, 0,
	0, 0, 0, -2, 411, 0, 804, 0, 809, 435,
	436, 437, 811, 812, 415, 438, 439, 440, 441, 442,
	443, 0, 688, 0, 690, 1444, 0, 412, 428, 413,
	418, 0, 424, 0, 0, 511, 512, 514, 515, 517,
	518, 519, 523, 0, 589, 1653, 599, 525, 527, 529,
	531, 533, 0, 542, 0, 544, 0, 546, 554, 557,
	562, 566, 567, 568, 569, 570, 571, 0, 0, 0,
	711, 0, 868, 917, 918, 923, 927, 928, 931, 934,
	935, 925, 1113, 883, 884, 885, 911, 912, 744, 0,
	0, 371, 1114, 1015, 1016, 1070, 1071, 1072, 1073, 1074,
	1115, 1116, 1450, 0, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, -2, -2, -2, -2, -2, -2,
	-2, -2, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, -2, -2, -2, 1153, 1154, -2, 1357,
	1359, 0, 1412, 0, -2, 0, -2, -2, -2, -2,
	1173, 0, 1175, 1180, 1182, 1184, 0, 0, 0, 0,
	1411, 1194, 1395, 0, 0, 1336, 1337, 1338, 1179, 0,
	0, 1410, 1407, 0, 0, 1360, 1239, 0, 0, 0,
	0, 1368, 1402, 1398, 0, 1470, 1476, 1246, 908, 0,
	0, 0, 0, 1253, 0, 1449, 1097, 1098, 1099, 1100,
	1101, 1102, 1111, 1318, 0, 0, 0, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 1371,
	-2, -2, -2, -2, -2, -2, -2, 0, 1292, 0,
	0, 1304, 0, 1306, 0, 1294, 1362, 1381, 0, 0,
	1200, 0, 0, 0, 1244, 0, 1297, 1362, 1389, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1362, 0,
	1394, 795, 892, 0, 0, 1011, 0, 0, 0, 1416,
	1011, 1011, 0, 940, 0, 0, 0, 0, 0, 0,
	993, 997, 994, 995, 0, 0, 979, 989, 953, 0,
	0, 1452, 959, 988, 0, 671, 978, 989, 989, 0,
	-2, 963, 0, 0, 908, -2, 0, 0, 0, 0,
	760, 121, 1742, 0, 153, 0, 0, 661, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 697, 698,
	700, 706, 708, 0, 702, 1447, 0, 703, 0, 705,
	707, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 1423, 0, 0,
	172, 991, 0, 1422, 1432, 0, 195, 198, 201, 204,
	182, 670, 0, 0, 0, 0, 609, -2, 611, 613,
	614, 615, 616, 1587, 1488, 0, 1488, 0, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 825, 0, 910, 0, 847, 833, 0, 0,
	0, 847, 851, 852, 854, 855, 0, 0, 1009, 283,
	151, 151, 151, 1420, 151, 151, 170, 277, 280, 341,
	286, 334, 897, 0, 0, 0, 0, 181, 0, 0,
	0, 335, 0, 0, 0, 337, 0, 1012, 1014, 0,
	1025, 0, 1078, 0, 156, 181, 0, 0, 388, 393,
	0, 582, 0, 0, 404, 0, 803, 810, 0, 432,
	0, 434, 689, 1446, 1445, 0, 425, 505, 0, 600,
	598, 541, 0, 0, 0, 583, 584, 588, 1006, 0,
	929, 0, 926, 932, 933, 0, 914, 742, 743, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1195, 0,
	-2, 1174, 1177, 1181, 1183, 1185, 0, 0, 0, 0,
	0, 0, 0, 1196, 1405, 1408, 1334, 0, 0, 1363,
	1366, 1367, 0, 0, 1399, 0, 0, 0, 0, 0,
	907, 908, 908, 908, 1252, 0, 0, 0, 0, 0,
	0, 1254, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 0, 0, 0, 1277, 1049, 0, 1289, 0, 1291,
	1075, 1303, 1305, 1293, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1203, 1204, 1205, 1296, 1387, 1388, 0, 0, 1089, 1091,
	1093, 1095, 0, 0, 0, 0, 1302, 0, 1393, 897,
	942, 937, 1414, 992, 944, 946, 1415, 1455, 937, 937,
	0, 1363, 981, 0, 983, 0, 0, 0, 985, 0,
	974, 0, 976, 989, 958, 0, 0, 951, 0, 950,
	671, 987, 960, 964, 1470, 0, 1004, 0, 968, 971,
	0, 0, 120, 748, 0, 0, 1456, 0, 123, 1742,
	132, 0, 638, 0, 0, 0, 0, 0, 763, 133,
	1742, 151, 1742, 151, 134, 137, 0, 141, 139, 0,
	0, 629, 101, 761, 104, 0, 0, 754, 0, 701,
	704, 710, 86, 0, 756, 746, 0, 0, 745, 143,
	105, 0, 0, 758, 103, 0, 0, 0, 181, 0,
	0, 1428, 1483, 206, 208, 209, 207, 618, 0, 1488,
	0, 1488, 0, 1460, 607, 671, 0, 234, 235, 695,
	716, -2, 719, 721, 730, 0, 0, 0, 821, 825,
	0, 824, 895, 922, 909, 1010, 826, 847, 0, 0,
	0, 836, 838, 835, 832, 829, 1011, 0, 0, 0,
	0, 0, 262, 265, 268, 271, 274, 287, 0, 179,
	1619, 177, 174, 176, 348, 0, 160, 0, 0, 0,
	1365, 0, 1017, 0, 0, 0, 0, 157, 352, 0,
	390, 0, 0, 0, 0, 0, 0, 401, 402, -2,
	430, 431, 433, 429, 0, 543, 545, 553, 0, 0,
	913, 744, 0, 1117, 1158, 0, 0, -2, 0, 0,
	1162, 0, 0, 0, -2, 0, 0, 0, 1396, 0,
	1407, 1237, 1238, 1245, 1335, 1369, 1397, 1401, 0, 1471,
	1475, 1247, 0, 0, 0, 0, 1440, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 0, 1316, 1317, 1321, 1463, 0,
	0, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	1370, 1380, 1382, 1201, 1202, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, -2, -2, -2, 1219, 1220,
	1221, -2, -2, -2, 0, 0, 0, 1383, 1385, 1386,
	1390, 1391, 0, 1299, 1300, 1301, 1392, 0, 939, 0,
	943, 0, 939, 939, 904, 982, 0, 1000, 984, 956,
	975, 0, 965, 954, 0, 955, 0, 986, 0, 962,
	967, 0, 970, 0, 1247, -2, 0, 0, 0, 0,
	152, 636, 660, 0, 0, 733, 741, 741, 0, 1458,
	0, 0, 125, 0, 0, 0, 0, 130, 0, 136,
	140, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 111, 114, 0, 0, 110, 0, 154, 0, 0,
	626, 0, 612, 0, 0, 0, 0, 610, 0, 232,
	692, 714, 0, 0, 0, 0, 0, 823, 825, 0,
	816, 817, 847, 921, 827, 845, 846, 844, 0, 0,
	0, 910, 853, 850, 856, 857, 0, 165, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 1018, 1026, 0,
	1079, 354, 0, 576, 577, 624, 0, 580, 506, 924,
	930, 915, 744, 1160, 1164, 0, 0, 0, 1166, -2,
	0, 1188, -2, -2, 1406, 1400, 0, 1437, 908, 1248,
	1250, 1251, 1112, 1323, 1320, 0, 1307, 1268, 1269, 0,
	0, 1272, 1274, 1275, 1276, 1050, 1379, 0, 0, 0,
	0, 1298, 893, 1312, 0, 0, 947, 1312, 1312, 0,
	979, 977, 952, 948, 0, 1471, 969, 0, 0, 750,
	752, 122, 0, 637, 0, 640, 0, 0, 0, 0,
	647, 648, 0, 0, 0, 0, 0, 662, 669, 0,
	744, 0, 744, 0, 0, 0, 0, 127, 146, 0,
	0, 762, 0, 151, 151, 0, 0, 749, 0, 0,
	0, 755, 757, 747, 0, 759, 0, 171, 0, 605,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	729, 0, 0, 0, 813, 825, 0, 818, 819, 237,
	0, 0, 0, 834, 837, 839, 922, 0, 178, 0,
	173, 175, 181, 0, 0, 1013, 1077, 392, 394, 0,
	0, 400, 578, 623, 0, 0, 916, 1168, -2, -2,
	1189, 1472, 1474, 0, 910, 0, 1309, 0, 0, -2,
	0, 0, 0, 879, 0, 938, 936, 880, 881, 999,
	989, 0, 972, 124, 0, 641, 642, 1459, 644, 0,
	646, 649, 0, 651, 1490, 0, 655, 618, 0, 666,
	667, 734, 735, 740, 736, 741, 664, 0, 126, 128,
	145, 739, 129, 135, 0, 0, 0, 0, 0, 0,
	0, 990, 0, 0, 669, 0, 659, 618, 608, 0,
	730, 725, 0, 0, 820, 821, 0, 0, 0, 847,
	858, 180, 161, 0, 0, 0, 396, 0, 398, 0,
	622, 0, 1249, 1326, 0, 1270, 1271, -2, 0, 1227,
	1311, 1313, 0, 957, 949, 639, 643, 0, 0, 675,
	0, 0, 626, 0, 744, 0, 148, 0, 0, 0,
	751, 753, 0, 0, 113, 0, 658, 618, 669, 626,
	669, 0, 0, 822, 823, 0, 841, 1011, 843, 848,
	0, 0, 395, 0, 0, 579, 0, 0, 0, 1322,
	1228, 0, 0, 0, 650, 680, 0, 0, 0, 663,
	0, 737, 671, 131, 0, 738, 0, 630, 0, 0,
	633, 0, 0, 0, 0, 626, 618, 606, 618, 0,
	0, 814, 0, 842, 181, 181, 397, 399, 1319, 1324,
	1327, -2, 1707, 1538, 0, 1325, 1314, 1315, 0, 652,
	676, 677, 0, 672, 673, 674, 1489, 653, 654, 668,
	675, 147, 627, 0, 0, 628, 0, 0, 116, 118,
	0, 656, 626, 626, 0, 726, 1011, 162, 163, 0,
	1329, 1330, 1331, 1332, 1333, 645, 678, 0, 679, 0,
	0, 0, 680, 631, 0, 634, 0, 621, 657, 723,
	669, 840, 0, 681, 0, 684, 685, 0, 682, 665,
	0, 0, 617, 619, 620, 618, 1328, 683, 686, 687,
	0, 0, 626, 626, 0, 724, 632, 0, 0, 0,
	626, 635,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1026
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1032
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1041
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1087
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1225
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1229
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1233
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1239
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1243
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1249
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1255
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1261
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1272
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1279
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1289
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1299
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1309
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1322
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1334
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1338
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1344
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1354
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1365
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1370
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1375
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1399
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1423
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1433
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1440
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1459
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1468
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1487
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1492
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1510
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1514
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1520
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1524
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1531
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1545
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1549
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1575
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1578
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1608
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1612
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1655
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1658
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1675
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1678
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1686
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1712
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1720
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1724
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1730
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1744
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1747
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1763
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1764
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1765
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1766
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1784
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1786
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1799
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1816
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1818
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1822
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1854
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1858
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1861
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1865
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1870
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1876
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1877
		{
			sqlVAL.str = ""
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1887
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1890
		{
			return helpWith(sqllex, "CREATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1894
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1895
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1898
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1900
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1911
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1932
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1936
		{
			sqlVAL.union.val = nil
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "DELETE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1971
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1982
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1983
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1984
		{
			return helpWith(sqllex, "DROP")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1991
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2014
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2029
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2033
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2036
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2059
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2067
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2075
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2082
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2094
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2097
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2105
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2112
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2116
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2141
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2146
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2150
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2160
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			return helpWith(sqllex, "DELETE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2166
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2169
		{
			return helpWith(sqllex, "INSERT")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2170
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2172
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2173
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2175
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2179
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2190
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2191
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2195
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2240
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2246
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2250
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2260
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2268
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2272
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2275
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2295
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2299
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2303
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2306
		{
			return helpWith(sqllex, "GRANT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2334
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2337
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2342
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2346
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2357
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2375
		{
			return helpWith(sqllex, "RESET")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2376
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2388
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2402
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "USE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2420
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2421
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2422
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2423
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2424
		{
			return helpWith(sqllex, "USE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2425
		{
			return unimplemented(sqllex, "set local")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2456
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2459
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2485
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2493
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2499
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2513
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2517
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2543
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2565
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2569
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2594
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2599
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2603
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2614
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2631
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2638
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2644
		{
			return unimplemented(sqllex, "set from current")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2645
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2653
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2658
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2665
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2669
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2675
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2692
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2702
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2706
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2710
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2714
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2718
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2724
		{
			sqlVAL.union.val = tree.Low
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2728
		{
			sqlVAL.union.val = tree.Normal
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2732
		{
			sqlVAL.union.val = tree.High
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2743
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2747
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2751
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2756
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2785
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2806
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2818
		{
			sqlVAL.str = "client_encoding"
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2821
		{
			sqlVAL.str = "timezone"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2836
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2840
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2843
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2854
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2862
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2877
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2884
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2890
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2900
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2904
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2907
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2909
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2912
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2920
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2923
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2931
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2934
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2947
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2955
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2963
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2966
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2971
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2976
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2984
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2987
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2989
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2992
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3000
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3003
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3005
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3019
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3031
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3041
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3048
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3049
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3076
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3085
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3097
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3104
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3108
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3111
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3118
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3130
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3140
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3152
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3155
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3163
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3166
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3173
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3184
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3187
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3195
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3198
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3202
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3207
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3212
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3227
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3234
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3239
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3251
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3255
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3258
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3266
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3273
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3278
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3398
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3402
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3406
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3445
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3449
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3454
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3458
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3467
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3478
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3490
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3502
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3550
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3564
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3595
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3605
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3611
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3625
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3632
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3637
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3642
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3648
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3655
		{
			sqlVAL.str = ""
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3662
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3675
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3688
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3698
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3708
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3718
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3729
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3744
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3750
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3754
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3770
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3792
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3796
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3800
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3804
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3808
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3812
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3824
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3828
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3832
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3839
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3861
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3871
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3883
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3894
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3911
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3945
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3955
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3959
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3964
		{
			return unimplemented(sqllex, "match full")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3965
		{
			return unimplemented(sqllex, "match partial")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3966
		{
			return unimplemented(sqllex, "match simple")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3967
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3974
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3978
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3982
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3986
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3990
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3996
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4002
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4022
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4026
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4032
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4036
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4040
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4058
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4066
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4074
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4085
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4086
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4088
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4089
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4090
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4093
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4095
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4097
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4099
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4100
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4103
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4105
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4114
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4117
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4125
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4129
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4132
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4136
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = nil
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4150
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4154
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4157
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4172
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4203
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4217
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4226
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4235
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4240
		{
			sqlVAL.union.val = true
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4244
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4248
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4254
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4258
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4280
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4281
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4285
		{
			sqlVAL.str = ""
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4288
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4289
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4293
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4297
		{
			sqlVAL.union.val = tree.Descending
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4301
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4307
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4314
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4318
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4328
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4336
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4340
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4342
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4346
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4350
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4360
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4366
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4370
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4375
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4376
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4379
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4380
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4388
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4391
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4401
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4410
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4413
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4421
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4424
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4428
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4429
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4430
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4446
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4451
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4454
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4464
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4467
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4472
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4476
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4481
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4482
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4483
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4491
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4498
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4501
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4502
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4506
		{
			sqlVAL.str = ""
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4510
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4514
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4518
		{
			sqlVAL.str = ""
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4524
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4528
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4534
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4544
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4548
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4561
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4563
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4567
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4571
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4581
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4587
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4593
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4597
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4627
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4631
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4635
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4641
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4645
		{
			sqlVAL.str = ""
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4651
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4655
		{
			sqlVAL.str = ""
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4661
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4665
		{
			sqlVAL.str = ""
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4670
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4671
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4683
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4690
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4697
		{
			return helpWith(sqllex, "INSERT")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4708
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4715
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4719
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4727
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4733
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4737
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4741
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4747
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4771
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4775
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4779
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4785
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4789
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4791
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4797
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4802
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4806
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 848:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4823
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4834
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4838
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4839
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4843
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4860
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4863
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4910
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4916
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4920
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4935
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4939
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4943
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4947
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4951
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4955
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4962
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4997
		{
			return helpWith(sqllex, "SELECT")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4998
		{
			return helpWith(sqllex, "VALUES")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4999
		{
			return helpWith(sqllex, "TABLE")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5021
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5034
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5048
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5060
		{
			return helpWith(sqllex, "SELECT")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5064
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5073
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5082
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5097
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5104
		{
			return helpWith(sqllex, "TABLE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5116
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5119
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5120
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5124
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5128
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5134
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5142
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5143
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5147
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5150
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5153
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5154
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5158
		{
			sqlVAL.union.val = true
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5162
		{
			sqlVAL.union.val = false
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5166
		{
			sqlVAL.union.val = false
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5172
		{
			sqlVAL.union.val = true
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5178
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5183
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5184
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5187
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5188
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5192
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5196
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5202
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5208
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5218
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5222
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5226
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5235
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5244
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5255
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5259
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5268
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5274
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5281
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5288
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5297
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5301
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5311
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5312
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5315
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5316
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5333
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5337
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5343
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5347
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5369
		{
			return helpWith(sqllex, "VALUES")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5371
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5383
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5386
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5388
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5394
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5404
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5408
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5414
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5420
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5425
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5448
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5452
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5456
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5460
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5487
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5501
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5505
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5508
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5510
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5514
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5518
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5523
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5539
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5545
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5549
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5555
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5561
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5567
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5569
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = nil
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5573
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5578
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5588
		{
			sqlVAL.union.val = true
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5592
		{
			sqlVAL.union.val = false
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5612
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5616
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5620
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5624
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5638
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5642
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5655
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5668
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5676
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5680
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5686
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5687
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5698
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5702
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5707
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5708
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5709
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5710
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5714
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5739
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5745
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5749
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5761
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5775
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5784
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5795
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5799
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5806
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5808
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5817
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5821
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5825
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5834
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5852
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5856
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5860
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5864
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5868
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5872
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5876
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5880
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5904
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5908
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5912
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5916
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5936
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5940
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5944
		{
			sqlVAL.union.val = nil
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5951
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5963
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5967
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5995
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6005
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6009
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6018
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6027
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6036
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6040
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6047
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6051
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6059
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6063
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6069
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6073
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6079
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6096
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6108
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6118
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6122
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6126
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6131
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6132
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6137
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6141
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6145
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6149
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6153
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6169
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6174
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6180
		{
			sqlVAL.union.val = tree.Year
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6184
		{
			sqlVAL.union.val = tree.Month
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6188
		{
			sqlVAL.union.val = tree.Day
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6192
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = tree.Month
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6210
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6214
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6226
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6230
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6234
		{
			sqlVAL.union.val = nil
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6240
		{
			sqlVAL.union.val = tree.Second
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6243
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6267
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6271
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6275
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6278
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6299
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6303
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6339
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6343
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6387
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6399
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6411
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6423
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6431
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6439
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6515
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6519
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6523
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6527
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6530
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6576
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6580
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6584
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6588
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6592
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6596
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6613
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6617
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6652
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6680
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6684
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6688
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6692
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6696
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6704
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6712
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6716
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6720
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6724
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6728
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6732
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6758
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6766
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6802
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6807
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6816
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6821
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6825
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6829
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6842
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6846
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6851
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6866
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6870
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6873
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6874
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6880
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6884
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6887
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6898
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6905
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6914
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6915
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6919
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6935
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6949
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7007
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7012
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7017
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7022
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7027
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7032
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7037
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7042
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7051
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7052
		{
			return unimplemented(sqllex, "treat")
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7062
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7073
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7078
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7083
		{
			return unimplemented(sqllex, "within group")
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7084
		{
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7088
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7092
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7103
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7113
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7119
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.str = ""
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7168
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7183
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7220
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7233
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7296
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7306
		{
			sqlVAL.union.val = tree.Any
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = tree.Some
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7314
		{
			sqlVAL.union.val = tree.All
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7321
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7322
		{
			sqlVAL.union.val = tree.Div
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7325
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7327
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7328
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7329
		{
			sqlVAL.union.val = tree.LT
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = tree.GT
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7331
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7332
		{
			sqlVAL.union.val = tree.LE
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7333
		{
			sqlVAL.union.val = tree.GE
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = tree.NE
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = tree.Like
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7339
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7341
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7353
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7359
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7369
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7399
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7425
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7429
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7433
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7439
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7479
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7489
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7495
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7505
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7509
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7515
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7519
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7537
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7547
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7553
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7557
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7564
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7587
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7596
		{
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7597
		{
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7611
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7624
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7636
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7646
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7656
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7663
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7705
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7720
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7728
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7731
		{
			return unimplemented(sqllex, "func const")
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7737
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7740
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7742
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7750
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7770
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7781
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7791
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7983
		{
			sqlVAL.str = ""
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7989
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7993
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
