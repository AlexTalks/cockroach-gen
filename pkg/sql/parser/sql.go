// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:594
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9713

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1068,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 898,
	199, 898,
	214, 249,
	294, 249,
	302, 738,
	329, 249,
	338, 738,
	377, 738,
	401, 249,
	425, 738,
	-2, 0,
	-1, 74,
	214, 253,
	-2, 0,
	-1, 75,
	109, 1068,
	188, 1068,
	411, 1068,
	412, 1068,
	-2, 0,
	-1, 87,
	122, 1042,
	138, 1042,
	196, 1042,
	225, 1042,
	258, 1042,
	268, 1042,
	406, 1042,
	-2, 1020,
	-1, 118,
	128, 656,
	213, 656,
	296, 636,
	347, 636,
	394, 656,
	-2, 0,
	-1, 119,
	4, 1070,
	21, 1070,
	22, 1070,
	23, 1070,
	24, 1070,
	25, 1070,
	27, 1070,
	33, 1070,
	38, 1070,
	39, 1070,
	40, 1070,
	41, 1070,
	42, 1070,
	43, 1070,
	44, 1070,
	45, 1070,
	46, 1070,
	47, 1070,
	48, 1070,
	49, 1070,
	51, 1070,
	52, 1070,
	53, 1070,
	54, 1070,
	55, 1070,
	56, 1070,
	59, 1070,
	60, 1070,
	61, 1070,
	62, 1070,
	64, 1070,
	65, 1070,
	69, 1070,
	70, 1070,
	71, 1070,
	72, 1070,
	73, 1070,
	74, 1070,
	76, 1070,
	77, 1070,
	78, 1070,
	79, 1070,
	81, 1070,
	83, 1070,
	84, 1070,
	85, 1070,
	88, 1070,
	89, 1070,
	97, 1070,
	98, 1070,
	99, 1070,
	100, 1070,
	101, 1070,
	102, 1070,
	103, 1070,
	104, 1070,
	106, 1070,
	108, 1070,
	109, 1070,
	111, 1070,
	114, 1070,
	115, 1070,
	116, 1070,
	118, 1070,
	120, 1070,
	121, 1070,
	123, 1070,
	124, 1070,
	125, 1070,
	126, 1070,
	127, 1070,
	128, 1070,
	129, 1070,
	130, 1070,
	131, 1070,
	132, 1070,
	133, 1070,
	134, 1070,
	135, 1070,
	137, 1070,
	143, 1070,
	144, 1070,
	145, 1070,
	146, 1070,
	147, 1070,
	148, 1070,
	150, 1070,
	152, 1070,
	156, 1070,
	157, 1070,
	159, 1070,
	160, 1070,
	162, 1070,
	163, 1070,
	165, 1070,
	166, 1070,
	167, 1070,
	168, 1070,
	169, 1070,
	170, 1070,
	171, 1070,
	172, 1070,
	174, 1070,
	175, 1070,
	177, 1070,
	178, 1070,
	179, 1070,
	182, 1070,
	183, 1070,
	184, 1070,
	185, 1070,
	188, 1070,
	189, 1070,
	190, 1070,
	191, 1070,
	192, 1070,
	193, 1070,
	194, 1070,
	195, 1070,
	197, 1070,
	199, 1070,
	201, 1070,
	203, 1070,
	204, 1070,
	205, 1070,
	207, 1070,
	208, 1070,
	211, 1070,
	212, 1070,
	213, 1070,
	214, 1070,
	216, 1070,
	217, 1070,
	219, 1070,
	220, 1070,
	222, 1070,
	223, 1070,
	226, 1070,
	227, 1070,
	230, 1070,
	231, 1070,
	232, 1070,
	234, 1070,
	235, 1070,
	236, 1070,
	237, 1070,
	238, 1070,
	239, 1070,
	240, 1070,
	241, 1070,
	242, 1070,
	243, 1070,
	245, 1070,
	246, 1070,
	247, 1070,
	248, 1070,
	250, 1070,
	252, 1070,
	254, 1070,
	255, 1070,
	256, 1070,
	257, 1070,
	259, 1070,
	260, 1070,
	261, 1070,
	263, 1070,
	264, 1070,
	265, 1070,
	266, 1070,
	269, 1070,
	270, 1070,
	271, 1070,
	273, 1070,
	275, 1070,
	276, 1070,
	277, 1070,
	278, 1070,
	279, 1070,
	280, 1070,
	281, 1070,
	282, 1070,
	283, 1070,
	284, 1070,
	286, 1070,
	287, 1070,
	288, 1070,
	289, 1070,
	290, 1070,
	291, 1070,
	293, 1070,
	295, 1070,
	296, 1070,
	297, 1070,
	298, 1070,
	299, 1070,
	300, 1070,
	301, 1070,
	302, 1070,
	303, 1070,
	305, 1070,
	306, 1070,
	307, 1070,
	308, 1070,
	309, 1070,
	311, 1070,
	312, 1070,
	313, 1070,
	314, 1070,
	315, 1070,
	316, 1070,
	317, 1070,
	318, 1070,
	320, 1070,
	322, 1070,
	323, 1070,
	324, 1070,
	325, 1070,
	326, 1070,
	327, 1070,
	329, 1070,
	330, 1070,
	331, 1070,
	332, 1070,
	333, 1070,
	334, 1070,
	335, 1070,
	336, 1070,
	338, 1070,
	339, 1070,
	340, 1070,
	341, 1070,
	342, 1070,
	343, 1070,
	344, 1070,
	345, 1070,
	346, 1070,
	347, 1070,
	349, 1070,
	350, 1070,
	351, 1070,
	352, 1070,
	353, 1070,
	355, 1070,
	356, 1070,
	357, 1070,
	358, 1070,
	359, 1070,
	361, 1070,
	362, 1070,
	363, 1070,
	364, 1070,
	365, 1070,
	366, 1070,
	367, 1070,
	368, 1070,
	369, 1070,
	370, 1070,
	371, 1070,
	372, 1070,
	374, 1070,
	375, 1070,
	376, 1070,
	378, 1070,
	379, 1070,
	380, 1070,
	381, 1070,
	382, 1070,
	383, 1070,
	384, 1070,
	386, 1070,
	387, 1070,
	388, 1070,
	389, 1070,
	390, 1070,
	392, 1070,
	394, 1070,
	395, 1070,
	396, 1070,
	397, 1070,
	398, 1070,
	400, 1070,
	401, 1070,
	402, 1070,
	404, 1070,
	405, 1070,
	408, 1070,
	409, 1070,
	410, 1070,
	411, 1070,
	412, 1070,
	413, 1070,
	415, 1070,
	417, 1070,
	418, 1070,
	419, 1070,
	420, 1070,
	421, 1070,
	422, 1070,
	423, 1070,
	425, 1070,
	426, 1070,
	427, 1070,
	432, 1070,
	433, 1070,
	434, 1070,
	435, 1070,
	436, 1070,
	437, 1070,
	-2, 0,
	-1, 120,
	1, 951,
	203, 951,
	293, 951,
	300, 951,
	440, 951,
	463, 951,
	-2, 0,
	-1, 122,
	1, 951,
	463, 951,
	-2, 0,
	-1, 123,
	1, 951,
	463, 951,
	-2, 0,
	-1, 124,
	1, 955,
	463, 955,
	-2, 0,
	-1, 149,
	122, 1041,
	138, 1041,
	196, 1041,
	225, 1041,
	258, 1041,
	268, 1041,
	406, 1041,
	-2, 1029,
	-1, 182,
	4, 1077,
	5, 1077,
	6, 1077,
	7, 1077,
	8, 1077,
	9, 1077,
	10, 1077,
	21, 1077,
	22, 1077,
	23, 1077,
	24, 1077,
	25, 1077,
	27, 1077,
	33, 1077,
	34, 1077,
	38, 1077,
	39, 1077,
	40, 1077,
	41, 1077,
	42, 1077,
	43, 1077,
	44, 1077,
	45, 1077,
	46, 1077,
	47, 1077,
	48, 1077,
	49, 1077,
	51, 1077,
	52, 1077,
	53, 1077,
	54, 1077,
	55, 1077,
	56, 1077,
	57, 1077,
	58, 1077,
	59, 1077,
	60, 1077,
	61, 1077,
	62, 1077,
	64, 1077,
	65, 1077,
	67, 1077,
	69, 1077,
	70, 1077,
	71, 1077,
	72, 1077,
	73, 1077,
	74, 1077,
	76, 1077,
	77, 1077,
	78, 1077,
	79, 1077,
	81, 1077,
	83, 1077,
	84, 1077,
	85, 1077,
	87, 1077,
	88, 1077,
	89, 1077,
	90, 1077,
	91, 1077,
	92, 1077,
	93, 1077,
	94, 1077,
	95, 1077,
	96, 1077,
	97, 1077,
	98, 1077,
	99, 1077,
	100, 1077,
	101, 1077,
	102, 1077,
	103, 1077,
	104, 1077,
	105, 1077,
	106, 1077,
	108, 1077,
	109, 1077,
	111, 1077,
	114, 1077,
	115, 1077,
	116, 1077,
	118, 1077,
	120, 1077,
	121, 1077,
	123, 1077,
	124, 1077,
	125, 1077,
	126, 1077,
	127, 1077,
	128, 1077,
	129, 1077,
	130, 1077,
	131, 1077,
	132, 1077,
	133, 1077,
	134, 1077,
	135, 1077,
	136, 1077,
	137, 1077,
	143, 1077,
	144, 1077,
	145, 1077,
	146, 1077,
	147, 1077,
	148, 1077,
	150, 1077,
	152, 1077,
	155, 1077,
	156, 1077,
	157, 1077,
	159, 1077,
	160, 1077,
	162, 1077,
	163, 1077,
	165, 1077,
	166, 1077,
	167, 1077,
	168, 1077,
	169, 1077,
	170, 1077,
	171, 1077,
	172, 1077,
	173, 1077,
	174, 1077,
	175, 1077,
	177, 1077,
	178, 1077,
	179, 1077,
	182, 1077,
	183, 1077,
	184, 1077,
	185, 1077,
	187, 1077,
	188, 1077,
	189, 1077,
	190, 1077,
	191, 1077,
	192, 1077,
	193, 1077,
	194, 1077,
	195, 1077,
	197, 1077,
	199, 1077,
	200, 1077,
	201, 1077,
	202, 1077,
	203, 1077,
	204, 1077,
	205, 1077,
	206, 1077,
	207, 1077,
	208, 1077,
	211, 1077,
	212, 1077,
	213, 1077,
	214, 1077,
	216, 1077,
	217, 1077,
	219, 1077,
	220, 1077,
	221, 1077,
	222, 1077,
	223, 1077,
	224, 1077,
	226, 1077,
	227, 1077,
	230, 1077,
	231, 1077,
	232, 1077,
	234, 1077,
	235, 1077,
	236, 1077,
	237, 1077,
	238, 1077,
	239, 1077,
	240, 1077,
	241, 1077,
	242, 1077,
	243, 1077,
	244, 1077,
	245, 1077,
	246, 1077,
	247, 1077,
	248, 1077,
	249, 1077,
	250, 1077,
	251, 1077,
	252, 1077,
	253, 1077,
	254, 1077,
	255, 1077,
	256, 1077,
	257, 1077,
	259, 1077,
	260, 1077,
	261, 1077,
	264, 1077,
	265, 1077,
	266, 1077,
	269, 1077,
	270, 1077,
	271, 1077,
	272, 1077,
	273, 1077,
	274, 1077,
	275, 1077,
	276, 1077,
	277, 1077,
	278, 1077,
	279, 1077,
	280, 1077,
	281, 1077,
	282, 1077,
	283, 1077,
	284, 1077,
	286, 1077,
	287, 1077,
	288, 1077,
	289, 1077,
	290, 1077,
	291, 1077,
	293, 1077,
	295, 1077,
	296, 1077,
	297, 1077,
	298, 1077,
	299, 1077,
	300, 1077,
	301, 1077,
	302, 1077,
	303, 1077,
	305, 1077,
	306, 1077,
	307, 1077,
	308, 1077,
	309, 1077,
	311, 1077,
	312, 1077,
	313, 1077,
	314, 1077,
	315, 1077,
	316, 1077,
	317, 1077,
	318, 1077,
	320, 1077,
	321, 1077,
	322, 1077,
	323, 1077,
	324, 1077,
	325, 1077,
	326, 1077,
	327, 1077,
	329, 1077,
	330, 1077,
	331, 1077,
	332, 1077,
	333, 1077,
	334, 1077,
	335, 1077,
	336, 1077,
	338, 1077,
	339, 1077,
	340, 1077,
	341, 1077,
	342, 1077,
	343, 1077,
	344, 1077,
	345, 1077,
	346, 1077,
	347, 1077,
	348, 1077,
	349, 1077,
	350, 1077,
	351, 1077,
	352, 1077,
	353, 1077,
	354, 1077,
	355, 1077,
	356, 1077,
	357, 1077,
	358, 1077,
	359, 1077,
	361, 1077,
	362, 1077,
	363, 1077,
	364, 1077,
	365, 1077,
	366, 1077,
	367, 1077,
	368, 1077,
	369, 1077,
	370, 1077,
	371, 1077,
	372, 1077,
	374, 1077,
	375, 1077,
	376, 1077,
	378, 1077,
	379, 1077,
	380, 1077,
	381, 1077,
	382, 1077,
	383, 1077,
	384, 1077,
	386, 1077,
	387, 1077,
	388, 1077,
	389, 1077,
	390, 1077,
	392, 1077,
	394, 1077,
	395, 1077,
	396, 1077,
	397, 1077,
	398, 1077,
	399, 1077,
	400, 1077,
	401, 1077,
	402, 1077,
	404, 1077,
	405, 1077,
	407, 1077,
	408, 1077,
	409, 1077,
	410, 1077,
	411, 1077,
	412, 1077,
	413, 1077,
	414, 1077,
	415, 1077,
	417, 1077,
	418, 1077,
	419, 1077,
	420, 1077,
	421, 1077,
	422, 1077,
	423, 1077,
	425, 1077,
	426, 1077,
	427, 1077,
	432, 1077,
	433, 1077,
	434, 1077,
	435, 1077,
	436, 1077,
	437, 1077,
	438, 1077,
	444, 1077,
	451, 1077,
	452, 1077,
	453, 1077,
	460, 1077,
	464, 1077,
	-2, 0,
	-1, 558,
	154, 1751,
	391, 1751,
	443, 1751,
	462, 1751,
	-2, 0,
	-1, 559,
	154, 1829,
	391, 1829,
	443, 1829,
	462, 1829,
	-2, 0,
	-1, 560,
	154, 1740,
	391, 1740,
	443, 1740,
	462, 1740,
	-2, 0,
	-1, 562,
	154, 1920,
	391, 1920,
	443, 1920,
	462, 1920,
	-2, 0,
	-1, 564,
	154, 1950,
	391, 1950,
	443, 1950,
	462, 1950,
	-2, 0,
	-1, 571,
	154, 1840,
	391, 1840,
	443, 1840,
	462, 1840,
	-2, 506,
	-1, 588,
	462, 1698,
	465, 1698,
	-2, 707,
	-1, 589,
	462, 1700,
	465, 1700,
	-2, 708,
	-1, 590,
	462, 1699,
	465, 1699,
	-2, 709,
	-1, 591,
	465, 1645,
	-2, 710,
	-1, 739,
	296, 637,
	347, 637,
	-2, 0,
	-1, 740,
	296, 636,
	347, 636,
	-2, 587,
	-1, 743,
	1, 666,
	459, 666,
	461, 666,
	463, 666,
	-2, 0,
	-1, 744,
	1, 706,
	151, 706,
	459, 706,
	461, 706,
	463, 706,
	-2, 0,
	-1, 752,
	1, 640,
	459, 640,
	461, 640,
	463, 640,
	-2, 0,
	-1, 755,
	1, 666,
	459, 666,
	461, 666,
	463, 666,
	-2, 0,
	-1, 756,
	1, 668,
	459, 668,
	461, 668,
	463, 668,
	-2, 0,
	-1, 757,
	1, 671,
	459, 671,
	461, 671,
	463, 671,
	-2, 0,
	-1, 761,
	1, 685,
	459, 685,
	461, 685,
	463, 685,
	-2, 0,
	-1, 762,
	1, 687,
	459, 687,
	461, 687,
	463, 687,
	-2, 0,
	-1, 806,
	138, 1079,
	225, 1079,
	258, 1079,
	-2, 1029,
	-1, 822,
	138, 1078,
	225, 1078,
	258, 1078,
	-2, 1029,
	-1, 846,
	462, 1697,
	-2, 514,
	-1, 875,
	460, 1689,
	-2, 1680,
	-1, 881,
	5, 1213,
	-2, 1731,
	-1, 882,
	5, 1214,
	-2, 1735,
	-1, 883,
	5, 1215,
	-2, 1734,
	-1, 884,
	5, 1216,
	-2, 1947,
	-1, 885,
	5, 1217,
	-2, 1842,
	-1, 886,
	5, 1218,
	-2, 1912,
	-1, 887,
	5, 1219,
	-2, 1914,
	-1, 888,
	5, 1220,
	-2, 1927,
	-1, 889,
	5, 1221,
	-2, 1915,
	-1, 890,
	5, 1222,
	-2, 1916,
	-1, 891,
	5, 1223,
	-2, 1730,
	-1, 892,
	5, 1224,
	-2, 1963,
	-1, 893,
	5, 1225,
	-2, 1804,
	-1, 894,
	5, 1226,
	-2, 1851,
	-1, 895,
	5, 1227,
	-2, 1853,
	-1, 896,
	5, 1228,
	-2, 1808,
	-1, 897,
	5, 1229,
	460, 1707,
	-2, 1698,
	-1, 898,
	5, 1285,
	460, 1285,
	-2, 1998,
	-1, 903,
	460, 1708,
	-2, 1699,
	-1, 905,
	5, 1233,
	-2, 1996,
	-1, 906,
	5, 1234,
	-2, 1997,
	-1, 907,
	5, 1235,
	-2, 1807,
	-1, 908,
	5, 1236,
	-2, 2009,
	-1, 909,
	5, 1237,
	-2, 1809,
	-1, 910,
	5, 1238,
	-2, 1810,
	-1, 911,
	5, 1239,
	-2, 1811,
	-1, 912,
	5, 1240,
	-2, 1978,
	-1, 913,
	5, 1241,
	-2, 2007,
	-1, 914,
	5, 1242,
	-2, 1787,
	-1, 915,
	5, 1243,
	-2, 1788,
	-1, 916,
	5, 1257,
	-2, 1990,
	-1, 918,
	5, 1232,
	-2, 1986,
	-1, 919,
	5, 1232,
	-2, 1985,
	-1, 920,
	5, 1232,
	-2, 2002,
	-1, 921,
	5, 1249,
	-2, 1980,
	-1, 922,
	5, 1250,
	-2, 1732,
	-1, 923,
	5, 1260,
	-2, 1979,
	-1, 924,
	5, 1262,
	-2, 2018,
	-1, 926,
	5, 1273,
	-2, 1761,
	-1, 927,
	5, 1284,
	-2, 2011,
	-1, 928,
	5, 1276,
	-2, 2012,
	-1, 929,
	5, 1284,
	-2, 2013,
	-1, 930,
	5, 1280,
	-2, 2014,
	-1, 931,
	5, 1199,
	-2, 1817,
	-1, 932,
	5, 1200,
	-2, 1818,
	-1, 933,
	462, 1695,
	-2, 1679,
	-1, 934,
	460, 2038,
	-2, 1696,
	-1, 954,
	5, 1268,
	-2, 1938,
	-1, 971,
	5, 1267,
	-2, 2019,
	-1, 981,
	5, 1269,
	426, 1269,
	-2, 1981,
	-1, 982,
	5, 1270,
	426, 1270,
	-2, 1982,
	-1, 1018,
	460, 1707,
	-2, 1698,
	-1, 1045,
	154, 1950,
	391, 1950,
	443, 1950,
	462, 1950,
	-2, 0,
	-1, 1048,
	1, 492,
	463, 492,
	-2, 963,
	-1, 1168,
	311, 1676,
	453, 1676,
	-2, 1675,
	-1, 1191,
	464, 1676,
	-2, 1677,
	-1, 1226,
	302, 738,
	425, 738,
	-2, 248,
	-1, 1246,
	282, 1066,
	-2, 871,
	-1, 1255,
	262, 1702,
	-2, 0,
	-1, 1319,
	1, 367,
	459, 367,
	461, 367,
	463, 367,
	-2, 1040,
	-1, 1322,
	4, 2017,
	11, 2017,
	12, 2017,
	14, 2017,
	15, 2017,
	16, 2017,
	17, 2017,
	18, 2017,
	19, 2017,
	21, 2017,
	22, 2017,
	23, 2017,
	24, 2017,
	25, 2017,
	27, 2017,
	30, 2017,
	31, 2017,
	33, 2017,
	35, 2017,
	38, 2017,
	39, 2017,
	40, 2017,
	41, 2017,
	42, 2017,
	43, 2017,
	44, 2017,
	45, 2017,
	46, 2017,
	47, 2017,
	48, 2017,
	49, 2017,
	51, 2017,
	52, 2017,
	53, 2017,
	54, 2017,
	55, 2017,
	56, 2017,
	59, 2017,
	60, 2017,
	61, 2017,
	62, 2017,
	64, 2017,
	65, 2017,
	66, 2017,
	69, 2017,
	70, 2017,
	71, 2017,
	72, 2017,
	73, 2017,
	74, 2017,
	75, 2017,
	76, 2017,
	77, 2017,
	78, 2017,
	79, 2017,
	81, 2017,
	82, 2017,
	83, 2017,
	84, 2017,
	85, 2017,
	87, 2017,
	88, 2017,
	89, 2017,
	97, 2017,
	98, 2017,
	99, 2017,
	100, 2017,
	101, 2017,
	102, 2017,
	103, 2017,
	104, 2017,
	106, 2017,
	108, 2017,
	109, 2017,
	111, 2017,
	114, 2017,
	115, 2017,
	116, 2017,
	118, 2017,
	120, 2017,
	121, 2017,
	123, 2017,
	124, 2017,
	125, 2017,
	126, 2017,
	127, 2017,
	128, 2017,
	129, 2017,
	130, 2017,
	131, 2017,
	132, 2017,
	133, 2017,
	134, 2017,
	135, 2017,
	139, 2017,
	140, 2017,
	141, 2017,
	142, 2017,
	143, 2017,
	144, 2017,
	145, 2017,
	146, 2017,
	147, 2017,
	148, 2017,
	149, 2017,
	150, 2017,
	152, 2017,
	155, 2017,
	156, 2017,
	157, 2017,
	159, 2017,
	160, 2017,
	162, 2017,
	163, 2017,
	165, 2017,
	166, 2017,
	167, 2017,
	168, 2017,
	169, 2017,
	170, 2017,
	171, 2017,
	172, 2017,
	173, 2017,
	174, 2017,
	175, 2017,
	176, 2017,
	177, 2017,
	178, 2017,
	179, 2017,
	180, 2017,
	181, 2017,
	183, 2017,
	184, 2017,
	185, 2017,
	187, 2017,
	188, 2017,
	189, 2017,
	190, 2017,
	191, 2017,
	192, 2017,
	193, 2017,
	194, 2017,
	195, 2017,
	197, 2017,
	199, 2017,
	200, 2017,
	201, 2017,
	202, 2017,
	203, 2017,
	204, 2017,
	205, 2017,
	206, 2017,
	207, 2017,
	208, 2017,
	209, 2017,
	210, 2017,
	211, 2017,
	212, 2017,
	213, 2017,
	214, 2017,
	216, 2017,
	217, 2017,
	219, 2017,
	220, 2017,
	221, 2017,
	222, 2017,
	223, 2017,
	224, 2017,
	226, 2017,
	227, 2017,
	230, 2017,
	231, 2017,
	232, 2017,
	233, 2017,
	234, 2017,
	235, 2017,
	236, 2017,
	237, 2017,
	238, 2017,
	239, 2017,
	240, 2017,
	241, 2017,
	242, 2017,
	243, 2017,
	244, 2017,
	245, 2017,
	246, 2017,
	247, 2017,
	248, 2017,
	251, 2017,
	252, 2017,
	254, 2017,
	255, 2017,
	256, 2017,
	257, 2017,
	259, 2017,
	260, 2017,
	261, 2017,
	264, 2017,
	265, 2017,
	266, 2017,
	267, 2017,
	269, 2017,
	270, 2017,
	271, 2017,
	273, 2017,
	275, 2017,
	276, 2017,
	277, 2017,
	278, 2017,
	279, 2017,
	280, 2017,
	281, 2017,
	282, 2017,
	283, 2017,
	284, 2017,
	286, 2017,
	287, 2017,
	288, 2017,
	289, 2017,
	290, 2017,
	291, 2017,
	293, 2017,
	295, 2017,
	296, 2017,
	297, 2017,
	298, 2017,
	299, 2017,
	300, 2017,
	301, 2017,
	302, 2017,
	303, 2017,
	305, 2017,
	306, 2017,
	307, 2017,
	308, 2017,
	309, 2017,
	310, 2017,
	311, 2017,
	312, 2017,
	313, 2017,
	314, 2017,
	315, 2017,
	316, 2017,
	317, 2017,
	318, 2017,
	320, 2017,
	321, 2017,
	322, 2017,
	323, 2017,
	324, 2017,
	325, 2017,
	326, 2017,
	327, 2017,
	328, 2017,
	329, 2017,
	330, 2017,
	331, 2017,
	332, 2017,
	333, 2017,
	334, 2017,
	335, 2017,
	336, 2017,
	338, 2017,
	339, 2017,
	340, 2017,
	341, 2017,
	342, 2017,
	343, 2017,
	344, 2017,
	345, 2017,
	346, 2017,
	347, 2017,
	349, 2017,
	350, 2017,
	351, 2017,
	352, 2017,
	353, 2017,
	354, 2017,
	355, 2017,
	356, 2017,
	357, 2017,
	358, 2017,
	359, 2017,
	361, 2017,
	362, 2017,
	363, 2017,
	364, 2017,
	365, 2017,
	366, 2017,
	367, 2017,
	368, 2017,
	369, 2017,
	370, 2017,
	371, 2017,
	372, 2017,
	374, 2017,
	375, 2017,
	376, 2017,
	378, 2017,
	379, 2017,
	380, 2017,
	381, 2017,
	382, 2017,
	383, 2017,
	384, 2017,
	386, 2017,
	387, 2017,
	388, 2017,
	389, 2017,
	390, 2017,
	392, 2017,
	394, 2017,
	395, 2017,
	396, 2017,
	397, 2017,
	398, 2017,
	400, 2017,
	401, 2017,
	402, 2017,
	404, 2017,
	405, 2017,
	408, 2017,
	409, 2017,
	410, 2017,
	411, 2017,
	412, 2017,
	413, 2017,
	415, 2017,
	417, 2017,
	418, 2017,
	419, 2017,
	420, 2017,
	421, 2017,
	422, 2017,
	423, 2017,
	425, 2017,
	426, 2017,
	427, 2017,
	432, 2017,
	433, 2017,
	434, 2017,
	435, 2017,
	436, 2017,
	437, 2017,
	438, 2017,
	439, 2017,
	441, 2017,
	442, 2017,
	443, 2017,
	444, 2017,
	445, 2017,
	446, 2017,
	448, 2017,
	449, 2017,
	450, 2017,
	451, 2017,
	452, 2017,
	453, 2017,
	454, 2017,
	455, 2017,
	456, 2017,
	458, 2017,
	461, 2017,
	462, 2017,
	464, 2017,
	465, 2017,
	-2, 0,
	-1, 1327,
	154, 1920,
	391, 1920,
	443, 1920,
	462, 1920,
	-2, 0,
	-1, 1356,
	296, 637,
	347, 637,
	-2, 0,
	-1, 1379,
	1, 632,
	459, 632,
	461, 632,
	463, 632,
	-2, 0,
	-1, 1380,
	1, 657,
	459, 657,
	461, 657,
	463, 657,
	-2, 0,
	-1, 1381,
	1, 639,
	459, 639,
	461, 639,
	463, 639,
	-2, 0,
	-1, 1383,
	1, 643,
	459, 643,
	461, 643,
	463, 643,
	-2, 0,
	-1, 1408,
	1, 1970,
	459, 1970,
	461, 1970,
	462, 1970,
	463, 1970,
	-2, 683,
	-1, 1409,
	1, 1917,
	459, 1917,
	461, 1917,
	462, 1917,
	463, 1917,
	-2, 684,
	-1, 1424,
	1, 958,
	463, 958,
	-2, 963,
	-1, 1429,
	138, 1078,
	225, 1078,
	258, 1078,
	-2, 1029,
	-1, 1527,
	122, 1042,
	138, 1042,
	196, 1042,
	225, 1042,
	258, 1042,
	268, 1042,
	406, 1042,
	-2, 1441,
	-1, 1580,
	461, 1579,
	-2, 0,
	-1, 1622,
	122, 1042,
	138, 1042,
	196, 1042,
	225, 1042,
	258, 1042,
	268, 1042,
	406, 1042,
	-2, 1150,
	-1, 1671,
	460, 1272,
	-2, 1260,
	-1, 1715,
	1, 494,
	463, 494,
	-2, 963,
	-1, 1913,
	1, 634,
	459, 634,
	461, 634,
	463, 634,
	-2, 0,
	-1, 1914,
	1, 659,
	459, 659,
	461, 659,
	463, 659,
	-2, 0,
	-1, 2004,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1321,
	-1, 2005,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1322,
	-1, 2006,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1323,
	-1, 2007,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1324,
	-1, 2008,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1325,
	-1, 2009,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1326,
	-1, 2010,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1327,
	-1, 2011,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1328,
	-1, 2023,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1340,
	-1, 2024,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1341,
	-1, 2025,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1342,
	-1, 2028,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1347,
	-1, 2034,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1351,
	-1, 2036,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1359,
	-1, 2037,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1360,
	-1, 2038,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1361,
	-1, 2039,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1362,
	-1, 2133,
	5, 1229,
	154, 1590,
	460, 1707,
	-2, 1698,
	-1, 2134,
	154, 1591,
	-2, 1974,
	-1, 2135,
	154, 1592,
	-2, 1839,
	-1, 2136,
	154, 1593,
	-2, 1762,
	-1, 2137,
	154, 1594,
	-2, 1798,
	-1, 2138,
	154, 1595,
	-2, 1837,
	-1, 2139,
	154, 1596,
	-2, 1911,
	-1, 2140,
	154, 1597,
	-2, 1424,
	-1, 2216,
	1, 1151,
	2, 1151,
	87, 1151,
	122, 1151,
	138, 1151,
	151, 1151,
	155, 1151,
	161, 1151,
	164, 1151,
	187, 1151,
	196, 1151,
	206, 1151,
	221, 1151,
	225, 1151,
	244, 1151,
	258, 1151,
	262, 1151,
	268, 1151,
	319, 1151,
	321, 1151,
	406, 1151,
	416, 1151,
	429, 1151,
	430, 1151,
	431, 1151,
	440, 1151,
	459, 1151,
	461, 1151,
	463, 1151,
	465, 1151,
	-2, 1150,
	-1, 2221,
	460, 1681,
	-2, 1693,
	-1, 2242,
	460, 1271,
	-2, 1261,
	-1, 2484,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1349,
	-1, 2485,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1353,
	-1, 2491,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1355,
	-1, 2673,
	203, 963,
	293, 963,
	300, 963,
	440, 963,
	-2, 491,
	-1, 2765,
	282, 1066,
	-2, 871,
	-1, 2849,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1357,
	-1, 2856,
	200, 0,
	202, 0,
	251, 0,
	-2, 1376,
	-1, 2919,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1405,
	-1, 2920,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1406,
	-1, 2921,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1407,
	-1, 2925,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1411,
	-1, 2926,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1412,
	-1, 2927,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1413,
	-1, 2971,
	460, 1682,
	-2, 1694,
	-1, 3059,
	462, 2120,
	-2, 1006,
	-1, 3108,
	200, 0,
	202, 0,
	251, 0,
	-2, 1377,
	-1, 3111,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1380,
	-1, 3112,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1382,
	-1, 3273,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1381,
	-1, 3274,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1383,
	-1, 3284,
	200, 0,
	-2, 1414,
	-1, 3392,
	200, 0,
	-2, 1415,
	-1, 3510,
	43, 0,
	173, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1977,
}

const sqlPrivate = 57344

const sqlLast = 76608

var sqlAct = [...]int{

	903, 3519, 3604, 3341, 3509, 3314, 3317, 3594, 3214, 2607,
	2165, 3488, 3479, 3476, 2752, 3463, 3520, 3557, 3521, 2991,
	3348, 3303, 2381, 2887, 2608, 1019, 3238, 3396, 1991, 3262,
	832, 3092, 3508, 3046, 3051, 3170, 3353, 1172, 2690, 214,
	2051, 214, 214, 2208, 214, 214, 214, 214, 214, 1646,
	1311, 214, 1442, 3243, 2774, 2781, 2748, 3033, 1617, 590,
	2776, 569, 2477, 1763, 1197, 2992, 1054, 823, 3288, 2414,
	1525, 1073, 2329, 2370, 2345, 2347, 2350, 214, 2416, 1011,
	1165, 590, 1889, 2613, 2649, 2635, 3091, 2622, 1363, 2593,
	2424, 1647, 3142, 2405, 1615, 1849, 1307, 2407, 687, 860,
	1846, 2413, 2611, 1589, 2382, 1839, 2273, 2209, 1838, 4,
	2942, 1535, 2330, 2207, 2592, 2512, 1553, 2064, 1772, 925,
	2102, 1988, 1984, 3397, 2082, 1797, 2473, 1184, 2348, 831,
	142, 2305, 1801, 1061, 1790, 1750, 2423, 1590, 1748, 899,
	1424, 2211, 2654, 2183, 2094, 3342, 2162, 2048, 2306, 2375,
	819, 2750, 1174, 1320, 1835, 1304, 1003, 1294, 537, 1050,
	2271, 1867, 1240, 2417, 591, 206, 2076, 1006, 2263, 2191,
	592, 208, 2173, 985, 86, 1599, 2129, 214, 214, 1516,
	2065, 1443, 523, 1441, 1314, 681, 545, 149, 586, 207,
	1834, 1318, 553, 563, 1270, 150, 1855, 662, 1762, 631,
	1194, 859, 540, 1008, 548, 142, 983, 1548, 37, 36,
	34, 25, 1447, 23, 21, 1423, 1252, 32, 734, 902,
	750, 2960, 2508, 2961, 1455, 1456, 1890, 3634, 2609, 3625,
	595, 2182, 1869, 2182, 1869, 1058, 858, 3624, 1869, 3603,
	827, 2182, 3586, 1806, 1486, 3584, 3184, 2791, 598, 3184,
	3543, 1458, 595, 3541, 3544, 3539, 2671, 2182, 3536, 2182,
	2429, 3533, 3537, 3530, 2790, 3534, 822, 1806, 1000, 697,
	598, 3506, 1455, 1456, 3505, 1806, 3504, 3501, 1806, 1457,
	1881, 1881, 3500, 3458, 827, 3452, 1881, 2235, 1477, 2182,
	3451, 1030, 1486, 3446, 2182, 1474, 3445, 3184, 3439, 1458,
	3184, 3433, 1806, 3431, 3394, 3184, 3375, 3184, 2235, 3372,
	1806, 1181, 3331, 3184, 1058, 2231, 1806, 3330, 986, 986,
	3323, 1806, 2182, 2175, 1806, 3322, 828, 1457, 3294, 3184,
	807, 3275, 1806, 3260, 3104, 2235, 1477, 1881, 806, 2946,
	3251, 3459, 3211, 1474, 2804, 212, 2182, 3201, 989, 1806,
	990, 2182, 1480, 1481, 1482, 1483, 3183, 3110, 3378, 3067,
	3184, 2235, 1463, 2820, 836, 1031, 3061, 814, 2565, 2566,
	2820, 2583, 2584, 2585, 3031, 2966, 2956, 2949, 3032, 2967,
	2957, 2182, 2853, 1035, 987, 2880, 2868, 3106, 2819, 1806,
	2182, 2811, 2820, 1485, 1487, 2812, 1881, 2079, 2946, 2527,
	1480, 1481, 1482, 1483, 1014, 2528, 2174, 3202, 2565, 2566,
	1463, 2583, 2584, 2585, 2743, 2606, 2604, 2603, 1881, 2182,
	2182, 2182, 1472, 1473, 2557, 2540, 2529, 3105, 2182, 2541,
	2182, 2403, 2580, 1806, 2402, 1885, 2248, 2182, 1885, 2234,
	2182, 1485, 1487, 2235, 2229, 2223, 1478, 2181, 2182, 1806,
	1884, 2182, 2812, 2320, 1885, 1767, 2262, 1721, 2804, 2357,
	2476, 2565, 2566, 2080, 2583, 2584, 2585, 1868, 1805, 2260,
	1472, 1473, 2580, 1585, 1193, 1616, 3018, 2844, 2829, 1800,
	2859, 2511, 1365, 2202, 2792, 2201, 2200, 2199, 2198, 182,
	1382, 991, 988, 1870, 1478, 1870, 813, 812, 846, 1870,
	811, 2565, 2566, 2793, 2120, 810, 2571, 809, 805, 182,
	804, 803, 802, 2453, 1524, 801, 800, 799, 798, 797,
	796, 795, 794, 1484, 1741, 2580, 793, 732, 214, 184,
	731, 730, 729, 728, 2081, 2078, 727, 726, 725, 724,
	723, 1479, 722, 721, 720, 719, 2571, 718, 717, 184,
	716, 715, 714, 713, 712, 711, 214, 2586, 2790, 710,
	709, 708, 1215, 214, 707, 2580, 706, 1031, 696, 695,
	653, 1484, 652, 183, 611, 610, 609, 601, 600, 214,
	1076, 214, 214, 1177, 214, 1076, 214, 599, 576, 1479,
	2581, 575, 574, 183, 214, 214, 573, 2586, 1060, 2571,
	557, 204, 1065, 176, 203, 202, 201, 200, 199, 198,
	197, 177, 151, 196, 195, 2363, 194, 193, 192, 214,
	191, 190, 189, 188, 187, 1209, 186, 185, 3159, 3121,
	2581, 2083, 151, 214, 2174, 1177, 1177, 214, 214, 2571,
	214, 1877, 2964, 1868, 2118, 2821, 2652, 1959, 1526, 2534,
	2586, 2523, 214, 2335, 2224, 2215, 2116, 1526, 1475, 1471,
	214, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	1618, 2114, 2112, 1746, 214, 214, 214, 214, 214, 1177,
	1177, 1892, 1187, 2581, 1177, 2582, 1632, 214, 1177, 214,
	214, 1556, 1454, 1074, 1031, 1556, 1542, 1555, 1185, 1455,
	1456, 1555, 1199, 214, 1067, 1048, 1475, 1471, 1021, 1468,
	1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 1559, 1486,
	3526, 3507, 1554, 2581, 3427, 2582, 1458, 3387, 3381, 1214,
	1315, 2077, 2378, 3252, 3313, 1069, 3247, 1162, 1167, 1177,
	3379, 1537, 3163, 3141, 3140, 2565, 2566, 1168, 3128, 1891,
	3127, 1191, 3126, 3125, 1457, 2240, 1043, 3119, 1196, 3118,
	3117, 214, 3030, 1477, 1195, 595, 2980, 1170, 2979, 2977,
	2970, 2939, 2938, 2937, 2864, 214, 2860, 2647, 2582, 2815,
	75, 2600, 2591, 598, 2564, 2561, 2560, 2558, 2547, 2546,
	214, 2545, 1208, 2364, 1323, 1325, 2542, 2539, 2577, 2578,
	2579, 1337, 1253, 1253, 2517, 2576, 2574, 2575, 2567, 2568,
	2569, 2570, 2572, 2573, 142, 142, 2516, 2509, 2582, 1246,
	1249, 2404, 1202, 2216, 1207, 182, 1213, 1480, 1481, 1482,
	1483, 2087, 1298, 1301, 2565, 2566, 1321, 1463, 2577, 2578,
	2579, 3016, 1191, 1454, 1392, 2576, 2574, 2575, 2567, 2568,
	2569, 2570, 2572, 2573, 1254, 1843, 1537, 999, 828, 1455,
	1456, 1811, 1453, 3632, 3602, 184, 3601, 1809, 1485, 1487,
	3542, 1020, 1329, 1538, 1430, 1536, 2889, 3496, 3494, 1486,
	3424, 3421, 3418, 2571, 3417, 3416, 1458, 3412, 3406, 3376,
	3371, 2577, 2578, 2579, 3370, 2054, 3309, 182, 2576, 2574,
	2575, 2567, 2568, 2569, 2570, 2572, 2573, 3286, 3270, 183,
	2665, 1333, 3269, 846, 1457, 3257, 1384, 846, 1336, 176,
	3256, 1478, 1429, 1349, 3236, 1160, 3233, 177, 3227, 3158,
	1160, 1422, 3139, 3081, 3246, 3078, 3007, 184, 2576, 2574,
	2575, 2567, 2568, 2569, 2570, 2572, 2573, 3006, 151, 2995,
	3399, 1257, 2994, 2952, 1342, 2362, 2855, 1428, 2325, 2822,
	182, 1357, 3232, 2119, 182, 2805, 2768, 1742, 2307, 1523,
	1383, 1203, 2571, 1440, 830, 2737, 2472, 2715, 875, 2693,
	2692, 183, 1427, 2667, 2605, 214, 182, 2538, 2537, 1308,
	2060, 176, 2522, 2500, 2344, 1560, 1425, 1463, 1484, 177,
	184, 1557, 118, 1549, 184, 1546, 2244, 2565, 2566, 1596,
	2243, 214, 1587, 2219, 2196, 2180, 1479, 2110, 1520, 807,
	151, 214, 1076, 214, 214, 214, 184, 806, 1485, 1487,
	590, 214, 214, 1631, 1431, 590, 214, 1641, 1450, 1451,
	2292, 214, 828, 1588, 183, 1584, 1558, 1177, 183, 1583,
	1455, 1456, 1582, 1713, 176, 1893, 2581, 2693, 176, 1581,
	1580, 1579, 177, 1578, 2565, 2566, 177, 1626, 1076, 1577,
	183, 1576, 1574, 1606, 1573, 1572, 182, 1458, 1571, 1570,
	176, 1478, 1569, 151, 1718, 1634, 1568, 2377, 177, 1567,
	1566, 1625, 1744, 1565, 1564, 1643, 1563, 1593, 1594, 1562,
	1710, 2628, 1712, 2117, 1539, 1457, 1521, 1519, 1514, 151,
	1042, 1033, 1026, 1058, 3160, 2115, 184, 3114, 2976, 2959,
	2955, 2565, 2566, 2526, 2197, 3298, 986, 1550, 1551, 2237,
	2113, 2111, 142, 1652, 3162, 1635, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 2571, 1627, 2975, 1538, 2663,
	1517, 2582, 3204, 1673, 1741, 2565, 2566, 2718, 182, 1737,
	183, 1741, 3382, 1017, 1638, 1062, 3419, 2565, 2566, 842,
	176, 2777, 1741, 3250, 3380, 1623, 1479, 1618, 177, 1064,
	3005, 1747, 828, 1716, 3203, 2962, 1715, 2569, 2570, 2572,
	2573, 1586, 3312, 1177, 214, 2807, 2806, 1569, 184, 151,
	1076, 595, 2571, 1569, 2309, 1420, 595, 3354, 1740, 1620,
	2544, 1614, 1613, 1612, 1610, 1756, 1609, 1608, 1642, 598,
	1611, 3041, 1556, 1709, 598, 1014, 1727, 1014, 1555, 2581,
	1058, 1063, 2543, 2482, 1644, 2294, 1059, 1393, 1544, 214,
	214, 2754, 183, 2753, 1364, 1787, 214, 1767, 1789, 1732,
	1731, 1794, 176, 1741, 1738, 1058, 214, 1890, 1356, 2571,
	177, 1733, 3349, 1365, 1840, 214, 3022, 214, 791, 214,
	1649, 3009, 2827, 214, 2567, 2568, 2569, 2570, 2572, 2573,
	1844, 151, 2731, 1049, 1785, 214, 2581, 3289, 3605, 2609,
	1055, 2891, 2095, 2242, 1771, 2532, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 2571, 182, 792, 1575, 182,
	1552, 2746, 1831, 1807, 3527, 998, 1230, 3538, 3535, 2786,
	1827, 2987, 1346, 3473, 2582, 1177, 3047, 1177, 214, 1177,
	2411, 2374, 214, 1798, 1636, 1177, 3572, 2469, 1177, 214,
	3194, 214, 214, 2581, 1439, 1228, 184, 3573, 1218, 184,
	1735, 1177, 1177, 1177, 3438, 214, 785, 2675, 1196, 2249,
	214, 2664, 3629, 1852, 1195, 595, 1945, 1160, 1861, 590,
	214, 3528, 214, 3340, 214, 3333, 214, 1802, 214, 1437,
	1056, 2582, 3024, 598, 1055, 783, 1793, 1057, 1390, 1391,
	183, 3020, 214, 183, 1804, 214, 648, 214, 1728, 901,
	176, 781, 1064, 176, 778, 1830, 214, 846, 177, 1819,
	643, 177, 3019, 1160, 1859, 2984, 1909, 1229, 1767, 2148,
	787, 772, 2983, 1943, 2275, 1821, 1820, 214, 2521, 151,
	1895, 2079, 151, 214, 2520, 2519, 214, 1064, 2582, 2518,
	2486, 2266, 1674, 2327, 2576, 2574, 2575, 2567, 2568, 2569,
	2570, 2572, 2573, 2264, 1063, 2319, 2266, 2316, 1076, 1854,
	1872, 2297, 2717, 1874, 767, 1857, 1876, 1897, 2264, 2230,
	1879, 1344, 1736, 1389, 1056, 649, 2035, 1321, 857, 1321,
	642, 1057, 1426, 1192, 1055, 1438, 818, 2677, 2106, 1063,
	2105, 1263, 1993, 1262, 1963, 1465, 1972, 2080, 826, 828,
	1764, 828, 2574, 2575, 2567, 2568, 2569, 2570, 2572, 2573,
	1261, 2828, 1260, 1888, 2278, 3437, 1886, 2371, 1887, 1802,
	3268, 1043, 1898, 2296, 775, 1957, 1282, 1058, 1904, 1899,
	1760, 2066, 2067, 1953, 2256, 1906, 1907, 1908, 2222, 1339,
	595, 2050, 1024, 1076, 1436, 1160, 2285, 1989, 1990, 2066,
	2092, 1765, 1766, 2238, 1241, 1652, 1652, 1925, 598, 768,
	2575, 2567, 2568, 2569, 2570, 2572, 2573, 3319, 2081, 2078,
	1224, 1992, 825, 1022, 1056, 1673, 1673, 2313, 1966, 1761,
	1961, 1057, 1969, 1958, 1013, 2128, 214, 2132, 2132, 2146,
	1239, 2066, 1970, 1967, 2166, 2168, 2997, 1742, 2307, 2172,
	2573, 2252, 2050, 3205, 1742, 2307, 2095, 2567, 2568, 2569,
	2570, 2572, 2573, 2254, 1962, 1742, 2307, 1076, 214, 1960,
	1758, 1058, 1627, 1956, 1971, 3498, 1918, 214, 2284, 1238,
	214, 1358, 641, 1076, 640, 807, 1340, 1433, 807, 807,
	1419, 3190, 2220, 1980, 827, 2255, 1981, 1982, 3524, 3572,
	2091, 1796, 1900, 2277, 1388, 1858, 2096, 2456, 1455, 1456,
	2253, 1355, 644, 1015, 2831, 2083, 1365, 3589, 2830, 1912,
	2217, 1795, 2874, 1365, 2203, 2104, 1041, 2450, 2213, 2214,
	2108, 2109, 1965, 1598, 2188, 1458, 2083, 1455, 1456, 2204,
	2674, 704, 1649, 1649, 828, 2062, 1742, 1739, 651, 650,
	3609, 1791, 1913, 769, 2228, 1379, 1955, 828, 1625, 1919,
	3562, 828, 214, 1457, 1458, 3267, 826, 2871, 2295, 2089,
	1177, 1058, 1765, 1766, 2474, 2475, 3097, 986, 1952, 2565,
	2566, 2058, 2583, 2584, 2585, 2783, 1345, 2056, 3096, 3590,
	2459, 1403, 1457, 2187, 1226, 821, 2221, 1076, 2728, 779,
	1792, 1602, 214, 1914, 2141, 2232, 1380, 1718, 1944, 2170,
	214, 2157, 3456, 1767, 3008, 2077, 2178, 2179, 2276, 2083,
	2784, 214, 3525, 2193, 2194, 142, 2723, 2189, 779, 2265,
	1784, 3619, 824, 1605, 214, 3188, 1869, 1177, 2872, 1769,
	825, 1758, 1623, 2580, 780, 1773, 1463, 779, 3413, 828,
	214, 1076, 1600, 1160, 1177, 1281, 214, 214, 770, 789,
	1547, 1979, 1241, 788, 1777, 1942, 2676, 1603, 1558, 2239,
	1014, 2267, 2740, 2705, 3592, 1463, 535, 2783, 680, 2998,
	2661, 1758, 214, 3597, 214, 3021, 3561, 214, 2458, 2359,
	1601, 2317, 3093, 3280, 1014, 3579, 2247, 771, 3523, 1223,
	530, 1023, 214, 3320, 2332, 602, 2455, 1774, 2624, 214,
	2261, 214, 827, 214, 2314, 2300, 2704, 2571, 2331, 214,
	2246, 3223, 214, 1652, 214, 3484, 214, 2488, 214, 214,
	2250, 214, 1177, 1177, 1177, 2083, 1177, 2032, 1160, 3423,
	2299, 214, 214, 1673, 214, 214, 2328, 3454, 2354, 776,
	2086, 1954, 1550, 1551, 1917, 214, 3189, 1343, 1513, 767,
	2308, 2310, 2311, 2312, 1341, 2270, 2287, 1604, 214, 214,
	214, 2279, 2281, 214, 2536, 214, 3455, 2298, 214, 2192,
	214, 818, 214, 2398, 2399, 2457, 3610, 1778, 2049, 2212,
	2315, 827, 1400, 3231, 2149, 3087, 2972, 1036, 1367, 1168,
	3098, 2581, 2368, 214, 214, 214, 214, 214, 214, 3522,
	214, 3571, 1160, 2428, 3591, 1191, 705, 2331, 3569, 2331,
	1196, 2318, 3359, 577, 2394, 3560, 2333, 595, 1160, 2427,
	2291, 2430, 2431, 2342, 1017, 1432, 1017, 2443, 214, 2444,
	2410, 2358, 3035, 3264, 2400, 598, 1788, 1779, 1780, 3235,
	824, 2928, 2387, 1639, 768, 2438, 1775, 2380, 2772, 1354,
	1649, 2324, 2623, 2432, 142, 2433, 2441, 2030, 1911, 2385,
	2033, 2366, 1445, 3595, 1040, 2707, 3224, 1833, 2337, 2391,
	2339, 2392, 1401, 2393, 2395, 2454, 1776, 1529, 1321, 2401,
	1602, 1534, 3620, 1191, 1191, 2412, 2582, 1870, 1595, 2709,
	2461, 1034, 2463, 1029, 522, 2425, 1446, 603, 604, 1751,
	3094, 1768, 1729, 1752, 1435, 2057, 2397, 2655, 2029, 3137,
	583, 3614, 1605, 2376, 2489, 2376, 3325, 3193, 3324, 3307,
	3403, 2514, 2515, 2986, 3192, 1191, 2773, 214, 2688, 1751,
	2684, 2190, 1160, 1752, 3596, 3263, 2524, 2708, 1459, 1460,
	1461, 1462, 1464, 1465, 1402, 2367, 1603, 2349, 2346, 1444,
	1853, 531, 1842, 2467, 3425, 1841, 2466, 1815, 1976, 1191,
	1726, 1191, 2870, 1781, 2471, 3464, 3598, 2468, 3052, 1461,
	1462, 1464, 1465, 1949, 1445, 2510, 3239, 1722, 2929, 1513,
	2343, 2184, 1446, 1284, 3347, 2930, 1160, 3345, 769, 606,
	605, 2525, 1753, 585, 3308, 2695, 2448, 1905, 2694, 2577,
	2578, 2579, 2480, 532, 1968, 1755, 2576, 2574, 2575, 2567,
	2568, 2569, 2570, 2572, 2573, 2602, 2954, 1076, 2637, 701,
	2487, 2621, 1753, 2301, 2620, 1381, 1724, 1782, 2616, 2617,
	2227, 2618, 2396, 2226, 2225, 1755, 214, 3265, 2031, 607,
	608, 694, 1725, 533, 214, 534, 1604, 2186, 1368, 1255,
	2356, 214, 2185, 3138, 214, 214, 1076, 825, 1977, 3613,
	1757, 1444, 3215, 3315, 3408, 1076, 1256, 2816, 3191, 828,
	2440, 214, 1851, 1269, 2742, 1267, 703, 2642, 2531, 2445,
	3576, 2446, 3143, 2447, 3343, 3467, 214, 2632, 2943, 2100,
	1757, 579, 2638, 770, 3305, 3578, 2631, 2643, 2644, 3409,
	3540, 3420, 3426, 1417, 214, 214, 214, 2630, 2464, 584,
	214, 2595, 3285, 214, 2626, 2646, 2633, 2497, 2672, 3136,
	214, 214, 214, 214, 214, 1415, 3306, 3026, 2651, 2594,
	2615, 2678, 771, 2854, 2636, 2659, 214, 214, 214, 2650,
	1397, 2495, 3316, 2627, 2825, 214, 2597, 2598, 2599, 581,
	2670, 3468, 2610, 1395, 2640, 2656, 1758, 214, 1177, 2697,
	214, 2701, 2702, 2302, 2303, 3410, 1378, 2662, 1076, 2645,
	2559, 1376, 2499, 2625, 2353, 1652, 1076, 2326, 2653, 2685,
	2293, 214, 2245, 1633, 214, 214, 1758, 2711, 578, 1630,
	1418, 1374, 2641, 2099, 214, 1673, 1334, 1177, 214, 2839,
	1177, 1177, 1177, 2689, 2668, 2669, 2838, 214, 821, 2657,
	2658, 1652, 2452, 214, 2722, 2451, 2757, 2680, 214, 1941,
	214, 699, 700, 2779, 1372, 582, 2435, 214, 1951, 2639,
	2673, 1673, 1922, 2720, 1711, 1014, 580, 2729, 2679, 3181,
	2738, 1561, 1338, 692, 693, 1013, 2492, 1013, 1756, 1245,
	1014, 1177, 1177, 2149, 2149, 1416, 1370, 3518, 2493, 214,
	214, 2498, 1362, 214, 2681, 2682, 2710, 3178, 2716, 1268,
	1177, 1266, 702, 1756, 1360, 1265, 2788, 1414, 2761, 1014,
	2696, 2725, 2699, 2727, 2724, 2726, 2733, 2046, 3210, 2653,
	933, 3200, 1396, 3558, 214, 1754, 1076, 214, 214, 1076,
	214, 3461, 1191, 2739, 3167, 1394, 1798, 2299, 3050, 3179,
	3003, 2044, 1649, 2882, 1798, 3001, 2985, 2780, 1377, 2771,
	2756, 214, 1830, 1375, 1015, 1754, 1015, 2803, 2775, 210,
	2755, 525, 526, 2372, 541, 525, 541, 551, 556, 777,
	2361, 572, 2730, 1373, 2360, 2751, 2712, 2713, 1649, 210,
	2714, 2823, 2801, 2802, 2785, 2149, 2149, 2149, 2818, 2340,
	2814, 2787, 1160, 2794, 1076, 1883, 1882, 691, 1940, 1880,
	2836, 210, 142, 142, 1878, 1076, 1371, 214, 2425, 2734,
	2735, 2762, 1875, 2736, 2764, 2765, 2766, 2425, 1873, 1871,
	2857, 1862, 828, 2796, 2797, 2798, 2837, 2799, 2800, 1812,
	1810, 1160, 2824, 1799, 2494, 1786, 1783, 1770, 1369, 1185,
	1160, 1759, 1074, 2496, 1361, 3364, 2040, 2478, 1448, 1017,
	1640, 2866, 2867, 2833, 2041, 995, 1359, 1264, 2042, 3573,
	3490, 2047, 3259, 846, 1014, 2809, 2810, 2840, 3254, 2842,
	1652, 1751, 3253, 1017, 2426, 1752, 846, 1745, 1220, 996,
	3366, 2283, 2940, 3174, 1802, 3060, 1767, 3175, 2266, 1915,
	1673, 1939, 782, 784, 2266, 1191, 2862, 525, 525, 1938,
	2264, 2732, 214, 1598, 1920, 210, 2282, 2879, 1412, 1413,
	2881, 1989, 2898, 2266, 2873, 2875, 2876, 214, 2885, 1652,
	1652, 2479, 3415, 1076, 2892, 2280, 3177, 1989, 2908, 2894,
	2888, 3389, 2893, 2895, 1449, 1652, 1652, 2963, 3180, 1673,
	1673, 2897, 214, 1160, 3144, 2958, 2304, 2905, 2331, 2286,
	1452, 1160, 2932, 2059, 2778, 1673, 1673, 2907, 2936, 1719,
	1455, 1456, 1455, 1456, 1753, 997, 1652, 2323, 536, 2290,
	2321, 1602, 1529, 2288, 2950, 2951, 3593, 1755, 2933, 2322,
	3460, 2289, 3428, 3039, 3612, 2941, 1673, 1458, 214, 3034,
	2969, 2379, 2171, 1714, 2945, 1645, 3010, 2947, 2948, 2660,
	2565, 2566, 3430, 1605, 2043, 142, 2981, 1649, 1455, 1456,
	2258, 2257, 1526, 2045, 547, 1457, 2103, 1457, 3023, 2153,
	2974, 2877, 1600, 1348, 2965, 214, 214, 214, 2258, 1347,
	2666, 2259, 1757, 2107, 2101, 2074, 2971, 1603, 2834, 3115,
	2973, 3176, 1076, 214, 2869, 1399, 1524, 1177, 1398, 3014,
	1522, 3621, 3400, 3015, 3017, 3337, 1649, 1649, 2978, 3299,
	1601, 214, 3297, 3226, 3161, 3084, 3077, 2989, 3066, 3062,
	3045, 1160, 1649, 1649, 1160, 214, 214, 1177, 1177, 1177,
	3029, 214, 214, 214, 3054, 3028, 214, 214, 3027, 3000,
	214, 214, 2795, 1177, 3025, 3042, 2769, 2767, 2437, 214,
	1076, 3043, 2436, 1649, 2389, 2365, 3053, 3038, 3057, 2341,
	1014, 1014, 2061, 2689, 3048, 1076, 2299, 3056, 1937, 1936,
	1935, 1652, 2149, 2149, 1934, 1865, 1864, 1863, 1758, 1845,
	1823, 3002, 1822, 3004, 1818, 1817, 1816, 1604, 1814, 1160,
	1813, 1673, 3113, 3085, 3044, 1411, 1410, 1293, 1292, 1291,
	1160, 1290, 1289, 1288, 3055, 1287, 1286, 3058, 1285, 1749,
	214, 1283, 3073, 1278, 3064, 3063, 1277, 1276, 1275, 3069,
	1274, 1237, 3068, 1236, 1235, 3109, 3100, 1234, 1233, 3074,
	3075, 3083, 3080, 1232, 3076, 1231, 3079, 3101, 3082, 1225,
	1219, 3090, 1830, 1217, 3095, 1216, 1039, 1038, 970, 880,
	1720, 790, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
	2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149, 2149,
	2149, 2385, 2149, 214, 635, 1652, 774, 3318, 1405, 73,
	1227, 622, 67, 1076, 2999, 1076, 3472, 2703, 1921, 1366,
	1923, 2629, 2195, 3453, 3122, 1673, 2535, 3395, 1027, 3279,
	2098, 2425, 1543, 69, 214, 214, 214, 868, 1649, 953,
	3222, 3070, 3071, 3072, 3221, 3135, 214, 1754, 1160, 3168,
	1013, 2988, 214, 2415, 214, 3219, 1037, 214, 214, 214,
	3218, 1014, 835, 572, 3186, 1079, 1730, 3149, 874, 1076,
	214, 214, 1177, 1743, 1013, 1076, 2241, 1177, 3152, 210,
	3145, 210, 210, 214, 1182, 3154, 210, 2131, 3150, 3148,
	3146, 3147, 3196, 3086, 210, 1198, 3153, 2650, 214, 1653,
	3151, 1076, 3157, 877, 1177, 3166, 3185, 1650, 879, 878,
	3187, 1651, 1545, 876, 1648, 2355, 2383, 1272, 754, 1222,
	1734, 3197, 3198, 2055, 2093, 2530, 1540, 3213, 3156, 1015,
	848, 870, 214, 1244, 2090, 1032, 847, 210, 210, 2634,
	1182, 3241, 1649, 2782, 1076, 2968, 3207, 3212, 3255, 3245,
	1975, 3208, 210, 1015, 2470, 638, 2562, 2075, 1025, 3244,
	1280, 3217, 3228, 3240, 3229, 2154, 2147, 1160, 2143, 2373,
	1421, 1515, 1076, 3237, 210, 210, 210, 210, 1182, 3242,
	3249, 2384, 1066, 851, 2053, 1531, 2504, 572, 1434, 210,
	210, 2789, 2648, 2236, 3164, 3165, 3258, 3487, 1983, 1832,
	994, 993, 992, 691, 1017, 3291, 3478, 3475, 2749, 1723,
	1076, 2251, 3195, 1507, 3271, 3266, 1014, 2758, 214, 1017,
	214, 864, 1076, 214, 1014, 1160, 1190, 2614, 2817, 1242,
	3414, 214, 1506, 786, 3276, 3405, 1830, 1014, 1053, 3287,
	1160, 1052, 1051, 3216, 2687, 3618, 2996, 181, 1017, 1964,
	3302, 820, 178, 214, 180, 179, 3209, 1074, 3301, 3012,
	3295, 210, 2741, 90, 35, 3292, 3293, 16, 2153, 2153,
	117, 116, 115, 114, 214, 210, 3296, 113, 214, 112,
	111, 110, 109, 108, 3336, 3277, 214, 3300, 107, 1652,
	556, 1177, 106, 3351, 105, 3346, 104, 214, 103, 102,
	3321, 101, 3225, 3356, 100, 99, 3358, 3230, 98, 1673,
	97, 96, 95, 94, 3334, 93, 92, 91, 214, 214,
	3338, 568, 565, 3277, 3344, 49, 3373, 3374, 3361, 3248,
	3385, 3386, 48, 1639, 3350, 1992, 3327, 89, 88, 15,
	214, 3368, 33, 13, 1652, 53, 214, 3362, 3355, 3363,
	3360, 54, 3244, 3367, 12, 1896, 214, 28, 1160, 29,
	1160, 3365, 79, 78, 1673, 27, 14, 26, 24, 10,
	2153, 2153, 2153, 8, 7, 30, 3411, 3402, 1607, 11,
	147, 146, 72, 145, 71, 3369, 3393, 3401, 144, 3398,
	143, 70, 22, 3377, 9, 139, 3352, 3388, 3040, 66,
	141, 140, 63, 1017, 138, 137, 3422, 3328, 3329, 64,
	214, 1177, 136, 135, 1160, 3384, 65, 214, 134, 20,
	1160, 1177, 1177, 5, 52, 6, 1649, 1177, 3261, 3444,
	2826, 214, 83, 214, 84, 31, 1652, 61, 2751, 3429,
	60, 3432, 59, 19, 51, 18, 1160, 3436, 3435, 171,
	3457, 170, 169, 168, 163, 3440, 1673, 214, 3448, 162,
	167, 165, 164, 214, 214, 3469, 1076, 166, 161, 3355,
	133, 3442, 3443, 3441, 214, 214, 173, 3447, 172, 3481,
	175, 1649, 3485, 159, 1191, 525, 3491, 155, 3493, 1160,
	3495, 154, 158, 160, 3474, 3449, 157, 3450, 3477, 3480,
	3482, 156, 3503, 3502, 153, 174, 210, 132, 210, 131,
	214, 210, 56, 3497, 3499, 130, 129, 1160, 2501, 2502,
	128, 1198, 127, 1182, 210, 3529, 126, 3470, 55, 17,
	210, 1198, 541, 2, 3517, 210, 1198, 3516, 3514, 3515,
	1, 572, 0, 0, 0, 3545, 0, 3531, 0, 214,
	0, 2149, 3547, 0, 3549, 1160, 3554, 0, 0, 0,
	1455, 1456, 3555, 3546, 3548, 3559, 3550, 1160, 0, 214,
	0, 3551, 0, 1649, 0, 0, 0, 0, 0, 1992,
	1486, 0, 3565, 3566, 0, 0, 0, 1458, 3570, 3568,
	3567, 0, 0, 214, 2149, 214, 1597, 3574, 3575, 846,
	3577, 3583, 0, 3585, 0, 0, 3581, 0, 0, 3588,
	3582, 3587, 0, 0, 0, 1457, 3477, 0, 0, 3480,
	2588, 2589, 2590, 0, 0, 1013, 3600, 0, 0, 0,
	0, 3599, 0, 3552, 3553, 3489, 0, 3556, 3607, 0,
	1013, 3606, 0, 3608, 0, 0, 0, 0, 3611, 1017,
	1017, 0, 0, 0, 0, 0, 3615, 3580, 0, 0,
	0, 3181, 3616, 3617, 0, 3622, 0, 3623, 0, 1013,
	0, 816, 0, 767, 0, 0, 3626, 3627, 3628, 3630,
	3631, 0, 0, 0, 0, 0, 0, 0, 3635, 3178,
	0, 0, 3171, 3633, 210, 818, 3492, 0, 1463, 0,
	2149, 0, 0, 0, 1015, 0, 3169, 2153, 2153, 2385,
	0, 0, 3173, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1485,
	1487, 3179, 0, 817, 0, 0, 0, 0, 0, 210,
	210, 0, 0, 0, 0, 0, 210, 0, 1015, 834,
	0, 0, 0, 0, 0, 3489, 1850, 0, 0, 0,
	0, 0, 0, 3172, 0, 210, 0, 210, 768, 210,
	0, 0, 0, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 1866, 0, 2153, 2153, 2153,
	2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153,
	2153, 2153, 2153, 2153, 2153, 2153, 0, 2153, 0, 0,
	0, 1160, 0, 0, 0, 846, 0, 0, 0, 0,
	1017, 57, 0, 0, 1013, 0, 0, 0, 572, 0,
	0, 0, 691, 0, 0, 58, 0, 0, 0, 210,
	0, 1182, 210, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 572, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	210, 0, 210, 0, 210, 3174, 210, 1479, 210, 3175,
	68, 0, 0, 0, 0, 0, 2565, 2566, 0, 2583,
	2584, 2585, 1946, 0, 0, 1947, 0, 1948, 0, 0,
	0, 0, 0, 1015, 0, 2858, 210, 0, 0, 0,
	74, 0, 769, 0, 0, 0, 0, 0, 3177, 0,
	85, 0, 0, 0, 0, 75, 82, 556, 0, 0,
	3180, 0, 0, 572, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2580, 0, 0, 0, 0, 0, 0, 2850, 2851, 0,
	0, 0, 0, 0, 0, 0, 1455, 1456, 0, 76,
	0, 0, 0, 0, 0, 1017, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 1017, 0, 1466, 1467,
	1459, 1460, 1461, 1462, 1464, 1465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 0, 770, 0, 0,
	0, 1457, 0, 0, 2571, 0, 0, 0, 0, 0,
	0, 0, 0, 3176, 0, 0, 0, 2909, 2910, 2911,
	2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921,
	2922, 2923, 2924, 2925, 2926, 2927, 771, 2931, 2233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1013, 1013, 0, 0, 0, 2586, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	1456, 210, 0, 0, 1463, 0, 0, 0, 2581, 148,
	80, 0, 81, 0, 0, 0, 0, 0, 525, 1486,
	0, 0, 0, 0, 0, 210, 1458, 525, 0, 0,
	210, 182, 1455, 1456, 0, 1485, 1487, 0, 0, 0,
	0, 0, 0, 686, 0, 0, 0, 118, 0, 1015,
	1015, 0, 1486, 0, 1457, 0, 0, 0, 0, 1458,
	0, 0, 0, 1477, 834, 0, 0, 0, 834, 0,
	1474, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 1478, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	1200, 0, 1204, 2582, 1210, 0, 0, 152, 0, 2848,
	0, 0, 541, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 1480, 1481, 1482,
	1483, 0, 0, 177, 0, 0, 0, 1463, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2274, 0, 151, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 1485, 1487,
	1463, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 210, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 1335, 1472, 1473, 0,
	210, 1485, 1487, 0, 0, 0, 210, 2334, 0, 0,
	0, 0, 0, 0, 0, 0, 2577, 2578, 2579, 0,
	1015, 1478, 0, 2576, 2574, 2575, 2567, 2568, 2569, 2570,
	2572, 2573, 210, 0, 1198, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1385, 0, 1850, 0, 1478, 0, 2153, 0, 0, 2274,
	0, 525, 0, 2388, 0, 0, 0, 0, 0, 210,
	0, 0, 210, 0, 210, 0, 210, 0, 210, 210,
	0, 1182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2408, 691, 0, 2274, 2274, 1013, 0, 1484, 2153,
	0, 0, 0, 0, 1013, 210, 1459, 1460, 1461, 1462,
	1464, 1465, 0, 0, 0, 0, 1479, 1013, 210, 1182,
	210, 0, 0, 1198, 0, 1198, 0, 0, 1182, 0,
	1182, 0, 1182, 0, 1508, 1509, 1510, 1511, 1512, 0,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 210, 210, 210, 210, 1182, 210, 0,
	210, 0, 0, 0, 1528, 57, 685, 684, 0, 0,
	1541, 0, 0, 0, 0, 1015, 0, 0, 0, 58,
	0, 0, 0, 1015, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 62, 1455, 1456, 1015, 1488, 1489, 1490,
	1498, 1499, 1500, 0, 0, 2153, 0, 0, 0, 0,
	0, 0, 0, 1491, 1486, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 68, 0, 1504, 0, 0, 0,
	0, 0, 0, 1475, 1471, 0, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 74, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 85, 1474, 0, 0, 0, 75,
	82, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1198, 0, 1591,
	1591, 1591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3284, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	57, 0, 1480, 1481, 1482, 1483, 0, 0, 0, 0,
	0, 0, 1463, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 3310,
	0, 0, 0, 0, 0, 0, 1495, 0, 834, 1505,
	0, 0, 0, 1485, 1487, 0, 0, 0, 2565, 2566,
	0, 2583, 2584, 2585, 0, 0, 210, 0, 0, 68,
	0, 0, 0, 1501, 0, 1502, 0, 0, 0, 0,
	0, 210, 1472, 1473, 0, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 525, 0, 0, 1493, 0, 74,
	0, 525, 0, 0, 525, 525, 1478, 0, 0, 85,
	210, 77, 0, 0, 75, 82, 0, 0, 0, 0,
	0, 1198, 2580, 0, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1198, 0, 0, 0,
	1492, 0, 0, 148, 80, 3392, 81, 0, 0, 0,
	0, 0, 0, 0, 2274, 2274, 210, 0, 76, 0,
	2274, 0, 0, 2691, 0, 182, 0, 0, 0, 0,
	2274, 2691, 2274, 2691, 2691, 0, 0, 686, 0, 0,
	0, 118, 0, 1484, 0, 0, 210, 210, 210, 0,
	0, 0, 0, 0, 0, 0, 2571, 0, 0, 0,
	0, 1479, 0, 0, 0, 184, 0, 210, 0, 0,
	1182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2587, 0, 0, 0, 1496, 119, 0,
	0, 2745, 0, 0, 2747, 2274, 0, 0, 0, 0,
	0, 152, 0, 0, 210, 0, 0, 2586, 210, 183,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 176,
	0, 0, 0, 1182, 0, 210, 77, 177, 2274, 0,
	525, 0, 0, 0, 0, 0, 0, 2274, 0, 0,
	2581, 0, 0, 0, 0, 0, 0, 0, 683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 80,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 210,
	1850, 1494, 0, 1850, 1469, 1470, 1476, 1497, 1475, 1471,
	182, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	0, 0, 686, 0, 3131, 0, 118, 0, 3130, 0,
	0, 0, 0, 0, 2832, 0, 0, 1182, 210, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 2582, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 2890, 0, 0,
	0, 1974, 0, 1978, 0, 0, 0, 0, 0, 1985,
	0, 0, 0, 151, 0, 0, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 0, 2034, 0, 2036, 2037, 2038, 2039, 2577, 2578,
	2579, 0, 0, 0, 0, 2576, 2574, 2575, 2567, 2568,
	2569, 2570, 2572, 2573, 2063, 0, 0, 0, 0, 0,
	0, 210, 210, 0, 0, 0, 0, 0, 0, 1528,
	0, 0, 525, 2088, 1455, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 2121, 2122, 2123, 2124, 2125, 2126,
	2127, 0, 1198, 0, 0, 2145, 0, 2156, 2158, 2163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2847, 2565, 2566, 0, 2583, 2584,
	2585, 0, 0, 0, 0, 3036, 210, 210, 0, 0,
	0, 0, 1480, 1481, 1482, 1483, 0, 0, 0, 0,
	0, 0, 1463, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2274, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 1487, 2408, 2408, 0, 0, 2580,
	0, 691, 691, 2274, 0, 0, 1850, 1850, 0, 0,
	691, 2274, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 1472, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2571, 0, 0, 0, 0, 0, 0,
	3123, 0, 0, 0, 1455, 1456, 0, 1488, 1489, 1490,
	1498, 1499, 1500, 0, 0, 0, 2336, 0, 2338, 0,
	0, 0, 0, 1491, 1486, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 1484, 2586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 1457,
	0, 1479, 0, 1198, 0, 210, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 1474, 0, 2581, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2274, 2274, 2274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1198, 0, 0, 0,
	0, 0, 2274, 0, 2691, 0, 0, 1198, 1198, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 1480, 1481, 1482, 1483, 0, 0, 0, 0,
	0, 0, 1463, 2274, 0, 0, 2449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3234, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 1505,
	0, 0, 2582, 1485, 1487, 0, 0, 0, 1475, 1471,
	0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	0, 0, 1198, 1501, 0, 1502, 0, 0, 0, 0,
	0, 0, 1472, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2484, 2485, 0, 0,
	0, 0, 2491, 0, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 2505, 2506, 0, 0, 0, 0, 2088, 0, 0,
	0, 0, 934, 0, 0, 0, 2513, 0, 2274, 0,
	2691, 0, 0, 3304, 0, 2577, 2578, 2579, 0, 0,
	0, 210, 2576, 2574, 2575, 2567, 2568, 2569, 2570, 2572,
	2573, 0, 2533, 1484, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 572, 0, 0, 0, 2548, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 3304, 0, 0, 0, 2274, 0,
	0, 0, 0, 0, 1455, 1456, 210, 1496, 0, 0,
	1498, 1499, 1500, 211, 0, 0, 0, 1198, 0, 0,
	0, 0, 0, 0, 1486, 0, 2163, 2163, 2163, 0,
	0, 1458, 0, 0, 0, 0, 1504, 0, 210, 210,
	0, 1591, 0, 0, 0, 0, 0, 0, 0, 2619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	2890, 0, 0, 0, 0, 0, 525, 0, 1477, 0,
	0, 0, 0, 0, 0, 1474, 3304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 1469, 1470, 1476, 1497, 1475, 1471,
	0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	0, 0, 0, 0, 834, 0, 0, 0, 3129, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	210, 0, 1480, 1481, 1482, 1483, 0, 2691, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 1198, 2706, 1198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 1505,
	0, 0, 0, 1485, 1487, 0, 0, 3465, 0, 0,
	869, 87, 0, 1198, 210, 0, 0, 0, 0, 1455,
	1456, 0, 0, 0, 210, 2274, 0, 0, 0, 0,
	0, 0, 1472, 1473, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 1458, 1493, 0, 900,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	2890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 87, 0, 209, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 2274,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2490,
	596, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1198, 0, 2274, 0, 1480, 1481, 1482,
	1483, 1479, 0, 808, 0, 0, 0, 1463, 0, 0,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 2841,
	0, 0, 0, 1985, 0, 0, 0, 1496, 0, 2845,
	2846, 0, 0, 2849, 0, 0, 0, 2852, 1485, 1487,
	0, 0, 0, 0, 0, 1004, 2856, 0, 0, 0,
	0, 0, 0, 0, 0, 2863, 0, 0, 2619, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2883,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 0, 2899, 2900,
	0, 2901, 2902, 2903, 0, 0, 2904, 0, 0, 0,
	2906, 1494, 0, 0, 0, 0, 0, 1497, 1475, 1471,
	0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2934, 2935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 2953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 211, 1081, 211, 211, 1081, 0, 1081, 211, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2990,
	2993, 0, 0, 0, 0, 0, 0, 1081, 1081, 211,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3011, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 211, 211, 211,
	0, 1081, 1081, 0, 0, 0, 1081, 0, 0, 0,
	1081, 211, 211, 1475, 1471, 0, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 0, 0, 0, 0, 0,
	0, 1455, 1456, 0, 1488, 1489, 1490, 1498, 1499, 1500,
	1591, 0, 0, 0, 0, 0, 0, 0, 0, 3065,
	0, 1486, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 1081, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 211, 0, 0,
	0, 0, 1474, 0, 3102, 3103, 0, 0, 0, 0,
	3107, 3108, 0, 0, 0, 3111, 3112, 0, 0, 0,
	0, 0, 3116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3120, 0, 0, 0, 0, 0, 0, 3124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	1481, 1482, 1483, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	209, 209, 0, 1495, 0, 209, 1505, 0, 0, 0,
	1485, 1487, 0, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	1473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 209, 209, 0, 0,
	0, 2993, 0, 1478, 829, 87, 87, 0, 0, 0,
	0, 209, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 209, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 211, 0, 2993, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 0, 211, 211, 1479, 0,
	0, 0, 211, 0, 0, 0, 0, 211, 0, 0,
	0, 3272, 3273, 3274, 0, 0, 0, 0, 0, 1081,
	209, 0, 0, 0, 1496, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 209, 0, 3282, 3283, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 589,
	3290, 0, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	0, 2993, 1533, 0, 0, 0, 0, 0, 0, 3326,
	0, 0, 0, 0, 0, 0, 0, 3332, 1494, 0,
	834, 1469, 1470, 1476, 1497, 1475, 1471, 3339, 1468, 1466,
	1467, 1459, 1460, 1461, 1462, 1464, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2993, 0, 0, 2993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2993, 2993, 1081, 211, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 211, 0, 0, 62, 3404, 0, 211, 3407,
	0, 0, 0, 87, 0, 0, 1619, 0, 1622, 0,
	39, 122, 0, 0, 0, 0, 0, 211, 0, 211,
	0, 211, 0, 0, 38, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 41, 1016, 0, 0,
	209, 42, 0, 0, 0, 0, 74, 0, 0, 123,
	0, 0, 0, 209, 1621, 40, 85, 0, 0, 596,
	0, 75, 82, 0, 596, 0, 0, 1081, 0, 1081,
	0, 1081, 0, 0, 0, 0, 0, 1081, 0, 0,
	1081, 211, 0, 0, 211, 0, 0, 0, 43, 0,
	0, 0, 0, 1081, 1081, 1081, 834, 0, 0, 0,
	0, 0, 211, 0, 0, 76, 0, 0, 0, 0,
	0, 211, 211, 0, 211, 0, 211, 0, 211, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3513, 3513, 3513, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	3532, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2993, 0, 2993, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 3513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 57, 0, 0, 0, 0,
	0, 44, 0, 596, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 47, 148, 80, 0, 81, 0,
	45, 0, 0, 0, 124, 0, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 182, 209, 209,
	3513, 0, 0, 0, 68, 209, 0, 0, 0, 50,
	0, 0, 0, 118, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 121, 209, 0, 209, 0, 209, 0,
	0, 0, 0, 0, 74, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 85, 829, 0, 829, 1077, 75,
	82, 1178, 0, 1077, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 176, 0, 76, 0, 0, 0, 0, 209, 177,
	0, 209, 211, 1178, 1178, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	151, 0, 0, 3, 0, 0, 0, 0, 596, 209,
	0, 209, 0, 209, 0, 209, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1178, 1178, 0,
	0, 0, 1178, 0, 0, 0, 1178, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 808, 0,
	0, 808, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 209, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 1178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 2052, 0, 0, 0,
	0, 0, 211, 148, 80, 0, 81, 0, 0, 0,
	829, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1527, 0, 182, 211, 1527, 0, 1081,
	0, 0, 0, 0, 0, 1455, 1456, 686, 0, 0,
	0, 118, 211, 1081, 0, 0, 1081, 0, 211, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	1457, 1004, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 152, 0, 0, 0, 0, 1474, 0, 0, 183,
	0, 211, 0, 0, 211, 1622, 211, 0, 211, 176,
	211, 211, 0, 0, 1081, 1081, 1081, 177, 1081, 0,
	1016, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 2483, 0, 211, 1326, 0,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 209,
	211, 0, 211, 1480, 1481, 1482, 1483, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 1456, 0,
	0, 0, 0, 0, 0, 211, 211, 211, 211, 0,
	211, 0, 211, 0, 1485, 1487, 0, 1486, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	1078, 0, 0, 1179, 0, 1078, 0, 0, 0, 0,
	211, 0, 0, 1472, 1473, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 87, 0, 0, 0, 1478, 1474, 0,
	1077, 0, 0, 0, 0, 0, 1009, 0, 589, 0,
	0, 0, 0, 589, 0, 1179, 1179, 0, 0, 0,
	0, 0, 0, 0, 87, 1178, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 87, 0, 87, 0, 205, 1077, 0, 0, 0,
	0, 0, 0, 209, 0, 1480, 1481, 1482, 1483, 1179,
	1179, 0, 0, 0, 1179, 1463, 0, 0, 1179, 209,
	0, 0, 0, 0, 1484, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 0, 1479, 0, 0, 0, 1485, 1487, 0, 0,
	0, 209, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 1179,
	0, 0, 0, 0, 0, 1472, 1473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 209, 57, 209, 0, 209, 0, 209, 209, 1478,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	62, 1178, 0, 0, 209, 0, 0, 0, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 68, 0, 0, 0, 0, 0, 1081, 0, 1475,
	1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464,
	1465, 0, 209, 209, 209, 209, 1484, 209, 0, 209,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 1479, 0, 75, 82, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 2052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 211,
	211, 0, 0, 0, 0, 1527, 0, 211, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	1081, 0, 0, 1178, 0, 1178, 0, 1178, 0, 0,
	1081, 0, 0, 1178, 0, 0, 1178, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1178,
	1178, 1178, 0, 0, 0, 0, 211, 0, 0, 1081,
	211, 0, 1081, 1081, 1081, 0, 0, 589, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460, 1461,
	1462, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 1081, 0, 0, 0, 77, 0,
	0, 211, 1078, 0, 0, 0, 1004, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 1179, 0, 0,
	148, 80, 0, 81, 0, 0, 1077, 0, 1081, 0,
	211, 1081, 211, 0, 0, 1016, 0, 0, 1078, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	1016, 0, 0, 211, 686, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1621,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 612, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 1081, 0, 87,
	87, 1077, 0, 87, 613, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 209, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 87, 87, 177, 0, 87, 614, 633, 0,
	0, 0, 0, 0, 0, 209, 209, 209, 0, 0,
	0, 0, 0, 1179, 1621, 1324, 0, 0, 0, 615,
	1078, 0, 616, 0, 0, 1071, 209, 0, 0, 0,
	0, 0, 1189, 0, 0, 1077, 0, 0, 639, 0,
	0, 0, 0, 0, 617, 1004, 0, 0, 829, 0,
	0, 1077, 0, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 209, 0, 0,
	0, 0, 618, 87, 87, 1081, 209, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 620, 643, 0, 1273, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 1297, 1297, 1189, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 1330, 1331, 0, 1178, 0,
	0, 0, 0, 0, 0, 1179, 0, 1179, 0, 1179,
	0, 0, 0, 0, 0, 1179, 0, 0, 1179, 0,
	0, 0, 0, 0, 0, 1077, 642, 209, 0, 209,
	0, 1179, 1179, 1179, 623, 0, 0, 0, 211, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 1081, 211, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 1178, 621, 1404, 0, 0,
	0, 0, 0, 0, 0, 733, 624, 767, 0, 1077,
	0, 0, 1178, 0, 0, 0, 0, 0, 0, 1081,
	1081, 1081, 0, 0, 625, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 211, 1081, 751, 738, 0, 0, 0, 0, 0,
	0, 645, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 626, 0, 0, 0, 0, 87, 739, 1078, 0,
	0, 0, 741, 0, 627, 0, 773, 0, 0, 0,
	0, 1004, 1004, 748, 749, 0, 0, 0, 0, 760,
	1178, 1178, 1178, 632, 1178, 0, 0, 0, 0, 0,
	0, 0, 768, 743, 0, 628, 0, 0, 641, 0,
	640, 0, 0, 629, 0, 0, 0, 0, 0, 0,
	1016, 1016, 0, 0, 0, 0, 630, 0, 0, 0,
	766, 636, 0, 0, 0, 0, 647, 0, 644, 0,
	0, 0, 0, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 1081, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 745, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 753, 752, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 1078, 0, 0,
	772, 1081, 211, 211, 1081, 0, 0, 1081, 0, 1081,
	0, 0, 0, 1078, 0, 0, 769, 1628, 0, 0,
	0, 0, 1004, 0, 0, 209, 209, 0, 0, 0,
	1637, 0, 0, 1081, 0, 0, 1081, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 87, 0, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 765, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 209, 0,
	1179, 0, 0, 0, 1081, 0, 756, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 0, 0, 0, 735,
	0, 770, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 758, 0, 0,
	0, 755, 0, 0, 1081, 1077, 0, 0, 0, 0,
	771, 0, 0, 211, 0, 0, 0, 1179, 759, 0,
	0, 0, 0, 0, 0, 0, 0, 1004, 0, 0,
	0, 1078, 0, 0, 1179, 1004, 0, 0, 761, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 0, 1016, 0, 211, 0,
	0, 0, 0, 1081, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1621, 0, 0,
	0, 0, 0, 0, 0, 1825, 0, 0, 0, 0,
	211, 211, 1837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1179, 1179, 1179, 87, 1179, 0, 0, 0,
	87, 1273, 0, 1856, 0, 1856, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	209, 0, 87, 0, 0, 0, 1178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1178, 0, 0, 1178, 1178,
	1178, 0, 211, 1081, 0, 1837, 0, 0, 1902, 672,
	0, 0, 0, 1081, 1081, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 1916, 0, 0, 0,
	0, 0, 654, 0, 0, 0, 1926, 0, 1928, 0,
	1930, 0, 1932, 0, 1933, 0, 0, 0, 0, 1178,
	1178, 0, 0, 0, 0, 0, 211, 0, 1081, 0,
	0, 0, 0, 0, 0, 655, 211, 0, 1178, 0,
	0, 0, 1950, 0, 656, 0, 0, 0, 0, 0,
	0, 1455, 1456, 0, 1488, 1489, 1490, 1498, 1499, 1500,
	657, 0, 0, 0, 1077, 0, 0, 1077, 0, 0,
	1491, 1486, 1297, 0, 0, 0, 677, 0, 1458, 0,
	209, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 658, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	659, 2052, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	660, 0, 1077, 661, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 209, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	1481, 1482, 1483, 0, 0, 0, 0, 1078, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 1505, 0, 0, 0,
	1485, 1487, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	1501, 0, 1502, 0, 0, 0, 0, 0, 0, 1472,
	1473, 0, 0, 0, 663, 0, 0, 0, 0, 209,
	0, 1077, 0, 0, 1493, 0, 2218, 0, 0, 0,
	0, 680, 664, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 1503, 0, 0, 0, 0, 0, 0, 0, 679,
	0, 0, 0, 0, 0, 0, 665, 1492, 0, 666,
	0, 0, 0, 209, 0, 674, 0, 0, 0, 0,
	0, 0, 667, 209, 0, 0, 0, 0, 1179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	1484, 0, 0, 668, 675, 0, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 1179, 1479, 0,
	1179, 1179, 1179, 0, 671, 0, 0, 0, 0, 670,
	1077, 0, 0, 0, 0, 1178, 0, 0, 0, 0,
	0, 678, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1178, 1178, 1178, 0, 0,
	0, 1179, 1179, 0, 0, 0, 0, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 1189, 0, 1077, 0,
	1179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 2352, 1078,
	0, 0, 0, 1837, 0, 0, 0, 0, 1494, 0,
	0, 1469, 1470, 1476, 1497, 1475, 1471, 0, 1468, 1466,
	1467, 1459, 1460, 1461, 1462, 1464, 1465, 0, 0, 0,
	0, 3466, 0, 0, 0, 2390, 0, 0, 1297, 0,
	1297, 0, 1297, 0, 1189, 1189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 2434, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 2439, 0, 2442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1077, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2460,
	1189, 2462, 1189, 0, 2465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2481, 0, 0, 1077, 0, 0,
	1178, 0, 0, 1077, 0, 1178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 1456, 0, 1488, 1489,
	1490, 1498, 1499, 1500, 0, 0, 0, 0, 0, 1077,
	0, 0, 1178, 1078, 1491, 1486, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1077, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 0,
	0, 0, 0, 1480, 1481, 1482, 1483, 0, 0, 0,
	1077, 0, 1078, 1463, 0, 0, 0, 1179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	1505, 0, 0, 0, 1485, 1487, 0, 1179, 1179, 1179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1179, 1501, 0, 1502, 0, 0, 0,
	1078, 0, 0, 1472, 1473, 0, 0, 0, 0, 1178,
	0, 0, 0, 0, 0, 1078, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 2683, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2719, 2721, 2352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 1178,
	0, 0, 0, 1078, 0, 1078, 0, 0, 0, 1178,
	1178, 0, 0, 0, 0, 1178, 0, 0, 1496, 0,
	2759, 0, 0, 0, 2763, 0, 0, 0, 0, 0,
	0, 0, 0, 2770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 1078,
	0, 0, 1179, 0, 0, 1078, 0, 1179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2813, 0, 0, 0, 0,
	0, 1078, 0, 0, 1179, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 1469, 1470, 1476, 1497, 1475,
	1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464,
	1465, 0, 0, 0, 2835, 2553, 1189, 0, 0, 2554,
	0, 0, 1455, 1456, 1078, 1488, 1489, 1490, 1498, 1499,
	1500, 0, 0, 0, 0, 0, 0, 2843, 0, 0,
	0, 1491, 1486, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 1078, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	1078, 0, 0, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 1481, 1482, 1483, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1179, 0, 0, 0, 1455, 1456, 0, 1488, 1489,
	1490, 1498, 1499, 1500, 1495, 0, 0, 1505, 0, 0,
	0, 1485, 1487, 0, 1491, 1486, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 1504, 0, 0,
	0, 1501, 0, 1502, 0, 0, 0, 0, 0, 0,
	1472, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 1493, 0, 0, 0, 1477,
	0, 0, 0, 0, 1478, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1179, 1179, 1480, 1481, 1482, 1483, 1179, 0, 0,
	0, 0, 3037, 1463, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 3049,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 1479,
	1505, 0, 0, 0, 1485, 1487, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 1496, 1502, 0, 0, 0,
	0, 0, 0, 1472, 1473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3088, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 0, 1469, 1470, 1476, 1497, 1475, 1471, 0, 1468,
	1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 0, 0,
	0, 0, 2084, 0, 1484, 0, 2085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 1455, 1456, 0, 1488, 1489,
	1490, 1498, 1499, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 1486, 0, 0, 1496, 0,
	0, 0, 1458, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 3199, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 1469, 1470, 1476, 1497, 1475,
	1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464,
	1465, 0, 0, 1480, 1481, 1482, 1483, 0, 0, 2861,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	1505, 0, 0, 0, 1485, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 1502, 0, 0, 0,
	0, 0, 0, 1472, 1473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 3311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3357, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3383, 1189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3434, 0, 0, 0,
	0, 0, 1494, 0, 0, 1469, 1470, 1476, 1497, 1475,
	1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 2556,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	3471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3486, 219, 220, 221, 222, 223, 1082, 224, 1083, 1084,
	1085, 0, 1086, 476, 1087, 1088, 1089, 1090, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	1091, 233, 234, 235, 236, 237, 238, 1092, 1093, 239,
	481, 482, 483, 1094, 240, 484, 1095, 1080, 1096, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1097, 251, 0, 252, 253, 254, 1098, 955, 255, 256,
	1099, 1100, 1102, 1101, 1103, 1104, 1105, 257, 258, 259,
	260, 261, 262, 485, 486, 1106, 263, 1107, 265, 264,
	1108, 266, 1109, 1110, 267, 268, 269, 1111, 270, 1112,
	271, 272, 1113, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 1114, 216, 1115, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 1116, 290, 1117, 1118, 956, 291, 292, 1119, 293,
	491, 1120, 492, 294, 1121, 295, 296, 297, 298, 493,
	494, 495, 348, 958, 299, 300, 1122, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1123, 957, 306, 496,
	308, 307, 309, 310, 311, 497, 1124, 498, 1125, 313,
	959, 499, 960, 314, 315, 316, 961, 317, 318, 0,
	0, 319, 320, 321, 322, 1126, 324, 323, 1127, 325,
	500, 962, 326, 327, 963, 1128, 328, 329, 1129, 1130,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 964, 343, 344, 346, 345, 1131,
	218, 965, 347, 1132, 501, 502, 349, 350, 1133, 351,
	352, 353, 1134, 1135, 355, 356, 357, 1136, 1137, 358,
	359, 503, 966, 360, 967, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 1138, 369, 370, 505, 371,
	506, 372, 1139, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 1140, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 1141,
	395, 968, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 1142, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 1143, 422,
	402, 403, 423, 424, 969, 425, 426, 509, 427, 428,
	1144, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 1145, 440, 441, 439, 1146, 442, 443,
	444, 445, 446, 278, 447, 1147, 448, 511, 512, 513,
	514, 1148, 455, 1149, 449, 450, 515, 451, 516, 1150,
	452, 453, 454, 0, 456, 457, 1151, 1152, 458, 459,
	460, 461, 462, 464, 1153, 465, 1154, 463, 466, 467,
	468, 517, 518, 519, 1155, 470, 469, 520, 1156, 1157,
	1158, 1159, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 2205, 0,
	0, 0, 0, 0, 0, 0, 2206, 219, 220, 221,
	222, 223, 1082, 224, 1083, 1084, 1085, 0, 1086, 476,
	1087, 1088, 1089, 1090, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 1091, 233, 234, 235,
	236, 237, 238, 1092, 1093, 239, 481, 482, 483, 1094,
	240, 484, 1095, 1080, 1096, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1097, 251, 0, 252,
	253, 254, 1098, 955, 255, 256, 1099, 1100, 1102, 1101,
	1103, 1104, 1105, 257, 258, 259, 260, 261, 262, 485,
	486, 1106, 263, 1107, 265, 264, 1108, 266, 1109, 1110,
	267, 268, 269, 1111, 270, 1112, 271, 272, 1113, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 1114, 216, 1115, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 1116, 290, 1117,
	1118, 956, 291, 292, 1119, 293, 491, 1120, 492, 294,
	1121, 295, 296, 297, 298, 493, 494, 495, 348, 958,
	299, 300, 1122, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1123, 957, 306, 496, 308, 307, 309, 310,
	311, 497, 1124, 498, 1125, 313, 959, 499, 960, 314,
	315, 316, 961, 317, 318, 0, 0, 319, 320, 321,
	322, 1126, 324, 323, 1127, 325, 500, 962, 326, 327,
	963, 1128, 328, 329, 1129, 1130, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	964, 343, 344, 346, 345, 1131, 218, 965, 347, 1132,
	501, 502, 349, 350, 1133, 351, 352, 353, 1134, 1135,
	355, 356, 357, 1136, 1137, 358, 359, 503, 966, 360,
	967, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 1138, 369, 370, 505, 371, 506, 372, 1139, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	1140, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 1141, 395, 968, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 1142, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 1143, 422, 402, 403, 423, 424,
	969, 425, 426, 509, 427, 428, 1144, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 1145,
	440, 441, 439, 1146, 442, 443, 444, 445, 446, 278,
	447, 1147, 448, 511, 512, 513, 514, 1148, 455, 1149,
	449, 450, 515, 451, 516, 1150, 452, 453, 454, 0,
	456, 457, 1151, 1152, 458, 459, 460, 461, 462, 464,
	1153, 465, 1154, 463, 466, 467, 468, 517, 518, 519,
	1155, 470, 469, 520, 1156, 1157, 1158, 1159, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3155, 219, 220, 221, 222, 223,
	1082, 224, 1083, 1084, 1085, 0, 1086, 476, 1087, 1088,
	1089, 1090, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 1091, 233, 234, 235, 236, 237,
	238, 1092, 1093, 239, 481, 482, 483, 1094, 240, 484,
	1095, 1080, 1096, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1097, 251, 0, 252, 253, 254,
	1098, 955, 255, 256, 1099, 1100, 1102, 1101, 1103, 1104,
	1105, 257, 258, 259, 260, 261, 262, 485, 486, 1106,
	263, 1107, 265, 264, 1108, 266, 1109, 1110, 267, 268,
	269, 1111, 270, 1112, 271, 272, 1113, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	1114, 216, 1115, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 1116, 290, 1117, 1118, 956,
	291, 292, 1119, 293, 491, 1120, 492, 294, 1121, 295,
	296, 297, 298, 493, 494, 495, 348, 958, 299, 300,
	1122, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1123, 957, 306, 496, 308, 307, 309, 310, 311, 497,
	1124, 498, 1125, 313, 959, 499, 960, 314, 315, 316,
	961, 317, 318, 0, 0, 319, 320, 321, 322, 1126,
	324, 323, 1127, 325, 500, 962, 326, 327, 963, 1128,
	328, 329, 1129, 1130, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 964, 343,
	344, 346, 345, 1131, 218, 965, 347, 1132, 501, 502,
	349, 350, 1133, 351, 352, 353, 1134, 1135, 355, 356,
	357, 1136, 1137, 358, 359, 503, 966, 360, 967, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 1138,
	369, 370, 505, 371, 506, 372, 1139, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 1140, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 1141, 395, 968, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 1142, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 1143, 422, 402, 403, 423, 424, 969, 425,
	426, 509, 427, 428, 1144, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 1145, 440, 441,
	439, 1146, 442, 443, 444, 445, 446, 278, 447, 1147,
	448, 511, 512, 513, 514, 1148, 455, 1149, 449, 450,
	515, 451, 516, 1150, 452, 453, 454, 0, 456, 457,
	1151, 1152, 458, 459, 460, 461, 462, 464, 1153, 465,
	1154, 463, 466, 467, 468, 517, 518, 519, 1155, 470,
	469, 520, 1156, 1157, 1158, 1159, 471, 472, 521, 473,
	474, 475, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3278, 0, 219,
	220, 221, 222, 223, 1082, 224, 1083, 1084, 1085, 0,
	1086, 476, 1087, 1088, 1089, 1090, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 1091, 233,
	234, 235, 236, 237, 238, 1092, 1093, 239, 481, 482,
	483, 1094, 240, 484, 1095, 1080, 1096, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1097, 251,
	0, 252, 253, 254, 1098, 955, 255, 256, 1099, 1100,
	1102, 1101, 1103, 1104, 1105, 257, 258, 259, 260, 261,
	262, 485, 486, 1106, 263, 1107, 265, 264, 1108, 266,
	1109, 1110, 267, 268, 269, 1111, 270, 1112, 271, 272,
	1113, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 1114, 216, 1115, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 1116,
	290, 1117, 1118, 956, 291, 292, 1119, 293, 491, 1120,
	492, 294, 1121, 295, 296, 297, 298, 493, 494, 495,
	348, 958, 299, 300, 1122, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1123, 957, 306, 496, 308, 307,
	309, 310, 311, 497, 1124, 498, 1125, 313, 959, 499,
	960, 314, 315, 316, 961, 317, 318, 0, 0, 319,
	320, 321, 322, 1126, 324, 323, 1127, 325, 500, 962,
	326, 327, 963, 1128, 328, 329, 1129, 1130, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 964, 343, 344, 346, 345, 1131, 218, 965,
	347, 1132, 501, 502, 349, 350, 1133, 351, 352, 353,
	1134, 1135, 355, 356, 357, 1136, 1137, 358, 359, 503,
	966, 360, 967, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 1138, 369, 370, 505, 371, 506, 372,
	1139, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 1140, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 1141, 395, 968,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 1142, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 1143, 422, 402, 403,
	423, 424, 969, 425, 426, 509, 427, 428, 1144, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 1145, 440, 441, 439, 1146, 442, 443, 444, 445,
	446, 278, 447, 1147, 448, 511, 512, 513, 514, 1148,
	455, 1149, 449, 450, 515, 451, 516, 1150, 452, 453,
	454, 0, 456, 457, 1151, 1152, 458, 459, 460, 461,
	462, 464, 1153, 465, 1154, 463, 466, 467, 468, 517,
	518, 519, 1155, 470, 469, 520, 1156, 1157, 1158, 1159,
	471, 472, 521, 473, 474, 475, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3206, 0, 219, 220, 221, 222, 223, 1082, 224,
	1083, 1084, 1085, 0, 1086, 476, 1087, 1088, 1089, 1090,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 1091, 233, 234, 235, 236, 237, 238, 1092,
	1093, 239, 481, 482, 483, 1094, 240, 484, 1095, 1080,
	1096, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1097, 251, 0, 252, 253, 254, 1098, 955,
	255, 256, 1099, 1100, 1102, 1101, 1103, 1104, 1105, 257,
	258, 259, 260, 261, 262, 485, 486, 1106, 263, 1107,
	265, 264, 1108, 266, 1109, 1110, 267, 268, 269, 1111,
	270, 1112, 271, 272, 1113, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 1114, 216,
	1115, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 1116, 290, 1117, 1118, 956, 291, 292,
	1119, 293, 491, 1120, 492, 294, 1121, 295, 296, 297,
	298, 493, 494, 495, 348, 958, 299, 300, 1122, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1123, 957,
	306, 496, 308, 307, 309, 310, 311, 497, 1124, 498,
	1125, 313, 959, 499, 960, 314, 315, 316, 961, 317,
	318, 0, 0, 319, 320, 321, 322, 1126, 324, 323,
	1127, 325, 500, 962, 326, 327, 963, 1128, 328, 329,
	1129, 1130, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 964, 343, 344, 346,
	345, 1131, 218, 965, 347, 1132, 501, 502, 349, 350,
	1133, 351, 352, 353, 1134, 1135, 355, 356, 357, 1136,
	1137, 358, 359, 503, 966, 360, 967, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 1138, 369, 370,
	505, 371, 506, 372, 1139, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 1140, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 1141, 395, 968, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 1142,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	1143, 422, 402, 403, 423, 424, 969, 425, 426, 509,
	427, 428, 1144, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 1145, 440, 441, 439, 1146,
	442, 443, 444, 445, 446, 278, 447, 1147, 448, 511,
	512, 513, 514, 1148, 455, 1149, 449, 450, 515, 451,
	516, 1150, 452, 453, 454, 0, 456, 457, 1151, 1152,
	458, 459, 460, 461, 462, 464, 1153, 465, 1154, 463,
	466, 467, 468, 517, 518, 519, 1155, 470, 469, 520,
	1156, 1157, 1158, 1159, 471, 472, 521, 473, 474, 475,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3089, 0, 219, 220, 221,
	222, 223, 1082, 224, 1083, 1084, 1085, 0, 1086, 476,
	1087, 1088, 1089, 1090, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 1091, 233, 234, 235,
	236, 237, 238, 1092, 1093, 239, 481, 482, 483, 1094,
	240, 484, 1095, 1080, 1096, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1097, 251, 0, 252,
	253, 254, 1098, 955, 255, 256, 1099, 1100, 1102, 1101,
	1103, 1104, 1105, 257, 258, 259, 260, 261, 262, 485,
	486, 1106, 263, 1107, 265, 264, 1108, 266, 1109, 1110,
	267, 268, 269, 1111, 270, 1112, 271, 272, 1113, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 1114, 216, 1115, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 1116, 290, 1117,
	1118, 956, 291, 292, 1119, 293, 491, 1120, 492, 294,
	1121, 295, 296, 297, 298, 493, 494, 495, 348, 958,
	299, 300, 1122, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1123, 957, 306, 496, 308, 307, 309, 310,
	311, 497, 1124, 498, 1125, 313, 959, 499, 960, 314,
	315, 316, 961, 317, 318, 0, 0, 319, 320, 321,
	322, 1126, 324, 323, 1127, 325, 500, 962, 326, 327,
	963, 1128, 328, 329, 1129, 1130, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	964, 343, 344, 346, 345, 1131, 218, 965, 347, 1132,
	501, 502, 349, 350, 1133, 351, 352, 353, 1134, 1135,
	355, 356, 357, 1136, 1137, 358, 359, 503, 966, 360,
	967, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 1138, 369, 370, 505, 371, 506, 372, 1139, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	1140, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 1141, 395, 968, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 1142, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 1143, 422, 402, 403, 423, 424,
	969, 425, 426, 509, 427, 428, 1144, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 1145,
	440, 441, 439, 1146, 442, 443, 444, 445, 446, 278,
	447, 1147, 448, 511, 512, 513, 514, 1148, 455, 1149,
	449, 450, 515, 451, 516, 1150, 452, 453, 454, 0,
	456, 457, 1151, 1152, 458, 459, 460, 461, 462, 464,
	1153, 465, 1154, 463, 466, 467, 468, 517, 518, 519,
	1155, 470, 469, 520, 1156, 1157, 1158, 1159, 471, 472,
	521, 473, 474, 475, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2886,
	0, 219, 220, 221, 222, 223, 1082, 224, 1083, 1084,
	1085, 0, 1086, 476, 1087, 1088, 1089, 1090, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	1091, 233, 234, 235, 236, 237, 238, 1092, 1093, 239,
	481, 482, 483, 1094, 240, 484, 1095, 1080, 1096, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1097, 251, 0, 252, 253, 254, 1098, 955, 255, 256,
	1099, 1100, 1102, 1101, 1103, 1104, 1105, 257, 258, 259,
	260, 261, 262, 485, 486, 1106, 263, 1107, 265, 264,
	1108, 266, 1109, 1110, 267, 268, 269, 1111, 270, 1112,
	271, 272, 1113, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 1114, 216, 1115, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 1116, 290, 1117, 1118, 956, 291, 292, 1119, 293,
	491, 1120, 492, 294, 1121, 295, 296, 297, 298, 493,
	494, 495, 348, 958, 299, 300, 1122, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1123, 957, 306, 496,
	308, 307, 309, 310, 311, 497, 1124, 498, 1125, 313,
	959, 499, 960, 314, 315, 316, 961, 317, 318, 0,
	0, 319, 320, 321, 322, 1126, 324, 323, 1127, 325,
	500, 962, 326, 327, 963, 1128, 328, 329, 1129, 1130,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 964, 343, 344, 346, 345, 1131,
	218, 965, 347, 1132, 501, 502, 349, 350, 1133, 351,
	352, 353, 1134, 1135, 355, 356, 357, 1136, 1137, 358,
	359, 503, 966, 360, 967, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 1138, 369, 370, 505, 371,
	506, 372, 1139, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 1140, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 1141,
	395, 968, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 1142, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 1143, 422,
	402, 403, 423, 424, 969, 425, 426, 509, 427, 428,
	1144, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 1145, 440, 441, 439, 1146, 442, 443,
	444, 445, 446, 278, 447, 1147, 448, 511, 512, 513,
	514, 1148, 455, 1149, 449, 450, 515, 451, 516, 1150,
	452, 453, 454, 0, 456, 457, 1151, 1152, 458, 459,
	460, 461, 462, 464, 1153, 465, 1154, 463, 466, 467,
	468, 517, 518, 519, 1155, 470, 469, 520, 1156, 1157,
	1158, 1159, 471, 472, 521, 473, 474, 475, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2878, 0, 219, 220, 221, 222, 223,
	1082, 224, 1083, 1084, 1085, 0, 1086, 476, 1087, 1088,
	1089, 1090, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 1091, 233, 234, 235, 236, 237,
	238, 1092, 1093, 239, 481, 482, 483, 1094, 240, 484,
	1095, 1080, 1096, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1097, 251, 0, 252, 253, 254,
	1098, 955, 255, 256, 1099, 1100, 1102, 1101, 1103, 1104,
	1105, 257, 258, 259, 260, 261, 262, 485, 486, 1106,
	263, 1107, 265, 264, 1108, 266, 1109, 1110, 267, 268,
	269, 1111, 270, 1112, 271, 272, 1113, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	1114, 216, 1115, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 1116, 290, 1117, 1118, 956,
	291, 292, 1119, 293, 491, 1120, 492, 294, 1121, 295,
	296, 297, 298, 493, 494, 495, 348, 958, 299, 300,
	1122, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1123, 957, 306, 496, 308, 307, 309, 310, 311, 497,
	1124, 498, 1125, 313, 959, 499, 960, 314, 315, 316,
	961, 317, 318, 0, 0, 319, 320, 321, 322, 1126,
	324, 323, 1127, 325, 500, 962, 326, 327, 963, 1128,
	328, 329, 1129, 1130, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 964, 343,
	344, 346, 345, 1131, 218, 965, 347, 1132, 501, 502,
	349, 350, 1133, 351, 352, 353, 1134, 1135, 355, 356,
	357, 1136, 1137, 358, 359, 503, 966, 360, 967, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 1138,
	369, 370, 505, 371, 506, 372, 1139, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 1140, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 1141, 395, 968, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 1142, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 1143, 422, 402, 403, 423, 424, 969, 425,
	426, 509, 427, 428, 1144, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 1145, 440, 441,
	439, 1146, 442, 443, 444, 445, 446, 278, 447, 1147,
	448, 511, 512, 513, 514, 1148, 455, 1149, 449, 450,
	515, 451, 516, 1150, 452, 453, 454, 0, 456, 457,
	1151, 1152, 458, 459, 460, 461, 462, 464, 1153, 465,
	1154, 463, 466, 467, 468, 517, 518, 519, 1155, 470,
	469, 520, 1156, 1157, 1158, 1159, 471, 472, 521, 473,
	474, 475, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2744, 0, 219,
	220, 221, 222, 223, 1082, 224, 1083, 1084, 1085, 0,
	1086, 476, 1087, 1088, 1089, 1090, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 1091, 233,
	234, 235, 236, 237, 238, 1092, 1093, 239, 481, 482,
	483, 1094, 240, 484, 1095, 1080, 1096, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1097, 251,
	0, 252, 253, 254, 1098, 955, 255, 256, 1099, 1100,
	1102, 1101, 1103, 1104, 1105, 257, 258, 259, 260, 261,
	262, 485, 486, 1106, 263, 1107, 265, 264, 1108, 266,
	1109, 1110, 267, 268, 269, 1111, 270, 1112, 271, 272,
	1113, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 1114, 216, 1115, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 1116,
	290, 1117, 1118, 956, 291, 292, 1119, 293, 491, 1120,
	492, 294, 1121, 295, 296, 297, 298, 493, 494, 495,
	348, 958, 299, 300, 1122, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1123, 957, 306, 496, 308, 307,
	309, 310, 311, 497, 1124, 498, 1125, 313, 959, 499,
	960, 314, 315, 316, 961, 317, 318, 0, 0, 319,
	320, 321, 322, 1126, 324, 323, 1127, 325, 500, 962,
	326, 327, 963, 1128, 328, 329, 1129, 1130, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 964, 343, 344, 346, 345, 1131, 218, 965,
	347, 1132, 501, 502, 349, 350, 1133, 351, 352, 353,
	1134, 1135, 355, 356, 357, 1136, 1137, 358, 359, 503,
	966, 360, 967, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 1138, 369, 370, 505, 371, 506, 372,
	1139, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 1140, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 1141, 395, 968,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 1142, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 1143, 422, 402, 403,
	423, 424, 969, 425, 426, 509, 427, 428, 1144, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 1145, 440, 441, 439, 1146, 442, 443, 444, 445,
	446, 278, 447, 1147, 448, 511, 512, 513, 514, 1148,
	455, 1149, 449, 450, 515, 451, 516, 1150, 452, 453,
	454, 0, 456, 457, 1151, 1152, 458, 459, 460, 461,
	462, 464, 1153, 465, 1154, 463, 466, 467, 468, 517,
	518, 519, 1155, 470, 469, 520, 1156, 1157, 1158, 1159,
	471, 472, 521, 473, 474, 475, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2097, 0, 219, 220, 221, 222, 223, 1082, 224,
	1083, 1084, 1085, 0, 1086, 476, 1087, 1088, 1089, 1090,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 1091, 233, 234, 235, 236, 237, 238, 1092,
	1093, 239, 481, 482, 483, 1094, 240, 484, 1095, 1080,
	1096, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1097, 251, 0, 252, 253, 254, 1098, 955,
	255, 256, 1099, 1100, 1102, 1101, 1103, 1104, 1105, 257,
	258, 259, 260, 261, 262, 485, 486, 1106, 263, 1107,
	265, 264, 1108, 266, 1109, 1110, 267, 268, 269, 1111,
	270, 1112, 271, 272, 1113, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 1114, 216,
	1115, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 1116, 290, 1117, 1118, 956, 291, 292,
	1119, 293, 491, 1120, 492, 294, 1121, 295, 296, 297,
	298, 493, 494, 495, 348, 958, 299, 300, 1122, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1123, 957,
	306, 496, 308, 307, 309, 310, 311, 497, 1124, 498,
	1125, 313, 959, 499, 960, 314, 315, 316, 961, 317,
	318, 0, 0, 319, 320, 321, 322, 1126, 324, 323,
	1127, 325, 500, 962, 326, 327, 963, 1128, 328, 329,
	1129, 1130, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 964, 343, 344, 346,
	345, 1131, 218, 965, 347, 1132, 501, 502, 349, 350,
	1133, 351, 352, 353, 1134, 1135, 355, 356, 357, 1136,
	1137, 358, 359, 503, 966, 360, 967, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 1138, 369, 370,
	505, 371, 506, 372, 1139, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 1140, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 1141, 395, 968, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 1142,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	1143, 422, 402, 403, 423, 424, 969, 425, 426, 509,
	427, 428, 1144, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 1145, 440, 441, 439, 1146,
	442, 443, 444, 445, 446, 278, 447, 1147, 448, 511,
	512, 513, 514, 1148, 455, 1149, 449, 450, 515, 451,
	516, 1150, 452, 453, 454, 0, 456, 457, 1151, 1152,
	458, 459, 460, 461, 462, 464, 1153, 465, 1154, 463,
	466, 467, 468, 517, 518, 519, 1155, 470, 469, 520,
	1156, 1157, 1158, 1159, 471, 472, 521, 473, 474, 475,
	1183, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1808, 0, 0, 0, 219,
	220, 221, 222, 223, 1082, 224, 1083, 1084, 1085, 0,
	1086, 476, 1087, 1088, 1089, 1090, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 1091, 233,
	234, 235, 236, 237, 238, 1092, 1093, 239, 481, 482,
	483, 1094, 240, 484, 1095, 1080, 1096, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1097, 251,
	0, 252, 253, 254, 1098, 955, 255, 256, 1099, 1100,
	1102, 1101, 1103, 1104, 1105, 257, 258, 259, 260, 261,
	262, 485, 486, 1106, 263, 1107, 265, 264, 1108, 266,
	1109, 1110, 267, 268, 269, 1111, 270, 1112, 271, 272,
	1113, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 1114, 216, 1115, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 1116,
	290, 1117, 1118, 956, 291, 292, 1119, 293, 491, 1120,
	492, 294, 1121, 295, 296, 297, 298, 493, 494, 495,
	348, 958, 299, 300, 1122, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1123, 957, 306, 496, 308, 307,
	309, 310, 311, 497, 1124, 498, 1125, 313, 959, 499,
	960, 314, 315, 316, 961, 317, 318, 0, 0, 319,
	320, 321, 322, 1126, 324, 323, 1127, 325, 500, 962,
	326, 327, 963, 1128, 328, 329, 1129, 1130, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 964, 343, 344, 346, 345, 1131, 218, 965,
	347, 1132, 501, 502, 349, 350, 1133, 351, 352, 353,
	1134, 1135, 355, 356, 357, 1136, 1137, 358, 359, 503,
	966, 360, 967, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 1138, 369, 370, 505, 371, 506, 372,
	1139, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 1140, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 1141, 395, 968,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 1142, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 1143, 422, 402, 403,
	423, 424, 969, 425, 426, 509, 427, 428, 1144, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 1145, 440, 441, 439, 1146, 442, 443, 444, 445,
	446, 278, 447, 1147, 448, 511, 512, 513, 514, 1148,
	455, 1149, 449, 450, 515, 451, 516, 1150, 452, 453,
	454, 0, 456, 457, 1151, 1152, 458, 459, 460, 461,
	462, 464, 1153, 465, 1154, 463, 466, 467, 468, 517,
	518, 519, 1155, 470, 469, 520, 1156, 1157, 1158, 1159,
	471, 472, 521, 473, 474, 475, 1072, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	1082, 224, 1083, 1084, 1085, 0, 1086, 476, 1087, 1088,
	1089, 1090, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 1091, 233, 234, 235, 236, 237,
	238, 1092, 1093, 239, 481, 482, 483, 1094, 240, 484,
	1095, 1080, 1096, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1097, 251, 0, 252, 253, 254,
	1098, 955, 255, 256, 1099, 1100, 1102, 1101, 1103, 1104,
	1105, 257, 258, 259, 260, 261, 262, 485, 486, 1106,
	263, 1107, 265, 264, 1108, 266, 1109, 1110, 267, 268,
	269, 1111, 270, 1112, 271, 272, 1113, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	1114, 216, 1115, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 1116, 290, 1117, 1118, 956,
	291, 292, 1119, 293, 491, 1120, 492, 294, 1121, 295,
	296, 297, 298, 493, 494, 495, 348, 958, 299, 300,
	1122, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1123, 957, 306, 496, 308, 307, 309, 310, 311, 497,
	1124, 498, 1125, 313, 959, 499, 960, 314, 315, 316,
	961, 317, 318, 0, 0, 319, 320, 321, 322, 1126,
	324, 323, 1127, 325, 500, 962, 326, 327, 963, 1128,
	328, 329, 1129, 1130, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 964, 343,
	344, 346, 345, 1131, 218, 965, 347, 1132, 501, 502,
	349, 350, 1133, 351, 352, 353, 1134, 1135, 355, 356,
	357, 1136, 1137, 358, 359, 503, 966, 360, 967, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 1138,
	369, 370, 505, 371, 506, 372, 1139, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 1140, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 1141, 395, 968, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 1142, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 1143, 422, 402, 403, 423, 424, 969, 425,
	426, 509, 427, 428, 1144, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 1145, 440, 441,
	439, 1146, 442, 443, 444, 445, 446, 278, 447, 1147,
	448, 511, 512, 513, 514, 1148, 455, 1149, 449, 450,
	515, 451, 516, 1150, 452, 453, 454, 0, 456, 457,
	1151, 1152, 458, 459, 460, 461, 462, 464, 1153, 465,
	1154, 463, 466, 467, 468, 517, 518, 519, 1155, 470,
	469, 520, 1156, 1157, 1158, 1159, 471, 472, 521, 473,
	474, 475, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 1082, 224, 1083, 1084, 1085, 0,
	1086, 476, 1087, 1088, 1089, 1090, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 1091, 233,
	234, 235, 236, 237, 238, 1092, 1093, 239, 481, 482,
	483, 1094, 240, 484, 1095, 1080, 1096, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1097, 251,
	0, 252, 253, 254, 1098, 955, 255, 256, 1099, 1100,
	1102, 1101, 1103, 1104, 1105, 257, 258, 259, 260, 261,
	262, 485, 486, 1106, 263, 1107, 265, 264, 1108, 266,
	1109, 1110, 267, 268, 269, 1111, 270, 1112, 271, 272,
	1113, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 1114, 216, 1115, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 1116,
	290, 1117, 1118, 956, 291, 292, 1119, 293, 491, 1120,
	492, 294, 1121, 295, 296, 297, 298, 493, 494, 495,
	348, 958, 299, 300, 1122, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1123, 957, 306, 496, 308, 307,
	309, 310, 311, 497, 1124, 498, 1125, 313, 959, 499,
	960, 314, 315, 316, 961, 317, 318, 0, 0, 319,
	320, 321, 322, 1126, 324, 323, 1127, 325, 500, 962,
	326, 327, 963, 1128, 328, 329, 1129, 1130, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 964, 343, 344, 346, 345, 1131, 218, 965,
	347, 1132, 501, 502, 349, 350, 1133, 351, 352, 353,
	1134, 1135, 355, 356, 357, 1136, 1137, 358, 359, 503,
	966, 360, 967, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 1138, 369, 370, 505, 371, 506, 372,
	1139, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 1140, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 1141, 395, 968,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 1142, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 1143, 422, 402, 403,
	423, 424, 969, 425, 426, 509, 427, 428, 1144, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 1145, 440, 441, 439, 1146, 442, 443, 444, 445,
	446, 278, 447, 1147, 448, 511, 512, 513, 514, 1148,
	455, 1149, 449, 450, 515, 451, 516, 1150, 452, 453,
	454, 0, 456, 457, 1151, 1152, 458, 459, 460, 461,
	462, 464, 1153, 465, 1154, 463, 466, 467, 468, 517,
	518, 519, 1155, 470, 469, 520, 1156, 1157, 1158, 1159,
	471, 472, 521, 473, 474, 475, 2073, 0, 897, 854,
	855, 856, 852, 853, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	2070, 224, 0, 0, 0, 0, 0, 946, 871, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 912, 891,
	923, 881, 922, 921, 0, 233, 883, 882, 236, 237,
	238, 873, 945, 239, 981, 982, 483, 0, 240, 952,
	0, 935, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 938, 936, 937, 942, 940, 939,
	941, 257, 258, 259, 260, 926, 262, 919, 918, 843,
	263, 0, 265, 264, 0, 266, 2071, 0, 267, 917,
	269, 0, 270, 0, 271, 272, 0, 273, 849, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 972, 973,
	862, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	916, 914, 915, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 979, 0, 872, 294, 0, 295,
	296, 297, 298, 947, 948, 951, 348, 958, 299, 300,
	0, 301, 302, 893, 0, 0, 217, 303, 305, 312,
	0, 957, 306, 905, 896, 907, 909, 910, 911, 906,
	0, 898, 0, 313, 959, 949, 960, 314, 315, 316,
	961, 931, 932, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 980, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 885, 340, 964, 343,
	344, 346, 345, 840, 218, 965, 347, 863, 950, 920,
	349, 350, 0, 894, 352, 895, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 974,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 975, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 913, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	850, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 886, 887, 889, 890, 413, 419,
	420, 421, 943, 422, 402, 403, 423, 424, 969, 425,
	426, 908, 888, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 954, 434, 435, 436, 976, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 884, 0,
	448, 927, 928, 929, 930, 0, 455, 0, 449, 450,
	977, 451, 978, 861, 452, 453, 454, 0, 456, 457,
	0, 844, 458, 459, 460, 461, 462, 464, 944, 465,
	0, 892, 466, 467, 468, 517, 924, 971, 2069, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 841, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 837, 838, 2072, 0, 0,
	0, 0, 0, 0, 867, 2068, 0, 830, 865, 897,
	854, 855, 856, 852, 853, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 946, 871,
	0, 0, 0, 225, 227, 226, 228, 229, 477, 912,
	891, 923, 881, 922, 921, 0, 233, 883, 882, 236,
	237, 238, 873, 945, 239, 981, 982, 483, 0, 240,
	952, 0, 935, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 955, 255, 256, 938, 936, 937, 942, 940,
	939, 941, 257, 258, 259, 260, 926, 262, 919, 918,
	843, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	917, 269, 0, 270, 0, 271, 272, 0, 273, 849,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 972,
	973, 862, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 916, 914, 915, 0, 289, 0, 290, 0, 0,
	956, 291, 292, 0, 293, 979, 0, 872, 294, 0,
	295, 296, 297, 298, 947, 948, 951, 348, 958, 299,
	300, 0, 301, 302, 893, 0, 0, 217, 303, 305,
	312, 0, 957, 306, 905, 896, 907, 909, 910, 911,
	906, 0, 898, 0, 313, 959, 949, 960, 314, 315,
	316, 961, 931, 932, 0, 0, 319, 320, 321, 322,
	0, 324, 323, 0, 325, 980, 962, 326, 327, 963,
	0, 328, 329, 0, 0, 330, 331, 332, 0, 333,
	334, 336, 338, 335, 337, 339, 341, 885, 340, 964,
	343, 344, 346, 345, 840, 218, 965, 347, 863, 950,
	920, 349, 350, 0, 894, 352, 895, 0, 0, 355,
	356, 357, 0, 0, 358, 359, 503, 966, 360, 967,
	974, 361, 354, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 370, 975, 371, 506, 372, 0, 373, 0,
	374, 375, 376, 377, 378, 379, 913, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 390, 387,
	391, 392, 393, 394, 0, 395, 968, 396, 397, 398,
	399, 850, 400, 0, 401, 405, 406, 407, 408, 409,
	410, 411, 182, 417, 418, 886, 887, 889, 890, 413,
	419, 420, 421, 943, 422, 402, 403, 423, 424, 969,
	425, 426, 908, 888, 428, 0, 429, 430, 431, 432,
	404, 433, 437, 954, 434, 435, 436, 976, 0, 440,
	441, 439, 184, 442, 443, 444, 445, 446, 278, 884,
	0, 448, 927, 928, 929, 930, 0, 455, 0, 449,
	450, 977, 451, 978, 861, 452, 453, 454, 0, 456,
	457, 0, 844, 458, 459, 460, 461, 462, 464, 944,
	465, 0, 892, 466, 467, 468, 1322, 924, 971, 0,
	470, 469, 520, 0, 0, 0, 176, 471, 472, 521,
	473, 474, 475, 841, 177, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 837, 838, 897, 854,
	855, 856, 852, 853, 866, 1532, 1530, 0, 0, 865,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 946, 871, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 912, 891,
	923, 881, 922, 921, 0, 233, 883, 882, 236, 237,
	238, 873, 945, 239, 981, 982, 483, 0, 240, 952,
	0, 935, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 938, 936, 937, 942, 940, 939,
	941, 257, 258, 259, 260, 926, 262, 919, 918, 843,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 917,
	269, 0, 270, 0, 271, 272, 0, 273, 849, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 972, 973,
	862, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	916, 914, 915, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 979, 0, 872, 294, 0, 295,
	296, 297, 298, 947, 948, 951, 348, 958, 299, 300,
	0, 301, 302, 893, 0, 0, 217, 303, 305, 312,
	0, 957, 306, 905, 896, 907, 909, 910, 911, 906,
	0, 898, 0, 313, 959, 949, 960, 314, 315, 316,
	961, 931, 932, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 980, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 885, 340, 964, 343,
	344, 346, 345, 840, 218, 965, 347, 863, 950, 920,
	349, 350, 0, 894, 352, 895, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 974,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 975, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 913, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	850, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 182, 417, 418, 886, 887, 889, 890, 413, 419,
	420, 421, 943, 422, 402, 403, 423, 424, 969, 425,
	426, 908, 888, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 954, 434, 435, 436, 976, 0, 440, 441,
	439, 184, 442, 443, 444, 445, 446, 278, 884, 0,
	448, 927, 928, 929, 930, 0, 455, 0, 449, 450,
	977, 451, 978, 861, 452, 453, 454, 0, 456, 457,
	0, 844, 458, 459, 460, 461, 462, 464, 944, 465,
	0, 892, 466, 467, 468, 1322, 924, 971, 0, 470,
	469, 520, 0, 0, 0, 176, 471, 472, 521, 473,
	474, 475, 841, 177, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 837, 838, 897, 854, 855,
	856, 852, 853, 866, 1532, 2503, 0, 0, 865, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 946, 871, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 912, 891, 923,
	881, 922, 921, 0, 233, 883, 882, 236, 237, 238,
	873, 945, 239, 981, 982, 483, 0, 240, 952, 0,
	935, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	955, 255, 256, 938, 936, 937, 942, 940, 939, 941,
	257, 258, 259, 260, 926, 262, 919, 918, 843, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 917, 269,
	0, 270, 0, 271, 272, 0, 273, 849, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 972, 973, 862,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 916,
	914, 915, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 979, 0, 872, 294, 0, 295, 296,
	297, 298, 947, 948, 951, 348, 958, 299, 300, 0,
	301, 302, 893, 0, 0, 217, 303, 305, 312, 0,
	957, 306, 905, 896, 907, 909, 910, 911, 906, 0,
	898, 0, 313, 959, 949, 960, 314, 315, 316, 961,
	931, 932, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 980, 962, 326, 327, 963, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 885, 340, 964, 343, 344,
	346, 345, 840, 218, 965, 347, 863, 950, 920, 349,
	350, 0, 894, 352, 895, 0, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 974, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 975, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 913, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 850,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	182, 417, 418, 886, 887, 889, 890, 413, 419, 420,
	421, 943, 422, 402, 403, 423, 424, 969, 425, 426,
	908, 888, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 954, 434, 435, 436, 976, 0, 440, 441, 439,
	184, 442, 443, 444, 445, 446, 278, 884, 0, 448,
	927, 928, 929, 930, 0, 455, 0, 449, 450, 977,
	451, 978, 861, 452, 453, 454, 0, 456, 457, 0,
	844, 458, 459, 460, 461, 462, 464, 944, 465, 0,
	892, 466, 467, 468, 1322, 924, 971, 0, 470, 469,
	520, 0, 0, 0, 176, 471, 472, 521, 473, 474,
	475, 841, 177, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 837, 838, 897, 854, 855, 856,
	852, 853, 866, 1532, 1530, 0, 0, 865, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 946, 871, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 912, 891, 923, 881,
	922, 921, 2159, 233, 883, 882, 236, 237, 238, 873,
	945, 239, 981, 982, 483, 0, 240, 952, 0, 935,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 955,
	255, 256, 938, 936, 937, 942, 940, 939, 941, 257,
	258, 259, 260, 926, 262, 919, 918, 843, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 917, 269, 0,
	270, 0, 271, 272, 0, 273, 849, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 972, 973, 862, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 916, 914,
	915, 0, 289, 0, 290, 0, 2164, 956, 291, 292,
	0, 293, 979, 0, 872, 294, 0, 295, 296, 297,
	298, 947, 948, 951, 348, 958, 299, 300, 0, 301,
	302, 893, 0, 0, 217, 303, 305, 312, 0, 957,
	306, 905, 896, 907, 909, 910, 911, 906, 0, 898,
	0, 313, 959, 949, 960, 314, 315, 316, 961, 931,
	932, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	2160, 325, 980, 962, 326, 327, 963, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 885, 340, 964, 343, 344, 346,
	345, 840, 218, 965, 347, 863, 950, 920, 349, 350,
	0, 894, 352, 895, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 966, 360, 967, 974, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	975, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 913, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 968, 396, 397, 398, 399, 850, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 886, 887, 889, 890, 413, 419, 420, 421,
	943, 422, 402, 403, 423, 424, 969, 425, 426, 908,
	888, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	954, 434, 435, 436, 976, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 884, 0, 448, 927,
	928, 929, 930, 0, 455, 2161, 449, 450, 977, 451,
	978, 861, 452, 453, 454, 0, 456, 457, 0, 844,
	458, 459, 460, 461, 462, 464, 944, 465, 0, 892,
	466, 467, 468, 517, 924, 971, 0, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	841, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 0, 0, 837, 838, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 1387, 865, 897, 854, 855,
	856, 852, 853, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 946, 871, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 912, 891, 923,
	881, 922, 921, 0, 233, 883, 882, 236, 237, 238,
	873, 945, 239, 981, 982, 483, 0, 240, 952, 0,
	935, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	955, 255, 256, 938, 936, 937, 942, 940, 939, 941,
	257, 258, 259, 260, 926, 262, 919, 918, 843, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 917, 269,
	0, 270, 0, 271, 272, 0, 273, 849, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 972, 973, 862,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 916,
	914, 915, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 979, 0, 872, 294, 0, 295, 296,
	297, 298, 947, 948, 951, 348, 958, 299, 300, 0,
	301, 302, 893, 0, 0, 217, 303, 305, 312, 0,
	957, 306, 905, 896, 907, 909, 910, 911, 906, 0,
	898, 0, 313, 959, 949, 960, 314, 315, 316, 961,
	931, 932, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 980, 962, 326, 327, 963, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 885, 340, 964, 343, 344,
	346, 345, 840, 218, 965, 347, 863, 950, 920, 349,
	350, 0, 894, 352, 895, 0, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 974, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 975, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 913, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 850,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	0, 417, 418, 886, 887, 889, 890, 413, 419, 420,
	421, 943, 422, 402, 403, 423, 424, 969, 425, 426,
	908, 888, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 954, 434, 435, 436, 976, 0, 440, 441, 439,
	0, 442, 443, 444, 445, 446, 278, 884, 0, 448,
	927, 928, 929, 930, 0, 455, 0, 449, 450, 977,
	451, 978, 861, 452, 453, 454, 0, 456, 457, 0,
	844, 458, 459, 460, 461, 462, 464, 944, 465, 0,
	892, 466, 467, 468, 517, 924, 971, 0, 470, 469,
	520, 1386, 0, 0, 0, 471, 472, 521, 473, 474,
	475, 841, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 837, 838, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 833, 865, 897, 854,
	855, 856, 852, 853, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 946, 871, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 912, 891,
	923, 881, 922, 921, 0, 233, 883, 882, 236, 237,
	238, 873, 945, 239, 981, 982, 483, 0, 240, 952,
	0, 935, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 938, 936, 937, 942, 940, 939,
	941, 257, 258, 259, 260, 926, 262, 919, 918, 843,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 917,
	269, 0, 270, 0, 271, 272, 0, 273, 849, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 972, 973,
	862, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	916, 914, 915, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 979, 0, 872, 294, 0, 295,
	296, 297, 298, 947, 948, 951, 348, 958, 299, 300,
	0, 301, 302, 893, 0, 0, 217, 303, 305, 312,
	0, 957, 306, 905, 896, 907, 909, 910, 911, 906,
	0, 898, 0, 313, 959, 949, 960, 314, 315, 316,
	961, 931, 932, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 980, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 885, 340, 964, 343,
	344, 346, 345, 840, 218, 965, 347, 863, 950, 920,
	349, 350, 0, 894, 352, 895, 845, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 974,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 975, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 913, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	850, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 886, 887, 889, 890, 413, 419,
	420, 421, 943, 422, 402, 403, 423, 424, 969, 425,
	426, 908, 888, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 954, 434, 435, 436, 976, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 884, 0,
	448, 927, 928, 929, 930, 0, 455, 0, 449, 450,
	977, 451, 978, 861, 452, 453, 454, 0, 456, 457,
	0, 844, 458, 459, 460, 461, 462, 464, 944, 465,
	0, 892, 466, 467, 468, 517, 924, 971, 0, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 841, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 837, 838, 897, 854, 855,
	856, 852, 853, 866, 867, 0, 0, 0, 865, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 946, 871, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 912, 891, 923,
	881, 922, 921, 0, 233, 883, 882, 236, 237, 238,
	873, 945, 239, 981, 982, 483, 0, 240, 952, 0,
	935, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 3483, 254, 0,
	955, 255, 256, 938, 936, 937, 942, 940, 939, 941,
	257, 258, 259, 260, 926, 262, 919, 918, 843, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 917, 269,
	0, 270, 0, 271, 272, 0, 273, 849, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 972, 973, 862,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 916,
	914, 915, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 979, 0, 872, 294, 0, 295, 296,
	297, 298, 947, 948, 951, 348, 958, 299, 300, 0,
	301, 302, 893, 0, 0, 217, 303, 305, 312, 0,
	957, 306, 905, 896, 907, 909, 910, 911, 906, 0,
	898, 0, 313, 959, 949, 960, 314, 315, 316, 961,
	931, 932, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 980, 962, 326, 327, 963, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 885, 340, 964, 343, 344,
	346, 345, 840, 218, 965, 347, 863, 950, 920, 349,
	350, 0, 894, 352, 895, 845, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 974, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 975, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 913, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 850,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	0, 417, 418, 886, 887, 889, 890, 413, 419, 420,
	421, 943, 422, 402, 403, 423, 424, 969, 425, 426,
	908, 888, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 954, 434, 435, 436, 976, 0, 440, 441, 439,
	0, 442, 443, 444, 445, 446, 278, 884, 0, 448,
	927, 928, 929, 930, 0, 455, 0, 449, 450, 977,
	451, 978, 861, 452, 453, 454, 0, 456, 457, 0,
	844, 458, 459, 460, 461, 462, 464, 944, 465, 0,
	892, 466, 467, 468, 517, 924, 971, 0, 470, 469,
	520, 0, 0, 0, 0, 471, 472, 521, 473, 474,
	475, 841, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 837, 838, 897, 854, 855, 856,
	852, 853, 866, 867, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 946, 871, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 912, 891, 923, 881,
	922, 921, 0, 233, 883, 882, 236, 237, 238, 873,
	945, 239, 981, 982, 483, 0, 240, 952, 0, 935,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 3335, 254, 0, 955,
	255, 256, 938, 936, 937, 942, 940, 939, 941, 257,
	258, 259, 260, 926, 262, 919, 918, 843, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 917, 269, 0,
	270, 0, 271, 272, 0, 273, 849, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 972, 973, 862, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 916, 914,
	915, 0, 289, 0, 290, 0, 0, 956, 291, 292,
	0, 293, 979, 0, 872, 294, 0, 295, 296, 297,
	298, 947, 948, 951, 348, 958, 299, 300, 0, 301,
	302, 893, 0, 0, 217, 303, 305, 312, 0, 957,
	306, 905, 896, 907, 909, 910, 911, 906, 0, 898,
	0, 313, 959, 949, 960, 314, 315, 316, 961, 931,
	932, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 980, 962, 326, 327, 963, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 885, 340, 964, 343, 344, 346,
	345, 840, 218, 965, 347, 863, 950, 920, 349, 350,
	0, 894, 352, 895, 845, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 966, 360, 967, 974, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	975, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 913, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 968, 396, 397, 398, 399, 850, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 886, 887, 889, 890, 413, 419, 420, 421,
	943, 422, 402, 403, 423, 424, 969, 425, 426, 908,
	888, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	954, 434, 435, 436, 976, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 884, 0, 448, 927,
	928, 929, 930, 0, 455, 0, 449, 450, 977, 451,
	978, 861, 452, 453, 454, 0, 456, 457, 0, 844,
	458, 459, 460, 461, 462, 464, 944, 465, 0, 892,
	466, 467, 468, 517, 924, 971, 0, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	841, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 0, 0, 837, 838, 897, 854, 855, 856, 852,
	853, 866, 867, 0, 0, 0, 865, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 946, 871, 0, 0, 0, 225,
	227, 226, 228, 229, 477, 912, 891, 923, 881, 922,
	921, 0, 233, 883, 882, 236, 237, 238, 873, 945,
	239, 981, 982, 483, 0, 240, 952, 0, 935, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 955, 255,
	256, 938, 936, 937, 942, 940, 939, 941, 257, 258,
	259, 260, 926, 262, 919, 918, 843, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 917, 269, 0, 270,
	0, 271, 272, 0, 273, 849, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 972, 973, 862, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 916, 914, 915,
	0, 289, 0, 290, 0, 0, 956, 291, 292, 0,
	293, 979, 0, 872, 294, 0, 295, 296, 297, 298,
	947, 948, 951, 348, 958, 299, 300, 0, 301, 302,
	893, 0, 0, 217, 303, 305, 312, 0, 957, 306,
	905, 896, 907, 909, 910, 911, 906, 0, 898, 0,
	313, 959, 949, 960, 314, 315, 316, 961, 931, 932,
	0, 0, 319, 320, 321, 322, 0, 324, 323, 0,
	325, 980, 962, 326, 327, 963, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 885, 340, 964, 343, 344, 346, 345,
	840, 3059, 965, 347, 863, 950, 920, 349, 350, 0,
	894, 352, 895, 0, 0, 355, 356, 357, 0, 0,
	358, 359, 503, 966, 360, 967, 974, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 975,
	371, 506, 372, 0, 373, 0, 374, 375, 376, 377,
	378, 379, 913, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 968, 396, 397, 398, 399, 850, 400, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 0, 417,
	418, 886, 887, 889, 890, 413, 419, 420, 421, 943,
	422, 402, 403, 423, 424, 969, 425, 426, 908, 888,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 954,
	434, 435, 436, 976, 0, 440, 441, 439, 0, 442,
	443, 444, 445, 446, 278, 884, 0, 448, 927, 928,
	929, 930, 0, 455, 0, 449, 450, 977, 451, 978,
	861, 452, 453, 454, 0, 456, 457, 0, 844, 458,
	459, 460, 461, 462, 464, 944, 465, 0, 892, 466,
	467, 468, 517, 924, 971, 0, 470, 469, 520, 0,
	0, 0, 0, 471, 472, 521, 473, 474, 475, 841,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 0, 837, 838, 1592, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 865, 897, 854, 855, 856,
	852, 853, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 946, 871, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 912, 891, 923, 881,
	922, 921, 0, 233, 883, 882, 236, 237, 238, 873,
	945, 239, 981, 982, 483, 0, 240, 952, 0, 935,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 955,
	255, 256, 938, 936, 937, 942, 940, 939, 941, 257,
	258, 259, 260, 926, 262, 919, 918, 843, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 917, 269, 0,
	270, 0, 271, 272, 0, 273, 849, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 972, 973, 862, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 916, 914,
	915, 0, 289, 0, 290, 0, 0, 956, 291, 292,
	0, 293, 979, 0, 872, 294, 0, 295, 296, 297,
	298, 947, 948, 951, 348, 958, 299, 300, 0, 301,
	302, 893, 0, 0, 217, 303, 305, 312, 0, 957,
	306, 905, 896, 907, 909, 910, 911, 906, 0, 898,
	0, 313, 959, 949, 960, 314, 315, 316, 961, 931,
	932, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 980, 962, 326, 327, 963, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 885, 340, 964, 343, 344, 346,
	345, 840, 218, 965, 347, 863, 950, 920, 349, 350,
	0, 894, 352, 895, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 966, 360, 967, 974, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	975, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 913, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 968, 396, 397, 398, 399, 850, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 886, 887, 889, 890, 413, 419, 420, 421,
	943, 422, 402, 403, 423, 424, 969, 425, 426, 908,
	888, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	954, 434, 435, 436, 976, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 884, 0, 448, 927,
	928, 929, 930, 0, 455, 0, 449, 450, 977, 451,
	978, 861, 452, 453, 454, 0, 456, 457, 0, 844,
	458, 459, 460, 461, 462, 464, 944, 465, 0, 892,
	466, 467, 468, 517, 924, 971, 2865, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	841, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 0, 0, 837, 838, 897, 854, 855, 856, 852,
	853, 866, 867, 0, 0, 0, 865, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 946, 871, 0, 0, 0, 225,
	227, 226, 228, 229, 477, 912, 891, 923, 881, 922,
	921, 0, 233, 883, 882, 236, 237, 238, 873, 945,
	239, 981, 982, 483, 0, 240, 952, 0, 935, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 955, 255,
	256, 938, 936, 937, 942, 940, 939, 941, 257, 258,
	259, 260, 926, 262, 919, 918, 843, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 917, 269, 0, 270,
	0, 271, 272, 0, 273, 849, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 972, 973, 862, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 916, 914, 915,
	0, 289, 0, 290, 0, 0, 956, 291, 292, 0,
	293, 979, 0, 872, 294, 0, 295, 296, 297, 298,
	947, 948, 951, 348, 958, 299, 300, 0, 301, 302,
	893, 0, 0, 1987, 303, 305, 312, 0, 957, 306,
	905, 896, 907, 909, 910, 911, 906, 0, 898, 0,
	313, 959, 949, 960, 314, 315, 316, 961, 931, 932,
	0, 0, 319, 320, 321, 322, 0, 324, 323, 0,
	325, 980, 962, 326, 327, 963, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 885, 340, 964, 343, 344, 346, 345,
	840, 218, 965, 347, 863, 950, 920, 349, 350, 0,
	894, 352, 895, 0, 0, 355, 356, 357, 0, 0,
	358, 359, 503, 966, 360, 967, 974, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 975,
	371, 506, 372, 1986, 373, 0, 374, 375, 376, 377,
	378, 379, 913, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 968, 396, 397, 398, 399, 850, 400, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 0, 417,
	418, 886, 887, 889, 890, 413, 419, 420, 421, 943,
	422, 402, 403, 423, 424, 969, 425, 426, 908, 888,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 954,
	434, 435, 436, 976, 0, 440, 441, 439, 0, 442,
	443, 444, 445, 446, 278, 884, 0, 448, 927, 928,
	929, 930, 0, 455, 0, 449, 450, 977, 451, 978,
	861, 452, 453, 454, 0, 456, 457, 0, 844, 458,
	459, 460, 461, 462, 464, 944, 465, 0, 892, 466,
	467, 468, 517, 924, 971, 0, 470, 469, 520, 0,
	0, 0, 0, 471, 472, 521, 473, 474, 475, 841,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 0, 837, 838, 897, 854, 855, 856, 852, 853,
	866, 867, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 946, 871, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 912, 891, 923, 881, 922, 921,
	0, 233, 883, 882, 236, 237, 238, 873, 945, 239,
	981, 982, 483, 0, 240, 952, 0, 935, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 955, 255, 256,
	938, 936, 937, 942, 940, 939, 941, 257, 258, 259,
	260, 926, 262, 919, 918, 843, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 917, 269, 0, 270, 0,
	271, 272, 0, 273, 849, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 972, 973, 862, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 916, 914, 915, 0,
	289, 0, 290, 0, 0, 956, 291, 292, 0, 293,
	979, 0, 872, 294, 0, 295, 296, 297, 298, 947,
	948, 951, 348, 958, 299, 300, 0, 301, 302, 893,
	0, 0, 217, 303, 305, 312, 0, 957, 306, 905,
	896, 907, 909, 910, 911, 906, 0, 898, 0, 313,
	959, 949, 960, 314, 315, 316, 961, 931, 932, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	980, 962, 326, 327, 963, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 885, 340, 964, 343, 344, 346, 345, 840,
	218, 965, 347, 863, 950, 920, 349, 350, 0, 894,
	352, 895, 845, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 966, 360, 967, 974, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 975, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 913, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 968, 396, 397, 398, 399, 850, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	886, 887, 889, 890, 413, 419, 420, 421, 943, 422,
	402, 403, 423, 424, 969, 425, 426, 908, 888, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 954, 434,
	435, 436, 976, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 884, 0, 448, 927, 928, 929,
	930, 0, 455, 0, 449, 450, 977, 451, 978, 861,
	452, 453, 454, 0, 456, 457, 0, 844, 458, 459,
	460, 461, 462, 464, 944, 465, 0, 892, 466, 467,
	468, 517, 924, 971, 0, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 841, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 837, 838, 897, 854, 855, 856, 852, 853, 866,
	867, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 946, 871, 0, 0, 0, 225, 227, 226,
	228, 229, 477, 912, 891, 923, 881, 922, 921, 0,
	233, 883, 882, 236, 237, 238, 873, 945, 239, 981,
	982, 483, 0, 240, 952, 0, 935, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 955, 255, 256, 938,
	936, 937, 942, 940, 939, 941, 257, 258, 259, 260,
	926, 262, 919, 918, 843, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 917, 269, 0, 270, 0, 271,
	272, 0, 273, 849, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 972, 973, 862, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 916, 914, 915, 0, 289,
	0, 290, 0, 0, 956, 291, 292, 0, 293, 979,
	0, 872, 294, 0, 295, 296, 297, 298, 947, 948,
	951, 348, 958, 299, 300, 0, 301, 302, 893, 0,
	0, 217, 303, 305, 312, 0, 957, 306, 905, 896,
	907, 909, 910, 911, 906, 0, 898, 0, 313, 959,
	949, 960, 314, 315, 316, 961, 931, 932, 0, 0,
	319, 320, 321, 322, 0, 324, 323, 0, 325, 980,
	962, 326, 327, 963, 0, 328, 329, 0, 0, 330,
	331, 332, 0, 333, 334, 336, 338, 335, 337, 339,
	341, 885, 340, 964, 343, 344, 346, 345, 840, 218,
	965, 347, 863, 950, 920, 349, 350, 0, 894, 352,
	895, 0, 0, 355, 356, 357, 0, 0, 358, 359,
	503, 966, 360, 967, 974, 361, 354, 362, 363, 364,
	365, 366, 367, 368, 0, 369, 370, 975, 371, 506,
	372, 0, 373, 0, 374, 375, 376, 377, 378, 379,
	913, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 390, 387, 391, 392, 393, 394, 0, 395,
	968, 396, 397, 398, 399, 850, 400, 0, 401, 405,
	406, 407, 408, 409, 410, 411, 0, 417, 418, 886,
	887, 889, 890, 413, 419, 420, 421, 943, 422, 402,
	403, 423, 424, 969, 425, 426, 908, 888, 428, 0,
	429, 430, 431, 432, 404, 433, 437, 954, 434, 435,
	436, 976, 0, 440, 441, 439, 0, 442, 443, 444,
	445, 446, 278, 884, 0, 448, 927, 928, 929, 930,
	0, 455, 0, 449, 450, 977, 451, 978, 861, 452,
	453, 454, 0, 456, 457, 0, 844, 458, 459, 460,
	461, 462, 464, 944, 465, 0, 892, 466, 467, 468,
	517, 924, 971, 0, 470, 469, 520, 0, 0, 0,
	0, 471, 472, 521, 473, 474, 475, 841, 0, 0,
	0, 0, 0, 839, 0, 0, 0, 0, 0, 0,
	837, 838, 1592, 0, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 865, 897, 854, 855, 856, 852, 853,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 946, 871, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 912, 891, 923, 881, 922, 921,
	0, 233, 883, 882, 236, 237, 238, 873, 945, 239,
	981, 982, 483, 0, 240, 952, 0, 935, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 955, 255, 256,
	938, 936, 937, 942, 940, 939, 941, 257, 258, 259,
	260, 926, 262, 919, 918, 843, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 917, 269, 0, 270, 0,
	271, 272, 0, 273, 849, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 972, 973, 862, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 916, 914, 915, 0,
	289, 0, 290, 0, 2164, 956, 291, 292, 0, 293,
	979, 0, 872, 294, 0, 295, 296, 297, 298, 947,
	948, 951, 348, 958, 299, 300, 0, 301, 302, 893,
	0, 0, 217, 303, 305, 312, 0, 957, 306, 905,
	896, 907, 909, 910, 911, 906, 0, 898, 0, 313,
	959, 949, 960, 314, 315, 316, 961, 931, 932, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	980, 962, 326, 327, 963, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 885, 340, 964, 343, 344, 346, 345, 840,
	218, 965, 347, 863, 950, 920, 349, 350, 0, 894,
	352, 895, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 966, 360, 967, 974, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 975, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 913, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 968, 396, 397, 398, 399, 850, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	886, 887, 889, 890, 413, 419, 420, 421, 943, 422,
	402, 403, 423, 424, 969, 425, 426, 908, 888, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 954, 434,
	435, 436, 976, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 884, 0, 448, 927, 928, 929,
	930, 0, 455, 0, 449, 450, 977, 451, 978, 861,
	452, 453, 454, 0, 456, 457, 0, 844, 458, 459,
	460, 461, 462, 464, 944, 465, 0, 892, 466, 467,
	468, 517, 924, 971, 0, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 841, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 837, 838, 897, 854, 855, 856, 852, 853, 866,
	867, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 946, 871, 0, 0, 0, 225, 227, 226,
	228, 229, 477, 912, 891, 923, 881, 922, 921, 0,
	233, 883, 882, 236, 237, 238, 873, 945, 239, 981,
	982, 483, 0, 240, 952, 0, 935, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 955, 255, 256, 938,
	936, 937, 942, 940, 939, 941, 257, 258, 259, 260,
	926, 262, 919, 918, 843, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 917, 269, 0, 270, 0, 271,
	272, 0, 273, 849, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 972, 973, 862, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 916, 914, 915, 0, 289,
	0, 290, 0, 0, 956, 291, 292, 0, 293, 979,
	0, 872, 294, 0, 295, 296, 297, 298, 947, 948,
	951, 348, 958, 299, 300, 0, 301, 302, 893, 0,
	0, 217, 303, 305, 312, 0, 957, 306, 905, 896,
	907, 909, 910, 911, 906, 0, 898, 0, 313, 959,
	949, 960, 314, 315, 316, 961, 931, 932, 0, 0,
	319, 320, 321, 322, 0, 324, 323, 0, 325, 980,
	962, 326, 327, 963, 0, 328, 329, 0, 0, 330,
	331, 332, 0, 333, 334, 336, 338, 335, 337, 339,
	341, 885, 340, 964, 343, 344, 346, 345, 840, 218,
	965, 347, 863, 950, 920, 349, 350, 0, 894, 352,
	895, 0, 0, 355, 356, 357, 0, 0, 358, 359,
	503, 966, 360, 967, 974, 361, 354, 362, 363, 364,
	365, 366, 367, 368, 0, 369, 370, 975, 371, 506,
	372, 0, 373, 0, 374, 375, 376, 377, 378, 379,
	913, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 390, 387, 391, 392, 393, 394, 0, 395,
	968, 396, 397, 398, 399, 850, 400, 0, 401, 405,
	406, 407, 408, 409, 410, 411, 0, 417, 418, 886,
	887, 889, 890, 413, 419, 420, 421, 943, 422, 402,
	403, 423, 424, 969, 425, 426, 908, 888, 428, 0,
	429, 430, 431, 432, 404, 433, 437, 954, 434, 435,
	436, 976, 0, 440, 441, 439, 0, 442, 443, 444,
	445, 446, 278, 884, 0, 448, 927, 928, 929, 930,
	0, 455, 0, 449, 450, 977, 451, 978, 861, 452,
	453, 454, 0, 456, 457, 0, 844, 458, 459, 460,
	461, 462, 464, 944, 465, 0, 892, 466, 467, 468,
	517, 924, 971, 0, 470, 469, 520, 0, 0, 0,
	0, 471, 472, 521, 473, 474, 475, 841, 0, 0,
	0, 0, 0, 839, 0, 0, 0, 0, 0, 0,
	837, 838, 0, 0, 0, 0, 0, 0, 0, 867,
	1530, 0, 2169, 865, 897, 854, 855, 856, 852, 853,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 946, 871, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 912, 891, 923, 881, 922, 921,
	0, 233, 883, 882, 236, 237, 238, 873, 945, 239,
	981, 982, 483, 0, 240, 952, 0, 935, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 955, 255, 256,
	938, 936, 937, 942, 940, 939, 941, 257, 258, 259,
	260, 926, 262, 919, 918, 843, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 917, 269, 0, 270, 0,
	271, 272, 0, 273, 849, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 972, 973, 862, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 916, 914, 915, 0,
	289, 0, 290, 0, 0, 956, 291, 292, 0, 293,
	979, 0, 872, 294, 0, 295, 296, 297, 298, 947,
	948, 951, 348, 958, 299, 300, 0, 301, 302, 893,
	0, 0, 217, 303, 305, 312, 0, 957, 306, 905,
	896, 907, 909, 910, 911, 906, 0, 898, 0, 313,
	959, 949, 960, 314, 315, 316, 961, 931, 932, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	980, 962, 326, 327, 963, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 885, 340, 964, 343, 344, 346, 345, 840,
	218, 965, 347, 863, 950, 920, 349, 350, 0, 894,
	352, 895, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 966, 360, 967, 974, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 975, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 913, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 968, 396, 397, 398, 399, 850, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	886, 887, 889, 890, 413, 419, 420, 421, 943, 422,
	402, 403, 423, 424, 969, 425, 426, 908, 888, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 954, 434,
	435, 436, 976, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 884, 0, 448, 927, 928, 929,
	930, 0, 455, 0, 449, 450, 977, 451, 978, 861,
	452, 453, 454, 0, 456, 457, 0, 844, 458, 459,
	460, 461, 462, 464, 944, 465, 0, 892, 466, 467,
	468, 517, 924, 971, 0, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 841, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 837, 838, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 2167, 865, 897, 854, 855, 856, 852,
	853, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 946, 871, 0, 0, 0, 225,
	227, 226, 228, 229, 477, 912, 891, 923, 881, 922,
	921, 0, 233, 883, 882, 236, 237, 238, 873, 945,
	239, 981, 982, 483, 0, 240, 952, 0, 935, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 955, 255,
	256, 938, 936, 937, 942, 940, 939, 941, 257, 258,
	259, 260, 926, 262, 919, 918, 843, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 917, 269, 0, 270,
	0, 271, 272, 0, 273, 849, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 972, 973, 862, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 916, 914, 915,
	0, 289, 0, 290, 0, 0, 956, 291, 292, 0,
	293, 979, 0, 872, 294, 0, 295, 296, 297, 298,
	947, 948, 951, 348, 958, 299, 300, 0, 301, 302,
	893, 0, 0, 217, 303, 305, 312, 0, 957, 306,
	905, 896, 907, 909, 910, 911, 906, 0, 898, 0,
	313, 959, 949, 960, 314, 315, 316, 961, 931, 932,
	0, 0, 319, 320, 321, 322, 0, 324, 323, 0,
	325, 980, 962, 326, 327, 963, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 885, 340, 964, 343, 344, 346, 345,
	840, 218, 965, 347, 863, 950, 920, 349, 350, 0,
	894, 352, 895, 0, 0, 355, 356, 357, 0, 0,
	358, 359, 503, 966, 360, 967, 974, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 975,
	371, 506, 372, 0, 373, 0, 374, 375, 376, 377,
	378, 379, 913, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 968, 396, 397, 398, 399, 850, 400, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 0, 417,
	418, 886, 887, 889, 890, 413, 419, 420, 421, 943,
	422, 402, 403, 423, 424, 969, 425, 426, 908, 888,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 954,
	434, 435, 436, 976, 0, 440, 441, 439, 0, 442,
	443, 444, 445, 446, 278, 884, 0, 448, 927, 928,
	929, 930, 0, 455, 0, 449, 450, 977, 451, 978,
	861, 452, 453, 454, 0, 456, 457, 0, 844, 458,
	459, 460, 461, 462, 464, 944, 465, 0, 892, 466,
	467, 468, 517, 924, 971, 0, 470, 469, 520, 0,
	0, 0, 0, 471, 472, 521, 473, 474, 475, 841,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 0, 837, 838, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 2155, 865, 897, 854, 855, 856,
	852, 853, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 946, 871, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 912, 891, 923, 881,
	922, 921, 0, 233, 883, 882, 236, 237, 238, 873,
	945, 239, 981, 982, 483, 0, 240, 952, 0, 935,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 955,
	255, 256, 938, 936, 937, 942, 940, 939, 941, 257,
	258, 259, 260, 926, 262, 919, 918, 843, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 917, 269, 0,
	270, 0, 271, 272, 0, 273, 849, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 972, 973, 862, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 916, 914,
	915, 0, 289, 0, 290, 0, 0, 956, 291, 292,
	0, 293, 979, 0, 872, 294, 0, 295, 296, 297,
	298, 947, 948, 951, 348, 958, 299, 300, 0, 301,
	302, 893, 0, 0, 217, 303, 305, 312, 0, 957,
	306, 905, 896, 907, 909, 910, 911, 906, 0, 898,
	0, 313, 959, 949, 960, 314, 315, 316, 961, 931,
	932, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 980, 962, 326, 327, 963, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 885, 340, 964, 343, 344, 346,
	345, 840, 218, 965, 347, 863, 950, 920, 349, 350,
	0, 894, 352, 895, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 966, 360, 967, 974, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	975, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 913, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 968, 396, 397, 398, 399, 850, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 886, 887, 889, 890, 413, 419, 420, 421,
	943, 422, 402, 403, 423, 424, 969, 425, 426, 908,
	888, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	954, 434, 435, 436, 976, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 884, 0, 448, 927,
	928, 929, 930, 0, 455, 0, 449, 450, 977, 451,
	978, 861, 452, 453, 454, 0, 456, 457, 0, 844,
	458, 459, 460, 461, 462, 464, 944, 465, 0, 892,
	466, 467, 468, 517, 924, 971, 0, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	841, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 0, 0, 837, 838, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 2144, 865, 897, 854, 855,
	856, 852, 853, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 946, 871, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 912, 891, 923,
	881, 922, 921, 0, 233, 883, 882, 236, 237, 238,
	873, 945, 239, 981, 982, 483, 0, 240, 952, 0,
	935, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	955, 255, 256, 938, 936, 937, 942, 940, 939, 941,
	257, 258, 259, 260, 926, 262, 919, 918, 843, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 917, 269,
	0, 270, 0, 271, 272, 0, 273, 849, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 972, 973, 862,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 916,
	914, 915, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 979, 0, 872, 294, 0, 295, 296,
	297, 298, 947, 948, 951, 348, 958, 299, 300, 0,
	301, 302, 893, 0, 0, 217, 303, 305, 312, 0,
	957, 306, 905, 896, 907, 909, 910, 911, 906, 0,
	898, 0, 313, 959, 949, 960, 314, 315, 316, 961,
	931, 932, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 980, 962, 326, 327, 963, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 885, 340, 964, 343, 344,
	346, 345, 840, 218, 965, 347, 863, 950, 920, 349,
	350, 0, 894, 352, 895, 0, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 974, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 975, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 913, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 850,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	0, 417, 418, 886, 887, 889, 890, 413, 419, 420,
	421, 943, 422, 402, 403, 423, 424, 969, 425, 426,
	908, 888, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 954, 434, 435, 436, 976, 0, 440, 441, 439,
	0, 442, 443, 444, 445, 446, 278, 884, 0, 448,
	927, 928, 929, 930, 0, 455, 0, 449, 450, 977,
	451, 978, 861, 452, 453, 454, 0, 456, 457, 0,
	844, 458, 459, 460, 461, 462, 464, 944, 465, 0,
	892, 466, 467, 468, 517, 924, 971, 0, 470, 469,
	520, 0, 0, 0, 0, 471, 472, 521, 473, 474,
	475, 841, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 837, 838, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 2142, 865, 2133, 2140,
	855, 856, 852, 853, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 946, 871, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 912, 891,
	923, 881, 922, 921, 0, 233, 883, 882, 236, 237,
	238, 873, 945, 239, 981, 982, 483, 0, 240, 952,
	0, 935, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 938, 936, 937, 942, 940, 939,
	941, 257, 258, 259, 260, 926, 2136, 919, 918, 843,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 917,
	269, 0, 270, 0, 271, 272, 0, 273, 849, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 972, 973,
	862, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	916, 914, 915, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 979, 0, 872, 294, 0, 295,
	296, 297, 2137, 947, 948, 951, 348, 958, 299, 300,
	0, 301, 302, 893, 0, 0, 217, 303, 305, 312,
	0, 957, 306, 905, 896, 907, 909, 910, 911, 906,
	0, 898, 0, 313, 959, 949, 960, 314, 315, 316,
	961, 931, 932, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 980, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 2138, 2135, 341, 885, 340, 964, 343,
	344, 346, 345, 840, 218, 965, 347, 863, 950, 920,
	349, 350, 0, 894, 352, 895, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 974,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 975, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 913, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	850, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	2139, 0, 417, 418, 886, 887, 889, 890, 413, 419,
	420, 421, 943, 422, 402, 403, 423, 424, 969, 425,
	426, 908, 888, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 954, 434, 435, 436, 976, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 884, 0,
	448, 927, 928, 929, 930, 0, 455, 0, 449, 450,
	977, 451, 978, 861, 452, 453, 454, 0, 456, 457,
	0, 844, 458, 459, 460, 461, 462, 464, 944, 465,
	0, 892, 466, 467, 468, 517, 924, 971, 0, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	2134, 475, 841, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 837, 838, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 2130, 865, 2133,
	2140, 855, 856, 852, 853, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 946, 871,
	0, 0, 0, 225, 227, 226, 228, 229, 477, 912,
	891, 923, 881, 922, 921, 0, 233, 883, 882, 236,
	237, 238, 873, 945, 239, 981, 982, 483, 0, 240,
	952, 0, 935, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 955, 255, 256, 938, 936, 937, 942, 940,
	939, 941, 257, 258, 259, 260, 926, 2136, 919, 918,
	843, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	917, 269, 0, 270, 0, 271, 272, 0, 273, 849,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 972,
	973, 862, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 916, 914, 915, 0, 289, 0, 290, 0, 0,
	956, 291, 292, 0, 293, 979, 0, 872, 294, 0,
	295, 296, 297, 2137, 947, 948, 951, 348, 958, 299,
	300, 0, 301, 302, 893, 0, 0, 217, 303, 305,
	312, 0, 957, 306, 905, 896, 907, 909, 910, 911,
	906, 0, 898, 0, 313, 959, 949, 960, 314, 315,
	316, 961, 931, 932, 0, 0, 319, 320, 321, 322,
	0, 324, 323, 0, 325, 980, 962, 326, 327, 963,
	0, 328, 329, 0, 0, 330, 331, 332, 0, 333,
	334, 336, 338, 335, 2138, 2135, 341, 885, 340, 964,
	343, 344, 346, 345, 840, 218, 965, 347, 863, 950,
	920, 349, 350, 0, 894, 352, 895, 0, 0, 355,
	356, 357, 0, 0, 358, 359, 503, 966, 360, 967,
	974, 361, 354, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 370, 975, 371, 506, 372, 0, 373, 0,
	374, 375, 376, 377, 378, 379, 913, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 390, 387,
	391, 392, 393, 394, 0, 395, 968, 396, 397, 398,
	399, 850, 400, 0, 401, 405, 406, 407, 408, 409,
	410, 2139, 0, 417, 418, 886, 887, 889, 890, 413,
	419, 420, 421, 943, 422, 402, 403, 423, 424, 969,
	425, 426, 908, 888, 428, 0, 429, 430, 431, 432,
	404, 433, 437, 954, 434, 435, 436, 976, 0, 440,
	441, 439, 0, 442, 443, 444, 445, 446, 278, 884,
	0, 448, 927, 928, 929, 930, 0, 455, 0, 449,
	450, 977, 451, 978, 861, 452, 453, 454, 0, 456,
	457, 0, 844, 458, 459, 460, 461, 462, 464, 944,
	465, 0, 892, 466, 467, 468, 517, 924, 971, 0,
	470, 469, 520, 0, 0, 0, 0, 471, 472, 521,
	473, 2134, 475, 841, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 837, 838, 897, 854,
	855, 856, 852, 853, 866, 867, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 946, 871, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 912, 891,
	923, 881, 922, 921, 0, 233, 883, 882, 236, 237,
	238, 873, 945, 239, 981, 982, 483, 0, 240, 952,
	0, 935, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 938, 936, 937, 942, 940, 939,
	941, 257, 258, 259, 260, 926, 262, 919, 918, 843,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 917,
	269, 0, 270, 0, 271, 272, 0, 273, 849, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 972, 973,
	862, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	916, 914, 915, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 979, 0, 872, 294, 0, 295,
	296, 297, 298, 947, 948, 951, 348, 958, 299, 300,
	0, 301, 302, 893, 0, 0, 217, 303, 305, 312,
	0, 957, 306, 905, 896, 907, 909, 910, 911, 906,
	0, 898, 0, 313, 959, 949, 960, 314, 315, 316,
	961, 931, 932, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 980, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 885, 340, 964, 343,
	344, 346, 345, 840, 218, 965, 347, 863, 950, 920,
	349, 350, 0, 894, 352, 895, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 974,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 975, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 913, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	850, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 886, 887, 889, 890, 413, 419,
	420, 421, 943, 422, 402, 403, 423, 424, 969, 425,
	426, 908, 888, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 954, 434, 435, 436, 976, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 884, 0,
	448, 927, 928, 929, 930, 0, 455, 0, 449, 450,
	977, 451, 978, 861, 452, 453, 454, 0, 456, 457,
	0, 844, 458, 459, 460, 461, 462, 464, 944, 465,
	0, 892, 466, 467, 468, 517, 924, 971, 0, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 841, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 837, 838, 0, 0, 0,
	0, 0, 1538, 0, 867, 0, 0, 0, 865, 897,
	854, 855, 856, 852, 853, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 1973, 224, 0, 0, 0, 0, 0, 946, 871,
	0, 0, 0, 225, 227, 226, 228, 229, 477, 912,
	891, 923, 881, 922, 921, 0, 233, 883, 882, 236,
	237, 238, 873, 945, 239, 981, 982, 483, 0, 240,
	952, 0, 935, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 955, 255, 256, 938, 936, 937, 942, 940,
	939, 941, 257, 258, 259, 260, 926, 262, 919, 918,
	843, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	917, 269, 0, 270, 0, 271, 272, 0, 273, 849,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 972,
	973, 862, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 916, 914, 915, 0, 289, 0, 290, 0, 0,
	956, 291, 292, 0, 293, 979, 0, 872, 294, 0,
	295, 296, 297, 298, 947, 948, 951, 348, 958, 299,
	300, 0, 301, 302, 893, 0, 0, 217, 303, 305,
	312, 0, 957, 306, 905, 896, 907, 909, 910, 911,
	906, 0, 898, 0, 313, 959, 949, 960, 314, 315,
	316, 961, 931, 932, 0, 0, 319, 320, 321, 322,
	0, 324, 323, 0, 325, 980, 962, 326, 327, 963,
	0, 328, 329, 0, 0, 330, 331, 332, 0, 333,
	334, 336, 338, 335, 337, 339, 341, 885, 340, 964,
	343, 344, 346, 345, 840, 218, 965, 347, 863, 950,
	920, 349, 350, 0, 894, 352, 895, 0, 0, 355,
	356, 357, 0, 0, 358, 359, 503, 966, 360, 967,
	974, 361, 354, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 370, 975, 371, 506, 372, 0, 373, 0,
	374, 375, 376, 377, 378, 379, 913, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 390, 387,
	391, 392, 393, 394, 0, 395, 968, 396, 397, 398,
	399, 850, 400, 0, 401, 405, 406, 407, 408, 409,
	410, 411, 0, 417, 418, 886, 887, 889, 890, 413,
	419, 420, 421, 943, 422, 402, 403, 423, 424, 969,
	425, 426, 908, 888, 428, 0, 429, 430, 431, 432,
	404, 433, 437, 954, 434, 435, 436, 976, 0, 440,
	441, 439, 0, 442, 443, 444, 445, 446, 278, 884,
	0, 448, 927, 928, 929, 930, 0, 455, 0, 449,
	450, 977, 451, 978, 861, 452, 453, 454, 0, 456,
	457, 0, 844, 458, 459, 460, 461, 462, 464, 944,
	465, 0, 892, 466, 467, 468, 517, 924, 971, 0,
	470, 469, 520, 0, 0, 0, 0, 471, 472, 521,
	473, 474, 475, 841, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 837, 838, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 1212, 865,
	897, 854, 855, 856, 852, 853, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 946,
	871, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	912, 891, 923, 881, 922, 921, 0, 233, 883, 882,
	236, 237, 238, 873, 945, 239, 981, 982, 483, 0,
	240, 952, 0, 935, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 955, 255, 256, 938, 936, 937, 942,
	940, 939, 941, 257, 258, 259, 260, 926, 262, 919,
	918, 843, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 917, 269, 0, 270, 0, 271, 272, 0, 273,
	849, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	972, 973, 862, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 916, 914, 915, 0, 289, 0, 290, 0,
	0, 956, 291, 292, 0, 293, 979, 0, 872, 294,
	0, 295, 296, 297, 298, 1211, 948, 951, 348, 958,
	299, 300, 0, 301, 302, 893, 0, 0, 217, 303,
	305, 312, 0, 957, 306, 905, 896, 907, 909, 910,
	911, 906, 0, 898, 0, 313, 959, 949, 960, 314,
	315, 316, 961, 931, 932, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 980, 962, 326, 327,
	963, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 885, 340,
	964, 343, 344, 346, 345, 840, 218, 965, 347, 863,
	950, 920, 349, 350, 0, 894, 352, 895, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 966, 360,
	967, 974, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 975, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 913, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 968, 396, 397,
	398, 399, 850, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 886, 887, 889, 890,
	413, 419, 420, 421, 943, 422, 402, 403, 423, 424,
	969, 425, 426, 908, 888, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 954, 434, 435, 436, 976, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	884, 0, 448, 927, 928, 929, 930, 0, 455, 0,
	449, 450, 977, 451, 978, 861, 452, 453, 454, 0,
	456, 457, 0, 844, 458, 459, 460, 461, 462, 464,
	944, 465, 0, 892, 466, 467, 468, 517, 924, 971,
	0, 470, 469, 520, 0, 0, 0, 0, 471, 472,
	521, 473, 474, 475, 841, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 837, 838, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 1206,
	865, 897, 854, 855, 856, 852, 853, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	946, 871, 0, 0, 0, 225, 227, 226, 228, 229,
	477, 912, 891, 923, 881, 922, 921, 0, 233, 883,
	882, 236, 237, 238, 873, 945, 239, 981, 982, 483,
	0, 240, 952, 0, 935, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 955, 255, 256, 938, 936, 937,
	942, 940, 939, 941, 257, 258, 259, 260, 926, 262,
	919, 918, 843, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 917, 269, 0, 270, 0, 271, 272, 0,
	273, 849, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 972, 973, 862, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 916, 914, 915, 0, 289, 0, 290,
	0, 0, 956, 291, 292, 0, 293, 979, 0, 872,
	294, 0, 295, 296, 297, 298, 1205, 948, 951, 348,
	958, 299, 300, 0, 301, 302, 893, 0, 0, 217,
	303, 305, 312, 0, 957, 306, 905, 896, 907, 909,
	910, 911, 906, 0, 898, 0, 313, 959, 949, 960,
	314, 315, 316, 961, 931, 932, 0, 0, 319, 320,
	321, 322, 0, 324, 323, 0, 325, 980, 962, 326,
	327, 963, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 885,
	340, 964, 343, 344, 346, 345, 840, 218, 965, 347,
	863, 950, 920, 349, 350, 0, 894, 352, 895, 0,
	0, 355, 356, 357, 0, 0, 358, 359, 503, 966,
	360, 967, 974, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 975, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 913, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 968, 396,
	397, 398, 399, 850, 400, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 0, 417, 418, 886, 887, 889,
	890, 413, 419, 420, 421, 943, 422, 402, 403, 423,
	424, 969, 425, 426, 908, 888, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 954, 434, 435, 436, 976,
	0, 440, 441, 439, 0, 442, 443, 444, 445, 446,
	278, 884, 0, 448, 927, 928, 929, 930, 0, 455,
	0, 449, 450, 977, 451, 978, 861, 452, 453, 454,
	0, 456, 457, 0, 844, 458, 459, 460, 461, 462,
	464, 944, 465, 0, 892, 466, 467, 468, 517, 924,
	971, 0, 470, 469, 520, 0, 0, 0, 0, 471,
	472, 521, 473, 474, 475, 841, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 837, 838,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	1201, 865, 897, 854, 855, 856, 852, 853, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 946, 871, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 912, 891, 923, 881, 922, 921, 0, 233,
	883, 882, 236, 237, 238, 873, 945, 239, 981, 982,
	483, 0, 240, 952, 0, 935, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 955, 255, 256, 938, 936,
	937, 942, 940, 939, 941, 257, 258, 259, 260, 926,
	262, 919, 918, 843, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 917, 269, 0, 270, 0, 271, 272,
	0, 273, 849, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 972, 973, 862, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 916, 914, 915, 0, 289, 0,
	290, 0, 0, 956, 291, 292, 0, 293, 979, 0,
	872, 294, 0, 295, 296, 297, 298, 947, 948, 951,
	348, 958, 299, 300, 0, 301, 302, 893, 0, 0,
	217, 303, 305, 312, 0, 957, 306, 905, 896, 907,
	909, 910, 911, 906, 0, 898, 0, 313, 959, 949,
	960, 314, 315, 316, 961, 931, 932, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 980, 962,
	326, 327, 963, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	885, 340, 964, 343, 344, 346, 345, 840, 218, 965,
	347, 863, 950, 920, 349, 350, 0, 894, 352, 895,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	966, 360, 967, 974, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 975, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 913,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 968,
	396, 397, 398, 399, 850, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 886, 887,
	889, 890, 413, 419, 420, 421, 943, 422, 402, 403,
	423, 424, 969, 425, 426, 908, 888, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 954, 434, 435, 436,
	976, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 884, 0, 448, 927, 928, 929, 930, 0,
	455, 0, 449, 450, 977, 451, 978, 861, 452, 453,
	454, 0, 456, 457, 0, 844, 458, 459, 460, 461,
	462, 464, 944, 465, 0, 892, 466, 467, 468, 517,
	924, 971, 0, 470, 469, 520, 0, 0, 0, 0,
	471, 472, 521, 473, 474, 475, 841, 0, 0, 0,
	0, 0, 839, 0, 0, 0, 0, 0, 0, 837,
	838, 897, 854, 855, 856, 852, 853, 866, 867, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	946, 871, 0, 0, 0, 225, 227, 226, 228, 229,
	477, 912, 891, 923, 881, 922, 921, 0, 233, 883,
	882, 236, 237, 238, 873, 945, 239, 981, 982, 483,
	0, 240, 952, 0, 935, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 955, 255, 256, 938, 936, 937,
	942, 940, 939, 941, 257, 258, 259, 260, 926, 262,
	919, 918, 843, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 917, 269, 0, 270, 0, 271, 272, 0,
	273, 849, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 972, 973, 862, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 916, 914, 915, 0, 289, 0, 290,
	0, 0, 956, 291, 292, 0, 293, 979, 0, 872,
	294, 0, 295, 296, 297, 298, 947, 948, 951, 348,
	958, 299, 300, 0, 301, 302, 893, 0, 0, 217,
	303, 305, 312, 0, 957, 306, 905, 896, 907, 909,
	910, 911, 906, 0, 898, 0, 313, 959, 949, 960,
	314, 315, 316, 961, 931, 932, 0, 0, 319, 320,
	321, 322, 0, 324, 323, 0, 325, 980, 962, 326,
	327, 963, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 885,
	340, 964, 343, 344, 346, 345, 840, 218, 965, 347,
	863, 950, 920, 349, 350, 0, 894, 352, 895, 0,
	0, 355, 356, 357, 0, 0, 358, 359, 503, 966,
	360, 967, 974, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 975, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 913, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 968, 396,
	397, 398, 399, 850, 400, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 0, 417, 418, 886, 887, 889,
	890, 413, 419, 420, 421, 943, 422, 402, 403, 423,
	424, 969, 425, 426, 908, 888, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 954, 434, 435, 436, 976,
	0, 440, 441, 439, 0, 442, 443, 444, 445, 446,
	278, 884, 0, 448, 927, 928, 929, 930, 0, 455,
	0, 449, 450, 977, 451, 978, 861, 452, 453, 454,
	0, 456, 457, 0, 844, 458, 459, 460, 461, 462,
	464, 944, 465, 0, 892, 466, 467, 468, 517, 924,
	971, 0, 470, 469, 520, 0, 0, 0, 0, 471,
	472, 521, 473, 474, 475, 841, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 837, 838,
	897, 854, 855, 856, 852, 853, 866, 867, 0, 0,
	0, 865, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 946,
	871, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	912, 891, 923, 881, 922, 921, 0, 233, 883, 882,
	236, 237, 238, 873, 945, 239, 981, 982, 483, 0,
	240, 952, 0, 935, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 955, 255, 3512, 938, 936, 937, 942,
	940, 939, 941, 257, 258, 259, 260, 926, 262, 919,
	918, 843, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 917, 269, 0, 270, 0, 271, 272, 0, 273,
	849, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	972, 973, 862, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 916, 914, 915, 0, 289, 0, 290, 0,
	0, 956, 291, 292, 0, 293, 979, 0, 872, 294,
	0, 295, 296, 297, 298, 947, 948, 951, 348, 958,
	299, 300, 0, 301, 302, 893, 0, 0, 217, 303,
	305, 312, 0, 957, 306, 905, 896, 907, 909, 910,
	911, 906, 0, 898, 0, 313, 959, 949, 960, 314,
	315, 316, 961, 931, 932, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 980, 962, 326, 327,
	963, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 885, 340,
	964, 343, 344, 346, 345, 840, 218, 965, 347, 863,
	950, 920, 349, 350, 0, 894, 352, 895, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 966, 360,
	967, 974, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 975, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 913, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 968, 396, 397,
	398, 399, 850, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 886, 887, 889, 890,
	413, 419, 420, 421, 943, 422, 402, 403, 423, 424,
	969, 425, 426, 908, 888, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 954, 434, 435, 436, 976, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	884, 0, 448, 927, 928, 929, 930, 0, 455, 0,
	449, 450, 977, 451, 978, 861, 452, 453, 454, 0,
	3511, 457, 0, 844, 458, 459, 460, 461, 462, 464,
	944, 465, 0, 892, 466, 467, 468, 517, 924, 971,
	0, 470, 469, 520, 0, 0, 0, 0, 471, 472,
	521, 473, 474, 475, 841, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 837, 838, 897,
	854, 855, 856, 852, 853, 866, 867, 0, 0, 0,
	865, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 946, 871,
	0, 0, 0, 225, 227, 226, 228, 229, 3510, 912,
	891, 923, 881, 922, 921, 0, 233, 883, 882, 236,
	237, 238, 873, 945, 239, 981, 982, 483, 0, 240,
	952, 0, 935, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 955, 255, 3512, 938, 936, 937, 942, 940,
	939, 941, 257, 258, 259, 260, 926, 262, 919, 918,
	843, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	917, 269, 0, 270, 0, 271, 272, 0, 273, 849,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 972,
	973, 862, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 916, 914, 915, 0, 289, 0, 290, 0, 0,
	956, 291, 292, 0, 293, 979, 0, 872, 294, 0,
	295, 296, 297, 298, 947, 948, 951, 348, 958, 299,
	300, 0, 301, 302, 893, 0, 0, 217, 303, 305,
	312, 0, 957, 306, 905, 896, 907, 909, 910, 911,
	906, 0, 898, 0, 313, 959, 949, 960, 314, 315,
	316, 961, 931, 932, 0, 0, 319, 320, 321, 322,
	0, 324, 323, 0, 325, 980, 962, 326, 327, 963,
	0, 328, 329, 0, 0, 330, 331, 332, 0, 333,
	334, 336, 338, 335, 337, 339, 341, 885, 340, 964,
	343, 344, 346, 345, 840, 218, 965, 347, 863, 950,
	920, 349, 350, 0, 894, 352, 895, 0, 0, 355,
	356, 357, 0, 0, 358, 359, 503, 966, 360, 967,
	974, 361, 354, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 370, 975, 371, 506, 372, 0, 373, 0,
	374, 375, 376, 377, 378, 379, 913, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 390, 387,
	391, 392, 393, 394, 0, 395, 968, 396, 397, 398,
	399, 850, 400, 0, 401, 405, 406, 407, 408, 409,
	410, 411, 0, 417, 418, 886, 887, 889, 890, 413,
	419, 420, 421, 943, 422, 402, 403, 423, 424, 969,
	425, 426, 908, 888, 428, 0, 429, 430, 431, 432,
	404, 433, 437, 954, 434, 435, 436, 976, 0, 440,
	441, 439, 0, 442, 443, 444, 445, 446, 278, 884,
	0, 448, 927, 928, 929, 930, 0, 455, 0, 449,
	450, 977, 451, 978, 861, 452, 453, 454, 0, 3511,
	457, 0, 844, 458, 459, 460, 461, 462, 464, 944,
	465, 0, 892, 466, 467, 468, 517, 924, 971, 0,
	470, 469, 520, 0, 0, 0, 0, 471, 472, 521,
	473, 474, 475, 841, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 837, 838, 897, 854,
	855, 856, 852, 853, 866, 867, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 946, 871, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 912, 891,
	923, 881, 922, 921, 0, 233, 883, 882, 236, 237,
	238, 873, 945, 239, 981, 982, 483, 0, 240, 952,
	0, 935, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 938, 936, 937, 942, 940, 939,
	941, 257, 258, 259, 260, 926, 262, 919, 918, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 917,
	269, 0, 270, 0, 271, 272, 0, 273, 849, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 972, 973,
	862, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	916, 914, 915, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 979, 0, 872, 294, 0, 295,
	296, 297, 298, 947, 948, 951, 348, 958, 299, 300,
	0, 301, 302, 893, 0, 0, 217, 303, 305, 312,
	0, 957, 306, 905, 896, 907, 909, 910, 911, 906,
	0, 898, 0, 313, 959, 949, 960, 314, 315, 316,
	961, 931, 932, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 980, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 885, 340, 964, 343,
	344, 346, 345, 0, 218, 965, 347, 863, 950, 920,
	349, 350, 0, 894, 352, 895, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 974,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 975, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 913, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	850, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 886, 887, 889, 890, 413, 419,
	420, 421, 943, 422, 402, 403, 423, 424, 969, 425,
	426, 908, 888, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 954, 434, 435, 436, 976, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 884, 0,
	448, 927, 928, 929, 930, 0, 455, 0, 449, 450,
	977, 451, 978, 861, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 944, 465,
	0, 892, 466, 467, 468, 517, 924, 971, 0, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 2152, 0,
	0, 0, 0, 0, 0, 2150, 2151, 897, 854, 855,
	856, 852, 853, 866, 867, 0, 0, 0, 865, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 946, 871, 0, 0,
	0, 225, 227, 226, 228, 229, 0, 912, 891, 923,
	881, 922, 921, 0, 233, 883, 882, 236, 237, 238,
	873, 945, 239, 981, 982, 483, 0, 240, 952, 0,
	935, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	955, 255, 3512, 938, 936, 937, 942, 940, 939, 941,
	257, 258, 259, 260, 926, 262, 919, 918, 843, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 917, 269,
	0, 270, 0, 271, 272, 0, 273, 849, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 972, 973, 862,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 916,
	914, 915, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 979, 0, 872, 294, 0, 295, 296,
	297, 298, 947, 948, 951, 348, 0, 299, 300, 0,
	301, 302, 893, 0, 0, 217, 303, 305, 312, 0,
	957, 306, 905, 896, 907, 909, 910, 911, 906, 0,
	898, 0, 313, 0, 949, 0, 314, 315, 316, 961,
	931, 932, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 980, 962, 326, 327, 0, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 885, 340, 964, 343, 344,
	346, 345, 840, 218, 0, 347, 863, 950, 920, 349,
	350, 0, 894, 352, 895, 0, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 974, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 975, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 913, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 850,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	0, 417, 418, 886, 887, 889, 890, 413, 419, 420,
	421, 943, 422, 402, 403, 423, 424, 0, 425, 426,
	908, 888, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 954, 434, 435, 436, 976, 0, 440, 441, 439,
	0, 442, 443, 444, 445, 446, 278, 884, 0, 448,
	927, 928, 929, 930, 0, 455, 0, 449, 450, 977,
	451, 978, 861, 452, 453, 454, 0, 3511, 457, 0,
	844, 458, 459, 460, 461, 462, 464, 944, 465, 0,
	892, 466, 467, 468, 517, 924, 971, 0, 470, 469,
	520, 0, 0, 0, 0, 471, 472, 521, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 1018, 0, 0, 837, 838, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 865, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	477, 478, 230, 479, 231, 232, 480, 0, 233, 234,
	235, 236, 237, 238, 0, 945, 239, 481, 482, 483,
	0, 240, 952, 0, 935, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 955, 255, 256, 938, 936, 937,
	942, 940, 939, 941, 257, 258, 259, 260, 261, 262,
	485, 486, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 487, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 972, 973, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 490, 287, 288, 0, 289, 0, 290,
	0, 0, 956, 291, 292, 0, 293, 979, 0, 492,
	294, 0, 295, 296, 297, 298, 947, 948, 951, 348,
	958, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 957, 306, 496, 308, 307, 309,
	310, 311, 497, 0, 498, 0, 313, 959, 949, 960,
	314, 315, 316, 961, 317, 318, 0, 0, 319, 320,
	321, 322, 1005, 324, 323, 0, 325, 980, 962, 326,
	327, 963, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 342,
	340, 964, 343, 344, 346, 345, 0, 218, 965, 347,
	0, 950, 502, 349, 350, 0, 351, 352, 353, 0,
	1010, 355, 356, 357, 0, 0, 358, 359, 503, 966,
	360, 967, 974, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 975, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 507, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 968, 396,
	397, 398, 399, 508, 1012, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 182, 417, 418, 412, 414, 415,
	416, 413, 419, 420, 421, 943, 422, 402, 403, 423,
	424, 969, 425, 426, 509, 427, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 438, 434, 435, 436, 976,
	0, 440, 441, 439, 184, 442, 443, 444, 445, 446,
	278, 447, 0, 448, 511, 512, 513, 514, 0, 455,
	0, 449, 450, 977, 451, 978, 0, 452, 453, 454,
	0, 456, 457, 0, 0, 458, 459, 460, 461, 462,
	464, 944, 465, 0, 463, 466, 467, 468, 1322, 518,
	519, 0, 470, 469, 520, 1018, 0, 0, 176, 471,
	472, 521, 473, 474, 475, 0, 177, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 946, 1002, 0, 1624, 0, 225,
	227, 226, 228, 229, 477, 478, 230, 479, 231, 232,
	480, 0, 233, 234, 235, 236, 237, 238, 0, 945,
	239, 481, 482, 483, 0, 240, 952, 0, 935, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 955, 255,
	256, 938, 936, 937, 942, 940, 939, 941, 257, 258,
	259, 260, 261, 262, 485, 486, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 487, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 972, 973, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 490, 287, 288,
	0, 289, 0, 290, 0, 0, 956, 291, 292, 0,
	293, 979, 0, 492, 294, 0, 295, 296, 297, 298,
	947, 948, 951, 348, 958, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 957, 306,
	496, 308, 307, 309, 310, 311, 497, 0, 498, 0,
	313, 959, 949, 960, 314, 315, 316, 961, 317, 318,
	0, 0, 319, 320, 321, 322, 1005, 324, 323, 0,
	325, 980, 962, 326, 327, 963, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 342, 340, 964, 343, 344, 346, 345,
	0, 218, 965, 347, 0, 950, 502, 349, 350, 0,
	351, 352, 353, 0, 1010, 355, 356, 357, 0, 0,
	358, 359, 503, 966, 360, 967, 974, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 975,
	371, 506, 372, 0, 373, 0, 374, 375, 376, 377,
	378, 379, 507, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 968, 396, 397, 398, 399, 508, 1012, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 182, 417,
	418, 412, 414, 415, 416, 413, 419, 420, 421, 943,
	422, 402, 403, 423, 424, 969, 425, 426, 509, 427,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 438,
	434, 435, 436, 976, 0, 440, 441, 439, 184, 442,
	443, 444, 445, 446, 278, 447, 0, 448, 511, 512,
	513, 514, 0, 455, 0, 449, 450, 977, 451, 978,
	0, 452, 453, 454, 0, 456, 457, 0, 0, 458,
	459, 460, 461, 462, 464, 944, 465, 0, 463, 466,
	467, 468, 1322, 518, 519, 0, 470, 469, 520, 2612,
	0, 1018, 176, 471, 472, 521, 473, 474, 475, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 1002,
	946, 1624, 0, 0, 0, 225, 227, 226, 228, 229,
	477, 478, 230, 479, 231, 232, 480, 0, 233, 234,
	235, 236, 237, 238, 0, 945, 239, 481, 482, 483,
	0, 240, 952, 0, 935, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 955, 255, 256, 938, 936, 937,
	942, 940, 939, 941, 257, 258, 259, 260, 261, 262,
	485, 486, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 487, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 972, 973, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 490, 287, 288, 0, 289, 0, 290,
	0, 0, 956, 291, 292, 0, 293, 979, 0, 492,
	294, 0, 295, 296, 297, 298, 947, 948, 951, 348,
	958, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 957, 306, 496, 308, 307, 309,
	310, 311, 497, 0, 498, 0, 313, 959, 949, 960,
	314, 315, 316, 961, 317, 318, 0, 0, 319, 320,
	321, 322, 1005, 324, 323, 0, 325, 980, 962, 326,
	327, 963, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 342,
	340, 964, 343, 344, 346, 345, 0, 218, 965, 347,
	0, 950, 502, 349, 350, 0, 351, 352, 353, 0,
	1010, 355, 356, 357, 0, 0, 358, 359, 503, 966,
	360, 967, 974, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 975, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 507, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 968, 396,
	397, 398, 399, 508, 1012, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 0, 417, 418, 412, 414, 415,
	416, 413, 419, 420, 421, 943, 422, 402, 403, 423,
	424, 969, 425, 426, 509, 427, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 438, 434, 435, 436, 976,
	0, 440, 441, 439, 0, 442, 443, 444, 445, 446,
	278, 447, 0, 448, 511, 512, 513, 514, 0, 455,
	0, 449, 450, 977, 451, 978, 0, 452, 453, 454,
	0, 456, 457, 0, 0, 458, 459, 460, 461, 462,
	464, 944, 465, 0, 463, 466, 467, 468, 517, 518,
	519, 0, 470, 469, 520, 1001, 0, 1018, 0, 471,
	472, 521, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 1002, 946, 1007, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 478, 230, 479,
	231, 232, 480, 0, 233, 234, 235, 236, 237, 238,
	0, 945, 239, 481, 482, 483, 0, 240, 952, 0,
	935, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	955, 255, 256, 938, 936, 937, 942, 940, 939, 941,
	257, 258, 259, 260, 261, 262, 485, 486, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 487, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 972, 973, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 490,
	287, 288, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 979, 0, 492, 294, 0, 295, 296,
	297, 298, 947, 948, 951, 348, 958, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	957, 306, 496, 308, 307, 309, 310, 311, 497, 0,
	498, 0, 313, 959, 949, 960, 314, 315, 316, 961,
	317, 318, 0, 0, 319, 320, 321, 322, 1005, 324,
	323, 0, 325, 980, 962, 326, 327, 963, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 342, 340, 964, 343, 344,
	346, 345, 0, 218, 965, 347, 0, 950, 502, 349,
	350, 0, 351, 352, 353, 0, 1010, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 974, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 975, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 507, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 508,
	1012, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	0, 417, 418, 412, 414, 415, 416, 413, 419, 420,
	421, 943, 422, 402, 403, 423, 424, 969, 425, 426,
	509, 427, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 438, 434, 435, 436, 976, 0, 440, 441, 439,
	0, 442, 443, 444, 445, 446, 278, 447, 0, 448,
	511, 512, 513, 514, 0, 455, 0, 449, 450, 977,
	451, 978, 0, 452, 453, 454, 0, 456, 457, 0,
	0, 458, 459, 460, 461, 462, 464, 944, 465, 0,
	463, 466, 467, 468, 517, 518, 519, 0, 470, 469,
	520, 1018, 0, 0, 0, 471, 472, 521, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	946, 1002, 0, 1007, 0, 225, 227, 226, 228, 229,
	477, 478, 230, 479, 231, 232, 480, 0, 233, 234,
	235, 236, 237, 238, 0, 945, 239, 481, 482, 483,
	0, 240, 952, 0, 935, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 955, 255, 256, 938, 936, 937,
	942, 940, 939, 941, 257, 258, 259, 260, 261, 262,
	485, 486, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 487, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 972, 973, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 490, 287, 288, 0, 289, 0, 290,
	0, 0, 956, 291, 292, 0, 293, 979, 0, 492,
	294, 0, 295, 296, 297, 298, 947, 948, 951, 348,
	958, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 957, 306, 496, 308, 307, 309,
	310, 311, 497, 0, 498, 0, 313, 959, 949, 960,
	314, 315, 316, 961, 317, 318, 0, 0, 319, 320,
	321, 322, 1005, 324, 323, 0, 325, 980, 962, 326,
	327, 963, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 342,
	340, 964, 343, 344, 346, 345, 0, 218, 965, 347,
	0, 950, 502, 349, 350, 0, 351, 352, 353, 0,
	1010, 355, 356, 357, 0, 0, 358, 359, 503, 966,
	360, 967, 974, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 975, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 507, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 968, 396,
	397, 398, 399, 508, 1012, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 0, 417, 418, 412, 414, 415,
	416, 413, 419, 420, 421, 943, 422, 402, 403, 423,
	424, 969, 425, 426, 509, 427, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 438, 434, 435, 436, 976,
	0, 440, 441, 439, 0, 442, 443, 444, 445, 446,
	278, 447, 0, 448, 511, 512, 513, 514, 0, 455,
	0, 449, 450, 977, 451, 978, 0, 452, 453, 454,
	0, 456, 457, 0, 0, 458, 459, 460, 461, 462,
	464, 944, 465, 0, 463, 466, 467, 468, 517, 518,
	519, 0, 470, 469, 520, 1018, 0, 0, 0, 471,
	472, 521, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 946, 1002, 0, 1007, 0, 225,
	227, 226, 228, 229, 477, 478, 230, 479, 231, 232,
	480, 0, 233, 234, 235, 236, 237, 238, 0, 945,
	239, 481, 482, 483, 0, 240, 952, 0, 935, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 955, 255,
	256, 938, 936, 937, 942, 940, 939, 941, 257, 258,
	259, 260, 261, 262, 485, 486, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 487, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 972, 973, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 490, 287, 288,
	0, 289, 0, 290, 0, 0, 956, 291, 292, 0,
	293, 979, 0, 492, 294, 0, 295, 296, 297, 298,
	947, 948, 951, 348, 958, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 957, 306,
	496, 308, 307, 309, 310, 311, 497, 0, 498, 0,
	313, 959, 949, 960, 314, 315, 316, 961, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 324, 323, 0,
	325, 980, 962, 326, 327, 963, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 342, 340, 964, 343, 344, 346, 345,
	0, 218, 965, 347, 0, 950, 502, 349, 350, 0,
	351, 352, 353, 0, 0, 355, 356, 357, 0, 0,
	358, 359, 503, 966, 360, 967, 974, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 975,
	371, 506, 372, 0, 373, 0, 374, 375, 376, 377,
	378, 379, 507, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 968, 396, 397, 398, 399, 508, 1012, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 0, 417,
	418, 412, 414, 415, 416, 413, 419, 420, 421, 943,
	422, 402, 403, 423, 424, 969, 425, 426, 509, 427,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 438,
	434, 435, 436, 976, 0, 440, 441, 439, 0, 442,
	443, 444, 445, 446, 278, 447, 0, 448, 511, 512,
	513, 514, 0, 455, 0, 449, 450, 977, 451, 978,
	0, 452, 453, 454, 0, 456, 457, 0, 0, 458,
	459, 460, 461, 462, 464, 944, 465, 0, 463, 466,
	467, 468, 517, 518, 519, 0, 470, 469, 520, 830,
	0, 1176, 0, 471, 472, 521, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	476, 1519, 0, 0, 0, 225, 227, 226, 228, 229,
	477, 478, 230, 479, 231, 232, 480, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 481, 482, 483,
	0, 240, 484, 0, 1080, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 955, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	485, 486, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 487, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 488, 489, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 490, 287, 288, 0, 289, 0, 290,
	0, 0, 956, 291, 292, 0, 293, 491, 0, 492,
	294, 0, 295, 296, 297, 298, 493, 494, 495, 348,
	958, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 957, 306, 496, 308, 307, 309,
	310, 311, 497, 0, 498, 0, 313, 959, 499, 960,
	314, 315, 316, 961, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 324, 323, 0, 325, 500, 962, 326,
	327, 963, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 342,
	340, 964, 343, 344, 346, 345, 0, 0, 965, 347,
	0, 501, 502, 349, 350, 0, 351, 352, 353, 0,
	0, 355, 356, 357, 0, 0, 358, 359, 503, 966,
	360, 967, 504, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 505, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 507, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 968, 396,
	397, 398, 399, 508, 400, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 182, 417, 418, 412, 414, 415,
	416, 413, 419, 420, 421, 0, 422, 402, 403, 423,
	424, 969, 425, 426, 509, 427, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 438, 434, 435, 436, 510,
	0, 440, 441, 439, 184, 442, 443, 444, 445, 446,
	278, 447, 0, 448, 511, 512, 513, 514, 0, 455,
	0, 449, 450, 515, 451, 516, 0, 452, 453, 454,
	0, 456, 457, 0, 0, 458, 459, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 1322, 518,
	519, 0, 470, 469, 520, 1319, 0, 1176, 176, 471,
	472, 521, 473, 474, 475, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 476, 151, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 478, 230, 479,
	231, 232, 480, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 481, 482, 483, 0, 240, 484, 0,
	1080, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	955, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 485, 486, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 487, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 488, 489, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 490,
	287, 288, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 491, 0, 492, 294, 0, 295, 296,
	297, 298, 493, 494, 495, 348, 958, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	957, 306, 496, 308, 307, 309, 310, 311, 497, 0,
	498, 0, 313, 959, 499, 960, 314, 315, 316, 961,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 500, 962, 326, 327, 963, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 342, 340, 964, 343, 344,
	346, 345, 0, 0, 965, 347, 0, 501, 502, 349,
	350, 0, 351, 352, 353, 0, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 504, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 505, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 507, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 508,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	182, 417, 418, 412, 414, 415, 416, 413, 419, 420,
	421, 0, 422, 402, 403, 423, 424, 969, 425, 426,
	509, 427, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 438, 434, 435, 436, 510, 0, 440, 441, 439,
	184, 442, 443, 444, 445, 446, 278, 447, 0, 448,
	511, 512, 513, 514, 0, 455, 0, 449, 450, 515,
	451, 516, 0, 452, 453, 454, 0, 456, 457, 0,
	0, 458, 459, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 1322, 518, 519, 0, 470, 469,
	520, 0, 0, 0, 176, 471, 472, 521, 473, 474,
	475, 0, 177, 0, 0, 0, 0, 1176, 1175, 0,
	0, 0, 0, 1173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 476, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 478, 230, 479,
	231, 232, 480, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 481, 482, 483, 0, 240, 484, 0,
	1080, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	955, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 485, 486, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 487, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 488, 489, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 490,
	287, 288, 0, 289, 0, 290, 0, 0, 956, 291,
	292, 0, 293, 491, 0, 492, 294, 0, 295, 296,
	297, 298, 493, 494, 495, 348, 958, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	957, 306, 496, 308, 307, 309, 310, 311, 497, 0,
	498, 0, 313, 959, 499, 960, 314, 315, 316, 961,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 500, 962, 326, 327, 963, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 342, 340, 964, 343, 344,
	346, 345, 0, 0, 965, 347, 0, 501, 502, 349,
	350, 0, 351, 352, 353, 0, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 966, 360, 967, 504, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 505, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 507, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 968, 396, 397, 398, 399, 508,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	0, 417, 418, 412, 414, 415, 416, 413, 419, 420,
	421, 0, 422, 402, 403, 423, 424, 969, 425, 426,
	509, 427, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 438, 434, 435, 436, 510, 0, 440, 441, 439,
	0, 442, 443, 444, 445, 446, 278, 447, 0, 448,
	511, 512, 513, 514, 0, 455, 0, 449, 450, 515,
	451, 516, 0, 452, 453, 454, 0, 456, 457, 0,
	0, 458, 459, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 517, 518, 519, 0, 470, 469,
	520, 0, 0, 0, 0, 471, 472, 521, 473, 474,
	475, 1176, 1175, 0, 0, 0, 0, 1173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1803, 224, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	477, 478, 230, 479, 231, 232, 480, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 481, 482, 483,
	0, 240, 484, 0, 1080, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 955, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	485, 486, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 487, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 488, 489, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 490, 287, 288, 0, 289, 0, 290,
	0, 0, 956, 291, 292, 0, 293, 491, 0, 492,
	294, 0, 295, 296, 297, 298, 493, 494, 495, 348,
	958, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 957, 306, 496, 308, 307, 309,
	310, 311, 497, 0, 498, 0, 313, 959, 499, 960,
	314, 315, 316, 961, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 324, 323, 0, 325, 500, 962, 326,
	327, 963, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 342,
	340, 964, 343, 344, 346, 345, 0, 0, 965, 347,
	0, 501, 502, 349, 350, 0, 351, 352, 353, 0,
	0, 355, 356, 357, 0, 0, 358, 359, 503, 966,
	360, 967, 504, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 505, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 507, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 968, 396,
	397, 398, 399, 508, 400, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 0, 417, 418, 412, 414, 415,
	416, 413, 419, 420, 421, 0, 422, 402, 403, 423,
	424, 969, 425, 426, 509, 427, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 438, 434, 435, 436, 510,
	0, 440, 441, 439, 0, 442, 443, 444, 445, 446,
	278, 447, 0, 448, 511, 512, 513, 514, 0, 455,
	0, 449, 450, 515, 451, 516, 0, 452, 453, 454,
	0, 456, 457, 0, 0, 458, 459, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 517, 518,
	519, 0, 470, 469, 520, 0, 0, 0, 0, 471,
	472, 521, 473, 474, 475, 1176, 1175, 0, 0, 0,
	0, 1173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 2808, 224, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 477, 478, 230, 479, 231, 232,
	480, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 481, 482, 483, 0, 240, 484, 0, 1080, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 955, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 485, 486, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 487, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 488, 489, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 490, 287, 288,
	0, 289, 0, 290, 0, 0, 956, 291, 292, 0,
	293, 491, 0, 492, 294, 0, 295, 296, 297, 298,
	493, 494, 495, 348, 958, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 957, 306,
	496, 308, 307, 309, 310, 311, 497, 0, 498, 0,
	313, 959, 499, 960, 314, 315, 316, 961, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 324, 323, 0,
	325, 500, 962, 326, 327, 963, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 342, 340, 964, 343, 344, 346, 345,
	0, 0, 965, 347, 0, 501, 502, 349, 350, 0,
	351, 352, 353, 0, 0, 355, 356, 357, 0, 0,
	358, 359, 503, 966, 360, 967, 504, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 505,
	371, 506, 372, 0, 373, 0, 374, 375, 376, 377,
	378, 379, 507, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 968, 396, 397, 398, 399, 508, 400, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 0, 417,
	418, 412, 414, 415, 416, 413, 419, 420, 421, 0,
	422, 402, 403, 423, 424, 969, 425, 426, 509, 427,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 438,
	434, 435, 436, 510, 0, 440, 441, 439, 0, 442,
	443, 444, 445, 446, 278, 447, 0, 448, 511, 512,
	513, 514, 0, 455, 0, 449, 450, 515, 451, 516,
	0, 452, 453, 454, 0, 456, 457, 0, 0, 458,
	459, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 517, 518, 519, 0, 470, 469, 520, 1018,
	0, 0, 0, 471, 472, 521, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 946, 0,
	0, 1328, 0, 225, 227, 226, 228, 229, 477, 478,
	230, 479, 231, 232, 480, 0, 233, 234, 235, 236,
	237, 238, 0, 945, 239, 481, 482, 483, 0, 240,
	952, 0, 935, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 955, 255, 256, 938, 936, 937, 942, 940,
	939, 941, 257, 258, 259, 260, 261, 262, 485, 486,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 487,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 972,
	973, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 490, 287, 288, 0, 289, 0, 290, 0, 0,
	956, 291, 292, 0, 293, 979, 0, 492, 294, 0,
	295, 296, 297, 298, 947, 948, 951, 348, 958, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 957, 306, 496, 308, 307, 309, 310, 311,
	497, 0, 498, 0, 313, 959, 949, 960, 314, 315,
	316, 961, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 324, 323, 0, 325, 980, 962, 326, 327, 963,
	0, 328, 329, 0, 0, 330, 331, 332, 0, 333,
	334, 336, 338, 335, 337, 339, 341, 342, 340, 964,
	343, 344, 346, 345, 0, 218, 965, 347, 0, 950,
	502, 349, 350, 0, 351, 352, 353, 0, 0, 355,
	356, 357, 0, 0, 358, 359, 503, 966, 360, 967,
	974, 361, 354, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 370, 975, 371, 506, 372, 0, 373, 0,
	374, 375, 376, 377, 378, 379, 507, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 390, 387,
	391, 392, 393, 394, 0, 395, 968, 396, 397, 398,
	399, 508, 400, 0, 401, 405, 406, 407, 408, 409,
	410, 411, 0, 417, 418, 412, 414, 415, 416, 413,
	419, 420, 421, 943, 422, 402, 403, 423, 424, 969,
	425, 426, 509, 427, 428, 0, 429, 430, 431, 432,
	404, 433, 437, 438, 434, 435, 436, 976, 0, 440,
	441, 439, 0, 442, 443, 444, 445, 446, 278, 447,
	0, 448, 511, 512, 513, 514, 0, 455, 0, 449,
	450, 977, 451, 978, 0, 452, 453, 454, 0, 456,
	457, 0, 0, 458, 459, 460, 461, 462, 464, 944,
	465, 0, 463, 466, 467, 468, 517, 518, 519, 0,
	470, 469, 520, 830, 0, 213, 0, 471, 472, 521,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 476, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 477, 478, 230, 479, 231, 232,
	480, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 481, 482, 483, 0, 240, 484, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 485, 486, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 487, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 488, 489, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 490, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 491, 0, 492, 294, 0, 295, 296, 297, 298,
	493, 494, 495, 348, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	496, 308, 307, 309, 310, 311, 497, 0, 498, 0,
	313, 0, 499, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 324, 323, 0,
	325, 500, 0, 326, 327, 0, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 342, 340, 0, 343, 344, 346, 345,
	0, 0, 0, 347, 0, 501, 502, 349, 350, 0,
	351, 352, 353, 0, 0, 355, 356, 357, 0, 0,
	358, 359, 503, 0, 360, 0, 504, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 505,
	371, 506, 372, 0, 373, 0, 374, 375, 376, 377,
	378, 379, 507, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 0, 396, 397, 398, 399, 508, 400, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 182, 417,
	418, 412, 414, 415, 416, 413, 419, 420, 421, 0,
	422, 402, 403, 423, 424, 0, 425, 426, 509, 427,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 438,
	434, 435, 436, 510, 0, 440, 441, 439, 184, 442,
	443, 444, 445, 446, 278, 447, 0, 448, 511, 512,
	513, 514, 0, 455, 0, 449, 450, 515, 451, 516,
	0, 452, 453, 454, 0, 456, 457, 0, 0, 458,
	459, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 1322, 518, 519, 0, 470, 469, 520, 213,
	0, 0, 176, 471, 472, 521, 473, 474, 475, 0,
	177, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 476, 0,
	0, 151, 0, 225, 227, 226, 228, 229, 477, 478,
	230, 479, 231, 232, 480, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 481, 482, 483, 0, 240,
	484, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 485, 486,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 487,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 488,
	489, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 490, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 491, 0, 492, 294, 0,
	295, 296, 297, 298, 493, 494, 495, 348, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 496, 308, 307, 309, 310, 311,
	497, 0, 498, 0, 313, 0, 499, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	0, 324, 323, 0, 325, 500, 0, 326, 327, 0,
	0, 328, 329, 0, 0, 330, 331, 332, 0, 333,
	334, 336, 338, 335, 337, 339, 341, 342, 340, 0,
	343, 344, 346, 345, 0, 218, 0, 347, 0, 501,
	502, 349, 350, 0, 351, 352, 353, 0, 0, 355,
	356, 357, 0, 0, 358, 359, 503, 0, 360, 0,
	504, 361, 354, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 370, 505, 371, 506, 372, 0, 373, 0,
	374, 375, 376, 377, 378, 379, 507, 380, 381, 0,
	382, 383, 384, 385, 386, 0, 388, 389, 390, 387,
	391, 392, 393, 394, 0, 395, 0, 396, 397, 398,
	399, 508, 400, 0, 401, 405, 406, 407, 408, 409,
	410, 411, 0, 417, 418, 412, 414, 415, 416, 413,
	419, 420, 421, 0, 422, 402, 403, 423, 424, 0,
	425, 426, 509, 427, 428, 0, 429, 430, 431, 432,
	404, 433, 437, 438, 434, 435, 436, 510, 0, 440,
	441, 439, 0, 442, 443, 444, 445, 446, 278, 447,
	0, 448, 511, 512, 513, 514, 0, 455, 0, 449,
	450, 515, 451, 516, 0, 452, 453, 454, 0, 456,
	457, 0, 0, 458, 459, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 517, 518, 519, 0,
	470, 469, 520, 213, 0, 0, 0, 471, 472, 521,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 476, 0, 0, 1629, 0, 225, 227, 226,
	228, 229, 477, 478, 230, 479, 231, 232, 480, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 481,
	482, 483, 0, 240, 484, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 485, 486, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 487, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 488, 489, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 490, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 491,
	0, 492, 294, 0, 295, 296, 297, 298, 493, 494,
	495, 348, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 496, 308,
	307, 309, 310, 311, 497, 0, 498, 0, 313, 0,
	499, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 0, 324, 323, 0, 325, 500,
	0, 326, 327, 0, 0, 328, 329, 0, 0, 330,
	331, 332, 0, 333, 334, 336, 338, 335, 337, 339,
	341, 342, 340, 0, 343, 344, 346, 345, 0, 218,
	0, 347, 0, 501, 502, 349, 350, 0, 351, 352,
	353, 0, 0, 355, 356, 357, 0, 0, 358, 359,
	503, 0, 360, 0, 504, 361, 354, 362, 363, 364,
	365, 366, 367, 368, 0, 369, 370, 505, 371, 506,
	372, 0, 373, 0, 374, 375, 376, 377, 378, 379,
	507, 380, 381, 0, 382, 383, 384, 385, 386, 0,
	388, 389, 390, 387, 391, 392, 393, 394, 0, 395,
	0, 396, 397, 398, 399, 508, 400, 0, 401, 405,
	406, 407, 408, 409, 410, 411, 0, 417, 418, 412,
	414, 415, 416, 413, 419, 420, 421, 0, 422, 402,
	403, 423, 424, 0, 425, 426, 509, 427, 428, 0,
	429, 430, 431, 432, 404, 433, 437, 438, 434, 435,
	436, 510, 0, 440, 441, 439, 0, 442, 443, 444,
	445, 446, 278, 447, 0, 448, 511, 512, 513, 514,
	0, 455, 0, 449, 450, 515, 451, 516, 0, 452,
	453, 454, 0, 456, 457, 0, 0, 458, 459, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	517, 518, 519, 0, 470, 469, 520, 213, 0, 0,
	0, 471, 472, 521, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 476, 2760, 0, 0,
	0, 225, 227, 226, 228, 229, 477, 478, 230, 479,
	231, 232, 480, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 481, 482, 483, 0, 240, 484, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 485, 486, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 487, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 488, 489, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 490,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 491, 0, 492, 294, 0, 295, 296,
	297, 298, 493, 494, 495, 348, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 496, 308, 307, 309, 310, 311, 497, 0,
	498, 0, 313, 0, 499, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 0, 324,
	323, 0, 325, 500, 0, 326, 327, 0, 0, 328,
	329, 0, 0, 330, 331, 332, 0, 333, 334, 336,
	338, 335, 337, 339, 341, 342, 340, 0, 343, 344,
	346, 345, 0, 0, 0, 347, 0, 501, 502, 349,
	350, 0, 351, 352, 353, 0, 0, 355, 356, 357,
	0, 0, 358, 359, 503, 0, 360, 0, 504, 361,
	354, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	370, 505, 371, 506, 372, 0, 373, 0, 374, 375,
	376, 377, 378, 379, 507, 380, 381, 0, 382, 383,
	384, 385, 386, 0, 388, 389, 390, 387, 391, 392,
	393, 394, 0, 395, 0, 396, 397, 398, 399, 508,
	400, 0, 401, 405, 406, 407, 408, 409, 410, 411,
	0, 417, 418, 412, 414, 415, 416, 413, 419, 420,
	421, 0, 422, 402, 403, 423, 424, 0, 425, 426,
	509, 427, 428, 0, 429, 430, 431, 432, 404, 433,
	437, 438, 434, 435, 436, 510, 0, 440, 441, 439,
	0, 442, 443, 444, 445, 446, 278, 447, 0, 448,
	511, 512, 513, 514, 0, 455, 0, 449, 450, 515,
	451, 516, 0, 452, 453, 454, 0, 456, 457, 0,
	0, 458, 459, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 517, 518, 519, 0, 470, 469,
	520, 213, 0, 0, 0, 471, 472, 521, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	476, 0, 0, 2386, 0, 225, 227, 226, 228, 229,
	477, 478, 230, 479, 231, 232, 480, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 481, 482, 483,
	0, 240, 484, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	485, 486, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 487, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 488, 489, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 490, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 491, 0, 492,
	294, 0, 295, 296, 297, 298, 493, 494, 495, 348,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 496, 308, 307, 309,
	310, 311, 497, 0, 498, 0, 313, 0, 499, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 324, 323, 0, 325, 500, 0, 326,
	327, 0, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 342,
	340, 0, 343, 344, 346, 345, 0, 0, 0, 347,
	0, 501, 502, 349, 350, 0, 351, 352, 353, 0,
	0, 355, 356, 357, 0, 0, 358, 359, 503, 0,
	360, 0, 504, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 505, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 507, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 0, 396,
	397, 398, 399, 508, 400, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 0, 417, 418, 412, 414, 415,
	416, 413, 419, 420, 421, 0, 422, 402, 403, 423,
	424, 0, 425, 426, 509, 427, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 438, 434, 435, 436, 510,
	0, 440, 441, 439, 0, 442, 443, 444, 445, 446,
	278, 447, 0, 448, 511, 512, 513, 514, 0, 455,
	0, 449, 450, 515, 451, 516, 0, 452, 453, 454,
	0, 456, 457, 0, 0, 458, 459, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 517, 518,
	519, 0, 470, 469, 520, 213, 0, 0, 0, 471,
	472, 521, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 476, 0, 0, 2889, 0, 225,
	227, 226, 228, 229, 477, 478, 230, 479, 231, 232,
	480, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 481, 482, 483, 0, 240, 484, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 485, 486, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 487, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 488, 489, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 490, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 491, 0, 492, 294, 0, 295, 296, 297, 298,
	493, 494, 495, 348, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	496, 308, 307, 309, 310, 311, 497, 0, 498, 0,
	313, 0, 499, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 0, 324, 323, 0,
	325, 500, 0, 326, 327, 0, 0, 328, 329, 0,
	0, 330, 331, 332, 0, 333, 334, 336, 338, 335,
	337, 339, 341, 342, 340, 0, 343, 344, 346, 345,
	0, 0, 0, 347, 0, 501, 502, 349, 350, 0,
	351, 352, 353, 0, 0, 355, 356, 357, 0, 0,
	358, 359, 503, 0, 360, 0, 504, 361, 354, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 370, 505,
	371, 506, 372, 0, 373, 0, 374, 375, 376, 377,
	378, 379, 507, 380, 381, 0, 382, 383, 384, 385,
	386, 0, 388, 389, 390, 387, 391, 392, 393, 394,
	0, 395, 0, 396, 397, 398, 399, 508, 400, 0,
	401, 405, 406, 407, 408, 409, 410, 411, 0, 417,
	418, 412, 414, 415, 416, 413, 419, 420, 421, 0,
	422, 402, 403, 423, 424, 0, 425, 426, 509, 427,
	428, 0, 429, 430, 431, 432, 404, 433, 437, 438,
	434, 435, 436, 510, 0, 440, 441, 439, 0, 442,
	443, 444, 445, 446, 278, 447, 0, 448, 511, 512,
	513, 514, 0, 455, 0, 449, 450, 515, 451, 516,
	0, 452, 453, 454, 0, 456, 457, 0, 0, 458,
	459, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 517, 518, 519, 0, 470, 469, 520, 698,
	0, 588, 0, 471, 472, 521, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	476, 1894, 0, 0, 0, 225, 227, 226, 228, 229,
	477, 478, 230, 479, 231, 232, 480, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 481, 482, 483,
	0, 240, 484, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 594, 260, 261, 262,
	485, 486, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 487, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 488, 489, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 490, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 491, 0, 492,
	294, 0, 295, 296, 297, 298, 493, 494, 495, 348,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 496, 308, 307, 309,
	310, 311, 497, 0, 498, 0, 313, 0, 499, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 0, 324, 323, 0, 325, 500, 0, 326,
	327, 0, 0, 328, 329, 0, 0, 330, 331, 332,
	0, 333, 334, 336, 338, 335, 337, 339, 341, 342,
	340, 0, 343, 344, 346, 345, 0, 218, 0, 347,
	0, 501, 502, 349, 350, 0, 351, 352, 353, 0,
	0, 355, 356, 357, 0, 0, 358, 359, 503, 0,
	360, 0, 504, 361, 354, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 370, 505, 371, 506, 372, 0,
	373, 0, 374, 375, 376, 377, 378, 379, 507, 380,
	381, 0, 382, 383, 384, 385, 386, 0, 388, 389,
	390, 387, 391, 392, 393, 394, 0, 395, 0, 396,
	397, 398, 399, 508, 400, 0, 401, 405, 406, 407,
	408, 409, 410, 411, 0, 417, 418, 412, 414, 415,
	416, 413, 419, 420, 421, 0, 422, 402, 403, 423,
	424, 0, 425, 426, 509, 427, 428, 0, 429, 430,
	431, 432, 404, 433, 437, 438, 434, 435, 436, 510,
	0, 440, 441, 439, 593, 442, 443, 444, 445, 446,
	278, 447, 0, 448, 511, 512, 513, 514, 0, 455,
	0, 449, 450, 515, 451, 516, 0, 452, 453, 454,
	0, 456, 457, 0, 0, 458, 459, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 517, 518,
	519, 0, 470, 469, 520, 0, 587, 0, 588, 471,
	472, 521, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	597, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 594, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 218, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 593, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 588, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 597, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 594, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 493, 494, 495,
	348, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 0, 499,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 0,
	326, 327, 0, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 0, 343, 344, 346, 345, 0, 218, 0,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	0, 360, 0, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 0,
	1924, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 0, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 593, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 588, 0, 0, 0,
	471, 472, 521, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 597, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 594, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 218, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 593,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	213, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 597, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 218, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 0, 0, 0, 0, 471, 472,
	521, 473, 474, 475, 1353, 0, 1176, 1175, 0, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 597,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 1080,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 955,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 216,
	0, 0, 0, 0, 0, 1352, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 956, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 958, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 957,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 959, 499, 960, 314, 315, 316, 961, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 962, 326, 327, 963, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 964, 343, 344, 346,
	345, 0, 0, 965, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 966, 360, 967, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 1351, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 968, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 1350, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 969, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	1317, 0, 1176, 1175, 0, 0, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 1080, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 955, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 956, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 1316, 494, 495,
	348, 958, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 957, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 959, 499,
	960, 314, 315, 316, 961, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 962,
	326, 327, 963, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 964, 343, 344, 346, 345, 0, 0, 965,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	966, 360, 967, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 968,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 969, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 0, 0, 0, 0,
	471, 472, 521, 473, 474, 475, 1313, 0, 1176, 1175,
	0, 0, 0, 0, 1173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 1080, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 1312, 494, 495, 348, 958, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 957, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 959, 499, 960, 314, 315, 316,
	961, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 964, 343,
	344, 346, 345, 0, 0, 965, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 969, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 1251, 0, 1176, 1175, 0, 0, 0, 0,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 1080, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 955, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 956, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 1250,
	494, 495, 348, 958, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 957, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	959, 499, 960, 314, 315, 316, 961, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 962, 326, 327, 963, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 964, 343, 344, 346, 345, 0,
	0, 965, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 966, 360, 967, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 968, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 969, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 1248, 0,
	1176, 1175, 0, 0, 0, 0, 1173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 1080, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 955, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 956, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 1247, 494, 495, 348, 958,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 957, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 959, 499, 960, 314,
	315, 316, 961, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 962, 326, 327,
	963, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	964, 343, 344, 346, 345, 0, 0, 965, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 966, 360,
	967, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 968, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	969, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 0, 0, 0, 0, 471, 472,
	521, 473, 474, 475, 1169, 0, 1176, 1175, 0, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 1080,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 955,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 956, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 1171, 494, 495, 348, 958, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 957,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 959, 499, 960, 314, 315, 316, 961, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 962, 326, 327, 963, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 964, 343, 344, 346,
	345, 0, 0, 965, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 966, 360, 967, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 968, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 969, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	1176, 1175, 0, 0, 0, 0, 1173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 1080, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 955, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 956, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 958,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 957, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 959, 499, 960, 314,
	315, 316, 961, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 962, 326, 327,
	963, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	964, 343, 344, 346, 345, 0, 0, 965, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 966, 360,
	967, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 968, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	969, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 1176, 1175, 0, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 1080, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 955, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 1717, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 956, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 958, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 957, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	959, 499, 960, 314, 315, 316, 961, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 962, 326, 327, 963, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 964, 343, 344, 346, 345, 0,
	0, 965, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 966, 360, 967, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 968, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 969, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 1176, 1175,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 1080, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 958, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 957, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 959, 499, 960, 314, 315, 316,
	961, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 964, 343,
	344, 346, 345, 0, 0, 965, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 969, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 1176, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 1080, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 955, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 956,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 958, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 957, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 959, 499, 960, 314, 315, 316,
	961, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 962, 326, 327, 963, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 964, 343,
	344, 346, 345, 0, 0, 965, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 966, 360, 967, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 968, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 969, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 2275, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 2272, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 2422, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 2278, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 2419, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 2421, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 2418, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 2277, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 2420, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 2275, 240, 484,
	0, 0, 2269, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 2272, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 2278, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 2268, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 2277, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 2276, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 1406, 0, 213, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 1409, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 1407, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 1408, 469, 520, 1164, 0,
	213, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 1166, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 218, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 1010,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 1161, 0, 213, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 1163, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 218, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 1010, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	1068, 0, 213, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 1070, 494, 495,
	348, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 0, 499,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 0,
	326, 327, 0, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 0, 343, 344, 346, 345, 0, 218, 0,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 1010, 355, 356, 357, 0, 0, 358, 359, 503,
	0, 360, 0, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 0,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 0, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 550, 0, 213, 0,
	471, 472, 521, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 549, 223,
	539, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	542, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 543, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 544, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 538, 0, 213, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 539, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 542, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 543, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	0, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 544, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 213, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 1010, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 2351, 0,
	213, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 218, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 1903, 0, 213, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 218, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 213, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 218, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 1836,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	1829, 0, 213, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 1828, 494, 495,
	348, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 0, 499,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 0,
	326, 327, 0, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 0, 343, 344, 346, 345, 0, 218, 0,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	0, 360, 0, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 0,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 0, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 1824, 0, 213, 0,
	471, 472, 521, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 1826, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 218, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 1306, 0, 213, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 1305,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 1303, 0,
	213, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 1302, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 218, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 1300, 0, 213, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 1299, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 218, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	1296, 0, 213, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 1295, 494, 495,
	348, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 0, 499,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 0,
	326, 327, 0, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 0, 343, 344, 346, 345, 0, 218, 0,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	0, 360, 0, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 0,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 0, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 1271, 0, 213, 0,
	471, 472, 521, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 218, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 1186, 0, 213, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 1188,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 213, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 213, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 542, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 543, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	0, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 544, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 213, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 1931,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 213, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 1929,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 213, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 1927,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	218, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 690, 0,
	213, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 689, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 0, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 688, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	213, 470, 469, 520, 0, 0, 0, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 2422, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 0, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 3220, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 529, 0, 213, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 528, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 0, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 527, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 213, 470, 469, 520,
	0, 0, 0, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 2210, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 0, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	213, 2409, 0, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 0, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	213, 470, 469, 520, 0, 0, 0, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 3013, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 0, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 213, 2409, 0, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	0, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 2406, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 213, 470, 469, 520, 0, 0,
	0, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 219, 220, 221, 222, 223, 1910, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	0, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 1901, 0,
	213, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 0, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 570, 0, 213, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 1046, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 1044, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 571, 0, 343, 344, 346,
	345, 0, 0, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 567, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 1047, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 566,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	1848, 0, 213, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 1847, 494, 495,
	348, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 0, 499,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 0,
	326, 327, 0, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 0, 343, 344, 346, 345, 0, 0, 0,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	0, 360, 0, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 0,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 0, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 570, 0, 213, 0,
	471, 472, 521, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 560, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 571, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 567, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	1327, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 566, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 1310, 0, 213, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 240, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 1309,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 329, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 340, 0, 343, 344, 346, 345, 0,
	0, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 508, 400, 0, 401,
	405, 406, 407, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 420, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 511, 512, 513,
	514, 0, 455, 0, 449, 450, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 1259, 0,
	213, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 1258, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 0, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 405, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 1243, 0, 213, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 0, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	1180, 0, 213, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 493, 494, 495,
	348, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 0, 499,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 0,
	326, 327, 0, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 0, 343, 344, 346, 345, 0, 0, 0,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	0, 360, 0, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 0,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 0, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 570, 0, 213, 0,
	471, 472, 521, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 1046, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 1044, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 571, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 567, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	1047, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 566, 512, 513, 514, 0, 455, 0, 449, 1045,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	1028, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 570, 0, 213, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 477, 478, 230, 479, 231, 232, 480,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	481, 482, 483, 0, 560, 484, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 558, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 485, 486, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 487, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 488, 489, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 490, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	491, 0, 492, 294, 0, 295, 296, 297, 298, 493,
	494, 495, 348, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 496,
	308, 307, 309, 310, 311, 497, 0, 498, 0, 313,
	0, 499, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 0, 324, 323, 0, 325,
	500, 0, 326, 327, 0, 0, 328, 559, 0, 0,
	330, 331, 332, 0, 333, 334, 336, 338, 335, 337,
	339, 341, 342, 571, 0, 343, 344, 346, 345, 0,
	0, 0, 347, 0, 501, 502, 349, 350, 0, 351,
	352, 353, 0, 0, 355, 356, 357, 0, 0, 358,
	359, 503, 0, 360, 0, 504, 361, 354, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 370, 505, 371,
	506, 372, 0, 373, 0, 374, 375, 376, 377, 378,
	379, 507, 380, 381, 0, 382, 383, 384, 385, 386,
	0, 388, 389, 390, 387, 391, 392, 393, 394, 0,
	395, 0, 396, 397, 398, 399, 561, 400, 0, 401,
	405, 406, 567, 408, 409, 410, 411, 0, 417, 418,
	412, 414, 415, 416, 413, 419, 562, 421, 0, 422,
	402, 403, 423, 424, 0, 425, 426, 509, 427, 428,
	0, 429, 430, 431, 432, 404, 433, 437, 438, 434,
	435, 436, 510, 0, 440, 441, 439, 0, 442, 443,
	444, 445, 446, 278, 447, 0, 448, 566, 512, 513,
	514, 0, 455, 0, 449, 564, 515, 451, 516, 0,
	452, 453, 454, 0, 456, 457, 0, 0, 458, 459,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 517, 518, 519, 0, 470, 469, 520, 554, 0,
	213, 0, 471, 472, 521, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 477,
	478, 230, 479, 231, 232, 480, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 481, 482, 483, 0,
	240, 484, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 485,
	486, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	487, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	488, 489, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 490, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 491, 0, 492, 294,
	0, 295, 296, 297, 298, 493, 494, 495, 348, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 496, 308, 307, 309, 310,
	311, 497, 0, 498, 0, 313, 0, 499, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 0, 324, 323, 0, 325, 500, 0, 326, 327,
	0, 0, 328, 329, 0, 0, 330, 331, 332, 0,
	333, 334, 336, 338, 335, 337, 339, 341, 342, 340,
	0, 343, 344, 346, 345, 0, 0, 0, 347, 0,
	501, 502, 349, 350, 0, 351, 352, 353, 0, 0,
	355, 356, 357, 0, 0, 358, 359, 503, 0, 360,
	0, 504, 361, 354, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 370, 505, 371, 506, 372, 0, 373,
	0, 374, 375, 376, 377, 378, 379, 507, 380, 381,
	0, 382, 383, 384, 385, 386, 0, 388, 389, 390,
	387, 391, 392, 393, 394, 0, 395, 0, 396, 397,
	398, 399, 508, 400, 0, 401, 555, 406, 407, 408,
	409, 410, 411, 0, 417, 418, 412, 414, 415, 416,
	413, 419, 420, 421, 0, 422, 402, 403, 423, 424,
	0, 425, 426, 509, 427, 428, 0, 429, 430, 431,
	432, 404, 433, 437, 438, 434, 435, 436, 510, 0,
	440, 441, 439, 0, 442, 443, 444, 445, 446, 278,
	447, 0, 448, 511, 512, 513, 514, 0, 455, 0,
	449, 450, 515, 451, 516, 0, 452, 453, 454, 0,
	456, 457, 0, 0, 458, 459, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 517, 518, 519,
	0, 470, 469, 520, 552, 0, 213, 0, 471, 472,
	521, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 477, 478, 230, 479, 231,
	232, 480, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 481, 482, 483, 0, 240, 484, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 485, 486, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 487, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 488, 489, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 490, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 491, 0, 492, 294, 0, 295, 296, 297,
	298, 493, 494, 495, 348, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 496, 308, 307, 309, 310, 311, 497, 0, 498,
	0, 313, 0, 499, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 0, 324, 323,
	0, 325, 500, 0, 326, 327, 0, 0, 328, 329,
	0, 0, 330, 331, 332, 0, 333, 334, 336, 338,
	335, 337, 339, 341, 342, 340, 0, 343, 344, 346,
	345, 0, 0, 0, 347, 0, 501, 502, 349, 350,
	0, 351, 352, 353, 0, 0, 355, 356, 357, 0,
	0, 358, 359, 503, 0, 360, 0, 504, 361, 354,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 370,
	505, 371, 506, 372, 0, 373, 0, 374, 375, 376,
	377, 378, 379, 507, 380, 381, 0, 382, 383, 384,
	385, 386, 0, 388, 389, 390, 387, 391, 392, 393,
	394, 0, 395, 0, 396, 397, 398, 399, 508, 400,
	0, 401, 405, 406, 407, 408, 409, 410, 411, 0,
	417, 418, 412, 414, 415, 416, 413, 419, 420, 421,
	0, 422, 402, 403, 423, 424, 0, 425, 426, 509,
	427, 428, 0, 429, 430, 431, 432, 404, 433, 437,
	438, 434, 435, 436, 510, 0, 440, 441, 439, 0,
	442, 443, 444, 445, 446, 278, 447, 0, 448, 511,
	512, 513, 514, 0, 455, 0, 449, 450, 515, 451,
	516, 0, 452, 453, 454, 0, 456, 457, 0, 0,
	458, 459, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 517, 518, 519, 0, 470, 469, 520,
	546, 0, 213, 0, 471, 472, 521, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 477, 478, 230, 479, 231, 232, 480, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 481, 482,
	483, 0, 240, 484, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 485, 486, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 487, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 488, 489, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 490, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 491, 0,
	492, 294, 0, 295, 296, 297, 298, 493, 494, 495,
	348, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 496, 308, 307,
	309, 310, 311, 497, 0, 498, 0, 313, 0, 499,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 0, 324, 323, 0, 325, 500, 0,
	326, 327, 0, 0, 328, 329, 0, 0, 330, 331,
	332, 0, 333, 334, 336, 338, 335, 337, 339, 341,
	342, 340, 0, 343, 344, 346, 345, 0, 0, 0,
	347, 0, 501, 502, 349, 350, 0, 351, 352, 353,
	0, 0, 355, 356, 357, 0, 0, 358, 359, 503,
	0, 360, 0, 504, 361, 354, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 370, 505, 371, 506, 372,
	0, 373, 0, 374, 375, 376, 377, 378, 379, 507,
	380, 381, 0, 382, 383, 384, 385, 386, 0, 388,
	389, 390, 387, 391, 392, 393, 394, 0, 395, 0,
	396, 397, 398, 399, 508, 400, 0, 401, 405, 406,
	407, 408, 409, 410, 411, 0, 417, 418, 412, 414,
	415, 416, 413, 419, 420, 421, 0, 422, 402, 403,
	423, 424, 0, 425, 426, 509, 427, 428, 0, 429,
	430, 431, 432, 404, 433, 437, 438, 434, 435, 436,
	510, 0, 440, 441, 439, 0, 442, 443, 444, 445,
	446, 278, 447, 0, 448, 511, 512, 513, 514, 0,
	455, 0, 449, 450, 515, 451, 516, 0, 452, 453,
	454, 0, 456, 457, 0, 0, 458, 459, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 517,
	518, 519, 0, 470, 469, 520, 524, 0, 213, 0,
	471, 472, 521, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 2700, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 2698, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 2686, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 2369, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 555, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 1860,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 0, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 1279, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 1221, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 294, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 377, 378, 379, 507, 984, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 400, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 213, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 477, 478, 230,
	479, 231, 232, 480, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 481, 482, 483, 0, 240, 484,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 485, 486, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 487, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 488, 489,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	490, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 491, 0, 492, 0, 0, 295,
	296, 297, 298, 493, 494, 495, 348, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 496, 308, 307, 309, 310, 311, 497,
	0, 498, 0, 313, 0, 499, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 0,
	324, 323, 0, 325, 500, 0, 326, 327, 0, 0,
	328, 329, 0, 0, 330, 331, 332, 0, 333, 334,
	336, 338, 335, 337, 339, 341, 342, 340, 0, 343,
	344, 346, 345, 0, 0, 0, 347, 0, 501, 502,
	349, 350, 0, 351, 352, 353, 0, 0, 355, 356,
	357, 0, 0, 358, 359, 503, 0, 360, 0, 504,
	361, 354, 362, 363, 0, 365, 366, 367, 368, 0,
	369, 370, 505, 371, 506, 372, 0, 373, 0, 374,
	375, 376, 0, 378, 379, 507, 380, 381, 0, 382,
	383, 384, 385, 386, 0, 388, 389, 390, 387, 391,
	392, 393, 394, 0, 395, 0, 396, 397, 398, 399,
	508, 0, 0, 401, 405, 406, 407, 408, 409, 410,
	411, 0, 417, 418, 412, 414, 415, 416, 413, 419,
	420, 421, 0, 422, 402, 403, 423, 424, 0, 425,
	426, 509, 427, 428, 0, 429, 430, 431, 432, 404,
	433, 437, 438, 434, 435, 436, 510, 0, 440, 441,
	439, 0, 442, 443, 444, 445, 446, 278, 447, 0,
	448, 511, 512, 513, 514, 0, 455, 0, 449, 450,
	515, 451, 516, 0, 452, 453, 454, 0, 456, 457,
	0, 0, 458, 459, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 517, 518, 519, 0, 470,
	469, 520, 0, 0, 0, 0, 471, 472, 521, 473,
	474, 475, 1455, 1456, 0, 1488, 1489, 1490, 1498, 1499,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 1486, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 1457, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 1491, 1486, 0,
	0, 0, 0, 1474, 0, 1458, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 1481, 1482, 1483, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 1505, 0, 0,
	0, 1485, 1487, 0, 0, 0, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 1501, 0, 1502, 0, 0, 0, 0, 0, 0,
	1472, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 1505, 0, 1493, 0, 1485, 1487, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 1502,
	0, 0, 1503, 0, 0, 0, 1472, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 1456, 0, 1488, 1489, 1490,
	1498, 1499, 1500, 0, 0, 1496, 0, 1484, 0, 0,
	0, 0, 0, 1491, 1486, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 1479, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1496, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 0, 1469, 1470, 1476, 1497, 1475, 1471, 0, 1468,
	1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 2555, 0, 0, 0,
	0, 0, 1480, 1481, 1482, 1483, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 1494, 0, 0, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 0, 0, 1495, 0, 0, 1505,
	0, 0, 2552, 1485, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 1502, 0, 0, 0, 0,
	0, 0, 1472, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 1455, 1456, 0, 1488, 1489, 1490, 1498,
	1499, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 1486, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 1479, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 1474, 1455, 1456, 0, 1488, 1489,
	1490, 1498, 1499, 1500, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 1491, 1486, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 1480, 1481, 1482, 1483, 0, 0, 0, 0, 1477,
	0, 1463, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 1505, 0,
	0, 1494, 1485, 1487, 1469, 1470, 1476, 1497, 1475, 1471,
	0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	0, 0, 1501, 0, 1502, 0, 0, 0, 2551, 0,
	0, 1472, 1473, 1480, 1481, 1482, 1483, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	1505, 0, 0, 1503, 1485, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 1501, 0, 1502, 0, 0, 0,
	0, 0, 0, 1472, 1473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 1455, 1456, 0, 1488, 1489, 1490,
	1498, 1499, 1500, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 1491, 1486, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 1479, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 1469, 1470, 1476, 1497, 1475, 1471, 0,
	1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 2550, 0, 0,
	0, 0, 1480, 1481, 1482, 1483, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 1505,
	0, 0, 1494, 1485, 1487, 1469, 1470, 1476, 1497, 1475,
	1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464,
	1465, 0, 0, 1501, 0, 1502, 0, 0, 0, 2085,
	0, 0, 1472, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 1491, 1486, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	1504, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 1456, 0, 1488, 1489, 1490,
	1498, 1499, 1500, 1457, 0, 0, 0, 1496, 0, 0,
	0, 0, 1477, 1491, 1486, 0, 0, 0, 0, 1474,
	0, 1458, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 1494, 0, 0, 1469, 1470, 1476, 1497, 1475, 1471,
	0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	1495, 0, 0, 1505, 3462, 0, 0, 1485, 1487, 0,
	0, 0, 1480, 1481, 1482, 1483, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 1501, 0, 1502,
	0, 0, 0, 0, 0, 0, 1472, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 1505,
	0, 1493, 0, 1485, 1487, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 1502, 0, 0, 1503, 0,
	0, 0, 1472, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0,
	0, 1496, 0, 1484, 0, 0, 0, 1491, 1486, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	1504, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 1496, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 0, 0, 0, 0, 3391, 0,
	0, 0, 0, 0, 0, 0, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 1494, 0, 0, 1469, 1470, 1476, 1497, 1475, 1471,
	0, 1468, 1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465,
	1495, 0, 0, 1505, 3390, 0, 0, 1485, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 1502,
	0, 0, 0, 0, 0, 0, 1472, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 1456, 0, 1488, 1489, 1490, 1498, 1499,
	1500, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 1491, 1486, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 1504, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 1457, 0, 0,
	0, 1496, 0, 0, 0, 0, 1477, 1491, 1486, 0,
	0, 0, 0, 1474, 0, 1458, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 1481, 1482, 1483, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 1494, 0, 0, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 1495, 0, 0, 1505, 3281, 0,
	0, 1485, 1487, 0, 0, 0, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 1501, 0, 1502, 0, 0, 0, 0, 0, 0,
	1472, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 1505, 0, 1493, 0, 1485, 1487, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 1502,
	0, 0, 1503, 0, 0, 0, 1472, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 1456, 0, 1488, 1489, 1490, 1498, 1499,
	1500, 0, 0, 0, 0, 1496, 0, 1484, 0, 0,
	0, 1491, 1486, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 1504, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 1496, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 0, 1469, 1470, 1476, 1497, 1475, 1471, 0, 1468,
	1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 0, 0,
	0, 0, 3182, 0, 0, 0, 0, 0, 0, 0,
	1480, 1481, 1482, 1483, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 1494, 0, 0, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 1495, 0, 0, 1505, 3134, 0,
	0, 1485, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 1502, 0, 0, 0, 0, 0, 0,
	1472, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1456, 0, 1488,
	1489, 1490, 1498, 1499, 1500, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 1491, 1486, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 1504, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 1456, 0, 1488, 1489, 1490, 1498, 1499,
	1500, 1457, 0, 0, 0, 1496, 0, 0, 0, 0,
	1477, 1491, 1486, 0, 0, 0, 0, 1474, 0, 1458,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 1481, 1482, 1483, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 1494,
	0, 0, 1469, 1470, 1476, 1497, 1475, 1471, 0, 1468,
	1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 1495, 0,
	0, 1505, 3133, 0, 0, 1485, 1487, 0, 0, 0,
	1480, 1481, 1482, 1483, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 1501, 0, 1502, 0, 0,
	0, 0, 0, 0, 1472, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 1505, 0, 1493,
	0, 1485, 1487, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 1502, 0, 0, 1503, 0, 0, 0,
	1472, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1456, 0, 1488,
	1489, 1490, 1498, 1499, 1500, 0, 0, 0, 0, 1496,
	0, 1484, 0, 0, 0, 1491, 1486, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 1504, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 1496, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 1469, 1470, 1476, 1497,
	1475, 1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462,
	1464, 1465, 0, 0, 0, 0, 3132, 0, 0, 0,
	0, 0, 0, 0, 1480, 1481, 1482, 1483, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 1494,
	0, 0, 1469, 1470, 1476, 1497, 1475, 1471, 0, 1468,
	1466, 1467, 1459, 1460, 1461, 1462, 1464, 1465, 1495, 0,
	0, 1505, 3099, 0, 0, 1485, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 1502, 0, 0,
	0, 0, 0, 0, 1472, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 1456, 0, 1488, 1489, 1490, 1498, 1499, 1500, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 1491,
	1486, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 1504, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1456, 0, 1488,
	1489, 1490, 1498, 1499, 1500, 1457, 0, 0, 0, 1496,
	0, 0, 0, 0, 1477, 1491, 1486, 0, 0, 0,
	0, 1474, 0, 1458, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 1481,
	1482, 1483, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 1494, 0, 0, 1469, 1470, 1476, 1497,
	1475, 1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462,
	1464, 1465, 1495, 0, 0, 1505, 2896, 0, 0, 1485,
	1487, 0, 0, 0, 1480, 1481, 1482, 1483, 0, 0,
	0, 0, 0, 0, 1463, 3564, 0, 0, 0, 1501,
	0, 1502, 0, 0, 0, 0, 0, 0, 1472, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 1505, 0, 1493, 0, 1485, 1487, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 1502, 0, 0,
	1503, 0, 0, 0, 1472, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 3563, 0, 0, 0, 0, 0,
	1455, 1456, 0, 1488, 1489, 1490, 1498, 1499, 1500, 0,
	0, 0, 0, 1496, 0, 1484, 0, 0, 0, 1491,
	1486, 0, 0, 0, 0, 2478, 0, 1458, 0, 0,
	0, 0, 1504, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 1496,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 2479,
	1469, 1470, 1476, 1497, 1475, 1471, 0, 1468, 1466, 1467,
	1459, 1460, 1461, 1462, 1464, 1465, 0, 0, 2507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 1481,
	1482, 1483, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 1494, 0, 0, 1469, 1470, 1476, 1497,
	1475, 1471, 0, 1468, 1466, 1467, 1459, 1460, 1461, 1462,
	1464, 1465, 1495, 0, 0, 1505, 0, 0, 0, 1485,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 1502, 0, 0, 0, 0, 0, 0, 1472, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 1455,
	1456, 0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 1486,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 1479, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 1481, 1482,
	1483, 0, 0, 0, 0, 0, 0, 1463, 0, 2595,
	0, 0, 2594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 1505, 0, 0, 1494, 1485, 1487,
	1469, 1470, 1476, 1497, 1475, 1471, 0, 1468, 1466, 1467,
	1459, 1460, 1461, 1462, 1464, 1465, 0, 0, 1501, 0,
	1502, 0, 0, 0, 0, 0, 0, 1472, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2177, 0, 0, 0, 1492, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 1486, 0,
	0, 0, 2176, 0, 0, 1458, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 1479, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474,
	1455, 1456, 0, 1488, 1489, 1490, 1498, 1499, 1500, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 1491,
	1486, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 1477, 0, 1463, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 1505, 0, 0, 1494, 1485, 1487, 1469,
	1470, 1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 0, 0, 1501, 0, 1502,
	0, 0, 0, 0, 0, 0, 1472, 1473, 1480, 1481,
	1482, 1483, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 1505, 0, 0, 1503, 1485,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 1501,
	0, 1502, 0, 0, 0, 0, 0, 0, 1472, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 827, 0, 1455,
	1456, 0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 1491, 1486,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 1479, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 1481, 1482,
	1483, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 1505, 0, 0, 1494, 1485, 1487,
	1469, 1470, 1476, 1497, 1475, 1471, 0, 1468, 1466, 1467,
	1459, 1460, 1461, 1462, 1464, 1465, 0, 0, 1501, 0,
	1502, 0, 0, 0, 0, 0, 0, 1472, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 1486, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 1479, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 2601, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 1505, 0, 0, 1494, 1485, 1487, 1469,
	1470, 1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 0, 0, 1501, 0, 1502,
	0, 0, 0, 0, 0, 0, 1472, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 1455, 1456, 0,
	1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 1486, 0, 0,
	0, 2596, 0, 0, 1458, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 1479, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 1474, 1455,
	1456, 0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 1491, 1486,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 1480, 1481, 1482, 1483, 0,
	0, 0, 0, 1477, 0, 1463, 0, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 1505, 0, 0, 1494, 1485, 1487, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 0, 0, 1501, 0, 1502, 0,
	0, 0, 0, 0, 0, 1472, 1473, 1480, 1481, 1482,
	1483, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 1505, 0, 0, 1503, 1485, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 1501, 0,
	1502, 0, 0, 0, 0, 0, 0, 1472, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0,
	1496, 0, 0, 2563, 0, 0, 0, 1491, 1486, 0,
	0, 0, 2549, 0, 0, 1458, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 1479, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 1469, 1470, 1476,
	1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460, 1461,
	1462, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 1505, 0, 0, 1494, 1485, 1487, 1469,
	1470, 1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 0, 0, 1501, 0, 1502,
	0, 0, 0, 0, 0, 0, 1472, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 1455, 1456, 0,
	1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 1486, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 1479, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 1474, 1455,
	1456, 0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 1491, 1486,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 1480, 1481, 1482, 1483, 0,
	0, 0, 0, 1477, 0, 1463, 0, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 1505, 0, 0, 1494, 1485, 1487, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 0, 0, 1501, 0, 1502, 0,
	0, 0, 0, 0, 0, 1472, 1473, 1480, 1481, 1482,
	1483, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 1505, 0, 0, 1503, 1485, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 1501, 0,
	1502, 0, 0, 0, 0, 0, 0, 1472, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1456,
	0, 1488, 1489, 1490, 1498, 1499, 1500, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 1479, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 1469, 1470, 1476,
	1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460, 1461,
	1462, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 1481, 1482, 1483,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1670, 0,
	1495, 0, 0, 1505, 0, 0, 1494, 1485, 1487, 1469,
	1470, 1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459,
	1460, 1461, 1462, 1464, 1465, 0, 0, 1501, 0, 1502,
	0, 0, 0, 0, 0, 0, 1472, 1473, 1687, 1664,
	1671, 1654, 1697, 1696, 0, 0, 1656, 1655, 0, 0,
	0, 1493, 0, 0, 1707, 1708, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1698, 0, 1694, 1693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1692,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	1691, 1689, 1690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1666, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 1680, 1669, 1682, 1684, 1685, 1686, 1681,
	0, 1674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1703, 1704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1695,
	0, 0, 0, 1667, 0, 1668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 1469, 1470,
	1476, 1497, 1475, 1471, 0, 1468, 1466, 1467, 1459, 1460,
	1461, 1462, 1464, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1688, 0, 0, 0, 1677,
	1675, 1676, 1679, 1678, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1659, 1660, 1662, 1663, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1683, 1661, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1657, 0,
	0, 1699, 1700, 1701, 1702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1665, 0, 0, 0, 0, 1672, 1705,
}
var sqlPact = [...]int{

	6800, -1000, -1000, -1000, -1000, -1000, -1000, 164, 163, 161,
	160, 159, 158, 157, 155, -1000, -1000, -1000, 154, -1000,
	-1000, 153, -1000, 151, 150, 147, 146, -1000, 145, 144,
	143, -1000, -1000, -1000, -1000, 142, 141, 138, 53860, 1792,
	65304, 56812, 1824, 48340, 64878, 47914, 64452, 64026, 137, -1000,
	63600, 133, 129, 128, -1000, -1000, 125, 1971, 39354, 124,
	115, 114, 1853, 113, 112, -1000, 111, -1000, 8129, 1287,
	-1000, 109, 107, -1000, 8977, 4388, 55966, 2199, 106, 105,
	38927, 2177, 2234, -1000, -1000, 1632, -1000, -1000, 103, 101,
	98, 97, 96, 92, 91, 90, 89, -1000, 88, 87,
	85, 84, 82, 81, 80, -1000, 79, 77, 76, 75,
	74, 73, 70, 69, 68, 67, 64, -1000, 8403, 1522,
	1402, 1399, 1383, 1354, 1418, 873, 63, 59, 58, 57,
	56, 55, 54, -1000, -1000, 53, 52, 49, 48, -1000,
	47, 45, 152, 44, 42, 37, 34, 33, 3619, 2217,
	1376, 972, 19434, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 69504, 65724, 29, -115,
	28, -1000, 2583, 855, 32523, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 411, -1000, -1000, -1000, 246,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1474, 652, -1000, -1000, -1000, 63174, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1791, -100, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 651, -1000, 1789, 229, 1682,
	-1000, -1000, -1000, -1000, -1000, 65724, -1000, -1000, 2925, 2924,
	1674, 650, 62754, -1000, 1281, -1000, 799, 22140, -1000, 1011,
	-1000, 22140, 242, -1000, -1000, -1000, -1000, -1000, 47488, 15834,
	47062, 46636, 43242, 62328, 15398, 53440, 1092, -1000, -1000, -1000,
	-1000, -1000, 9, 40626, 65724, -1000, 240, -1000, -1000, -1000,
	-1000, -1000, -1000, 28558, 969, 28097, 623, 27636, 560, -1000,
	-1000, -1000, -1000, 2923, 2921, 951, 2918, 2525, 69084, 1472,
	2917, 1431, 1016, 891, 2913, 2911, 2906, 2905, 2902, 2901,
	2899, 1252, 61902, 2258, 42806, 42370, 53860, 53860, 2027, 61476,
	-1000, -1000, 1131, 1112, -1000, -1000, -1000, -1000, 2433, 2233,
	2231, 53014, -1000, -1000, 2898, 2896, 2895, 2894, 2891, 68664,
	1428, 2889, 1929, 2886, 2884, 2883, 2881, 2880, 2879, 2877,
	2876, 2875, -1000, 52588, 52162, 51736, 51310, 61050, 41934, 41498,
	-1000, -1000, -1000, 34223, 7745, 7058, 60624, 35531, 53860, 53860,
	-1000, -1000, 29007, 172, -1000, -1000, -1000, 2202, -1000, 29007,
	172, -1000, 65724, -1000, 2251, 1537, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1905, 1320, 2751, 41062, 1659,
	1194, 2432, 2420, 1242, 1946, 2414, 2382, 2349, 2329, 2324,
	1409, 1980, 488, 18973, 1260, 1235, 2311, 2298, 2773, 1739,
	46210, 2874, 2873, 2562, 2283, 2261, 2196, -1000, -1000, -1000,
	-1000, 1203, -1000, -1000, 48760, -1000, -1000, 1087, -1000, -1000,
	1087, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1091, 67824,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1594, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1460, -1000, 1635, -1000, -1000,
	1808, 1133, 2217, 1884, 2552, 2552, 2552, 2629, 401, 382,
	-1000, 152, -1000, -1000, 75686, -1000, -1000, 29007, 29007, 29007,
	29007, 29007, 1634, -1000, 648, -1000, -1000, 692, -1000, 647,
	558, -1000, -1000, -1000, -1000, -1000, -1000, 646, 2775, -1000,
	509, -1000, -1000, -1000, -1000, 2734, -1000, 18063, -1000, -1000,
	-1000, 415, 644, 29007, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	234, 806, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 545, 1520, 543, 543,
	543, -1000, -1000, 884, -1000, -1000, -1000, 262, 541, 258,
	535, -1000, -1000, -1000, -1000, 2250, 639, 636, -1000, 634,
	633, 630, -1000, -1000, -1000, 629, 626, 622, 619, 618,
	615, 614, 612, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	882, -1000, 611, 609, 603, 601, 600, 599, 592, 589,
	585, -1000, -1000, 8, 65724, -1000, 411, 8, -1000, -1000,
	583, -1000, 22589, 22589, 22589, -1000, -1000, 1786, 29007, -1000,
	2546, -1000, 649, 11, 738, 33371, -1000, 31671, 738, 693,
	36805, -1000, 2195, -1000, -1000, 573, 224, -1000, -1000, 2189,
	65724, 16268, 65724, 53860, 53860, 2469, 29007, -1000, -1000, 40202,
	65724, 54280, 2690, 76184, 40202, 65724, 2243, -1000, -1000, -1000,
	65724, -1000, 29007, -1000, 2688, 1181, 44100, 2650, -8, -1000,
	-1000, -1000, -1000, -1000, -1000, 1914, 1954, 963, 1806, 1245,
	-1000, 22140, 2518, -1000, -1000, -1000, 211, 16268, -1000, 2578,
	2447, 1169, -1000, 1805, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1478, 2443, -1000, 1760, 2442, 1469, -1000, -1000,
	853, 2441, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1685, -1000, -1000, 2538, -1000, -1000, 1340, 2439, 15,
	-1000, -1000, 34663, 40626, 3, -1000, -1000, -32, -1000, 14962,
	75686, -1000, -1000, -1000, 75686, 743, -1000, -1000, 2436, -1000,
	75686, 737, -1000, -1000, 2435, -1000, -1000, -1000, 2868, -1000,
	2866, 1868, 2864, 2863, 2862, -1000, 1253, 1534, 2860, -1000,
	2858, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50884, 50458,
	887, -1000, 1765, -1000, -1000, 50032, 833, 1866, -1000, -1000,
	1863, -1000, 820, -1000, 2857, 60198, 2050, 833, 1861, -1000,
	-1000, -1000, -1000, -1000, 53860, -1000, 53860, -1000, 53860, -1000,
	1306, -1000, 68244, 11, -1000, -1000, -1000, -1000, -1000, 2427,
	2855, 2854, 2853, -1000, 65724, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 178, 2425, -1000, -1000, 178, 2424,
	-1000, 178, 2418, -1000, 176, 2410, -1000, -1000, 1730, 2405,
	-1000, -69, 2402, -1000, -1000, -69, 2401, -1000, -11, -1000,
	-1000, -1000, 855, -1000, 33797, -1000, 33797, 59772, 43676, 826,
	595, 38501, 75686, -1000, 34663, 75686, -1000, 43676, 50032, -1000,
	59346, 49612, -1000, -1000, 1151, 1950, -1000, -1000, -1000, -1000,
	43676, 43676, 43676, -1000, 58920, -1000, 1667, 1406, 2542, 53860,
	-1000, 1527, -1000, -1000, -1000, 2564, 2241, -1000, 39778, 55540,
	-1000, 55120, -1000, 54700, -1000, 53860, -1000, 53860, -1000, 2852,
	2848, 2847, -1000, 2846, 2555, 75686, 2547, -1000, 2377, 1421,
	1364, 65724, -1000, -1000, 65724, -1000, 65724, -1000, -1000, -1000,
	1910, -1000, -1000, -1000, -1000, 53860, -1000, -1000, -1000, -1000,
	-1000, -1000, 2237, -1000, 1351, -1000, 1524, -1000, 1148, -1000,
	-1000, 182, -1000, -1000, -8, -1000, 67824, -1000, -1000, 2217,
	1884, -1000, 65724, -1000, 1326, 53860, -1000, 1953, -1000, 1230,
	-1000, 2217, 1798, 1996, 27175, 1973, 29007, 152, -1000, -1000,
	152, 152, 21691, -1000, -1000, 76184, 76184, 16268, 1105, 29007,
	29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007,
	29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007,
	29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007, 29007,
	29007, 29007, 29007, 29007, 1844, 29007, 1085, 29007, 29007, 29007,
	29007, 2335, -1000, -1000, 1565, 435, 1705, -1000, 2727, 2727,
	2727, 76017, 76017, 530, 2840, 692, -1000, 29007, -1000, 172,
	29007, 16704, -1000, 2757, 1329, -1000, -1000, 382, 10091, 1865,
	-1000, 370, 17165, -1000, -1000, -1000, 18063, 558, 26714, 29007,
	864, 75686, 14528, 2209, 2088, -1000, 2756, -1000, -1000, 2738,
	-1000, -1000, -1000, -1000, 2738, 1103, 1101, 2755, -1000, 2738,
	2738, 557, 670, 669, 654, 642, 502, 29007, 29007, 29007,
	29007, 29007, 29007, 29007, 29007, -1000, 26265, 25804, 25343, 30354,
	24882, 29007, 18512, 24421, 23960, 65724, 8, 2687, 29007, 169,
	-1000, 74247, -1000, 169, 169, 555, -14, 75686, 1976, 1976,
	32947, 1885, 1657, 1657, 1657, -1000, 554, 665, 25, 24,
	23, -1000, -1000, 22, 20, 738, 11040, 57232, 1670, 738,
	738, 193, 231, 362, 31247, 2546, 57232, -1000, -1000, 53860,
	553, 16704, 16268, 1172, -16, 192, 1994, 1993, 1990, -1000,
	1377, -17, 1078, -116, -1000, 3744, -22, -1000, 1095, -1000,
	-1000, -1000, 295, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 867, 550, 546, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 545, 1520, 543, 543, 543, -1000, -1000, -1000, 262,
	541, 258, 535, -1000, -1000, -1000, -1000, -1000, -1000, 2188,
	-32, 54280, 788, -25, 964, -8, -1000, -1000, -1000, 44100,
	1087, -1000, 1301, -1000, -1000, -1000, -1000, -1000, -1000, 1159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2771, -1000, 2732,
	-1000, -1000, 2753, 4, -1000, -1000, 16268, -1000, -9, 1388,
	-1000, 45784, 2575, 2556, 2531, 1279, -1000, 1182, 2628, 48760,
	2665, 2673, 821, -1000, 2186, -1000, -1000, 798, 1341, 1070,
	48760, 1760, -1000, 76184, -1000, 2086, 2625, 1164, 1153, 1164,
	1164, 1146, -1000, 48760, 1066, 1559, 43676, -1000, 1064, -1000,
	-12, 2662, 2671, 739, -1000, 2183, 1052, -1000, -1000, 53860,
	16268, 673, -1000, 43676, 3, 40626, 65724, 191, -1000, 29007,
	172, 29007, 172, -1000, -1000, 2395, -1000, -1000, -1000, 2837,
	1510, 1926, -1000, -1000, -1000, 534, 1859, 1760, 1858, -1000,
	-1000, 49186, 2180, 65724, 2012, -6, 53860, -1000, -1000, 1557,
	-1000, 2380, 2376, 495, 2833, -1000, 1759, 1856, -1000, -1000,
	-1000, 67404, 1137, 2369, 915, 627, 2686, 627, 37653, -1000,
	65724, -1000, 65724, -1000, -1000, -1000, 2832, -1000, 53860, -1000,
	-1000, 53860, -1000, 53860, -1000, 53860, -1000, 53860, 53860, -1000,
	65724, 43676, 43676, 43676, 4543, 44944, -27, -30, 360, -1000,
	58500, 65724, 914, 45364, 65724, 2506, -205, -1000, 826, 826,
	673, -1000, 673, -1000, 53860, 2235, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2830, 2826, -1000, 832, 53860, 65724, 53860,
	-1000, -1000, 65724, -1000, 65724, -1000, -1000, 65724, -1000, 65724,
	-1000, 65724, -1000, -1000, -1000, -1000, -1000, -1000, 172, 29007,
	1331, -1000, 2224, -1000, 2221, -1000, 51, -1000, -1000, -1000,
	-1000, 1558, 53860, 53860, 53860, 53860, 65724, 53860, -1000, 48760,
	-1000, -1000, 2217, -1000, -1000, 1897, -1000, 2, 926, -1000,
	-1000, -1000, -1000, -1000, 75686, 516, -1000, -1000, 75686, 1398,
	2021, -1000, 2021, -5, -1000, 73729, 1951, 53860, -1000, -1000,
	-1000, -1000, -1000, 796, 1676, 1676, 1039, 1039, 1039, 1039,
	2679, 4071, 3905, 3499, 5673, 5673, 688, 688, 688, 688,
	688, 5673, 848, 1647, 1647, 848, 848, 848, 848, 848,
	1647, 1647, 1647, 5673, 5673, 5673, 76017, 75758, 7394, 29007,
	29007, 1049, 1504, 435, 5858, 29007, 7546, 7546, 7546, 7546,
	-1000, 2165, -1000, -1000, -1000, -1000, 2178, 533, 30354, 30354,
	-1000, -1000, -1000, -1000, 17614, 29007, -1000, -1000, -1000, -1000,
	23499, -1000, -1000, 73399, -246, 356, -143, 16, -1000, 29007,
	29007, 29007, 355, -1000, 343, -1000, -1000, 1048, -1000, 1044,
	1043, 1037, -1000, 532, 189, 29007, 65724, -1000, 71014, 664,
	-60, -1000, -35, 1178, -1000, 29007, 187, -1000, 1651, 528,
	527, 336, -36, -1000, 335, 795, 773, 330, 328, 327,
	29007, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 75427, 70942, 70683, 70397, 9634, 70351, 10564, -37, 326,
	-1000, 2176, -143, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 325, -1000, 324, -1000, 75168, -143, 323, 4607, -1000,
	30354, 30354, 30354, -1000, 321, -1000, 73988, -1000, 75096, 23050,
	23050, 23050, 320, 74837, 29007, -143, -44, -1000, -45, -1000,
	-1000, 524, -46, 860, 22589, 32097, 16268, -1000, 860, 860,
	29007, -1000, 29007, 1978, -1000, -1000, -1000, 1975, 1596, 1976,
	32947, -1000, -1000, -1000, -1000, 57232, 640, 738, -1000, -1000,
	-1000, -1000, -1000, 57232, -1000, 2734, 2142, -1000, -1000, -1000,
	65724, 411, -1000, 57232, 57232, 16268, 738, -1000, 316, 35955,
	16, 184, -1000, -1000, 16268, 2062, 2062, 2062, -1000, -1000,
	65724, 2705, -1000, 1544, -1000, 76184, -1000, 691, 902, -1000,
	2752, 523, -1000, 2738, 2738, 65724, 102, 22140, -1000, 1087,
	-1000, -1000, 1285, -1000, 1516, -1000, 1100, -1000, -1000, -1000,
	22140, -1000, 2066, 65724, 65724, 53860, -1000, -1000, 1841, 66984,
	1839, 76184, 65724, -1000, -1000, 520, 519, 1947, 1944, 65724,
	65724, 66564, 66144, 65724, 1566, 29007, 1799, 2036, 172, 172,
	-1000, -1000, 172, 517, 1046, 53860, 53860, 53860, 1465, -1000,
	-1000, -1000, -1000, -1000, 53860, -1000, -1000, 2750, -1000, 1164,
	-1000, -1000, -1000, 1164, 1760, 1437, 53860, 43676, 851, 65724,
	1551, 172, 172, -1000, -1000, 172, 515, 16268, 1511, -1000,
	2056, -1000, -47, -1000, -1000, 14094, 75686, -1000, 75686, -1000,
	65724, -1000, 886, 65724, 45364, 810, 2366, -1000, 1760, 2356,
	411, -1000, -1000, 37229, -32, 826, 43676, 53860, -6, 43676,
	43676, 43676, 2825, 506, 2824, -1000, 53860, 2355, 1746, 1837,
	2370, 728, 65724, 860, 32947, 1508, -1000, 36381, 898, 65724,
	1416, 93, -1000, -1000, -1000, 41, 65724, -1000, 2820, -1000,
	-1000, 178, 178, 178, -1000, 176, 1730, -1000, -69, -69,
	-1000, -1000, 4543, 4543, 826, -7, 505, -1000, 753, 752,
	35097, 43676, -70, -1000, -1000, -1000, -1000, -1000, 53860, 65724,
	597, 2045, 65724, -73, -1000, 183, 499, -1000, 826, 34663,
	2150, -1000, -1000, 841, -1000, 1134, -1000, -1000, -1000, -1000,
	-1000, -1000, 14, -32, -32, -1000, -1000, -1000, -1000, 75686,
	-1000, 1322, 1318, 65724, -1000, 16268, 65724, 53860, 16268, 53860,
	2215, 2208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1398, -1000, 29007, -1000, -1000, -1000, 21691, -1000, -1000, -1000,
	53860, 13, 29007, 29007, 5073, 4038, 29007, 30354, 30354, -1000,
	29007, 261, -1000, -1000, -1000, -1000, -1000, 2139, 496, 29007,
	76184, 3825, 450, -1000, 315, 10244, 848, -1000, 29007, -1000,
	313, 21242, -1000, 74319, -28, -75, -1000, 2769, 1882, 1549,
	1433, 1350, 2743, 13660, -143, -76, -1000, -1000, 690, -1000,
	2354, -1000, 29007, 74578, 13226, -1000, 38077, 862, 1673, -1000,
	-1000, 2738, 789, -1000, -1000, -1000, 789, -1000, 73115, 76184,
	76184, 29007, 29007, -1000, 29007, 29007, 29007, -1000, -1000, 29007,
	-1000, -1000, 2135, 29007, -1000, 76184, 76184, 30354, 30354, 30354,
	30354, 30354, 30354, 30354, 30354, 30354, 30354, 30354, 30354, 30354,
	30354, 30354, 30354, 30354, 30354, 30354, 1889, 30354, 2719, 2719,
	2719, -1000, 2120, 2135, 29007, 29007, 76184, 312, 311, 310,
	-1000, 29007, -143, -1000, -1000, 4543, -1000, 2087, -1000, 29007,
	-1000, -126, -1000, 2546, -1000, -1000, 2087, 2087, -84, 75686,
	32947, 32947, -1000, 493, 29007, 1970, -1000, 661, -1000, -85,
	-1000, 57232, -1000, 660, -244, -1000, 742, -1000, -1000, -1000,
	-1000, 411, -1000, -1000, -1000, 180, 57232, -1000, -86, -1000,
	2685, 309, 16268, -1000, -1000, -1000, -1000, -1000, -1000, -32,
	1681, 2765, -1000, 2742, 689, 659, 308, 2738, 307, 305,
	-32, 65724, -1000, -8, -1000, -1000, -1000, 29007, -1000, -1000,
	2550, 1031, 1024, -1000, 2352, -1000, 1834, -1000, 903, -1000,
	1361, -1000, 29007, 29007, 492, 489, 1480, 2817, 2351, 1730,
	2346, 1730, -1000, -1000, 745, -1000, 75686, 487, 476, -1000,
	-9, 1373, 840, -1000, -1000, 29007, 29007, 58076, -1000, 377,
	2538, 12, -1000, 1021, -1000, -1000, -1000, 1760, 1000, -1000,
	-1000, 1553, -1000, -1000, 835, -1000, -1000, 29007, -1000, -12,
	991, 826, 2133, -1000, -1000, 2816, 2813, 2808, 301, -87,
	-13, 76184, 2684, 1732, 65724, 53860, 53860, 2678, 790, -1000,
	2734, -1000, -1000, -1000, -1000, 833, -1000, -1000, 2798, -1000,
	910, 16268, 53860, 2344, 1911, 728, 44524, -1000, 833, 1673,
	-67, -1000, 1416, 20781, 2536, -95, -1000, -1000, -1000, 860,
	37653, 32947, 29007, 2796, -102, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 57656, 57656, 43676, 43676, 43676, 826,
	65724, 65724, 45364, 2794, 475, 65724, 65724, 473, -1000, 65724,
	65724, 2793, 43676, -1000, -1000, 172, -1000, 1679, 53860, 12792,
	-1000, -1000, 832, -1000, -1000, 1562, 1804, 1562, 1412, 1400,
	1687, 72831, -1000, 2541, 16268, 2681, 7546, 29007, 29007, 213,
	397, 357, 7546, 29007, 29007, 76184, 6310, -104, 29007, 29007,
	-1000, 29007, 658, 75686, 2764, 29007, 299, 298, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 296, -1000, -1000,
	-1000, -1000, -1000, 75686, 29007, 167, -1000, -1000, -1000, 69924,
	-1000, 29007, 292, 291, -1000, -1000, -1000, 289, 287, 5333,
	4433, 72785, 72501, 72217, 75686, 2120, 75686, -1000, -1000, 734,
	734, 1144, 1144, 1144, 1144, 2719, 1110, 823, 1053, 490,
	490, 490, 996, 1156, 1156, 490, 490, 490, 2125, 1957,
	472, 5184, -1000, -1000, 75686, 75686, 283, -1000, -1000, -1000,
	-143, 282, 2078, 2623, 75686, -1000, 32947, 2078, 2078, -1000,
	-1000, 1596, 65724, 75686, 32947, 11, -1000, 2734, -1000, -1000,
	2142, -1000, 11486, -1000, 16268, -1000, -1000, 35955, -1000, 469,
	-1000, 166, -1000, -1000, 655, 2792, 676, -1000, 281, -1000,
	-1000, -32, 75686, 65724, 65724, 65724, 2340, -1000, 3576, -1000,
	72171, -105, -1000, 73729, 29007, 65724, -1000, 1536, 1979, 938,
	-1000, 65724, -1000, 65724, -1000, -1000, 65724, 65724, 53860, 2321,
	-114, 75686, -58, -1000, 741, -1000, 1150, -1000, 12358, 53860,
	53860, 43676, 2318, -119, 16268, -1000, 43676, -1000, -1000, -1000,
	2037, -1000, 56386, 1734, 172, -1000, 2791, 468, 1760, 172,
	-1000, 1677, -1000, 503, -1000, -1000, 466, 65724, 1737, 464,
	16268, 1920, 728, 44524, -1000, 1137, 1996, -1000, -59, -1000,
	474, 172, 1673, -1000, -67, 75686, -1000, 730, -1000, -121,
	-1000, -1000, 272, -1000, 2504, 2500, -1000, -1000, 29007, 460,
	455, 65724, 2494, -1000, -1000, -128, -1000, 1913, -1000, -1000,
	-1000, -1000, -1000, 16268, 1338, -1000, 452, 448, -1000, -1000,
	-1000, 2541, 7546, 7546, 29007, 29007, 29007, 7546, 6310, -130,
	-1000, 7546, 7546, -143, -1000, -1000, 74319, -1000, -1000, -1000,
	75686, 11924, 1563, -1000, 71887, -1000, -1000, -1000, -1000, 29007,
	29007, -1000, -1000, -1000, -1000, -1000, 30354, 2118, 447, 76184,
	-1000, -1000, 857, 29007, 29007, 2546, 857, 857, -1000, -133,
	-1000, 738, -1000, -1000, -1000, 2734, 166, -1000, 2790, 16268,
	667, -1000, 2787, -1000, -1000, -1000, -1000, 65724, -1000, 65724,
	-1000, 16268, 65724, 2117, 1826, -1000, -1000, 1943, 436, 30354,
	53860, 732, 2116, 1482, 29007, -1000, -136, -141, 1825, -1000,
	-1000, 1823, 29007, -1000, 76184, 1730, 1730, -144, -149, -1000,
	29007, 984, 65724, 20332, -1000, 2783, 2538, -1000, -1000, -1000,
	29007, 982, -1000, -69, 1551, 2068, -1000, -1000, -1000, -1000,
	1936, -1000, -1000, 65724, 1933, 831, -1000, 45364, 810, -1000,
	-1000, 815, -1000, 29007, -1000, 53860, 29007, 1710, -1000, 728,
	44524, -1000, 2370, 1416, -1000, 2462, 65724, 2530, -1000, 1996,
	435, -1000, 826, 434, 430, -152, 29007, 29007, -155, 429,
	826, -107, -1000, 714, 702, -1000, -1000, 53860, 53860, 29007,
	29007, -1000, 7546, 7546, 7546, -1000, 266, -1000, -1000, 1673,
	2610, -1000, 71603, 71557, 1718, 30354, 76184, -157, -1000, 65724,
	75686, -143, -1000, -1000, -1000, 57232, 491, -1000, 2780, -1000,
	-1000, 2364, -1000, -1000, -1000, 65724, 1831, -1000, -1000, 29007,
	5184, 428, 29007, -1000, -1000, 2038, 2151, 2037, 427, -1000,
	-1000, -1000, -1000, 1494, -1000, -1000, 75686, 2586, -1000, -1000,
	425, 424, 75686, 422, 723, 2107, -1000, -1000, -1000, 75686,
	421, 810, -1000, 1611, 1734, 420, -1000, -1000, -1000, 2016,
	263, 2677, 815, -1000, 2723, -1000, -158, 910, -160, 53860,
	44524, -1000, 1911, -1000, 1104, -163, 65724, 1416, -1000, -1000,
	43676, 43676, 1482, -165, -168, -1000, 43676, -1000, 1913, -1000,
	65724, -1000, 65724, -1000, -1000, -171, -176, -1000, 1599, 29007,
	-1000, -1000, 1718, -178, -1000, -124, -1000, 2675, -1000, -1000,
	-1000, -1000, -1000, 2337, 71273, 1891, 65724, 9040, 2137, -1000,
	-1000, 1551, 65724, 53860, 907, 16268, 1562, 1562, 29007, 19883,
	1597, 29007, -1000, 53860, 65724, -1000, 2492, 2037, 172, -1000,
	-1000, 1482, 418, 1482, 417, -1000, 1920, 1276, -1000, 860,
	-1000, -1000, -179, -184, 2037, 1482, -1000, -185, -1000, -187,
	-190, -1000, -1000, 260, 29905, 29905, 29905, -143, -1000, 65724,
	416, 2280, -1000, 1697, 1493, 259, 944, -1000, -1000, 2116,
	-198, 411, -1000, 29007, -1000, -200, -1000, 897, -203, -1000,
	896, -206, -1000, 2106, -1000, -208, 410, -211, -1000, -1000,
	-1000, 1551, 831, 2037, 29007, 2037, 29007, -1000, 37653, -1000,
	826, 826, 1551, 2037, 826, -1000, -1000, -1000, 2330, -1000,
	30803, 1686, 1384, 73445, 2330, 2330, -1000, -1000, 65724, -1000,
	1706, 1699, 1238, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1891, 75686, -1000, 1562, 2064, -1000, 1562, 2101, -1000,
	1567, -1000, 65724, -1000, 65724, 810, -1000, 1551, -216, 1551,
	-219, -201, -1000, -1000, -1000, 1551, -1000, -1000, 1578, 2676,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2480,
	-1000, 925, 1777, 1777, 1697, -1000, 406, -1000, 404, -1000,
	-222, -1000, -1000, 859, 1482, 859, 1482, -1000, -1000, 1374,
	-1000, -1000, 1666, 29456, -1000, 2692, -1000, -1000, 1966, -1000,
	2116, 29007, 29007, 1725, -1000, 2779, 2037, -1000, 2037, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -224, -232, -1000, -1000,
	-1000, -1000, 1551, 1551, 1551, 971, 859, 859, -1000, 403,
	-1000, -1000, 29007, -234, 1551, -1000,
}
var sqlPgo = [...]int{

	0, 3490, 3483, 3479, 3478, 3476, 3472, 3470, 3466, 3465,
	3462, 3459, 3457, 3455, 3454, 3451, 3446, 3443, 3442, 3441,
	3437, 3433, 3430, 3428, 3426, 3420, 3418, 3417, 3412, 3411,
	3410, 3409, 3404, 3403, 3402, 3401, 3399, 3395, 3394, 3393,
	3392, 3390, 3387, 3385, 3384, 3382, 3380, 3378, 29, 3375,
	3374, 3373, 3369, 3368, 3366, 3363, 3362, 3359, 3355, 3354,
	3352, 3351, 3350, 3349, 3348, 3346, 36, 3345, 214, 3344,
	3342, 3341, 3340, 3338, 3334, 3333, 3332, 3331, 3330, 213,
	3329, 109, 3328, 3325, 3324, 3323, 3319, 211, 3318, 3317,
	3316, 3315, 3313, 3312, 3309, 3307, 132, 3305, 3304, 217,
	3301, 3295, 3293, 3292, 3289, 3288, 3287, 3282, 3275, 3272,
	193, 3271, 210, 3267, 3266, 3265, 3263, 3262, 3261, 3260,
	3258, 3255, 3254, 3251, 3249, 3248, 3246, 3244, 3242, 3238,
	3233, 3232, 3231, 3230, 3229, 3227, 3223, 3222, 3221, 3220,
	218, 142, 3217, 3214, 209, 208, 3213, 3212, 97, 93,
	82, 3209, 98, 174, 195, 5860, 187, 3205, 3204, 3202,
	150, 3201, 3199, 3197, 3196, 62, 135, 138, 125, 134,
	161, 3195, 3194, 73, 54, 34, 26, 108, 3192, 3191,
	3188, 2450, 95, 3185, 3183, 202, 192, 3182, 1478, 3180,
	311, 72, 100, 160, 90, 3179, 123, 21, 3178, 141,
	38, 3177, 127, 71, 28, 5899, 7636, 3176, 80, 216,
	76, 165, 189, 171, 170, 164, 139, 978, 3171, 196,
	3167, 96, 155, 3163, 3161, 3159, 56, 151, 74, 3158,
	8, 3, 145, 31, 86, 13, 3157, 12, 3156, 3152,
	3151, 3150, 25, 136, 3149, 115, 67, 3148, 19, 3147,
	64, 158, 3143, 172, 102, 3142, 3141, 200, 154, 157,
	3138, 10, 180, 3136, 3135, 3134, 3133, 3132, 103, 22,
	104, 3131, 3121, 110, 183, 3120, 55, 3119, 128, 75,
	118, 212, 88, 169, 87, 175, 143, 176, 3118, 3116,
	3115, 146, 3108, 3107, 124, 166, 3106, 3105, 220, 33,
	52, 181, 53, 3104, 126, 3100, 149, 3099, 3095, 3093,
	215, 140, 159, 6, 69, 101, 24, 9, 179, 117,
	94, 85, 3089, 3546, 1419, 364, 3086, 114, 89, 40,
	92, 111, 201, 49, 3085, 3084, 1169, 3081, 3080, 3076,
	3075, 144, 3074, 3073, 3070, 107, 43, 58, 3068, 122,
	65, 11, 83, 203, 84, 167, 156, 194, 3067, 137,
	3066, 66, 112, 3065, 153, 191, 91, 3064, 236, 116,
	3063, 207, 3062, 3061, 3059, 3058, 99, 3057, 3053, 119,
	3049, 121, 3037, 3026, 148, 120, 131, 70, 30, 3023,
	61, 113, 3018, 152, 37, 3016, 184, 50, 0, 7010,
	5612, 6608, 3015, 345, 3012, 163, 106, 3010, 3005, 3003,
	78, 3001, 57, 2999, 2994, 35, 2990, 15, 1, 7,
	18, 16, 1399, 219, 2989, 2987, 79, 105, 129, 2983,
	206, 173, 2982, 2980, 2979, 68, 2977, 27, 2976, 23,
	2974, 2973, 32, 4, 17, 2972, 2971, 188, 2970, 190,
	2969, 2968, 2698, 2967, 198, 63, 2966, 133, 168, 2964,
	2962, 2961, 2960, 197, 2959, 199, 2958, 14, 20, 5,
	2957, 2956, 2954, 162, 2, 2499, 2931, 2930, 60, 2929,
	2928, 147,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 454,
	454, 19, 31, 20, 32, 13, 455, 455, 455, 455,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 167, 167, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 453,
	453, 169, 169, 168, 164, 164, 456, 456, 170, 170,
	170, 172, 172, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 152, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 396, 396, 397, 397, 147, 147,
	148, 148, 148, 148, 149, 149, 150, 150, 150, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 141, 141, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 461, 461,
	462, 462, 463, 463, 464, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 63,
	63, 244, 244, 220, 220, 64, 64, 64, 65, 65,
	66, 66, 53, 53, 449, 449, 258, 258, 363, 363,
	68, 68, 277, 277, 69, 69, 69, 69, 69, 69,
	70, 70, 70, 70, 70, 70, 70, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 77, 77, 77,
	78, 78, 78, 75, 75, 75, 73, 73, 73, 72,
	72, 72, 76, 76, 76, 74, 74, 74, 259, 259,
	79, 79, 79, 79, 79, 79, 79, 79, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 365, 365, 80, 80, 80, 334, 334,
	84, 84, 84, 292, 292, 85, 85, 85, 85, 85,
	86, 86, 86, 86, 98, 98, 98, 98, 452, 452,
	251, 251, 185, 185, 185, 185, 91, 91, 91, 91,
	92, 92, 92, 93, 93, 146, 146, 104, 104, 104,
	104, 104, 103, 103, 103, 103, 103, 103, 43, 43,
	43, 44, 44, 45, 45, 46, 46, 47, 47, 48,
	48, 48, 48, 48, 106, 106, 457, 457, 108, 105,
	105, 105, 107, 107, 107, 107, 109, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 390, 390, 267,
	267, 388, 388, 404, 404, 389, 389, 224, 224, 224,
	224, 224, 225, 225, 225, 395, 395, 395, 395, 395,
	395, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 131, 131, 131, 140, 140, 140, 140,
	140, 140, 140, 133, 133, 133, 121, 121, 113, 113,
	113, 113, 113, 117, 117, 117, 117, 117, 114, 114,
	123, 123, 123, 123, 123, 118, 118, 120, 120, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 115, 115,
	115, 115, 125, 125, 125, 125, 298, 298, 298, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 136,
	136, 136, 136, 136, 136, 348, 348, 132, 132, 132,
	132, 135, 135, 135, 135, 282, 282, 129, 129, 129,
	130, 130, 130, 134, 134, 137, 137, 137, 137, 116,
	116, 116, 466, 466, 466, 138, 138, 128, 128, 139,
	139, 139, 139, 139, 139, 139, 139, 127, 127, 127,
	126, 126, 126, 126, 119, 450, 450, 447, 447, 447,
	447, 447, 447, 447, 448, 448, 451, 451, 89, 89,
	89, 58, 58, 467, 467, 467, 59, 59, 468, 468,
	468, 465, 465, 465, 465, 465, 465, 465, 465, 226,
	226, 227, 227, 315, 315, 315, 315, 315, 230, 230,
	171, 171, 171, 233, 234, 234, 231, 231, 232, 232,
	232, 236, 236, 235, 238, 238, 237, 314, 411, 411,
	413, 413, 413, 413, 413, 413, 413, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 409, 409, 409,
	410, 405, 405, 406, 406, 406, 406, 228, 228, 229,
	229, 229, 229, 407, 408, 249, 249, 351, 412, 412,
	414, 414, 416, 469, 469, 469, 469, 469, 469, 470,
	470, 313, 313, 242, 242, 417, 417, 417, 417, 418,
	418, 418, 418, 418, 421, 420, 419, 419, 419, 419,
	419, 344, 344, 344, 62, 62, 62, 279, 279, 278,
	278, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 143, 143, 60, 60, 60,
	177, 177, 57, 57, 57, 472, 472, 61, 61, 61,
	473, 473, 67, 67, 67, 67, 67, 67, 56, 56,
	56, 56, 56, 474, 474, 299, 299, 297, 297, 248,
	248, 350, 189, 189, 165, 165, 165, 23, 25, 25,
	17, 17, 34, 34, 35, 35, 30, 30, 458, 458,
	459, 459, 90, 90, 94, 94, 94, 102, 102, 142,
	142, 142, 142, 142, 142, 142, 38, 38, 38, 38,
	50, 50, 50, 50, 100, 476, 476, 476, 101, 101,
	475, 475, 184, 184, 184, 184, 186, 186, 310, 310,
	311, 311, 477, 477, 312, 312, 312, 312, 179, 178,
	180, 180, 55, 55, 55, 173, 173, 174, 174, 175,
	175, 176, 176, 478, 478, 87, 87, 87, 145, 145,
	219, 219, 306, 306, 306, 243, 243, 194, 194, 309,
	309, 307, 307, 307, 307, 276, 276, 276, 144, 144,
	256, 256, 269, 269, 270, 270, 360, 360, 271, 99,
	99, 155, 155, 153, 153, 153, 153, 153, 153, 160,
	160, 260, 260, 161, 161, 161, 161, 162, 162, 162,
	154, 154, 154, 156, 156, 156, 156, 156, 156, 156,
	159, 159, 159, 159, 163, 163, 163, 158, 158, 428,
	428, 428, 430, 430, 431, 427, 427, 429, 429, 471,
	471, 281, 281, 281, 240, 241, 239, 239, 246, 246,
	245, 247, 247, 349, 349, 349, 274, 274, 274, 274,
	302, 302, 300, 300, 300, 301, 301, 303, 303, 303,
	304, 304, 305, 305, 273, 273, 330, 330, 157, 157,
	157, 253, 253, 253, 254, 254, 321, 321, 321, 321,
	321, 321, 322, 322, 320, 320, 320, 320, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 353, 353, 255,
	255, 354, 308, 308, 445, 445, 445, 446, 446, 347,
	347, 355, 355, 355, 355, 355, 355, 345, 345, 346,
	346, 361, 362, 362, 285, 285, 285, 285, 283, 283,
	286, 286, 286, 286, 284, 284, 356, 356, 356, 356,
	275, 275, 357, 357, 357, 358, 316, 317, 317, 366,
	366, 366, 366, 381, 252, 252, 252, 252, 252, 479,
	479, 367, 367, 367, 367, 367, 367, 367, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	371, 371, 371, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 380, 380, 380, 380, 380, 372, 372, 377, 377,
	378, 378, 378, 373, 374, 379, 379, 379, 379, 480,
	480, 383, 383, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 369, 369, 369, 376, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 293,
	293, 294, 294, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 325, 325,
	325, 325, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 422, 422, 422,
	422, 422, 422, 422, 422, 425, 425, 426, 426, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 432, 432,
	433, 433, 435, 435, 436, 436, 437, 438, 438, 438,
	439, 440, 440, 434, 434, 441, 441, 441, 441, 442,
	442, 443, 443, 443, 443, 443, 444, 444, 444, 444,
	444, 336, 336, 337, 337, 343, 343, 343, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 187, 187, 187, 187, 187, 265,
	265, 263, 263, 263, 266, 266, 264, 264, 262, 262,
	261, 261, 333, 333, 331, 331, 335, 335, 287, 287,
	382, 382, 382, 382, 382, 382, 382, 382, 288, 288,
	288, 296, 289, 289, 290, 290, 290, 290, 290, 327,
	328, 291, 291, 291, 329, 329, 338, 342, 342, 341,
	340, 340, 339, 339, 318, 318, 319, 319, 272, 272,
	481, 481, 268, 268, 359, 359, 359, 359, 222, 222,
	257, 257, 221, 221, 214, 214, 215, 215, 215, 215,
	250, 250, 384, 384, 384, 385, 386, 387, 332, 204,
	203, 191, 192, 202, 201, 200, 190, 193, 197, 198,
	199, 195, 196, 210, 209, 208, 206, 207, 364, 216,
	216, 217, 217, 217, 218, 218, 218, 218, 188, 188,
	211, 211, 212, 213, 213, 205, 205, 205, 181, 181,
	181, 182, 182, 183, 183, 394, 394, 392, 392, 392,
	393, 393, 393, 393, 391, 391, 391, 391, 391, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 400,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 403,
	403,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 3, 1, 0, 1, 2,
	2, 1, 6, 5, 1, 2, 1, 3, 2, 0,
	9, 3, 2, 0, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 3, 6, 6, 3, 1, 1,
	2, 1, 1, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 3, 5, 7, 2, 3, 0,
	3, 5, 2, 3, 0, 2, 3, 2, 3, 2,
	6, 4, 7, 2, 6, 4, 7, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 5, 4, 6, 4, 3, 0, 1, 3, 2,
	4, 2, 4, 1, 6, 3, 1, 1, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 1, 3, 2,
	3, 3, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 4,
	4, 4, 3, 4, 4, 3, 4, 4, 5, 3,
	5, 5, 5, 7, 3, 3, 3, 4, 3, 4,
	3, 5, 4, 5, 3, 4, 5, 3, 4, 3,
	4, 3, 3, 4, 4, 5, 0, 1, 1, 3,
	2, 4, 3, 3, 5, 4, 3, 5, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 3, 4, 4,
	5, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 3,
	4, 3, 1, 1, 1, 2, 3, 2, 3, 6,
	6, 7, 9, 7, 9, 3, 4, 10, 10, 3,
	5, 5, 5, 3, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 10, 13, 0, 2, 3, 9, 12, 0, 2,
	3, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 5, 8, 5, 11, 3, 0, 2,
	4, 3, 3, 1, 5, 1, 3, 1, 2, 0,
	1, 2, 2, 0, 1, 3, 3, 2, 2, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 1, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 1, 1, 8, 7, 5,
	0, 1, 6, 7, 6, 5, 3, 4, 14, 17,
	14, 17, 4, 0, 2, 2, 0, 1, 0, 1,
	3, 2, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	3, 0, 2, 2, 4, 2, 3, 0, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 2, 5, 2, 3, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	1, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 5, 6, 4, 6, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	1, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 2, 5, 1, 4, 2, 5,
	1, 4, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 5, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 3, 3, 3, 0, 1,
	4, 2, 2, 2, 2, 2, 3, 2, 2, 3,
	0, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 463, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 291, 320, 330, 314, -107, -108,
	349, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -460, 86, -429,
	-71, -74, -76, -464, 116, 131, 175, 283, -92, -93,
	316, 318, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 353, 400,
	42, 363, 71, 119, 324, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -428, -72, -73, -75, -77, -78, 315, -156,
	-154, 460, 413, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 431, 439, -159, -157,
	-158, -163, 337, 421, 377, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, -206, -211, -212, -213, -205,
	-181, -400, -403, 4, -398, -401, 137, 182, 250, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 383, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 217, 216, 219, 222, 223, 226, 227,
	230, 231, 232, 234, 235, 238, 236, 239, 237, 240,
	243, 241, 242, 245, 246, 248, 247, 252, 172, 256,
	257, 259, 260, 261, 277, 264, 265, 266, 269, 270,
	273, 276, 278, 279, 280, 281, 282, 283, 284, 286,
	287, 289, 291, 293, 295, 296, 297, 298, 299, 300,
	302, 303, 305, 306, 307, 308, 309, 314, 311, 312,
	313, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	327, 329, 350, 351, 365, 330, 331, 332, 333, 334,
	335, 336, 340, 344, 341, 342, 343, 338, 339, 345,
	346, 347, 349, 352, 353, 355, 356, 358, 359, 361,
	362, 363, 364, 366, 369, 370, 371, 367, 368, 376,
	374, 375, 378, 379, 380, 381, 382, 384, 386, 394,
	395, 397, 400, 401, 402, 392, 404, 405, 408, 409,
	410, 411, 412, 417, 413, 415, 418, 419, 420, 426,
	425, 432, 433, 435, 436, 437, 33, 43, 44, 46,
	49, 60, 61, 62, 65, 103, 104, 124, 134, 135,
	146, 160, 162, 169, 170, 171, 189, 195, 197, 201,
	220, 254, 255, 271, 275, 288, 290, 301, 326, 357,
	372, 387, 388, 389, 390, 396, 398, 421, 422, 423,
	427, 434, 262, -199, 2, -181, -181, 291, 26, 2,
	26, 287, 339, 379, 381, 2, -452, -251, 2, 26,
	-185, -181, 86, 158, 337, -199, 2, -452, -251, 24,
	2, -181, 2, -186, 2, 330, -181, 463, 81, 227,
	64, 326, 346, -110, 395, -109, 387, 332, -111, -390,
	2, 243, -181, 463, 463, 463, 463, 2, 377, 280,
	425, 338, 414, 99, 298, 182, -447, 2, 4, -401,
	-398, -215, -214, 377, 99, -213, -205, 453, -212, 463,
	463, 463, 2, 204, 205, 297, 296, 346, 347, 463,
	463, 463, 2, 25, 58, 80, 83, 105, 133, 153,
	156, 267, -461, 235, 277, 295, 332, 345, 376, 384,
	397, -465, 364, 59, 414, -472, 402, 114, -297, 99,
	381, 379, 227, 157, 409, 322, 161, 407, 109, 188,
	412, 411, 463, 463, 25, 58, 67, 83, 114, 133,
	153, 156, -463, 277, 295, 329, 332, 345, 376, 384,
	402, 397, 2, 425, 338, 377, 182, 99, 414, 322,
	294, -81, 2, 460, 29, 28, 349, -152, 377, 198,
	2, -181, 204, 205, 2, 463, 463, -447, 2, 204,
	205, 2, 198, 2, 59, 334, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 2, -140, 346, 364, 167, 41, 64,
	26, 69, 281, 100, 159, 182, 183, 212, 80, 81,
	-298, 40, 205, 204, -348, 378, 333, 339, 374, 395,
	86, 415, 323, 437, 298, 299, 127, 4, 99, 243,
	348, 387, 227, 73, -471, 2, 377, -475, 2, 395,
	395, 2, -475, 2, -475, 2, -184, 2, 395, 391,
	-476, 395, 434, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, -154, -156, -155, 463,
	463, 463, 463, 463, -140, 346, 2, 64, 26, -160,
	-161, 151, -245, -246, 406, 196, 122, 268, -153, -155,
	2, -428, -388, 2, -323, -404, -325, 451, 452, 444,
	249, 438, -336, 105, 407, 262, -403, -326, -338, 124,
	326, -266, 8, 9, 5, 6, 7, -188, -368, -332,
	-376, 399, 136, 253, -218, 464, 10, 460, -425, -155,
	-337, 34, 162, 57, -392, -217, -370, -378, -374, -375,
	-479, 47, 53, 52, 384, 242, 340, 341, 358, 342,
	343, 45, 417, 179, 259, 261, 190, 4, 197, -216,
	-205, -422, -423, -398, -399, 189, 195, 191, 357, 192,
	193, 194, 44, 301, 147, 148, 146, 115, 104, 103,
	255, 49, 48, 46, 422, -379, 101, 387, 388, 389,
	390, 207, 208, -181, -400, 67, 91, 92, 90, 95,
	94, 96, 93, 348, 414, 58, 33, 169, 170, 201,
	254, 171, 65, -424, 368, 87, 155, 187, 173, 200,
	202, 206, 221, 224, 244, 251, 272, 274, 321, 354,
	-480, 423, 134, 135, 275, 288, 372, 396, 398, 160,
	220, 60, 61, -430, 302, -431, -199, -430, 463, 463,
	465, 463, -239, -240, -241, 2, 26, 112, 460, 2,
	-352, 2, 458, -356, -155, 215, -355, 460, -353, -206,
	263, -426, 327, -422, -423, -188, -205, -217, 4, -242,
	460, 462, 99, 377, 68, -292, 460, -181, 26, 262,
	391, 465, -334, 460, 262, 154, 265, -181, 2, 2,
	350, 2, 460, -110, 62, 395, 39, 346, -311, 2,
	-312, -178, -179, -180, -361, 203, 293, 300, 440, 437,
	-388, -457, 154, 443, 391, -388, -267, 462, 2, -356,
	169, -206, 2, -203, -391, 4, -398, -401, -399, -402,
	67, -400, 26, 28, 29, 30, 32, 34, 35, 36,
	37, 50, 57, 58, 63, 66, 68, 80, 86, 90,
	91, 93, 92, 94, 95, 96, 105, 107, 110, 112,
	113, 117, 119, 122, 136, 138, 151, 153, 154, 158,
	161, 164, 176, 186, 196, 198, 215, 218, 225, 228,
	229, 249, 253, 258, 262, 263, 267, 268, 285, 292,
	304, 319, 337, 348, 360, 373, 377, 385, 391, 393,
	399, 406, 407, 414, 416, 424, 428, 429, 430, 431,
	-403, 2, -356, 169, 2, -208, 169, -356, -211, 2,
	-396, 169, -394, 10, -393, 5, 4, -398, -401, -399,
	2, -190, -181, 2, -202, -391, 2, -221, 169, -206,
	-207, -211, 391, 465, -257, -214, -215, -250, -181, 462,
	-323, 2, -99, 2, -323, 169, 2, -99, 169, 2,
	-323, 169, 2, -99, 169, 2, 2, 2, 397, 2,
	83, 169, -181, 377, 98, 2, 313, -462, 329, 401,
	425, 2, 2, 2, 2, 2, 2, 2, 377, 338,
	-473, 302, -195, 2, -181, 151, -396, 169, 2, -396,
	169, 2, -209, -211, -209, 182, 199, -190, 169, 2,
	381, 379, 381, 379, 154, 2, 198, 2, 198, 2,
	-357, 2, -358, -206, 2, 2, 2, 2, 2, 169,
	-181, 377, 98, 2, 214, 2, 2, 2, 2, 2,
	2, 2, 2, 2, -259, 169, 2, -206, -259, 169,
	2, -259, 169, 2, -222, 169, 2, -221, -190, 169,
	2, -397, 169, 2, -396, -397, 169, 2, -365, 2,
	-364, -393, 421, -81, 460, -81, 460, 346, 460, -396,
	-206, -206, -323, -99, 154, -323, -99, -152, 151, 2,
	99, 377, -140, 2, 151, 416, 2, 8, 2, -396,
	333, 299, 143, 2, 350, 2, 64, -298, 437, 154,
	2, 154, 2, -282, 2, 431, -450, 2, 262, 154,
	2, 154, 2, 154, 2, 154, 2, 154, 2, 296,
	347, 205, 2, -99, 428, -323, 428, 2, 394, 213,
	128, 154, -282, 2, 154, 2, 154, 2, 5, 2,
	203, 293, 365, 2, -206, -466, 2, 377, 425, 338,
	2, 2, 76, 77, 154, 2, 154, 2, 154, 437,
	2, -275, -356, -310, -311, -310, 391, -186, -160, -245,
	-246, -140, 350, 2, -260, 256, 411, 246, 352, 211,
	-160, -274, -300, -301, 225, 138, 258, -281, 26, 112,
	-281, -281, 51, 461, 461, 11, 12, 66, 38, 451,
	452, 453, 454, 149, 455, 456, 449, 450, 448, 441,
	442, 446, 209, 210, 82, 445, 443, 75, 233, 328,
	139, 140, 141, 142, 310, 180, 31, 181, 14, 15,
	16, 30, 267, 224, 438, 173, 354, 444, 17, 18,
	19, 200, 202, 251, 43, 176, -187, -223, -323, -323,
	-323, -323, -323, 274, 460, -272, -318, 458, -155, 460,
	460, 460, 5, 460, 5, -387, 8, -155, -323, -336,
	461, -264, 460, -155, -336, -331, 460, 326, 458, 460,
	-339, -323, 462, -432, 432, -372, 460, 290, -371, 460,
	-371, -371, 426, -369, 460, 439, 433, 460, -369, 460,
	460, 151, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 426, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 465, -430, -242, 460, -268,
	-359, -323, 453, -268, -268, 262, -261, -323, 87, -285,
	206, 244, 155, 221, 321, 187, -387, -82, -68, -79,
	-87, -99, -112, -144, -145, -320, 464, -347, 439, -155,
	-353, -205, -155, -355, 460, -352, -347, 453, -206, 460,
	154, 460, 462, 154, -250, -391, -190, -206, -216, -217,
	111, -261, -447, -250, -185, 35, -333, -366, -367, -368,
	-377, -373, -376, -380, 47, 53, 52, 384, 242, 340,
	341, 358, 342, 343, 45, 417, 179, 259, 261, 190,
	4, 46, 422, -379, 197, 306, 307, 305, 309, 308,
	189, 195, 191, 357, 192, 193, 194, 44, 301, 147,
	148, 146, 115, 104, 103, 255, 49, 48, 101, 387,
	388, 389, 390, 207, 208, 423, 368, 60, 61, -447,
	-250, 151, -390, -261, 35, -311, 2, 105, -394, 39,
	-477, 465, 223, -225, 232, 248, 166, 263, 435, 256,
	-395, 5, 4, -332, -344, 105, 227, -376, 9, 452,
	-384, 8, 451, -389, -388, 89, 462, -391, -167, 311,
	-166, 23, 27, 116, 419, 129, -232, 184, 280, 124,
	361, 410, -454, -455, 331, 382, 383, 78, 256, 311,
	124, -278, -280, 35, 97, 246, 276, 54, 177, 237,
	238, 363, 427, 124, 311, 431, 124, -455, 311, -455,
	-169, 361, 410, -454, -455, 331, 311, -168, -232, 124,
	464, -96, -396, 460, -257, 465, 465, -391, 453, 124,
	124, 124, 124, 2, 2, 249, 2, 2, 2, 156,
	-465, -463, 2, 2, 2, -206, 169, -208, 169, 2,
	-211, 425, -244, 262, -449, -258, 377, -206, -177, -427,
	431, 249, 249, 35, 460, 2, -192, 169, 2, -182,
	-181, 182, -427, 249, -357, -219, -206, -219, 349, -199,
	35, -320, 124, 2, 2, 2, -181, -170, 465, 56,
	317, 124, -170, 124, -170, 124, -170, 465, 124, -170,
	124, 465, 124, 124, 461, 465, -365, -365, -396, -150,
	431, 154, 86, 460, 460, -152, -97, -96, -396, -449,
	-190, 2, -206, 2, 377, 207, -396, -396, -396, -390,
	26, 351, 2, 296, 347, 77, -206, 377, 99, 182,
	70, -451, 151, -448, 322, -447, -206, 99, -206, 99,
	-206, 99, -206, -206, 2, 2, 2, 2, 74, 74,
	151, 2, 394, 2, 394, 2, -181, -181, -181, 223,
	-206, 151, 377, 182, 377, 182, 99, 377, -170, 465,
	-186, -160, -274, -390, -162, 356, 252, -259, 211, 352,
	-160, -301, -300, 26, -323, -305, 145, 245, -323, -325,
	-154, -154, -154, -247, -349, -323, 292, 182, -381, -366,
	-366, -204, -391, 387, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, 224,
	173, 354, 43, 176, -323, 391, -323, -323, -323, -323,
	241, 249, 253, 399, 136, 408, 112, 256, -481, 373,
	37, -329, -155, -265, 460, -343, 32, 360, 26, -336,
	460, 2, -318, -323, -319, -262, -261, -261, 461, 424,
	26, 112, 453, 2, 8, -293, -295, 436, 240, 102,
	168, 239, -294, 336, 461, 465, 35, 461, -323, -262,
	-335, -331, -261, -342, -341, 428, -391, 453, -433, 144,
	161, 8, -385, 8, -385, 387, 387, 8, -385, -385,
	460, 461, 2, 461, 2, 461, 2, 461, 2, 461,
	2, -323, -323, -323, -323, -323, -323, -323, -261, -287,
	2, -382, -261, 4, 436, 240, 102, 168, 239, 336,
	5, -287, 2, -288, 2, -323, -261, -289, -324, -325,
	451, 452, 444, -336, -290, 2, -323, -262, -323, 50,
	218, 393, -291, -323, 154, -261, -261, 2, -261, 2,
	-431, 35, -261, -253, 465, 154, 35, 4, -253, -253,
	460, 461, 465, -286, 165, 236, 231, -286, -352, -285,
	206, -283, 272, -283, -283, -445, 460, 459, 463, 463,
	463, 463, 463, -347, -191, 458, 466, -391, -346, -345,
	35, -199, 269, -347, -347, 462, 461, -346, -206, 460,
	-261, -391, 366, 461, 462, 200, 200, 200, 327, 461,
	391, 431, -81, 264, 461, 465, -252, 34, 458, -295,
	460, -383, 426, 460, 460, 154, -251, -457, 461, 395,
	-312, -224, 300, 359, 312, 344, 375, 9, 8, 8,
	465, -391, 465, -458, 80, 391, 68, -314, 169, 68,
	-405, -193, 80, -406, -181, 63, 407, 292, 153, -458,
	80, -458, 80, 80, 349, 364, 51, -356, 38, 38,
	26, -99, 219, 154, 437, 377, 182, 391, -356, -280,
	-366, 97, 237, 238, 51, -386, -384, 452, -386, 51,
	-386, -386, -386, 431, -208, -356, 391, 282, -396, 391,
	465, 38, 38, 26, -99, 219, 154, 391, -221, -191,
	-362, -361, -397, -214, -181, 462, -323, -99, -323, -99,
	124, 2, -473, 214, 460, -228, 249, -279, -278, 249,
	-210, 2, -206, 154, -250, -363, 198, 465, -258, 282,
	124, 124, 460, 120, 298, 2, 262, 249, -192, 169,
	-173, 380, 124, -277, 416, -306, -99, 460, 105, 35,
	-306, -269, -270, -360, -271, -193, 460, -199, -181, 2,
	-206, -259, -259, -259, -221, -222, -190, -396, -397, -397,
	-81, -364, 461, 461, 461, -149, 266, -148, -181, 5,
	-152, 416, -227, -315, -314, -409, -410, -405, 224, 182,
	407, 199, 137, -243, -194, -193, 98, -150, -361, 465,
	-150, -150, -362, -362, -206, 151, 2, 2, -282, -206,
	-190, -221, -206, -250, -250, -190, -190, -190, -99, -323,
	346, 151, 151, 462, -282, 298, 99, 377, 280, 182,
	-206, -221, -206, -221, -190, -206, -356, -160, 230, 411,
	-303, -384, 460, -304, 326, 327, 465, -165, 36, 110,
	211, -206, 437, 121, -323, -323, 391, -481, 373, -329,
	121, -323, 241, 253, 399, 136, 408, 112, 256, 154,
	460, -324, -324, 461, -263, -323, -323, 459, 468, 461,
	-246, 465, -245, -323, -261, -261, 461, 461, 391, 391,
	391, 391, 460, 462, -261, -250, 459, 459, 465, 461,
	-340, -341, 117, -323, 462, -438, 273, 460, 460, 461,
	461, 465, 461, 437, 437, 461, 461, 461, -323, 35,
	465, 465, 465, 461, 465, 465, 465, 461, 461, 154,
	461, 461, -296, 285, 461, 11, 12, 451, 452, 453,
	454, 149, 455, 456, 449, 450, 448, 441, 442, 443,
	75, 233, 328, 14, 15, 16, 200, 176, -324, -324,
	-324, 461, -327, -328, 154, 151, 35, -291, -291, -291,
	461, 154, -261, 461, 461, 460, 461, -317, -316, 429,
	-359, -254, 2, -352, -201, -391, -317, -317, -261, -323,
	206, 206, -284, 416, 262, -286, -352, -345, 461, -446,
	-387, -347, -346, -387, -322, -321, 152, 36, 110, 247,
	172, -199, -242, -346, -346, -391, -347, 461, -255, -354,
	-426, -246, 462, -391, -141, 5, 253, -141, -141, -250,
	24, 286, -366, 458, 459, 8, 8, 460, -385, -385,
	-250, 154, -388, -311, 405, 72, 300, 387, -388, -166,
	311, -193, -193, -206, 249, -314, 169, -172, 249, -366,
	-200, -181, 460, 460, 211, 211, -193, -200, 169, -193,
	169, -200, -200, -453, 300, 257, -323, 226, 298, 250,
	-167, 311, -99, -99, -99, 460, -457, 416, 111, -206,
	-221, -206, -210, 311, -216, -386, -386, -278, 311, -208,
	-396, 431, -190, -168, -99, -99, -99, 460, -191, -169,
	311, -147, 178, 461, 453, -181, 425, -181, -226, -229,
	-227, -193, -467, 433, 431, 124, 124, -242, -220, -206,
	458, -150, -396, -206, -396, -396, -396, 2, 460, 2,
	-206, 124, 262, 249, -174, 118, -478, 443, -190, -317,
	-254, -276, -309, 319, 262, -243, 421, -199, -276, -256,
	465, 154, 443, 462, -243, 2, -170, -170, -170, -170,
	-170, -81, -81, -150, 465, 460, 443, 443, 460, -396,
	-396, 461, 465, -206, -192, 182, 182, -198, -182, 461,
	465, 462, 460, -150, -96, 154, -46, 431, 377, 464,
	346, 346, -181, -202, -190, -206, -203, -221, 151, 151,
	-304, -323, -349, -206, 464, -323, -323, 121, 121, -323,
	-324, -324, -323, 121, 154, 460, -323, -333, 30, 30,
	461, 465, -319, -323, 461, 424, -246, -246, 461, 5,
	240, 168, 239, -294, 239, -294, -294, 8, 453, -391,
	461, -331, 119, -323, 385, -391, 453, -439, -196, 460,
	-181, 429, -245, -385, -369, -369, 461, -381, -366, -323,
	-323, -323, -323, -323, -323, -327, -323, -381, -366, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, 112, 249,
	256, -324, -328, -327, -323, -323, -366, 461, 461, 461,
	-261, -81, -273, 161, -323, -362, 465, -273, -273, 461,
	-352, -352, 460, -323, 206, 459, 461, 465, -346, 459,
	465, 467, 443, -242, 462, -345, 461, 465, -308, 35,
	461, -391, 265, 5, 8, 458, 459, 461, -385, 461,
	461, -250, -323, 391, 391, 124, 249, 418, -411, -406,
	-323, -248, -350, -323, 460, 460, -164, 116, 349, -459,
	2, 124, -170, 124, -170, 435, 460, 460, 391, 431,
	-261, -323, -151, 105, -390, -455, 464, -455, 464, 391,
	391, 282, 431, -261, 391, -150, 154, 2, 2, 2,
	461, 461, 465, -412, 35, 260, -181, -206, -208, 35,
	-64, 431, -361, -387, -177, 2, -299, 416, -191, -206,
	124, -175, 217, -478, -394, -427, -246, -276, -268, 250,
	79, 461, -317, -270, -254, -323, 2, 461, -148, -149,
	-396, -396, -396, -150, -152, -152, -315, 2, 460, -192,
	-182, 460, -152, -194, 2, -397, -99, 266, -206, 453,
	-282, -234, -233, 280, 256, -234, 326, 326, 263, 461,
	-165, -191, -323, -323, 121, 30, 30, -323, -323, -333,
	461, -323, -323, -261, 459, 5, -323, 461, 461, 461,
	-323, 462, -440, -181, -323, 461, 461, 461, 461, 465,
	465, 461, 461, 461, 461, -328, 154, 112, 256, 460,
	461, 461, -330, 164, 51, -352, -330, -330, -284, -250,
	-352, -320, -387, -321, -191, 458, -391, -354, 460, 462,
	459, 2, 458, 461, -193, -193, -314, 124, -413, 80,
	-415, 66, 137, 86, 249, 253, 407, 292, 63, 105,
	304, 35, 461, 461, 465, -165, -248, -250, 249, 370,
	105, 249, 105, 98, 402, -193, -200, -250, -250, -206,
	130, 461, 465, 443, 2, 453, 453, -210, -208, -396,
	130, 461, -191, -397, -230, 185, -193, -410, -407, -408,
	292, -414, -416, 137, 292, -99, 2, 460, -228, -279,
	-99, 266, 459, 460, -181, 262, 460, -191, -176, 216,
	-478, -394, -173, -302, -300, -307, 460, 262, -99, -246,
	443, 461, 461, 98, 98, -248, 460, 460, -250, 98,
	461, -47, -48, 182, 80, 284, -203, 377, 182, 460,
	460, -165, -323, -323, -323, 461, -246, -391, 453, -434,
	280, 461, -323, -323, -324, 154, 460, -333, -435, 430,
	-323, -261, -435, -435, 461, -347, -387, 2, 458, 2,
	-314, -200, -204, -197, -181, 137, 169, 253, 211, 460,
	-324, -206, 460, 2, -469, 107, 186, -313, -470, 85,
	371, -350, 461, 461, 253, 253, -323, -366, -170, -170,
	461, 461, -323, 391, -390, 84, -388, 2, -455, -323,
	391, -231, -232, 176, -412, 211, -197, 211, -468, 431,
	-226, -467, -65, -66, 392, -361, -248, -206, -248, 262,
	-478, -394, -174, -276, 113, -250, 80, -302, -329, -150,
	460, 460, 461, -248, -248, 461, 460, -150, 465, 26,
	460, 26, 460, -206, -221, -261, -261, 461, -246, 51,
	461, 461, -324, -333, 461, -436, -437, -196, -346, 459,
	2, -415, -197, 249, -323, -183, 460, -323, 186, 108,
	174, -230, 460, 304, -189, 66, 460, 460, 460, 443,
	154, 460, -467, 278, 460, 98, 246, 461, 35, -66,
	9, 461, -299, 461, -206, -394, -175, 411, 250, 461,
	-200, -276, -397, -397, -313, 461, 461, -397, -48, -250,
	-250, 461, 461, -441, 298, 327, 163, -261, 461, 465,
	35, 124, 461, -417, 234, -181, 461, 108, 174, -231,
	-250, -206, -456, 416, -204, -236, -235, -233, -238, -237,
	-233, -261, -388, 84, 278, -261, -206, -249, -351, -193,
	98, -230, -99, -313, 460, -313, 460, -176, 349, -316,
	461, 461, -230, -313, 461, 461, 461, 461, -442, -443,
	43, 404, 89, -323, -442, -442, -437, -439, 137, -418,
	-421, -420, 262, 355, 155, 279, 461, 370, 427, -469,
	461, -242, -323, 461, 465, 421, 461, 465, 421, 461,
	154, 461, 460, 461, 465, -231, -468, -230, -248, -230,
	-248, -269, -150, -150, -231, -230, -150, -444, 123, -443,
	289, 150, 326, 289, 150, -444, -444, -197, -420, 262,
	-421, 262, 411, 109, -417, -235, 176, -237, 154, 278,
	-250, -351, -467, -231, 461, -231, 461, -317, -231, 89,
	161, 386, 246, 30, -419, 246, 317, 56, 349, -419,
	-418, 460, 460, 461, -474, 429, -313, -474, -313, 326,
	270, -443, 22, 253, 105, -469, -261, -261, -171, 56,
	317, 2, -230, -230, 461, 461, -231, -231, -231, 391,
	-474, -474, 460, -261, 461, -231,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 368, 369, 371,
	372, 373, 375, 376, 378, 380, 382, 384, 385, 387,
	389, 391, 392, 393, 394, 395, 397, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 457, 459,
	0, 929, 931, 933, 935, 25, 26, 0, 0, 190,
	192, 194, 0, 218, 220, 222, 223, 225, -2, 0,
	320, 321, 323, 325, -2, -2, 0, 0, 446, 448,
	0, 0, 0, 468, 469, 0, 1019, -2, 462, 464,
	466, 531, 533, 535, 537, 539, 541, 543, 544, 546,
	548, 550, 552, 554, 556, 558, 559, 561, 563, 565,
	567, 569, 571, 573, 575, 577, 579, 581, -2, -2,
	-2, 0, -2, -2, -2, 947, 29, 31, 33, 35,
	37, 39, 41, 61, 274, 275, 277, 279, 281, 284,
	285, 287, 1067, 327, 329, 331, 333, 335, 0, -2,
	1079, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1043, 1045,
	1047, 1049, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 370, 374, 377, 379, 381, 383, 386,
	388, 390, 396, 398, 400, 824, 1676, 1690, 1691, 1692,
	1695, 1696, 1697, 1698, 1699, 1700, 2039, 2119, 2120, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 0, 424, 422, 1670, 425, 1872, 427, 429,
	314, 315, 316, 317, 318, 319, 0, 439, 433, 438,
	440, 442, 443, 444, 445, 419, 417, 0, 439, 1722,
	437, 927, 928, 922, 923, 1905, 957, 458, -2, -2,
	-2, 2008, -2, 490, -2, 497, 2011, 1907, 502, 0,
	504, -2, 507, 930, 932, 934, 27, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, -2, -2,
	-2, -2, 0, 0, 1759, 1646, 1692, 1649, 1644, 191,
	193, 195, 196, 0, 0, 0, 0, 0, 0, 219,
	221, 224, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 732, 0, 0, 737, 875, 876, 897, 0, 0,
	0, 0, 322, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 0, 0, 0, 0, 0,
	252, 360, 361, 0, 1068, 1068, 0, 0, 0, 0,
	171, 162, 0, 0, 720, 447, 449, 0, 157, 0,
	0, 926, 0, 173, 0, 0, 463, 465, 467, 532,
	534, 536, 538, 540, 542, 545, 547, 549, 551, 553,
	555, 557, 560, 562, 564, 566, 568, 570, 572, 574,
	576, 578, 580, 582, 583, 0, 0, 0, 0, -2,
	-2, 0, 0, -2, -2, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 0, 586, 588, 589,
	590, 0, 638, 655, 0, 866, 1069, 959, 937, 950,
	959, 939, 940, 941, 942, 943, 948, 949, 952, 0,
	944, 945, 946, 30, 32, 34, 36, 38, 40, 42,
	276, 278, 280, 282, 286, 288, -2, 1041, 1042, 328,
	330, 332, 334, 336, 450, 0, 452, 0, 587, 1023,
	1031, 0, -2, 0, 1073, 1073, 1073, 0, 0, 1042,
	1040, 0, 455, 456, 511, 512, 1303, 0, 0, 0,
	0, 0, 1543, 1387, 0, 513, -2, 1418, 1420, 1987,
	2008, 1542, 1422, 1423, 1424, 1425, 1426, 0, 0, 1429,
	0, 1431, 1432, 1433, 1434, 0, 1436, 0, 1440, 1441,
	1442, 0, 1992, 1623, 1688, -2, 1208, 1209, 1210, 1211,
	1212, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1684,
	0, 1509, 1456, -2, 1709, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1768, -2, -2,
	-2, -2, -2, -2, -2, 1264, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 2022, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 0, 1976, 1993, 1994, 1999,
	2001, 1995, 1984, 1479, -2, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	1265, -2, 1988, 1989, 2004, 2005, 2010, 2015, 2016, 1991,
	2000, -2, -2, 1059, 1880, 1062, 824, 1060, 1044, 1046,
	0, 1048, 0, 0, 0, 1053, 1076, 1074, 0, 1109,
	1057, 1058, 1068, 1127, 1150, 0, 1132, 0, 1150, 1176,
	0, 1137, 1900, 1457, 1458, 0, 1692, 1689, -2, 0,
	0, 0, 0, 0, 0, 420, 0, 426, 428, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 460, 461,
	0, 485, 0, 489, 1983, -2, 1727, 1920, -2, 493,
	960, 964, 965, 966, 967, 0, 0, 0, 0, 0,
	499, 0, 0, 486, 487, 505, 508, 0, 51, 0,
	1993, 1176, 53, 0, 1660, 1714, 1715, 1716, 1717, 1718,
	2022, 2038, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 55, 0, 1993, 58, 0, 1993, 0, -2, 62,
	0, 1993, 174, 175, 1705, 1706, 1710, 1711, 1712, 1713,
	65, 0, 1666, 67, 0, 1663, 76, 0, 1993, 0,
	1643, -2, 0, 0, 712, 1640, 1645, 713, 1650, 0,
	197, 198, 199, 200, 201, 1993, 203, 204, 0, 206,
	207, 1993, 209, 210, 0, 212, 227, 228, 0, 230,
	0, 1993, 0, 0, 0, 236, -2, 253, 0, 250,
	0, 240, 241, 243, 244, 245, 246, 247, 0, 0,
	0, 881, 292, 290, 1671, 0, -2, 1993, 869, 872,
	1993, 874, 886, 1674, 0, -2, 0, 1066, 1993, 974,
	733, 734, 735, 736, 0, 311, 0, 987, 0, 989,
	0, 1009, 1182, 1127, 254, 255, 256, 257, 258, 1993,
	0, 0, 0, 263, 0, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 150, 1993, 339, 358, 150, 1993,
	342, 150, 1993, 345, 150, 1993, 348, 1638, 150, 1993,
	351, 352, 1993, 354, 176, 355, 1993, 357, 0, -2,
	413, 1678, -2, 363, 0, 364, 0, -2, 0, 188,
	0, 0, 718, 719, 0, 924, 925, 0, 0, 470,
	0, 0, 584, 585, 0, 0, 595, 596, 597, 598,
	1908, 1878, 1784, 602, 0, 605, -2, 0, 0, 0,
	609, 0, 614, 615, 616, 0, 717, 618, 0, 0,
	620, 0, 624, 0, 627, 0, 629, 0, 631, -2,
	-2, -2, 642, -2, 0, 646, 0, 648, 0, 0,
	0, 0, 663, 664, 0, 669, 0, 672, 673, 674,
	0, 676, 677, 678, 679, 0, 681, 682, -2, -2,
	686, 688, 0, 695, 0, 699, 0, 703, 0, 591,
	592, 150, 1180, 936, -2, 938, 0, 954, 1026, -2,
	0, 451, 0, 454, 1037, 0, 1033, 0, 1035, 0,
	1024, 1029, 1088, 1089, 0, 0, 0, 0, 1071, 1072,
	0, 0, 0, 1021, 1022, 0, 0, 0, 0, 1548,
	1549, 1550, 1551, 1552, 1553, 1556, 1557, 1554, 1555, 1558,
	1559, 0, 0, 0, 0, 0, 1560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1561, 1562,
	1563, 0, 0, 1565, 0, 1567, 0, 0, 0, 0,
	0, 0, 1366, 1368, 1631, 0, 0, 1564, 1308, 1309,
	1310, 1345, 1346, 0, 0, 1419, 1628, 1627, 1421, 0,
	1579, 0, 1428, 0, 1300, 1435, 1657, -2, 0, 1543,
	1574, 0, 0, 1443, 1444, 1445, 0, 0, 1579, 0,
	0, 1622, 0, 1511, 0, 1244, 0, 1245, 1246, 0,
	1247, 1248, 1261, 1274, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 0, 1603,
	-2, 0, 0, 0, 0, 0, 1061, 0, 0, 1113,
	1632, 1636, 1637, 1113, 1113, 0, 0, 1580, 1173, 1173,
	0, 0, 1169, 1169, 1169, 1167, 1144, 0, 401, 403,
	405, 407, 408, 409, 411, 1150, 0, 1160, 0, 1150,
	1150, 0, -2, 1132, 0, 0, 1160, 1177, 1178, 0,
	0, 0, 0, 0, 0, 1693, 0, 0, 0, 1680,
	0, 0, 0, 431, 441, 1068, 0, 1582, 1198, 1201,
	1202, 1203, 1204, 1207, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, -2, 1262, 1264, 1285, 1251, 1252, 1253, 1254, 1255,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1257, 0, 1232, 1232, 1232, 1249, 1250, 1273, 1284,
	1276, 1284, 1280, 1199, 1200, 1267, 1268, 1269, 1270, 0,
	435, 0, 0, 0, 0, -2, 495, 500, 501, 0,
	0, 962, 0, 968, 522, 523, 524, 970, 971, 0,
	498, 525, 526, 527, 528, 529, 530, 0, 841, 0,
	843, 1652, 0, 496, 515, 503, 0, 509, 77, 919,
	116, 0, 919, 919, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 101, 112, 89, 90, 0, 0, 0,
	0, 59, 849, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 100, 0, 95,
	79, 0, 0, 0, 102, 114, 0, 141, 143, 0,
	0, 1163, 158, 0, 711, 0, 0, 1693, 1648, 0,
	0, 0, 0, 229, 231, 0, 233, 234, 235, 0,
	880, 0, 242, 239, 283, 798, 1993, 848, 1993, 846,
	1675, 0, 0, 0, 309, 304, 0, 306, 867, 0,
	1065, 0, 0, 0, 0, 887, 0, 1993, 892, 1662,
	1701, 1702, 976, 0, 313, 0, 990, 0, 0, 1183,
	0, 1185, 0, 260, 261, 262, 0, 337, 0, 148,
	149, 0, 340, 0, 343, 0, 346, 0, 0, 349,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 164,
	0, 0, 0, 0, 0, 0, 188, 160, 188, 188,
	1163, 472, 1163, 474, 0, 0, 599, 600, 601, 603,
	604, 606, 607, -2, -2, 696, 666, 0, 0, 0,
	665, 617, 0, 705, 1896, 715, 619, 1759, 622, 1759,
	625, 1759, 628, 630, 633, 658, 641, 645, 0, 0,
	0, 650, 0, 652, 0, 654, 666, 667, 670, 675,
	680, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	953, 1027, 1029, 453, 1030, 0, 1039, 1032, 0, 1036,
	1025, 1086, 1087, 1092, 1093, 1099, 1102, 1103, 1095, 1303,
	1054, 1055, 1056, 1080, 1081, 906, 0, 2119, 1304, 1193,
	1305, 1306, 1659, 0, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, -2, -2, -2, -2, -2, -2,
	-2, -2, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, -2, -2, -2, 1343, 1344, -2, 1566,
	1568, 0, 1631, 0, -2, 0, -2, -2, -2, -2,
	1363, 0, 1365, 1370, 1372, 1374, 0, 0, 0, 0,
	1630, 1384, 1614, 1615, 0, 0, 1545, 1546, 1547, 1369,
	0, 1388, 1629, 1626, 0, 0, 1578, 1079, 1447, 0,
	0, 0, 0, 1454, 0, 1658, 1299, 1286, 1287, 1288,
	1289, 1290, 1291, 1301, 1439, 1576, 0, 1575, 0, 0,
	0, 1586, 0, 1621, 1617, 0, 1681, 1687, 1519, 0,
	0, 0, 0, 1655, 0, 0, 0, 0, 0, 0,
	0, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 1589, -2, -2, -2, -2, -2, -2, -2,
	-2, 0, 1493, 0, 1495, 1580, 1600, 0, 0, 1389,
	0, 0, 0, 1543, 0, 1498, 1580, 1608, 0, 0,
	0, 0, 0, 1580, 0, 1613, 0, 1505, 0, 1507,
	1063, 0, 0, 1188, 0, 0, 0, 1635, 1188, 1188,
	0, 1108, 0, 0, 1170, 1171, 1172, 0, 0, 1173,
	0, 1164, 1168, 1165, 1166, 0, 0, 1150, 402, 404,
	406, 410, 412, 1160, 1124, 0, 0, 1661, 1130, 1159,
	0, 824, 1149, 1160, 1160, 0, -2, 1134, 0, 0,
	1079, -2, 189, 823, 0, 0, 0, 0, 421, 423,
	0, 0, 415, 0, 418, 0, 1189, 1192, 0, 1205,
	0, 0, -2, 0, 0, 0, 0, 0, 488, 0,
	961, 969, 0, 519, 0, 521, 0, 842, 1654, 1653,
	0, 510, 0, 0, 0, 0, 918, 120, 1993, 0,
	152, 0, 0, 792, 1667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 91, 0, 0, 0, 0, 0, 0, 0, 850,
	851, 853, 859, 861, 0, 855, 1656, 0, 856, 0,
	858, 860, 862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 92, 0, 0, 0, 0, 1642,
	179, 1162, 0, 1641, 1651, 0, 202, 205, 208, 211,
	0, 237, 0, 0, 740, 723, 0, 844, 847, 0,
	824, 879, 1673, 0, 291, 188, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 885, 0, 0, 0, 1993,
	978, 984, 0, 1188, 0, 1007, 992, 0, 0, 0,
	1007, 1011, 1012, 1014, 1015, 0, 0, 1184, 0, 264,
	359, 150, 150, 150, 1639, 150, 150, 177, 353, 356,
	362, 414, 1068, 1068, 188, 186, 1857, 184, 181, 183,
	0, 0, 0, 741, 743, 744, 745, 746, 0, 1702,
	0, 1813, 1702, 0, 995, 997, 0, 155, 188, 0,
	0, 303, 471, 476, 593, 0, 635, 660, 608, 610,
	611, 612, 0, 716, 714, 621, 623, 626, 644, 647,
	649, 0, 0, 0, 662, 0, 0, 0, 0, 0,
	0, 0, 700, 701, 702, 704, 1181, 1028, 1038, 1034,
	0, 1097, 0, 1096, 1100, 1101, 0, 1083, 904, 905,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1385,
	0, -2, 1364, 1367, 1371, 1373, 1375, 0, 0, 0,
	0, 0, 0, 1569, 0, 1571, 1386, 1624, 1627, 1541,
	0, 0, 1078, 1079, 1079, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 1577, 0, 1584, 1585, 0, 1446,
	0, 1618, 0, 0, 0, 1455, 0, 0, 0, 1256,
	1230, 0, 1284, 1282, 1283, 1277, 1284, 1281, 0, 0,
	0, 0, 0, 1474, 0, 0, 0, 1478, 1490, 0,
	1492, 1494, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1392, 1393,
	1394, 1497, 1606, 1607, 0, 0, 0, 0, 0, 0,
	1503, 0, 1612, 1504, 1506, 1068, 1110, 1105, 1187, 0,
	1633, 1163, 1112, 1114, 1634, 1664, 1105, 1105, 0, 1581,
	0, 0, 1154, 0, 0, 0, 1156, 0, 1145, 0,
	1147, 1160, 1129, 0, 0, 1122, 0, 1118, 1119, 1120,
	1121, 824, 1158, 1131, 1135, 1681, 0, 1179, 0, 1139,
	1142, 0, 0, 1694, 213, 216, 217, 214, 215, 430,
	0, 0, 1583, 0, 1194, 0, 0, 0, 0, 0,
	434, 0, 484, -2, 517, 518, 520, 0, 516, 117,
	919, 0, 0, 910, 0, 122, 1993, 131, 0, 769,
	0, 1665, 0, 0, 0, 0, 921, 0, 1993, 150,
	1993, 150, 133, 136, 0, 140, 138, 0, 0, 760,
	78, 919, 81, 85, 93, 0, 0, 0, 99, 0,
	0, 0, 912, 0, 854, 857, 863, 60, 0, 914,
	908, 0, 907, 142, 83, 87, 94, 0, 916, 80,
	0, 188, 0, 159, 1647, 0, 0, 0, 0, 0,
	739, 809, 0, 0, 0, 0, 0, 0, 297, 293,
	0, 302, 308, 307, 870, -2, 873, 882, 0, 884,
	896, 0, 0, 0, 980, 984, 0, 983, 1066, 1079,
	312, 985, 1007, 0, 0, 0, 994, 991, 988, 1188,
	0, 0, 0, 0, 0, 259, 338, 341, 344, 347,
	350, 365, 366, 163, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 1702, 1702, 0, 1669, 0,
	0, 0, 0, 156, 161, 0, 473, 0, 0, 0,
	651, 653, 666, 689, 690, 755, 0, 755, 0, 0,
	0, 0, 1082, 906, 0, 1307, 1348, 0, 0, -2,
	0, 0, 1352, 0, 0, 0, -2, 0, 0, 0,
	1570, 1572, 0, 1626, 1448, 0, 0, 0, 1452, 1430,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 0, 1437, 1438,
	1544, 1587, 1616, 1620, 0, 1682, 1686, 1517, 1518, 1522,
	1672, 0, 0, 0, 1275, 1279, 1459, 0, 0, 0,
	0, 0, 0, 0, 1588, 1599, 1601, 1390, 1391, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, -2,
	-2, -2, 1408, 1409, 1410, -2, -2, -2, 0, 0,
	0, 1602, 1604, 1605, 1609, 1610, 0, 1500, 1501, 1502,
	1611, 0, 1107, 0, 1186, 1111, 0, 1107, 1107, 1075,
	1152, 0, 0, 1175, 0, 1127, 1146, 0, 1136, 1125,
	0, 1126, 0, 1157, 0, 1133, 1138, 0, 1141, 0,
	1448, -2, 432, 416, 0, 0, 1196, 1206, 0, 1259,
	1263, 436, 1161, 0, 0, 0, 0, 151, 767, 791,
	0, 0, 899, 906, 0, 0, 124, 0, 0, 0,
	132, 0, 129, 0, 135, 139, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 103, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 232, 878, 238,
	749, 797, 0, 799, 0, 724, 0, 798, 848, 0,
	289, 0, 296, 0, 868, 883, 0, 0, 0, 0,
	0, 982, 984, 0, 975, 976, 1091, 986, 1005, -2,
	1004, 0, 1079, 1013, 1010, 1016, 1017, 0, 185, 0,
	180, 182, 0, 166, 0, 0, 742, 747, 0, 0,
	0, 0, 0, 996, 998, 0, 172, 0, 594, 613,
	661, 691, 754, 0, 0, 693, 0, 0, 1094, 1098,
	1084, 906, 1350, 1354, 0, 0, 0, 1356, -2, 0,
	1378, -2, -2, 1573, 1625, 1427, 1079, 1449, 1451, 1302,
	1619, 0, 1524, 1521, 0, 1508, 1231, 1469, 1470, 0,
	0, 1473, 1475, 1476, 1477, 1598, 0, 0, 0, 0,
	1499, 1064, 1513, 0, 0, 1115, 1513, 1513, 1153, 0,
	1155, 1150, 1148, 1123, 1116, 0, 1682, 1140, 0, 0,
	1190, 1195, 0, 1258, 118, 119, 121, 0, 768, 0,
	771, 0, 0, 0, 0, 778, 779, 0, 0, 0,
	0, 0, 813, 822, 0, 901, 0, 0, 0, 126,
	145, 0, 0, 920, 0, 150, 150, 0, 0, 911,
	0, 0, 0, 0, 106, 0, 0, 913, 915, 909,
	0, 0, 917, 178, 757, 0, 809, 801, 802, 803,
	0, 808, 810, 0, 0, 728, 725, 740, 723, 845,
	877, 0, 294, 0, 895, 0, 0, 0, 972, 984,
	0, 977, 978, 1007, 1090, 0, 0, 0, 993, 1091,
	0, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	188, 475, 477, 0, 0, 483, 753, 0, 0, 0,
	0, 1085, 1358, -2, -2, 1379, 0, 1683, 1685, 1079,
	0, 1510, 0, 0, -2, 0, 0, 0, 1050, 0,
	1106, 1104, 1051, 1052, 1174, 1160, 0, 1143, 0, 1197,
	123, 0, 772, 773, 1668, 775, 0, 777, 780, 0,
	782, 1704, 0, 786, 793, 814, 0, 749, 0, 819,
	820, 900, 795, 0, 125, 127, 144, 903, 128, 134,
	0, 0, 82, 0, 0, 1753, 109, 107, 105, 84,
	0, 723, 756, 0, 800, 0, 811, 812, 726, 0,
	0, 0, 295, 298, 0, 301, 0, 896, 0, 0,
	0, 979, 980, 310, 0, 0, 0, 1007, 1018, 165,
	0, 0, 822, 0, 0, 790, 0, 170, 0, 479,
	0, 481, 0, 692, 694, 0, 0, 1450, 1528, 0,
	1471, 1472, -2, 0, 1416, 1512, 1514, 0, 1128, 1117,
	1191, 770, 774, 0, 0, 828, 0, 0, 0, 817,
	818, 757, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 729, 0, 749, 0, 299,
	300, 822, 0, 822, 0, 981, 982, 0, 1000, 1001,
	1003, 1008, 0, 0, 749, 822, 789, 0, 478, 0,
	0, 697, 698, 0, 0, 0, 0, 1523, 1417, 0,
	0, 0, 781, 833, 0, 0, 0, 815, 816, 813,
	0, 824, 130, 0, 902, 0, 761, 0, 0, 764,
	0, 0, 110, 1753, 108, 0, 0, 0, 805, 807,
	730, 757, 728, 749, 0, 749, 0, 973, 0, 1002,
	188, 188, 757, 749, 188, 480, 482, 1520, 1540, 1529,
	-2, 1956, 1756, 0, 1540, 1540, 1515, 1516, 0, 783,
	829, 830, 0, 825, 826, 827, 1703, 784, 785, 794,
	821, 828, 146, 758, 0, 0, 759, 0, 0, 113,
	0, 115, 0, 804, 0, 723, 727, 757, 0, 757,
	0, 1188, 167, 168, 787, 757, 169, 1525, 0, 0,
	1531, 1532, 1533, 1534, 1535, 1526, 1527, 776, 831, 0,
	832, 0, 0, 0, 833, 762, 0, 765, 0, 111,
	0, 806, 722, 893, 822, 893, 822, 999, 788, 0,
	1537, 1538, 0, 0, 834, 0, 837, 838, 0, 835,
	813, 0, 0, 752, 888, 0, 749, 890, 749, 1536,
	1539, 1530, 836, 839, 840, 796, 0, 0, 748, 750,
	751, 894, 757, 757, 757, 0, 893, 893, 763, 0,
	889, 891, 0, 0, 757, 766,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 449, 3, 455, 450, 3,
	460, 461, 453, 451, 465, 452, 462, 454, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 468, 3,
	441, 443, 442, 446, 464, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 458, 3, 459, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 466, 448, 467, 444,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 445, 57784, 447,
	57785, 457, 57786, 463, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1081
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1093
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1094
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1101
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1111
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1114
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1116
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1117
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1118
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1199
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1210
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1225
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1229
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1233
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1244
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1275
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1307
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1311
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1315
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1325
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1331
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1340
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1361
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1369
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1379
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1393
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1404
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1411
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1423
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1430
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1438
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1447
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1452
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1458
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1466
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1477
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1487
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1497
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1506
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1517
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1523
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1531
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1549
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1554
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1606
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1611
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1636
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1645
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1674
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1693
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1707
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1714
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1723
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1727
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1737
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1745
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1755
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1759
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1766
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1770
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1780
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1784
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1813
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1836
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1843
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1847
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1851
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1857
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1867
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1904
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1913
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1919
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1924
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1929
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1934
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1939
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1943
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1959
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1970
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1988
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1992
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2006
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2010
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2016
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2026
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2034
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2040
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2053
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2054
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2055
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2056
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2098
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2142
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2163
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2180
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2185
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2197
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2198
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2200
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2201
		{
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CREATE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2206
		{
			return unimplemented(sqllex, "create cast")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2207
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2208
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2209
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2210
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2211
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2212
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2213
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "create operator")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "create publication")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "create rule")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "create server")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2228
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2229
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2232
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2236
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2237
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "drop server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2263
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2265
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2266
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2269
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2293
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2297
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2303
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2307
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2316
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2323
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2329
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2335
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2339
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2350
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2362
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2378
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2388
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2392
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2413
		{

			sqlVAL.union.val = nil
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2427
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2437
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2440
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2441
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2452
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2453
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2454
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2455
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2456
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2465
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2466
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2467
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2468
		{
			return helpWith(sqllex, "DROP")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2471
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2472
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2483
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2490
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2505
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2513
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2517
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2543
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2581
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2593
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2596
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2600
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2605
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2628
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2631
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2633
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2641
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2645
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2656
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2660
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			return helpWith(sqllex, "DELETE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "INSERT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2675
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2682
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "DELETE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "INSERT")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2691
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2695
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2714
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2722
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2730
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2734
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2738
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2748
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2755
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2763
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2767
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2771
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2785
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2796
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2824
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2827
		{
			return helpWith(sqllex, "GRANT")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2847
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2851
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2855
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2858
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2863
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2867
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2877
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2895
		{
			return helpWith(sqllex, "RESET")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2896
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2904
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2911
		{
			return helpWith(sqllex, "RESET")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2919
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2922
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2933
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2936
		{
			return helpWith(sqllex, "USE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2941
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2942
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2943
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2947
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2949
		{
			return helpWith(sqllex, "USE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2965
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2983
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3013
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3017
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3023
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3060
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3063
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3073
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3089
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3093
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3115
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3118
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3120
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3123
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3127
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3146
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3153
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3158
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3163
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3168
		{
			return unimplemented(sqllex, "set from current")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3169
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3177
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3182
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3189
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3193
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3231
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3249
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3253
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3257
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3263
		{
			sqlVAL.union.val = tree.Low
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3267
		{
			sqlVAL.union.val = tree.Normal
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = tree.High
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3282
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3299
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3313
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3316
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3320
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3323
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3347
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3359
		{
			sqlVAL.str = "client_encoding"
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3362
		{
			sqlVAL.str = "timezone"
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3363
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3381
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3385
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3396
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3412
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3427
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3435
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3459
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3461
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3464
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3472
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3475
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3483
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3498
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3506
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3509
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3522
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3530
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3541
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3543
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3554
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3556
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3560
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3563
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3571
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3574
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3576
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3579
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3595
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3599
		{
			sqlVAL.union.val = true
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = true
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3603
		{
			sqlVAL.union.val = false
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3621
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3623
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3630
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3632
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3640
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3648
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3660
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3662
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3665
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3667
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3671
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3674
		{
			sqlVAL.union.val = true
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3675
		{
			sqlVAL.union.val = false
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3683
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3686
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3688
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3691
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3722
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3725
		{
			sqlVAL.union.val = true
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3726
		{
			sqlVAL.union.val = false
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3737
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3740
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3751
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3754
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3761
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3765
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3773
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3778
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3783
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3787
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3795
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3799
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3803
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3819
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3827
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3830
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3834
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3838
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3842
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3850
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3865
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3872
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3876
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3887
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3901
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3910
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3915
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3919
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3926
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3933
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3938
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4058
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4062
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4066
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4105
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4109
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4114
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4127
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4162
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4198
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4210
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4223
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4224
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4225
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4229
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4240
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4252
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4253
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4254
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4268
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4269
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4270
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4271
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4272
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4273
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4274
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4275
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4280
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4296
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4305
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4309
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4325
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4330
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.str = ""
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4355
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4361
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4368
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4381
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4401
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4411
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4425
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4436
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4446
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4470
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4488
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4512
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4522
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4526
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 787:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4537
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4547
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4581
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4586
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4619
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4633
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4643
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4653
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4668
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4675
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4681
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4692
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4702
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4708
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4728
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4733
		{
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4734
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4735
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4736
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4737
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4738
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4765
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4797
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4810
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4832
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4838
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4872
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4897
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4902
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4906
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4910
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4917
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4920
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4921
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4922
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4927
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4929
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4931
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4932
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4937
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4939
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4947
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4950
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4958
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4965
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = nil
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4990
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4995
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4996
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5004
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5012
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5013
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5016
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5017
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5023
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5025
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5027
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5029
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5031
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5033
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5049
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5063
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5078
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5092
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5106
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5109
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5110
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5114
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.union.val = false
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5135
		{
			sqlVAL.union.val = true
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = false
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5158
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5169
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5170
		{
			sqlVAL.str = ""
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5174
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5178
		{
			sqlVAL.union.val = tree.Descending
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5195
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5205
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5211
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5219
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5225
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5233
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5239
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5256
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5257
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5260
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5261
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5291
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5294
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5302
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5309
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5310
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5311
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5327
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5330
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5335
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5345
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5348
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5350
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5353
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5362
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5363
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5364
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5372
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5379
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5382
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5383
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.str = ""
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5391
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5395
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5399
		{
			sqlVAL.str = ""
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5425
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5429
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5442
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5444
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5448
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5457
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5461
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5467
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5479
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5483
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 972:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5513
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5517
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5521
		{
			sqlVAL.str = ""
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.str = ""
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.str = ""
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5547
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.str = ""
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5556
		{
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5557
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5569
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5576
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5583
		{
			return helpWith(sqllex, "INSERT")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5594
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5601
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5605
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5614
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5635
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5659
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5667
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5676
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5677
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5685
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5690
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5711
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5723
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5735
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5755
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5759
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5812
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5839
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5843
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5847
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5852
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5859
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5860
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5863
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5865
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5869
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5871
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5872
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5877
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5912
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5913
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5914
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5936
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5949
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5963
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5975
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6012
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6019
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6035
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6039
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6061
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6062
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6066
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6070
		{
			sqlVAL.union.val = nil
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6075
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6076
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6080
		{
			sqlVAL.union.val = true
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = false
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = false
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = true
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6105
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6106
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6110
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6114
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6140
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6145
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6160
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6185
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6189
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6198
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6204
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6211
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6224
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6234
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6235
		{
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6238
		{
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6239
		{
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6256
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6292
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6294
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6309
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6311
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6317
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6331
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6336
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6341
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6352
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6364
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6383
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6422
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6436
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6463
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6471
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6482
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6534
		{
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6536
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.union.val = nil
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = true
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = false
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6605
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6609
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6629
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.str = tree.AstFull
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.str = tree.AstRight
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.str = tree.AstInner
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6653
		{
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6654
		{
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.str = tree.AstHash
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.str = ""
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6704
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6711
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6712
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6716
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6721
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6739
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6745
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6753
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6782
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6795
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6803
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6804
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6822
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6824
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6832
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6833
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6844
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6846
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = types.String
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = types.Name
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6898
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6907
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6915
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6919
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = types.INet
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = types.Oid
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6939
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6943
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6947
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6978
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6986
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6994
		{
			sqlVAL.union.val = nil
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = types.Int2
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = types.Int2
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = types.Int4
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = types.Int
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = types.Int
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = types.Int
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = types.Float4
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = types.Float4
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = types.Float
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = types.Float
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7053
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7061
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7069
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = types.Bool
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = types.Bool
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = types.RegType
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7110
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = types.Float
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7129
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7135
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7157
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = types.String
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = true
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = false
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = types.Date
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7206
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7211
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7218
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7219
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7221
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7229
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7245
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = true
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = false
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = false
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = types.Interval
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = tree.Year
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = tree.Month
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = tree.Day
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7292
		{
			sqlVAL.union.val = tree.Month
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = nil
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7329
		{
			sqlVAL.union.val = tree.Second
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7332
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7379
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7623
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7645
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7673
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7677
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7681
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7689
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7775
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7779
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7791
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7795
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7799
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7807
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7815
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7905
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7910
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7919
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7921
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7925
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7929
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7937
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7985
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7996
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7997
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8012
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8023
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8067
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8105
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8109
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8135
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8140
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8145
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8147
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8150
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8155
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8160
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8165
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8179
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8180
		{
			return unimplemented(sqllex, "treat")
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8201
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8206
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8211
		{
			return unimplemented(sqllex, "within group")
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8212
		{
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8247
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8255
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.str = ""
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8336
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8349
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8377
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8413
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8417
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8446
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = tree.Any
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = tree.Some
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = tree.All
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8474
		{
			sqlVAL.union.val = tree.Div
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8476
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8478
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = tree.LT
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = tree.GT
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8484
		{
			sqlVAL.union.val = tree.LE
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = tree.GE
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = tree.NE
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = tree.Like
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8491
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8516
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8520
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8555
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8566
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8582
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8592
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8596
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8643
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8660
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8681
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8703
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8709
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8719
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8723
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8729
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8758
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8798
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8807
		{
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8808
		{
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8812
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8822
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8831
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8835
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8839
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8847
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8857
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8880
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8888
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8911
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8920
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8924
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8928
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8932
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8938
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8950
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8954
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8963
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8974
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8983
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8991
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9088
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9095
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9099
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9103
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9117
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9121
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9125
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9138
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9156
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9169
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9176
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9201
		{
			sqlVAL.str = ""
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9207
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9211
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
