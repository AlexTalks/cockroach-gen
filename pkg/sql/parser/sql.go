// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9123

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 969,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	177, 804,
	194, 804,
	208, 229,
	284, 229,
	292, 660,
	319, 229,
	328, 660,
	365, 660,
	389, 229,
	412, 660,
	-2, 0,
	-1, 75,
	208, 233,
	-2, 0,
	-1, 76,
	105, 969,
	183, 969,
	398, 969,
	399, 969,
	-2, 0,
	-1, 87,
	118, 943,
	132, 943,
	191, 943,
	219, 943,
	250, 943,
	260, 943,
	394, 943,
	-2, 930,
	-1, 115,
	123, 584,
	207, 584,
	382, 584,
	-2, 0,
	-1, 116,
	4, 971,
	21, 971,
	22, 971,
	23, 971,
	24, 971,
	25, 971,
	27, 971,
	32, 971,
	37, 971,
	38, 971,
	39, 971,
	40, 971,
	41, 971,
	42, 971,
	43, 971,
	44, 971,
	45, 971,
	46, 971,
	48, 971,
	49, 971,
	50, 971,
	51, 971,
	52, 971,
	53, 971,
	56, 971,
	57, 971,
	58, 971,
	59, 971,
	61, 971,
	62, 971,
	66, 971,
	67, 971,
	68, 971,
	69, 971,
	70, 971,
	72, 971,
	73, 971,
	74, 971,
	75, 971,
	77, 971,
	79, 971,
	80, 971,
	81, 971,
	84, 971,
	85, 971,
	93, 971,
	94, 971,
	95, 971,
	96, 971,
	97, 971,
	98, 971,
	99, 971,
	100, 971,
	102, 971,
	104, 971,
	105, 971,
	107, 971,
	110, 971,
	111, 971,
	112, 971,
	114, 971,
	116, 971,
	117, 971,
	119, 971,
	120, 971,
	121, 971,
	122, 971,
	123, 971,
	124, 971,
	125, 971,
	126, 971,
	127, 971,
	128, 971,
	129, 971,
	131, 971,
	137, 971,
	138, 971,
	139, 971,
	140, 971,
	141, 971,
	142, 971,
	144, 971,
	146, 971,
	150, 971,
	151, 971,
	153, 971,
	154, 971,
	156, 971,
	157, 971,
	159, 971,
	160, 971,
	161, 971,
	162, 971,
	163, 971,
	164, 971,
	165, 971,
	166, 971,
	167, 971,
	168, 971,
	169, 971,
	172, 971,
	173, 971,
	177, 971,
	178, 971,
	179, 971,
	180, 971,
	183, 971,
	184, 971,
	185, 971,
	186, 971,
	187, 971,
	188, 971,
	189, 971,
	190, 971,
	192, 971,
	194, 971,
	197, 971,
	198, 971,
	199, 971,
	201, 971,
	202, 971,
	205, 971,
	206, 971,
	207, 971,
	208, 971,
	210, 971,
	211, 971,
	213, 971,
	214, 971,
	216, 971,
	217, 971,
	220, 971,
	221, 971,
	224, 971,
	225, 971,
	227, 971,
	228, 971,
	229, 971,
	230, 971,
	231, 971,
	232, 971,
	233, 971,
	234, 971,
	235, 971,
	236, 971,
	238, 971,
	239, 971,
	240, 971,
	241, 971,
	243, 971,
	246, 971,
	247, 971,
	248, 971,
	249, 971,
	251, 971,
	252, 971,
	253, 971,
	255, 971,
	256, 971,
	257, 971,
	258, 971,
	261, 971,
	262, 971,
	264, 971,
	266, 971,
	267, 971,
	268, 971,
	269, 971,
	270, 971,
	271, 971,
	272, 971,
	273, 971,
	274, 971,
	276, 971,
	277, 971,
	278, 971,
	279, 971,
	280, 971,
	281, 971,
	283, 971,
	285, 971,
	286, 971,
	287, 971,
	288, 971,
	289, 971,
	290, 971,
	291, 971,
	292, 971,
	293, 971,
	295, 971,
	296, 971,
	297, 971,
	298, 971,
	299, 971,
	301, 971,
	302, 971,
	303, 971,
	304, 971,
	305, 971,
	306, 971,
	307, 971,
	308, 971,
	310, 971,
	312, 971,
	313, 971,
	314, 971,
	315, 971,
	316, 971,
	317, 971,
	319, 971,
	320, 971,
	321, 971,
	322, 971,
	323, 971,
	324, 971,
	325, 971,
	326, 971,
	328, 971,
	329, 971,
	330, 971,
	331, 971,
	332, 971,
	333, 971,
	334, 971,
	335, 971,
	336, 971,
	337, 971,
	339, 971,
	340, 971,
	341, 971,
	342, 971,
	344, 971,
	345, 971,
	346, 971,
	347, 971,
	349, 971,
	350, 971,
	351, 971,
	352, 971,
	353, 971,
	354, 971,
	355, 971,
	356, 971,
	357, 971,
	358, 971,
	359, 971,
	360, 971,
	362, 971,
	363, 971,
	364, 971,
	366, 971,
	367, 971,
	368, 971,
	369, 971,
	370, 971,
	371, 971,
	372, 971,
	373, 971,
	374, 971,
	376, 971,
	377, 971,
	378, 971,
	379, 971,
	382, 971,
	383, 971,
	384, 971,
	385, 971,
	386, 971,
	388, 971,
	389, 971,
	390, 971,
	392, 971,
	393, 971,
	396, 971,
	397, 971,
	398, 971,
	399, 971,
	400, 971,
	402, 971,
	404, 971,
	405, 971,
	406, 971,
	407, 971,
	408, 971,
	409, 971,
	410, 971,
	412, 971,
	413, 971,
	414, 971,
	419, 971,
	420, 971,
	421, 971,
	422, 971,
	423, 971,
	424, 971,
	-2, 0,
	-1, 117,
	1, 861,
	197, 861,
	283, 861,
	290, 861,
	427, 861,
	450, 861,
	-2, 0,
	-1, 119,
	1, 861,
	450, 861,
	-2, 0,
	-1, 120,
	1, 861,
	450, 861,
	-2, 0,
	-1, 121,
	1, 865,
	450, 865,
	-2, 0,
	-1, 145,
	118, 942,
	132, 942,
	191, 942,
	219, 942,
	250, 942,
	260, 942,
	394, 942,
	-2, 939,
	-1, 175,
	4, 978,
	5, 978,
	6, 978,
	7, 978,
	8, 978,
	9, 978,
	10, 978,
	21, 978,
	22, 978,
	23, 978,
	24, 978,
	25, 978,
	27, 978,
	32, 978,
	33, 978,
	37, 978,
	38, 978,
	39, 978,
	40, 978,
	41, 978,
	42, 978,
	43, 978,
	44, 978,
	45, 978,
	46, 978,
	48, 978,
	49, 978,
	50, 978,
	51, 978,
	52, 978,
	53, 978,
	54, 978,
	55, 978,
	56, 978,
	57, 978,
	58, 978,
	59, 978,
	61, 978,
	62, 978,
	64, 978,
	66, 978,
	67, 978,
	68, 978,
	69, 978,
	70, 978,
	72, 978,
	73, 978,
	74, 978,
	75, 978,
	77, 978,
	79, 978,
	80, 978,
	81, 978,
	83, 978,
	84, 978,
	85, 978,
	86, 978,
	87, 978,
	88, 978,
	89, 978,
	90, 978,
	91, 978,
	92, 978,
	93, 978,
	94, 978,
	95, 978,
	96, 978,
	97, 978,
	98, 978,
	99, 978,
	100, 978,
	101, 978,
	102, 978,
	104, 978,
	105, 978,
	107, 978,
	110, 978,
	111, 978,
	112, 978,
	114, 978,
	116, 978,
	117, 978,
	119, 978,
	120, 978,
	121, 978,
	122, 978,
	123, 978,
	124, 978,
	125, 978,
	126, 978,
	127, 978,
	128, 978,
	129, 978,
	130, 978,
	131, 978,
	137, 978,
	138, 978,
	139, 978,
	140, 978,
	141, 978,
	142, 978,
	144, 978,
	146, 978,
	149, 978,
	150, 978,
	151, 978,
	153, 978,
	154, 978,
	156, 978,
	157, 978,
	159, 978,
	160, 978,
	161, 978,
	162, 978,
	163, 978,
	164, 978,
	165, 978,
	166, 978,
	167, 978,
	168, 978,
	169, 978,
	170, 978,
	172, 978,
	173, 978,
	177, 978,
	178, 978,
	179, 978,
	180, 978,
	182, 978,
	183, 978,
	184, 978,
	185, 978,
	186, 978,
	187, 978,
	188, 978,
	189, 978,
	190, 978,
	192, 978,
	194, 978,
	195, 978,
	196, 978,
	197, 978,
	198, 978,
	199, 978,
	200, 978,
	201, 978,
	202, 978,
	205, 978,
	206, 978,
	207, 978,
	208, 978,
	210, 978,
	211, 978,
	213, 978,
	214, 978,
	215, 978,
	216, 978,
	217, 978,
	218, 978,
	220, 978,
	221, 978,
	224, 978,
	225, 978,
	227, 978,
	228, 978,
	229, 978,
	230, 978,
	231, 978,
	232, 978,
	233, 978,
	234, 978,
	235, 978,
	236, 978,
	237, 978,
	238, 978,
	239, 978,
	240, 978,
	241, 978,
	242, 978,
	243, 978,
	244, 978,
	245, 978,
	246, 978,
	247, 978,
	248, 978,
	249, 978,
	251, 978,
	252, 978,
	253, 978,
	256, 978,
	257, 978,
	258, 978,
	261, 978,
	262, 978,
	263, 978,
	264, 978,
	265, 978,
	266, 978,
	267, 978,
	268, 978,
	269, 978,
	270, 978,
	271, 978,
	272, 978,
	273, 978,
	274, 978,
	276, 978,
	277, 978,
	278, 978,
	279, 978,
	280, 978,
	281, 978,
	283, 978,
	285, 978,
	286, 978,
	287, 978,
	288, 978,
	289, 978,
	290, 978,
	291, 978,
	292, 978,
	293, 978,
	295, 978,
	296, 978,
	297, 978,
	298, 978,
	299, 978,
	301, 978,
	302, 978,
	303, 978,
	304, 978,
	305, 978,
	306, 978,
	307, 978,
	308, 978,
	310, 978,
	311, 978,
	312, 978,
	313, 978,
	314, 978,
	315, 978,
	316, 978,
	317, 978,
	319, 978,
	320, 978,
	321, 978,
	322, 978,
	323, 978,
	324, 978,
	325, 978,
	326, 978,
	328, 978,
	329, 978,
	330, 978,
	331, 978,
	332, 978,
	333, 978,
	334, 978,
	335, 978,
	336, 978,
	337, 978,
	338, 978,
	339, 978,
	340, 978,
	341, 978,
	342, 978,
	343, 978,
	344, 978,
	345, 978,
	346, 978,
	347, 978,
	349, 978,
	350, 978,
	351, 978,
	352, 978,
	353, 978,
	354, 978,
	355, 978,
	356, 978,
	357, 978,
	358, 978,
	359, 978,
	360, 978,
	362, 978,
	363, 978,
	364, 978,
	366, 978,
	367, 978,
	368, 978,
	369, 978,
	370, 978,
	371, 978,
	372, 978,
	373, 978,
	374, 978,
	376, 978,
	377, 978,
	378, 978,
	379, 978,
	382, 978,
	383, 978,
	384, 978,
	385, 978,
	386, 978,
	387, 978,
	388, 978,
	389, 978,
	390, 978,
	392, 978,
	393, 978,
	395, 978,
	396, 978,
	397, 978,
	398, 978,
	399, 978,
	400, 978,
	401, 978,
	402, 978,
	404, 978,
	405, 978,
	406, 978,
	407, 978,
	408, 978,
	409, 978,
	410, 978,
	412, 978,
	413, 978,
	414, 978,
	419, 978,
	420, 978,
	421, 978,
	422, 978,
	423, 978,
	424, 978,
	425, 978,
	433, 978,
	438, 978,
	439, 978,
	440, 978,
	447, 978,
	452, 978,
	-2, 0,
	-1, 540,
	148, 1641,
	380, 1641,
	430, 1641,
	449, 1641,
	-2, 0,
	-1, 541,
	148, 1718,
	380, 1718,
	430, 1718,
	449, 1718,
	-2, 0,
	-1, 542,
	148, 1631,
	380, 1631,
	430, 1631,
	449, 1631,
	-2, 0,
	-1, 544,
	148, 1804,
	380, 1804,
	430, 1804,
	449, 1804,
	-2, 0,
	-1, 546,
	148, 1832,
	380, 1832,
	430, 1832,
	449, 1832,
	-2, 0,
	-1, 553,
	148, 1728,
	380, 1728,
	430, 1728,
	449, 1728,
	-2, 459,
	-1, 570,
	449, 1591,
	451, 1591,
	-2, 629,
	-1, 571,
	449, 1593,
	451, 1593,
	-2, 630,
	-1, 572,
	449, 1592,
	451, 1592,
	-2, 631,
	-1, 573,
	451, 1539,
	-2, 632,
	-1, 718,
	1, 557,
	446, 557,
	448, 557,
	450, 557,
	-2, 0,
	-1, 719,
	1, 628,
	145, 628,
	446, 628,
	448, 628,
	450, 628,
	-2, 0,
	-1, 725,
	1, 571,
	446, 571,
	448, 571,
	450, 571,
	-2, 0,
	-1, 727,
	1, 575,
	446, 575,
	448, 575,
	450, 575,
	-2, 0,
	-1, 729,
	1, 585,
	446, 585,
	448, 585,
	450, 585,
	-2, 0,
	-1, 730,
	1, 594,
	446, 594,
	448, 594,
	450, 594,
	-2, 0,
	-1, 731,
	1, 596,
	446, 596,
	448, 596,
	450, 596,
	-2, 0,
	-1, 735,
	1, 610,
	446, 610,
	448, 610,
	450, 610,
	-2, 0,
	-1, 736,
	1, 612,
	446, 612,
	448, 612,
	450, 612,
	-2, 0,
	-1, 779,
	132, 982,
	219, 982,
	250, 982,
	-2, 939,
	-1, 794,
	132, 981,
	219, 981,
	250, 981,
	-2, 939,
	-1, 818,
	449, 1590,
	-2, 467,
	-1, 847,
	447, 1582,
	-2, 1573,
	-1, 853,
	5, 1113,
	-2, 1622,
	-1, 854,
	5, 1114,
	-2, 1626,
	-1, 855,
	5, 1115,
	-2, 1625,
	-1, 856,
	5, 1116,
	-2, 1830,
	-1, 857,
	5, 1117,
	-2, 1730,
	-1, 858,
	5, 1118,
	-2, 1796,
	-1, 859,
	5, 1119,
	-2, 1798,
	-1, 860,
	5, 1120,
	-2, 1809,
	-1, 861,
	5, 1121,
	-2, 1799,
	-1, 862,
	5, 1122,
	-2, 1800,
	-1, 863,
	5, 1123,
	-2, 1621,
	-1, 864,
	5, 1124,
	-2, 1843,
	-1, 865,
	5, 1125,
	-2, 1693,
	-1, 866,
	5, 1126,
	-2, 1737,
	-1, 867,
	5, 1127,
	-2, 1739,
	-1, 868,
	5, 1128,
	-2, 1697,
	-1, 869,
	5, 1129,
	447, 1600,
	-2, 1591,
	-1, 870,
	5, 1185,
	447, 1185,
	-2, 1878,
	-1, 875,
	447, 1601,
	-2, 1592,
	-1, 877,
	5, 1133,
	-2, 1876,
	-1, 878,
	5, 1134,
	-2, 1877,
	-1, 879,
	5, 1135,
	-2, 1696,
	-1, 880,
	5, 1136,
	-2, 1889,
	-1, 881,
	5, 1137,
	-2, 1698,
	-1, 882,
	5, 1138,
	-2, 1699,
	-1, 883,
	5, 1139,
	-2, 1700,
	-1, 884,
	5, 1140,
	-2, 1858,
	-1, 885,
	5, 1141,
	-2, 1887,
	-1, 886,
	5, 1142,
	-2, 1676,
	-1, 887,
	5, 1143,
	-2, 1677,
	-1, 888,
	5, 1157,
	-2, 1870,
	-1, 890,
	5, 1132,
	-2, 1866,
	-1, 891,
	5, 1132,
	-2, 1865,
	-1, 892,
	5, 1132,
	-2, 1882,
	-1, 893,
	5, 1149,
	-2, 1860,
	-1, 894,
	5, 1150,
	-2, 1623,
	-1, 895,
	5, 1160,
	-2, 1859,
	-1, 896,
	5, 1162,
	-2, 1898,
	-1, 898,
	5, 1173,
	-2, 1651,
	-1, 899,
	5, 1184,
	-2, 1891,
	-1, 900,
	5, 1176,
	-2, 1892,
	-1, 901,
	5, 1184,
	-2, 1893,
	-1, 902,
	5, 1180,
	-2, 1894,
	-1, 903,
	5, 1100,
	-2, 1706,
	-1, 904,
	5, 1101,
	-2, 1707,
	-1, 905,
	449, 1588,
	-2, 1572,
	-1, 906,
	447, 1918,
	-2, 1589,
	-1, 926,
	5, 1168,
	-2, 1819,
	-1, 943,
	5, 1167,
	-2, 1899,
	-1, 953,
	5, 1169,
	413, 1169,
	-2, 1861,
	-1, 954,
	5, 1170,
	413, 1170,
	-2, 1862,
	-1, 990,
	447, 1600,
	-2, 1591,
	-1, 1019,
	148, 1832,
	380, 1832,
	430, 1832,
	449, 1832,
	-2, 0,
	-1, 1020,
	1, 447,
	450, 447,
	-2, 873,
	-1, 1140,
	301, 1569,
	440, 1569,
	-2, 1568,
	-1, 1163,
	452, 1569,
	-2, 1570,
	-1, 1198,
	292, 660,
	412, 660,
	-2, 228,
	-1, 1218,
	272, 967,
	-2, 777,
	-1, 1227,
	254, 1595,
	-2, 0,
	-1, 1291,
	1, 336,
	446, 336,
	448, 336,
	450, 336,
	-2, 941,
	-1, 1294,
	4, 1897,
	11, 1897,
	12, 1897,
	14, 1897,
	15, 1897,
	16, 1897,
	17, 1897,
	18, 1897,
	19, 1897,
	21, 1897,
	22, 1897,
	23, 1897,
	24, 1897,
	25, 1897,
	27, 1897,
	30, 1897,
	32, 1897,
	34, 1897,
	37, 1897,
	38, 1897,
	39, 1897,
	40, 1897,
	41, 1897,
	42, 1897,
	43, 1897,
	44, 1897,
	45, 1897,
	46, 1897,
	48, 1897,
	49, 1897,
	50, 1897,
	51, 1897,
	52, 1897,
	53, 1897,
	56, 1897,
	57, 1897,
	58, 1897,
	59, 1897,
	61, 1897,
	62, 1897,
	63, 1897,
	66, 1897,
	67, 1897,
	68, 1897,
	69, 1897,
	70, 1897,
	71, 1897,
	72, 1897,
	73, 1897,
	74, 1897,
	75, 1897,
	77, 1897,
	78, 1897,
	79, 1897,
	80, 1897,
	81, 1897,
	83, 1897,
	84, 1897,
	85, 1897,
	93, 1897,
	94, 1897,
	95, 1897,
	96, 1897,
	97, 1897,
	98, 1897,
	99, 1897,
	100, 1897,
	102, 1897,
	104, 1897,
	105, 1897,
	107, 1897,
	110, 1897,
	111, 1897,
	112, 1897,
	114, 1897,
	116, 1897,
	117, 1897,
	119, 1897,
	120, 1897,
	121, 1897,
	122, 1897,
	123, 1897,
	124, 1897,
	125, 1897,
	126, 1897,
	127, 1897,
	128, 1897,
	129, 1897,
	133, 1897,
	134, 1897,
	135, 1897,
	136, 1897,
	137, 1897,
	138, 1897,
	139, 1897,
	140, 1897,
	141, 1897,
	142, 1897,
	143, 1897,
	144, 1897,
	146, 1897,
	149, 1897,
	150, 1897,
	151, 1897,
	153, 1897,
	154, 1897,
	156, 1897,
	157, 1897,
	159, 1897,
	160, 1897,
	161, 1897,
	162, 1897,
	163, 1897,
	164, 1897,
	165, 1897,
	166, 1897,
	167, 1897,
	168, 1897,
	169, 1897,
	170, 1897,
	171, 1897,
	172, 1897,
	173, 1897,
	174, 1897,
	175, 1897,
	176, 1897,
	178, 1897,
	179, 1897,
	180, 1897,
	182, 1897,
	183, 1897,
	184, 1897,
	185, 1897,
	186, 1897,
	187, 1897,
	188, 1897,
	189, 1897,
	190, 1897,
	192, 1897,
	194, 1897,
	195, 1897,
	196, 1897,
	197, 1897,
	198, 1897,
	199, 1897,
	200, 1897,
	201, 1897,
	202, 1897,
	203, 1897,
	204, 1897,
	205, 1897,
	206, 1897,
	207, 1897,
	208, 1897,
	210, 1897,
	211, 1897,
	213, 1897,
	214, 1897,
	215, 1897,
	216, 1897,
	217, 1897,
	218, 1897,
	220, 1897,
	221, 1897,
	224, 1897,
	225, 1897,
	226, 1897,
	227, 1897,
	228, 1897,
	229, 1897,
	230, 1897,
	231, 1897,
	232, 1897,
	233, 1897,
	234, 1897,
	235, 1897,
	236, 1897,
	237, 1897,
	238, 1897,
	239, 1897,
	240, 1897,
	241, 1897,
	244, 1897,
	246, 1897,
	247, 1897,
	248, 1897,
	249, 1897,
	251, 1897,
	252, 1897,
	253, 1897,
	256, 1897,
	257, 1897,
	258, 1897,
	259, 1897,
	261, 1897,
	262, 1897,
	264, 1897,
	266, 1897,
	267, 1897,
	268, 1897,
	269, 1897,
	270, 1897,
	271, 1897,
	272, 1897,
	273, 1897,
	274, 1897,
	276, 1897,
	277, 1897,
	278, 1897,
	279, 1897,
	280, 1897,
	281, 1897,
	283, 1897,
	285, 1897,
	286, 1897,
	287, 1897,
	288, 1897,
	289, 1897,
	290, 1897,
	291, 1897,
	292, 1897,
	293, 1897,
	295, 1897,
	296, 1897,
	297, 1897,
	298, 1897,
	299, 1897,
	300, 1897,
	301, 1897,
	302, 1897,
	303, 1897,
	304, 1897,
	305, 1897,
	306, 1897,
	307, 1897,
	308, 1897,
	310, 1897,
	311, 1897,
	312, 1897,
	313, 1897,
	314, 1897,
	315, 1897,
	316, 1897,
	317, 1897,
	318, 1897,
	319, 1897,
	320, 1897,
	321, 1897,
	322, 1897,
	323, 1897,
	324, 1897,
	325, 1897,
	326, 1897,
	328, 1897,
	329, 1897,
	330, 1897,
	331, 1897,
	332, 1897,
	333, 1897,
	334, 1897,
	335, 1897,
	336, 1897,
	337, 1897,
	339, 1897,
	340, 1897,
	341, 1897,
	342, 1897,
	343, 1897,
	344, 1897,
	345, 1897,
	346, 1897,
	347, 1897,
	349, 1897,
	350, 1897,
	351, 1897,
	352, 1897,
	353, 1897,
	354, 1897,
	355, 1897,
	356, 1897,
	357, 1897,
	358, 1897,
	359, 1897,
	360, 1897,
	362, 1897,
	363, 1897,
	364, 1897,
	366, 1897,
	367, 1897,
	368, 1897,
	369, 1897,
	370, 1897,
	371, 1897,
	372, 1897,
	373, 1897,
	374, 1897,
	376, 1897,
	377, 1897,
	378, 1897,
	379, 1897,
	382, 1897,
	383, 1897,
	384, 1897,
	385, 1897,
	386, 1897,
	388, 1897,
	389, 1897,
	390, 1897,
	392, 1897,
	393, 1897,
	396, 1897,
	397, 1897,
	398, 1897,
	399, 1897,
	400, 1897,
	402, 1897,
	404, 1897,
	405, 1897,
	406, 1897,
	407, 1897,
	408, 1897,
	409, 1897,
	410, 1897,
	412, 1897,
	413, 1897,
	414, 1897,
	419, 1897,
	420, 1897,
	421, 1897,
	422, 1897,
	423, 1897,
	424, 1897,
	425, 1897,
	426, 1897,
	428, 1897,
	429, 1897,
	430, 1897,
	431, 1897,
	432, 1897,
	433, 1897,
	435, 1897,
	436, 1897,
	437, 1897,
	438, 1897,
	439, 1897,
	440, 1897,
	441, 1897,
	442, 1897,
	443, 1897,
	445, 1897,
	448, 1897,
	449, 1897,
	451, 1897,
	452, 1897,
	-2, 0,
	-1, 1297,
	148, 1804,
	380, 1804,
	430, 1804,
	449, 1804,
	-2, 0,
	-1, 1367,
	1, 1850,
	446, 1850,
	448, 1850,
	449, 1850,
	450, 1850,
	-2, 608,
	-1, 1368,
	1, 1802,
	446, 1802,
	448, 1802,
	449, 1802,
	450, 1802,
	-2, 609,
	-1, 1381,
	1, 868,
	450, 868,
	-2, 873,
	-1, 1386,
	132, 981,
	219, 981,
	250, 981,
	-2, 939,
	-1, 1479,
	118, 943,
	132, 943,
	191, 943,
	219, 943,
	250, 943,
	260, 943,
	394, 943,
	-2, 1341,
	-1, 1532,
	448, 1474,
	-2, 0,
	-1, 1567,
	118, 943,
	132, 943,
	191, 943,
	219, 943,
	250, 943,
	260, 943,
	394, 943,
	-2, 1053,
	-1, 1622,
	447, 1172,
	-2, 1160,
	-1, 1661,
	1, 449,
	450, 449,
	-2, 873,
	-1, 1914,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1221,
	-1, 1915,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1222,
	-1, 1916,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1223,
	-1, 1917,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1224,
	-1, 1918,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1225,
	-1, 1919,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1226,
	-1, 1920,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1227,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1228,
	-1, 1933,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1240,
	-1, 1934,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1241,
	-1, 1935,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1242,
	-1, 1938,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1247,
	-1, 1944,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1251,
	-1, 1946,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1259,
	-1, 1947,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1260,
	-1, 1948,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1261,
	-1, 1949,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1262,
	-1, 2042,
	5, 1129,
	148, 1485,
	447, 1600,
	-2, 1591,
	-1, 2043,
	148, 1486,
	-2, 1854,
	-1, 2044,
	148, 1487,
	-2, 1727,
	-1, 2045,
	148, 1488,
	-2, 1652,
	-1, 2046,
	148, 1489,
	-2, 1687,
	-1, 2047,
	148, 1490,
	-2, 1725,
	-1, 2048,
	148, 1491,
	-2, 1795,
	-1, 2119,
	1, 1054,
	83, 1054,
	118, 1054,
	132, 1054,
	145, 1054,
	149, 1054,
	155, 1054,
	158, 1054,
	182, 1054,
	191, 1054,
	200, 1054,
	215, 1054,
	219, 1054,
	237, 1054,
	250, 1054,
	254, 1054,
	260, 1054,
	309, 1054,
	311, 1054,
	394, 1054,
	403, 1054,
	416, 1054,
	417, 1054,
	418, 1054,
	427, 1054,
	446, 1054,
	448, 1054,
	450, 1054,
	451, 1054,
	-2, 1053,
	-1, 2124,
	447, 1574,
	-2, 1586,
	-1, 2146,
	447, 1171,
	-2, 1161,
	-1, 2359,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1249,
	-1, 2360,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1253,
	-1, 2366,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1255,
	-1, 2546,
	197, 873,
	283, 873,
	290, 873,
	427, 873,
	-2, 446,
	-1, 2617,
	448, 1544,
	451, 1544,
	-2, 1560,
	-1, 2631,
	272, 967,
	-2, 777,
	-1, 2708,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1257,
	-1, 2715,
	195, 0,
	196, 0,
	244, 0,
	-2, 1276,
	-1, 2778,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1305,
	-1, 2779,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1306,
	-1, 2780,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1307,
	-1, 2784,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1311,
	-1, 2785,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1312,
	-1, 2786,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1313,
	-1, 2828,
	447, 1575,
	-2, 1587,
	-1, 2909,
	449, 2000,
	-2, 916,
	-1, 2951,
	195, 0,
	196, 0,
	244, 0,
	-2, 1277,
	-1, 2954,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1280,
	-1, 2955,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1282,
	-1, 3098,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1281,
	-1, 3099,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1283,
	-1, 3109,
	195, 0,
	-2, 1314,
	-1, 3199,
	195, 0,
	-2, 1315,
	-1, 3308,
	40, 0,
	170, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1857,
}

const sqlPrivate = 57344

const sqlLast = 69382

var sqlAct = [...]int{

	875, 3137, 3307, 3317, 2618, 3390, 3162, 3380, 2271, 3279,
	3278, 3053, 3140, 2073, 3265, 3281, 3318, 3126, 3319, 991,
	3165, 2280, 2848, 2746, 1827, 3306, 3203, 2272, 2110, 3067,
	804, 1283, 3090, 1901, 2895, 1144, 2648, 3012, 1961, 207,
	2387, 207, 207, 1592, 1394, 207, 207, 207, 207, 207,
	2900, 2905, 207, 2640, 2111, 2615, 2849, 551, 2312, 3113,
	572, 1045, 2653, 795, 2268, 2642, 983, 2245, 2248, 1593,
	1562, 2521, 1560, 2352, 2508, 2468, 1785, 2495, 207, 1352,
	2175, 2986, 572, 1788, 2281, 668, 2311, 2484, 2385, 2303,
	1777, 1541, 2177, 2305, 2801, 3204, 1579, 1898, 1714, 32,
	1487, 1778, 1974, 1894, 1992, 1137, 1705, 2112, 1156, 1505,
	2168, 2348, 1026, 1732, 2467, 2652, 86, 1693, 1033, 814,
	1381, 1570, 2229, 871, 2107, 2092, 2114, 803, 138, 4,
	2246, 1542, 1153, 1279, 2004, 2207, 1691, 1738, 792, 2526,
	1958, 2616, 1146, 1292, 1276, 1266, 2274, 1774, 1212, 2315,
	1022, 519, 3163, 1500, 1986, 201, 2070, 975, 199, 2099,
	573, 574, 2081, 978, 2206, 1975, 200, 503, 1551, 2038,
	207, 207, 527, 957, 1468, 2555, 145, 1393, 1395, 1806,
	535, 568, 1773, 146, 545, 1794, 1290, 794, 1242, 644,
	1704, 1166, 613, 831, 1477, 522, 980, 955, 530, 710,
	1399, 1224, 2817, 1380, 138, 2818, 663, 1286, 2383, 1828,
	1808, 3418, 1808, 58, 2090, 577, 3409, 2273, 1030, 2090,
	1407, 1408, 3408, 1808, 59, 2090, 580, 175, 3389, 3376,
	1989, 1745, 3026, 3374, 1561, 2703, 3026, 577, 63, 799,
	3339, 2224, 1820, 2090, 3337, 1030, 1410, 2090, 580, 2660,
	1407, 1408, 2659, 2544, 799, 2402, 1450, 1451, 1452, 3334,
	2403, 2090, 3335, 677, 800, 177, 874, 3331, 69, 2804,
	3332, 3328, 1409, 832, 1745, 2194, 1410, 1741, 2083, 1456,
	2440, 2441, 1009, 897, 3304, 830, 2277, 1745, 3303, 3300,
	3299, 1745, 1820, 1820, 1990, 3261, 958, 958, 75, 972,
	3260, 3251, 1409, 2139, 3026, 3188, 3250, 85, 176, 3026,
	1429, 76, 961, 962, 1820, 780, 2440, 2441, 169, 2804,
	3244, 3238, 779, 1745, 3026, 2082, 170, 3236, 1407, 1408,
	3026, 3201, 3187, 3184, 2139, 1745, 3026, 3045, 3154, 3153,
	2455, 1745, 1745, 3146, 787, 3145, 1745, 147, 3026, 1745,
	77, 963, 1415, 3119, 1410, 175, 1745, 3100, 2440, 2441,
	2139, 2680, 1004, 3081, 1991, 1988, 2672, 3050, 959, 2221,
	2090, 2166, 1432, 1433, 1434, 1435, 3044, 1664, 3025, 2090,
	1409, 3026, 1415, 1437, 1438, 1439, 2672, 2953, 2919, 175,
	2139, 2912, 2911, 177, 2823, 2912, 2813, 2824, 2807, 2814,
	2739, 2090, 2679, 1745, 2481, 2680, 2135, 2090, 2479, 1447,
	1457, 2090, 2446, 1437, 1438, 1439, 2255, 2478, 2351, 1478,
	2090, 2440, 2441, 1744, 2458, 2459, 2460, 177, 2432, 2415,
	2090, 2090, 2416, 1005, 2404, 1430, 176, 2090, 58, 1745,
	2949, 2164, 2137, 1537, 986, 2386, 169, 2301, 2446, 59,
	1824, 1165, 2152, 2138, 170, 2090, 2139, 1445, 1993, 78,
	1415, 960, 786, 63, 1809, 1430, 1809, 785, 2440, 2441,
	176, 2132, 784, 2126, 2090, 147, 1745, 1809, 1684, 2089,
	169, 2455, 2090, 1823, 2661, 1354, 1824, 783, 170, 782,
	2446, 144, 81, 69, 82, 2456, 778, 1175, 2440, 2441,
	777, 776, 775, 2662, 3136, 774, 773, 772, 207, 147,
	771, 175, 175, 175, 770, 769, 2333, 207, 768, 767,
	708, 707, 706, 75, 705, 667, 704, 1431, 115, 703,
	702, 2456, 85, 701, 700, 699, 76, 698, 207, 1436,
	697, 696, 695, 694, 802, 207, 693, 692, 691, 177,
	177, 177, 2659, 2446, 690, 1987, 1005, 1431, 689, 688,
	687, 207, 1048, 207, 207, 1149, 207, 1048, 207, 686,
	685, 684, 676, 2456, 116, 77, 207, 207, 675, 2144,
	1032, 2082, 1448, 635, 1037, 1005, 148, 2457, 634, 593,
	1046, 592, 176, 176, 176, 1157, 591, 583, 582, 581,
	2446, 207, 1002, 169, 169, 2461, 558, 3003, 1816, 2965,
	1807, 170, 170, 557, 556, 207, 555, 1149, 1149, 207,
	207, 1874, 207, 2457, 539, 197, 196, 195, 194, 193,
	2446, 147, 2276, 147, 207, 1478, 2456, 192, 191, 190,
	189, 188, 207, 187, 1420, 1418, 1419, 1411, 1412, 1413,
	1414, 1416, 1417, 186, 185, 184, 207, 207, 207, 207,
	207, 1149, 1149, 183, 1446, 2457, 1149, 1020, 207, 1149,
	207, 182, 1449, 1169, 1420, 1418, 1419, 1411, 1412, 1413,
	1414, 1416, 1417, 2456, 78, 181, 1174, 180, 1179, 2913,
	1185, 1187, 179, 1287, 178, 2821, 2524, 2409, 2398, 2233,
	2261, 1159, 1181, 2127, 2451, 2449, 2450, 2442, 2443, 2444,
	2445, 2447, 2448, 2456, 2118, 1149, 144, 81, 1041, 82,
	1134, 1139, 1140, 1689, 1577, 2029, 1163, 1830, 2457, 1017,
	2027, 577, 873, 1494, 1508, 207, 1168, 1167, 175, 1489,
	1507, 1563, 580, 2442, 2443, 2444, 2445, 2447, 2448, 207,
	667, 2440, 2441, 115, 1229, 1411, 1412, 1413, 1414, 1416,
	1417, 1511, 2025, 1406, 207, 1171, 3324, 2023, 1508, 2021,
	1039, 993, 1142, 1302, 1507, 2457, 177, 1225, 1225, 3305,
	1305, 3234, 800, 2449, 2450, 2442, 2443, 2444, 2445, 2447,
	2448, 3194, 1280, 1829, 138, 1506, 1295, 3082, 3191, 116,
	3189, 3005, 1270, 1273, 2985, 2457, 2984, 3075, 1293, 2972,
	2971, 148, 2970, 2969, 2963, 2962, 2961, 1163, 2960, 176,
	1386, 1226, 175, 2884, 1218, 1221, 2837, 2836, 2834, 169,
	2827, 2798, 2797, 2796, 2723, 2719, 2519, 170, 2452, 2453,
	2454, 2440, 2441, 1387, 2683, 2451, 2449, 2450, 2442, 2443,
	2444, 2445, 2447, 2448, 2475, 2466, 1186, 2439, 147, 1489,
	177, 2436, 2435, 2433, 2422, 2421, 2420, 1180, 1490, 175,
	1488, 1782, 2262, 2417, 2414, 2392, 1299, 2391, 2384, 2302,
	2119, 1997, 1406, 2446, 971, 1405, 3416, 3388, 1750, 1748,
	3387, 3340, 2451, 2449, 2450, 2442, 2443, 2444, 2445, 2447,
	2448, 1476, 992, 176, 1490, 2748, 1379, 177, 1685, 2208,
	985, 1310, 3295, 169, 3293, 1407, 1408, 2347, 1385, 3229,
	3226, 170, 1317, 3223, 2450, 2442, 2443, 2444, 2445, 2447,
	2448, 3222, 3218, 1392, 1572, 3212, 3183, 3182, 1964, 3132,
	3111, 1410, 147, 3087, 1384, 3086, 3065, 3062, 3057, 3135,
	176, 3002, 2983, 829, 2933, 2930, 800, 207, 1382, 1481,
	169, 2864, 2863, 1486, 2852, 2851, 2809, 1409, 170, 2714,
	2673, 2634, 2605, 2446, 2586, 2565, 2564, 2540, 1539, 2480,
	780, 2538, 2413, 207, 1548, 2412, 2397, 779, 1388, 147,
	1970, 2375, 2242, 207, 1048, 207, 207, 207, 1402, 1403,
	3074, 58, 1512, 1149, 572, 207, 207, 1509, 1501, 572,
	207, 1510, 59, 1586, 1498, 207, 175, 2148, 2147, 2122,
	2104, 2088, 1580, 2019, 1472, 1576, 63, 175, 1540, 1536,
	1659, 2260, 1535, 1407, 1408, 1534, 1533, 1532, 1531, 1530,
	1048, 1407, 1408, 1529, 1528, 1502, 1503, 1415, 1526, 1525,
	1524, 1571, 1523, 1522, 177, 1521, 69, 1545, 1546, 1410,
	1520, 1519, 1518, 1517, 1687, 177, 1516, 1410, 1690, 1515,
	1514, 1491, 1658, 1473, 3206, 2501, 1471, 1466, 1016, 1007,
	999, 3061, 3004, 958, 2957, 1409, 75, 2833, 2816, 2812,
	2401, 2141, 1831, 1409, 2105, 85, 800, 176, 2536, 76,
	1469, 1589, 138, 1684, 1559, 2589, 1656, 169, 176, 2440,
	2441, 1036, 664, 1709, 2565, 170, 3227, 1684, 169, 1030,
	1583, 808, 1684, 1034, 2643, 3080, 170, 1581, 3046, 2819,
	1563, 987, 2675, 2674, 1377, 1508, 147, 58, 77, 666,
	1661, 1507, 2056, 1568, 1325, 2419, 1662, 147, 59, 2418,
	1027, 2357, 2862, 2196, 1538, 1496, 1031, 2210, 1670, 577,
	765, 1035, 63, 1828, 577, 1149, 207, 1683, 1989, 1558,
	580, 2028, 1048, 1415, 1565, 580, 2026, 1353, 2442, 2443,
	2444, 2445, 2447, 2448, 2620, 1588, 2619, 2844, 2613, 3166,
	1655, 1354, 69, 1779, 1699, 2407, 2689, 2600, 766, 1727,
	1746, 1590, 3114, 3391, 1437, 1438, 1439, 2273, 2024, 2750,
	1587, 207, 207, 2022, 2005, 2020, 1521, 1521, 207, 3192,
	3325, 3190, 75, 2146, 1527, 1676, 1504, 1021, 207, 1770,
	1202, 85, 1990, 3336, 3333, 76, 1028, 207, 1314, 207,
	2655, 207, 3275, 1029, 986, 207, 986, 78, 2896, 2309,
	3363, 3243, 3364, 2548, 3036, 1190, 1430, 207, 2153, 761,
	1729, 1863, 2550, 1731, 759, 1349, 1735, 1200, 1713, 757,
	2444, 2445, 2447, 2448, 77, 630, 3326, 2170, 755, 144,
	81, 1599, 82, 1861, 1783, 752, 3413, 3161, 2867, 2179,
	798, 1624, 3157, 1596, 3156, 3155, 2878, 1149, 207, 1149,
	2170, 175, 1991, 1988, 1149, 1680, 2875, 207, 2874, 207,
	207, 2169, 1739, 667, 2841, 2840, 115, 1766, 1800, 1149,
	1149, 577, 207, 1351, 2396, 1671, 1168, 1167, 207, 970,
	2395, 1791, 580, 572, 207, 1832, 207, 1201, 207, 177,
	207, 1027, 207, 1475, 1413, 1414, 1416, 1417, 1431, 1348,
	1734, 2394, 207, 631, 2160, 1036, 207, 1743, 2393, 2361,
	1706, 2226, 116, 797, 2220, 207, 2217, 2198, 2134, 1945,
	1769, 1798, 1742, 1383, 148, 1164, 2182, 2015, 1036, 1842,
	1030, 1312, 176, 78, 207, 2014, 1903, 2269, 1703, 1760,
	207, 1759, 169, 1675, 1674, 1694, 1993, 1684, 1681, 1695,
	170, 2588, 1235, 749, 1234, 1035, 3242, 1213, 1871, 3023,
	1048, 1707, 1708, 800, 3095, 144, 81, 847, 82, 2537,
	2690, 147, 1027, 1960, 1307, 1793, 1796, 1028, 1035, 1758,
	625, 1233, 799, 1232, 1029, 3020, 2197, 175, 1902, 1293,
	1881, 1834, 1872, 1211, 1838, 2125, 1254, 1878, 2189, 667,
	1811, 1845, 115, 1813, 1196, 3297, 1815, 3142, 798, 1968,
	1818, 1390, 2188, 1015, 1966, 1417, 1418, 1419, 1411, 1412,
	1413, 1414, 1416, 1417, 997, 177, 3021, 1899, 1900, 1572,
	1210, 2692, 1017, 1825, 1696, 793, 1976, 1977, 577, 1833,
	1678, 1797, 3032, 1987, 2691, 1048, 1698, 2005, 116, 580,
	624, 1960, 2330, 2142, 1976, 2002, 1826, 1326, 1028, 1344,
	148, 2181, 2336, 2214, 1852, 1029, 2854, 1308, 176, 2733,
	1993, 1322, 2131, 2006, 1347, 1876, 1840, 1841, 169, 682,
	3355, 797, 1879, 1685, 2208, 2650, 170, 996, 207, 2597,
	2037, 2448, 2041, 2041, 2054, 3363, 1976, 1685, 2208, 2074,
	2076, 1700, 1685, 2208, 2080, 1198, 1376, 665, 1873, 2592,
	1345, 1362, 1048, 207, 1875, 1877, 796, 994, 633, 632,
	1726, 1030, 207, 1880, 2730, 207, 780, 2547, 1048, 780,
	780, 1625, 3219, 1890, 3403, 1969, 1891, 1892, 800, 1808,
	2123, 2001, 2865, 1354, 2339, 989, 1870, 1701, 2349, 2350,
	799, 800, 1711, 1213, 1481, 800, 2124, 2549, 662, 3258,
	1679, 1499, 2133, 1993, 515, 2167, 2876, 3016, 2440, 2441,
	3017, 2458, 2459, 2460, 2180, 1956, 2120, 2608, 3354, 2577,
	789, 2106, 740, 3030, 1709, 2116, 2117, 763, 510, 1313,
	762, 1862, 1972, 1701, 2731, 753, 623, 1954, 622, 2372,
	753, 2061, 1030, 2534, 791, 2257, 1999, 3019, 207, 754,
	2218, 1701, 1942, 1860, 958, 2651, 753, 2939, 3105, 3022,
	2576, 2370, 3370, 2583, 2096, 3286, 626, 3231, 2455, 1694,
	1465, 1599, 1599, 1695, 2411, 1715, 800, 2100, 2338, 790,
	1048, 1624, 1624, 1596, 1596, 207, 2012, 2115, 2065, 2049,
	799, 2013, 1719, 207, 2934, 2335, 2017, 2018, 2086, 2087,
	985, 2078, 985, 207, 2830, 2101, 2102, 1253, 2165, 138,
	2650, 2136, 2097, 741, 3322, 1195, 207, 1010, 1331, 1149,
	2941, 3320, 3362, 1568, 796, 3143, 3383, 3360, 1993, 1996,
	3256, 207, 1048, 2855, 1716, 207, 207, 3172, 2363, 3031,
	2446, 1950, 3064, 2171, 2143, 2638, 1359, 1510, 2264, 1951,
	1772, 1547, 1952, 3353, 1008, 1957, 750, 1003, 1696, 3257,
	3018, 207, 1311, 207, 740, 2367, 207, 2151, 1697, 1694,
	1698, 1967, 2337, 1695, 2243, 2201, 2368, 1309, 740, 2373,
	1844, 207, 1940, 1943, 1502, 1503, 791, 683, 207, 1389,
	207, 1014, 207, 502, 2193, 1323, 2183, 2185, 207, 2150,
	791, 207, 2200, 207, 2154, 207, 1720, 207, 207, 986,
	207, 1149, 1149, 1149, 2579, 1149, 1959, 1685, 1682, 207,
	207, 2215, 207, 2456, 2223, 1700, 986, 995, 3404, 207,
	1939, 3092, 1360, 1809, 2174, 3323, 2886, 2581, 1398, 2235,
	207, 2237, 207, 2297, 2298, 2230, 1324, 2321, 2323, 1321,
	2191, 1730, 2940, 2981, 742, 741, 2228, 2266, 1696, 2252,
	2199, 207, 207, 207, 2227, 207, 2527, 2787, 2284, 741,
	1698, 1721, 1722, 2216, 1140, 2209, 2211, 2212, 2213, 511,
	1717, 1710, 2580, 1672, 2275, 3148, 2275, 1550, 207, 1163,
	577, 3209, 3147, 3130, 1953, 1168, 2231, 3035, 2240, 3398,
	2843, 580, 1361, 1955, 3034, 2308, 2639, 2156, 1718, 3321,
	1397, 2561, 3381, 2256, 2557, 2457, 2286, 1701, 2369, 2158,
	2265, 987, 2247, 987, 2244, 1700, 2219, 2371, 1792, 1781,
	1780, 512, 3091, 2279, 2334, 2322, 2328, 2230, 2329, 2230,
	2293, 138, 2295, 2299, 1754, 3232, 2290, 2324, 2291, 2325,
	2292, 2159, 2294, 1554, 788, 1941, 743, 1293, 2300, 2729,
	1465, 1886, 2202, 2310, 2157, 1163, 1163, 3266, 1867, 513,
	1332, 514, 2364, 1665, 1397, 2901, 3068, 2510, 1550, 1599,
	3382, 1669, 3131, 2241, 2389, 2390, 1557, 207, 1256, 1624,
	2567, 1596, 1723, 2982, 744, 2341, 742, 1396, 2566, 2399,
	2093, 2788, 2355, 1839, 1552, 2811, 2344, 2789, 2494, 2091,
	742, 2346, 3384, 2130, 2129, 2128, 2254, 1701, 2296, 1555,
	1163, 1241, 2343, 797, 3138, 2452, 2453, 2454, 1398, 3093,
	3214, 2684, 2451, 2449, 2450, 2442, 2443, 2444, 2445, 2447,
	2448, 1553, 1227, 3397, 1554, 3033, 1667, 1692, 2511, 1239,
	517, 3054, 1697, 1790, 3367, 1724, 3164, 3128, 2497, 1228,
	1887, 1396, 1668, 1554, 2610, 2095, 681, 3269, 2061, 2061,
	2094, 800, 3215, 2362, 674, 1048, 2477, 1557, 2987, 2802,
	2482, 3369, 2010, 2400, 3338, 2489, 2490, 3228, 2509, 584,
	3233, 1374, 2491, 3129, 207, 1552, 1557, 207, 743, 2203,
	2204, 1356, 3139, 2488, 207, 1342, 2528, 207, 207, 1048,
	1555, 2470, 743, 3110, 2098, 1556, 793, 2980, 1048, 1340,
	1338, 2880, 2469, 2713, 2514, 207, 3270, 1336, 2406, 1555,
	2531, 3216, 1553, 1334, 1328, 2434, 744, 2517, 2374, 2251,
	207, 1237, 841, 87, 2225, 905, 2525, 2195, 2149, 1578,
	744, 2505, 1697, 1575, 1375, 1303, 2332, 2331, 207, 207,
	207, 2515, 2516, 2327, 207, 1869, 2504, 207, 2061, 2061,
	2061, 1849, 2545, 1657, 207, 207, 207, 207, 207, 2522,
	2518, 1513, 2512, 1709, 203, 2551, 505, 506, 207, 207,
	523, 505, 523, 533, 538, 2486, 207, 554, 1306, 2535,
	1217, 2500, 2523, 2493, 2483, 203, 1556, 2496, 207, 1149,
	2499, 207, 1240, 2498, 2472, 2473, 2474, 1048, 1859, 87,
	2009, 2532, 2558, 671, 1048, 1556, 3316, 203, 2741, 207,
	2513, 3263, 207, 207, 3009, 2562, 2543, 1373, 751, 2554,
	1238, 516, 207, 2899, 2641, 1149, 207, 1355, 1149, 1149,
	1149, 1341, 2525, 2860, 2568, 207, 2571, 2591, 2623, 2529,
	2530, 207, 679, 680, 2546, 1339, 1337, 207, 2627, 207,
	672, 673, 2858, 1335, 2552, 985, 207, 2842, 2637, 1333,
	1327, 781, 2584, 2622, 2585, 585, 586, 1236, 2621, 2503,
	801, 2270, 985, 2506, 2259, 2258, 2238, 1822, 1821, 1149,
	1149, 1819, 2646, 1817, 1814, 2587, 2657, 207, 207, 1699,
	1812, 207, 2603, 2598, 2604, 505, 505, 2671, 2582, 2593,
	976, 1810, 1801, 203, 207, 2645, 1048, 207, 207, 1048,
	207, 2607, 2541, 2542, 1699, 2200, 2596, 2687, 1751, 1749,
	986, 2606, 2563, 2601, 1740, 1728, 207, 2654, 986, 2602,
	2569, 1725, 2573, 2574, 1157, 986, 2654, 1046, 756, 758,
	1712, 1858, 1702, 3176, 1739, 2594, 1769, 2353, 967, 2595,
	1739, 1400, 1585, 588, 587, 3364, 3289, 3084, 3083, 986,
	1701, 1688, 1192, 800, 2682, 989, 2170, 989, 2170, 1048,
	2697, 2663, 968, 2644, 2686, 2656, 3178, 2186, 2187, 2184,
	1048, 2910, 207, 1599, 1584, 1709, 1371, 1372, 1846, 2716,
	1737, 1865, 3221, 1624, 2222, 1596, 2599, 2738, 3196, 138,
	2988, 2670, 2205, 589, 590, 1407, 1408, 2190, 2744, 1404,
	1736, 518, 2192, 3262, 2694, 3235, 2890, 2885, 2354, 1599,
	1407, 1408, 2826, 2278, 2751, 2701, 2079, 2699, 3379, 1624,
	1660, 1596, 2628, 1401, 1591, 2630, 2631, 2632, 1733, 2695,
	2665, 2666, 2667, 2698, 2668, 2669, 1410, 2725, 2726, 2727,
	2533, 3396, 2061, 2061, 969, 1478, 2721, 1409, 529, 2832,
	2799, 1707, 1708, 2958, 1899, 2757, 2440, 2441, 1163, 2732,
	2734, 2735, 1409, 2736, 2740, 207, 987, 2747, 1407, 1408,
	1899, 2767, 2162, 2161, 2162, 1316, 2677, 2678, 2539, 207,
	1889, 1315, 2756, 987, 2163, 1048, 2016, 2753, 2011, 1984,
	2831, 2754, 1358, 2820, 2728, 1357, 1476, 1474, 2766, 3405,
	3122, 2795, 3078, 2791, 3056, 207, 2929, 2918, 2894, 2883,
	2882, 2881, 2764, 2828, 2857, 2664, 2635, 2633, 2288, 2815,
	2263, 2239, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
	2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
	2061, 1971, 2061, 2792, 2805, 2806, 1804, 1803, 1802, 207,
	1784, 1762, 1761, 1757, 1756, 1755, 1753, 2230, 1752, 1391,
	2868, 1370, 1369, 1350, 1346, 1343, 1329, 2803, 138, 1265,
	2800, 2752, 1264, 1263, 1262, 1261, 2808, 1260, 1259, 2877,
	1258, 207, 207, 207, 1257, 1255, 2822, 1250, 1249, 1248,
	1247, 2829, 1246, 1209, 2879, 1208, 1207, 1206, 1048, 207,
	1205, 2838, 1204, 1149, 1203, 1197, 2872, 1191, 1189, 1599,
	1188, 1013, 1012, 2057, 942, 852, 2846, 1663, 764, 1624,
	207, 1596, 617, 1000, 748, 3141, 1364, 2914, 74, 1199,
	604, 68, 671, 207, 207, 1149, 1149, 1149, 2903, 207,
	207, 207, 2856, 3274, 207, 207, 2907, 738, 2575, 1848,
	2906, 207, 1330, 1011, 2866, 2200, 1850, 2873, 1599, 1599,
	554, 2502, 2925, 2103, 1048, 3255, 2938, 2902, 1624, 1624,
	1596, 1596, 2966, 2410, 1599, 1599, 203, 3202, 203, 203,
	3104, 1154, 2893, 203, 1624, 1624, 1596, 1596, 2889, 2008,
	1495, 203, 1170, 70, 2956, 2835, 840, 2230, 925, 87,
	2284, 87, 2908, 87, 2915, 1599, 2904, 2891, 2916, 207,
	3010, 2859, 2845, 2861, 2314, 1624, 1194, 1596, 2952, 2313,
	2931, 986, 2897, 2921, 2926, 2927, 2920, 2928, 2932, 807,
	1216, 1051, 1673, 2936, 203, 203, 2943, 1154, 846, 1686,
	2145, 1769, 2486, 2040, 1595, 849, 1597, 851, 850, 203,
	1598, 1497, 848, 1594, 2253, 2282, 1244, 1252, 728, 1677,
	1965, 2003, 2405, 1492, 820, 842, 2000, 1006, 819, 2507,
	207, 203, 203, 203, 203, 1154, 985, 2649, 801, 87,
	1048, 2892, 1048, 554, 985, 203, 87, 2825, 2944, 3073,
	1885, 985, 2345, 87, 1882, 620, 2437, 1985, 998, 2062,
	2979, 207, 207, 207, 2055, 2051, 1378, 1467, 2283, 1038,
	3000, 823, 1963, 207, 1483, 985, 2379, 2520, 2658, 207,
	2140, 207, 1893, 1771, 207, 207, 207, 207, 207, 966,
	965, 964, 3280, 3277, 3028, 207, 207, 1149, 2937, 1048,
	1666, 1149, 2922, 2923, 2924, 2995, 2992, 2990, 2991, 2155,
	203, 2522, 2997, 1459, 2624, 836, 3001, 207, 1162, 2487,
	1048, 3008, 2685, 1149, 203, 1214, 2993, 3220, 3058, 1458,
	760, 3211, 3052, 207, 1025, 1024, 1023, 2560, 3402, 538,
	2853, 3006, 174, 171, 3027, 173, 2989, 986, 172, 2870,
	2609, 90, 37, 2994, 207, 36, 35, 17, 3070, 3037,
	1048, 114, 3072, 3047, 2998, 113, 112, 3042, 111, 3029,
	110, 109, 108, 3085, 107, 2646, 781, 3059, 106, 105,
	3039, 3040, 104, 103, 102, 101, 1048, 3069, 1046, 3071,
	989, 100, 99, 98, 1470, 3077, 97, 96, 3079, 95,
	94, 3048, 93, 92, 91, 3055, 34, 989, 1599, 550,
	3060, 547, 1479, 2654, 3102, 50, 1485, 49, 1624, 89,
	1596, 3094, 3116, 3051, 1048, 88, 16, 33, 14, 2996,
	207, 3076, 207, 54, 1048, 207, 55, 3007, 3096, 13,
	29, 559, 30, 207, 3066, 80, 79, 3112, 28, 15,
	3088, 27, 3102, 25, 1769, 26, 3038, 987, 11, 8,
	7, 10, 1902, 3043, 12, 987, 207, 3125, 3101, 24,
	3117, 3118, 987, 143, 142, 73, 141, 72, 207, 140,
	139, 71, 23, 3168, 9, 207, 3120, 22, 3123, 135,
	1149, 986, 67, 137, 136, 207, 987, 3160, 986, 64,
	2057, 2057, 134, 3144, 3049, 3169, 133, 65, 3171, 132,
	131, 986, 66, 130, 21, 5, 207, 53, 6, 3089,
	2061, 2376, 2377, 3158, 1549, 3174, 3150, 3181, 2688, 3185,
	3186, 83, 505, 3167, 565, 207, 84, 31, 62, 3180,
	61, 207, 60, 20, 2906, 3175, 52, 87, 19, 207,
	1564, 3179, 1567, 203, 3173, 203, 165, 164, 203, 163,
	162, 2061, 158, 157, 161, 2646, 3208, 159, 1170, 160,
	1154, 203, 3217, 156, 129, 3200, 207, 207, 167, 203,
	1170, 523, 3207, 166, 203, 1170, 154, 3230, 3195, 151,
	554, 3177, 150, 207, 1149, 3205, 153, 155, 152, 207,
	2057, 2057, 2057, 1149, 1149, 149, 168, 3124, 128, 57,
	127, 207, 126, 207, 3121, 125, 567, 3249, 124, 123,
	56, 2463, 2464, 2465, 18, 3237, 2, 1, 0, 3240,
	3259, 0, 0, 207, 3247, 3248, 3246, 3151, 3152, 207,
	207, 3252, 1048, 0, 3271, 0, 3241, 985, 0, 0,
	2061, 0, 207, 3282, 0, 0, 3224, 0, 0, 0,
	3283, 0, 0, 3287, 1407, 1408, 3290, 0, 0, 3292,
	1902, 3294, 0, 806, 0, 3276, 0, 1599, 3284, 0,
	0, 3301, 207, 3302, 0, 0, 0, 1624, 0, 1596,
	1410, 3296, 3298, 3327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3312, 3313, 0, 3315, 3253, 3314, 3254,
	561, 0, 0, 3329, 205, 0, 1409, 3341, 207, 0,
	0, 0, 0, 0, 3343, 0, 3345, 566, 3350, 0,
	1599, 3352, 3342, 0, 3351, 3272, 3344, 207, 3346, 3347,
	1624, 203, 1596, 0, 3348, 3349, 0, 0, 0, 0,
	0, 0, 3225, 0, 3358, 3291, 3361, 3359, 0, 1407,
	1408, 207, 0, 3366, 3365, 3282, 3372, 563, 0, 0,
	3373, 3368, 3375, 0, 3245, 0, 3377, 0, 3378, 0,
	0, 0, 0, 0, 0, 1410, 203, 203, 0, 3386,
	0, 0, 3385, 203, 0, 0, 1415, 0, 2284, 0,
	0, 3393, 3395, 1789, 560, 1599, 0, 3392, 3399, 3394,
	0, 1409, 203, 985, 203, 1624, 203, 1596, 0, 0,
	505, 3400, 3401, 0, 3406, 0, 3407, 1437, 1438, 1439,
	0, 0, 1805, 3410, 3411, 3412, 3414, 3415, 0, 0,
	564, 0, 0, 0, 0, 3419, 0, 0, 0, 0,
	3417, 562, 0, 0, 0, 0, 0, 3371, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 987, 801,
	0, 0, 0, 554, 0, 0, 0, 0, 0, 1430,
	0, 0, 203, 0, 1154, 203, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 554, 0, 0,
	0, 0, 0, 203, 2057, 2057, 0, 0, 203, 203,
	0, 203, 0, 203, 0, 203, 0, 203, 0, 0,
	0, 989, 1437, 1438, 1439, 2709, 2710, 1864, 0, 989,
	0, 1866, 0, 0, 0, 0, 989, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 538,
	989, 0, 0, 0, 985, 554, 0, 0, 0, 0,
	0, 1431, 781, 0, 1430, 781, 781, 985, 0, 0,
	0, 0, 0, 0, 2057, 2057, 2057, 2057, 2057, 2057,
	2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
	2057, 2057, 2057, 0, 2057, 2768, 2769, 2770, 2771, 2772,
	2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782,
	2783, 2784, 2785, 2786, 0, 2790, 0, 0, 0, 0,
	1962, 0, 0, 0, 987, 0, 0, 1407, 1408, 3023,
	0, 0, 0, 1584, 801, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 1479, 0, 1410, 0, 3020, 1431, 0, 3013, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 806, 0,
	0, 3011, 0, 0, 0, 0, 0, 3015, 0, 1409,
	1419, 1411, 1412, 1413, 1414, 1416, 1417, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 3021, 0, 0, 0,
	1172, 0, 1176, 505, 1182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 3014, 0, 505, 0,
	0, 0, 1567, 2947, 0, 203, 0, 505, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	1433, 1434, 1435, 0, 87, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 987, 1411, 1412, 1413, 1414,
	1416, 1417, 0, 0, 0, 0, 0, 1301, 987, 0,
	1437, 1438, 1439, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3016, 0, 0,
	3017, 0, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 818, 0,
	2178, 0, 0, 0, 0, 0, 1132, 87, 203, 0,
	0, 1132, 0, 0, 0, 0, 0, 3019, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3022,
	0, 203, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	203, 2232, 87, 0, 87, 0, 1436, 0, 0, 0,
	0, 0, 989, 0, 1460, 1461, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 1431, 0, 203, 0, 1170, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 1789, 87, 0, 87,
	1493, 0, 0, 2178, 0, 505, 0, 2287, 0, 0,
	0, 0, 0, 203, 0, 0, 203, 0, 203, 0,
	203, 0, 203, 203, 0, 1154, 87, 0, 0, 0,
	3018, 0, 0, 0, 2306, 671, 0, 2178, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1170, 0, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 203, 203, 0,
	203, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452,
	0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	1443, 0, 0, 203, 0, 1407, 1408, 1410, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 1543,
	1543, 1543, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 1410, 0, 1409, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 1962, 0, 1426, 0,
	0, 0, 2057, 0, 0, 0, 0, 1409, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 1479, 0, 0,
	0, 0, 0, 3109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 2057, 0, 0, 0, 0, 0, 0,
	0, 0, 1170, 1432, 1433, 1434, 1435, 0, 0, 0,
	0, 2712, 0, 1415, 3133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 1433, 1434,
	1435, 2440, 2441, 0, 2458, 2459, 2460, 1415, 0, 0,
	1447, 1457, 0, 0, 1437, 1438, 1439, 0, 0, 0,
	2948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 1454, 0, 1437, 1438,
	1439, 0, 989, 1424, 1425, 0, 0, 0, 0, 989,
	0, 0, 2057, 0, 0, 0, 976, 0, 1445, 203,
	0, 2455, 989, 0, 976, 0, 1430, 203, 0, 0,
	0, 976, 0, 3199, 203, 0, 0, 0, 0, 505,
	0, 0, 505, 0, 1455, 0, 0, 0, 0, 505,
	1430, 0, 505, 505, 0, 0, 0, 0, 203, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	1170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1170, 0, 0, 0, 0,
	0, 0, 0, 2446, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 203, 2178, 2556, 0, 0, 818, 2178,
	0, 0, 2556, 0, 1132, 0, 0, 0, 1431, 2178,
	2556, 2178, 2556, 2556, 1436, 87, 0, 87, 0, 0,
	0, 0, 0, 203, 203, 0, 0, 0, 0, 0,
	0, 0, 1431, 1448, 0, 2461, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 87, 1154, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2612, 0, 2456, 2614, 2617, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 1154, 0, 0, 801,
	0, 0, 2178, 0, 505, 0, 0, 0, 1407, 1408,
	0, 2178, 0, 0, 0, 1446, 0, 0, 1421, 1422,
	1428, 1427, 1423, 1449, 87, 1420, 1418, 1419, 1411, 1412,
	1413, 1414, 1416, 1417, 1410, 0, 1132, 0, 2975, 0,
	0, 2974, 203, 1789, 0, 0, 1789, 0, 0, 1420,
	1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417, 2457, 2693,
	1409, 0, 1154, 203, 0, 203, 0, 0, 1429, 0,
	0, 1883, 0, 1888, 0, 0, 0, 0, 0, 1895,
	0, 203, 0, 0, 0, 0, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 0, 1944, 0, 1946, 1947, 1948, 1949, 0, 0,
	1432, 1433, 1434, 1435, 0, 0, 0, 2749, 0, 0,
	1415, 0, 0, 0, 1973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 1998, 0, 0, 0, 0, 2452, 2453,
	2454, 1437, 1438, 1439, 0, 2451, 2449, 2450, 2442, 2443,
	2444, 2445, 2447, 2448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 0, 0, 87, 0, 2053, 0, 2064, 2066, 2071,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	203, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 2440, 2441, 0, 2458, 2459,
	2460, 906, 0, 0, 87, 0, 0, 1407, 1408, 0,
	0, 0, 0, 0, 2718, 0, 0, 0, 0, 0,
	1170, 0, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 2440, 2441, 1410, 2458, 2459, 2460, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 1436, 2440, 2441,
	2717, 2458, 2459, 2460, 0, 2455, 0, 0, 0, 1409,
	0, 204, 0, 0, 554, 1431, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 2455, 0, 0, 0, 0, 2887, 203, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2455, 1132,
	0, 0, 0, 2707, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2446, 0, 1432,
	1433, 1434, 1435, 976, 0, 2178, 203, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 2306, 2306,
	0, 0, 0, 0, 671, 671, 2178, 0, 0, 1789,
	1789, 0, 0, 2446, 0, 0, 203, 0, 0, 0,
	1437, 1438, 1439, 2234, 0, 2236, 1132, 0, 0, 2461,
	2446, 0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416,
	1417, 0, 1132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2462, 0,
	2456, 0, 0, 0, 0, 2461, 0, 0, 0, 0,
	0, 0, 1430, 0, 2967, 0, 0, 0, 0, 0,
	0, 0, 2461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2456, 0, 0, 0,
	0, 0, 0, 1407, 1408, 0, 0, 0, 0, 0,
	0, 0, 0, 2456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 1410,
	203, 0, 0, 0, 976, 1170, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	203, 0, 2457, 0, 1132, 1409, 0, 0, 0, 0,
	0, 0, 0, 1429, 1431, 0, 2178, 2556, 2178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1170, 0,
	0, 0, 0, 0, 2178, 0, 2556, 0, 2457, 1170,
	1170, 203, 2178, 2556, 0, 0, 0, 0, 0, 0,
	203, 203, 0, 0, 0, 2457, 1132, 0, 87, 2706,
	0, 0, 0, 87, 2359, 2360, 0, 0, 0, 0,
	2366, 0, 3063, 0, 0, 1432, 1433, 1434, 1435, 0,
	0, 0, 0, 0, 87, 1415, 0, 0, 2178, 2380,
	2381, 0, 0, 0, 0, 1998, 0, 0, 0, 0,
	0, 0, 0, 0, 2388, 0, 0, 0, 0, 1170,
	0, 0, 2452, 2453, 2454, 0, 1437, 1438, 1439, 2451,
	2449, 2450, 2442, 2443, 2444, 2445, 2447, 2448, 0, 0,
	2408, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	0, 0, 0, 0, 2423, 0, 0, 0, 2452, 2453,
	2454, 0, 0, 0, 0, 2451, 2449, 2450, 2442, 2443,
	2444, 2445, 2447, 2448, 0, 2452, 2453, 2454, 1430, 0,
	0, 0, 2451, 2449, 2450, 2442, 2443, 2444, 2445, 2447,
	2448, 0, 0, 0, 0, 2178, 0, 2556, 0, 0,
	3127, 0, 2071, 2071, 2071, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 1543, 0, 0,
	0, 0, 0, 0, 0, 2492, 0, 0, 0, 0,
	0, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2617, 0, 0, 0, 0, 0, 0,
	203, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	1170, 0, 0, 1962, 0, 0, 0, 0, 0, 0,
	1431, 0, 204, 1053, 204, 204, 1053, 0, 1053, 204,
	0, 203, 0, 0, 0, 0, 806, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 806,
	2749, 0, 0, 0, 0, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 3127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2578, 0, 0, 0, 1053, 1053,
	204, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2178, 2556, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 2556, 0, 0, 204, 204, 204,
	204, 0, 1053, 1053, 58, 0, 1170, 1053, 1170, 0,
	1053, 204, 0, 0, 0, 59, 0, 1420, 1418, 1419,
	1411, 1412, 1413, 1414, 1416, 1417, 0, 0, 3267, 63,
	0, 0, 0, 872, 1170, 203, 0, 0, 2647, 1132,
	0, 0, 0, 0, 0, 0, 0, 203, 87, 0,
	0, 0, 0, 0, 0, 0, 1053, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 1132, 0, 0, 204, 2749, 0, 0,
	0, 0, 1132, 0, 0, 0, 0, 0, 0, 75,
	204, 0, 0, 578, 1407, 1408, 0, 0, 85, 0,
	0, 0, 76, 0, 0, 0, 818, 1407, 1408, 0,
	0, 0, 2700, 2178, 0, 578, 1895, 0, 0, 818,
	1410, 0, 2704, 2705, 0, 0, 2708, 0, 0, 0,
	2711, 0, 3127, 1410, 0, 0, 0, 0, 0, 2715,
	0, 77, 0, 0, 0, 0, 1409, 0, 2722, 0,
	0, 2492, 0, 0, 1429, 0, 1170, 0, 0, 1409,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 2742, 0, 0, 0, 0, 0, 0, 0,
	0, 1132, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 2758, 2759, 0, 2760, 2761, 2762, 0, 0, 2763,
	2365, 0, 0, 2765, 2440, 2441, 0, 2458, 2459, 2460,
	0, 988, 0, 2358, 0, 0, 1432, 1433, 1434, 1435,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 1432,
	1433, 1434, 1435, 0, 2793, 2794, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 1437, 1438, 1439,
	0, 0, 2810, 0, 2455, 0, 0, 0, 0, 0,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 81, 0, 82, 0, 0, 0, 0,
	1132, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 1430,
	0, 0, 208, 0, 0, 2839, 667, 0, 0, 115,
	0, 0, 1430, 0, 204, 0, 0, 0, 0, 2847,
	2850, 0, 0, 0, 0, 1053, 2446, 204, 204, 0,
	0, 0, 177, 0, 1053, 204, 0, 0, 0, 0,
	204, 0, 2869, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 116, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 148, 0, 0,
	0, 1053, 0, 1436, 0, 176, 0, 0, 2461, 0,
	0, 0, 0, 0, 571, 169, 1436, 0, 0, 0,
	0, 1431, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 1543, 0, 0, 0, 2456,
	0, 0, 0, 0, 1296, 0, 2917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2945, 2946, 0, 0, 0, 198, 2950, 2951, 1132,
	0, 0, 2954, 2955, 0, 0, 0, 0, 0, 2959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 204, 2964, 0,
	0, 2457, 0, 1053, 0, 2968, 0, 0, 1420, 1418,
	1419, 1411, 1412, 1413, 1414, 1416, 1417, 0, 0, 0,
	0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 204, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	204, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1132, 0, 202, 0, 202, 202, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 0, 0, 0, 0, 2850, 0, 0, 0,
	0, 2452, 2453, 2454, 0, 0, 0, 0, 2451, 2449,
	2450, 2442, 2443, 2444, 2445, 2447, 2448, 0, 1053, 0,
	1053, 0, 0, 0, 0, 1053, 0, 0, 204, 0,
	0, 204, 202, 202, 0, 0, 0, 0, 1132, 0,
	1053, 1053, 876, 0, 0, 0, 0, 202, 0, 204,
	0, 0, 0, 0, 204, 204, 0, 204, 0, 204,
	0, 204, 0, 204, 0, 0, 0, 0, 0, 202,
	202, 202, 202, 0, 0, 2850, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 204, 0, 0, 0,
	0, 0, 3097, 3098, 3099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 654, 0, 3107, 3108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 3115, 0, 0, 0, 0, 0, 0, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 1132, 0, 1132, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 637,
	0, 2850, 0, 0, 0, 0, 0, 0, 638, 3149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2850, 0, 659,
	2850, 0, 0, 1132, 0, 0, 1053, 0, 0, 0,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 2850, 2850, 0, 1132, 0, 0, 0, 0, 0,
	0, 641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 1150, 0, 1049,
	0, 642, 0, 0, 643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1132, 0, 0, 3210, 0, 0,
	3213, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 658, 0, 0, 0, 0, 204, 0, 0, 1053,
	1132, 0, 0, 0, 0, 0, 0, 0, 0, 1150,
	1150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 1150, 1150, 0, 0, 0, 1150, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 1043, 0,
	0, 818, 645, 0, 0, 1161, 0, 0, 0, 0,
	0, 1566, 0, 988, 0, 0, 202, 0, 662, 646,
	0, 3311, 3311, 3311, 0, 0, 0, 1150, 0, 202,
	1566, 1053, 0, 0, 0, 0, 0, 578, 0, 0,
	3330, 0, 578, 0, 204, 0, 661, 0, 0, 0,
	0, 0, 594, 647, 204, 0, 648, 0, 2850, 0,
	2850, 0, 656, 0, 0, 0, 0, 204, 0, 649,
	1053, 1245, 0, 3311, 0, 595, 0, 0, 0, 0,
	0, 0, 204, 1053, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 1269, 1269, 1269, 1161, 0, 650, 657,
	0, 0, 0, 0, 0, 596, 615, 1300, 651, 0,
	0, 0, 204, 0, 0, 0, 0, 204, 0, 653,
	0, 0, 0, 0, 652, 0, 597, 0, 0, 598,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 3311, 621, 655, 0, 0, 204,
	0, 599, 204, 0, 204, 0, 204, 0, 204, 204,
	619, 0, 1053, 1053, 1053, 0, 1053, 0, 0, 0,
	0, 0, 1363, 0, 0, 0, 1132, 600, 0, 0,
	204, 0, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 578,
	602, 625, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 204, 204, 204, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 1151, 0, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 202, 202, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 624, 202, 0, 202, 0, 0, 0, 605, 1151,
	1151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 0, 0, 603,
	0, 0, 0, 0, 0, 1150, 571, 0, 606, 0,
	0, 571, 0, 1151, 1151, 0, 0, 0, 1151, 0,
	0, 1151, 0, 0, 0, 607, 0, 0, 0, 0,
	202, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 627, 0, 0, 0, 578, 202, 0, 202,
	0, 202, 608, 202, 0, 202, 0, 1151, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 610, 0, 0, 623, 0, 622,
	1573, 0, 0, 0, 611, 0, 1053, 0, 0, 0,
	0, 0, 0, 1582, 0, 612, 0, 0, 0, 0,
	618, 0, 0, 0, 0, 629, 0, 626, 0, 0,
	0, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 0, 1150, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	204, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	1053, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 988, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 1053, 204, 0, 1053,
	1053, 1053, 0, 988, 0, 0, 204, 0, 202, 1150,
	0, 1150, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 1150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 0, 0, 1764, 0,
	1053, 1053, 0, 0, 0, 1776, 1050, 0, 204, 0,
	0, 0, 0, 0, 0, 1151, 0, 0, 0, 0,
	0, 0, 0, 0, 1245, 0, 1795, 1053, 1795, 204,
	1053, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	1053, 0, 0, 0, 1776, 0, 202, 1836, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 1847, 0, 0, 0, 0,
	0, 1853, 0, 1854, 202, 1855, 0, 1856, 578, 1857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1868, 0, 202, 0, 0, 1049, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1151, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 202, 0, 202, 0, 202, 0,
	202, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	0, 0, 202, 0, 1049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 202, 202, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1151,
	0, 1151, 0, 204, 204, 0, 1151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	204, 1151, 1151, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2121, 0, 0, 0, 1053, 1053, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 0, 0, 0, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 988, 1150, 1150, 1150, 0, 1150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1566, 1050, 0, 0,
	0, 1053, 0, 1053, 0, 0, 0, 0, 0, 1407,
	1408, 0, 1440, 1441, 1442, 1450, 1451, 1452, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 1456, 0,
	0, 202, 0, 0, 0, 0, 0, 204, 2250, 0,
	0, 0, 0, 1776, 0, 0, 204, 204, 1053, 0,
	1053, 1409, 1053, 0, 1050, 0, 0, 0, 0, 1429,
	0, 202, 202, 0, 0, 0, 1426, 0, 0, 1566,
	1050, 1053, 0, 0, 1053, 2289, 0, 0, 1269, 0,
	1269, 202, 1269, 0, 1161, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2326, 0, 0, 0,
	0, 1053, 0, 0, 0, 202, 0, 0, 0, 202,
	0, 1432, 1433, 1434, 1435, 0, 0, 0, 202, 0,
	0, 1415, 0, 0, 0, 0, 0, 1053, 2340, 1161,
	2342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 1457,
	0, 0, 1437, 1438, 1439, 2356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
	202, 0, 1050, 1453, 1454, 1053, 0, 0, 0, 0,
	0, 1424, 1425, 0, 204, 0, 0, 0, 0, 0,
	0, 202, 0, 202, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 0, 202,
	0, 1151, 0, 0, 0, 0, 0, 1049, 0, 0,
	0, 0, 1455, 0, 1050, 0, 204, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 204, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 1151, 1151, 1151, 0, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 1053, 0, 0, 988, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 1053, 0, 0, 0, 1150, 0, 0,
	1150, 1150, 1150, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 1421, 1422, 1428, 1427,
	1423, 1449, 0, 1420, 1418, 1419, 1411, 1412, 1413, 1414,
	1416, 1417, 0, 0, 0, 2553, 2428, 0, 0, 2429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 1150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2590, 2250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	0, 1049, 0, 0, 0, 202, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2625,
	0, 0, 0, 2629, 988, 0, 0, 0, 0, 0,
	0, 0, 2636, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 0, 2681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2696, 0, 1161, 0, 0,
	0, 1050, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 0, 0, 2702, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 1410, 1049, 988, 1456,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1566, 0,
	0, 0, 1409, 0, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 1151, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 202,
	0, 0, 0, 0, 0, 0, 0, 1151, 0, 0,
	1151, 1151, 1151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 1433, 1434, 1435, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	1457, 1151, 1151, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1150, 1150, 1150,
	0, 0, 0, 0, 1453, 1454, 0, 0, 1050, 0,
	0, 1050, 1424, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 1445, 0, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 709,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 202, 0, 1444, 2888,
	0, 1050, 0, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 2898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 715, 0,
	0, 0, 0, 717, 0, 0, 0, 745, 202, 1436,
	0, 0, 0, 723, 724, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 741, 718, 0, 0, 0, 0, 2935, 202,
	0, 0, 1049, 0, 1049, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 0, 0, 1050, 713, 1150,
	0, 1049, 0, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 720, 721, 202, 0, 0, 0,
	0, 0, 1049, 0, 0, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 727, 1421, 1422, 1428,
	1427, 1423, 1449, 722, 1420, 1418, 1419, 1411, 1412, 1413,
	1414, 1416, 1417, 0, 0, 0, 0, 1994, 726, 0,
	1995, 0, 1049, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	0, 0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 1443, 0, 3041, 0, 1151, 0, 0, 1410, 0,
	0, 1456, 2250, 725, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 1409, 0, 0, 1151, 1151, 1151,
	736, 0, 1429, 0, 0, 0, 0, 0, 0, 1426,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 729, 743, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 1150, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 730, 0, 0, 0, 746, 747, 0,
	0, 0, 0, 744, 1432, 1433, 1434, 1435, 0, 0,
	733, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 122, 0, 0, 0, 0, 0, 58, 0,
	0, 1447, 1457, 0, 0, 1437, 1438, 1439, 0, 59,
	117, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	3134, 0, 0, 63, 0, 0, 1453, 1454, 0, 0,
	0, 0, 0, 0, 1424, 1425, 0, 0, 39, 119,
	0, 0, 1050, 0, 1050, 0, 1150, 0, 0, 1445,
	0, 38, 0, 69, 0, 1150, 1150, 1430, 0, 0,
	0, 0, 3170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 1455, 0, 0, 42, 0,
	0, 0, 0, 75, 0, 0, 120, 0, 0, 0,
	1444, 40, 85, 3193, 1049, 0, 76, 43, 0, 1151,
	0, 1050, 0, 1151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 44, 0, 1151, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 0, 0,
	3239, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3273, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 3288,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 1446, 0, 0, 1421,
	1422, 1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411,
	1412, 1413, 1414, 1416, 1417, 48, 144, 81, 0, 82,
	0, 46, 2973, 0, 0, 121, 0, 0, 0, 0,
	0, 47, 1151, 0, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 0, 1151, 170, 0, 0,
	0, 0, 0, 0, 0, 1151, 1151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 3, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 212, 213, 214, 215, 216,
	1054, 217, 1055, 1056, 1057, 1058, 456, 1059, 1060, 1061,
	1062, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 1063, 224, 225, 226, 227, 228, 229, 1064, 1065,
	230, 461, 462, 463, 1066, 231, 464, 1067, 1052, 1068,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1069, 241, 0, 242, 243, 244, 1070, 927, 245, 246,
	1071, 1072, 1074, 1073, 1075, 1076, 1077, 247, 248, 249,
	250, 251, 252, 465, 466, 1078, 253, 1079, 255, 254,
	1080, 256, 1081, 1082, 257, 258, 259, 1083, 260, 1084,
	261, 262, 1085, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 1086, 209, 1087, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 1088,
	279, 1089, 1090, 928, 280, 281, 1091, 282, 471, 1092,
	472, 283, 1093, 284, 285, 286, 287, 288, 289, 290,
	291, 473, 474, 475, 930, 1094, 479, 293, 0, 0,
	0, 210, 292, 294, 301, 1095, 929, 295, 476, 297,
	296, 298, 299, 300, 477, 1096, 478, 1097, 302, 931,
	932, 303, 304, 305, 933, 306, 307, 0, 0, 308,
	309, 310, 311, 1098, 313, 312, 1099, 314, 480, 934,
	315, 316, 935, 1100, 317, 318, 1101, 1102, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 936, 331, 332, 334, 333, 1103, 211, 937, 1104,
	481, 482, 335, 336, 1105, 337, 338, 339, 1106, 1107,
	341, 342, 343, 1108, 1109, 344, 483, 938, 345, 939,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 1110,
	353, 354, 485, 355, 486, 356, 1111, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 1112, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 1113, 379, 940, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 1114, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 1115, 406, 386, 387, 407, 941, 408, 489,
	409, 410, 1116, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 1117, 422, 423, 421, 1118,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 1119,
	491, 492, 493, 494, 1120, 1121, 431, 432, 495, 433,
	496, 1122, 434, 435, 436, 0, 437, 438, 1123, 1124,
	439, 440, 441, 442, 444, 1125, 445, 1126, 443, 446,
	447, 448, 497, 498, 499, 1127, 450, 449, 500, 1128,
	1129, 1130, 1131, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 2108,
	0, 0, 0, 0, 0, 0, 0, 2109, 212, 213,
	214, 215, 216, 1054, 217, 1055, 1056, 1057, 1058, 456,
	1059, 1060, 1061, 1062, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 1063, 224, 225, 226, 227, 228,
	229, 1064, 1065, 230, 461, 462, 463, 1066, 231, 464,
	1067, 1052, 1068, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 1069, 241, 0, 242, 243, 244, 1070,
	927, 245, 246, 1071, 1072, 1074, 1073, 1075, 1076, 1077,
	247, 248, 249, 250, 251, 252, 465, 466, 1078, 253,
	1079, 255, 254, 1080, 256, 1081, 1082, 257, 258, 259,
	1083, 260, 1084, 261, 262, 1085, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 1086, 209, 1087,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 1088, 279, 1089, 1090, 928, 280, 281, 1091,
	282, 471, 1092, 472, 283, 1093, 284, 285, 286, 287,
	288, 289, 290, 291, 473, 474, 475, 930, 1094, 479,
	293, 0, 0, 0, 210, 292, 294, 301, 1095, 929,
	295, 476, 297, 296, 298, 299, 300, 477, 1096, 478,
	1097, 302, 931, 932, 303, 304, 305, 933, 306, 307,
	0, 0, 308, 309, 310, 311, 1098, 313, 312, 1099,
	314, 480, 934, 315, 316, 935, 1100, 317, 318, 1101,
	1102, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 936, 331, 332, 334, 333, 1103,
	211, 937, 1104, 481, 482, 335, 336, 1105, 337, 338,
	339, 1106, 1107, 341, 342, 343, 1108, 1109, 344, 483,
	938, 345, 939, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 1110, 353, 354, 485, 355, 486, 356, 1111,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 1112, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 1113, 379, 940, 380,
	381, 382, 383, 488, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 1114, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 1115, 406, 386, 387, 407,
	941, 408, 489, 409, 410, 1116, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 1117, 422,
	423, 421, 1118, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 1119, 491, 492, 493, 494, 1120, 1121, 431,
	432, 495, 433, 496, 1122, 434, 435, 436, 0, 437,
	438, 1123, 1124, 439, 440, 441, 442, 444, 1125, 445,
	1126, 443, 446, 447, 448, 497, 498, 499, 1127, 450,
	449, 500, 1128, 1129, 1130, 1131, 451, 452, 501, 453,
	454, 455, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2999, 212, 213, 214, 215, 216, 1054, 217,
	1055, 1056, 1057, 1058, 456, 1059, 1060, 1061, 1062, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 1063,
	224, 225, 226, 227, 228, 229, 1064, 1065, 230, 461,
	462, 463, 1066, 231, 464, 1067, 1052, 1068, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 1069, 241,
	0, 242, 243, 244, 1070, 927, 245, 246, 1071, 1072,
	1074, 1073, 1075, 1076, 1077, 247, 248, 249, 250, 251,
	252, 465, 466, 1078, 253, 1079, 255, 254, 1080, 256,
	1081, 1082, 257, 258, 259, 1083, 260, 1084, 261, 262,
	1085, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 1086, 209, 1087, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 1088, 279, 1089,
	1090, 928, 280, 281, 1091, 282, 471, 1092, 472, 283,
	1093, 284, 285, 286, 287, 288, 289, 290, 291, 473,
	474, 475, 930, 1094, 479, 293, 0, 0, 0, 210,
	292, 294, 301, 1095, 929, 295, 476, 297, 296, 298,
	299, 300, 477, 1096, 478, 1097, 302, 931, 932, 303,
	304, 305, 933, 306, 307, 0, 0, 308, 309, 310,
	311, 1098, 313, 312, 1099, 314, 480, 934, 315, 316,
	935, 1100, 317, 318, 1101, 1102, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 936,
	331, 332, 334, 333, 1103, 211, 937, 1104, 481, 482,
	335, 336, 1105, 337, 338, 339, 1106, 1107, 341, 342,
	343, 1108, 1109, 344, 483, 938, 345, 939, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 1110, 353, 354,
	485, 355, 486, 356, 1111, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 1112, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 1113, 379, 940, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 1114,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	1115, 406, 386, 387, 407, 941, 408, 489, 409, 410,
	1116, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 1117, 422, 423, 421, 1118, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 1119, 491, 492,
	493, 494, 1120, 1121, 431, 432, 495, 433, 496, 1122,
	434, 435, 436, 0, 437, 438, 1123, 1124, 439, 440,
	441, 442, 444, 1125, 445, 1126, 443, 446, 447, 448,
	497, 498, 499, 1127, 450, 449, 500, 1128, 1129, 1130,
	1131, 451, 452, 501, 453, 454, 455, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3103, 0, 212, 213, 214, 215, 216, 1054,
	217, 1055, 1056, 1057, 1058, 456, 1059, 1060, 1061, 1062,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	1063, 224, 225, 226, 227, 228, 229, 1064, 1065, 230,
	461, 462, 463, 1066, 231, 464, 1067, 1052, 1068, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 1069,
	241, 0, 242, 243, 244, 1070, 927, 245, 246, 1071,
	1072, 1074, 1073, 1075, 1076, 1077, 247, 248, 249, 250,
	251, 252, 465, 466, 1078, 253, 1079, 255, 254, 1080,
	256, 1081, 1082, 257, 258, 259, 1083, 260, 1084, 261,
	262, 1085, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 1086, 209, 1087, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 1088, 279,
	1089, 1090, 928, 280, 281, 1091, 282, 471, 1092, 472,
	283, 1093, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 930, 1094, 479, 293, 0, 0, 0,
	210, 292, 294, 301, 1095, 929, 295, 476, 297, 296,
	298, 299, 300, 477, 1096, 478, 1097, 302, 931, 932,
	303, 304, 305, 933, 306, 307, 0, 0, 308, 309,
	310, 311, 1098, 313, 312, 1099, 314, 480, 934, 315,
	316, 935, 1100, 317, 318, 1101, 1102, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	936, 331, 332, 334, 333, 1103, 211, 937, 1104, 481,
	482, 335, 336, 1105, 337, 338, 339, 1106, 1107, 341,
	342, 343, 1108, 1109, 344, 483, 938, 345, 939, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 1110, 353,
	354, 485, 355, 486, 356, 1111, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 1112, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 1113, 379, 940, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	1114, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 1115, 406, 386, 387, 407, 941, 408, 489, 409,
	410, 1116, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 1117, 422, 423, 421, 1118, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 1119, 491,
	492, 493, 494, 1120, 1121, 431, 432, 495, 433, 496,
	1122, 434, 435, 436, 0, 437, 438, 1123, 1124, 439,
	440, 441, 442, 444, 1125, 445, 1126, 443, 446, 447,
	448, 497, 498, 499, 1127, 450, 449, 500, 1128, 1129,
	1130, 1131, 451, 452, 501, 453, 454, 455, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2745, 0, 212, 213, 214, 215, 216,
	1054, 217, 1055, 1056, 1057, 1058, 456, 1059, 1060, 1061,
	1062, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 1063, 224, 225, 226, 227, 228, 229, 1064, 1065,
	230, 461, 462, 463, 1066, 231, 464, 1067, 1052, 1068,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1069, 241, 0, 242, 243, 244, 1070, 927, 245, 246,
	1071, 1072, 1074, 1073, 1075, 1076, 1077, 247, 248, 249,
	250, 251, 252, 465, 466, 1078, 253, 1079, 255, 254,
	1080, 256, 1081, 1082, 257, 258, 259, 1083, 260, 1084,
	261, 262, 1085, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 1086, 209, 1087, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 1088,
	279, 1089, 1090, 928, 280, 281, 1091, 282, 471, 1092,
	472, 283, 1093, 284, 285, 286, 287, 288, 289, 290,
	291, 473, 474, 475, 930, 1094, 479, 293, 0, 0,
	0, 210, 292, 294, 301, 1095, 929, 295, 476, 297,
	296, 298, 299, 300, 477, 1096, 478, 1097, 302, 931,
	932, 303, 304, 305, 933, 306, 307, 0, 0, 308,
	309, 310, 311, 1098, 313, 312, 1099, 314, 480, 934,
	315, 316, 935, 1100, 317, 318, 1101, 1102, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 936, 331, 332, 334, 333, 1103, 211, 937, 1104,
	481, 482, 335, 336, 1105, 337, 338, 339, 1106, 1107,
	341, 342, 343, 1108, 1109, 344, 483, 938, 345, 939,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 1110,
	353, 354, 485, 355, 486, 356, 1111, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 1112, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 1113, 379, 940, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 1114, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 1115, 406, 386, 387, 407, 941, 408, 489,
	409, 410, 1116, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 1117, 422, 423, 421, 1118,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 1119,
	491, 492, 493, 494, 1120, 1121, 431, 432, 495, 433,
	496, 1122, 434, 435, 436, 0, 437, 438, 1123, 1124,
	439, 440, 441, 442, 444, 1125, 445, 1126, 443, 446,
	447, 448, 497, 498, 499, 1127, 450, 449, 500, 1128,
	1129, 1130, 1131, 451, 452, 501, 453, 454, 455, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2737, 0, 212, 213, 214, 215,
	216, 1054, 217, 1055, 1056, 1057, 1058, 456, 1059, 1060,
	1061, 1062, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 1063, 224, 225, 226, 227, 228, 229, 1064,
	1065, 230, 461, 462, 463, 1066, 231, 464, 1067, 1052,
	1068, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 1069, 241, 0, 242, 243, 244, 1070, 927, 245,
	246, 1071, 1072, 1074, 1073, 1075, 1076, 1077, 247, 248,
	249, 250, 251, 252, 465, 466, 1078, 253, 1079, 255,
	254, 1080, 256, 1081, 1082, 257, 258, 259, 1083, 260,
	1084, 261, 262, 1085, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 468, 469, 1086, 209, 1087, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	1088, 279, 1089, 1090, 928, 280, 281, 1091, 282, 471,
	1092, 472, 283, 1093, 284, 285, 286, 287, 288, 289,
	290, 291, 473, 474, 475, 930, 1094, 479, 293, 0,
	0, 0, 210, 292, 294, 301, 1095, 929, 295, 476,
	297, 296, 298, 299, 300, 477, 1096, 478, 1097, 302,
	931, 932, 303, 304, 305, 933, 306, 307, 0, 0,
	308, 309, 310, 311, 1098, 313, 312, 1099, 314, 480,
	934, 315, 316, 935, 1100, 317, 318, 1101, 1102, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 936, 331, 332, 334, 333, 1103, 211, 937,
	1104, 481, 482, 335, 336, 1105, 337, 338, 339, 1106,
	1107, 341, 342, 343, 1108, 1109, 344, 483, 938, 345,
	939, 484, 346, 340, 347, 348, 349, 350, 351, 352,
	1110, 353, 354, 485, 355, 486, 356, 1111, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 364, 365, 1112,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 1113, 379, 940, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 1114, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 1115, 406, 386, 387, 407, 941, 408,
	489, 409, 410, 1116, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 490, 1117, 422, 423, 421,
	1118, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	1119, 491, 492, 493, 494, 1120, 1121, 431, 432, 495,
	433, 496, 1122, 434, 435, 436, 0, 437, 438, 1123,
	1124, 439, 440, 441, 442, 444, 1125, 445, 1126, 443,
	446, 447, 448, 497, 498, 499, 1127, 450, 449, 500,
	1128, 1129, 1130, 1131, 451, 452, 501, 453, 454, 455,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2611, 0, 212, 213, 214,
	215, 216, 1054, 217, 1055, 1056, 1057, 1058, 456, 1059,
	1060, 1061, 1062, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 1063, 224, 225, 226, 227, 228, 229,
	1064, 1065, 230, 461, 462, 463, 1066, 231, 464, 1067,
	1052, 1068, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1069, 241, 0, 242, 243, 244, 1070, 927,
	245, 246, 1071, 1072, 1074, 1073, 1075, 1076, 1077, 247,
	248, 249, 250, 251, 252, 465, 466, 1078, 253, 1079,
	255, 254, 1080, 256, 1081, 1082, 257, 258, 259, 1083,
	260, 1084, 261, 262, 1085, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 1086, 209, 1087, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 1088, 279, 1089, 1090, 928, 280, 281, 1091, 282,
	471, 1092, 472, 283, 1093, 284, 285, 286, 287, 288,
	289, 290, 291, 473, 474, 475, 930, 1094, 479, 293,
	0, 0, 0, 210, 292, 294, 301, 1095, 929, 295,
	476, 297, 296, 298, 299, 300, 477, 1096, 478, 1097,
	302, 931, 932, 303, 304, 305, 933, 306, 307, 0,
	0, 308, 309, 310, 311, 1098, 313, 312, 1099, 314,
	480, 934, 315, 316, 935, 1100, 317, 318, 1101, 1102,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 936, 331, 332, 334, 333, 1103, 211,
	937, 1104, 481, 482, 335, 336, 1105, 337, 338, 339,
	1106, 1107, 341, 342, 343, 1108, 1109, 344, 483, 938,
	345, 939, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 1110, 353, 354, 485, 355, 486, 356, 1111, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	1112, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 1113, 379, 940, 380, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 1114, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 1115, 406, 386, 387, 407, 941,
	408, 489, 409, 410, 1116, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 1117, 422, 423,
	421, 1118, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 1119, 491, 492, 493, 494, 1120, 1121, 431, 432,
	495, 433, 496, 1122, 434, 435, 436, 0, 437, 438,
	1123, 1124, 439, 440, 441, 442, 444, 1125, 445, 1126,
	443, 446, 447, 448, 497, 498, 499, 1127, 450, 449,
	500, 1128, 1129, 1130, 1131, 451, 452, 501, 453, 454,
	455, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2007, 0, 212, 213,
	214, 215, 216, 1054, 217, 1055, 1056, 1057, 1058, 456,
	1059, 1060, 1061, 1062, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 1063, 224, 225, 226, 227, 228,
	229, 1064, 1065, 230, 461, 462, 463, 1066, 231, 464,
	1067, 1052, 1068, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 1069, 241, 0, 242, 243, 244, 1070,
	927, 245, 246, 1071, 1072, 1074, 1073, 1075, 1076, 1077,
	247, 248, 249, 250, 251, 252, 465, 466, 1078, 253,
	1079, 255, 254, 1080, 256, 1081, 1082, 257, 258, 259,
	1083, 260, 1084, 261, 262, 1085, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 1086, 209, 1087,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 1088, 279, 1089, 1090, 928, 280, 281, 1091,
	282, 471, 1092, 472, 283, 1093, 284, 285, 286, 287,
	288, 289, 290, 291, 473, 474, 475, 930, 1094, 479,
	293, 0, 0, 0, 210, 292, 294, 301, 1095, 929,
	295, 476, 297, 296, 298, 299, 300, 477, 1096, 478,
	1097, 302, 931, 932, 303, 304, 305, 933, 306, 307,
	0, 0, 308, 309, 310, 311, 1098, 313, 312, 1099,
	314, 480, 934, 315, 316, 935, 1100, 317, 318, 1101,
	1102, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 936, 331, 332, 334, 333, 1103,
	211, 937, 1104, 481, 482, 335, 336, 1105, 337, 338,
	339, 1106, 1107, 341, 342, 343, 1108, 1109, 344, 483,
	938, 345, 939, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 1110, 353, 354, 485, 355, 486, 356, 1111,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 1112, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 1113, 379, 940, 380,
	381, 382, 383, 488, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 1114, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 1115, 406, 386, 387, 407,
	941, 408, 489, 409, 410, 1116, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 1117, 422,
	423, 421, 1118, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 1119, 491, 492, 493, 494, 1120, 1121, 431,
	432, 495, 433, 496, 1122, 434, 435, 436, 0, 437,
	438, 1123, 1124, 439, 440, 441, 442, 444, 1125, 445,
	1126, 443, 446, 447, 448, 497, 498, 499, 1127, 450,
	449, 500, 1128, 1129, 1130, 1131, 451, 452, 501, 453,
	454, 455, 1155, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1747, 0, 0,
	0, 212, 213, 214, 215, 216, 1054, 217, 1055, 1056,
	1057, 1058, 456, 1059, 1060, 1061, 1062, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 1063, 224, 225,
	226, 227, 228, 229, 1064, 1065, 230, 461, 462, 463,
	1066, 231, 464, 1067, 1052, 1068, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 1069, 241, 0, 242,
	243, 244, 1070, 927, 245, 246, 1071, 1072, 1074, 1073,
	1075, 1076, 1077, 247, 248, 249, 250, 251, 252, 465,
	466, 1078, 253, 1079, 255, 254, 1080, 256, 1081, 1082,
	257, 258, 259, 1083, 260, 1084, 261, 262, 1085, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	1086, 209, 1087, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 1088, 279, 1089, 1090, 928,
	280, 281, 1091, 282, 471, 1092, 472, 283, 1093, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	930, 1094, 479, 293, 0, 0, 0, 210, 292, 294,
	301, 1095, 929, 295, 476, 297, 296, 298, 299, 300,
	477, 1096, 478, 1097, 302, 931, 932, 303, 304, 305,
	933, 306, 307, 0, 0, 308, 309, 310, 311, 1098,
	313, 312, 1099, 314, 480, 934, 315, 316, 935, 1100,
	317, 318, 1101, 1102, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 936, 331, 332,
	334, 333, 1103, 211, 937, 1104, 481, 482, 335, 336,
	1105, 337, 338, 339, 1106, 1107, 341, 342, 343, 1108,
	1109, 344, 483, 938, 345, 939, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 1110, 353, 354, 485, 355,
	486, 356, 1111, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 1112, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 1113,
	379, 940, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 1114, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 1115, 406,
	386, 387, 407, 941, 408, 489, 409, 410, 1116, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 1117, 422, 423, 421, 1118, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 1119, 491, 492, 493, 494,
	1120, 1121, 431, 432, 495, 433, 496, 1122, 434, 435,
	436, 0, 437, 438, 1123, 1124, 439, 440, 441, 442,
	444, 1125, 445, 1126, 443, 446, 447, 448, 497, 498,
	499, 1127, 450, 449, 500, 1128, 1129, 1130, 1131, 451,
	452, 501, 453, 454, 455, 1044, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 1054,
	217, 1055, 1056, 1057, 1058, 456, 1059, 1060, 1061, 1062,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	1063, 224, 225, 226, 227, 228, 229, 1064, 1065, 230,
	461, 462, 463, 1066, 231, 464, 1067, 1052, 1068, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 1069,
	241, 0, 242, 243, 244, 1070, 927, 245, 246, 1071,
	1072, 1074, 1073, 1075, 1076, 1077, 247, 248, 249, 250,
	251, 252, 465, 466, 1078, 253, 1079, 255, 254, 1080,
	256, 1081, 1082, 257, 258, 259, 1083, 260, 1084, 261,
	262, 1085, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 1086, 209, 1087, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 1088, 279,
	1089, 1090, 928, 280, 281, 1091, 282, 471, 1092, 472,
	283, 1093, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 930, 1094, 479, 293, 0, 0, 0,
	210, 292, 294, 301, 1095, 929, 295, 476, 297, 296,
	298, 299, 300, 477, 1096, 478, 1097, 302, 931, 932,
	303, 304, 305, 933, 306, 307, 0, 0, 308, 309,
	310, 311, 1098, 313, 312, 1099, 314, 480, 934, 315,
	316, 935, 1100, 317, 318, 1101, 1102, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	936, 331, 332, 334, 333, 1103, 211, 937, 1104, 481,
	482, 335, 336, 1105, 337, 338, 339, 1106, 1107, 341,
	342, 343, 1108, 1109, 344, 483, 938, 345, 939, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 1110, 353,
	354, 485, 355, 486, 356, 1111, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 1112, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 1113, 379, 940, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	1114, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 1115, 406, 386, 387, 407, 941, 408, 489, 409,
	410, 1116, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 1117, 422, 423, 421, 1118, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 1119, 491,
	492, 493, 494, 1120, 1121, 431, 432, 495, 433, 496,
	1122, 434, 435, 436, 0, 437, 438, 1123, 1124, 439,
	440, 441, 442, 444, 1125, 445, 1126, 443, 446, 447,
	448, 497, 498, 499, 1127, 450, 449, 500, 1128, 1129,
	1130, 1131, 451, 452, 501, 453, 454, 455, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	1054, 217, 1055, 1056, 1057, 1058, 456, 1059, 1060, 1061,
	1062, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 1063, 224, 225, 226, 227, 228, 229, 1064, 1065,
	230, 461, 462, 463, 1066, 231, 464, 1067, 1052, 1068,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1069, 241, 0, 242, 243, 244, 1070, 927, 245, 246,
	1071, 1072, 1074, 1073, 1075, 1076, 1077, 247, 248, 249,
	250, 251, 252, 465, 466, 1078, 253, 1079, 255, 254,
	1080, 256, 1081, 1082, 257, 258, 259, 1083, 260, 1084,
	261, 262, 1085, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 1086, 209, 1087, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 1088,
	279, 1089, 1090, 928, 280, 281, 1091, 282, 471, 1092,
	472, 283, 1093, 284, 285, 286, 287, 288, 289, 290,
	291, 473, 474, 475, 930, 1094, 479, 293, 0, 0,
	0, 210, 292, 294, 301, 1095, 929, 295, 476, 297,
	296, 298, 299, 300, 477, 1096, 478, 1097, 302, 931,
	932, 303, 304, 305, 933, 306, 307, 0, 0, 308,
	309, 310, 311, 1098, 313, 312, 1099, 314, 480, 934,
	315, 316, 935, 1100, 317, 318, 1101, 1102, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 936, 331, 332, 334, 333, 1103, 211, 937, 1104,
	481, 482, 335, 336, 1105, 337, 338, 339, 1106, 1107,
	341, 342, 343, 1108, 1109, 344, 483, 938, 345, 939,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 1110,
	353, 354, 485, 355, 486, 356, 1111, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 1112, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 1113, 379, 940, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 1114, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 1115, 406, 386, 387, 407, 941, 408, 489,
	409, 410, 1116, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 1117, 422, 423, 421, 1118,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 1119,
	491, 492, 493, 494, 1120, 1121, 431, 432, 495, 433,
	496, 1122, 434, 435, 436, 0, 437, 438, 1123, 1124,
	439, 440, 441, 442, 444, 1125, 445, 1126, 443, 446,
	447, 448, 497, 498, 499, 1127, 450, 449, 500, 1128,
	1129, 1130, 1131, 451, 452, 501, 453, 454, 455, 1983,
	0, 869, 826, 827, 828, 824, 825, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 1980, 217, 0, 0, 0, 0, 918,
	843, 0, 0, 0, 218, 219, 220, 457, 884, 863,
	895, 853, 894, 893, 0, 224, 855, 854, 227, 228,
	229, 845, 917, 230, 953, 954, 463, 0, 231, 924,
	0, 907, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	927, 245, 246, 910, 908, 909, 914, 912, 911, 913,
	247, 248, 249, 250, 898, 252, 891, 890, 815, 253,
	0, 255, 254, 0, 256, 1981, 0, 257, 889, 259,
	0, 260, 0, 261, 262, 0, 821, 263, 264, 266,
	269, 265, 270, 271, 272, 944, 945, 834, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 888, 886, 887,
	0, 278, 0, 279, 0, 0, 928, 280, 281, 0,
	282, 951, 0, 844, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 919, 920, 923, 930, 0, 921,
	865, 0, 0, 0, 210, 292, 294, 301, 0, 929,
	295, 877, 868, 879, 881, 882, 883, 878, 0, 870,
	0, 302, 931, 932, 303, 304, 305, 933, 903, 904,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 952, 934, 315, 316, 935, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 857, 328, 936, 331, 332, 334, 333, 812,
	211, 937, 835, 922, 892, 335, 336, 0, 866, 338,
	867, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	938, 345, 939, 946, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 947, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 885, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 940, 380,
	381, 382, 383, 822, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 858, 859, 861,
	862, 397, 401, 404, 405, 915, 406, 386, 387, 407,
	941, 408, 880, 860, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 926, 415, 416, 417, 948, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 856, 0, 899, 900, 901, 902, 0, 0, 431,
	432, 949, 433, 950, 833, 434, 435, 436, 0, 437,
	438, 0, 816, 439, 440, 441, 442, 444, 916, 445,
	0, 864, 446, 447, 448, 497, 896, 943, 1979, 450,
	449, 500, 0, 0, 0, 0, 451, 452, 501, 453,
	454, 455, 813, 0, 0, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 809, 810, 1982, 0, 0,
	0, 0, 0, 0, 839, 1978, 0, 0, 802, 837,
	869, 826, 827, 828, 824, 825, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 918, 843,
	0, 0, 0, 218, 219, 220, 457, 884, 863, 895,
	853, 894, 893, 0, 224, 855, 854, 227, 228, 229,
	845, 917, 230, 953, 954, 463, 0, 231, 924, 0,
	907, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 927,
	245, 246, 910, 908, 909, 914, 912, 911, 913, 247,
	248, 249, 250, 898, 252, 891, 890, 815, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 889, 259, 0,
	260, 0, 261, 262, 0, 821, 263, 264, 266, 269,
	265, 270, 271, 272, 944, 945, 834, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 888, 886, 887, 0,
	278, 0, 279, 0, 0, 928, 280, 281, 0, 282,
	951, 0, 844, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 919, 920, 923, 930, 0, 921, 865,
	0, 0, 0, 210, 292, 294, 301, 0, 929, 295,
	877, 868, 879, 881, 882, 883, 878, 0, 870, 0,
	302, 931, 932, 303, 304, 305, 933, 903, 904, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	952, 934, 315, 316, 935, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 857, 328, 936, 331, 332, 334, 333, 812, 211,
	937, 835, 922, 892, 335, 336, 0, 866, 338, 867,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 938,
	345, 939, 946, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 947, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 885, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 940, 380, 381,
	382, 383, 822, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 175, 402, 403, 858, 859, 861, 862,
	397, 401, 404, 405, 915, 406, 386, 387, 407, 941,
	408, 880, 860, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 926, 415, 416, 417, 948, 0, 422, 423,
	421, 177, 424, 425, 426, 427, 428, 267, 429, 268,
	856, 0, 899, 900, 901, 902, 0, 0, 431, 432,
	949, 433, 950, 833, 434, 435, 436, 0, 437, 438,
	0, 816, 439, 440, 441, 442, 444, 916, 445, 0,
	864, 446, 447, 448, 1294, 896, 943, 0, 450, 449,
	500, 0, 0, 0, 169, 451, 452, 501, 453, 454,
	455, 813, 170, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 809, 810, 869, 826, 827, 828,
	824, 825, 838, 1484, 1482, 0, 0, 0, 837, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 918, 843, 0, 0, 0, 218,
	219, 220, 457, 884, 863, 895, 853, 894, 893, 0,
	224, 855, 854, 227, 228, 229, 845, 917, 230, 953,
	954, 463, 0, 231, 924, 0, 907, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 927, 245, 246, 910, 908,
	909, 914, 912, 911, 913, 247, 248, 249, 250, 898,
	252, 891, 890, 815, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 889, 259, 0, 260, 0, 261, 262,
	0, 821, 263, 264, 266, 269, 265, 270, 271, 272,
	944, 945, 834, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 888, 886, 887, 0, 278, 0, 279, 0,
	0, 928, 280, 281, 0, 282, 951, 0, 844, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 919,
	920, 923, 930, 0, 921, 865, 0, 0, 0, 210,
	292, 294, 301, 0, 929, 295, 877, 868, 879, 881,
	882, 883, 878, 0, 870, 0, 302, 931, 932, 303,
	304, 305, 933, 903, 904, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 952, 934, 315, 316,
	935, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 857, 328, 936,
	331, 332, 334, 333, 812, 211, 937, 835, 922, 892,
	335, 336, 0, 866, 338, 867, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 938, 345, 939, 946, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	947, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 885, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 940, 380, 381, 382, 383, 822, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 175,
	402, 403, 858, 859, 861, 862, 397, 401, 404, 405,
	915, 406, 386, 387, 407, 941, 408, 880, 860, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 926, 415,
	416, 417, 948, 0, 422, 423, 421, 177, 424, 425,
	426, 427, 428, 267, 429, 268, 856, 0, 899, 900,
	901, 902, 0, 0, 431, 432, 949, 433, 950, 833,
	434, 435, 436, 0, 437, 438, 0, 816, 439, 440,
	441, 442, 444, 916, 445, 0, 864, 446, 447, 448,
	1294, 896, 943, 0, 450, 449, 500, 0, 0, 0,
	169, 451, 452, 501, 453, 454, 455, 813, 170, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	809, 810, 869, 826, 827, 828, 824, 825, 838, 1484,
	2378, 0, 0, 0, 837, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	918, 843, 0, 0, 0, 218, 219, 220, 457, 884,
	863, 895, 853, 894, 893, 0, 224, 855, 854, 227,
	228, 229, 845, 917, 230, 953, 954, 463, 0, 231,
	924, 0, 907, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 927, 245, 246, 910, 908, 909, 914, 912, 911,
	913, 247, 248, 249, 250, 898, 252, 891, 890, 815,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 889,
	259, 0, 260, 0, 261, 262, 0, 821, 263, 264,
	266, 269, 265, 270, 271, 272, 944, 945, 834, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 888, 886,
	887, 0, 278, 0, 279, 0, 0, 928, 280, 281,
	0, 282, 951, 0, 844, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 919, 920, 923, 930, 0,
	921, 865, 0, 0, 0, 210, 292, 294, 301, 0,
	929, 295, 877, 868, 879, 881, 882, 883, 878, 0,
	870, 0, 302, 931, 932, 303, 304, 305, 933, 903,
	904, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 952, 934, 315, 316, 935, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 857, 328, 936, 331, 332, 334, 333,
	812, 211, 937, 835, 922, 892, 335, 336, 0, 866,
	338, 867, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 938, 345, 939, 946, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 947, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 885,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 940,
	380, 381, 382, 383, 822, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 175, 402, 403, 858, 859,
	861, 862, 397, 401, 404, 405, 915, 406, 386, 387,
	407, 941, 408, 880, 860, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 926, 415, 416, 417, 948, 0,
	422, 423, 421, 177, 424, 425, 426, 427, 428, 267,
	429, 268, 856, 0, 899, 900, 901, 902, 0, 0,
	431, 432, 949, 433, 950, 833, 434, 435, 436, 0,
	437, 438, 0, 816, 439, 440, 441, 442, 444, 916,
	445, 0, 864, 446, 447, 448, 1294, 896, 943, 0,
	450, 449, 500, 0, 0, 0, 169, 451, 452, 501,
	453, 454, 455, 813, 170, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 809, 810, 869, 826,
	827, 828, 824, 825, 838, 1484, 1482, 0, 0, 0,
	837, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 918, 843, 0, 0,
	0, 218, 219, 220, 457, 884, 863, 895, 853, 894,
	893, 2067, 224, 855, 854, 227, 228, 229, 845, 917,
	230, 953, 954, 463, 0, 231, 924, 0, 907, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 927, 245, 246,
	910, 908, 909, 914, 912, 911, 913, 247, 248, 249,
	250, 898, 252, 891, 890, 815, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 889, 259, 0, 260, 0,
	261, 262, 0, 821, 263, 264, 266, 269, 265, 270,
	271, 272, 944, 945, 834, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 888, 886, 887, 0, 278, 0,
	279, 0, 2072, 928, 280, 281, 0, 282, 951, 0,
	844, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 919, 920, 923, 930, 0, 921, 865, 0, 0,
	0, 210, 292, 294, 301, 0, 929, 295, 877, 868,
	879, 881, 882, 883, 878, 0, 870, 0, 302, 931,
	932, 303, 304, 305, 933, 903, 904, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 2068, 314, 952, 934,
	315, 316, 935, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 857,
	328, 936, 331, 332, 334, 333, 812, 211, 937, 835,
	922, 892, 335, 336, 0, 866, 338, 867, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 938, 345, 939,
	946, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 947, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 885, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 940, 380, 381, 382, 383,
	822, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 858, 859, 861, 862, 397, 401,
	404, 405, 915, 406, 386, 387, 407, 941, 408, 880,
	860, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	926, 415, 416, 417, 948, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 856, 0,
	899, 900, 901, 902, 0, 2069, 431, 432, 949, 433,
	950, 833, 434, 435, 436, 0, 437, 438, 0, 816,
	439, 440, 441, 442, 444, 916, 445, 0, 864, 446,
	447, 448, 497, 896, 943, 0, 450, 449, 500, 0,
	0, 0, 0, 451, 452, 501, 453, 454, 455, 813,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 809, 810, 0, 0, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 805, 837, 869, 826, 827,
	828, 824, 825, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 918, 843, 0, 0, 0,
	218, 219, 220, 457, 884, 863, 895, 853, 894, 893,
	0, 224, 855, 854, 227, 228, 229, 845, 917, 230,
	953, 954, 463, 0, 231, 924, 0, 907, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 927, 245, 246, 910,
	908, 909, 914, 912, 911, 913, 247, 248, 249, 250,
	898, 252, 891, 890, 815, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 889, 259, 0, 260, 0, 261,
	262, 0, 821, 263, 264, 266, 269, 265, 270, 271,
	272, 944, 945, 834, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 888, 886, 887, 0, 278, 0, 279,
	0, 0, 928, 280, 281, 0, 282, 951, 0, 844,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	919, 920, 923, 930, 0, 921, 865, 0, 0, 0,
	210, 292, 294, 301, 0, 929, 295, 877, 868, 879,
	881, 882, 883, 878, 0, 870, 0, 302, 931, 932,
	303, 304, 305, 933, 903, 904, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 952, 934, 315,
	316, 935, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 857, 328,
	936, 331, 332, 334, 333, 812, 211, 937, 835, 922,
	892, 335, 336, 0, 866, 338, 867, 817, 0, 341,
	342, 343, 0, 0, 344, 483, 938, 345, 939, 946,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 947, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 885, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 940, 380, 381, 382, 383, 822,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 858, 859, 861, 862, 397, 401, 404,
	405, 915, 406, 386, 387, 407, 941, 408, 880, 860,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 926,
	415, 416, 417, 948, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 856, 0, 899,
	900, 901, 902, 0, 0, 431, 432, 949, 433, 950,
	833, 434, 435, 436, 0, 437, 438, 0, 816, 439,
	440, 441, 442, 444, 916, 445, 0, 864, 446, 447,
	448, 497, 896, 943, 0, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 813, 0,
	0, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 809, 810, 869, 826, 827, 828, 824, 825, 838,
	839, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 918, 843, 0, 0, 0, 218, 219, 220, 457,
	884, 863, 895, 853, 894, 893, 0, 224, 855, 854,
	227, 228, 229, 845, 917, 230, 953, 954, 463, 0,
	231, 924, 0, 907, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 3285,
	244, 0, 927, 245, 246, 910, 908, 909, 914, 912,
	911, 913, 247, 248, 249, 250, 898, 252, 891, 890,
	815, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	889, 259, 0, 260, 0, 261, 262, 0, 821, 263,
	264, 266, 269, 265, 270, 271, 272, 944, 945, 834,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 888,
	886, 887, 0, 278, 0, 279, 0, 0, 928, 280,
	281, 0, 282, 951, 0, 844, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 919, 920, 923, 930,
	0, 921, 865, 0, 0, 0, 210, 292, 294, 301,
	0, 929, 295, 877, 868, 879, 881, 882, 883, 878,
	0, 870, 0, 302, 931, 932, 303, 304, 305, 933,
	903, 904, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 952, 934, 315, 316, 935, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 857, 328, 936, 331, 332, 334,
	333, 812, 211, 937, 835, 922, 892, 335, 336, 0,
	866, 338, 867, 817, 0, 341, 342, 343, 0, 0,
	344, 483, 938, 345, 939, 946, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 947, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	885, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	940, 380, 381, 382, 383, 822, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 858,
	859, 861, 862, 397, 401, 404, 405, 915, 406, 386,
	387, 407, 941, 408, 880, 860, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 926, 415, 416, 417, 948,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 856, 0, 899, 900, 901, 902, 0,
	0, 431, 432, 949, 433, 950, 833, 434, 435, 436,
	0, 437, 438, 0, 816, 439, 440, 441, 442, 444,
	916, 445, 0, 864, 446, 447, 448, 497, 896, 943,
	0, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 813, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 0, 809, 810, 869,
	826, 827, 828, 824, 825, 838, 839, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 918, 843, 0,
	0, 0, 218, 219, 220, 457, 884, 863, 895, 853,
	894, 893, 0, 224, 855, 854, 227, 228, 229, 845,
	917, 230, 953, 954, 463, 0, 231, 924, 0, 907,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 3159, 244, 0, 927, 245,
	246, 910, 908, 909, 914, 912, 911, 913, 247, 248,
	249, 250, 898, 252, 891, 890, 815, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 889, 259, 0, 260,
	0, 261, 262, 0, 821, 263, 264, 266, 269, 265,
	270, 271, 272, 944, 945, 834, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 888, 886, 887, 0, 278,
	0, 279, 0, 0, 928, 280, 281, 0, 282, 951,
	0, 844, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 919, 920, 923, 930, 0, 921, 865, 0,
	0, 0, 210, 292, 294, 301, 0, 929, 295, 877,
	868, 879, 881, 882, 883, 878, 0, 870, 0, 302,
	931, 932, 303, 304, 305, 933, 903, 904, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 952,
	934, 315, 316, 935, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	857, 328, 936, 331, 332, 334, 333, 812, 211, 937,
	835, 922, 892, 335, 336, 0, 866, 338, 867, 817,
	0, 341, 342, 343, 0, 0, 344, 483, 938, 345,
	939, 946, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 947, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 885, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 940, 380, 381, 382,
	383, 822, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 858, 859, 861, 862, 397,
	401, 404, 405, 915, 406, 386, 387, 407, 941, 408,
	880, 860, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 926, 415, 416, 417, 948, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 856,
	0, 899, 900, 901, 902, 0, 0, 431, 432, 949,
	433, 950, 833, 434, 435, 436, 0, 437, 438, 0,
	816, 439, 440, 441, 442, 444, 916, 445, 0, 864,
	446, 447, 448, 497, 896, 943, 0, 450, 449, 500,
	0, 0, 0, 0, 451, 452, 501, 453, 454, 455,
	813, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 809, 810, 869, 826, 827, 828, 824,
	825, 838, 839, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 918, 843, 0, 0, 0, 218, 219,
	220, 457, 884, 863, 895, 853, 894, 893, 0, 224,
	855, 854, 227, 228, 229, 845, 917, 230, 953, 954,
	463, 0, 231, 924, 0, 907, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 927, 245, 246, 910, 908, 909,
	914, 912, 911, 913, 247, 248, 249, 250, 898, 252,
	891, 890, 815, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 889, 259, 0, 260, 0, 261, 262, 0,
	821, 263, 264, 266, 269, 265, 270, 271, 272, 944,
	945, 834, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 888, 886, 887, 0, 278, 0, 279, 0, 0,
	928, 280, 281, 0, 282, 951, 0, 844, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 919, 920,
	923, 930, 0, 921, 865, 0, 0, 0, 210, 292,
	294, 301, 0, 929, 295, 877, 868, 879, 881, 882,
	883, 878, 0, 870, 0, 302, 931, 932, 303, 304,
	305, 933, 903, 904, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 952, 934, 315, 316, 935,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 857, 328, 936, 331,
	332, 334, 333, 812, 2909, 937, 835, 922, 892, 335,
	336, 0, 866, 338, 867, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 938, 345, 939, 946, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 947,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 885, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 940, 380, 381, 382, 383, 822, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 858, 859, 861, 862, 397, 401, 404, 405, 915,
	406, 386, 387, 407, 941, 408, 880, 860, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 926, 415, 416,
	417, 948, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 856, 0, 899, 900, 901,
	902, 0, 0, 431, 432, 949, 433, 950, 833, 434,
	435, 436, 0, 437, 438, 0, 816, 439, 440, 441,
	442, 444, 916, 445, 0, 864, 446, 447, 448, 497,
	896, 943, 0, 450, 449, 500, 0, 0, 0, 0,
	451, 452, 501, 453, 454, 455, 813, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 809,
	810, 1544, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 837, 869, 826, 827, 828, 824, 825,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 918, 843, 0, 0, 0, 218, 219, 220,
	457, 884, 863, 895, 853, 894, 893, 0, 224, 855,
	854, 227, 228, 229, 845, 917, 230, 953, 954, 463,
	0, 231, 924, 0, 907, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 927, 245, 246, 910, 908, 909, 914,
	912, 911, 913, 247, 248, 249, 250, 898, 252, 891,
	890, 815, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 889, 259, 0, 260, 0, 261, 262, 0, 821,
	263, 264, 266, 269, 265, 270, 271, 272, 944, 945,
	834, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	888, 886, 887, 0, 278, 0, 279, 0, 0, 928,
	280, 281, 0, 282, 951, 0, 844, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 919, 920, 923,
	930, 0, 921, 865, 0, 0, 0, 210, 292, 294,
	301, 0, 929, 295, 877, 868, 879, 881, 882, 883,
	878, 0, 870, 0, 302, 931, 932, 303, 304, 305,
	933, 903, 904, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 952, 934, 315, 316, 935, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 857, 328, 936, 331, 332,
	334, 333, 812, 211, 937, 835, 922, 892, 335, 336,
	0, 866, 338, 867, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 938, 345, 939, 946, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 947, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 885, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 940, 380, 381, 382, 383, 822, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	858, 859, 861, 862, 397, 401, 404, 405, 915, 406,
	386, 387, 407, 941, 408, 880, 860, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 926, 415, 416, 417,
	948, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 856, 0, 899, 900, 901, 902,
	0, 0, 431, 432, 949, 433, 950, 833, 434, 435,
	436, 0, 437, 438, 0, 816, 439, 440, 441, 442,
	444, 916, 445, 0, 864, 446, 447, 448, 497, 896,
	943, 2724, 450, 449, 500, 0, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 813, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 809, 810,
	869, 826, 827, 828, 824, 825, 838, 839, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 918, 843,
	0, 0, 0, 218, 219, 220, 457, 884, 863, 895,
	853, 894, 893, 0, 224, 855, 854, 227, 228, 229,
	845, 917, 230, 953, 954, 463, 0, 231, 924, 0,
	907, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 927,
	245, 246, 910, 908, 909, 914, 912, 911, 913, 247,
	248, 249, 250, 898, 252, 891, 890, 815, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 889, 259, 0,
	260, 0, 261, 262, 0, 821, 263, 264, 266, 269,
	265, 270, 271, 272, 944, 945, 834, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 888, 886, 887, 0,
	278, 0, 279, 0, 0, 928, 280, 281, 0, 282,
	951, 0, 844, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 919, 920, 923, 930, 0, 921, 865,
	0, 0, 0, 1897, 292, 294, 301, 0, 929, 295,
	877, 868, 879, 881, 882, 883, 878, 0, 870, 0,
	302, 931, 932, 303, 304, 305, 933, 903, 904, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	952, 934, 315, 316, 935, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 857, 328, 936, 331, 332, 334, 333, 812, 211,
	937, 835, 922, 892, 335, 336, 0, 866, 338, 867,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 938,
	345, 939, 946, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 947, 355, 486, 356, 1896, 357,
	0, 358, 359, 360, 361, 362, 363, 885, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 940, 380, 381,
	382, 383, 822, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 0, 402, 403, 858, 859, 861, 862,
	397, 401, 404, 405, 915, 406, 386, 387, 407, 941,
	408, 880, 860, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 926, 415, 416, 417, 948, 0, 422, 423,
	421, 0, 424, 425, 426, 427, 428, 267, 429, 268,
	856, 0, 899, 900, 901, 902, 0, 0, 431, 432,
	949, 433, 950, 833, 434, 435, 436, 0, 437, 438,
	0, 816, 439, 440, 441, 442, 444, 916, 445, 0,
	864, 446, 447, 448, 497, 896, 943, 0, 450, 449,
	500, 0, 0, 0, 0, 451, 452, 501, 453, 454,
	455, 813, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 809, 810, 869, 826, 827, 828,
	824, 825, 838, 839, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 918, 843, 0, 0, 0, 218,
	219, 220, 457, 884, 863, 895, 853, 894, 893, 0,
	224, 855, 854, 227, 228, 229, 845, 917, 230, 953,
	954, 463, 0, 231, 924, 0, 907, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 927, 245, 246, 910, 908,
	909, 914, 912, 911, 913, 247, 248, 249, 250, 898,
	252, 891, 890, 815, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 889, 259, 0, 260, 0, 261, 262,
	0, 821, 263, 264, 266, 269, 265, 270, 271, 272,
	944, 945, 834, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 888, 886, 887, 0, 278, 0, 279, 0,
	0, 928, 280, 281, 0, 282, 951, 0, 844, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 919,
	920, 923, 930, 0, 921, 865, 0, 0, 0, 210,
	292, 294, 301, 0, 929, 295, 877, 868, 879, 881,
	882, 883, 878, 0, 870, 0, 302, 931, 932, 303,
	304, 305, 933, 903, 904, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 952, 934, 315, 316,
	935, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 857, 328, 936,
	331, 332, 334, 333, 812, 211, 937, 835, 922, 892,
	335, 336, 0, 866, 338, 867, 817, 0, 341, 342,
	343, 0, 0, 344, 483, 938, 345, 939, 946, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	947, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 885, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 940, 380, 381, 382, 383, 822, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 858, 859, 861, 862, 397, 401, 404, 405,
	915, 406, 386, 387, 407, 941, 408, 880, 860, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 926, 415,
	416, 417, 948, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 856, 0, 899, 900,
	901, 902, 0, 0, 431, 432, 949, 433, 950, 833,
	434, 435, 436, 0, 437, 438, 0, 816, 439, 440,
	441, 442, 444, 916, 445, 0, 864, 446, 447, 448,
	497, 896, 943, 0, 450, 449, 500, 0, 0, 0,
	0, 451, 452, 501, 453, 454, 455, 813, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	809, 810, 869, 826, 827, 828, 824, 825, 838, 839,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	918, 843, 0, 0, 0, 218, 219, 220, 457, 884,
	863, 895, 853, 894, 893, 0, 224, 855, 854, 227,
	228, 229, 845, 917, 230, 953, 954, 463, 0, 231,
	924, 0, 907, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 927, 245, 246, 910, 908, 909, 914, 912, 911,
	913, 247, 248, 249, 250, 898, 252, 891, 890, 815,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 889,
	259, 0, 260, 0, 261, 262, 0, 821, 263, 264,
	266, 269, 265, 270, 271, 272, 944, 945, 834, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 888, 886,
	887, 0, 278, 0, 279, 0, 0, 928, 280, 281,
	0, 282, 951, 0, 844, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 919, 920, 923, 930, 0,
	921, 865, 0, 0, 0, 210, 292, 294, 301, 0,
	929, 295, 877, 868, 879, 881, 882, 883, 878, 0,
	870, 0, 302, 931, 932, 303, 304, 305, 933, 903,
	904, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 952, 934, 315, 316, 935, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 857, 328, 936, 331, 332, 334, 333,
	812, 211, 937, 835, 922, 892, 335, 336, 0, 866,
	338, 867, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 938, 345, 939, 946, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 947, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 885,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 940,
	380, 381, 382, 383, 822, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 0, 402, 403, 858, 859,
	861, 862, 397, 401, 404, 405, 915, 406, 386, 387,
	407, 941, 408, 880, 860, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 926, 415, 416, 417, 948, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 856, 0, 899, 900, 901, 902, 0, 0,
	431, 432, 949, 433, 950, 833, 434, 435, 436, 0,
	437, 438, 0, 816, 439, 440, 441, 442, 444, 916,
	445, 0, 864, 446, 447, 448, 497, 896, 943, 0,
	450, 449, 500, 0, 0, 0, 0, 451, 452, 501,
	453, 454, 455, 813, 0, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 809, 810, 1544, 0,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	837, 869, 826, 827, 828, 824, 825, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 918,
	843, 0, 0, 0, 218, 219, 220, 457, 884, 863,
	895, 853, 894, 893, 0, 224, 855, 854, 227, 228,
	229, 845, 917, 230, 953, 954, 463, 0, 231, 924,
	0, 907, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	927, 245, 246, 910, 908, 909, 914, 912, 911, 913,
	247, 248, 249, 250, 898, 252, 891, 890, 815, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 889, 259,
	0, 260, 0, 261, 262, 0, 821, 263, 264, 266,
	269, 265, 270, 271, 272, 944, 945, 834, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 888, 886, 887,
	0, 278, 0, 279, 0, 2072, 928, 280, 281, 0,
	282, 951, 0, 844, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 919, 920, 923, 930, 0, 921,
	865, 0, 0, 0, 210, 292, 294, 301, 0, 929,
	295, 877, 868, 879, 881, 882, 883, 878, 0, 870,
	0, 302, 931, 932, 303, 304, 305, 933, 903, 904,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 952, 934, 315, 316, 935, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 857, 328, 936, 331, 332, 334, 333, 812,
	211, 937, 835, 922, 892, 335, 336, 0, 866, 338,
	867, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	938, 345, 939, 946, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 947, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 885, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 940, 380,
	381, 382, 383, 822, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 858, 859, 861,
	862, 397, 401, 404, 405, 915, 406, 386, 387, 407,
	941, 408, 880, 860, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 926, 415, 416, 417, 948, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 856, 0, 899, 900, 901, 902, 0, 0, 431,
	432, 949, 433, 950, 833, 434, 435, 436, 0, 437,
	438, 0, 816, 439, 440, 441, 442, 444, 916, 445,
	0, 864, 446, 447, 448, 497, 896, 943, 0, 450,
	449, 500, 0, 0, 0, 0, 451, 452, 501, 453,
	454, 455, 813, 0, 0, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 809, 810, 869, 826, 827,
	828, 824, 825, 838, 839, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 918, 843, 0, 0, 0,
	218, 219, 220, 457, 884, 863, 895, 853, 894, 893,
	0, 224, 855, 854, 227, 228, 229, 845, 917, 230,
	953, 954, 463, 0, 231, 924, 0, 907, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 927, 245, 246, 910,
	908, 909, 914, 912, 911, 913, 247, 248, 249, 250,
	898, 252, 891, 890, 815, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 889, 259, 0, 260, 0, 261,
	262, 0, 821, 263, 264, 266, 269, 265, 270, 271,
	272, 944, 945, 834, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 888, 886, 887, 0, 278, 0, 279,
	0, 0, 928, 280, 281, 0, 282, 951, 0, 844,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	919, 920, 923, 930, 0, 921, 865, 0, 0, 0,
	210, 292, 294, 301, 0, 929, 295, 877, 868, 879,
	881, 882, 883, 878, 0, 870, 0, 302, 931, 932,
	303, 304, 305, 933, 903, 904, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 952, 934, 315,
	316, 935, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 857, 328,
	936, 331, 332, 334, 333, 812, 211, 937, 835, 922,
	892, 335, 336, 0, 866, 338, 867, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 938, 345, 939, 946,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 947, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 885, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 940, 380, 381, 382, 383, 822,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 858, 859, 861, 862, 397, 401, 404,
	405, 915, 406, 386, 387, 407, 941, 408, 880, 860,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 926,
	415, 416, 417, 948, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 856, 0, 899,
	900, 901, 902, 0, 0, 431, 432, 949, 433, 950,
	833, 434, 435, 436, 0, 437, 438, 0, 816, 439,
	440, 441, 442, 444, 916, 445, 0, 864, 446, 447,
	448, 497, 896, 943, 0, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 813, 0,
	0, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 809, 810, 0, 0, 0, 0, 0, 0, 0,
	839, 1482, 0, 0, 2077, 837, 869, 826, 827, 828,
	824, 825, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 918, 843, 0, 0, 0, 218,
	219, 220, 457, 884, 863, 895, 853, 894, 893, 0,
	224, 855, 854, 227, 228, 229, 845, 917, 230, 953,
	954, 463, 0, 231, 924, 0, 907, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 927, 245, 246, 910, 908,
	909, 914, 912, 911, 913, 247, 248, 249, 250, 898,
	252, 891, 890, 815, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 889, 259, 0, 260, 0, 261, 262,
	0, 821, 263, 264, 266, 269, 265, 270, 271, 272,
	944, 945, 834, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 888, 886, 887, 0, 278, 0, 279, 0,
	0, 928, 280, 281, 0, 282, 951, 0, 844, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 919,
	920, 923, 930, 0, 921, 865, 0, 0, 0, 210,
	292, 294, 301, 0, 929, 295, 877, 868, 879, 881,
	882, 883, 878, 0, 870, 0, 302, 931, 932, 303,
	304, 305, 933, 903, 904, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 952, 934, 315, 316,
	935, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 857, 328, 936,
	331, 332, 334, 333, 812, 211, 937, 835, 922, 892,
	335, 336, 0, 866, 338, 867, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 938, 345, 939, 946, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	947, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 885, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 940, 380, 381, 382, 383, 822, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 858, 859, 861, 862, 397, 401, 404, 405,
	915, 406, 386, 387, 407, 941, 408, 880, 860, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 926, 415,
	416, 417, 948, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 856, 0, 899, 900,
	901, 902, 0, 0, 431, 432, 949, 433, 950, 833,
	434, 435, 436, 0, 437, 438, 0, 816, 439, 440,
	441, 442, 444, 916, 445, 0, 864, 446, 447, 448,
	497, 896, 943, 0, 450, 449, 500, 0, 0, 0,
	0, 451, 452, 501, 453, 454, 455, 813, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	809, 810, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 2075, 837, 869, 826, 827, 828, 824,
	825, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 918, 843, 0, 0, 0, 218, 219,
	220, 457, 884, 863, 895, 853, 894, 893, 0, 224,
	855, 854, 227, 228, 229, 845, 917, 230, 953, 954,
	463, 0, 231, 924, 0, 907, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 927, 245, 246, 910, 908, 909,
	914, 912, 911, 913, 247, 248, 249, 250, 898, 252,
	891, 890, 815, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 889, 259, 0, 260, 0, 261, 262, 0,
	821, 263, 264, 266, 269, 265, 270, 271, 272, 944,
	945, 834, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 888, 886, 887, 0, 278, 0, 279, 0, 0,
	928, 280, 281, 0, 282, 951, 0, 844, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 919, 920,
	923, 930, 0, 921, 865, 0, 0, 0, 210, 292,
	294, 301, 0, 929, 295, 877, 868, 879, 881, 882,
	883, 878, 0, 870, 0, 302, 931, 932, 303, 304,
	305, 933, 903, 904, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 952, 934, 315, 316, 935,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 857, 328, 936, 331,
	332, 334, 333, 812, 211, 937, 835, 922, 892, 335,
	336, 0, 866, 338, 867, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 938, 345, 939, 946, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 947,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 885, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 940, 380, 381, 382, 383, 822, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 858, 859, 861, 862, 397, 401, 404, 405, 915,
	406, 386, 387, 407, 941, 408, 880, 860, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 926, 415, 416,
	417, 948, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 856, 0, 899, 900, 901,
	902, 0, 0, 431, 432, 949, 433, 950, 833, 434,
	435, 436, 0, 437, 438, 0, 816, 439, 440, 441,
	442, 444, 916, 445, 0, 864, 446, 447, 448, 497,
	896, 943, 0, 450, 449, 500, 0, 0, 0, 0,
	451, 452, 501, 453, 454, 455, 813, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 809,
	810, 0, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 2063, 837, 869, 826, 827, 828, 824, 825,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 918, 843, 0, 0, 0, 218, 219, 220,
	457, 884, 863, 895, 853, 894, 893, 0, 224, 855,
	854, 227, 228, 229, 845, 917, 230, 953, 954, 463,
	0, 231, 924, 0, 907, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 927, 245, 246, 910, 908, 909, 914,
	912, 911, 913, 247, 248, 249, 250, 898, 252, 891,
	890, 815, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 889, 259, 0, 260, 0, 261, 262, 0, 821,
	263, 264, 266, 269, 265, 270, 271, 272, 944, 945,
	834, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	888, 886, 887, 0, 278, 0, 279, 0, 0, 928,
	280, 281, 0, 282, 951, 0, 844, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 919, 920, 923,
	930, 0, 921, 865, 0, 0, 0, 210, 292, 294,
	301, 0, 929, 295, 877, 868, 879, 881, 882, 883,
	878, 0, 870, 0, 302, 931, 932, 303, 304, 305,
	933, 903, 904, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 952, 934, 315, 316, 935, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 857, 328, 936, 331, 332,
	334, 333, 812, 211, 937, 835, 922, 892, 335, 336,
	0, 866, 338, 867, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 938, 345, 939, 946, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 947, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 885, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 940, 380, 381, 382, 383, 822, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	858, 859, 861, 862, 397, 401, 404, 405, 915, 406,
	386, 387, 407, 941, 408, 880, 860, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 926, 415, 416, 417,
	948, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 856, 0, 899, 900, 901, 902,
	0, 0, 431, 432, 949, 433, 950, 833, 434, 435,
	436, 0, 437, 438, 0, 816, 439, 440, 441, 442,
	444, 916, 445, 0, 864, 446, 447, 448, 497, 896,
	943, 0, 450, 449, 500, 0, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 813, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 809, 810,
	0, 0, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 2052, 837, 869, 826, 827, 828, 824, 825, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 918, 843, 0, 0, 0, 218, 219, 220, 457,
	884, 863, 895, 853, 894, 893, 0, 224, 855, 854,
	227, 228, 229, 845, 917, 230, 953, 954, 463, 0,
	231, 924, 0, 907, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 927, 245, 246, 910, 908, 909, 914, 912,
	911, 913, 247, 248, 249, 250, 898, 252, 891, 890,
	815, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	889, 259, 0, 260, 0, 261, 262, 0, 821, 263,
	264, 266, 269, 265, 270, 271, 272, 944, 945, 834,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 888,
	886, 887, 0, 278, 0, 279, 0, 0, 928, 280,
	281, 0, 282, 951, 0, 844, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 919, 920, 923, 930,
	0, 921, 865, 0, 0, 0, 210, 292, 294, 301,
	0, 929, 295, 877, 868, 879, 881, 882, 883, 878,
	0, 870, 0, 302, 931, 932, 303, 304, 305, 933,
	903, 904, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 952, 934, 315, 316, 935, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 857, 328, 936, 331, 332, 334,
	333, 812, 211, 937, 835, 922, 892, 335, 336, 0,
	866, 338, 867, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 938, 345, 939, 946, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 947, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	885, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	940, 380, 381, 382, 383, 822, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 858,
	859, 861, 862, 397, 401, 404, 405, 915, 406, 386,
	387, 407, 941, 408, 880, 860, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 926, 415, 416, 417, 948,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 856, 0, 899, 900, 901, 902, 0,
	0, 431, 432, 949, 433, 950, 833, 434, 435, 436,
	0, 437, 438, 0, 816, 439, 440, 441, 442, 444,
	916, 445, 0, 864, 446, 447, 448, 497, 896, 943,
	0, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 813, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 0, 809, 810, 0,
	0, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	2050, 837, 2042, 826, 827, 828, 824, 825, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	918, 843, 0, 0, 0, 218, 219, 220, 457, 884,
	863, 895, 853, 894, 893, 0, 224, 855, 854, 227,
	228, 229, 845, 917, 230, 953, 954, 463, 0, 231,
	924, 0, 907, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 927, 245, 246, 910, 908, 909, 914, 912, 911,
	913, 247, 248, 249, 250, 898, 2045, 891, 890, 815,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 889,
	259, 0, 260, 0, 261, 262, 0, 821, 263, 264,
	266, 269, 265, 270, 271, 272, 944, 945, 834, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 888, 886,
	887, 0, 278, 0, 279, 0, 0, 928, 280, 281,
	0, 282, 951, 0, 844, 283, 0, 284, 285, 286,
	2046, 288, 289, 290, 291, 919, 920, 923, 930, 0,
	921, 865, 0, 0, 0, 210, 292, 294, 301, 0,
	929, 295, 877, 868, 879, 881, 882, 883, 878, 0,
	870, 0, 302, 931, 932, 303, 304, 305, 933, 903,
	904, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 952, 934, 315, 316, 935, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	2047, 2044, 329, 857, 328, 936, 331, 332, 334, 333,
	812, 211, 937, 835, 922, 892, 335, 336, 0, 866,
	338, 867, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 938, 345, 939, 946, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 947, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 885,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 940,
	380, 381, 382, 383, 822, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 2048, 0, 402, 403, 858, 859,
	861, 862, 397, 401, 404, 405, 915, 406, 386, 387,
	407, 941, 408, 880, 860, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 926, 415, 416, 417, 948, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 856, 0, 899, 900, 901, 902, 0, 0,
	431, 432, 949, 433, 950, 833, 434, 435, 436, 0,
	437, 438, 0, 816, 439, 440, 441, 442, 444, 916,
	445, 0, 864, 446, 447, 448, 497, 896, 943, 0,
	450, 449, 500, 0, 0, 0, 0, 451, 452, 501,
	453, 2043, 455, 813, 0, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 809, 810, 0, 0,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 2039,
	837, 2042, 826, 827, 828, 824, 825, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 918,
	843, 0, 0, 0, 218, 219, 220, 457, 884, 863,
	895, 853, 894, 893, 0, 224, 855, 854, 227, 228,
	229, 845, 917, 230, 953, 954, 463, 0, 231, 924,
	0, 907, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	927, 245, 246, 910, 908, 909, 914, 912, 911, 913,
	247, 248, 249, 250, 898, 2045, 891, 890, 815, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 889, 259,
	0, 260, 0, 261, 262, 0, 821, 263, 264, 266,
	269, 265, 270, 271, 272, 944, 945, 834, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 888, 886, 887,
	0, 278, 0, 279, 0, 0, 928, 280, 281, 0,
	282, 951, 0, 844, 283, 0, 284, 285, 286, 2046,
	288, 289, 290, 291, 919, 920, 923, 930, 0, 921,
	865, 0, 0, 0, 210, 292, 294, 301, 0, 929,
	295, 877, 868, 879, 881, 882, 883, 878, 0, 870,
	0, 302, 931, 932, 303, 304, 305, 933, 903, 904,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 952, 934, 315, 316, 935, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 2047,
	2044, 329, 857, 328, 936, 331, 332, 334, 333, 812,
	211, 937, 835, 922, 892, 335, 336, 0, 866, 338,
	867, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	938, 345, 939, 946, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 947, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 885, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 940, 380,
	381, 382, 383, 822, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 2048, 0, 402, 403, 858, 859, 861,
	862, 397, 401, 404, 405, 915, 406, 386, 387, 407,
	941, 408, 880, 860, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 926, 415, 416, 417, 948, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 856, 0, 899, 900, 901, 902, 0, 0, 431,
	432, 949, 433, 950, 833, 434, 435, 436, 0, 437,
	438, 0, 816, 439, 440, 441, 442, 444, 916, 445,
	0, 864, 446, 447, 448, 497, 896, 943, 0, 450,
	449, 500, 0, 0, 0, 0, 451, 452, 501, 453,
	2043, 455, 813, 0, 0, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 809, 810, 869, 826, 827,
	828, 824, 825, 838, 839, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 918, 843, 0, 0, 0,
	218, 219, 220, 457, 884, 863, 895, 853, 894, 893,
	0, 224, 855, 854, 227, 228, 229, 845, 917, 230,
	953, 954, 463, 0, 231, 924, 0, 907, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 927, 245, 246, 910,
	908, 909, 914, 912, 911, 913, 247, 248, 249, 250,
	898, 252, 891, 890, 815, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 889, 259, 0, 260, 0, 261,
	262, 0, 821, 263, 264, 266, 269, 265, 270, 271,
	272, 944, 945, 834, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 888, 886, 887, 0, 278, 0, 279,
	0, 0, 928, 280, 281, 0, 282, 951, 0, 844,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	919, 920, 923, 930, 0, 921, 865, 0, 0, 0,
	210, 292, 294, 301, 0, 929, 295, 877, 868, 879,
	881, 882, 883, 878, 0, 870, 0, 302, 931, 932,
	303, 304, 305, 933, 903, 904, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 952, 934, 315,
	316, 935, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 857, 328,
	936, 331, 332, 334, 333, 812, 211, 937, 835, 922,
	892, 335, 336, 0, 866, 338, 867, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 938, 345, 939, 946,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 947, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 885, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 940, 380, 381, 382, 383, 822,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 858, 859, 861, 862, 397, 401, 404,
	405, 915, 406, 386, 387, 407, 941, 408, 880, 860,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 926,
	415, 416, 417, 948, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 856, 0, 899,
	900, 901, 902, 0, 0, 431, 432, 949, 433, 950,
	833, 434, 435, 436, 0, 437, 438, 0, 816, 439,
	440, 441, 442, 444, 916, 445, 0, 864, 446, 447,
	448, 497, 896, 943, 0, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 813, 0,
	0, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 809, 810, 0, 0, 0, 0, 0, 1490, 0,
	839, 0, 0, 0, 0, 837, 869, 826, 827, 828,
	824, 825, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 1884, 217,
	0, 0, 0, 0, 918, 843, 0, 0, 0, 218,
	219, 220, 457, 884, 863, 895, 853, 894, 893, 0,
	224, 855, 854, 227, 228, 229, 845, 917, 230, 953,
	954, 463, 0, 231, 924, 0, 907, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 927, 245, 246, 910, 908,
	909, 914, 912, 911, 913, 247, 248, 249, 250, 898,
	252, 891, 890, 815, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 889, 259, 0, 260, 0, 261, 262,
	0, 821, 263, 264, 266, 269, 265, 270, 271, 272,
	944, 945, 834, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 888, 886, 887, 0, 278, 0, 279, 0,
	0, 928, 280, 281, 0, 282, 951, 0, 844, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 919,
	920, 923, 930, 0, 921, 865, 0, 0, 0, 210,
	292, 294, 301, 0, 929, 295, 877, 868, 879, 881,
	882, 883, 878, 0, 870, 0, 302, 931, 932, 303,
	304, 305, 933, 903, 904, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 952, 934, 315, 316,
	935, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 857, 328, 936,
	331, 332, 334, 333, 812, 211, 937, 835, 922, 892,
	335, 336, 0, 866, 338, 867, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 938, 345, 939, 946, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	947, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 885, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 940, 380, 381, 382, 383, 822, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 858, 859, 861, 862, 397, 401, 404, 405,
	915, 406, 386, 387, 407, 941, 408, 880, 860, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 926, 415,
	416, 417, 948, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 856, 0, 899, 900,
	901, 902, 0, 0, 431, 432, 949, 433, 950, 833,
	434, 435, 436, 0, 437, 438, 0, 816, 439, 440,
	441, 442, 444, 916, 445, 0, 864, 446, 447, 448,
	497, 896, 943, 0, 450, 449, 500, 0, 0, 0,
	0, 451, 452, 501, 453, 454, 455, 813, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	809, 810, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 1184, 837, 869, 826, 827, 828, 824,
	825, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 918, 843, 0, 0, 0, 218, 219,
	220, 457, 884, 863, 895, 853, 894, 893, 0, 224,
	855, 854, 227, 228, 229, 845, 917, 230, 953, 954,
	463, 0, 231, 924, 0, 907, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 927, 245, 246, 910, 908, 909,
	914, 912, 911, 913, 247, 248, 249, 250, 898, 252,
	891, 890, 815, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 889, 259, 0, 260, 0, 261, 262, 0,
	821, 263, 264, 266, 269, 265, 270, 271, 272, 944,
	945, 834, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 888, 886, 887, 0, 278, 0, 279, 0, 0,
	928, 280, 281, 0, 282, 951, 0, 844, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 1183, 920,
	923, 930, 0, 921, 865, 0, 0, 0, 210, 292,
	294, 301, 0, 929, 295, 877, 868, 879, 881, 882,
	883, 878, 0, 870, 0, 302, 931, 932, 303, 304,
	305, 933, 903, 904, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 952, 934, 315, 316, 935,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 857, 328, 936, 331,
	332, 334, 333, 812, 211, 937, 835, 922, 892, 335,
	336, 0, 866, 338, 867, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 938, 345, 939, 946, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 947,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 885, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 940, 380, 381, 382, 383, 822, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 858, 859, 861, 862, 397, 401, 404, 405, 915,
	406, 386, 387, 407, 941, 408, 880, 860, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 926, 415, 416,
	417, 948, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 856, 0, 899, 900, 901,
	902, 0, 0, 431, 432, 949, 433, 950, 833, 434,
	435, 436, 0, 437, 438, 0, 816, 439, 440, 441,
	442, 444, 916, 445, 0, 864, 446, 447, 448, 497,
	896, 943, 0, 450, 449, 500, 0, 0, 0, 0,
	451, 452, 501, 453, 454, 455, 813, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 809,
	810, 0, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 1178, 837, 869, 826, 827, 828, 824, 825,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 918, 843, 0, 0, 0, 218, 219, 220,
	457, 884, 863, 895, 853, 894, 893, 0, 224, 855,
	854, 227, 228, 229, 845, 917, 230, 953, 954, 463,
	0, 231, 924, 0, 907, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 927, 245, 246, 910, 908, 909, 914,
	912, 911, 913, 247, 248, 249, 250, 898, 252, 891,
	890, 815, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 889, 259, 0, 260, 0, 261, 262, 0, 821,
	263, 264, 266, 269, 265, 270, 271, 272, 944, 945,
	834, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	888, 886, 887, 0, 278, 0, 279, 0, 0, 928,
	280, 281, 0, 282, 951, 0, 844, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 1177, 920, 923,
	930, 0, 921, 865, 0, 0, 0, 210, 292, 294,
	301, 0, 929, 295, 877, 868, 879, 881, 882, 883,
	878, 0, 870, 0, 302, 931, 932, 303, 304, 305,
	933, 903, 904, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 952, 934, 315, 316, 935, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 857, 328, 936, 331, 332,
	334, 333, 812, 211, 937, 835, 922, 892, 335, 336,
	0, 866, 338, 867, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 938, 345, 939, 946, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 947, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 885, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 940, 380, 381, 382, 383, 822, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	858, 859, 861, 862, 397, 401, 404, 405, 915, 406,
	386, 387, 407, 941, 408, 880, 860, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 926, 415, 416, 417,
	948, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 856, 0, 899, 900, 901, 902,
	0, 0, 431, 432, 949, 433, 950, 833, 434, 435,
	436, 0, 437, 438, 0, 816, 439, 440, 441, 442,
	444, 916, 445, 0, 864, 446, 447, 448, 497, 896,
	943, 0, 450, 449, 500, 0, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 813, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 809, 810,
	0, 0, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 1173, 837, 869, 826, 827, 828, 824, 825, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 918, 843, 0, 0, 0, 218, 219, 220, 457,
	884, 863, 895, 853, 894, 893, 0, 224, 855, 854,
	227, 228, 229, 845, 917, 230, 953, 954, 463, 0,
	231, 924, 0, 907, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 927, 245, 246, 910, 908, 909, 914, 912,
	911, 913, 247, 248, 249, 250, 898, 252, 891, 890,
	815, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	889, 259, 0, 260, 0, 261, 262, 0, 821, 263,
	264, 266, 269, 265, 270, 271, 272, 944, 945, 834,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 888,
	886, 887, 0, 278, 0, 279, 0, 0, 928, 280,
	281, 0, 282, 951, 0, 844, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 919, 920, 923, 930,
	0, 921, 865, 0, 0, 0, 210, 292, 294, 301,
	0, 929, 295, 877, 868, 879, 881, 882, 883, 878,
	0, 870, 0, 302, 931, 932, 303, 304, 305, 933,
	903, 904, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 952, 934, 315, 316, 935, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 857, 328, 936, 331, 332, 334,
	333, 812, 211, 937, 835, 922, 892, 335, 336, 0,
	866, 338, 867, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 938, 345, 939, 946, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 947, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	885, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	940, 380, 381, 382, 383, 822, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 858,
	859, 861, 862, 397, 401, 404, 405, 915, 406, 386,
	387, 407, 941, 408, 880, 860, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 926, 415, 416, 417, 948,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 856, 0, 899, 900, 901, 902, 0,
	0, 431, 432, 949, 433, 950, 833, 434, 435, 436,
	0, 437, 438, 0, 816, 439, 440, 441, 442, 444,
	916, 445, 0, 864, 446, 447, 448, 497, 896, 943,
	0, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 813, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 0, 809, 810, 869,
	826, 827, 828, 824, 825, 838, 839, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 918, 843, 0,
	0, 0, 218, 219, 220, 457, 884, 863, 895, 853,
	894, 893, 0, 224, 855, 854, 227, 228, 229, 845,
	917, 230, 953, 954, 463, 0, 231, 924, 0, 907,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 927, 245,
	246, 910, 908, 909, 914, 912, 911, 913, 247, 248,
	249, 250, 898, 252, 891, 890, 815, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 889, 259, 0, 260,
	0, 261, 262, 0, 821, 263, 264, 266, 269, 265,
	270, 271, 272, 944, 945, 834, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 888, 886, 887, 0, 278,
	0, 279, 0, 0, 928, 280, 281, 0, 282, 951,
	0, 844, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 919, 920, 923, 930, 0, 921, 865, 0,
	0, 0, 210, 292, 294, 301, 0, 929, 295, 877,
	868, 879, 881, 882, 883, 878, 0, 870, 0, 302,
	931, 932, 303, 304, 305, 933, 903, 904, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 952,
	934, 315, 316, 935, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	857, 328, 936, 331, 332, 334, 333, 812, 211, 937,
	835, 922, 892, 335, 336, 0, 866, 338, 867, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 938, 345,
	939, 946, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 947, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 885, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 940, 380, 381, 382,
	383, 822, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 858, 859, 861, 862, 397,
	401, 404, 405, 915, 406, 386, 387, 407, 941, 408,
	880, 860, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 926, 415, 416, 417, 948, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 856,
	0, 899, 900, 901, 902, 0, 0, 431, 432, 949,
	433, 950, 833, 434, 435, 436, 0, 437, 438, 0,
	816, 439, 440, 441, 442, 444, 916, 445, 0, 864,
	446, 447, 448, 497, 896, 943, 0, 450, 449, 500,
	0, 0, 0, 0, 451, 452, 501, 453, 454, 455,
	813, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 809, 810, 869, 826, 827, 828, 824,
	825, 838, 839, 0, 0, 0, 0, 837, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 918, 843, 0, 0, 0, 218, 219,
	220, 457, 884, 863, 895, 853, 894, 893, 0, 224,
	855, 854, 227, 228, 229, 845, 917, 230, 953, 954,
	463, 0, 231, 924, 0, 907, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 927, 245, 3310, 910, 908, 909,
	914, 912, 911, 913, 247, 248, 249, 250, 898, 252,
	891, 890, 815, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 889, 259, 0, 260, 0, 261, 262, 0,
	821, 263, 264, 266, 269, 265, 270, 271, 272, 944,
	945, 834, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 888, 886, 887, 0, 278, 0, 279, 0, 0,
	928, 280, 281, 0, 282, 951, 0, 844, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 919, 920,
	923, 930, 0, 921, 865, 0, 0, 0, 210, 292,
	294, 301, 0, 929, 295, 877, 868, 879, 881, 882,
	883, 878, 0, 870, 0, 302, 931, 932, 303, 304,
	305, 933, 903, 904, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 952, 934, 315, 316, 935,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 857, 328, 936, 331,
	332, 334, 333, 812, 211, 937, 835, 922, 892, 335,
	336, 0, 866, 338, 867, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 938, 345, 939, 946, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 947,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 885, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 940, 380, 381, 382, 383, 822, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 858, 859, 861, 862, 397, 401, 404, 405, 915,
	406, 386, 387, 407, 941, 408, 880, 860, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 926, 415, 416,
	417, 948, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 856, 0, 899, 900, 901,
	902, 0, 0, 431, 432, 949, 433, 950, 833, 434,
	435, 436, 0, 3309, 438, 0, 816, 439, 440, 441,
	442, 444, 916, 445, 0, 864, 446, 447, 448, 497,
	896, 943, 0, 450, 449, 500, 0, 0, 0, 0,
	451, 452, 501, 453, 454, 455, 813, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 809,
	810, 869, 826, 827, 828, 824, 825, 838, 839, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 918,
	843, 0, 0, 0, 218, 219, 220, 3308, 884, 863,
	895, 853, 894, 893, 0, 224, 855, 854, 227, 228,
	229, 845, 917, 230, 953, 954, 463, 0, 231, 924,
	0, 907, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	927, 245, 3310, 910, 908, 909, 914, 912, 911, 913,
	247, 248, 249, 250, 898, 252, 891, 890, 815, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 889, 259,
	0, 260, 0, 261, 262, 0, 821, 263, 264, 266,
	269, 265, 270, 271, 272, 944, 945, 834, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 888, 886, 887,
	0, 278, 0, 279, 0, 0, 928, 280, 281, 0,
	282, 951, 0, 844, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 919, 920, 923, 930, 0, 921,
	865, 0, 0, 0, 210, 292, 294, 301, 0, 929,
	295, 877, 868, 879, 881, 882, 883, 878, 0, 870,
	0, 302, 931, 932, 303, 304, 305, 933, 903, 904,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 952, 934, 315, 316, 935, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 857, 328, 936, 331, 332, 334, 333, 812,
	211, 937, 835, 922, 892, 335, 336, 0, 866, 338,
	867, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	938, 345, 939, 946, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 947, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 885, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 940, 380,
	381, 382, 383, 822, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 858, 859, 861,
	862, 397, 401, 404, 405, 915, 406, 386, 387, 407,
	941, 408, 880, 860, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 926, 415, 416, 417, 948, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 856, 0, 899, 900, 901, 902, 0, 0, 431,
	432, 949, 433, 950, 833, 434, 435, 436, 0, 3309,
	438, 0, 816, 439, 440, 441, 442, 444, 916, 445,
	0, 864, 446, 447, 448, 497, 896, 943, 0, 450,
	449, 500, 0, 0, 0, 0, 451, 452, 501, 453,
	454, 455, 813, 0, 0, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 809, 810, 869, 826, 827,
	828, 824, 825, 838, 839, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 918, 843, 0, 0, 0,
	218, 219, 220, 457, 884, 863, 895, 853, 894, 893,
	0, 224, 855, 854, 227, 228, 229, 845, 917, 230,
	953, 954, 463, 0, 231, 924, 0, 907, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 927, 245, 246, 910,
	908, 909, 914, 912, 911, 913, 247, 248, 249, 250,
	898, 252, 891, 890, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 889, 259, 0, 260, 0, 261,
	262, 0, 821, 263, 264, 266, 269, 265, 270, 271,
	272, 944, 945, 834, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 888, 886, 887, 0, 278, 0, 279,
	0, 0, 928, 280, 281, 0, 282, 951, 0, 844,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	919, 920, 923, 930, 0, 921, 865, 0, 0, 0,
	210, 292, 294, 301, 0, 929, 295, 877, 868, 879,
	881, 882, 883, 878, 0, 870, 0, 302, 931, 932,
	303, 304, 305, 933, 903, 904, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 952, 934, 315,
	316, 935, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 857, 328,
	936, 331, 332, 334, 333, 0, 211, 937, 835, 922,
	892, 335, 336, 0, 866, 338, 867, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 938, 345, 939, 946,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 947, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 885, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 940, 380, 381, 382, 383, 822,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 858, 859, 861, 862, 397, 401, 404,
	405, 915, 406, 386, 387, 407, 941, 408, 880, 860,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 926,
	415, 416, 417, 948, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 856, 0, 899,
	900, 901, 902, 0, 0, 431, 432, 949, 433, 950,
	833, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 916, 445, 0, 864, 446, 447,
	448, 497, 896, 943, 0, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 869, 826,
	827, 828, 824, 825, 838, 0, 2060, 0, 0, 0,
	0, 2058, 2059, 0, 0, 212, 213, 214, 215, 216,
	839, 217, 0, 0, 0, 837, 918, 843, 0, 0,
	0, 218, 219, 220, 0, 884, 863, 895, 853, 894,
	893, 0, 224, 855, 854, 227, 228, 229, 845, 917,
	230, 953, 954, 463, 0, 231, 924, 0, 907, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 927, 245, 3310,
	910, 908, 909, 914, 912, 911, 913, 247, 248, 249,
	250, 898, 252, 891, 890, 815, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 889, 259, 0, 260, 0,
	261, 262, 0, 821, 263, 264, 266, 269, 265, 270,
	271, 272, 944, 945, 834, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 888, 886, 887, 0, 278, 0,
	279, 0, 0, 928, 280, 281, 0, 282, 951, 0,
	844, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 919, 920, 923, 0, 0, 921, 865, 0, 0,
	0, 210, 292, 294, 301, 0, 929, 295, 877, 868,
	879, 881, 882, 883, 878, 0, 870, 0, 302, 0,
	0, 303, 304, 305, 933, 903, 904, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 952, 934,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 857,
	328, 936, 331, 332, 334, 333, 812, 211, 0, 835,
	922, 892, 335, 336, 0, 866, 338, 867, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 938, 345, 939,
	946, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 947, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 885, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 940, 380, 381, 382, 383,
	822, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 858, 859, 861, 862, 397, 401,
	404, 405, 915, 406, 386, 387, 407, 0, 408, 880,
	860, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	926, 415, 416, 417, 948, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 856, 0,
	899, 900, 901, 902, 0, 0, 431, 432, 949, 433,
	950, 833, 434, 435, 436, 0, 3309, 438, 0, 816,
	439, 440, 441, 442, 444, 916, 445, 0, 864, 446,
	447, 448, 497, 896, 943, 0, 450, 449, 500, 0,
	0, 0, 0, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 802, 0,
	990, 0, 809, 810, 0, 0, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 837, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 917, 230, 461, 462, 463, 0, 231, 924, 0,
	907, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 927,
	245, 246, 910, 908, 909, 914, 912, 911, 913, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 944, 945, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 928, 280, 281, 0, 282,
	951, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 919, 920, 923, 930, 0, 921, 293,
	0, 0, 0, 210, 292, 294, 301, 0, 929, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 931, 932, 303, 304, 305, 933, 306, 307, 0,
	0, 308, 309, 310, 311, 977, 313, 312, 0, 314,
	952, 934, 315, 316, 935, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 936, 331, 332, 334, 333, 0, 211,
	937, 0, 922, 482, 335, 336, 0, 337, 338, 339,
	0, 982, 341, 342, 343, 0, 0, 344, 483, 938,
	345, 939, 946, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 947, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 940, 380, 381,
	382, 383, 488, 984, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 175, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 915, 406, 386, 387, 407, 941,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 948, 0, 422, 423,
	421, 177, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	949, 433, 950, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 916, 445, 0,
	443, 446, 447, 448, 1294, 498, 499, 0, 450, 449,
	500, 990, 0, 0, 169, 451, 452, 501, 453, 454,
	455, 0, 170, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 918,
	0, 974, 0, 1569, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 0, 224, 225, 226, 227, 228,
	229, 0, 917, 230, 461, 462, 463, 0, 231, 924,
	0, 907, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	927, 245, 246, 910, 908, 909, 914, 912, 911, 913,
	247, 248, 249, 250, 251, 252, 465, 466, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 944, 945, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 0, 279, 0, 0, 928, 280, 281, 0,
	282, 951, 0, 472, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 919, 920, 923, 930, 0, 921,
	293, 0, 0, 0, 210, 292, 294, 301, 0, 929,
	295, 476, 297, 296, 298, 299, 300, 477, 0, 478,
	0, 302, 931, 932, 303, 304, 305, 933, 306, 307,
	0, 0, 308, 309, 310, 311, 977, 313, 312, 0,
	314, 952, 934, 315, 316, 935, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 936, 331, 332, 334, 333, 0,
	211, 937, 0, 922, 482, 335, 336, 0, 337, 338,
	339, 0, 982, 341, 342, 343, 0, 0, 344, 483,
	938, 345, 939, 946, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 947, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 940, 380,
	381, 382, 383, 488, 984, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 175, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 915, 406, 386, 387, 407,
	941, 408, 489, 409, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 948, 0, 422,
	423, 421, 177, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 0, 491, 492, 493, 494, 0, 0, 431,
	432, 949, 433, 950, 0, 434, 435, 436, 0, 437,
	438, 0, 0, 439, 440, 441, 442, 444, 916, 445,
	0, 443, 446, 447, 448, 1294, 498, 499, 0, 450,
	449, 500, 0, 0, 0, 169, 451, 452, 501, 453,
	454, 455, 0, 170, 0, 0, 2485, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 1569, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 0, 224, 225, 226, 227, 228, 229, 0, 917,
	230, 461, 462, 463, 0, 231, 924, 0, 907, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 927, 245, 246,
	910, 908, 909, 914, 912, 911, 913, 247, 248, 249,
	250, 251, 252, 465, 466, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 944, 945, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 0,
	279, 0, 0, 928, 280, 281, 0, 282, 951, 0,
	472, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 919, 920, 923, 930, 0, 921, 293, 0, 0,
	0, 210, 292, 294, 301, 0, 929, 295, 476, 297,
	296, 298, 299, 300, 477, 0, 478, 0, 302, 931,
	932, 303, 304, 305, 933, 306, 307, 0, 0, 308,
	309, 310, 311, 977, 313, 312, 0, 314, 952, 934,
	315, 316, 935, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 936, 331, 332, 334, 333, 0, 211, 937, 0,
	922, 482, 335, 336, 0, 337, 338, 339, 0, 982,
	341, 342, 343, 0, 0, 344, 483, 938, 345, 939,
	946, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 947, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 940, 380, 381, 382, 383,
	488, 984, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 915, 406, 386, 387, 407, 941, 408, 489,
	409, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 948, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 0,
	491, 492, 493, 494, 0, 0, 431, 432, 949, 433,
	950, 0, 434, 435, 436, 0, 437, 438, 0, 0,
	439, 440, 441, 442, 444, 916, 445, 0, 443, 446,
	447, 448, 497, 498, 499, 0, 450, 449, 500, 0,
	973, 0, 990, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 974,
	918, 979, 0, 0, 0, 218, 219, 220, 457, 458,
	221, 459, 222, 223, 460, 0, 224, 225, 226, 227,
	228, 229, 0, 917, 230, 461, 462, 463, 0, 231,
	924, 0, 907, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 927, 245, 246, 910, 908, 909, 914, 912, 911,
	913, 247, 248, 249, 250, 251, 252, 465, 466, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 467, 263, 264,
	266, 269, 265, 270, 271, 272, 944, 945, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 470, 276,
	277, 0, 278, 0, 279, 0, 0, 928, 280, 281,
	0, 282, 951, 0, 472, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 919, 920, 923, 930, 0,
	921, 293, 0, 0, 0, 210, 292, 294, 301, 0,
	929, 295, 476, 297, 296, 298, 299, 300, 477, 0,
	478, 0, 302, 931, 932, 303, 304, 305, 933, 306,
	307, 0, 0, 308, 309, 310, 311, 977, 313, 312,
	0, 314, 952, 934, 315, 316, 935, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 330, 328, 936, 331, 332, 334, 333,
	0, 211, 937, 0, 922, 482, 335, 336, 0, 337,
	338, 339, 0, 982, 341, 342, 343, 0, 0, 344,
	483, 938, 345, 939, 946, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 947, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 487,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 940,
	380, 381, 382, 383, 488, 984, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 0, 402, 403, 396, 398,
	399, 400, 397, 401, 404, 405, 915, 406, 386, 387,
	407, 941, 408, 489, 409, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 419, 415, 416, 417, 948, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 430, 0, 491, 492, 493, 494, 0, 0,
	431, 432, 949, 433, 950, 0, 434, 435, 436, 0,
	437, 438, 0, 0, 439, 440, 441, 442, 444, 916,
	445, 0, 443, 446, 447, 448, 497, 498, 499, 0,
	450, 449, 500, 990, 0, 0, 0, 451, 452, 501,
	453, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 918, 0, 974, 0, 979, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 917, 230, 461, 462, 463, 0,
	231, 924, 0, 907, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 927, 245, 246, 910, 908, 909, 914, 912,
	911, 913, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 944, 945, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 928, 280,
	281, 0, 282, 951, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 919, 920, 923, 930,
	0, 921, 293, 0, 0, 0, 210, 292, 294, 301,
	0, 929, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 931, 932, 303, 304, 305, 933,
	306, 307, 0, 0, 308, 309, 310, 311, 977, 313,
	312, 0, 314, 952, 934, 315, 316, 935, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 936, 331, 332, 334,
	333, 0, 211, 937, 0, 922, 482, 335, 336, 0,
	337, 338, 339, 0, 982, 341, 342, 343, 0, 0,
	344, 483, 938, 345, 939, 946, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 947, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	940, 380, 381, 382, 383, 488, 984, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 915, 406, 386,
	387, 407, 941, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 948,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 949, 433, 950, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	916, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 990, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 918, 0, 974, 0, 979, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 917, 230, 461, 462, 463,
	0, 231, 924, 0, 907, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 927, 245, 246, 910, 908, 909, 914,
	912, 911, 913, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 944, 945,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 928,
	280, 281, 0, 282, 951, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 919, 920, 923,
	930, 0, 921, 293, 0, 0, 0, 210, 292, 294,
	301, 0, 929, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 931, 932, 303, 304, 305,
	933, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 952, 934, 315, 316, 935, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 936, 331, 332,
	334, 333, 0, 211, 937, 0, 922, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 938, 345, 939, 946, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 947, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 940, 380, 381, 382, 383, 488, 984, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 915, 406,
	386, 387, 407, 941, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	948, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 949, 433, 950, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 916, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 802, 0, 1148, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 1471, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 1052, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 927, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 928, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 930, 0, 479, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 929, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 931, 932,
	303, 304, 305, 933, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 934, 315,
	316, 935, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	936, 331, 332, 334, 333, 0, 0, 937, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 938, 345, 939, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 940, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	175, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 941, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 177, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 1294, 498, 499, 0, 450, 449, 500, 1291, 0,
	1148, 169, 451, 452, 501, 453, 454, 455, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 456, 0,
	147, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	1052, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 927,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 928, 280, 281, 0, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 473, 474, 475, 930, 0, 479, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 929, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 931, 932, 303, 304, 305, 933, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 934, 315, 316, 935, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 936, 331, 332, 334, 333, 0, 0,
	937, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 938,
	345, 939, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 940, 380, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 175, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 941,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 177, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 1294, 498, 499, 0, 450, 449,
	500, 0, 0, 0, 169, 451, 452, 501, 453, 454,
	455, 0, 170, 0, 0, 0, 0, 1148, 1147, 0,
	0, 0, 0, 1145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 1052, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 927, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 928, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 930, 0, 479, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 929, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 931, 932,
	303, 304, 305, 933, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 934, 315,
	316, 935, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	936, 331, 332, 334, 333, 0, 0, 937, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 938, 345, 939, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 940, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 941, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 0, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 1148, 1147,
	0, 0, 0, 0, 1145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	2676, 217, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 461, 462, 463, 0, 231, 464, 0, 1052, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 927, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 465, 466, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 0,
	279, 0, 0, 928, 280, 281, 0, 282, 471, 0,
	472, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 473, 474, 475, 930, 0, 479, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 929, 295, 476, 297,
	296, 298, 299, 300, 477, 0, 478, 0, 302, 931,
	932, 303, 304, 305, 933, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 480, 934,
	315, 316, 935, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 936, 331, 332, 334, 333, 0, 0, 937, 0,
	481, 482, 335, 336, 0, 337, 338, 339, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 938, 345, 939,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 485, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 940, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 0, 406, 386, 387, 407, 941, 408, 489,
	409, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 0,
	491, 492, 493, 494, 0, 0, 431, 432, 495, 433,
	496, 0, 434, 435, 436, 0, 437, 438, 0, 0,
	439, 440, 441, 442, 444, 0, 445, 0, 443, 446,
	447, 448, 497, 498, 499, 0, 450, 449, 500, 990,
	0, 0, 0, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 918, 0, 0,
	0, 1298, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 0, 224, 225, 226, 227, 228, 229, 0,
	917, 230, 461, 462, 463, 0, 231, 924, 0, 907,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 927, 245,
	246, 910, 908, 909, 914, 912, 911, 913, 247, 248,
	249, 250, 251, 252, 465, 466, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 944, 945, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	0, 279, 0, 0, 928, 280, 281, 0, 282, 951,
	0, 472, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 919, 920, 923, 930, 0, 921, 293, 0,
	0, 0, 210, 292, 294, 301, 0, 929, 295, 476,
	297, 296, 298, 299, 300, 477, 0, 478, 0, 302,
	931, 932, 303, 304, 305, 933, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 952,
	934, 315, 316, 935, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 936, 331, 332, 334, 333, 0, 211, 937,
	0, 922, 482, 335, 336, 0, 337, 338, 339, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 938, 345,
	939, 946, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 947, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 940, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 915, 406, 386, 387, 407, 941, 408,
	489, 409, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 948, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	0, 491, 492, 493, 494, 0, 0, 431, 432, 949,
	433, 950, 0, 434, 435, 436, 0, 437, 438, 0,
	0, 439, 440, 441, 442, 444, 916, 445, 0, 443,
	446, 447, 448, 497, 498, 499, 0, 450, 449, 500,
	802, 0, 206, 0, 451, 452, 501, 453, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	456, 0, 0, 0, 0, 218, 219, 220, 457, 458,
	221, 459, 222, 223, 460, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 461, 462, 463, 0, 231,
	464, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 465, 466, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 467, 263, 264,
	266, 269, 265, 270, 271, 272, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 470, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 471, 0, 472, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 473, 474, 475, 0, 0,
	479, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 476, 297, 296, 298, 299, 300, 477, 0,
	478, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 480, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 330, 328, 0, 331, 332, 334, 333,
	0, 0, 0, 0, 481, 482, 335, 336, 0, 337,
	338, 339, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 0, 345, 0, 484, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 485, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 487,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 0,
	380, 381, 382, 383, 488, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 175, 402, 403, 396, 398,
	399, 400, 397, 401, 404, 405, 0, 406, 386, 387,
	407, 0, 408, 489, 409, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 419, 415, 416, 417, 490, 0,
	422, 423, 421, 177, 424, 425, 426, 427, 428, 267,
	429, 268, 430, 0, 491, 492, 493, 494, 0, 0,
	431, 432, 495, 433, 496, 0, 434, 435, 436, 0,
	437, 438, 0, 0, 439, 440, 441, 442, 444, 0,
	445, 0, 443, 446, 447, 448, 1294, 498, 499, 0,
	450, 449, 500, 206, 0, 0, 169, 451, 452, 501,
	453, 454, 455, 0, 170, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 147, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 210, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 211, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 206, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 1574, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 210, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 211, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 206, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 456, 0, 2626, 0, 0, 218, 219,
	220, 457, 458, 221, 459, 222, 223, 460, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 461, 462,
	463, 0, 231, 464, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	465, 466, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	467, 263, 264, 266, 269, 265, 270, 271, 272, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 470, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 471, 0, 472, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 473, 474,
	475, 0, 0, 479, 293, 0, 0, 0, 0, 292,
	294, 301, 0, 0, 295, 476, 297, 296, 298, 299,
	300, 477, 0, 478, 0, 302, 0, 0, 303, 304,
	305, 0, 306, 307, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 480, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 330, 328, 0, 331,
	332, 334, 333, 0, 0, 0, 0, 481, 482, 335,
	336, 0, 337, 338, 339, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 0, 345, 0, 484, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 485,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 487, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 0, 380, 381, 382, 383, 488, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 396, 398, 399, 400, 397, 401, 404, 405, 0,
	406, 386, 387, 407, 0, 408, 489, 409, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 419, 415, 416,
	417, 490, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 430, 0, 491, 492, 493,
	494, 0, 0, 431, 432, 495, 433, 496, 0, 434,
	435, 436, 0, 437, 438, 0, 0, 439, 440, 441,
	442, 444, 0, 445, 0, 443, 446, 447, 448, 497,
	498, 499, 0, 450, 449, 500, 206, 0, 0, 0,
	451, 452, 501, 453, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 2285, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 463, 0, 231, 464, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 471, 0, 472, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 473,
	474, 475, 0, 0, 479, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 0,
	331, 332, 334, 333, 0, 0, 0, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 0, 345, 0, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 0, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 0, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 491, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 0, 450, 449, 500, 678, 0, 570,
	0, 451, 452, 501, 453, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 456, 0, 2748,
	0, 0, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 461, 462, 463, 0, 231, 464, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	576, 250, 251, 252, 465, 466, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 468, 469, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 471,
	0, 472, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 473, 474, 475, 0, 0, 479, 293, 0,
	0, 0, 210, 292, 294, 301, 0, 0, 295, 476,
	297, 296, 298, 299, 300, 477, 0, 478, 0, 302,
	0, 0, 303, 304, 305, 0, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 480,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 0, 331, 332, 334, 333, 0, 211, 0,
	0, 481, 482, 335, 336, 0, 337, 338, 339, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 0, 345,
	0, 484, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 485, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 0, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 0, 406, 386, 387, 407, 0, 408,
	489, 409, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 490, 0, 422, 423, 421,
	575, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	0, 491, 492, 493, 494, 0, 0, 431, 432, 495,
	433, 496, 0, 434, 435, 436, 0, 437, 438, 0,
	0, 439, 440, 441, 442, 444, 0, 445, 0, 443,
	446, 447, 448, 497, 498, 499, 0, 450, 449, 500,
	0, 569, 0, 570, 451, 452, 501, 453, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 579, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 576, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 210, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 211, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 575, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	570, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 456, 579,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 576, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 473, 474, 475, 0, 0, 479, 293,
	0, 0, 0, 210, 292, 294, 301, 0, 0, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 0, 331, 332, 334, 333, 0, 211,
	0, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 0,
	345, 0, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 0, 1851, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 0, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 0,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 575, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 497, 498, 499, 570, 450, 449,
	500, 0, 0, 0, 0, 451, 452, 501, 453, 454,
	455, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 579, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 576, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 0, 0, 479, 293, 0, 0, 0,
	210, 292, 294, 301, 0, 0, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	0, 331, 332, 334, 333, 0, 211, 0, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 0, 345, 0, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 0, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 0, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 575, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 206, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 579, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 210, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 211, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 0, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 1320, 0, 1148, 1147, 0,
	0, 0, 0, 1145, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 1052, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 927, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 209, 0, 0, 0, 0, 0,
	1319, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 928, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 930, 0, 479, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 929, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 931, 932,
	303, 304, 305, 933, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 934, 315,
	316, 935, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	936, 331, 332, 334, 333, 0, 0, 937, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 938, 345, 939, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 1318, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 940, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 941, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 0, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 1289, 0,
	1148, 1147, 0, 0, 0, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 456, 0,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	1052, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 927,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 928, 280, 281, 0, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 1288, 474, 475, 930, 0, 479, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 929, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 931, 932, 303, 304, 305, 933, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 934, 315, 316, 935, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 936, 331, 332, 334, 333, 0, 0,
	937, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 938,
	345, 939, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 940, 380, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 0, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 941,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 0, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 497, 498, 499, 0, 450, 449,
	500, 0, 0, 0, 0, 451, 452, 501, 453, 454,
	455, 1285, 0, 1148, 1147, 0, 0, 0, 0, 1145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 1052, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 927, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 928, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 1284, 474, 475, 930,
	0, 479, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 929, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 931, 932, 303, 304, 305, 933,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 934, 315, 316, 935, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 936, 331, 332, 334,
	333, 0, 0, 937, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 938, 345, 939, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	940, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 941, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 1223, 0, 1148, 1147, 0, 0,
	0, 0, 1145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 0, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 463, 0, 231, 464, 0, 1052, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 927, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 928, 280, 281, 0, 282, 471, 0, 472, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 1222,
	474, 475, 930, 0, 479, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 929, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 931, 932, 303,
	304, 305, 933, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 934, 315, 316,
	935, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 936,
	331, 332, 334, 333, 0, 0, 937, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 938, 345, 939, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 940, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 941, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 491, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 0, 450, 449, 500, 0, 0, 0,
	0, 451, 452, 501, 453, 454, 455, 1220, 0, 1148,
	1147, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 456, 0, 0,
	0, 0, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 461, 462, 463, 0, 231, 464, 0, 1052,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 927, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 465, 466, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 468, 469, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	0, 279, 0, 0, 928, 280, 281, 0, 282, 471,
	0, 472, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 1219, 474, 475, 930, 0, 479, 293, 0,
	0, 0, 0, 292, 294, 301, 0, 929, 295, 476,
	297, 296, 298, 299, 300, 477, 0, 478, 0, 302,
	931, 932, 303, 304, 305, 933, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 480,
	934, 315, 316, 935, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 936, 331, 332, 334, 333, 0, 0, 937,
	0, 481, 482, 335, 336, 0, 337, 338, 339, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 938, 345,
	939, 484, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 485, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 940, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 0, 406, 386, 387, 407, 941, 408,
	489, 409, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 490, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	0, 491, 492, 493, 494, 0, 0, 431, 432, 495,
	433, 496, 0, 434, 435, 436, 0, 437, 438, 0,
	0, 439, 440, 441, 442, 444, 0, 445, 0, 443,
	446, 447, 448, 497, 498, 499, 0, 450, 449, 500,
	0, 0, 0, 0, 451, 452, 501, 453, 454, 455,
	1141, 0, 1148, 1147, 0, 0, 0, 0, 1145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	456, 0, 0, 0, 0, 218, 219, 220, 457, 458,
	221, 459, 222, 223, 460, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 461, 462, 463, 0, 231,
	464, 0, 1052, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 927, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 465, 466, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 467, 263, 264,
	266, 269, 265, 270, 271, 272, 468, 469, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 470, 276,
	277, 0, 278, 0, 279, 0, 0, 928, 280, 281,
	0, 282, 471, 0, 472, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 1143, 474, 475, 930, 0,
	479, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	929, 295, 476, 297, 296, 298, 299, 300, 477, 0,
	478, 0, 302, 931, 932, 303, 304, 305, 933, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 480, 934, 315, 316, 935, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 330, 328, 936, 331, 332, 334, 333,
	0, 0, 937, 0, 481, 482, 335, 336, 0, 337,
	338, 339, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 938, 345, 939, 484, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 485, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 487,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 940,
	380, 381, 382, 383, 488, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 0, 402, 403, 396, 398,
	399, 400, 397, 401, 404, 405, 0, 406, 386, 387,
	407, 941, 408, 489, 409, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 419, 415, 416, 417, 490, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 430, 0, 491, 492, 493, 494, 0, 0,
	431, 432, 495, 433, 496, 0, 434, 435, 436, 0,
	437, 438, 0, 0, 439, 440, 441, 442, 444, 0,
	445, 0, 443, 446, 447, 448, 497, 498, 499, 0,
	450, 449, 500, 0, 0, 0, 0, 451, 452, 501,
	453, 454, 455, 1148, 1147, 0, 0, 0, 0, 1145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 1052, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 927, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 928, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 930,
	0, 479, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 929, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 931, 932, 303, 304, 305, 933,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 934, 315, 316, 935, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 936, 331, 332, 334,
	333, 0, 0, 937, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 938, 345, 939, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	940, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 941, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 1148, 1147, 0, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 1052, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 927, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 928,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	930, 0, 479, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 929, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 931, 932, 303, 304, 305,
	933, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 934, 315, 316, 935, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 936, 331, 332,
	334, 333, 0, 0, 937, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 938, 345, 939, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 940, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 941, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 1148, 450, 449, 500, 0, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 461, 462, 463, 0, 231, 464,
	0, 1052, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	927, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 465, 466, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 0, 279, 0, 0, 928, 280, 281, 0,
	282, 471, 0, 472, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 473, 474, 475, 930, 0, 479,
	293, 0, 0, 0, 0, 292, 294, 301, 0, 929,
	295, 476, 297, 296, 298, 299, 300, 477, 0, 478,
	0, 302, 931, 932, 303, 304, 305, 933, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 480, 934, 315, 316, 935, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 936, 331, 332, 334, 333, 0,
	0, 937, 0, 481, 482, 335, 336, 0, 337, 338,
	339, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	938, 345, 939, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 485, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 940, 380,
	381, 382, 383, 488, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 0, 406, 386, 387, 407,
	941, 408, 489, 409, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 0, 491, 492, 493, 494, 0, 0, 431,
	432, 495, 433, 496, 0, 434, 435, 436, 0, 437,
	438, 0, 0, 439, 440, 441, 442, 444, 0, 445,
	0, 443, 446, 447, 448, 497, 498, 499, 206, 450,
	449, 500, 0, 0, 0, 0, 451, 452, 501, 453,
	454, 455, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 461, 462, 463, 2179, 231, 464, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	2176, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 465, 466, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 0, 2320, 0, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 0,
	279, 2182, 0, 0, 280, 281, 0, 282, 471, 0,
	472, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 473, 474, 475, 0, 0, 479, 293, 0, 0,
	0, 2317, 292, 294, 301, 0, 0, 295, 476, 297,
	296, 298, 299, 300, 477, 0, 478, 0, 2319, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 480, 0,
	315, 316, 2316, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 0, 331, 332, 334, 333, 0, 0, 0, 0,
	481, 482, 335, 336, 0, 337, 338, 339, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 0, 345, 0,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 485, 355, 486, 356, 2181, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 0, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 0, 406, 386, 387, 407, 0, 408, 489,
	409, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 0,
	491, 492, 493, 494, 0, 0, 431, 432, 495, 433,
	496, 0, 434, 435, 436, 0, 437, 438, 0, 2318,
	439, 440, 441, 442, 444, 0, 445, 0, 443, 446,
	447, 448, 497, 498, 499, 206, 450, 449, 500, 0,
	0, 0, 0, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 456, 0, 0, 0, 0, 218, 219,
	220, 457, 458, 221, 459, 222, 223, 460, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 461, 462,
	463, 2179, 231, 464, 0, 0, 2173, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 2176, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	465, 466, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	467, 263, 264, 266, 269, 265, 270, 271, 272, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 470, 276, 277, 0, 278, 0, 279, 2182, 0,
	0, 280, 281, 0, 282, 471, 0, 472, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 2172, 474,
	475, 0, 0, 479, 293, 0, 0, 0, 0, 292,
	294, 301, 0, 0, 295, 476, 297, 296, 298, 299,
	300, 477, 0, 478, 0, 302, 0, 0, 303, 304,
	305, 0, 306, 307, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 480, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 330, 328, 0, 331,
	332, 334, 333, 0, 0, 0, 0, 481, 482, 335,
	336, 0, 337, 338, 339, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 0, 345, 0, 484, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 485,
	355, 486, 356, 2181, 357, 0, 358, 359, 360, 361,
	362, 363, 487, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 0, 380, 381, 382, 383, 488, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 396, 398, 399, 400, 397, 401, 404, 405, 0,
	406, 386, 387, 407, 0, 408, 489, 409, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 419, 415, 416,
	417, 490, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 430, 0, 491, 492, 493,
	494, 0, 0, 431, 432, 495, 433, 496, 0, 434,
	435, 436, 0, 437, 438, 0, 2180, 439, 440, 441,
	442, 444, 0, 445, 0, 443, 446, 447, 448, 497,
	498, 499, 0, 450, 449, 500, 1365, 0, 206, 0,
	451, 452, 501, 453, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 461, 462, 463, 0, 231, 464, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 465, 466, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 471, 0,
	472, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 473, 474, 475, 0, 0, 479, 293, 0, 0,
	0, 210, 292, 294, 301, 0, 0, 295, 476, 297,
	296, 298, 299, 300, 477, 0, 478, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 480, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 0, 331, 332, 334, 333, 0, 211, 0, 0,
	481, 482, 335, 336, 0, 337, 338, 339, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 0, 345, 0,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 485, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 0, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 1368, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 0, 406, 386, 387, 407, 0, 408, 489,
	409, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 0, 422, 423, 421, 1366,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 0,
	491, 492, 493, 494, 0, 0, 431, 432, 495, 433,
	496, 0, 434, 435, 436, 0, 437, 438, 0, 0,
	439, 440, 441, 442, 444, 0, 445, 0, 443, 446,
	447, 448, 497, 498, 499, 0, 1367, 449, 500, 1136,
	0, 206, 0, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 461, 462, 463, 0, 231, 464,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 465, 466, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 471, 0, 472, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 1138, 474, 475, 0, 0, 479,
	293, 0, 0, 0, 210, 292, 294, 301, 0, 0,
	295, 476, 297, 296, 298, 299, 300, 477, 0, 478,
	0, 302, 0, 0, 303, 304, 305, 0, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 480, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 0, 331, 332, 334, 333, 0,
	211, 0, 0, 481, 482, 335, 336, 0, 337, 338,
	339, 0, 982, 341, 342, 343, 0, 0, 344, 483,
	0, 345, 0, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 485, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 0, 380,
	381, 382, 383, 488, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 0, 406, 386, 387, 407,
	0, 408, 489, 409, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 0, 491, 492, 493, 494, 0, 0, 431,
	432, 495, 433, 496, 0, 434, 435, 436, 0, 437,
	438, 0, 0, 439, 440, 441, 442, 444, 0, 445,
	0, 443, 446, 447, 448, 497, 498, 499, 0, 450,
	449, 500, 1133, 0, 206, 0, 451, 452, 501, 453,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 1135, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 210, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 211, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 982, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 1040, 0, 206, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	1042, 474, 475, 0, 0, 479, 293, 0, 0, 0,
	210, 292, 294, 301, 0, 0, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	0, 331, 332, 334, 333, 0, 211, 0, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 982, 341,
	342, 343, 0, 0, 344, 483, 0, 345, 0, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 0, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 0, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 0, 450, 449, 500, 532, 0,
	206, 0, 451, 452, 501, 453, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	531, 216, 521, 217, 0, 0, 0, 0, 456, 0,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 524, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 525, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 473, 474, 475, 0, 0, 479, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 0, 331, 332, 334, 333, 0, 0,
	0, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 0,
	345, 0, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 0, 380, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 526, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 0,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 0, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 497, 498, 499, 0, 450, 449,
	500, 520, 0, 206, 0, 451, 452, 501, 453, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 521, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 524, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 525, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 0, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 526, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	206, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 456, 0,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 473, 474, 475, 0, 0, 479, 293,
	0, 0, 0, 210, 292, 294, 301, 0, 0, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 0, 331, 332, 334, 333, 0, 211,
	0, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 982, 341, 342, 343, 0, 0, 344, 483, 0,
	345, 0, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 0, 380, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 0, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 0,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 0, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 497, 498, 499, 0, 450, 449,
	500, 2249, 0, 206, 0, 451, 452, 501, 453, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 210, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 211, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 1837, 0, 206, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 0, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 463, 0, 231, 464, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 471, 0, 472, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 473,
	474, 475, 0, 0, 479, 293, 0, 0, 0, 210,
	292, 294, 301, 0, 0, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 0,
	331, 332, 334, 333, 0, 211, 0, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 0, 345, 0, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 0, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 0, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 491, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 206, 450, 449, 500, 0, 0, 0,
	0, 451, 452, 501, 453, 454, 455, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 210, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 211, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 1775, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 1768, 0, 206, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 0, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 463, 0, 231, 464, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 471, 0, 472, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 1767,
	474, 475, 0, 0, 479, 293, 0, 0, 0, 210,
	292, 294, 301, 0, 0, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 0,
	331, 332, 334, 333, 0, 211, 0, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 0, 345, 0, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 0, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 0, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 491, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 0, 450, 449, 500, 1763, 0, 206,
	0, 451, 452, 501, 453, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 456, 0, 0,
	0, 0, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 461, 462, 463, 0, 231, 464, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 465, 466, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 468, 469, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 471,
	0, 472, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 1765, 474, 475, 0, 0, 479, 293, 0,
	0, 0, 210, 292, 294, 301, 0, 0, 295, 476,
	297, 296, 298, 299, 300, 477, 0, 478, 0, 302,
	0, 0, 303, 304, 305, 0, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 480,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 0, 331, 332, 334, 333, 0, 211, 0,
	0, 481, 482, 335, 336, 0, 337, 338, 339, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 0, 345,
	0, 484, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 485, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 0, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 0, 406, 386, 387, 407, 0, 408,
	489, 409, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 490, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	0, 491, 492, 493, 494, 0, 0, 431, 432, 495,
	433, 496, 0, 434, 435, 436, 0, 437, 438, 0,
	0, 439, 440, 441, 442, 444, 0, 445, 0, 443,
	446, 447, 448, 497, 498, 499, 0, 450, 449, 500,
	1278, 0, 206, 0, 451, 452, 501, 453, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	456, 0, 0, 0, 0, 218, 219, 220, 457, 458,
	221, 459, 222, 223, 460, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 461, 462, 463, 0, 231,
	464, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 465, 466, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 467, 263, 264,
	266, 269, 265, 270, 271, 272, 468, 469, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 470, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 471, 0, 472, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 1277, 474, 475, 0, 0,
	479, 293, 0, 0, 0, 210, 292, 294, 301, 0,
	0, 295, 476, 297, 296, 298, 299, 300, 477, 0,
	478, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 480, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 330, 328, 0, 331, 332, 334, 333,
	0, 211, 0, 0, 481, 482, 335, 336, 0, 337,
	338, 339, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 0, 345, 0, 484, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 485, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 487,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 0,
	380, 381, 382, 383, 488, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 0, 402, 403, 396, 398,
	399, 400, 397, 401, 404, 405, 0, 406, 386, 387,
	407, 0, 408, 489, 409, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 419, 415, 416, 417, 490, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 430, 0, 491, 492, 493, 494, 0, 0,
	431, 432, 495, 433, 496, 0, 434, 435, 436, 0,
	437, 438, 0, 0, 439, 440, 441, 442, 444, 0,
	445, 0, 443, 446, 447, 448, 497, 498, 499, 0,
	450, 449, 500, 1275, 0, 206, 0, 451, 452, 501,
	453, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 456, 0, 0, 0, 0, 218, 219,
	220, 457, 458, 221, 459, 222, 223, 460, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 461, 462,
	463, 0, 231, 464, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	465, 466, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	467, 263, 264, 266, 269, 265, 270, 271, 272, 468,
	469, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 470, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 471, 0, 472, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 1274, 474,
	475, 0, 0, 479, 293, 0, 0, 0, 210, 292,
	294, 301, 0, 0, 295, 476, 297, 296, 298, 299,
	300, 477, 0, 478, 0, 302, 0, 0, 303, 304,
	305, 0, 306, 307, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 480, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 330, 328, 0, 331,
	332, 334, 333, 0, 211, 0, 0, 481, 482, 335,
	336, 0, 337, 338, 339, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 0, 345, 0, 484, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 485,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 487, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 0, 380, 381, 382, 383, 488, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 396, 398, 399, 400, 397, 401, 404, 405, 0,
	406, 386, 387, 407, 0, 408, 489, 409, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 419, 415, 416,
	417, 490, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 430, 0, 491, 492, 493,
	494, 0, 0, 431, 432, 495, 433, 496, 0, 434,
	435, 436, 0, 437, 438, 0, 0, 439, 440, 441,
	442, 444, 0, 445, 0, 443, 446, 447, 448, 497,
	498, 499, 0, 450, 449, 500, 1272, 0, 206, 0,
	451, 452, 501, 453, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 461, 462, 463, 0, 231, 464, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 465, 466, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 471, 0,
	472, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 1271, 474, 475, 0, 0, 479, 293, 0, 0,
	0, 210, 292, 294, 301, 0, 0, 295, 476, 297,
	296, 298, 299, 300, 477, 0, 478, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 480, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 0, 331, 332, 334, 333, 0, 211, 0, 0,
	481, 482, 335, 336, 0, 337, 338, 339, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 0, 345, 0,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 485, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 0, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 0, 406, 386, 387, 407, 0, 408, 489,
	409, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 0,
	491, 492, 493, 494, 0, 0, 431, 432, 495, 433,
	496, 0, 434, 435, 436, 0, 437, 438, 0, 0,
	439, 440, 441, 442, 444, 0, 445, 0, 443, 446,
	447, 448, 497, 498, 499, 0, 450, 449, 500, 1268,
	0, 206, 0, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 461, 462, 463, 0, 231, 464,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 465, 466, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 471, 0, 472, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 1267, 474, 475, 0, 0, 479,
	293, 0, 0, 0, 210, 292, 294, 301, 0, 0,
	295, 476, 297, 296, 298, 299, 300, 477, 0, 478,
	0, 302, 0, 0, 303, 304, 305, 0, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 480, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 0, 331, 332, 334, 333, 0,
	211, 0, 0, 481, 482, 335, 336, 0, 337, 338,
	339, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	0, 345, 0, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 485, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 0, 380,
	381, 382, 383, 488, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 0, 406, 386, 387, 407,
	0, 408, 489, 409, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 0, 491, 492, 493, 494, 0, 0, 431,
	432, 495, 433, 496, 0, 434, 435, 436, 0, 437,
	438, 0, 0, 439, 440, 441, 442, 444, 0, 445,
	0, 443, 446, 447, 448, 497, 498, 499, 0, 450,
	449, 500, 1243, 0, 206, 0, 451, 452, 501, 453,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 210, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 211, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 1158, 0, 206, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	1160, 474, 475, 0, 0, 479, 293, 0, 0, 0,
	210, 292, 294, 301, 0, 0, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	0, 331, 332, 334, 333, 0, 211, 0, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 0, 345, 0, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 0, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 0, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 206, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 210, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 211, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 206, 450, 449, 500, 0, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 461, 462, 463, 0, 231, 464,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 524,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 465, 466, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 525,
	282, 471, 0, 472, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 473, 474, 475, 0, 0, 479,
	293, 0, 0, 0, 0, 292, 294, 301, 0, 0,
	295, 476, 297, 296, 298, 299, 300, 477, 0, 478,
	0, 302, 0, 0, 303, 304, 305, 0, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 480, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 0, 331, 332, 334, 333, 0,
	0, 0, 0, 481, 482, 335, 336, 0, 337, 338,
	339, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	0, 345, 0, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 485, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 0, 380,
	381, 382, 383, 488, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 526, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 0, 406, 386, 387, 407,
	0, 408, 489, 409, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 0, 491, 492, 493, 494, 0, 0, 431,
	432, 495, 433, 496, 0, 434, 435, 436, 0, 437,
	438, 0, 0, 439, 440, 441, 442, 444, 0, 445,
	0, 443, 446, 447, 448, 497, 498, 499, 0, 450,
	449, 500, 670, 0, 206, 0, 451, 452, 501, 453,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 0, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 669, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 509, 0, 206, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 508,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 0, 0, 479, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 0, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	0, 331, 332, 334, 333, 0, 0, 0, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 0, 345, 0, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 507, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 0, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 0, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 206, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 2113, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 0, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 206, 2307, 0, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 456, 0, 0, 0, 0, 218, 219,
	220, 457, 458, 221, 459, 222, 223, 460, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 461, 462,
	463, 0, 231, 464, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	465, 466, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	467, 263, 264, 266, 269, 265, 270, 271, 272, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 470, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 471, 0, 472, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 473, 474,
	475, 0, 0, 479, 293, 0, 0, 0, 0, 292,
	294, 301, 0, 0, 295, 476, 297, 296, 298, 299,
	300, 477, 0, 478, 0, 302, 0, 0, 303, 304,
	305, 0, 306, 307, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 480, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 330, 328, 0, 331,
	332, 334, 333, 0, 0, 0, 0, 481, 482, 335,
	336, 0, 337, 338, 339, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 0, 345, 0, 484, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 485,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 487, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 0, 380, 381, 382, 383, 488, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 396, 398, 399, 400, 397, 401, 404, 405, 0,
	406, 386, 387, 407, 0, 408, 489, 409, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 419, 415, 416,
	417, 490, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 430, 0, 491, 492, 493,
	494, 0, 0, 431, 432, 495, 433, 496, 0, 434,
	435, 436, 0, 437, 438, 0, 0, 439, 440, 441,
	442, 444, 0, 445, 0, 443, 446, 447, 448, 497,
	498, 499, 206, 450, 449, 500, 0, 0, 0, 0,
	451, 452, 501, 453, 454, 455, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	456, 0, 0, 0, 0, 218, 219, 220, 457, 458,
	221, 459, 222, 223, 460, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 461, 462, 463, 0, 231,
	464, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 465, 466, 2871,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 467, 263, 264,
	266, 269, 265, 270, 271, 272, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 470, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 471, 0, 472, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 473, 474, 475, 0, 0,
	479, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 476, 297, 296, 298, 299, 300, 477, 0,
	478, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 480, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 330, 328, 0, 331, 332, 334, 333,
	0, 0, 0, 0, 481, 482, 335, 336, 0, 337,
	338, 339, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 0, 345, 0, 484, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 485, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 487,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 0,
	380, 381, 382, 383, 488, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 0, 402, 403, 396, 398,
	399, 400, 397, 401, 404, 405, 0, 406, 386, 387,
	407, 0, 408, 489, 409, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 419, 415, 416, 417, 490, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 430, 0, 491, 492, 493, 494, 0, 0,
	431, 432, 495, 433, 496, 0, 434, 435, 436, 0,
	437, 438, 0, 0, 439, 440, 441, 442, 444, 0,
	445, 0, 443, 446, 447, 448, 497, 498, 499, 0,
	450, 449, 500, 206, 2307, 0, 0, 451, 452, 501,
	453, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 0, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 2304, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	206, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 212, 213, 214,
	215, 216, 1843, 217, 0, 0, 0, 0, 456, 0,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 473, 474, 475, 0, 0, 479, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 0, 331, 332, 334, 333, 0, 0,
	0, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 0,
	345, 0, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 0, 380, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 0, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 0,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 0, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 497, 498, 499, 0, 450, 449,
	500, 1835, 0, 206, 0, 451, 452, 501, 453, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 0, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 552, 0, 206, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 0, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 1018, 0, 231, 464, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 471, 0, 472, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 473,
	474, 475, 0, 0, 479, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 553, 0,
	331, 332, 334, 333, 0, 0, 0, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 0, 345, 0, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 0, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 549, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 0, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 548, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 0, 450, 449, 500, 1787, 0, 206,
	0, 451, 452, 501, 453, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 456, 0, 0,
	0, 0, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 461, 462, 463, 0, 231, 464, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 465, 466, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 471,
	0, 472, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 1786, 474, 475, 0, 0, 479, 293, 0,
	0, 0, 0, 292, 294, 301, 0, 0, 295, 476,
	297, 296, 298, 299, 300, 477, 0, 478, 0, 302,
	0, 0, 303, 304, 305, 0, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 480,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 0, 331, 332, 334, 333, 0, 0, 0,
	0, 481, 482, 335, 336, 0, 337, 338, 339, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 0, 345,
	0, 484, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 485, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 0, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 0, 406, 386, 387, 407, 0, 408,
	489, 409, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 490, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	0, 491, 492, 493, 494, 0, 0, 431, 432, 495,
	433, 496, 0, 434, 435, 436, 0, 437, 438, 0,
	0, 439, 440, 441, 442, 444, 0, 445, 0, 443,
	446, 447, 448, 497, 498, 499, 0, 450, 449, 500,
	552, 0, 206, 0, 451, 452, 501, 453, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	456, 0, 0, 0, 0, 218, 219, 220, 457, 458,
	221, 459, 222, 223, 460, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 461, 462, 463, 0, 542,
	464, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 465, 466, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 467, 263, 264,
	266, 269, 265, 270, 271, 272, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 470, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 471, 0, 472, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 473, 474, 475, 0, 0,
	479, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 476, 297, 296, 298, 299, 300, 477, 0,
	478, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 480, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 330, 553, 0, 331, 332, 334, 333,
	0, 0, 0, 0, 481, 482, 335, 336, 0, 337,
	338, 339, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 0, 345, 0, 484, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 485, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 487,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 0,
	380, 381, 382, 383, 488, 384, 0, 385, 389, 390,
	549, 392, 393, 394, 395, 0, 402, 403, 396, 398,
	399, 400, 397, 401, 1297, 405, 0, 406, 386, 387,
	407, 0, 408, 489, 409, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 419, 415, 416, 417, 490, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 430, 0, 548, 492, 493, 494, 0, 0,
	431, 432, 495, 433, 496, 0, 434, 435, 436, 0,
	437, 438, 0, 0, 439, 440, 441, 442, 444, 0,
	445, 0, 443, 446, 447, 448, 497, 498, 499, 0,
	450, 449, 500, 1282, 0, 206, 0, 451, 452, 501,
	453, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 456, 0, 0, 0, 0, 218, 219,
	220, 457, 458, 221, 459, 222, 223, 460, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 461, 462,
	463, 0, 231, 464, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	465, 466, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	467, 263, 264, 266, 269, 265, 270, 271, 272, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 470, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 471, 0, 472, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 1281, 474,
	475, 0, 0, 479, 293, 0, 0, 0, 0, 292,
	294, 301, 0, 0, 295, 476, 297, 296, 298, 299,
	300, 477, 0, 478, 0, 302, 0, 0, 303, 304,
	305, 0, 306, 307, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 480, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 330, 328, 0, 331,
	332, 334, 333, 0, 0, 0, 0, 481, 482, 335,
	336, 0, 337, 338, 339, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 0, 345, 0, 484, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 485,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 487, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 0, 380, 381, 382, 383, 488, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 396, 398, 399, 400, 397, 401, 404, 405, 0,
	406, 386, 387, 407, 0, 408, 489, 409, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 419, 415, 416,
	417, 490, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 430, 0, 491, 492, 493,
	494, 0, 0, 431, 432, 495, 433, 496, 0, 434,
	435, 436, 0, 437, 438, 0, 0, 439, 440, 441,
	442, 444, 0, 445, 0, 443, 446, 447, 448, 497,
	498, 499, 0, 450, 449, 500, 1231, 0, 206, 0,
	451, 452, 501, 453, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 456, 0, 0, 0,
	0, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 461, 462, 463, 0, 231, 464, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 465, 466, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 471, 0,
	472, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 1230, 474, 475, 0, 0, 479, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 476, 297,
	296, 298, 299, 300, 477, 0, 478, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 480, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 0, 331, 332, 334, 333, 0, 0, 0, 0,
	481, 482, 335, 336, 0, 337, 338, 339, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 0, 345, 0,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 485, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 0, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 0, 406, 386, 387, 407, 0, 408, 489,
	409, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 0,
	491, 492, 493, 494, 0, 0, 431, 432, 495, 433,
	496, 0, 434, 435, 436, 0, 437, 438, 0, 0,
	439, 440, 441, 442, 444, 0, 445, 0, 443, 446,
	447, 448, 497, 498, 499, 0, 450, 449, 500, 1215,
	0, 206, 0, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 461, 462, 463, 0, 231, 464,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 465, 466, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 471, 0, 472, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 473, 474, 475, 0, 0, 479,
	293, 0, 0, 0, 0, 292, 294, 301, 0, 0,
	295, 476, 297, 296, 298, 299, 300, 477, 0, 478,
	0, 302, 0, 0, 303, 304, 305, 0, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 480, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 0, 331, 332, 334, 333, 0,
	0, 0, 0, 481, 482, 335, 336, 0, 337, 338,
	339, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	0, 345, 0, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 485, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 0, 380,
	381, 382, 383, 488, 384, 0, 385, 389, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 0, 406, 386, 387, 407,
	0, 408, 489, 409, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 0, 491, 492, 493, 494, 0, 0, 431,
	432, 495, 433, 496, 0, 434, 435, 436, 0, 437,
	438, 0, 0, 439, 440, 441, 442, 444, 0, 445,
	0, 443, 446, 447, 448, 497, 498, 499, 0, 450,
	449, 500, 1152, 0, 206, 0, 451, 452, 501, 453,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 0, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 552, 0, 206, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 1018, 0, 231, 464, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 0, 0, 479, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 0, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 553,
	0, 331, 332, 334, 333, 0, 0, 0, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 0, 345, 0, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 0, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 549, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 0, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 548,
	492, 493, 494, 0, 0, 431, 1019, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 206, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 0, 0,
	0, 212, 213, 214, 215, 216, 1001, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 473, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 0, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 0, 450, 449, 500, 552, 0, 206, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 542, 464, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	540, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	473, 474, 475, 0, 0, 479, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 0, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 0, 315,
	316, 0, 0, 317, 541, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 553,
	0, 331, 332, 334, 333, 0, 0, 0, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 0, 345, 0, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 0, 380, 381, 382, 383, 543,
	384, 0, 385, 389, 390, 549, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 544,
	405, 0, 406, 386, 387, 407, 0, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 548,
	492, 493, 494, 0, 0, 431, 546, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 0, 450, 449, 500, 536, 0,
	206, 0, 451, 452, 501, 453, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 456, 0,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 473, 474, 475, 0, 0, 479, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 0, 331, 332, 334, 333, 0, 0,
	0, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 0,
	345, 0, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 0, 380, 381,
	382, 383, 488, 384, 0, 385, 537, 390, 391, 392,
	393, 394, 395, 0, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 0,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 0, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 497, 498, 499, 0, 450, 449,
	500, 534, 0, 206, 0, 451, 452, 501, 453, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 473, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 0, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	0, 450, 449, 500, 528, 0, 206, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 0, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 463, 0, 231, 464, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 471, 0, 472, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 473,
	474, 475, 0, 0, 479, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 0,
	331, 332, 334, 333, 0, 0, 0, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 0, 345, 0, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 0, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 0, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 491, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 0, 450, 449, 500, 504, 0, 206,
	0, 451, 452, 501, 453, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 456, 0, 0,
	0, 0, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 461, 462, 463, 0, 231, 464, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 465, 466, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 471,
	0, 472, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 473, 474, 475, 0, 0, 479, 293, 0,
	0, 0, 0, 292, 294, 301, 0, 0, 295, 476,
	297, 296, 298, 299, 300, 477, 0, 478, 0, 302,
	0, 0, 303, 304, 305, 0, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 480,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 0, 331, 332, 334, 333, 0, 0, 0,
	0, 481, 482, 335, 336, 0, 337, 338, 339, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 0, 345,
	0, 484, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 485, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 364, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 0, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 0, 406, 386, 387, 407, 0, 408,
	489, 409, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 490, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	0, 491, 492, 493, 494, 0, 0, 431, 432, 495,
	433, 496, 0, 434, 435, 436, 0, 437, 438, 0,
	0, 439, 440, 441, 442, 444, 0, 445, 0, 443,
	446, 447, 448, 497, 498, 499, 206, 450, 449, 500,
	0, 0, 0, 0, 451, 452, 501, 453, 454, 455,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 0, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 463, 0, 231, 464, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 471, 0, 472, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 473,
	474, 475, 0, 0, 479, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 0,
	331, 332, 334, 333, 0, 0, 0, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 0, 345, 0, 484, 346,
	340, 347, 348, 349, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	361, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 0, 380, 381, 382, 383, 488, 384,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 0, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 491, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 206, 450, 449, 500, 0, 0, 0,
	0, 451, 452, 501, 453, 454, 455, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 456, 0, 0, 0, 0, 218, 219, 220, 457,
	458, 221, 459, 222, 223, 460, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 461, 462, 463, 0,
	231, 464, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 465, 466,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 467, 263,
	264, 266, 269, 265, 270, 271, 272, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 470,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 471, 0, 472, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 291, 2572, 474, 475, 0,
	0, 479, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 0, 295, 476, 297, 296, 298, 299, 300, 477,
	0, 478, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 480, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 320, 0, 321, 322, 324, 326,
	323, 325, 327, 329, 330, 328, 0, 331, 332, 334,
	333, 0, 0, 0, 0, 481, 482, 335, 336, 0,
	337, 338, 339, 0, 0, 341, 342, 343, 0, 0,
	344, 483, 0, 345, 0, 484, 346, 340, 347, 348,
	349, 350, 351, 352, 0, 353, 354, 485, 355, 486,
	356, 0, 357, 0, 358, 359, 360, 361, 362, 363,
	487, 364, 365, 0, 366, 367, 368, 369, 370, 0,
	372, 373, 374, 371, 375, 376, 377, 378, 0, 379,
	0, 380, 381, 382, 383, 488, 384, 0, 385, 389,
	390, 391, 392, 393, 394, 395, 0, 402, 403, 396,
	398, 399, 400, 397, 401, 404, 405, 0, 406, 386,
	387, 407, 0, 408, 489, 409, 410, 0, 420, 411,
	412, 413, 388, 414, 418, 419, 415, 416, 417, 490,
	0, 422, 423, 421, 0, 424, 425, 426, 427, 428,
	267, 429, 268, 430, 0, 491, 492, 493, 494, 0,
	0, 431, 432, 495, 433, 496, 0, 434, 435, 436,
	0, 437, 438, 0, 0, 439, 440, 441, 442, 444,
	0, 445, 0, 443, 446, 447, 448, 497, 498, 499,
	206, 450, 449, 500, 0, 0, 0, 0, 451, 452,
	501, 453, 454, 455, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 456, 0,
	0, 0, 0, 218, 219, 220, 457, 458, 221, 459,
	222, 223, 460, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 461, 462, 463, 0, 231, 464, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 465, 466, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 467, 263, 264, 266, 269,
	265, 270, 271, 272, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 470, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	471, 0, 472, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 291, 2570, 474, 475, 0, 0, 479, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	476, 297, 296, 298, 299, 300, 477, 0, 478, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	480, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 320, 0, 321, 322, 324, 326, 323, 325, 327,
	329, 330, 328, 0, 331, 332, 334, 333, 0, 0,
	0, 0, 481, 482, 335, 336, 0, 337, 338, 339,
	0, 0, 341, 342, 343, 0, 0, 344, 483, 0,
	345, 0, 484, 346, 340, 347, 348, 349, 350, 351,
	352, 0, 353, 354, 485, 355, 486, 356, 0, 357,
	0, 358, 359, 360, 361, 362, 363, 487, 364, 365,
	0, 366, 367, 368, 369, 370, 0, 372, 373, 374,
	371, 375, 376, 377, 378, 0, 379, 0, 380, 381,
	382, 383, 488, 384, 0, 385, 389, 390, 391, 392,
	393, 394, 395, 0, 402, 403, 396, 398, 399, 400,
	397, 401, 404, 405, 0, 406, 386, 387, 407, 0,
	408, 489, 409, 410, 0, 420, 411, 412, 413, 388,
	414, 418, 419, 415, 416, 417, 490, 0, 422, 423,
	421, 0, 424, 425, 426, 427, 428, 267, 429, 268,
	430, 0, 491, 492, 493, 494, 0, 0, 431, 432,
	495, 433, 496, 0, 434, 435, 436, 0, 437, 438,
	0, 0, 439, 440, 441, 442, 444, 0, 445, 0,
	443, 446, 447, 448, 497, 498, 499, 206, 450, 449,
	500, 0, 0, 0, 0, 451, 452, 501, 453, 454,
	455, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 456, 0, 0, 0, 0,
	218, 219, 220, 457, 458, 221, 459, 222, 223, 460,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	461, 462, 463, 0, 231, 464, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 465, 466, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 467, 263, 264, 266, 269, 265, 270, 271,
	272, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 470, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 471, 0, 472,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	2559, 474, 475, 0, 0, 479, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 0, 295, 476, 297, 296,
	298, 299, 300, 477, 0, 478, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 480, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 320, 0,
	321, 322, 324, 326, 323, 325, 327, 329, 330, 328,
	0, 331, 332, 334, 333, 0, 0, 0, 0, 481,
	482, 335, 336, 0, 337, 338, 339, 0, 0, 341,
	342, 343, 0, 0, 344, 483, 0, 345, 0, 484,
	346, 340, 347, 348, 349, 350, 351, 352, 0, 353,
	354, 485, 355, 486, 356, 0, 357, 0, 358, 359,
	360, 361, 362, 363, 487, 364, 365, 0, 366, 367,
	368, 369, 370, 0, 372, 373, 374, 371, 375, 376,
	377, 378, 0, 379, 0, 380, 381, 382, 383, 488,
	384, 0, 385, 389, 390, 391, 392, 393, 394, 395,
	0, 402, 403, 396, 398, 399, 400, 397, 401, 404,
	405, 0, 406, 386, 387, 407, 0, 408, 489, 409,
	410, 0, 420, 411, 412, 413, 388, 414, 418, 419,
	415, 416, 417, 490, 0, 422, 423, 421, 0, 424,
	425, 426, 427, 428, 267, 429, 268, 430, 0, 491,
	492, 493, 494, 0, 0, 431, 432, 495, 433, 496,
	0, 434, 435, 436, 0, 437, 438, 0, 0, 439,
	440, 441, 442, 444, 0, 445, 0, 443, 446, 447,
	448, 497, 498, 499, 206, 450, 449, 500, 0, 0,
	0, 0, 451, 452, 501, 453, 454, 455, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 456, 0, 0, 0, 0, 218, 219, 220,
	457, 458, 221, 459, 222, 223, 460, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 461, 462, 463,
	0, 231, 464, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 465,
	466, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 467,
	263, 264, 266, 269, 265, 270, 271, 272, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	470, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 471, 0, 472, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 291, 2267, 474, 475,
	0, 0, 479, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 476, 297, 296, 298, 299, 300,
	477, 0, 478, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 480, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 320, 0, 321, 322, 324,
	326, 323, 325, 327, 329, 330, 328, 0, 331, 332,
	334, 333, 0, 0, 0, 0, 481, 482, 335, 336,
	0, 337, 338, 339, 0, 0, 341, 342, 343, 0,
	0, 344, 483, 0, 345, 0, 484, 346, 340, 347,
	348, 349, 350, 351, 352, 0, 353, 354, 485, 355,
	486, 356, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 487, 364, 365, 0, 366, 367, 368, 369, 370,
	0, 372, 373, 374, 371, 375, 376, 377, 378, 0,
	379, 0, 380, 381, 382, 383, 488, 384, 0, 385,
	389, 390, 391, 392, 393, 394, 395, 0, 402, 403,
	396, 398, 399, 400, 397, 401, 404, 405, 0, 406,
	386, 387, 407, 0, 408, 489, 409, 410, 0, 420,
	411, 412, 413, 388, 414, 418, 419, 415, 416, 417,
	490, 0, 422, 423, 421, 0, 424, 425, 426, 427,
	428, 267, 429, 268, 430, 0, 491, 492, 493, 494,
	0, 0, 431, 432, 495, 433, 496, 0, 434, 435,
	436, 0, 437, 438, 0, 0, 439, 440, 441, 442,
	444, 0, 445, 0, 443, 446, 447, 448, 497, 498,
	499, 206, 450, 449, 500, 0, 0, 0, 0, 451,
	452, 501, 453, 454, 455, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 218, 219, 220, 457, 458, 221,
	459, 222, 223, 460, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 461, 462, 463, 0, 231, 464,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 465, 466, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 467, 263, 264, 266,
	269, 265, 270, 271, 272, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 470, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 471, 0, 472, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 291, 473, 474, 475, 0, 0, 479,
	293, 0, 0, 0, 0, 292, 294, 301, 0, 0,
	295, 476, 297, 296, 298, 299, 300, 477, 0, 478,
	0, 302, 0, 0, 303, 304, 305, 0, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 480, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 320, 0, 321, 322, 324, 326, 323, 325,
	327, 329, 330, 328, 0, 331, 332, 334, 333, 0,
	0, 0, 0, 481, 482, 335, 336, 0, 337, 338,
	339, 0, 0, 341, 342, 343, 0, 0, 344, 483,
	0, 345, 0, 484, 346, 340, 347, 348, 349, 350,
	351, 352, 0, 353, 354, 485, 355, 486, 356, 0,
	357, 0, 358, 359, 360, 361, 362, 363, 487, 364,
	365, 0, 366, 367, 368, 369, 370, 0, 372, 373,
	374, 371, 375, 376, 377, 378, 0, 379, 0, 380,
	381, 382, 383, 488, 384, 0, 385, 537, 390, 391,
	392, 393, 394, 395, 0, 402, 403, 396, 398, 399,
	400, 397, 401, 404, 405, 0, 406, 386, 387, 407,
	0, 408, 489, 409, 410, 0, 420, 411, 412, 413,
	388, 414, 418, 419, 415, 416, 417, 490, 0, 422,
	423, 421, 0, 424, 425, 426, 427, 428, 267, 429,
	268, 430, 0, 491, 492, 493, 494, 0, 0, 431,
	432, 495, 433, 496, 0, 434, 435, 436, 0, 437,
	438, 0, 0, 439, 440, 441, 442, 444, 0, 445,
	0, 443, 446, 447, 448, 497, 498, 499, 206, 450,
	449, 500, 0, 0, 0, 0, 451, 452, 501, 453,
	454, 455, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 456, 0, 1799, 0,
	0, 218, 219, 220, 457, 458, 221, 459, 222, 223,
	460, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 461, 462, 463, 0, 231, 464, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 465, 466, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 467, 263, 264, 266, 269, 265, 270,
	271, 272, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 470, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 471, 0,
	472, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	291, 473, 474, 475, 0, 0, 479, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 476, 297,
	296, 298, 299, 300, 477, 0, 478, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 480, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 320,
	0, 321, 322, 324, 326, 323, 325, 327, 329, 330,
	328, 0, 331, 332, 334, 333, 0, 0, 0, 0,
	481, 482, 335, 336, 0, 337, 338, 339, 0, 0,
	341, 342, 343, 0, 0, 344, 483, 0, 345, 0,
	484, 346, 340, 347, 348, 349, 350, 351, 352, 0,
	353, 354, 485, 355, 486, 356, 0, 357, 0, 358,
	359, 360, 361, 362, 363, 487, 364, 365, 0, 366,
	367, 368, 369, 370, 0, 372, 373, 374, 371, 375,
	376, 377, 378, 0, 379, 0, 380, 381, 382, 383,
	488, 384, 0, 385, 389, 390, 391, 392, 393, 394,
	395, 0, 402, 403, 396, 398, 399, 400, 397, 401,
	404, 405, 0, 0, 386, 387, 407, 0, 408, 489,
	409, 410, 0, 420, 411, 412, 413, 388, 414, 418,
	419, 415, 416, 417, 490, 0, 422, 423, 421, 0,
	424, 425, 426, 427, 428, 267, 429, 268, 430, 0,
	491, 492, 493, 494, 0, 0, 431, 432, 495, 433,
	496, 0, 434, 435, 436, 0, 437, 438, 0, 0,
	439, 440, 441, 442, 444, 0, 445, 0, 443, 446,
	447, 448, 497, 498, 499, 206, 450, 449, 500, 0,
	0, 0, 0, 451, 452, 501, 453, 454, 455, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 456, 0, 0, 0, 0, 218, 219,
	220, 457, 458, 221, 459, 222, 223, 460, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 461, 462,
	463, 0, 231, 464, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	465, 466, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	467, 263, 264, 266, 269, 265, 270, 271, 272, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 470, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 471, 0, 472, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 291, 1251, 474,
	475, 0, 0, 479, 293, 0, 0, 0, 0, 292,
	294, 301, 0, 0, 295, 476, 297, 296, 298, 299,
	300, 477, 0, 478, 0, 302, 0, 0, 303, 304,
	305, 0, 306, 307, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 480, 0, 315, 316, 0,
	0, 317, 318, 0, 0, 319, 320, 0, 321, 322,
	324, 326, 323, 325, 327, 329, 330, 328, 0, 331,
	332, 334, 333, 0, 0, 0, 0, 481, 482, 335,
	336, 0, 337, 338, 339, 0, 0, 341, 342, 343,
	0, 0, 344, 483, 0, 345, 0, 484, 346, 340,
	347, 348, 349, 350, 351, 352, 0, 353, 354, 485,
	355, 486, 356, 0, 357, 0, 358, 359, 360, 361,
	362, 363, 487, 364, 365, 0, 366, 367, 368, 369,
	370, 0, 372, 373, 374, 371, 375, 376, 377, 378,
	0, 379, 0, 380, 381, 382, 383, 488, 384, 0,
	385, 389, 390, 391, 392, 393, 394, 395, 0, 402,
	403, 396, 398, 399, 400, 397, 401, 404, 405, 0,
	406, 386, 387, 407, 0, 408, 489, 409, 410, 0,
	420, 411, 412, 413, 388, 414, 418, 419, 415, 416,
	417, 490, 0, 422, 423, 421, 0, 424, 425, 426,
	427, 428, 267, 429, 268, 430, 0, 491, 492, 493,
	494, 0, 0, 431, 432, 495, 433, 496, 0, 434,
	435, 436, 0, 437, 438, 0, 0, 439, 440, 441,
	442, 444, 0, 445, 0, 443, 446, 447, 448, 497,
	498, 499, 206, 450, 449, 500, 0, 0, 0, 0,
	451, 452, 501, 453, 454, 455, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	456, 0, 0, 0, 0, 218, 219, 220, 457, 458,
	221, 459, 222, 223, 460, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 461, 462, 463, 0, 231,
	464, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 465, 466, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 467, 263, 264,
	266, 269, 265, 270, 271, 272, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 470, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 471, 0, 472, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 291, 1193, 474, 475, 0, 0,
	479, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 476, 297, 296, 298, 299, 300, 477, 0,
	478, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 480, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 320, 0, 321, 322, 324, 326, 323,
	325, 327, 329, 330, 328, 0, 331, 332, 334, 333,
	0, 0, 0, 0, 481, 482, 335, 336, 0, 337,
	338, 339, 0, 0, 341, 342, 343, 0, 0, 344,
	483, 0, 345, 0, 484, 346, 340, 347, 348, 349,
	350, 351, 352, 0, 353, 354, 485, 355, 486, 356,
	0, 357, 0, 358, 359, 360, 361, 362, 363, 487,
	364, 365, 0, 366, 367, 368, 369, 370, 0, 372,
	373, 374, 371, 375, 376, 377, 378, 0, 379, 0,
	380, 381, 382, 383, 488, 384, 0, 385, 389, 390,
	391, 392, 393, 394, 395, 0, 402, 403, 396, 398,
	399, 400, 397, 401, 404, 405, 0, 406, 386, 387,
	407, 0, 408, 489, 409, 410, 0, 420, 411, 412,
	413, 388, 414, 418, 419, 415, 416, 417, 490, 0,
	422, 423, 421, 0, 424, 425, 426, 427, 428, 267,
	429, 268, 430, 0, 491, 492, 493, 494, 0, 0,
	431, 432, 495, 433, 496, 0, 434, 435, 436, 0,
	437, 438, 0, 0, 439, 440, 441, 442, 444, 0,
	445, 0, 443, 446, 447, 448, 497, 498, 499, 206,
	450, 449, 500, 0, 0, 0, 0, 451, 452, 501,
	453, 454, 455, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 456, 0, 0,
	0, 0, 218, 219, 220, 457, 458, 221, 459, 222,
	223, 460, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 461, 462, 463, 0, 231, 464, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 465, 466, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 467, 263, 264, 266, 269, 265,
	270, 271, 272, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 470, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 471,
	0, 472, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 291, 473, 474, 475, 0, 0, 479, 293, 0,
	0, 0, 0, 292, 294, 301, 0, 0, 295, 476,
	297, 296, 298, 299, 300, 477, 0, 478, 0, 302,
	0, 0, 303, 304, 305, 0, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 480,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	320, 0, 321, 322, 324, 326, 323, 325, 327, 329,
	330, 328, 0, 331, 332, 334, 333, 0, 0, 0,
	0, 481, 482, 335, 336, 0, 337, 338, 339, 0,
	0, 341, 342, 343, 0, 0, 344, 483, 0, 345,
	0, 484, 346, 340, 347, 348, 349, 350, 351, 352,
	0, 353, 354, 485, 355, 486, 356, 0, 357, 0,
	358, 359, 360, 361, 362, 363, 487, 956, 365, 0,
	366, 367, 368, 369, 370, 0, 372, 373, 374, 371,
	375, 376, 377, 378, 0, 379, 0, 380, 381, 382,
	383, 488, 384, 0, 385, 389, 390, 391, 392, 393,
	394, 395, 0, 402, 403, 396, 398, 399, 400, 397,
	401, 404, 405, 0, 406, 386, 387, 407, 0, 408,
	489, 409, 410, 0, 420, 411, 412, 413, 388, 414,
	418, 419, 415, 416, 417, 490, 0, 422, 423, 421,
	0, 424, 425, 426, 427, 428, 267, 429, 268, 430,
	0, 491, 492, 493, 494, 0, 0, 431, 432, 495,
	433, 496, 0, 434, 435, 436, 0, 437, 438, 0,
	0, 439, 440, 441, 442, 444, 0, 445, 0, 443,
	446, 447, 448, 497, 498, 499, 206, 450, 449, 500,
	0, 0, 0, 0, 451, 452, 501, 453, 454, 455,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 456, 0, 0, 0, 0, 218,
	219, 220, 457, 458, 221, 459, 222, 223, 460, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 461,
	462, 463, 0, 231, 464, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 465, 466, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 467, 263, 264, 266, 269, 265, 270, 271, 272,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 470, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 471, 0, 472, 0,
	0, 284, 285, 286, 287, 288, 289, 290, 291, 473,
	474, 475, 0, 0, 479, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 476, 297, 296, 298,
	299, 300, 477, 0, 478, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 480, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 320, 0, 321,
	322, 324, 326, 323, 325, 327, 329, 330, 328, 0,
	331, 332, 334, 333, 0, 0, 0, 0, 481, 482,
	335, 336, 0, 337, 338, 339, 0, 0, 341, 342,
	343, 0, 0, 344, 483, 0, 345, 0, 484, 346,
	340, 347, 348, 0, 350, 351, 352, 0, 353, 354,
	485, 355, 486, 356, 0, 357, 0, 358, 359, 360,
	0, 362, 363, 487, 364, 365, 0, 366, 367, 368,
	369, 370, 0, 372, 373, 374, 371, 375, 376, 377,
	378, 0, 379, 0, 380, 381, 382, 383, 488, 0,
	0, 385, 389, 390, 391, 392, 393, 394, 395, 0,
	402, 403, 396, 398, 399, 400, 397, 401, 404, 405,
	0, 406, 386, 387, 407, 0, 408, 489, 409, 410,
	0, 420, 411, 412, 413, 388, 414, 418, 419, 415,
	416, 417, 490, 0, 422, 423, 421, 0, 424, 425,
	426, 427, 428, 267, 429, 268, 430, 0, 491, 492,
	493, 494, 0, 0, 431, 432, 495, 433, 496, 0,
	434, 435, 436, 0, 437, 438, 0, 0, 439, 440,
	441, 442, 444, 0, 445, 0, 443, 446, 447, 448,
	497, 498, 499, 0, 450, 449, 500, 0, 0, 0,
	0, 451, 452, 501, 453, 454, 455, 1407, 1408, 0,
	1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 1410, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1409,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 1407, 1408, 0, 1440, 1441, 1442, 1450,
	1451, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	1433, 1434, 1435, 0, 0, 1409, 0, 0, 0, 1415,
	0, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 1457, 0, 0,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 1432, 1433, 1434, 1435, 0,
	0, 0, 0, 0, 1445, 1415, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1447, 1457, 0, 0, 1437, 1438, 1439, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 0, 0, 1424, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 1436, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 1407, 1408, 0, 1440, 1441, 1442,
	1450, 1451, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 1448, 0, 0, 0, 0,
	1410, 1446, 0, 1456, 1421, 1422, 1428, 1427, 1423, 1449,
	0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	0, 0, 0, 0, 0, 0, 1409, 2720, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 1410, 1446, 0, 1456,
	1421, 1422, 1428, 1427, 1423, 1449, 0, 1420, 1418, 1419,
	1411, 1412, 1413, 1414, 1416, 1417, 1432, 1433, 1434, 1435,
	0, 0, 1409, 2431, 0, 0, 1415, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 1457, 0, 0, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 1454,
	0, 0, 0, 0, 0, 0, 1424, 1425, 0, 0,
	0, 0, 1432, 1433, 1434, 1435, 0, 0, 0, 0,
	0, 1445, 1415, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 1447,
	1457, 0, 0, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 1424, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 1436, 0, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 1448, 0, 0, 0, 0, 1410, 1446, 0,
	1456, 1421, 1422, 1428, 1427, 1423, 1449, 0, 1420, 1418,
	1419, 1411, 1412, 1413, 1414, 1416, 1417, 0, 0, 0,
	0, 0, 0, 1409, 2430, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 1407, 1408, 0,
	1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 1410, 1446, 0, 1456, 1421, 1422, 1428,
	1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412, 1413,
	1414, 1416, 1417, 1432, 1433, 1434, 1435, 0, 0, 1409,
	2427, 0, 0, 1415, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 1457, 0, 0, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 1454, 0, 0, 0,
	0, 0, 0, 1424, 1425, 0, 0, 0, 0, 1432,
	1433, 1434, 1435, 0, 0, 0, 0, 0, 1445, 1415,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1447, 1457, 0, 0,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	1436, 0, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 1407, 1408,
	0, 1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 1448,
	0, 0, 0, 0, 1410, 1446, 0, 1456, 1421, 1422,
	1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412,
	1413, 1414, 1416, 1417, 0, 0, 0, 0, 0, 0,
	1409, 2426, 0, 0, 0, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 1407, 1408, 0, 1440, 1441, 1442,
	1450, 1451, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	1410, 1446, 0, 1456, 1421, 1422, 1428, 1427, 1423, 1449,
	0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	1432, 1433, 1434, 1435, 0, 0, 1409, 2425, 0, 0,
	1415, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1457, 0,
	0, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 0, 0,
	1424, 1425, 0, 0, 0, 0, 1432, 1433, 1434, 1435,
	0, 0, 0, 0, 0, 1445, 1415, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 1447, 1457, 0, 0, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 1454,
	0, 0, 0, 0, 0, 0, 1424, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 1436, 0, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 1455, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 1407, 1408, 0, 1440, 1441,
	1442, 1450, 1451, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 1448, 0, 0, 0,
	0, 1410, 1446, 0, 1456, 1421, 1422, 1428, 1427, 1423,
	1449, 0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416,
	1417, 0, 0, 0, 0, 0, 0, 1409, 1995, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 1410, 1446, 0,
	1456, 1421, 1422, 1428, 1427, 1423, 1449, 0, 1420, 1418,
	1419, 1411, 1412, 1413, 1414, 1416, 1417, 1432, 1433, 1434,
	1435, 3268, 0, 1409, 0, 0, 0, 1415, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 1457, 0, 0, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 1424, 1425, 0,
	0, 0, 0, 1432, 1433, 1434, 1435, 0, 0, 0,
	0, 0, 1445, 1415, 0, 0, 0, 0, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1447, 1457, 0, 0, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 1454, 0, 0, 0,
	0, 0, 0, 1424, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 1436, 0, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 1448, 0, 0, 0, 0, 1410, 1446,
	0, 1456, 1421, 1422, 1428, 1427, 1423, 1449, 0, 1420,
	1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417, 0, 0,
	0, 0, 3264, 0, 1409, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 1407, 1408,
	0, 1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 1410, 1446, 0, 1456, 1421, 1422,
	1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412,
	1413, 1414, 1416, 1417, 1432, 1433, 1434, 1435, 3198, 0,
	1409, 0, 0, 0, 1415, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 1457, 0, 0, 1437, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 1454, 0, 0,
	0, 0, 0, 0, 1424, 1425, 0, 0, 0, 0,
	1432, 1433, 1434, 1435, 0, 0, 0, 0, 0, 1445,
	1415, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 1447, 1457, 0,
	0, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 0, 0,
	1424, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 1436, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 1407,
	1408, 0, 1440, 1441, 1442, 1450, 1451, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	1448, 0, 0, 0, 0, 1410, 1446, 0, 1456, 1421,
	1422, 1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411,
	1412, 1413, 1414, 1416, 1417, 0, 0, 0, 0, 3197,
	0, 1409, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 1407, 1408, 0, 1440, 1441,
	1442, 1450, 1451, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 1410, 1446, 0, 1456, 1421, 1422, 1428, 1427, 1423,
	1449, 0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416,
	1417, 1432, 1433, 1434, 1435, 3106, 0, 1409, 0, 0,
	0, 1415, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 1457,
	0, 0, 1437, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 1454, 0, 0, 0, 0, 0,
	0, 1424, 1425, 0, 0, 0, 0, 1432, 1433, 1434,
	1435, 0, 0, 0, 0, 0, 1445, 1415, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 1447, 1457, 0, 0, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 1424, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 1436, 0,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 1407, 1408, 0, 1440,
	1441, 1442, 1450, 1451, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 1448, 0, 0,
	0, 0, 1410, 1446, 0, 1456, 1421, 1422, 1428, 1427,
	1423, 1449, 0, 1420, 1418, 1419, 1411, 1412, 1413, 1414,
	1416, 1417, 0, 0, 0, 0, 3024, 0, 1409, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1410, 1446,
	0, 1456, 1421, 1422, 1428, 1427, 1423, 1449, 0, 1420,
	1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417, 1432, 1433,
	1434, 1435, 2978, 0, 1409, 0, 0, 0, 1415, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 1457, 0, 0, 1437,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 1454, 0, 0, 0, 0, 0, 0, 1424, 1425,
	0, 0, 0, 0, 1432, 1433, 1434, 1435, 0, 0,
	0, 0, 0, 1445, 1415, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 1447, 1457, 0, 0, 1437, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 1454, 0, 0,
	0, 0, 0, 0, 1424, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 1436, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 1455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 1407, 1408, 0, 1440, 1441, 1442, 1450,
	1451, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 1448, 0, 0, 0, 0, 1410,
	1446, 0, 1456, 1421, 1422, 1428, 1427, 1423, 1449, 0,
	1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417, 0,
	0, 0, 0, 2977, 0, 1409, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 1407,
	1408, 0, 1440, 1441, 1442, 1450, 1451, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 1410, 1446, 0, 1456, 1421,
	1422, 1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411,
	1412, 1413, 1414, 1416, 1417, 1432, 1433, 1434, 1435, 2976,
	0, 1409, 0, 0, 0, 1415, 0, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 1457, 0, 0, 1437, 1438, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 0, 0, 1424, 1425, 0, 0, 0,
	0, 1432, 1433, 1434, 1435, 0, 0, 0, 0, 0,
	1445, 1415, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 1447, 1457,
	0, 0, 1437, 1438, 1439, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 1454, 0, 0, 0, 0, 0,
	0, 1424, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 1436, 0, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 1448, 0, 0, 0, 0, 1410, 1446, 0, 1456,
	1421, 1422, 1428, 1427, 1423, 1449, 0, 1420, 1418, 1419,
	1411, 1412, 1413, 1414, 1416, 1417, 0, 0, 0, 0,
	2942, 0, 1409, 0, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 1407, 1408, 0, 1440,
	1441, 1442, 1450, 1451, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 1410, 1446, 0, 1456, 1421, 1422, 1428, 1427,
	1423, 1449, 0, 1420, 1418, 1419, 1411, 1412, 1413, 1414,
	1416, 1417, 1432, 1433, 1434, 1435, 2755, 0, 1409, 0,
	0, 0, 1415, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	1457, 0, 0, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 1424, 1425, 0, 0, 0, 0, 1432, 1433,
	1434, 1435, 0, 0, 0, 0, 0, 1445, 1415, 3357,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 1447, 1457, 0, 0, 1437,
	1438, 1439, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 1454, 0, 0, 0, 0, 0, 0, 1424, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 1436,
	0, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 1407, 1408, 0,
	1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 1448, 0,
	0, 2353, 0, 1410, 1446, 0, 1456, 1421, 1422, 1428,
	1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412, 1413,
	1414, 1416, 1417, 0, 0, 2382, 0, 0, 0, 1409,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2354, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 1421, 1422, 1428, 1427, 1423, 1449, 0,
	1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417, 1432,
	1433, 1434, 1435, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1407, 1408, 0, 1440,
	1441, 1442, 1450, 1451, 1452, 0, 1447, 1457, 0, 0,
	1437, 1438, 1439, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 1456, 0, 0, 0, 0,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 0, 0, 0, 1409, 0,
	0, 0, 0, 0, 1445, 0, 1429, 0, 0, 0,
	0, 0, 1430, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 1433,
	1434, 1435, 0, 0, 0, 0, 0, 0, 1415, 0,
	2470, 0, 0, 2469, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 1447, 1457, 0, 0, 1437,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1453, 1454, 0, 0, 0, 0, 0, 0, 1424, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 1421, 1422, 1428, 1427, 1423, 1449,
	0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2085, 0, 0, 1431, 0, 0, 0, 1407, 1408, 0,
	1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 1448, 0,
	2084, 0, 0, 1410, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1409,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 1407, 1408, 0, 1440, 1441, 1442, 1450,
	1451, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1410,
	1446, 0, 1456, 1421, 1422, 1428, 1427, 1423, 1449, 0,
	1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417, 1432,
	1433, 1434, 1435, 0, 0, 1409, 0, 0, 0, 1415,
	0, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 1457, 0, 0,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 1432, 1433, 1434, 1435, 0,
	0, 0, 0, 0, 1445, 1415, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1447, 1457, 0, 0, 1437, 1438, 1439, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1453, 1454, 0,
	0, 0, 0, 0, 0, 1424, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 1436, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 799, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 1407, 1408, 0, 1440, 1441, 1442,
	1450, 1451, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 1448, 0, 0, 0, 0,
	1410, 1446, 0, 1456, 1421, 1422, 1428, 1427, 1423, 1449,
	0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	0, 0, 0, 0, 0, 0, 1409, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 1410, 1446, 0, 1456,
	1421, 1422, 1428, 1427, 1423, 1449, 0, 1420, 1418, 1419,
	1411, 1412, 1413, 1414, 1416, 1417, 1432, 1433, 1434, 1435,
	0, 0, 1409, 0, 0, 0, 1415, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 1457, 0, 0, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 1454,
	0, 0, 0, 0, 0, 0, 1424, 1425, 0, 0,
	0, 0, 1432, 1433, 1434, 1435, 0, 0, 0, 0,
	0, 1445, 1415, 0, 0, 0, 0, 2476, 0, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 1447,
	1457, 0, 0, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 1454, 0, 0, 0, 0,
	0, 0, 1424, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 1436, 0, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2743, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 1448, 0, 2471, 0, 0, 1410, 1446, 0,
	1456, 1421, 1422, 1428, 1427, 1423, 1449, 0, 1420, 1418,
	1419, 1411, 1412, 1413, 1414, 1416, 1417, 0, 0, 0,
	0, 0, 0, 1409, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 1407, 1408, 0,
	1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 1410, 1446, 0, 1456, 1421, 1422, 1428,
	1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412, 1413,
	1414, 1416, 1417, 1432, 1433, 1434, 1435, 0, 0, 1409,
	0, 0, 0, 1415, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 1457, 0, 0, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 1454, 0, 0, 0,
	0, 0, 0, 1424, 1425, 0, 0, 0, 0, 1432,
	1433, 1434, 1435, 0, 0, 0, 0, 0, 1445, 1415,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1447, 1457, 0, 0,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	1436, 0, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 2438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 1407, 1408,
	0, 1440, 1441, 1442, 1450, 1451, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 1448,
	0, 2424, 0, 0, 1410, 1446, 0, 1456, 1421, 1422,
	1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412,
	1413, 1414, 1416, 1417, 0, 0, 0, 0, 0, 0,
	1409, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 1407, 1408, 0, 1440, 1441, 1442,
	1450, 1451, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	1410, 1446, 0, 1456, 1421, 1422, 1428, 1427, 1423, 1449,
	0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417,
	1432, 1433, 1434, 1435, 0, 0, 1409, 0, 0, 0,
	1415, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 1457, 0,
	0, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 0, 0, 0, 0, 0,
	1424, 1425, 0, 0, 0, 0, 1432, 1433, 1434, 1435,
	0, 0, 0, 0, 0, 1445, 1415, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 1447, 1457, 0, 0, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 1454,
	0, 0, 0, 0, 0, 0, 1424, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 1436, 0, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 1455, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 1407, 1408, 0, 1440, 1441,
	1442, 1450, 1451, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 1448, 0, 0, 0,
	0, 1410, 1446, 0, 1456, 1421, 1422, 1428, 1427, 1423,
	1449, 0, 1420, 1418, 1419, 1411, 1412, 1413, 1414, 1416,
	1417, 0, 0, 0, 0, 0, 0, 1409, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1410, 1446, 0,
	1456, 1421, 1422, 1428, 1427, 1423, 1449, 0, 1420, 1418,
	1419, 1411, 1412, 1413, 1414, 1416, 1417, 1432, 1433, 1434,
	1435, 0, 0, 1409, 0, 0, 0, 1415, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 1457, 0, 0, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 0, 0, 0, 0, 0, 1424, 1425, 0,
	0, 0, 0, 1432, 1433, 1434, 1435, 0, 0, 0,
	0, 0, 1445, 1415, 0, 0, 0, 0, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1447, 1457, 0, 0, 1437, 1438, 1439, 0, 0, 0,
	0, 1407, 1408, 0, 1440, 1441, 1442, 1450, 1451, 1452,
	0, 0, 0, 0, 0, 1453, 1454, 0, 0, 0,
	0, 0, 0, 1424, 1425, 0, 0, 1410, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 1436, 0, 1430, 0, 0, 0,
	0, 0, 0, 1409, 0, 0, 0, 0, 0, 0,
	0, 1429, 1431, 0, 1455, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 1432, 1433, 1434, 1435, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 1457, 0, 1448, 1437, 1438, 1439, 0, 0, 1446,
	0, 0, 1421, 1422, 1428, 1427, 1423, 1449, 0, 1420,
	1418, 1419, 1411, 1412, 1413, 1414, 1416, 1417, 0, 0,
	0, 0, 0, 1424, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 1421, 1422,
	1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412,
	1413, 1414, 1416, 1417, 0, 1621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1633, 1615, 1622, 1605, 1643, 1642, 1431, 0,
	1607, 1606, 0, 0, 0, 0, 0, 0, 1653, 1654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1644, 0,
	1640, 1639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1637, 1635, 1636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 1421, 1422,
	1428, 1427, 1423, 1449, 0, 1420, 1418, 1419, 1411, 1412,
	1413, 1414, 1416, 1417, 1617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1626, 1620, 1628, 1630, 1631,
	1632, 1627, 0, 1625, 0, 0, 0, 0, 0, 0,
	0, 0, 1649, 1650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1641, 0,
	0, 0, 1618, 0, 1619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1634, 0, 0, 0, 1602, 1600, 1601, 1604,
	1603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1610, 1611, 1613, 1614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1608, 0, 1645, 1646, 1647,
	1648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1616, 0, 0, 0, 0,
	1623, 1651,
}
var sqlPact = [...]int{

	8751, -1000, -1000, -1000, -1000, -1000, -1000, 244, 242, 237,
	235, 221, 213, 205, 204, 203, -1000, -1000, -1000, 193,
	-1000, -1000, 191, -1000, 190, 189, 188, 187, -1000, 179,
	178, -1000, -1000, -1000, -1000, 177, 176, 175, 48220, 1549,
	57685, 49453, 1612, 2058, 42869, 57272, 42456, 56859, 56446, 174,
	-1000, 56033, 166, 164, 163, -1000, -1000, 156, 3019, 34579,
	149, 148, 147, 2097, 146, 141, -1000, 139, -1000, 6390,
	1170, -1000, 138, 133, -1000, 6074, 1110, 49040, 2082, 128,
	122, 34165, 2074, -1000, -1000, 1473, -1000, -1000, 121, 120,
	119, 110, 109, 108, 104, 98, 97, -1000, 96, 93,
	92, 91, 90, 87, 85, 84, 83, 80, 79, 76,
	74, 72, 71, 70, -1000, 8367, 1401, 1283, 1276, 1267,
	1262, 1257, 777, 69, 68, 65, 64, 60, 57, -1000,
	-1000, 56, 55, 52, 51, -1000, 50, 46, 184, 39,
	37, 22, 17, 12, 1628, 1981, 1172, 542, 16063, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61755,
	58092, 11, -138, -99, -1000, 2376, 882, 28788, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 455, -1000,
	-1000, -1000, 322, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1472, 633, -1000, -1000, -1000, 55620, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 58092, -1000, 1513, -18,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 632, -1000, 1510,
	134, 1470, -1000, -1000, -1000, -1000, -1000, 58092, -1000, -1000,
	2650, 2649, 1461, 631, 55213, -1000, 1225, -1000, 732, 18692,
	-1000, 975, -1000, 18692, 321, -1000, -1000, -1000, -1000, -1000,
	42043, 13013, 41630, 41217, 38338, 54800, 12590, 47813, 995, -1000,
	-1000, -1000, -1000, -1000, 0, 35800, 58092, -1000, 316, -1000,
	-1000, -1000, -1000, -1000, -1000, 24939, 495, 24490, 700, 24041,
	689, -1000, -1000, -1000, -1000, 2648, 2646, 870, 2645, 2313,
	61348, 1360, 2643, 1252, 948, 818, 2642, 2640, 2638, 2635,
	2634, 2633, 2631, 1115, 54387, 2065, 37915, 37492, 48220, 48220,
	1875, 53974, -1000, -1000, 1064, 1035, -1000, -1000, -1000, -1000,
	2149, 2057, 2029, 47400, -1000, -1000, 2630, 2628, 2627, 2626,
	2625, 60941, 1352, 2623, 1790, 2622, 2618, 2616, 2615, 2613,
	2612, 2611, 2610, 2607, -1000, 46987, 46574, 46161, 45748, 53561,
	37069, 36646, -1000, -1000, -1000, 30436, 5317, 53148, 31284, 48220,
	-1000, -1000, 25375, -100, -1000, -1000, -1000, 2017, -1000, 25375,
	-100, -1000, 2063, 1422, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1770, 1236, 2513, 36223, 1519, 1083, 2142, 2604, 1726,
	2141, 2135, 2128, 2127, 2113, 2603, 1223, 2602, 1142, 2601,
	1175, 2109, 2530, 1559, 40804, 2600, 2599, 2344, 2099, 2016,
	-1000, -1000, -1000, -1000, 1132, -1000, -1000, -1000, 43276, -1000,
	-1000, 953, -1000, -1000, 953, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 993, 60127, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1340,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1784, -1000,
	1459, -1000, -1000, 2597, 1981, 1788, 2355, 2355, 2355, 2391,
	437, 434, -1000, 184, -1000, -1000, 68143, -1000, -1000, 25375,
	25375, 25375, 25375, 25375, 1415, -1000, 630, -1000, -1000, 655,
	-1000, 629, 577, -1000, -1000, -1000, -1000, -1000, -1000, 626,
	2532, -1000, 896, -1000, -1000, -1000, -1000, 2477, -1000, 15178,
	-1000, -1000, -1000, 423, 624, 25375, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 284, 736, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 567, 1331,
	561, 561, 561, -1000, -1000, 813, -1000, -1000, -1000, 348,
	560, 314, 555, -1000, -1000, -1000, -1000, 2046, 623, 622,
	-1000, 619, 616, 615, -1000, -1000, -1000, 614, 613, 608,
	606, 605, 603, 602, 601, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 811, -1000, 597, 596, 592, 591, 590, 589,
	588, 585, 582, -1000, -1000, -8, 58092, -1000, 455, -8,
	-1000, -1000, 581, -1000, 19128, 19128, 19128, -1000, -1000, 1507,
	25375, -1000, 1905, -1000, 411, -218, 704, 29610, -1000, 27947,
	704, 494, 32519, -1000, 2015, -1000, -1000, 578, 275, -1000,
	-1000, 2011, 58092, 13434, 58092, 48220, 48220, -1000, 2275, 25375,
	-1000, -1000, 38759, 35393, 58092, 48627, 2430, 68971, 35393, 58092,
	2038, -1000, -1000, -1000, 58092, -1000, 25375, -1000, 2426, 1144,
	-74, -1000, -1000, -1000, -1000, -1000, -1000, 1766, 1831, 903,
	1645, 1389, -1000, 18692, 2306, -1000, -1000, -1000, 274, 13434,
	-1000, 1756, 2253, 1039, -1000, 1643, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1301, 2251, -1000, 1651, 2242, 1269,
	-1000, -1000, 781, 2236, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1560, -1000, -1000, 2341, -1000, -1000, 2119,
	2235, -175, -1000, -1000, 38759, 35800, -28, -1000, -1000, -102,
	-1000, 12167, 68143, -1000, -1000, -1000, 68143, 770, -1000, -1000,
	2230, -1000, 68143, 769, -1000, -1000, 2229, -1000, -1000, -1000,
	2596, -1000, 2594, 1712, 2593, 2592, 2591, -1000, 1279, 1324,
	2590, -1000, 2589, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45335, 44922, 817, -1000, 1506, -1000, -1000, 44509, 775, 1698,
	-1000, -1000, 1697, -1000, 837, -1000, 2588, 52735, 1886, 775,
	1696, -1000, -1000, -1000, -1000, -1000, 48220, -1000, 48220, -1000,
	48220, -1000, 1152, -1000, 60534, -218, -1000, -1000, -1000, -1000,
	-1000, 2213, 2586, 2585, 2584, -1000, 58092, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 159, 2212, -1000, -1000,
	159, 2201, -1000, 159, 2195, -1000, 157, 2194, -1000, -1000,
	1536, 2192, -1000, -137, 2189, -1000, -1000, -137, 2188, -1000,
	35, -1000, -1000, -1000, 882, -1000, 30023, 52322, 38759, 745,
	645, 68143, -1000, 38759, 68143, -1000, 44509, -1000, 51909, 44102,
	-1000, -1000, 1079, 1812, -1000, -1000, -1000, -1000, 38759, 38759,
	-1000, 51496, -1000, -1000, -1000, 1449, 2345, 48220, -1000, -1000,
	2036, -1000, 34986, 48220, -1000, 48220, -1000, 48220, -1000, 48220,
	-1000, 48220, -1000, -1000, -1000, -1000, -1000, 2226, 1281, 1259,
	-1000, 58092, -1000, -1000, 2354, 58092, -1000, -1000, -1000, 1761,
	-1000, -1000, -1000, -1000, 48220, -1000, -1000, -1000, -1000, -1000,
	-1000, 2030, -1000, 1231, -1000, 1077, -1000, -1000, 170, -1000,
	-1000, -74, -1000, 60127, -1000, -1000, 1981, 1788, -1000, 58092,
	-1000, -1000, -1000, 1981, 1598, 1852, 23592, 1832, 25375, 184,
	-1000, -1000, 184, 184, 18256, -1000, -1000, 68971, 68971, 13434,
	1010, 25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375,
	25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375,
	25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375, 25375,
	25375, 25375, 25375, 25375, 25375, 25375, 1622, 25375, 989, 25375,
	25375, 25375, 25375, 1517, -1000, -1000, 1465, 491, 1433, -1000,
	2497, 2497, 2497, 68530, 68530, 543, 2579, 655, -1000, 25375,
	-1000, -100, 25375, 13857, -1000, 2521, 1070, -1000, -1000, 434,
	8139, 1705, -1000, 433, 14306, -1000, -1000, -1000, 15178, 577,
	23143, 25375, 799, 68143, 11746, 2092, 1937, -1000, 2520, -1000,
	-1000, 2477, -1000, -1000, -1000, -1000, 2477, 1009, 1001, 2518,
	-1000, 2477, 2477, 576, 767, 765, 760, 728, 723, 25375,
	25375, 25375, 25375, 25375, 25375, 25375, 25375, -1000, 22707, 22258,
	21809, 26683, 21360, 25375, 15614, 20911, 20462, 58092, -8, 2422,
	25375, 130, -1000, 66906, -1000, 130, 130, 574, 31, 68143,
	1819, 1851, 29199, 1924, 1424, 1424, 1424, -1000, 573, 648,
	704, 9204, 49860, 1436, 704, 704, 265, 315, 432, 27536,
	1905, 49860, -1000, -1000, 48220, 572, 13857, 13434, 1091, 25,
	254, 1830, 1829, 1828, -1000, 1205, 23, 745, 988, -12,
	-1000, 186, 5, -1000, 1058, -1000, -1000, -1000, -1000, 132,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 810, 571, 570, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 567, 1331, 561,
	561, 561, -1000, -1000, -1000, 348, 560, 314, 555, -1000,
	-1000, -1000, -1000, -1000, -1000, 2010, -102, 48627, 731, 4,
	875, -74, -1000, 953, -1000, 1627, -1000, -1000, -1000, -1000,
	-1000, -1000, 991, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2531, -1000, 2504, -1000, -1000, 2516, -10, -1000, -1000, 13434,
	-1000, -80, 1235, -1000, 40391, 2333, 2331, 2332, 1123, -1000,
	1096, 2389, 43276, 2405, 62, -1000, 2009, -1000, -1000, 729,
	1071, 987, 43276, 1651, -1000, 68971, -1000, 1879, 2384, 1114,
	1109, 1114, 1114, 1095, -1000, 43276, 986, 1388, 38759, -1000,
	984, -1000, -82, 2387, 28, -1000, 2006, 981, -1000, -1000,
	48220, 13434, 692, -28, 35800, 58092, 250, -1000, 25375, -100,
	25375, -100, -1000, -1000, 2187, -1000, -1000, -1000, 2559, 1311,
	1785, -1000, -1000, -1000, 545, 1692, 1651, 1690, -1000, -1000,
	43689, 2001, 58092, 1833, -35, 48220, -1000, -1000, 1383, -1000,
	2186, 2185, 584, 2558, -1000, 1504, 1688, -1000, -1000, -1000,
	59720, 1019, 2182, 791, 185, 2419, 185, 33341, -1000, 58092,
	-1000, 58092, -1000, -1000, -1000, 2556, -1000, 48220, -1000, -1000,
	48220, -1000, 48220, -1000, 48220, -1000, 48220, 48220, -1000, 58092,
	38759, 38759, 38759, 974, 39577, -1, 431, -1000, 51089, 58092,
	846, 39984, -209, 745, 692, -1000, 692, -1000, 48220, 2028,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 58092,
	-1000, 58092, -1000, -1000, -1000, -1000, -1000, -1000, 1166, -1000,
	2022, -1000, 2021, -1000, 67, -1000, -1000, -1000, -1000, 1417,
	48220, 48220, 48220, -1000, 43276, -1000, -1000, 1981, -1000, -1000,
	-1000, -1000, -1000, 68143, -1000, 470, -1000, -1000, 68143, 1282,
	1842, -1000, 1842, -33, -1000, 66446, 1807, 48220, -1000, -1000,
	-1000, -1000, -1000, 727, 904, 904, 1022, 1022, 1022, 1022,
	2439, 3233, 3328, 1030, 239, 239, 239, 239, 239, 239,
	239, 239, 209, 317, 317, 209, 209, 209, 209, 209,
	317, 317, 317, 239, 239, 239, 68530, 68454, 5436, 25375,
	25375, 979, 1387, 491, 5423, 25375, 4427, 4427, 4427, 4427,
	-1000, 1541, -1000, -1000, -1000, -1000, 2000, 544, 26683, 26683,
	-1000, -1000, -1000, -1000, 14742, 25375, -1000, -1000, -1000, -1000,
	20013, -1000, -1000, 66059, -247, 430, -190, -6, -1000, 25375,
	25375, 25375, 429, -1000, 427, -1000, -1000, 978, -1000, 971,
	950, 944, -1000, 539, 249, 25375, 58092, -1000, 63737, 644,
	-191, -1000, -14, 1082, -1000, 25375, 248, -1000, 1420, 538,
	535, 426, -19, 425, 725, 721, 418, 417, 416, 25375,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	68067, 63426, 63350, 63039, 7498, 62963, 62652, -20, 415, -1000,
	1997, -190, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 414,
	-1000, 413, -1000, 67756, -190, 409, 4717, -1000, 26683, 26683,
	26683, -1000, 407, -1000, 66595, -1000, 67680, 19577, 19577, 19577,
	406, 67369, 25375, -190, -31, -1000, -40, -1000, -1000, 532,
	-44, 791, 19128, 28374, 13434, -1000, 791, 791, 25375, -1000,
	25375, 29199, 1818, -1000, -1000, -1000, 1814, 1851, 29199, -1000,
	-1000, -1000, -1000, 49860, 627, 704, 49860, -1000, 2477, 1952,
	-1000, -1000, -1000, 58092, 455, -1000, 49860, 49860, 13434, 704,
	-1000, 388, 31695, -6, 247, -1000, -1000, 13434, 1871, 1871,
	1871, -1000, -1000, 1992, 58092, 2456, -1000, 1377, -1000, 68971,
	-1000, 653, 973, -1000, 2510, 530, -1000, 2477, 2477, 58092,
	105, 18692, -1000, 953, -1000, -1000, 1184, -1000, 1317, -1000,
	886, -1000, -1000, -1000, 18692, -1000, 1656, 48220, 58092, 58092,
	-1000, -1000, 1682, 59313, 1679, 68971, 58092, -1000, -1000, 529,
	528, 1803, 1795, 58092, 58092, 58906, 58499, 58092, 1380, 25375,
	1604, 1372, -100, -1000, -100, 527, 998, 48220, 48220, 1258,
	-1000, -1000, -1000, -1000, -1000, 48220, -1000, -1000, 2506, -1000,
	1114, -1000, -1000, -1000, 1114, 1651, 1238, 48220, 38759, 779,
	58092, 1390, -100, -1000, -100, 525, 13434, 1326, -1000, 1908,
	-1000, -1000, -1000, 11325, 68143, -1000, 68143, -1000, 58092, -1000,
	776, 58092, 39984, 766, 2179, -1000, 1651, 2174, 455, -1000,
	-1000, 32930, -102, 745, 38759, 48220, -35, 38759, 38759, 38759,
	2555, 524, 2554, -1000, 48220, 2169, 1501, 1674, 2140, 694,
	58092, 1440, -1000, 25375, 1411, -1000, 32108, 832, 58092, 1226,
	101, -1000, -1000, -1000, 54, 58092, -1000, 2553, -1000, -1000,
	159, 159, 159, -1000, 157, 1536, -1000, -137, -137, -1000,
	-1000, 974, 745, -65, 523, -1000, 703, 702, 30863, 38759,
	-46, -1000, -1000, -1000, -1000, -1000, 48220, 58092, 667, 1864,
	58092, -1000, 745, -1000, -1000, 778, -1000, 1055, -102, -102,
	-1000, 1158, 1145, 58092, -1000, 13434, 58092, 48220, 13434, 48220,
	-1000, -1000, -1000, -1000, -1000, 1282, -1000, 25375, -1000, -1000,
	-1000, 18256, -1000, -1000, -1000, 48220, -217, 25375, 25375, 4922,
	4676, 25375, 26683, 26683, -1000, 25375, 4044, -1000, -1000, -1000,
	-1000, -1000, 1985, 522, 25375, 68971, 4700, 4664, -1000, 387,
	62576, 209, -1000, 25375, -1000, 386, 17820, -1000, 66982, -21,
	-21, -1000, 2529, 1736, 1412, 1287, 1194, 2495, 10904, -190,
	-48, -1000, -1000, 459, -1000, 2123, -1000, 25375, 67293, 10483,
	-1000, 33752, 793, 1440, -1000, -1000, 2477, 715, -1000, -1000,
	-1000, 715, -1000, 65748, 68971, 68971, 25375, 25375, -1000, 25375,
	25375, 25375, -1000, -1000, 25375, -1000, -1000, 1984, 25375, -1000,
	68971, 68971, 26683, 26683, 26683, 26683, 26683, 26683, 26683, 26683,
	26683, 26683, 26683, 26683, 26683, 26683, 26683, 26683, 26683, 26683,
	26683, 1769, 26683, 2485, 2485, 2485, -1000, 1976, 1984, 25375,
	25375, 68971, 385, 384, 383, -1000, 25375, -190, -1000, -1000,
	974, -1000, 1934, -1000, -182, -1000, 1905, -1000, -1000, 1934,
	1934, -50, 68143, -1000, 29199, -1000, 519, 25375, 1815, -1000,
	643, -1000, -52, -1000, 49860, -1000, 642, -249, -1000, 699,
	-1000, -1000, -1000, 455, -1000, -1000, -1000, 246, 49860, -1000,
	-54, -1000, 2418, 382, 13434, -1000, -1000, -1000, -1000, -1000,
	-1000, -100, -102, 1457, 2525, -1000, 2481, -1000, 641, 380,
	2477, 379, 378, -102, 58092, -1000, -74, -1000, -1000, -1000,
	25375, -1000, -1000, -1000, 935, 934, -1000, 2168, -1000, 1668,
	-1000, 782, -1000, 1229, 25375, 25375, 518, 517, 1404, 2552,
	2163, 1536, 2144, 1536, -1000, -1000, 730, -1000, 68143, 515,
	514, -1000, -80, 1212, -1000, -1000, 25375, 25375, 50678, -1000,
	2341, -1000, 928, -1000, -1000, -1000, 1651, 926, -1000, -1000,
	1344, -1000, -1000, -1000, -1000, 25375, -1000, -82, 916, 745,
	1983, -1000, 2549, 2548, 2547, 375, -90, -1000, 2413, 1594,
	58092, 48220, 48220, 2412, 692, -1000, 2477, -1000, -1000, -1000,
	-1000, 775, -1000, -1000, 2546, -1000, 845, 13434, 48220, 2134,
	1774, 694, 39170, -1000, 775, 1852, -1000, 68143, -1000, 1226,
	17371, 2336, -56, -1000, 240, -1000, -1000, -1000, 791, 33341,
	29199, 25375, 2545, -60, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 50271, 50271, 38759, 38759, 38759, 745, 58092, 58092,
	39984, 2544, 508, 58092, 58092, 507, -1000, -1000, -1000, 1446,
	48220, -1000, -1000, 773, -1000, -1000, 1396, 1614, -1000, 1475,
	65672, -1000, 2342, 13434, 2424, 4427, 25375, 25375, 3606, 4170,
	410, 4427, 25375, 25375, 68971, 68700, -61, 25375, 25375, -1000,
	25375, 638, 68143, 2488, 25375, 370, 368, 367, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 366, -1000, -1000, -1000,
	-1000, -1000, 68143, 25375, 160, -1000, -1000, -1000, 62162, -1000,
	25375, 365, 364, -1000, -1000, -1000, 362, 361, 8611, 4020,
	65361, 65285, 64974, 68143, 1976, 68143, -1000, -1000, 830, 830,
	1098, 1098, 1098, 1098, 2485, 487, 305, 347, 269, 269,
	269, 457, 740, 740, 269, 269, 269, 1979, 1755, 505,
	5533, -1000, -1000, 68143, 68143, 358, -1000, -1000, -1000, -190,
	356, 1930, 2382, -1000, 29199, 1930, 1930, -1000, 1814, 58092,
	68143, 29199, -218, -1000, 2477, -1000, -1000, 1952, -1000, 9637,
	-1000, 13434, -1000, -1000, 31695, -1000, 504, -1000, 158, -1000,
	-1000, -1000, 636, -1000, -1000, 353, -1000, -1000, -102, 68143,
	58092, 58092, 58092, 2125, -1000, 3585, -1000, 64898, -70, -1000,
	66446, 25375, 58092, -1000, 1391, 1813, 864, -1000, 58092, -1000,
	58092, -1000, -1000, 58092, 58092, 48220, 58092, 58092, -72, 68143,
	-114, -1000, 698, -1000, 48220, 48220, 38759, -81, 13434, -1000,
	38759, -1000, -1000, -1000, 1881, -100, -1000, 2542, 501, 1651,
	-100, -1000, 635, -1000, -1000, 500, 58092, 1498, 499, 13434,
	1776, 694, 39170, -1000, 1019, 1226, -1000, -1000, -126, -1000,
	553, -100, 58092, 2540, 1440, -1000, -132, 68143, -1000, 695,
	-1000, -85, -1000, -1000, 349, -1000, 2294, 2293, -1000, -1000,
	25375, 498, 496, 58092, 1765, -1000, -1000, -1000, -1000, 13434,
	1049, -1000, -1000, -1000, 2342, 4427, 4427, 25375, 25375, 25375,
	4427, 68700, -91, -1000, 4427, 4427, -190, -1000, -1000, 66982,
	-1000, -1000, -1000, -1000, 68143, 10062, 1397, -1000, 64587, -1000,
	-1000, -1000, -1000, 25375, 25375, -1000, -1000, -1000, -1000, -1000,
	26683, 1975, 493, 68971, -1000, -1000, 785, 25375, 25375, 1905,
	785, 785, -1000, -95, -1000, 704, -1000, -1000, -1000, 2477,
	158, -1000, 2538, 13434, -1000, -1000, -1000, -1000, -1000, 58092,
	-1000, 58092, -1000, 13434, 58092, 1936, 1658, -1000, -1000, 1787,
	492, 26683, 48220, 502, 1931, 1376, 25375, -1000, -103, -105,
	1657, -1000, -1000, 1650, 25375, -1000, 68971, 1536, 1536, -109,
	-110, -1000, 915, 914, 912, 58092, 16935, -1000, -1000, -1000,
	907, -1000, -137, 1390, 1895, 771, -1000, 39984, 766, -1000,
	-1000, -1000, 25375, -1000, 48220, 25375, 1493, -1000, 694, 39170,
	-1000, 2140, -1000, 2264, 58092, 2330, -1000, -1000, -1000, 1852,
	491, -1000, 745, 490, 489, -115, 25375, 25375, -116, -146,
	-1000, 774, 772, -1000, -1000, 48220, -1000, 4427, 4427, 4427,
	-1000, 343, -1000, -1000, 1440, 2380, -1000, 64511, 64200, 1607,
	26683, 68971, -117, -1000, 58092, 68143, -190, -1000, -1000, -1000,
	49860, 628, -1000, -1000, 1375, -1000, -1000, -1000, 58092, 1659,
	-1000, -1000, 25375, 5533, 488, 25375, -1000, -1000, 1859, 1978,
	1881, 485, -1000, -1000, -1000, -1000, 1288, -1000, -1000, 68143,
	2359, -1000, -1000, 484, 476, 58092, 58092, 473, 686, 1949,
	-1000, 472, 766, -1000, 1408, -1000, 1861, 333, 2411, -121,
	845, -127, 48220, 39170, -1000, 1774, 1008, -128, 58092, 1226,
	-1000, -1000, 38759, 38759, 1376, -142, -147, -1000, 1765, -1000,
	58092, -1000, 58092, -1000, -1000, 1452, 25375, -1000, -1000, 1607,
	-148, -1000, -156, -1000, 2409, -1000, -1000, -1000, -1000, 2122,
	64124, 1750, 58092, 63813, 1973, -1000, -1000, 1390, 58092, 48220,
	839, 13434, 1396, 1396, -1000, -1000, 25375, 16499, 1406, 25375,
	-1000, 48220, -1000, 2292, 1881, -100, 1376, 467, 1376, 465,
	-1000, 1776, 1116, -1000, 791, -1000, -1000, -158, -159, 1881,
	1376, -1000, -1000, -160, -164, 331, 26247, 26247, 26247, -190,
	-1000, 58092, 458, 2105, -1000, 1477, 1575, 318, 862, -1000,
	-1000, 1931, -177, 455, -1000, 25375, -1000, -181, -1000, 826,
	-189, -1000, 825, -204, -1000, 1946, -1000, -208, 444, -1000,
	1390, 771, 1881, 25375, 1881, 25375, -1000, 33341, -1000, 745,
	745, 1390, 1881, -1000, -1000, -1000, -1000, -1000, 27104, 1484,
	1214, 66135, -1000, -1000, -1000, -1000, 58092, -1000, 1483, 1478,
	1147, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1750,
	68143, -1000, 1396, 1893, -1000, 1396, 1943, -1000, 1403, -1000,
	58092, 766, -1000, 1390, -215, 1390, -219, -199, -1000, -1000,
	-1000, 1390, 2428, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2280, -1000, 852, 1683, 1683, 1477, -1000, 443, -1000, 440,
	-1000, -220, -1000, 787, 1376, 787, 1376, -1000, -1000, 25811,
	-1000, 2459, -1000, -1000, 1808, -1000, 1931, 25375, 25375, 1531,
	-1000, 2537, 1881, -1000, 1881, -1000, -1000, -1000, -1000, -1000,
	-226, -232, -1000, -1000, -1000, -1000, 1390, 1390, 1390, 906,
	787, 787, -1000, 439, -1000, -1000, 25375, -237, 1390, -1000,
}
var sqlPgo = [...]int{

	0, 3207, 3206, 3204, 3200, 3199, 3198, 3195, 3192, 3190,
	3189, 3188, 3186, 3185, 3178, 3177, 3176, 3172, 3169, 3166,
	3163, 3158, 3154, 3153, 3149, 3147, 3144, 3143, 3142, 3140,
	3139, 3137, 3136, 3128, 3126, 3123, 3122, 3120, 3118, 3117,
	3116, 3111, 3108, 3099, 32, 3098, 3097, 3095, 3094, 3093,
	3092, 3090, 3089, 3087, 3086, 3082, 3079, 3074, 3073, 3072,
	3069, 3067, 3064, 3062, 3061, 3060, 3059, 3057, 3056, 3055,
	3054, 3053, 3049, 3044, 129, 3041, 3040, 3039, 3038, 3035,
	3033, 3031, 3029, 3028, 3026, 3025, 3022, 3020, 3019, 99,
	3016, 3013, 3008, 3007, 3006, 3005, 2999, 2997, 2995, 2991,
	184, 2989, 2986, 2984, 2983, 2982, 2980, 2979, 2977, 2976,
	2973, 2972, 2971, 2965, 2964, 2963, 2962, 2959, 2958, 2954,
	2952, 2951, 2950, 2948, 2946, 2945, 2941, 199, 139, 2937,
	2936, 2935, 2932, 2931, 2930, 93, 89, 24, 2929, 85,
	116, 183, 2152, 176, 2928, 2925, 2923, 2922, 2920, 73,
	117, 136, 137, 113, 179, 2918, 2917, 64, 53, 50,
	29, 90, 2916, 2915, 2914, 2155, 83, 2911, 2910, 195,
	180, 2909, 953, 2907, 132, 124, 76, 80, 62, 2905,
	95, 17, 2902, 126, 175, 2899, 108, 61, 33, 5373,
	5777, 2898, 105, 201, 68, 158, 166, 155, 161, 160,
	123, 1417, 2895, 185, 2894, 133, 144, 2893, 2889, 2880,
	55, 141, 11, 6, 152, 9, 2878, 10, 2873, 15,
	2872, 2871, 2870, 2869, 19, 115, 2863, 40, 63, 2862,
	22, 96, 151, 2860, 162, 2858, 87, 2857, 191, 147,
	145, 13, 165, 2856, 2854, 2852, 2851, 2849, 91, 21,
	84, 2848, 2847, 94, 177, 2846, 36, 130, 67, 98,
	200, 79, 159, 77, 168, 125, 169, 2845, 2844, 2839,
	156, 2838, 2837, 104, 154, 2836, 2835, 34, 44, 178,
	51, 2834, 2832, 111, 2830, 146, 2829, 2827, 2817, 203,
	120, 150, 12, 58, 86, 27, 8, 174, 102, 72,
	74, 2809, 3104, 1142, 1121, 2808, 114, 75, 38, 81,
	100, 193, 43, 2807, 2806, 119, 2805, 2804, 2803, 2802,
	134, 2801, 2800, 2799, 107, 54, 70, 2798, 103, 56,
	121, 196, 71, 163, 157, 188, 2796, 131, 2795, 112,
	122, 2794, 143, 186, 69, 2793, 285, 109, 2792, 153,
	2791, 2790, 2788, 2787, 273, 2786, 2785, 283, 2784, 97,
	2783, 2780, 135, 164, 194, 30, 2779, 57, 28, 2778,
	142, 35, 2772, 207, 31, 0, 6002, 4681, 5652, 2771,
	3294, 2769, 149, 92, 2759, 2754, 2752, 2750, 37, 14,
	3, 7, 18, 16, 732, 266, 2738, 2736, 66, 101,
	127, 2733, 197, 173, 2730, 2729, 2720, 59, 2717, 26,
	2713, 23, 2712, 2705, 25, 2, 2703, 2701, 181, 2696,
	182, 2692, 2689, 2441, 2688, 190, 2687, 106, 2683, 118,
	110, 2682, 2671, 2670, 2669, 189, 2668, 192, 2666, 4,
	20, 1, 2665, 2664, 2662, 148, 5, 2248, 2658, 2657,
	65, 138, 88, 2655, 2654, 140,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	425, 425, 17, 27, 18, 28, 12, 427, 427, 427,
	427, 21, 19, 19, 29, 138, 138, 138, 138, 16,
	16, 24, 24, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 424, 424, 153, 153, 152, 148,
	148, 428, 428, 154, 154, 154, 156, 156, 33, 33,
	87, 87, 87, 139, 80, 80, 80, 80, 80, 80,
	80, 75, 75, 373, 373, 374, 374, 134, 134, 135,
	135, 135, 135, 136, 136, 137, 137, 137, 47, 35,
	35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 45, 45, 45, 45, 128, 128, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 433, 433,
	434, 434, 435, 435, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 59,
	59, 226, 226, 204, 204, 49, 49, 420, 420, 239,
	239, 341, 341, 61, 61, 62, 62, 62, 62, 62,
	62, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 70, 70,
	70, 71, 71, 71, 68, 68, 68, 66, 66, 66,
	65, 65, 65, 69, 69, 69, 67, 67, 67, 240,
	240, 72, 72, 72, 72, 72, 72, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 343, 343,
	73, 73, 73, 313, 313, 76, 76, 76, 271, 271,
	77, 77, 77, 77, 77, 78, 78, 78, 78, 88,
	88, 88, 88, 423, 423, 232, 232, 169, 169, 169,
	169, 83, 83, 83, 83, 84, 84, 84, 85, 85,
	133, 133, 94, 94, 94, 94, 94, 93, 93, 93,
	93, 93, 93, 39, 39, 39, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 44, 44, 96,
	96, 429, 429, 98, 95, 95, 95, 97, 97, 97,
	97, 99, 100, 100, 100, 100, 100, 100, 101, 101,
	367, 367, 247, 247, 365, 365, 381, 381, 366, 366,
	208, 208, 208, 208, 208, 209, 209, 209, 372, 372,
	372, 372, 372, 372, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 118, 118, 118, 127, 127, 127, 127, 127, 127,
	127, 120, 120, 120, 111, 111, 103, 103, 103, 103,
	107, 107, 107, 107, 107, 104, 104, 108, 108, 110,
	110, 112, 112, 112, 112, 112, 112, 105, 105, 105,
	105, 114, 114, 114, 114, 113, 113, 123, 123, 123,
	123, 123, 123, 327, 327, 119, 119, 119, 119, 122,
	122, 122, 122, 261, 261, 117, 117, 117, 121, 121,
	124, 124, 124, 124, 106, 106, 106, 438, 438, 438,
	125, 125, 116, 116, 126, 126, 126, 126, 126, 126,
	126, 115, 115, 115, 426, 426, 109, 421, 421, 418,
	418, 418, 418, 418, 418, 418, 419, 419, 422, 422,
	81, 81, 81, 54, 54, 439, 439, 439, 55, 55,
	440, 440, 440, 437, 437, 437, 437, 437, 437, 437,
	437, 210, 210, 211, 211, 294, 294, 294, 294, 294,
	212, 212, 155, 155, 155, 215, 216, 216, 213, 213,
	214, 214, 214, 218, 218, 217, 220, 220, 219, 293,
	386, 386, 387, 387, 387, 387, 387, 387, 387, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 384,
	384, 384, 385, 382, 382, 383, 383, 383, 383, 441,
	441, 441, 441, 441, 441, 442, 442, 292, 292, 224,
	224, 389, 389, 389, 389, 390, 390, 390, 390, 390,
	393, 392, 391, 391, 391, 391, 391, 323, 323, 323,
	58, 58, 58, 258, 258, 257, 257, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 130, 130, 56, 56, 56, 161, 161, 53, 53,
	53, 444, 444, 57, 57, 57, 445, 445, 60, 60,
	60, 60, 60, 60, 52, 52, 52, 52, 52, 446,
	446, 277, 277, 276, 276, 230, 230, 329, 173, 173,
	149, 149, 149, 20, 22, 22, 15, 15, 15, 15,
	15, 15, 30, 30, 31, 31, 26, 26, 430, 430,
	431, 431, 82, 82, 86, 86, 86, 92, 92, 129,
	129, 129, 129, 129, 129, 129, 34, 34, 34, 34,
	46, 46, 46, 46, 90, 448, 448, 448, 91, 91,
	447, 447, 168, 168, 168, 168, 170, 170, 289, 289,
	290, 290, 449, 449, 291, 291, 291, 291, 163, 162,
	164, 164, 51, 51, 51, 157, 157, 158, 158, 159,
	159, 160, 160, 450, 450, 79, 79, 79, 132, 132,
	203, 203, 285, 285, 285, 225, 225, 178, 178, 288,
	288, 286, 286, 286, 286, 256, 256, 256, 131, 131,
	235, 235, 249, 249, 250, 250, 338, 338, 251, 89,
	89, 142, 142, 140, 140, 140, 140, 140, 140, 451,
	451, 141, 141, 141, 143, 143, 143, 143, 143, 143,
	143, 146, 146, 146, 146, 147, 147, 147, 145, 145,
	400, 400, 400, 402, 402, 403, 399, 399, 401, 401,
	443, 443, 260, 260, 260, 222, 223, 221, 221, 452,
	452, 228, 228, 227, 229, 229, 328, 328, 328, 254,
	254, 254, 254, 280, 280, 278, 278, 279, 279, 281,
	281, 282, 282, 282, 283, 283, 284, 284, 253, 253,
	309, 309, 144, 144, 144, 234, 234, 234, 236, 236,
	300, 300, 300, 300, 300, 301, 301, 299, 299, 299,
	299, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	331, 331, 237, 237, 332, 287, 287, 416, 416, 416,
	417, 417, 326, 326, 333, 333, 333, 333, 333, 333,
	324, 324, 325, 325, 339, 340, 340, 264, 264, 264,
	264, 262, 262, 265, 265, 265, 265, 263, 263, 334,
	334, 334, 334, 255, 255, 335, 335, 335, 336, 295,
	296, 296, 344, 344, 344, 344, 359, 233, 233, 233,
	453, 453, 345, 345, 345, 345, 345, 345, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	349, 349, 349, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 358, 358, 358, 358, 358, 350, 350, 355, 355,
	356, 356, 356, 351, 352, 357, 357, 357, 357, 454,
	454, 361, 361, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 347, 347, 347, 354, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 272,
	272, 273, 273, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 304, 304,
	304, 304, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 394, 394, 394,
	394, 394, 394, 394, 394, 397, 397, 398, 398, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 404, 404,
	405, 405, 407, 407, 408, 408, 409, 410, 410, 410,
	411, 412, 412, 406, 406, 413, 413, 413, 413, 414,
	414, 415, 415, 415, 415, 415, 315, 315, 316, 316,
	322, 322, 322, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 171,
	171, 171, 171, 171, 245, 245, 243, 243, 243, 246,
	246, 244, 244, 242, 242, 241, 241, 312, 312, 310,
	310, 314, 314, 266, 266, 360, 360, 360, 360, 360,
	360, 360, 267, 267, 267, 275, 268, 268, 269, 269,
	269, 269, 269, 306, 307, 270, 270, 270, 308, 308,
	317, 321, 321, 320, 319, 319, 318, 318, 297, 297,
	298, 298, 252, 252, 455, 455, 248, 248, 337, 337,
	337, 337, 206, 206, 238, 238, 205, 205, 198, 198,
	199, 199, 199, 199, 231, 231, 362, 362, 362, 363,
	364, 311, 188, 187, 175, 176, 186, 185, 184, 174,
	177, 181, 182, 183, 179, 180, 194, 193, 192, 190,
	191, 342, 200, 200, 201, 201, 201, 202, 202, 202,
	202, 172, 172, 195, 195, 196, 197, 197, 189, 189,
	189, 165, 165, 165, 166, 166, 167, 167, 371, 371,
	369, 369, 369, 370, 370, 370, 370, 368, 368, 368,
	368, 368, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 377,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 380,
	380,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 6, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 6, 4, 1, 0, 2, 3, 3, 3, 7,
	5, 3, 3, 2, 0, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 6, 3,
	4, 5, 5, 3, 1, 1, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 6, 4, 6, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 2,
	1, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 2, 5, 1, 4, 2, 5,
	1, 4, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 1, 2, 3, 2,
	3, 2, 3, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 450, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -129, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -130, -131, -132, 80, 67,
	120, 102, 107, 126, 152, 281, 310, 320, 304, -97,
	-98, 339, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -432, 82,
	-401, -64, -67, -69, -436, 112, 125, 164, 273, -84,
	-85, 306, 308, -41, -40, 121, -140, -142, -95, -96,
	-133, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, 342, 388, 39, 351, 68,
	115, 314, 21, -5, -6, -7, -8, -9, -11, -22,
	-49, -51, -52, -54, -55, -60, -57, -58, -400, -65,
	-66, -68, -70, -71, 305, -143, -141, 447, 400, -13,
	-17, -18, -14, -16, -19, -15, -23, -27, -28, -25,
	-24, -26, -29, -30, -31, -32, -20, -21, -12, 418,
	426, -146, -144, -145, -147, 327, 408, 365, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, -190, -195,
	-196, -197, -189, -165, -377, -380, 4, -375, -378, 131,
	177, 243, 21, 22, 23, 24, 25, 27, 37, 38,
	39, 42, 44, 45, 48, 49, 50, 51, 52, 53,
	56, 61, 66, 67, 68, 69, 70, 75, 72, 73,
	74, 77, 79, 80, 81, 84, 85, 93, 94, 95,
	96, 97, 98, 102, 105, 104, 107, 110, 111, 112,
	114, 116, 117, 120, 121, 124, 122, 371, 373, 123,
	125, 126, 127, 137, 138, 139, 141, 142, 144, 146,
	150, 151, 153, 157, 159, 160, 161, 162, 163, 164,
	165, 166, 178, 173, 179, 183, 186, 185, 187, 188,
	189, 180, 194, 197, 198, 199, 201, 202, 205, 206,
	207, 208, 211, 210, 213, 216, 217, 220, 221, 224,
	225, 227, 228, 231, 229, 232, 230, 233, 236, 234,
	235, 238, 239, 241, 240, 248, 249, 251, 252, 253,
	268, 256, 257, 258, 261, 264, 267, 269, 270, 271,
	272, 273, 274, 276, 277, 279, 281, 283, 285, 286,
	287, 288, 289, 290, 292, 293, 295, 296, 297, 298,
	299, 304, 301, 302, 303, 305, 306, 307, 308, 310,
	312, 313, 314, 315, 317, 319, 340, 341, 353, 320,
	321, 322, 323, 324, 325, 326, 330, 334, 331, 332,
	333, 335, 328, 329, 336, 337, 339, 342, 344, 346,
	347, 350, 351, 352, 354, 357, 358, 359, 355, 356,
	349, 364, 362, 363, 366, 367, 368, 369, 370, 372,
	374, 382, 383, 385, 388, 389, 390, 392, 393, 396,
	397, 398, 399, 404, 400, 402, 405, 406, 407, 413,
	412, 419, 420, 422, 423, 424, 32, 40, 41, 43,
	46, 57, 58, 59, 62, 99, 100, 119, 128, 129,
	140, 154, 156, 167, 168, 169, 184, 190, 192, 172,
	214, 246, 247, 262, 266, 278, 280, 291, 316, 345,
	360, 376, 377, 378, 379, 384, 386, 408, 409, 410,
	414, 421, 254, -183, 2, -165, -165, 281, 26, 2,
	26, 277, 329, 367, 369, 2, 193, 2, -423, -232,
	2, 26, -169, -165, 82, 152, 327, -183, 2, -423,
	-232, 24, 2, -165, 2, -170, 2, 320, -165, 450,
	77, 221, 61, 316, 336, -100, 383, -99, 376, 322,
	-101, -367, 2, 236, -165, 450, 450, 450, 450, 2,
	365, 271, 412, 328, 401, 95, 288, 177, -418, 2,
	4, -378, -375, -199, -198, 365, 95, -197, -189, 440,
	-196, 450, 450, 450, 2, 198, 199, 287, 286, 336,
	337, 450, 450, 450, 2, 25, 55, 76, 79, 101,
	127, 147, 150, 259, -433, 228, 268, 285, 322, 335,
	364, 374, 385, -437, 352, 56, 401, -444, 390, 110,
	-276, 95, 369, 367, 221, 151, 397, 312, 155, 395,
	105, 183, 399, 398, 450, 450, 25, 55, 64, 79,
	110, 127, 147, 150, -435, 268, 285, 319, 322, 335,
	364, 374, 390, 385, 2, 412, 328, 365, 177, 95,
	401, 312, 284, -74, 2, 447, 29, 339, -139, 365,
	2, -165, 198, 199, 2, 450, 450, -418, 2, 198,
	199, 2, 56, 324, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 2,
	-127, 336, 352, 161, 38, 61, 26, 66, 96, 153,
	177, 178, 206, 76, 77, 286, 221, 199, -327, 337,
	366, 323, 362, 383, 82, 402, 313, 424, -426, 122,
	4, 95, 236, 338, 376, 70, 370, 371, -443, 2,
	365, -447, 2, 383, 383, 2, -447, 2, -447, 2,
	-168, 2, 383, 380, -448, 383, 421, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, -141,
	-143, -142, 450, 450, 450, 450, 450, -127, 336, 2,
	61, 26, -451, 145, -227, -228, 394, 191, 118, 260,
	-140, -142, 2, -400, -365, 2, -302, -381, -304, 438,
	439, 433, 242, 425, -315, 101, 395, 254, -380, -305,
	-317, 119, 316, -246, 8, 9, 5, 6, 7, -172,
	-346, -311, -354, 387, 130, 245, -202, 452, 10, 447,
	-397, -142, -316, 33, 156, 54, -369, -201, -348, -356,
	-352, -353, -453, 44, 50, 49, 374, 235, 330, 331,
	346, 332, 333, 42, 404, 173, 251, 253, 185, 4,
	192, -200, -189, -394, -395, -375, -376, 184, 190, 186,
	345, 187, 188, 189, 41, 291, 141, 142, 140, 111,
	100, 99, 247, 46, 45, 43, 409, -357, 97, 376,
	377, 378, 379, 201, 202, -165, -377, 64, 87, 88,
	86, 91, 90, 92, 89, 338, 401, 55, 32, 167,
	168, 172, 246, 169, 62, -396, 356, 83, 149, 182,
	170, 195, 196, 200, 215, 218, 237, 244, 263, 265,
	311, 343, -454, 410, 128, 129, 266, 278, 360, 384,
	386, 154, 214, 57, 58, -402, 292, -403, -183, -402,
	450, 450, 451, 450, -221, -222, -223, 2, 26, 108,
	447, 2, -330, 2, 445, -334, -142, 209, -333, 447,
	-331, -190, 255, -398, 317, -394, -395, -172, -189, -201,
	4, -224, 447, 449, 95, 365, 65, 2, -271, 447,
	-165, 26, -139, 254, 380, 451, -313, 447, 254, 148,
	257, -165, 2, 2, 340, 2, 447, -100, 59, 383,
	-290, 2, -291, -162, -163, -164, -339, 197, 283, 290,
	427, 424, -365, -429, 148, 430, 380, -365, -247, 449,
	2, -334, 167, -190, 2, -187, -368, 4, -375, -378,
	-376, -379, 64, -377, 26, 28, 29, 30, 31, 33,
	34, 35, 36, 47, 54, 55, 60, 63, 65, 76,
	82, 86, 87, 89, 88, 90, 91, 92, 101, 103,
	106, 108, 109, 113, 115, 118, 130, 132, 145, 147,
	148, 152, 155, 158, 171, 181, 191, 193, 209, 212,
	219, 222, 223, 242, 245, 250, 254, 255, 259, 260,
	275, 282, 294, 309, 327, 338, 348, 361, 365, 375,
	380, 381, 387, 394, 395, 401, 403, 411, 415, 416,
	417, 418, -380, 2, -334, 167, 2, -192, 167, -334,
	-195, 2, -373, 167, -371, 10, -370, 5, 4, -375,
	-378, -376, 2, -174, -165, 2, -186, -368, 2, -205,
	167, -190, -191, -195, 380, 451, -238, -198, -199, -231,
	-165, 449, -302, 2, -89, 2, -302, 167, 2, -89,
	167, 2, -302, 167, 2, -89, 167, 2, 2, 2,
	385, 2, 79, 167, -165, 365, 94, 2, 303, -434,
	319, 389, 412, 2, 2, 2, 2, 2, 2, 2,
	365, 328, -445, 292, -179, 2, -165, 145, -373, 167,
	2, -373, 167, 2, -193, -195, -193, 177, 194, -174,
	167, 2, 369, 367, 369, 367, 148, 2, 193, 2,
	193, 2, -335, 2, -336, -190, 2, 2, 2, 2,
	2, 167, -165, 365, 94, 2, 208, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -240, 167, 2, -190,
	-240, 167, 2, -240, 167, 2, -206, 167, 2, -205,
	-174, 167, 2, -374, 167, 2, -373, -374, 167, 2,
	-343, 2, -342, -370, 408, -74, 447, 336, 447, -373,
	-190, -302, -89, 148, -302, -89, 145, 2, 95, 365,
	-127, 2, 145, 403, 2, 8, 2, -373, 289, 137,
	2, 340, 2, 286, 337, 61, 424, 148, 2, 2,
	-421, 2, 254, 148, 2, 148, 2, 148, 2, 148,
	2, 148, 2, 2, 286, 337, 2, 382, 207, 123,
	2, 148, -261, 2, 418, 148, 2, 5, 2, 197,
	283, 353, 2, -190, -438, 2, 365, 412, 328, 2,
	2, 72, 73, 148, 2, 148, 424, 2, -255, -334,
	-289, -290, -289, 380, -170, -451, -227, -228, -127, 340,
	2, 2, -451, -254, -278, -279, 219, 132, 250, -260,
	26, 108, -260, -260, 48, 448, 448, 11, 12, 63,
	37, 438, 439, 440, 441, 143, 442, 443, 436, 437,
	435, 428, 429, 432, 203, 204, 78, 431, 430, 71,
	226, 318, 133, 134, 135, 136, 300, 174, 175, 176,
	14, 15, 16, 30, 259, 218, 425, 170, 343, 433,
	17, 18, 19, 195, 196, 244, 40, 171, -171, -207,
	-302, -302, -302, -302, -302, 265, 447, -252, -297, 445,
	-142, 447, 447, 447, 5, 447, 5, -364, 8, -142,
	-302, -315, 448, -244, 447, -142, -315, -310, 447, 316,
	445, 447, -318, -302, 449, -404, 419, -350, 447, 280,
	-349, 447, -349, -349, 413, -347, 447, 426, 420, 447,
	-347, 447, 447, 145, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 413, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 451, -402, -224,
	447, -248, -337, -302, 440, -248, -248, 254, -241, -302,
	83, -264, 200, 237, 149, 215, 311, 182, -364, -74,
	-299, 452, -326, 426, -142, -331, -189, -142, -333, 447,
	-330, -326, 440, -190, 447, 148, 447, 449, 148, -231,
	-368, -174, -190, -200, -201, 107, -241, -373, -418, -231,
	-169, 34, -312, -344, -345, -358, -346, -355, -351, -354,
	296, 297, 295, 299, 298, 44, 50, 49, 374, 235,
	330, 331, 346, 332, 333, 42, 404, 173, 251, 253,
	185, 4, 43, 409, -357, 192, 184, 190, 186, 345,
	187, 188, 189, 41, 291, 141, 142, 140, 111, 100,
	99, 247, 46, 45, 97, 376, 377, 378, 379, 201,
	202, 410, 356, 57, 58, -418, -231, 145, -367, -241,
	34, -290, 2, -449, 451, 217, -209, 225, 241, 160,
	255, 422, 248, -372, 5, 4, -311, -323, 101, 221,
	-354, 9, 439, -362, 8, 438, -366, -365, 85, 449,
	-368, -151, 301, -150, 23, 27, 112, 406, 124, -214,
	179, 271, 119, 349, -425, -427, 321, 372, 373, 74,
	248, 301, 119, -257, -259, 34, 93, 239, 267, 51,
	165, 230, 231, 351, 414, 119, 301, 418, 119, -427,
	301, -427, -153, 349, -425, -427, 321, 301, -152, -214,
	119, 452, -373, -238, 451, 451, -368, 440, 119, 119,
	119, 119, 2, 2, 242, 2, 2, 2, 150, -437,
	-435, 2, 2, 2, -190, 167, -192, 167, 2, -195,
	412, -226, 254, -420, -239, 365, -190, -161, -399, 418,
	242, 242, 34, 447, 2, -176, 167, 2, -166, -165,
	177, -399, 242, -335, -203, -190, -203, 339, -183, 34,
	-299, 119, 2, 2, 2, -165, -154, 451, 53, 307,
	119, -154, 119, -154, 119, -154, 451, 119, -154, 119,
	451, 119, 119, 448, 451, -343, -373, -137, 418, 148,
	82, 447, -374, -420, -174, 2, -190, 2, 365, 201,
	-373, -373, -367, 26, 341, 2, 73, -190, -422, 145,
	-419, 312, -418, -190, -190, -190, -190, -190, 145, 2,
	382, 2, 382, 2, -165, 67, -165, 217, -190, 145,
	365, 177, 365, -154, 451, -170, -451, -254, -367, -451,
	-279, -278, -281, -302, 26, -284, 139, 238, -302, -304,
	-141, -141, -141, -229, -328, -302, 282, 177, -359, -344,
	-344, -188, -368, 376, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, 218,
	170, 343, 40, 171, -302, 380, -302, -302, -302, -302,
	234, 242, 245, 387, 130, 396, 108, 248, -455, 361,
	36, -308, -142, -245, 447, -322, 31, 348, 26, -315,
	447, 2, -297, -302, -298, -242, -241, -241, 448, 411,
	26, 108, 440, 2, 8, -272, -274, 423, 233, 98,
	162, 232, -273, 326, 448, 451, 34, 448, -302, -242,
	-314, -310, -241, -321, -320, 415, -368, 440, -405, 138,
	155, 8, -364, -364, 376, 376, 8, -364, -364, 447,
	448, 2, 448, 2, 448, 2, 448, 2, 448, 2,
	-302, -302, -302, -302, -302, -302, -302, -241, -266, 2,
	-360, -241, 4, 423, 233, 98, 162, 232, 326, -266,
	2, -267, 2, -302, -241, -268, -303, -304, 438, 439,
	433, -315, -269, 2, -302, -242, -302, 47, 212, 381,
	-270, -302, 148, -241, -241, 2, -241, 2, -403, 34,
	-241, -234, 451, 148, 34, 4, -234, -234, 447, 448,
	451, 200, -265, 159, 229, 224, -330, -264, 200, -262,
	263, -262, -262, -416, 447, 446, -326, -175, 445, 453,
	-368, -325, -324, 34, -183, 261, -326, -326, 449, 448,
	-325, -190, 447, -241, -368, 354, 448, 449, 195, 195,
	195, 317, 448, -137, 380, 418, -74, 256, 448, 451,
	-233, 33, 445, -274, 447, -361, 413, 447, 447, 148,
	-232, -429, 448, 383, -291, -208, 290, 347, 302, 334,
	363, 9, 8, 8, 451, -368, 451, 380, -430, 76,
	65, -293, 167, 65, -382, -177, 76, -383, -165, 60,
	395, 282, 147, -430, 76, -430, 76, 76, 339, 352,
	48, -334, 37, -89, 213, 148, 424, 365, 380, -334,
	-259, -344, 93, 230, 231, 48, -363, -362, 439, -363,
	48, -363, -363, -363, 418, -192, -334, 380, 272, -373,
	380, 451, 37, -89, 213, 148, 380, -205, -175, -340,
	-339, -198, -165, 449, -302, -89, -302, -89, 119, 2,
	-445, 208, 447, -224, 242, -258, -257, 242, -194, 2,
	-190, 148, -231, -341, 193, 451, -239, 272, 119, 119,
	447, 116, 288, 2, 254, 242, -176, 167, -157, 368,
	119, -296, -295, 416, -285, -89, 447, 101, 34, -285,
	-249, -250, -338, -251, -177, 447, -183, -165, 2, -190,
	-240, -240, -240, -205, -206, -174, -373, -374, -374, -74,
	-342, 448, 448, -136, 258, -135, -165, 5, -139, 403,
	-211, -294, -293, -384, -385, -382, 218, 177, 395, 194,
	131, -137, -339, -137, -340, -340, -190, 145, -231, -231,
	336, 145, 145, 449, -261, 288, 95, 365, 271, 177,
	-190, -205, -190, -334, -451, -282, -362, 447, -283, 316,
	317, 451, -149, 35, 106, 205, -190, 424, 117, -302,
	-302, 380, -455, 361, -308, 117, -302, 234, 245, 387,
	130, 396, 108, 248, 148, 447, -303, -303, 448, -243,
	-302, -302, 446, 455, 448, -452, 451, -227, -302, -241,
	-241, 448, 448, 380, 380, 380, 380, 447, 449, -241,
	-231, 446, 446, 451, 448, -319, -320, 113, -302, 449,
	-410, 264, 447, 447, 448, 448, 451, 448, 424, 424,
	448, 448, 448, -302, 34, 451, 451, 451, 448, 451,
	451, 451, 448, 448, 148, 448, 448, -275, 275, 448,
	11, 12, 438, 439, 440, 441, 143, 442, 443, 436,
	437, 435, 428, 429, 430, 71, 226, 318, 14, 15,
	16, 195, 171, -303, -303, -303, 448, -306, -307, 148,
	145, 34, -270, -270, -270, 448, 148, -241, 448, 448,
	447, 448, -296, -337, -236, 2, -330, -185, -368, -296,
	-296, -241, -302, -330, 200, -263, 403, 254, -265, -330,
	-324, 448, -417, -364, -326, -325, -364, -301, -300, 146,
	35, 106, 240, -183, -224, -325, -325, -368, -326, 448,
	-237, -332, -398, -452, 449, -368, -128, 5, 245, -128,
	-128, 148, -231, 24, 276, -344, 445, 446, 8, 8,
	447, -364, -364, -231, 148, -365, -290, 393, 69, 290,
	376, -365, -150, -190, -177, -184, -165, 242, -293, 167,
	-156, 242, -344, -184, 447, 447, 205, 205, -177, -184,
	167, -177, 167, -184, -184, -424, 290, 249, -302, 220,
	288, 243, -151, 301, -89, -89, 447, -429, 403, 107,
	-190, -194, 301, -200, -363, -363, -257, 301, -192, -373,
	418, -174, -152, -89, -89, 447, -175, -153, 301, -134,
	166, 440, -165, 412, -165, -210, -211, -165, -439, 420,
	418, 119, 119, -224, -204, -190, 445, -137, -373, -190,
	-373, -373, -373, 2, 447, 2, -190, 119, 254, 242,
	-158, 114, -450, 430, -174, -228, -227, -302, -256, -288,
	309, 254, -225, -178, -177, 408, -183, -256, -235, 451,
	148, 430, 449, -225, 2, -154, -154, -154, -154, -154,
	-74, -137, 451, 447, 430, 430, 447, -373, -373, 448,
	451, -190, -176, 177, 177, -182, -166, -137, -42, 418,
	365, 336, 336, -165, -186, -174, -190, -187, -205, -283,
	-302, -328, -190, 452, -302, -302, 117, 117, -302, -303,
	-303, -302, 117, 148, 447, -302, -312, 30, 30, 448,
	451, -298, -302, 448, 411, -452, -452, -452, 5, 233,
	162, 232, -273, 232, -273, -273, 8, 440, -368, 448,
	-310, 115, -302, 375, -368, 440, -411, -180, 447, -165,
	416, -227, -364, -347, -347, 448, -359, -344, -302, -302,
	-302, -302, -302, -302, -306, -302, -359, -344, -303, -303,
	-303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
	-303, -303, -303, -303, -303, -303, -303, 108, 242, 248,
	-303, -307, -306, -302, -302, -344, 448, 448, 448, -241,
	-74, -253, 155, -340, 451, -253, -253, 448, -330, 447,
	-302, 200, 446, 448, 451, -325, 446, 451, 454, 430,
	-224, 449, -324, 448, 451, -287, 34, 448, -368, -89,
	257, 5, 8, 446, 448, -364, 448, 448, -231, -302,
	380, 380, 119, 242, 405, -386, -383, -302, -230, -329,
	-302, 447, 447, -148, 112, 339, -431, 2, 119, -154,
	119, -154, 422, 447, 447, 380, -430, 76, -241, -302,
	-138, 101, -367, -427, 380, 380, 272, -241, 380, -137,
	148, 2, 2, 2, 448, 34, 252, -165, -190, -192,
	34, -340, -364, -161, 2, -277, 403, -175, -190, 119,
	-159, 211, -450, -371, -399, -280, -278, -256, -248, 243,
	75, 448, 451, 449, -296, -250, -236, -302, 2, 448,
	-135, -136, -373, -373, -373, -137, -139, -139, -294, 2,
	447, -176, -166, 447, 258, -190, -261, -216, -215, 271,
	248, 255, 448, -149, -175, -302, -302, 117, 30, 30,
	-302, -302, -312, 448, -302, -302, -241, 446, 5, -302,
	448, 448, 448, 448, -302, 449, -412, -165, -302, 448,
	448, 448, 448, 451, 451, 448, 448, 448, 448, -307,
	148, 108, 248, 447, 448, 448, -309, 158, 48, -330,
	-309, -309, -263, -231, -330, -299, -364, -300, -175, 445,
	-368, -332, 447, 449, 446, 448, -177, -184, -293, 119,
	-387, 76, -388, 63, 131, 82, 242, 245, 395, 282,
	60, 101, 294, 34, 448, 448, 451, -149, -230, -231,
	242, 358, 101, 242, 101, 94, 390, -177, -184, -231,
	-231, -190, -177, -184, 448, 451, 430, -194, -192, -373,
	448, -175, -374, -212, 180, -89, 2, 447, -224, -258,
	-89, 446, 447, -165, 254, 447, -175, -160, 210, -450,
	-371, -157, -256, -286, 447, 254, -89, -178, 2, -228,
	430, 448, 448, 94, 94, -230, 447, 447, -231, -43,
	-44, 177, 76, 274, -187, 365, -149, -302, -302, -302,
	448, -452, -368, 440, -406, 271, 448, -302, -302, -303,
	148, 447, -312, -407, 417, -302, -241, -407, -407, 448,
	-326, -364, 2, -293, -184, -188, -181, -165, 131, 167,
	245, 205, 447, -303, -190, 447, 2, -441, 103, 181,
	-292, -442, 81, 359, -329, 448, 448, 245, 245, -302,
	-344, -154, -154, 448, 448, 380, 380, 380, -367, 80,
	-365, 380, -213, -214, 171, -440, 418, -210, -439, -230,
	-190, -230, 254, -450, -371, -158, 109, -231, 76, -280,
	-308, -137, 447, 447, 448, -230, -230, 448, 451, 26,
	447, 26, 447, -190, 448, -228, 48, 448, 448, -303,
	-312, 448, -408, -409, -180, -325, 446, -388, -181, 242,
	-302, -167, 447, -302, 181, 104, 163, -212, 447, 294,
	-173, 63, 447, 447, -177, -184, 447, 430, 148, 447,
	-439, 269, 94, 239, 448, 34, 448, -277, 448, -190,
	-371, -159, 398, 243, 448, -184, -256, -374, -374, -292,
	448, 448, -44, -231, -231, -413, 288, 317, 157, -241,
	448, 451, 34, 119, 448, -389, 227, -165, 448, 104,
	163, -213, -231, -190, -428, 403, -188, -218, -217, -215,
	-220, -219, -215, -241, -365, 80, 269, -241, -190, 94,
	-212, -89, -292, 447, -292, 447, -160, 339, -295, 448,
	448, -212, -292, 448, 448, 448, -414, -415, 40, 392,
	85, -302, -414, -414, -409, -411, 131, -390, -393, -392,
	254, 344, 149, 270, 448, 358, 414, -441, 448, -224,
	-302, 448, 451, 408, 448, 451, 408, 448, 148, 448,
	447, -213, -440, -212, -230, -212, -230, -249, -137, -137,
	-213, -212, -415, 279, 144, 316, 279, 144, -181, -392,
	254, -393, 254, 398, 105, -389, -217, 171, -219, 148,
	269, -231, -439, -213, 448, -213, 448, -296, -213, 30,
	-391, 239, 307, 53, 339, -391, -390, 447, 447, 448,
	-446, 416, -292, -446, -292, -415, 22, 245, 101, -441,
	-241, -241, -155, 53, 307, 2, -212, -212, 448, 448,
	-213, -213, -213, 380, -446, -446, 447, -241, 448, -213,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 337, 338,
	340, 341, 342, 344, 345, 347, 349, 351, 353, 354,
	356, 358, 359, 360, 361, 362, 364, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 412,
	414, 0, 839, 841, 843, 845, 27, 28, 0, 0,
	169, 171, 173, 0, 198, 200, 202, 203, 205, -2,
	0, 291, 292, 294, 296, -2, -2, 0, 0, 401,
	403, 0, 0, 423, 424, 0, 929, -2, 417, 419,
	421, 484, 486, 488, 490, 492, 494, 496, 497, 499,
	501, 503, 505, 507, 509, 511, 513, 515, 517, 519,
	521, 523, 525, 527, 529, -2, -2, -2, 0, -2,
	-2, -2, 857, 31, 33, 35, 37, 39, 41, 59,
	254, 255, 257, 259, 261, 264, 265, 267, 968, 298,
	300, 302, 304, 306, 0, -2, 982, 0, 0, 43,
	44, 45, 46, 47, 48, 49, 66, 67, 68, 69,
	70, 71, 72, 52, 54, 55, 61, 62, 64, 0,
	0, 944, 946, 948, 950, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 23, 339, 343, 346,
	348, 350, 352, 355, 357, 363, 365, 367, 730, 1569,
	1583, 1584, 1585, 1588, 1589, 1590, 1591, 1592, 1593, 1919,
	1999, 2000, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 0, 379, 377, 1563, 380, 1756, 382, 384,
	285, 286, 287, 288, 289, 290, 0, 152, 0, 394,
	388, 393, 395, 397, 398, 399, 400, 374, 372, 0,
	394, 1615, 392, 837, 838, 832, 833, 1789, 867, 413,
	-2, -2, -2, 1888, -2, 445, -2, 452, 1891, 1791,
	455, 0, 457, -2, 460, 840, 842, 844, 29, 30,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	-2, -2, -2, -2, 0, 0, 1649, 1540, 1585, 1543,
	1538, 170, 172, 174, 175, 0, 0, 0, 0, 0,
	0, 199, 201, 204, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 786, 0, 0, 0, 0, 0, 0,
	0, 0, 653, 654, 0, 0, 659, 781, 782, 803,
	0, 0, 0, 0, 293, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 0,
	0, 0, 232, 331, 332, 0, 969, 0, 0, 0,
	150, 143, 0, 0, 642, 402, 404, 0, 142, 0,
	0, 836, 0, 0, 418, 420, 422, 485, 487, 489,
	491, 493, 495, 498, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 524, 526, 528, 530,
	531, 0, 0, 0, 0, 0, 535, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, -2,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 0,
	534, 536, 537, 538, 0, 583, 624, 625, 0, 772,
	970, 869, 847, 860, 869, 849, 850, 851, 852, 853,
	858, 859, 862, 0, 854, 855, 856, 32, 34, 36,
	38, 40, 42, 256, 258, 260, 262, 266, 268, -2,
	942, 943, 299, 301, 303, 305, 307, 405, 0, 407,
	0, 535, 933, 0, -2, 0, 974, 974, 974, 0,
	0, 943, 941, 0, 410, 411, 464, 465, 1203, 0,
	0, 0, 0, 0, 1438, 1287, 0, 466, -2, 1318,
	1320, 1867, 1888, 1437, 1322, 1323, 1324, 1325, 1326, 0,
	0, 1329, 0, 1331, 1332, 1333, 1334, 0, 1336, 0,
	1340, 1341, 1342, 0, 1872, 1517, 1581, -2, 1108, 1109,
	1110, 1111, 1112, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1577, 0, 1409, 1356, -2, 1602, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1658,
	-2, -2, -2, -2, -2, -2, -2, 1164, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1902, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 0, 1856, 1873,
	1874, 1879, 1881, 1875, 1864, 1379, -2, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1165, -2, 1868, 1869, 1884, 1885, 1890, 1895,
	1896, 1871, 1880, -2, -2, 960, 1764, 963, 730, 961,
	945, 947, 0, 949, 0, 0, 0, 954, 977, 975,
	0, 1013, 958, 959, 969, 1030, 1053, 0, 1035, 0,
	1053, 1079, 0, 1040, 1784, 1357, 1358, 0, 1585, 1582,
	-2, 0, 0, 0, 0, 0, 0, 195, 375, 0,
	381, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 415, 416, 0, 440, 0, 444, 1863, -2,
	-2, 448, 870, 874, 875, 876, 877, 0, 0, 0,
	0, 0, 454, 0, 0, 441, 442, 458, 461, 0,
	50, 0, 1873, 1079, 51, 0, 1553, 1607, 1608, 1609,
	1610, 1611, 1902, 1918, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 53, 0, 1873, 56, 0, 1873, 0,
	-2, 60, 0, 1873, 153, 154, 1598, 1599, 1603, 1604,
	1605, 1606, 63, 0, 1559, 65, 0, 1556, 73, 0,
	1873, 0, 1537, -2, 0, 0, 634, 1534, 1539, 635,
	1544, 0, 176, 177, 178, 179, 180, 1873, 182, 183,
	0, 185, 186, 1873, 188, 189, 0, 191, 207, 208,
	0, 210, 0, 1873, 0, 0, 0, 216, -2, 233,
	0, 230, 0, 220, 221, 223, 224, 225, 226, 227,
	0, 0, 0, 787, 272, 270, 1564, 0, -2, 1873,
	775, 778, 1873, 780, 792, 1567, 0, -2, 0, 967,
	1873, 884, 655, 656, 657, 658, 0, 284, 0, 897,
	0, 899, 0, 919, 1085, 1030, 234, 235, 236, 237,
	238, 1873, 0, 0, 0, 243, 0, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 135, 1873, 310, 329,
	135, 1873, 313, 135, 1873, 316, 135, 1873, 319, 1532,
	135, 1873, 322, 323, 1873, 325, 155, 326, 1873, 328,
	0, -2, 368, 1571, -2, 334, 0, -2, 0, 167,
	0, 640, 641, 0, 834, 835, 0, 425, 0, 0,
	532, 533, 0, 0, 543, 544, 545, 546, 1762, 1673,
	549, 0, 552, 573, 587, 0, 0, 0, 556, 558,
	639, 560, 0, 0, 562, 0, 564, 0, 566, 0,
	568, 0, 570, 572, 574, 588, 576, 0, 0, 0,
	586, 0, 591, 592, 0, 0, 597, 598, 599, 0,
	601, 602, 603, 604, 0, 606, 607, -2, -2, 611,
	613, 0, 619, 0, 623, 0, 539, 540, 135, 1083,
	846, -2, 848, 0, 864, 936, -2, 0, 406, 0,
	409, 940, 934, 939, 991, 992, 0, 0, 0, 0,
	972, 973, 0, 0, 0, 931, 932, 0, 0, 0,
	0, 1443, 1444, 1445, 1446, 1447, 1448, 1451, 1452, 1449,
	1450, 1453, 1454, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 1457, 1458, 0, 0, 1460, 0, 1462, 0, 0,
	0, 0, 0, 0, 1266, 1268, 1525, 0, 0, 1459,
	1208, 1209, 1210, 1245, 1246, 0, 0, 1319, 1522, 1521,
	1321, 0, 1474, 0, 1328, 0, 1200, 1335, 1550, -2,
	0, 1438, 1469, 0, 0, 1343, 1344, 1345, 0, 0,
	1474, 0, 0, 1516, 0, 1411, 0, 1144, 0, 1145,
	1146, 0, 1147, 1148, 1161, 1174, 0, 0, 0, 0,
	1178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1166, 0, 0,
	0, 1497, -2, 0, 0, 0, 0, 0, 962, 0,
	0, 1017, 1526, 1530, 1531, 1017, 1017, 0, 0, 1475,
	0, 1076, 0, 0, 1072, 1072, 1072, 1070, 1047, 0,
	1053, 0, 1063, 0, 1053, 1053, 0, -2, 1035, 0,
	0, 1063, 1080, 1081, 0, 0, 0, 0, 0, 0,
	1586, 0, 0, 0, 1573, 0, 0, 167, 0, 386,
	396, 969, 0, 1477, 1099, 1095, 1102, 1103, 1104, 1105,
	1151, 1152, 1153, 1154, 1155, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, -2, 1162, 1164, 1185, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1157, 0, 1132,
	1132, 1132, 1149, 1150, 1173, 1184, 1176, 1184, 1180, 1100,
	1101, 1167, 1168, 1169, 1170, 0, 390, 0, 0, 0,
	0, -2, 450, 0, 872, 0, 878, 475, 476, 477,
	880, 881, 0, 453, 478, 479, 480, 481, 482, 483,
	0, 747, 0, 749, 1546, 0, 451, 468, 456, 0,
	462, 74, 829, 103, 0, 829, 829, 0, 0, 122,
	0, 0, 0, 0, 0, 92, 99, 80, 81, 0,
	0, 0, 0, 57, 755, 0, 758, 0, 0, 0,
	0, 0, 0, 0, 770, 0, 0, 0, 0, 91,
	0, 86, 76, 0, 0, 94, 101, 0, 126, 128,
	0, 0, 1066, 633, 0, 0, 1586, 1542, 0, 0,
	0, 0, 209, 211, 0, 213, 214, 215, 0, 786,
	0, 222, 219, 263, 730, 1873, 754, 1873, 752, 1568,
	0, 0, 0, 282, 277, 0, 279, 773, 0, 966,
	0, 0, 0, 0, 793, 0, 1873, 798, 1555, 1594,
	1595, 886, 0, 1091, 0, 900, 0, 0, 1086, 0,
	1088, 0, 240, 241, 242, 0, 308, 0, 133, 134,
	0, 311, 0, 314, 0, 317, 0, 0, 320, 0,
	0, 0, 0, 969, 0, 0, 0, 145, 0, 0,
	0, 0, 167, 167, 1066, 427, 1066, 429, 0, 0,
	547, 548, 550, 551, 553, 554, 620, 555, 559, 0,
	627, 1780, 637, 561, 563, 565, 567, 569, 0, 578,
	0, 580, 0, 582, 594, 593, 595, 600, 605, 0,
	0, 0, 0, 771, 0, 863, 937, 939, 408, 935,
	989, 990, 995, 999, 1000, 1003, 1006, 1007, 997, 1203,
	955, 956, 957, 983, 984, 812, 0, 1999, 1204, 1096,
	1205, 1206, 1552, 0, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, -2, -2, -2, -2, -2, -2,
	-2, -2, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, -2, -2, -2, 1243, 1244, -2, 1461,
	1463, 0, 1525, 0, -2, 0, -2, -2, -2, -2,
	1263, 0, 1265, 1270, 1272, 1274, 0, 0, 0, 0,
	1524, 1284, 1508, 1509, 0, 0, 1440, 1441, 1442, 1269,
	0, 1288, 1523, 1520, 0, 0, 1473, 980, 1347, 0,
	0, 0, 0, 1354, 0, 1551, 1199, 1186, 1187, 1188,
	1189, 1190, 1191, 1201, 1339, 1471, 0, 1470, 0, 0,
	0, 1481, 0, 1515, 1511, 0, 1574, 1580, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1391,
	0, 1484, -2, -2, -2, -2, -2, -2, -2, 0,
	1393, 0, 1395, 1475, 1494, 0, 0, 1289, 0, 0,
	0, 1438, 0, 1398, 1475, 1502, 0, 0, 0, 0,
	0, 1475, 0, 1507, 0, 1405, 0, 1407, 964, 0,
	0, 1091, 0, 0, 0, 1529, 1091, 1091, 0, 1012,
	0, 0, 0, 1073, 1074, 1075, 0, 1076, 0, 1067,
	1071, 1068, 1069, 0, 0, 1053, 1063, 1027, 0, 0,
	1554, 1033, 1062, 0, 730, 1052, 1063, 1063, 0, -2,
	1037, 0, 0, 980, -2, 168, 729, 0, 0, 0,
	0, 376, 378, 0, 0, 0, 370, 0, 373, 0,
	1092, 1094, 0, 1106, 0, 0, -2, 0, 0, 0,
	0, 0, 443, 0, 871, 879, 0, 472, 0, 474,
	0, 748, 1548, 1547, 0, 463, 0, 0, 0, 0,
	828, 105, 1873, 0, 137, 0, 0, 714, 1560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	756, 757, 759, 765, 767, 0, 761, 1549, 0, 762,
	0, 764, 766, 768, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 1536, 158,
	1065, 1535, 1545, 0, 181, 184, 187, 190, 0, 217,
	0, 0, 662, 645, 0, 750, 753, 0, 730, 785,
	1566, 0, 271, 167, 0, 0, 278, 0, 0, 0,
	0, 0, 0, 791, 0, 0, 0, 1873, 888, 894,
	0, 982, 1090, 0, 917, 902, 0, 0, 0, 917,
	921, 922, 924, 925, 0, 0, 1087, 0, 244, 330,
	135, 135, 135, 1533, 135, 135, 156, 324, 327, 333,
	369, 969, 167, 165, 1743, 163, 160, 162, 0, 0,
	0, 663, 665, 666, 667, 668, 0, 1595, 0, 1702,
	1595, 140, 167, 276, 426, 431, 541, 0, 638, 636,
	577, 0, 0, 0, 590, 0, 0, 0, 0, 0,
	621, 622, 626, 1084, 938, 0, 1001, 0, 998, 1004,
	1005, 0, 986, 810, 811, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1285, 0, -2, 1264, 1267, 1271,
	1273, 1275, 0, 0, 0, 0, 0, 0, 1464, 0,
	1466, 1286, 1518, 1521, 1436, 0, 0, 979, 980, 980,
	980, 1353, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 1479, 1480, 0, 1346, 0, 1512, 0, 0, 0,
	1355, 0, 0, 0, 1156, 1130, 0, 1184, 1182, 1183,
	1177, 1184, 1181, 0, 0, 0, 0, 0, 1374, 0,
	0, 0, 1378, 1390, 0, 1392, 1394, 0, 0, 1396,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1292, 1293, 1294, 1397, 1500, 1501, 0,
	0, 0, 0, 0, 0, 1403, 0, 1506, 1404, 1406,
	969, 1014, 1009, 1527, 1066, 1016, 1018, 1528, 1557, 1009,
	1009, 0, 1476, 1055, 0, 1057, 0, 0, 0, 1059,
	0, 1048, 0, 1050, 1063, 1032, 0, 0, 1025, 0,
	1022, 1023, 1024, 730, 1061, 1034, 1038, 1574, 0, 1082,
	0, 1042, 1045, 0, 0, 1587, 192, 196, 197, 193,
	194, 0, 385, 0, 0, 1478, 0, 1097, 0, 0,
	0, 0, 0, 389, 0, 439, -2, 470, 471, 473,
	0, 469, 104, 816, 0, 0, 1558, 0, 107, 1873,
	116, 0, 691, 0, 0, 0, 0, 0, 831, 0,
	1873, 135, 1873, 135, 118, 121, 0, 125, 123, 0,
	0, 682, 75, 829, 78, 84, 0, 0, 0, 90,
	0, 822, 0, 760, 763, 769, 58, 0, 824, 814,
	0, 813, 127, 79, 85, 0, 826, 77, 0, 167,
	0, 1541, 0, 0, 0, 0, 661, -2, 0, 0,
	0, 0, 0, 0, 1066, 273, 0, 275, 281, 280,
	776, -2, 779, 788, 0, 790, 802, 0, 0, 0,
	890, 894, 0, 893, 967, 994, 981, 1089, 895, 917,
	0, 0, 0, 905, 907, 904, 901, 898, 1091, 0,
	0, 0, 0, 0, 239, 309, 312, 315, 318, 321,
	335, 144, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 0, 1595, 1595, 0, 1562, 141, 428, 0,
	0, 579, 581, 594, 614, 615, 677, 0, 618, 0,
	0, 985, 812, 0, 1207, 1248, 0, 0, -2, 0,
	0, 1252, 0, 0, 0, -2, 0, 0, 0, 1465,
	1467, 0, 1520, 1348, 0, 0, 0, 0, 1330, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 0, 1337, 1338, 1439,
	1482, 1510, 1514, 0, 1575, 1579, 1417, 1418, 1422, 1565,
	0, 0, 0, 1175, 1179, 1359, 0, 0, 0, 0,
	0, 0, 0, 1483, 1493, 1495, 1290, 1291, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, -2, -2,
	-2, 1308, 1309, 1310, -2, -2, -2, 0, 0, 0,
	1496, 1498, 1499, 1503, 1504, 0, 1400, 1401, 1402, 1505,
	0, 1011, 0, 1015, 0, 1011, 1011, 976, 0, 0,
	1078, 0, 1030, 1049, 0, 1039, 1028, 0, 1029, 0,
	1060, 0, 1036, 1041, 0, 1044, 0, 1348, -2, 151,
	387, 371, 0, 1098, 1107, 0, 1159, 1163, 391, 1064,
	0, 0, 0, 0, 136, 689, 713, 0, 0, 805,
	812, 0, 0, 109, 0, 0, 0, 117, 0, 114,
	0, 120, 124, 0, 0, 0, 0, 0, 0, 87,
	88, 89, 0, 93, 0, 0, 0, 0, 0, 138,
	0, 212, 784, 218, 671, 0, 646, 0, 730, 754,
	0, 269, 0, 774, 789, 0, 0, 0, 0, 0,
	892, 894, 0, 885, 886, 917, 993, 896, 915, -2,
	914, 0, 0, 0, 982, 923, 920, 926, 927, 0,
	164, 0, 159, 161, 0, 147, 0, 0, 664, 669,
	0, 0, 0, 0, 0, 542, 589, 616, 676, 0,
	0, 996, 1002, 987, 812, 1250, 1254, 0, 0, 0,
	1256, -2, 0, 1278, -2, -2, 1468, 1519, 1327, 980,
	1349, 1351, 1352, 1202, 1513, 0, 1424, 1421, 0, 1408,
	1131, 1369, 1370, 0, 0, 1373, 1375, 1376, 1377, 1492,
	0, 0, 0, 0, 1399, 965, 1413, 0, 0, 1019,
	1413, 1413, 1056, 0, 1058, 1053, 1051, 1026, 1020, 0,
	1575, 1043, 0, 0, 1093, 1158, 818, 820, 106, 0,
	690, 0, 693, 0, 0, 0, 0, 700, 701, 0,
	0, 0, 0, 0, 719, 728, 0, 807, 0, 0,
	0, 111, 130, 0, 0, 830, 0, 135, 135, 0,
	0, 817, 0, 0, 0, 0, 0, 823, 825, 815,
	0, 827, 157, 679, 0, 650, 647, 662, 645, 751,
	783, 274, 0, 801, 0, 0, 0, 882, 894, 0,
	887, 888, 283, 0, 0, 0, 903, 906, 908, 994,
	0, 166, 167, 0, 0, 0, 0, 0, 0, 430,
	432, 0, 0, 438, 675, 0, 988, 1258, -2, -2,
	1279, 0, 1576, 1578, 982, 0, 1410, 0, 0, -2,
	0, 0, 0, 951, 0, 1010, 1008, 952, 953, 1077,
	1063, 0, 1046, 108, 0, 694, 695, 1561, 697, 0,
	699, 702, 0, 704, 1597, 0, 708, 715, 720, 0,
	671, 0, 725, 726, 806, 717, 0, 110, 112, 129,
	809, 113, 119, 0, 0, 0, 0, 0, 0, 1643,
	96, 0, 645, 678, 0, 648, 0, 0, 0, 0,
	802, 0, 0, 0, 889, 890, 0, 0, 0, 917,
	928, 146, 0, 0, 728, 0, 0, 712, 0, 434,
	0, 436, 0, 617, 1350, 1428, 0, 1371, 1372, -2,
	0, 1316, 1412, 1414, 0, 1031, 1021, 692, 696, 0,
	0, 734, 0, 0, 0, 723, 724, 679, 0, 0,
	132, 0, 0, 0, 819, 821, 0, 0, 0, 0,
	643, 0, 651, 0, 671, 0, 728, 0, 728, 0,
	891, 892, 0, 910, 911, 913, 918, 0, 0, 671,
	728, 711, 433, 0, 0, 0, 0, 0, 0, 1423,
	1317, 0, 0, 0, 703, 739, 0, 0, 0, 721,
	722, 719, 0, 730, 115, 0, 808, 0, 683, 0,
	0, 686, 0, 0, 97, 1643, 95, 0, 0, 652,
	679, 650, 671, 0, 671, 0, 883, 0, 912, 167,
	167, 679, 671, 435, 437, 1420, 1425, 1429, -2, 1837,
	1646, 0, 1426, 1427, 1415, 1416, 0, 705, 735, 736,
	0, 731, 732, 733, 1596, 706, 707, 716, 727, 734,
	131, 680, 0, 0, 681, 0, 0, 100, 0, 102,
	0, 645, 649, 679, 0, 679, 0, 1091, 148, 149,
	709, 679, 0, 1431, 1432, 1433, 1434, 1435, 698, 737,
	0, 738, 0, 0, 0, 739, 684, 0, 687, 0,
	98, 0, 644, 799, 728, 799, 728, 909, 710, 0,
	740, 0, 743, 744, 0, 741, 719, 0, 0, 674,
	794, 0, 671, 796, 671, 1430, 742, 745, 746, 718,
	0, 0, 670, 672, 673, 800, 679, 679, 679, 0,
	799, 799, 685, 0, 795, 797, 0, 0, 679, 688,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 436, 3, 442, 437, 3,
	447, 448, 440, 438, 451, 439, 449, 441, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 455, 3,
	428, 430, 429, 432, 452, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 445, 3, 446, 443, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 453, 435, 454, 433,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 431, 57771, 434, 57772, 444, 57773, 450, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1037
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1042
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1048
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1049
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1050
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1052
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1053
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1054
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1058
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1076
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1158
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1163
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1175
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1206
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1229
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1233
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1238
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1249
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1255
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1272
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1280
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1287
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1295
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1302
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1310
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1315
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1319
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1324
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1330
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1338
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1347
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1359
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1369
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1373
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1377
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1392
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1399
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1403
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1445
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1454
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1457
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1478
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1495
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1498
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1505
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1514
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1535
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1544
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1548
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1558
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1566
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1576
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1580
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1634
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1664
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1668
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1705
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1714
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1720
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1725
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1730
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1734
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1753
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1757
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1761
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1769
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1801
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1807
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1817
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1821
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1825
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1831
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1844
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1846
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1847
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1857
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1865
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1867
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1889
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1897
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1899
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1903
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1916
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1925
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1933
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1935
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1942
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1946
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1950
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1955
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1971
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1977
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1981
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1993
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1994
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1996
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1997
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1998
		{
			return helpWith(sqllex, "CREATE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2002
		{
			return unimplemented(sqllex, "create cast")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2003
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2004
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2005
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2006
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2007
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2009
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2011
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2012
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2013
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2014
		{
			return unimplemented(sqllex, "create operator")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2015
		{
			return unimplemented(sqllex, "create publication")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2016
		{
			return unimplemented(sqllex, "create rule")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2018
		{
			return unimplemented(sqllex, "create server")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2021
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2024
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2025
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2028
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2029
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2032
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2033
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2036
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplemented(sqllex, "drop server")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2060
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2061
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2062
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2064
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2065
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2066
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2067
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2077
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2089
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2093
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2099
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2104
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2113
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2121
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2131
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2135
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2141
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2152
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2156
		{

			sqlVAL.union.val = nil
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2170
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return helpWith(sqllex, "DELETE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2187
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2194
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2204
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2205
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "DROP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2209
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2213
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2221
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2225
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2236
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2240
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2251
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2255
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2266
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2274
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2297
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2312
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2319
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2327
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2331
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2334
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2338
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2343
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2366
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2369
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2371
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2375
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2379
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2386
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2390
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2393
		{
			return helpWith(sqllex, "DELETE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2395
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "INSERT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2398
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2401
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2410
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2411
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2415
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2429
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2437
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2470
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2531
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2542
		{
			return helpWith(sqllex, "GRANT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2570
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2573
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2582
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2593
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "RESET")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2612
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2620
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2627
		{
			return helpWith(sqllex, "RESET")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2635
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2638
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "USE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2656
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2657
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2658
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2659
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2664
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			return helpWith(sqllex, "USE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2699
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2717
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2726
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2730
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2734
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2740
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2754
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2758
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2762
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2777
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2790
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2806
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2815
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2832
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2837
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2840
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2844
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2863
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2876
		{
			return unimplemented(sqllex, "set from current")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2877
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2885
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2890
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2897
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2901
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2939
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2953
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2957
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2971
		{
			sqlVAL.union.val = tree.Low
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2975
		{
			sqlVAL.union.val = tree.Normal
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2979
		{
			sqlVAL.union.val = tree.High
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2990
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2998
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3003
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3007
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3019
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3023
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3063
		{
			sqlVAL.str = "client_encoding"
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.str = "timezone"
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3067
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3081
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3086
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3091
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3102
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3111
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3126
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3134
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3141
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3151
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3155
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3158
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3160
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3163
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3171
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3186
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3199
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3215
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3219
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3221
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3225
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3227
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3239
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3245
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3257
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3260
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3266
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3279
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3288
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3291
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3293
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3296
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3298
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3305
		{
			sqlVAL.union.val = true
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3306
		{
			sqlVAL.union.val = false
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3319
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3323
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3333
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3343
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3359
		{
			sqlVAL.union.val = true
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.union.val = false
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3381
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3385
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3393
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3398
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3403
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3415
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3420
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3438
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3441
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3449
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3452
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3464
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3471
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3489
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3500
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3516
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3524
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3649
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3657
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3696
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3700
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3705
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3718
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3725
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3750
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3753
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3789
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3802
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3816
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3817
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3818
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3822
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3834
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3847
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3848
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3863
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3864
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3865
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3866
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3867
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3868
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3869
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3870
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3875
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3891
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3897
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3900
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3904
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3913
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3920
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3925
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3930
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3936
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3943
		{
			sqlVAL.str = ""
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3950
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3956
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3963
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3970
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3976
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3986
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3996
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4006
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4017
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4032
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4038
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4042
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4046
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4050
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4054
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4058
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4062
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4080
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4084
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4088
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4092
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4096
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4100
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4104
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4114
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4118
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4129
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4139
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4151
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4161
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4173
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4178
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4184
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4201
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4211
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4223
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4224
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4225
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4226
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4227
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4228
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4249
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4259
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4279
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4283
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4287
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4300
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4308
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4328
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4344
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4352
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4358
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4362
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4368
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4387
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4392
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4396
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4407
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4410
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4411
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4412
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4415
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4417
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4419
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4422
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4425
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4427
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4440
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4452
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4455
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = nil
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4473
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4477
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4480
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4486
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4494
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4502
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4503
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4506
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4507
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4513
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4515
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4517
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4519
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4521
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4523
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4539
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4553
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4568
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4582
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4596
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4599
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4600
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4604
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = false
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = true
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqlVAL.union.val = false
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4635
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4648
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4660
		{
			sqlVAL.str = ""
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4664
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4668
		{
			sqlVAL.union.val = tree.Descending
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4685
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4689
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4695
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4701
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4707
		{
			table := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4717
		{
			table := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4727
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4729
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4733
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4739
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4747
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4753
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4765
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4770
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4771
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4774
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4775
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4786
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4796
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4808
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4816
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4819
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4823
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4824
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4841
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4844
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4849
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4859
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4862
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4867
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4871
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4876
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4877
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4878
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4886
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4893
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4896
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4897
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4901
		{
			sqlVAL.str = ""
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4905
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4909
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.str = ""
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4919
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4923
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4939
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4943
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4956
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4958
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4962
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4975
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4993
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5017
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5027
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5031
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.str = ""
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5045
		{
			sqlVAL.str = ""
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.str = ""
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5061
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5065
		{
			sqlVAL.str = ""
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5070
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5071
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5083
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5090
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5097
		{
			return helpWith(sqllex, "INSERT")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5108
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5115
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5119
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5128
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5135
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5173
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5181
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5187
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5190
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5191
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5199
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5204
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5208
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 918:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5225
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5236
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5240
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5241
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5245
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5262
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5265
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5318
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5322
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5345
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5349
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5362
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5363
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5368
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5403
		{
			return helpWith(sqllex, "SELECT")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			return helpWith(sqllex, "VALUES")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			return helpWith(sqllex, "TABLE")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5440
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5466
		{
			return helpWith(sqllex, "SELECT")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5470
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5479
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5510
		{
			return helpWith(sqllex, "TABLE")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5526
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5530
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5534
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5544
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5552
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5553
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5557
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = nil
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5566
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5567
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = true
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5575
		{
			sqlVAL.union.val = false
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5579
		{
			sqlVAL.union.val = false
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5585
		{
			sqlVAL.union.val = true
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5596
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5597
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5600
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5601
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5609
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5615
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5631
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5635
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5640
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5655
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5675
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5679
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5701
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5717
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5721
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5731
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5732
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5735
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5736
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5753
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5757
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5763
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5789
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5791
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5803
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5806
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5824
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5828
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5833
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5838
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5844
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5850
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5855
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5867
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5875
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = flags
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5914
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5928
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5945
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5955
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5959
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5981
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5985
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6003
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6005
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.union.val = nil
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6024
		{
			sqlVAL.union.val = true
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6028
		{
			sqlVAL.union.val = false
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6056
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6060
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6064
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6068
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6085
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6098
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.str = tree.AstFull
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.str = tree.AstRight
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6116
		{
			sqlVAL.str = tree.AstInner
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6122
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6123
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.str = tree.AstHash
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.str = ""
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6179
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6180
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6185
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6190
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6204
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6208
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6214
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6222
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6251
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6265
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6274
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6298
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6307
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6318
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6319
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6356
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6388
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6404
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6439
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = nil
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6450
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6454
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6458
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6462
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6490
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6502
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6523
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6556
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6577
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6583
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6595
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6605
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = true
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6646
		{
			sqlVAL.union.val = false
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6655
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6660
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6667
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6668
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6670
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6678
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6694
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6703
		{
			sqlVAL.union.val = true
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6704
		{
			sqlVAL.union.val = false
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6705
		{
			sqlVAL.union.val = false
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6715
		{
			sqlVAL.union.val = tree.Year
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6719
		{
			sqlVAL.union.val = tree.Month
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6723
		{
			sqlVAL.union.val = tree.Day
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6727
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6731
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.union.val = tree.Month
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = nil
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = tree.Second
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6781
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6805
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6816
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6825
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6898
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6930
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7030
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7135
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7351
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7356
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7358
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7365
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7383
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7392
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7431
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7442
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7443
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7467
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7488
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7508
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7576
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7583
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7591
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7596
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7601
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7611
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7620
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7621
		{
			return unimplemented(sqllex, "treat")
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7623
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7627
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7631
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7635
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7642
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7647
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7652
		{
			return unimplemented(sqllex, "within group")
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7653
		{
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7688
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.str = ""
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7779
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7792
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7866
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7878
		{
			sqlVAL.union.val = tree.Any
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7882
		{
			sqlVAL.union.val = tree.Some
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = tree.All
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = tree.Div
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = tree.LT
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = tree.GT
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = tree.LE
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = tree.GE
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = tree.NE
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = tree.Like
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7992
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8072
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8200
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8226
		{
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8227
		{
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8299
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8307
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8373
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8395
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8405
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8512
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8516
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8520
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8555
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8573
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8588
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8597
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8624
		{
			sqlVAL.str = ""
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8634
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
