// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/roleprivilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:66

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) rolePrivilegeType() roleprivilege.Kind {
	return u.val.(roleprivilege.Kind)
}
func (u *sqlSymUnion) rolePrivilegeList() roleprivilege.List {
	return u.val.(roleprivilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:627
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10203

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1105,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	184, 927,
	201, 927,
	216, 253,
	300, 253,
	309, 745,
	336, 253,
	345, 745,
	384, 745,
	408, 253,
	432, 745,
	-2, 0,
	-1, 75,
	216, 257,
	-2, 0,
	-1, 76,
	111, 1105,
	190, 1105,
	418, 1105,
	419, 1105,
	-2, 0,
	-1, 88,
	124, 1079,
	140, 1079,
	153, 1079,
	198, 1079,
	228, 1079,
	264, 1079,
	274, 1079,
	413, 1079,
	-2, 1050,
	-1, 119,
	130, 663,
	215, 663,
	303, 643,
	354, 643,
	401, 663,
	-2, 0,
	-1, 120,
	4, 1107,
	21, 1107,
	22, 1107,
	23, 1107,
	24, 1107,
	25, 1107,
	27, 1107,
	33, 1107,
	38, 1107,
	39, 1107,
	40, 1107,
	41, 1107,
	42, 1107,
	43, 1107,
	44, 1107,
	45, 1107,
	46, 1107,
	47, 1107,
	48, 1107,
	49, 1107,
	50, 1107,
	52, 1107,
	53, 1107,
	54, 1107,
	55, 1107,
	56, 1107,
	57, 1107,
	60, 1107,
	61, 1107,
	62, 1107,
	63, 1107,
	65, 1107,
	66, 1107,
	70, 1107,
	71, 1107,
	72, 1107,
	73, 1107,
	74, 1107,
	75, 1107,
	77, 1107,
	78, 1107,
	79, 1107,
	80, 1107,
	82, 1107,
	84, 1107,
	85, 1107,
	86, 1107,
	88, 1107,
	90, 1107,
	91, 1107,
	99, 1107,
	100, 1107,
	101, 1107,
	102, 1107,
	103, 1107,
	104, 1107,
	105, 1107,
	106, 1107,
	108, 1107,
	110, 1107,
	111, 1107,
	113, 1107,
	116, 1107,
	117, 1107,
	118, 1107,
	120, 1107,
	122, 1107,
	123, 1107,
	125, 1107,
	126, 1107,
	127, 1107,
	128, 1107,
	129, 1107,
	130, 1107,
	131, 1107,
	132, 1107,
	133, 1107,
	134, 1107,
	135, 1107,
	136, 1107,
	137, 1107,
	139, 1107,
	145, 1107,
	146, 1107,
	147, 1107,
	148, 1107,
	149, 1107,
	150, 1107,
	152, 1107,
	154, 1107,
	158, 1107,
	159, 1107,
	161, 1107,
	162, 1107,
	164, 1107,
	165, 1107,
	167, 1107,
	168, 1107,
	169, 1107,
	170, 1107,
	171, 1107,
	172, 1107,
	173, 1107,
	174, 1107,
	176, 1107,
	177, 1107,
	179, 1107,
	180, 1107,
	181, 1107,
	184, 1107,
	185, 1107,
	186, 1107,
	187, 1107,
	190, 1107,
	191, 1107,
	192, 1107,
	193, 1107,
	194, 1107,
	195, 1107,
	196, 1107,
	197, 1107,
	199, 1107,
	201, 1107,
	203, 1107,
	205, 1107,
	206, 1107,
	207, 1107,
	209, 1107,
	210, 1107,
	213, 1107,
	214, 1107,
	215, 1107,
	216, 1107,
	217, 1107,
	219, 1107,
	220, 1107,
	222, 1107,
	223, 1107,
	225, 1107,
	226, 1107,
	229, 1107,
	230, 1107,
	233, 1107,
	234, 1107,
	235, 1107,
	237, 1107,
	238, 1107,
	239, 1107,
	240, 1107,
	241, 1107,
	242, 1107,
	243, 1107,
	244, 1107,
	245, 1107,
	246, 1107,
	248, 1107,
	249, 1107,
	250, 1107,
	251, 1107,
	253, 1107,
	255, 1107,
	257, 1107,
	259, 1107,
	260, 1107,
	261, 1107,
	262, 1107,
	263, 1107,
	265, 1107,
	266, 1107,
	267, 1107,
	269, 1107,
	270, 1107,
	271, 1107,
	272, 1107,
	275, 1107,
	276, 1107,
	277, 1107,
	279, 1107,
	281, 1107,
	282, 1107,
	283, 1107,
	284, 1107,
	285, 1107,
	286, 1107,
	287, 1107,
	288, 1107,
	289, 1107,
	290, 1107,
	292, 1107,
	293, 1107,
	294, 1107,
	295, 1107,
	296, 1107,
	297, 1107,
	299, 1107,
	301, 1107,
	302, 1107,
	303, 1107,
	304, 1107,
	305, 1107,
	306, 1107,
	307, 1107,
	308, 1107,
	309, 1107,
	310, 1107,
	312, 1107,
	313, 1107,
	314, 1107,
	315, 1107,
	316, 1107,
	318, 1107,
	319, 1107,
	320, 1107,
	321, 1107,
	322, 1107,
	323, 1107,
	324, 1107,
	325, 1107,
	327, 1107,
	329, 1107,
	330, 1107,
	331, 1107,
	332, 1107,
	333, 1107,
	334, 1107,
	336, 1107,
	337, 1107,
	338, 1107,
	339, 1107,
	340, 1107,
	341, 1107,
	342, 1107,
	343, 1107,
	345, 1107,
	346, 1107,
	347, 1107,
	348, 1107,
	349, 1107,
	350, 1107,
	351, 1107,
	352, 1107,
	353, 1107,
	354, 1107,
	356, 1107,
	357, 1107,
	358, 1107,
	359, 1107,
	360, 1107,
	362, 1107,
	363, 1107,
	364, 1107,
	365, 1107,
	366, 1107,
	368, 1107,
	369, 1107,
	370, 1107,
	371, 1107,
	372, 1107,
	373, 1107,
	374, 1107,
	375, 1107,
	376, 1107,
	377, 1107,
	378, 1107,
	379, 1107,
	381, 1107,
	382, 1107,
	383, 1107,
	385, 1107,
	386, 1107,
	387, 1107,
	388, 1107,
	389, 1107,
	390, 1107,
	391, 1107,
	393, 1107,
	394, 1107,
	395, 1107,
	396, 1107,
	397, 1107,
	399, 1107,
	401, 1107,
	402, 1107,
	403, 1107,
	404, 1107,
	405, 1107,
	407, 1107,
	408, 1107,
	409, 1107,
	411, 1107,
	412, 1107,
	415, 1107,
	416, 1107,
	417, 1107,
	418, 1107,
	419, 1107,
	420, 1107,
	422, 1107,
	424, 1107,
	425, 1107,
	426, 1107,
	427, 1107,
	428, 1107,
	429, 1107,
	430, 1107,
	432, 1107,
	433, 1107,
	434, 1107,
	439, 1107,
	440, 1107,
	441, 1107,
	442, 1107,
	443, 1107,
	444, 1107,
	-2, 0,
	-1, 121,
	1, 980,
	205, 980,
	299, 980,
	307, 980,
	447, 980,
	470, 980,
	-2, 0,
	-1, 123,
	1, 980,
	470, 980,
	-2, 0,
	-1, 124,
	1, 980,
	470, 980,
	-2, 0,
	-1, 125,
	1, 984,
	470, 984,
	-2, 0,
	-1, 150,
	124, 1078,
	140, 1078,
	153, 1078,
	198, 1078,
	228, 1078,
	264, 1078,
	274, 1078,
	413, 1078,
	-2, 1053,
	-1, 183,
	4, 1114,
	5, 1114,
	6, 1114,
	7, 1114,
	8, 1114,
	9, 1114,
	10, 1114,
	21, 1114,
	22, 1114,
	23, 1114,
	24, 1114,
	25, 1114,
	27, 1114,
	33, 1114,
	34, 1114,
	38, 1114,
	39, 1114,
	40, 1114,
	41, 1114,
	42, 1114,
	43, 1114,
	44, 1114,
	45, 1114,
	46, 1114,
	47, 1114,
	48, 1114,
	49, 1114,
	50, 1114,
	52, 1114,
	53, 1114,
	54, 1114,
	55, 1114,
	56, 1114,
	57, 1114,
	58, 1114,
	59, 1114,
	60, 1114,
	61, 1114,
	62, 1114,
	63, 1114,
	65, 1114,
	66, 1114,
	68, 1114,
	70, 1114,
	71, 1114,
	72, 1114,
	73, 1114,
	74, 1114,
	75, 1114,
	77, 1114,
	78, 1114,
	79, 1114,
	80, 1114,
	82, 1114,
	84, 1114,
	85, 1114,
	86, 1114,
	88, 1114,
	89, 1114,
	90, 1114,
	91, 1114,
	92, 1114,
	93, 1114,
	94, 1114,
	95, 1114,
	96, 1114,
	97, 1114,
	98, 1114,
	99, 1114,
	100, 1114,
	101, 1114,
	102, 1114,
	103, 1114,
	104, 1114,
	105, 1114,
	106, 1114,
	107, 1114,
	108, 1114,
	110, 1114,
	111, 1114,
	113, 1114,
	116, 1114,
	117, 1114,
	118, 1114,
	120, 1114,
	122, 1114,
	123, 1114,
	125, 1114,
	126, 1114,
	127, 1114,
	128, 1114,
	129, 1114,
	130, 1114,
	131, 1114,
	132, 1114,
	133, 1114,
	134, 1114,
	135, 1114,
	136, 1114,
	137, 1114,
	138, 1114,
	139, 1114,
	145, 1114,
	146, 1114,
	147, 1114,
	148, 1114,
	149, 1114,
	150, 1114,
	152, 1114,
	154, 1114,
	157, 1114,
	158, 1114,
	159, 1114,
	161, 1114,
	162, 1114,
	164, 1114,
	165, 1114,
	167, 1114,
	168, 1114,
	169, 1114,
	170, 1114,
	171, 1114,
	172, 1114,
	173, 1114,
	174, 1114,
	175, 1114,
	176, 1114,
	177, 1114,
	179, 1114,
	180, 1114,
	181, 1114,
	184, 1114,
	185, 1114,
	186, 1114,
	187, 1114,
	189, 1114,
	190, 1114,
	191, 1114,
	192, 1114,
	193, 1114,
	194, 1114,
	195, 1114,
	196, 1114,
	197, 1114,
	199, 1114,
	201, 1114,
	202, 1114,
	203, 1114,
	204, 1114,
	205, 1114,
	206, 1114,
	207, 1114,
	208, 1114,
	209, 1114,
	210, 1114,
	213, 1114,
	214, 1114,
	215, 1114,
	216, 1114,
	217, 1114,
	219, 1114,
	220, 1114,
	222, 1114,
	223, 1114,
	224, 1114,
	225, 1114,
	226, 1114,
	227, 1114,
	229, 1114,
	230, 1114,
	231, 1114,
	232, 1114,
	233, 1114,
	234, 1114,
	235, 1114,
	237, 1114,
	238, 1114,
	239, 1114,
	240, 1114,
	241, 1114,
	242, 1114,
	243, 1114,
	244, 1114,
	245, 1114,
	246, 1114,
	247, 1114,
	248, 1114,
	249, 1114,
	250, 1114,
	251, 1114,
	252, 1114,
	253, 1114,
	254, 1114,
	255, 1114,
	256, 1114,
	257, 1114,
	258, 1114,
	259, 1114,
	260, 1114,
	261, 1114,
	262, 1114,
	263, 1114,
	265, 1114,
	266, 1114,
	267, 1114,
	270, 1114,
	271, 1114,
	272, 1114,
	275, 1114,
	276, 1114,
	277, 1114,
	278, 1114,
	279, 1114,
	280, 1114,
	281, 1114,
	282, 1114,
	283, 1114,
	284, 1114,
	285, 1114,
	286, 1114,
	287, 1114,
	288, 1114,
	289, 1114,
	290, 1114,
	292, 1114,
	293, 1114,
	294, 1114,
	295, 1114,
	296, 1114,
	297, 1114,
	299, 1114,
	301, 1114,
	302, 1114,
	303, 1114,
	304, 1114,
	305, 1114,
	306, 1114,
	307, 1114,
	308, 1114,
	309, 1114,
	310, 1114,
	312, 1114,
	313, 1114,
	314, 1114,
	315, 1114,
	316, 1114,
	318, 1114,
	319, 1114,
	320, 1114,
	321, 1114,
	322, 1114,
	323, 1114,
	324, 1114,
	325, 1114,
	327, 1114,
	328, 1114,
	329, 1114,
	330, 1114,
	331, 1114,
	332, 1114,
	333, 1114,
	334, 1114,
	336, 1114,
	337, 1114,
	338, 1114,
	339, 1114,
	340, 1114,
	341, 1114,
	342, 1114,
	343, 1114,
	345, 1114,
	346, 1114,
	347, 1114,
	348, 1114,
	349, 1114,
	350, 1114,
	351, 1114,
	352, 1114,
	353, 1114,
	354, 1114,
	355, 1114,
	356, 1114,
	357, 1114,
	358, 1114,
	359, 1114,
	360, 1114,
	361, 1114,
	362, 1114,
	363, 1114,
	364, 1114,
	365, 1114,
	366, 1114,
	368, 1114,
	369, 1114,
	370, 1114,
	371, 1114,
	372, 1114,
	373, 1114,
	374, 1114,
	375, 1114,
	376, 1114,
	377, 1114,
	378, 1114,
	379, 1114,
	381, 1114,
	382, 1114,
	383, 1114,
	385, 1114,
	386, 1114,
	387, 1114,
	388, 1114,
	389, 1114,
	390, 1114,
	391, 1114,
	393, 1114,
	394, 1114,
	395, 1114,
	396, 1114,
	397, 1114,
	399, 1114,
	401, 1114,
	402, 1114,
	403, 1114,
	404, 1114,
	405, 1114,
	406, 1114,
	407, 1114,
	408, 1114,
	409, 1114,
	411, 1114,
	412, 1114,
	414, 1114,
	415, 1114,
	416, 1114,
	417, 1114,
	418, 1114,
	419, 1114,
	420, 1114,
	421, 1114,
	422, 1114,
	424, 1114,
	425, 1114,
	426, 1114,
	427, 1114,
	428, 1114,
	429, 1114,
	430, 1114,
	432, 1114,
	433, 1114,
	434, 1114,
	439, 1114,
	440, 1114,
	441, 1114,
	442, 1114,
	443, 1114,
	444, 1114,
	445, 1114,
	451, 1114,
	458, 1114,
	459, 1114,
	460, 1114,
	467, 1114,
	471, 1114,
	-2, 0,
	-1, 565,
	156, 1814,
	398, 1814,
	450, 1814,
	469, 1814,
	-2, 0,
	-1, 566,
	156, 1894,
	398, 1894,
	450, 1894,
	469, 1894,
	-2, 0,
	-1, 567,
	156, 1803,
	398, 1803,
	450, 1803,
	469, 1803,
	-2, 0,
	-1, 569,
	156, 1988,
	398, 1988,
	450, 1988,
	469, 1988,
	-2, 0,
	-1, 571,
	156, 2018,
	398, 2018,
	450, 2018,
	469, 2018,
	-2, 0,
	-1, 578,
	156, 1905,
	398, 1905,
	450, 1905,
	469, 1905,
	-2, 510,
	-1, 599,
	469, 1760,
	472, 1760,
	-2, 714,
	-1, 600,
	469, 1762,
	472, 1762,
	-2, 715,
	-1, 601,
	469, 1761,
	472, 1761,
	-2, 716,
	-1, 602,
	472, 1699,
	-2, 717,
	-1, 645,
	432, 909,
	-2, 746,
	-1, 750,
	303, 644,
	354, 644,
	-2, 0,
	-1, 751,
	303, 643,
	354, 643,
	-2, 591,
	-1, 755,
	1, 673,
	466, 673,
	468, 673,
	470, 673,
	-2, 0,
	-1, 756,
	1, 713,
	153, 713,
	466, 713,
	468, 713,
	470, 713,
	-2, 0,
	-1, 764,
	1, 647,
	466, 647,
	468, 647,
	470, 647,
	-2, 0,
	-1, 767,
	1, 673,
	466, 673,
	468, 673,
	470, 673,
	-2, 0,
	-1, 768,
	1, 675,
	466, 675,
	468, 675,
	470, 675,
	-2, 0,
	-1, 769,
	1, 678,
	466, 678,
	468, 678,
	470, 678,
	-2, 0,
	-1, 773,
	1, 692,
	466, 692,
	468, 692,
	470, 692,
	-2, 0,
	-1, 774,
	1, 694,
	466, 694,
	468, 694,
	470, 694,
	-2, 0,
	-1, 818,
	140, 1116,
	153, 1116,
	228, 1116,
	264, 1116,
	-2, 1057,
	-1, 831,
	140, 1115,
	153, 1115,
	228, 1115,
	264, 1115,
	-2, 1054,
	-1, 855,
	469, 1759,
	-2, 518,
	-1, 883,
	467, 1751,
	-2, 1742,
	-1, 889,
	5, 1256,
	-2, 1793,
	-1, 890,
	5, 1257,
	-2, 1798,
	-1, 891,
	5, 1258,
	-2, 1797,
	-1, 892,
	5, 1259,
	-2, 2015,
	-1, 893,
	5, 1260,
	-2, 1907,
	-1, 894,
	5, 1261,
	-2, 1980,
	-1, 895,
	5, 1262,
	-2, 1982,
	-1, 896,
	5, 1263,
	-2, 1995,
	-1, 897,
	5, 1264,
	-2, 1983,
	-1, 898,
	5, 1265,
	-2, 1984,
	-1, 899,
	5, 1266,
	-2, 1792,
	-1, 900,
	5, 1267,
	-2, 2031,
	-1, 901,
	5, 1268,
	-2, 1868,
	-1, 902,
	5, 1269,
	-2, 1918,
	-1, 903,
	5, 1270,
	-2, 1920,
	-1, 904,
	5, 1271,
	-2, 1872,
	-1, 905,
	5, 1272,
	467, 1769,
	-2, 1760,
	-1, 911,
	467, 1770,
	-2, 1761,
	-1, 913,
	5, 1276,
	-2, 2064,
	-1, 914,
	5, 1277,
	-2, 2065,
	-1, 915,
	5, 1278,
	-2, 1871,
	-1, 916,
	5, 1279,
	-2, 2077,
	-1, 917,
	5, 1280,
	-2, 1873,
	-1, 918,
	5, 1281,
	-2, 1874,
	-1, 919,
	5, 1282,
	-2, 1875,
	-1, 920,
	5, 1283,
	-2, 2046,
	-1, 921,
	5, 1284,
	-2, 2075,
	-1, 922,
	5, 1285,
	-2, 1851,
	-1, 923,
	5, 1286,
	-2, 1852,
	-1, 924,
	5, 1300,
	-2, 2058,
	-1, 926,
	5, 1275,
	-2, 2054,
	-1, 927,
	5, 1275,
	-2, 2053,
	-1, 928,
	5, 1275,
	-2, 2070,
	-1, 929,
	5, 1292,
	-2, 2048,
	-1, 930,
	5, 1293,
	-2, 1794,
	-1, 931,
	5, 1303,
	-2, 2047,
	-1, 932,
	5, 1305,
	-2, 2086,
	-1, 934,
	5, 1316,
	-2, 1825,
	-1, 935,
	5, 1327,
	-2, 2079,
	-1, 936,
	5, 1319,
	-2, 2080,
	-1, 937,
	5, 1327,
	-2, 2081,
	-1, 938,
	5, 1323,
	-2, 2082,
	-1, 939,
	5, 1244,
	-2, 1881,
	-1, 940,
	5, 1245,
	-2, 1882,
	-1, 941,
	469, 1757,
	-2, 1741,
	-1, 942,
	467, 2107,
	-2, 1758,
	-1, 964,
	5, 1311,
	-2, 2006,
	-1, 982,
	5, 1310,
	-2, 2087,
	-1, 992,
	5, 1312,
	433, 1312,
	-2, 2049,
	-1, 993,
	5, 1313,
	433, 1313,
	-2, 2050,
	-1, 1030,
	467, 1769,
	-2, 1760,
	-1, 1058,
	156, 2018,
	398, 2018,
	450, 2018,
	469, 2018,
	-2, 0,
	-1, 1061,
	1, 496,
	470, 496,
	-2, 992,
	-1, 1181,
	318, 1738,
	460, 1738,
	-2, 1737,
	-1, 1204,
	471, 1738,
	-2, 1739,
	-1, 1244,
	309, 745,
	432, 745,
	-2, 252,
	-1, 1264,
	288, 1103,
	-2, 885,
	-1, 1273,
	268, 1764,
	-2, 0,
	-1, 1339,
	1, 371,
	466, 371,
	468, 371,
	470, 371,
	-2, 1077,
	-1, 1342,
	4, 2085,
	11, 2085,
	12, 2085,
	14, 2085,
	15, 2085,
	16, 2085,
	17, 2085,
	18, 2085,
	19, 2085,
	21, 2085,
	22, 2085,
	23, 2085,
	24, 2085,
	25, 2085,
	27, 2085,
	30, 2085,
	31, 2085,
	33, 2085,
	35, 2085,
	38, 2085,
	39, 2085,
	40, 2085,
	41, 2085,
	42, 2085,
	43, 2085,
	44, 2085,
	45, 2085,
	46, 2085,
	47, 2085,
	48, 2085,
	49, 2085,
	50, 2085,
	52, 2085,
	53, 2085,
	54, 2085,
	55, 2085,
	56, 2085,
	57, 2085,
	60, 2085,
	61, 2085,
	62, 2085,
	63, 2085,
	65, 2085,
	66, 2085,
	67, 2085,
	70, 2085,
	71, 2085,
	72, 2085,
	73, 2085,
	74, 2085,
	75, 2085,
	76, 2085,
	77, 2085,
	78, 2085,
	79, 2085,
	80, 2085,
	82, 2085,
	83, 2085,
	84, 2085,
	85, 2085,
	86, 2085,
	88, 2085,
	89, 2085,
	90, 2085,
	91, 2085,
	99, 2085,
	100, 2085,
	101, 2085,
	102, 2085,
	103, 2085,
	104, 2085,
	105, 2085,
	106, 2085,
	108, 2085,
	110, 2085,
	111, 2085,
	113, 2085,
	116, 2085,
	117, 2085,
	118, 2085,
	120, 2085,
	122, 2085,
	123, 2085,
	125, 2085,
	126, 2085,
	127, 2085,
	128, 2085,
	129, 2085,
	130, 2085,
	131, 2085,
	132, 2085,
	133, 2085,
	134, 2085,
	135, 2085,
	136, 2085,
	137, 2085,
	141, 2085,
	142, 2085,
	143, 2085,
	144, 2085,
	145, 2085,
	146, 2085,
	147, 2085,
	148, 2085,
	149, 2085,
	150, 2085,
	151, 2085,
	152, 2085,
	154, 2085,
	157, 2085,
	158, 2085,
	159, 2085,
	161, 2085,
	162, 2085,
	164, 2085,
	165, 2085,
	167, 2085,
	168, 2085,
	169, 2085,
	170, 2085,
	171, 2085,
	172, 2085,
	173, 2085,
	174, 2085,
	175, 2085,
	176, 2085,
	177, 2085,
	178, 2085,
	179, 2085,
	180, 2085,
	181, 2085,
	182, 2085,
	183, 2085,
	185, 2085,
	186, 2085,
	187, 2085,
	189, 2085,
	190, 2085,
	191, 2085,
	192, 2085,
	193, 2085,
	194, 2085,
	195, 2085,
	196, 2085,
	197, 2085,
	199, 2085,
	201, 2085,
	202, 2085,
	203, 2085,
	204, 2085,
	205, 2085,
	206, 2085,
	207, 2085,
	208, 2085,
	209, 2085,
	210, 2085,
	211, 2085,
	212, 2085,
	213, 2085,
	214, 2085,
	215, 2085,
	216, 2085,
	217, 2085,
	219, 2085,
	220, 2085,
	222, 2085,
	223, 2085,
	224, 2085,
	225, 2085,
	226, 2085,
	227, 2085,
	229, 2085,
	230, 2085,
	233, 2085,
	234, 2085,
	235, 2085,
	236, 2085,
	237, 2085,
	238, 2085,
	239, 2085,
	240, 2085,
	241, 2085,
	242, 2085,
	243, 2085,
	244, 2085,
	245, 2085,
	246, 2085,
	247, 2085,
	248, 2085,
	249, 2085,
	250, 2085,
	251, 2085,
	253, 2085,
	256, 2085,
	257, 2085,
	259, 2085,
	260, 2085,
	261, 2085,
	262, 2085,
	263, 2085,
	265, 2085,
	266, 2085,
	267, 2085,
	270, 2085,
	271, 2085,
	272, 2085,
	273, 2085,
	275, 2085,
	276, 2085,
	277, 2085,
	279, 2085,
	281, 2085,
	282, 2085,
	283, 2085,
	284, 2085,
	285, 2085,
	286, 2085,
	287, 2085,
	288, 2085,
	289, 2085,
	290, 2085,
	292, 2085,
	293, 2085,
	294, 2085,
	295, 2085,
	296, 2085,
	297, 2085,
	299, 2085,
	301, 2085,
	302, 2085,
	303, 2085,
	304, 2085,
	305, 2085,
	306, 2085,
	307, 2085,
	308, 2085,
	309, 2085,
	310, 2085,
	312, 2085,
	313, 2085,
	314, 2085,
	315, 2085,
	316, 2085,
	317, 2085,
	318, 2085,
	319, 2085,
	320, 2085,
	321, 2085,
	322, 2085,
	323, 2085,
	324, 2085,
	325, 2085,
	327, 2085,
	328, 2085,
	329, 2085,
	330, 2085,
	331, 2085,
	332, 2085,
	333, 2085,
	334, 2085,
	335, 2085,
	336, 2085,
	337, 2085,
	338, 2085,
	339, 2085,
	340, 2085,
	341, 2085,
	342, 2085,
	343, 2085,
	345, 2085,
	346, 2085,
	347, 2085,
	348, 2085,
	349, 2085,
	350, 2085,
	351, 2085,
	352, 2085,
	353, 2085,
	354, 2085,
	356, 2085,
	357, 2085,
	358, 2085,
	359, 2085,
	360, 2085,
	361, 2085,
	362, 2085,
	363, 2085,
	364, 2085,
	365, 2085,
	366, 2085,
	368, 2085,
	369, 2085,
	370, 2085,
	371, 2085,
	372, 2085,
	373, 2085,
	374, 2085,
	375, 2085,
	376, 2085,
	377, 2085,
	378, 2085,
	379, 2085,
	381, 2085,
	382, 2085,
	383, 2085,
	385, 2085,
	386, 2085,
	387, 2085,
	388, 2085,
	389, 2085,
	390, 2085,
	391, 2085,
	393, 2085,
	394, 2085,
	395, 2085,
	396, 2085,
	397, 2085,
	399, 2085,
	401, 2085,
	402, 2085,
	403, 2085,
	404, 2085,
	405, 2085,
	407, 2085,
	408, 2085,
	409, 2085,
	411, 2085,
	412, 2085,
	415, 2085,
	416, 2085,
	417, 2085,
	418, 2085,
	419, 2085,
	420, 2085,
	422, 2085,
	424, 2085,
	425, 2085,
	426, 2085,
	427, 2085,
	428, 2085,
	429, 2085,
	430, 2085,
	432, 2085,
	433, 2085,
	434, 2085,
	439, 2085,
	440, 2085,
	441, 2085,
	442, 2085,
	443, 2085,
	444, 2085,
	445, 2085,
	446, 2085,
	448, 2085,
	449, 2085,
	450, 2085,
	451, 2085,
	452, 2085,
	453, 2085,
	455, 2085,
	456, 2085,
	457, 2085,
	458, 2085,
	459, 2085,
	460, 2085,
	461, 2085,
	462, 2085,
	463, 2085,
	465, 2085,
	468, 2085,
	469, 2085,
	471, 2085,
	472, 2085,
	-2, 0,
	-1, 1347,
	156, 1988,
	398, 1988,
	450, 1988,
	469, 1988,
	-2, 0,
	-1, 1379,
	303, 644,
	354, 644,
	-2, 0,
	-1, 1403,
	1, 639,
	466, 639,
	468, 639,
	470, 639,
	-2, 0,
	-1, 1404,
	1, 664,
	466, 664,
	468, 664,
	470, 664,
	-2, 0,
	-1, 1405,
	1, 646,
	466, 646,
	468, 646,
	470, 646,
	-2, 0,
	-1, 1407,
	1, 650,
	466, 650,
	468, 650,
	470, 650,
	-2, 0,
	-1, 1432,
	1, 2038,
	466, 2038,
	468, 2038,
	469, 2038,
	470, 2038,
	-2, 690,
	-1, 1433,
	1, 1985,
	466, 1985,
	468, 1985,
	469, 1985,
	470, 1985,
	-2, 691,
	-1, 1448,
	1, 987,
	470, 987,
	-2, 992,
	-1, 1452,
	140, 1115,
	153, 1115,
	228, 1115,
	264, 1115,
	-2, 1058,
	-1, 1546,
	124, 1079,
	140, 1079,
	153, 1079,
	198, 1079,
	228, 1079,
	264, 1079,
	274, 1079,
	413, 1079,
	-2, 1485,
	-1, 1603,
	468, 1633,
	-2, 0,
	-1, 1637,
	124, 1079,
	140, 1079,
	153, 1079,
	198, 1079,
	228, 1079,
	264, 1079,
	274, 1079,
	413, 1079,
	-2, 1194,
	-1, 1696,
	467, 1315,
	-2, 1303,
	-1, 1740,
	1, 498,
	470, 498,
	-2, 992,
	-1, 1955,
	1, 641,
	466, 641,
	468, 641,
	470, 641,
	-2, 0,
	-1, 1956,
	1, 666,
	466, 666,
	468, 666,
	470, 666,
	-2, 0,
	-1, 2028,
	333, 1140,
	334, 1140,
	-2, 1348,
	-1, 2059,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1366,
	-1, 2060,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1367,
	-1, 2061,
	83, 0,
	211, 0,
	212, 0,
	452, 0,
	453, 0,
	-2, 1368,
	-1, 2062,
	83, 0,
	211, 0,
	212, 0,
	452, 0,
	453, 0,
	-2, 1369,
	-1, 2063,
	83, 0,
	211, 0,
	212, 0,
	452, 0,
	453, 0,
	-2, 1370,
	-1, 2064,
	83, 0,
	211, 0,
	212, 0,
	452, 0,
	453, 0,
	-2, 1371,
	-1, 2065,
	83, 0,
	211, 0,
	212, 0,
	452, 0,
	453, 0,
	-2, 1372,
	-1, 2066,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1373,
	-1, 2078,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1385,
	-1, 2079,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1386,
	-1, 2080,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1387,
	-1, 2083,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1392,
	-1, 2089,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1396,
	-1, 2091,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1404,
	-1, 2092,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1405,
	-1, 2093,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1406,
	-1, 2094,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1407,
	-1, 2196,
	5, 1272,
	156, 1644,
	467, 1769,
	-2, 1760,
	-1, 2197,
	156, 1645,
	-2, 2042,
	-1, 2198,
	156, 1646,
	-2, 1904,
	-1, 2199,
	156, 1647,
	-2, 1826,
	-1, 2200,
	156, 1648,
	-2, 1862,
	-1, 2201,
	156, 1649,
	-2, 1902,
	-1, 2202,
	156, 1650,
	-2, 1979,
	-1, 2203,
	156, 1651,
	-2, 1469,
	-1, 2272,
	1, 1195,
	2, 1195,
	89, 1195,
	124, 1195,
	140, 1195,
	153, 1195,
	157, 1195,
	163, 1195,
	166, 1195,
	189, 1195,
	198, 1195,
	208, 1195,
	224, 1195,
	228, 1195,
	247, 1195,
	264, 1195,
	268, 1195,
	274, 1195,
	326, 1195,
	328, 1195,
	413, 1195,
	423, 1195,
	436, 1195,
	437, 1195,
	438, 1195,
	447, 1195,
	466, 1195,
	468, 1195,
	470, 1195,
	472, 1195,
	-2, 1194,
	-1, 2285,
	467, 1743,
	-2, 1755,
	-1, 2305,
	467, 1314,
	-2, 1304,
	-1, 2553,
	269, 1143,
	-2, 2076,
	-1, 2554,
	269, 1144,
	-2, 1968,
	-1, 2558,
	333, 1710,
	334, 1710,
	-2, 1467,
	-1, 2559,
	333, 1714,
	334, 1714,
	-2, 1468,
	-1, 2560,
	333, 1711,
	334, 1711,
	-2, 1467,
	-1, 2561,
	333, 1715,
	334, 1715,
	-2, 1468,
	-1, 2574,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1394,
	-1, 2575,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1398,
	-1, 2581,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1400,
	-1, 2770,
	205, 992,
	299, 992,
	307, 992,
	447, 992,
	-2, 495,
	-1, 2865,
	288, 1103,
	-2, 885,
	-1, 2955,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1402,
	-1, 2962,
	202, 0,
	204, 0,
	256, 0,
	-2, 1421,
	-1, 3025,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1450,
	-1, 3026,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1451,
	-1, 3027,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1452,
	-1, 3031,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1456,
	-1, 3032,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1457,
	-1, 3033,
	14, 0,
	15, 0,
	16, 0,
	448, 0,
	449, 0,
	450, 0,
	-2, 1458,
	-1, 3077,
	467, 1744,
	-2, 1756,
	-1, 3169,
	469, 2189,
	-2, 1036,
	-1, 3219,
	202, 0,
	204, 0,
	256, 0,
	-2, 1422,
	-1, 3222,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1425,
	-1, 3223,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1427,
	-1, 3388,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1426,
	-1, 3389,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	175, 0,
	178, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 1428,
	-1, 3399,
	202, 0,
	-2, 1459,
	-1, 3513,
	202, 0,
	-2, 1460,
	-1, 3642,
	43, 0,
	175, 0,
	227, 0,
	361, 0,
	445, 0,
	451, 0,
	-2, 2045,
}

const sqlPrivate = 57344

const sqlLast = 84911

var sqlAct = [...]int{

	911, 3747, 3431, 3457, 3428, 3641, 3652, 3534, 2701, 3734,
	3619, 3323, 3202, 3610, 3607, 2852, 2228, 3592, 3654, 3653,
	3417, 3692, 2453, 3464, 3517, 2993, 3640, 1031, 2702, 3353,
	2046, 2337, 841, 3377, 3161, 3156, 2881, 1185, 3473, 215,
	856, 215, 215, 2787, 215, 215, 215, 215, 215, 3336,
	3280, 215, 3139, 1671, 1331, 2874, 832, 2106, 2947, 2876,
	601, 1907, 576, 1327, 3098, 3358, 2848, 2486, 1838, 1461,
	1215, 3403, 3097, 2442, 2567, 1086, 2424, 2488, 215, 2416,
	1178, 1643, 601, 2397, 2724, 2687, 2427, 3201, 2744, 697,
	1884, 1023, 2716, 2477, 2485, 2496, 1887, 2479, 2705, 1612,
	2454, 3253, 2339, 1814, 3518, 1800, 3048, 1837, 2265, 1574,
	2043, 2602, 1554, 1875, 1831, 2119, 2686, 2039, 2150, 2211,
	1791, 2551, 2707, 2148, 1197, 1820, 1827, 1876, 2264, 840,
	143, 2495, 907, 2425, 1778, 2400, 1074, 2103, 1776, 2139,
	1613, 2267, 2372, 1448, 2750, 1387, 2225, 2027, 1314, 2246,
	2010, 1355, 87, 3458, 1929, 2008, 2850, 1324, 4, 1340,
	1766, 1194, 2447, 1867, 1262, 2489, 1187, 1063, 1833, 602,
	544, 1632, 1014, 209, 2329, 603, 208, 2142, 215, 215,
	1017, 1569, 530, 2254, 1622, 996, 552, 2236, 2192, 2120,
	1537, 150, 1463, 1462, 2009, 560, 2011, 597, 1354, 1866,
	570, 672, 1338, 1013, 1893, 151, 143, 645, 1629, 1288,
	1212, 1790, 37, 2032, 547, 2373, 555, 868, 36, 994,
	32, 34, 207, 25, 745, 23, 21, 1468, 1447, 762,
	1270, 1019, 3062, 606, 3063, 691, 609, 2598, 3780, 1406,
	2703, 836, 2245, 3770, 1909, 1909, 1909, 2245, 3769, 3744,
	3724, 836, 2245, 1843, 3294, 606, 3722, 3678, 609, 2891,
	3294, 3679, 3676, 831, 3674, 3671, 2245, 3668, 2245, 3672,
	3663, 3669, 2245, 3638, 1843, 3587, 2890, 1843, 3637, 708,
	3636, 1233, 1843, 3633, 1921, 2768, 2238, 1921, 3632, 1476,
	1477, 3605, 1921, 3586, 3580, 3294, 845, 2300, 2245, 3579,
	3574, 1048, 3573, 2245, 3294, 837, 3294, 3567, 1011, 1507,
	3561, 1843, 3499, 3559, 3294, 3052, 1479, 3294, 3515, 997,
	997, 3496, 2300, 3493, 3466, 1843, 3447, 3294, 3467, 3446,
	1843, 2393, 3438, 1843, 3437, 819, 1843, 3409, 3294, 3390,
	3375, 1843, 3366, 2300, 1921, 1478, 2904, 2659, 2660, 818,
	1672, 3321, 3312, 3293, 1498, 2245, 2245, 3294, 3221, 3177,
	3171, 1495, 2300, 2920, 2920, 3137, 3072, 3070, 3055, 3138,
	3073, 3071, 2245, 2977, 826, 1071, 2974, 1843, 2919, 2911,
	2245, 2700, 2920, 2912, 2698, 2245, 2697, 2651, 2245, 2630,
	2245, 2245, 2613, 2631, 2359, 2237, 2245, 2611, 998, 1071,
	3052, 3215, 2475, 2612, 2474, 2402, 1925, 1545, 1925, 1921,
	2313, 2299, 2674, 2296, 2245, 2300, 1000, 1043, 1001, 1501,
	1502, 1503, 1504, 2294, 1937, 1921, 2287, 2245, 2244, 1484,
	1843, 1924, 2245, 3313, 1843, 1925, 2912, 1221, 2388, 2245,
	1795, 2328, 1746, 1476, 1477, 2450, 183, 1843, 1908, 2601,
	1232, 2904, 2422, 183, 2566, 1842, 2326, 1608, 1211, 3125,
	1506, 1508, 2950, 1507, 2928, 1630, 1830, 1389, 1476, 1477,
	1479, 2281, 2280, 2892, 2279, 2278, 2277, 1002, 999, 825,
	824, 823, 822, 821, 817, 816, 185, 2665, 815, 1493,
	1494, 1044, 2893, 185, 814, 1479, 813, 812, 2531, 1478,
	811, 183, 1476, 1477, 810, 1509, 1510, 1511, 1519, 1520,
	1521, 1910, 1910, 1910, 1499, 809, 183, 2659, 2660, 808,
	807, 1512, 1507, 806, 1478, 805, 743, 2659, 2660, 1479,
	184, 742, 76, 741, 1525, 215, 740, 184, 2262, 739,
	177, 185, 738, 737, 736, 735, 933, 177, 178, 734,
	733, 867, 732, 731, 730, 178, 185, 729, 1478, 728,
	727, 2659, 2660, 215, 2677, 2678, 2679, 1498, 726, 152,
	215, 725, 2675, 3269, 1495, 2890, 152, 724, 723, 3232,
	3217, 183, 722, 1484, 721, 184, 215, 1089, 215, 215,
	1190, 215, 1089, 215, 1190, 1505, 720, 1190, 719, 1545,
	184, 1044, 2237, 718, 717, 215, 215, 1073, 1484, 706,
	177, 1078, 705, 1500, 1506, 1508, 663, 1044, 178, 662,
	622, 185, 621, 183, 152, 620, 2674, 2435, 612, 611,
	215, 610, 1501, 1502, 1503, 1504, 583, 2659, 2660, 152,
	1067, 582, 1484, 581, 215, 580, 564, 1190, 1190, 215,
	215, 205, 215, 204, 203, 202, 1200, 2665, 2183, 1917,
	1908, 2003, 215, 185, 201, 184, 1516, 2665, 1499, 1526,
	215, 2676, 1408, 1506, 1508, 177, 200, 199, 198, 197,
	196, 195, 183, 178, 215, 215, 215, 215, 215, 1190,
	1190, 194, 193, 1522, 1190, 1523, 192, 215, 1190, 215,
	215, 2665, 1493, 1494, 152, 191, 190, 184, 1190, 189,
	188, 187, 186, 3066, 215, 1061, 2921, 177, 1514, 2747,
	2624, 2607, 185, 2406, 2288, 178, 1577, 1499, 2271, 1227,
	1496, 1492, 1576, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 2675, 183, 1335, 1577, 152, 1524, 1207, 1633,
	1190, 1576, 2680, 1580, 2169, 3659, 2659, 2660, 1082, 119,
	1175, 1180, 2167, 1774, 1513, 1656, 184, 1500, 1563, 1556,
	1056, 1475, 1575, 215, 1214, 1217, 177, 2665, 606, 183,
	1213, 609, 1080, 185, 178, 1033, 2675, 215, 1932, 3639,
	3554, 2670, 2668, 2669, 2661, 2662, 2663, 2664, 2666, 2667,
	3508, 3427, 215, 1359, 3362, 2449, 1561, 3367, 1505, 3502,
	2436, 1181, 3500, 1275, 3273, 1204, 3252, 3251, 2145, 185,
	1476, 1477, 3239, 3238, 143, 143, 1500, 184, 3237, 3143,
	3236, 3231, 3123, 1318, 1321, 3229, 1220, 177, 1225, 3228,
	1231, 2676, 3136, 3086, 3085, 178, 837, 1479, 3084, 1328,
	2659, 2660, 1517, 1343, 1345, 3076, 3045, 1931, 1067, 3044,
	1341, 1067, 2675, 184, 3043, 1291, 152, 1556, 2970, 2966,
	2915, 1271, 1271, 177, 2742, 1453, 1478, 2659, 2660, 2694,
	1272, 178, 2685, 2658, 2146, 2676, 2655, 1489, 1487, 1488,
	1480, 1481, 1482, 1483, 1485, 1486, 2665, 2654, 1226, 2652,
	1010, 1557, 152, 1555, 1881, 2637, 2636, 839, 2635, 1204,
	2632, 2629, 2623, 1416, 2606, 1480, 1481, 1482, 1483, 1485,
	1486, 2599, 2476, 2272, 1353, 2302, 2132, 1475, 1474, 3777,
	1452, 3743, 1358, 3742, 1848, 3677, 1515, 1846, 1032, 1490,
	1491, 1497, 1518, 1496, 1492, 2995, 1489, 1487, 1488, 1480,
	1481, 1482, 1483, 1485, 1486, 1544, 2147, 2144, 3519, 1446,
	1484, 2676, 3628, 3240, 2661, 2662, 2663, 2664, 2666, 2667,
	3626, 1364, 2434, 2762, 2661, 2662, 2663, 2664, 2666, 2667,
	3548, 1380, 3545, 3412, 3542, 1407, 3541, 3540, 3533, 910,
	2665, 3527, 213, 3497, 3492, 3491, 215, 1451, 2671, 2672,
	2673, 2115, 2109, 3361, 3443, 2670, 2668, 2669, 2661, 2662,
	2663, 2664, 2666, 2667, 3423, 3401, 3385, 2665, 3384, 3372,
	3371, 1449, 3351, 215, 3348, 1610, 1619, 1458, 837, 1457,
	3142, 3340, 819, 215, 1089, 215, 215, 215, 215, 3268,
	3250, 3191, 3188, 601, 215, 215, 818, 1579, 601, 215,
	3114, 3113, 1454, 3101, 215, 3100, 1666, 2149, 3343, 2739,
	1190, 3058, 1471, 1472, 2961, 1541, 2922, 2905, 2868, 2837,
	2813, 183, 1738, 2790, 2789, 2675, 2763, 2699, 2628, 2627,
	2622, 1089, 2668, 2669, 2661, 2662, 2663, 2664, 2666, 2667,
	2590, 2659, 2660, 3270, 2677, 2678, 2679, 1743, 2415, 1581,
	1578, 1664, 2675, 1658, 1616, 1617, 1570, 1772, 1567, 1571,
	1572, 185, 2307, 2306, 1668, 2283, 1737, 2276, 2243, 1735,
	2165, 1655, 1611, 3225, 2182, 1087, 1607, 1067, 1606, 1605,
	1198, 1476, 1477, 1604, 1603, 1602, 1601, 997, 1600, 1599,
	1597, 1640, 1596, 1595, 1594, 1593, 855, 1592, 1591, 1590,
	143, 1589, 1588, 2790, 1587, 184, 2674, 2143, 1479, 1586,
	1585, 1584, 1583, 1558, 1542, 177, 1540, 1535, 1933, 1662,
	1055, 837, 1046, 178, 2676, 1026, 1039, 3082, 3069, 3061,
	3272, 2309, 2610, 2274, 1795, 2659, 2660, 1478, 3081, 1557,
	2760, 1641, 1651, 1538, 152, 3315, 1660, 3740, 3733, 1638,
	1077, 2676, 1740, 3543, 2877, 2663, 2664, 2666, 2667, 3469,
	1190, 1190, 215, 2816, 3468, 1609, 606, 1765, 1089, 609,
	2168, 606, 1075, 1631, 609, 1765, 3365, 3314, 2166, 1765,
	3064, 2665, 2907, 1650, 2906, 1071, 1784, 1577, 1068, 1649,
	1667, 1647, 1648, 1576, 1646, 1734, 1645, 1644, 1635, 183,
	3503, 1633, 1076, 3501, 3146, 3474, 1444, 215, 2681, 1669,
	1204, 215, 215, 1071, 1839, 1741, 3426, 2634, 1562, 1482,
	1483, 1485, 1486, 2377, 215, 1592, 2633, 2572, 1592, 2361,
	1062, 1072, 2680, 215, 3112, 215, 1768, 215, 1763, 185,
	1758, 215, 1379, 1752, 2670, 2668, 2669, 2661, 2662, 2663,
	2664, 2666, 2667, 1071, 1417, 215, 2854, 1388, 2853, 1565,
	1930, 1813, 1799, 3465, 803, 1817, 2675, 3664, 1819, 1835,
	3651, 1824, 1389, 2669, 2661, 2662, 2663, 2664, 2666, 2667,
	1815, 1835, 1069, 184, 1835, 3128, 1882, 3116, 2926, 3404,
	1070, 2140, 1870, 177, 3748, 1190, 2703, 1190, 215, 1190,
	2997, 178, 215, 804, 1828, 2305, 2303, 1190, 1598, 1573,
	1190, 215, 1840, 215, 215, 1009, 2616, 3660, 2846, 1874,
	1248, 3673, 152, 1190, 1190, 1190, 2145, 215, 3670, 1890,
	1912, 1214, 1878, 1914, 215, 606, 1916, 1213, 609, 2886,
	1919, 3093, 3535, 601, 215, 1368, 215, 3603, 215, 3157,
	215, 3524, 215, 3107, 2483, 2446, 1757, 1756, 2018, 3709,
	1765, 1767, 1823, 3566, 3708, 2676, 215, 2942, 3304, 215,
	2772, 215, 1841, 1236, 3661, 658, 799, 2314, 2341, 3774,
	215, 2761, 1898, 1476, 1477, 797, 2018, 2332, 1246, 1951,
	1414, 1935, 2146, 1792, 2016, 3456, 835, 1858, 795, 2330,
	793, 215, 1857, 1507, 790, 2332, 215, 784, 1415, 883,
	1479, 3449, 1936, 3130, 1077, 1989, 1753, 2330, 1068, 1987,
	3127, 3126, 2016, 1788, 3090, 3089, 2621, 2620, 2443, 1089,
	1071, 1836, 2619, 1068, 1873, 1795, 1291, 2618, 1895, 1478,
	1895, 1896, 1892, 1836, 1793, 1794, 1836, 837, 1077, 837,
	1900, 1901, 2014, 2774, 659, 2576, 2395, 2002, 2387, 1760,
	1247, 1341, 2384, 1341, 2147, 2144, 1076, 2364, 2007, 2344,
	834, 2295, 1789, 2815, 1941, 1413, 1947, 909, 2671, 2672,
	2673, 2090, 2020, 1450, 1210, 2670, 2668, 2669, 2661, 2662,
	2663, 2664, 2666, 2667, 2161, 2160, 1366, 1926, 1056, 1927,
	1076, 2048, 2927, 1856, 2017, 1938, 2534, 2587, 2121, 2122,
	1940, 787, 1069, 3728, 1089, 1651, 606, 855, 3383, 609,
	1070, 855, 1659, 1484, 2121, 2137, 3565, 1069, 1281, 1173,
	1280, 2585, 2017, 1486, 1173, 1070, 1279, 2363, 1278, 1302,
	1969, 1361, 1242, 1698, 2001, 1945, 836, 1997, 1674, 1256,
	2321, 1762, 3433, 2000, 1506, 1508, 2286, 2352, 1962, 215,
	2105, 2105, 2564, 2015, 2191, 2149, 2195, 2195, 2209, 1775,
	2121, 3737, 2933, 2229, 2231, 2549, 3300, 2031, 2235, 3630,
	1377, 1089, 1761, 215, 2113, 3729, 3657, 2667, 1456, 2537,
	2111, 2015, 215, 2351, 2317, 1029, 2004, 2381, 2006, 1897,
	2005, 1959, 2012, 3316, 215, 2019, 2319, 1089, 1499, 1954,
	819, 1955, 2343, 819, 819, 1054, 1403, 2374, 2375, 3154,
	2136, 1381, 2284, 3103, 2035, 2374, 2375, 2036, 2037, 2374,
	2375, 1879, 2140, 2932, 1832, 2528, 1999, 2582, 2320, 2158,
	1362, 1963, 1786, 837, 2159, 2149, 2293, 2162, 1443, 2163,
	2164, 2583, 715, 2318, 837, 2588, 1263, 2986, 837, 3751,
	1071, 1412, 1956, 1025, 2259, 2143, 3708, 1404, 2563, 2884,
	3697, 3731, 3207, 1036, 1826, 1071, 2883, 2117, 1244, 2556,
	2557, 3206, 661, 660, 2827, 833, 2821, 215, 1812, 1786,
	1389, 2536, 1261, 1389, 1825, 1190, 2251, 2134, 1797, 1795,
	997, 3536, 2983, 1263, 2803, 1034, 1844, 1500, 3763, 2771,
	2533, 851, 1640, 2028, 3658, 2773, 3115, 3696, 3382, 1909,
	2273, 2840, 2250, 3298, 1821, 1089, 690, 2883, 2342, 1568,
	215, 656, 1743, 655, 2331, 3332, 2758, 2362, 215, 2204,
	3291, 2385, 837, 2220, 2233, 1793, 1794, 1996, 2802, 215,
	143, 2258, 1427, 2263, 2241, 2242, 2269, 2270, 2149, 2252,
	2256, 2257, 215, 3735, 1067, 1786, 1367, 1190, 3584, 3288,
	1638, 3203, 801, 1822, 2984, 3395, 800, 2044, 2045, 2297,
	215, 1089, 3717, 1779, 3615, 791, 1579, 1780, 1037, 2535,
	3547, 3656, 1534, 215, 215, 779, 2626, 2333, 791, 2584,
	792, 2268, 2131, 2255, 791, 3752, 3342, 836, 2586, 2332,
	1769, 1770, 3289, 542, 1988, 3730, 215, 830, 1986, 215,
	3197, 2346, 3078, 1301, 2312, 215, 1241, 2308, 1487, 1488,
	1480, 1481, 1482, 1483, 1485, 1486, 1998, 537, 3736, 3379,
	215, 1961, 2382, 2396, 3434, 1049, 3299, 3655, 215, 2212,
	215, 1571, 1572, 215, 613, 2366, 3208, 2311, 2944, 215,
	3695, 3104, 215, 2315, 215, 1365, 215, 779, 215, 215,
	3738, 215, 1190, 1190, 1190, 2149, 1190, 2547, 1781, 2457,
	3707, 215, 215, 1391, 215, 215, 2419, 3705, 1190, 830,
	3480, 1783, 780, 788, 3333, 2336, 215, 2398, 2403, 2376,
	2378, 2379, 2380, 2578, 2104, 2345, 2348, 3350, 3582, 2872,
	2354, 2438, 215, 215, 215, 1865, 2497, 215, 1618, 215,
	1047, 2365, 215, 1363, 215, 2112, 215, 2470, 2471, 1042,
	2440, 2466, 529, 716, 2383, 1376, 1378, 3583, 1818, 3141,
	3034, 1466, 3378, 1455, 2432, 866, 1785, 215, 215, 215,
	215, 215, 215, 2399, 215, 1424, 1026, 1958, 1026, 3284,
	3204, 2358, 1214, 3285, 780, 1953, 606, 2047, 2404, 609,
	1053, 2482, 2413, 1698, 1698, 3764, 1173, 2516, 1674, 1674,
	3248, 2805, 2423, 941, 1181, 215, 1910, 2518, 1035, 2519,
	2034, 2459, 1796, 215, 2392, 1754, 2501, 2948, 2751, 2504,
	3757, 2505, 1204, 3287, 143, 1621, 3440, 2807, 1621, 2452,
	2463, 2539, 2464, 2541, 2465, 1779, 3290, 855, 2408, 1780,
	2410, 3439, 211, 1173, 532, 533, 2467, 548, 532, 548,
	558, 563, 2468, 2472, 579, 2473, 3421, 781, 2347, 2500,
	2484, 2499, 1341, 211, 2502, 2503, 1786, 1534, 3380, 1425,
	3523, 3092, 2152, 2508, 2509, 2510, 2513, 2806, 614, 615,
	2873, 701, 2864, 1625, 2448, 211, 2520, 2448, 2522, 2785,
	2524, 1465, 2781, 1625, 2515, 2439, 1625, 2426, 2809, 1465,
	3035, 2087, 215, 2521, 1460, 2523, 2532, 2525, 3036, 2101,
	1204, 1204, 2604, 2605, 3303, 1628, 2579, 2608, 1751, 2555,
	2417, 3302, 2367, 1891, 538, 1628, 1835, 2546, 1628, 781,
	1781, 2545, 2542, 2099, 2253, 1880, 1779, 2726, 1877, 3286,
	1780, 2550, 1426, 1783, 1623, 1852, 2544, 1623, 3249, 2600,
	1626, 1027, 2982, 2565, 2031, 2024, 1204, 3593, 2945, 3549,
	1626, 1993, 3162, 1626, 1465, 2285, 782, 1747, 3354, 1392,
	2414, 3756, 2609, 2526, 1304, 617, 616, 539, 2247, 1464,
	1173, 532, 532, 1624, 2368, 1749, 1624, 1464, 3209, 211,
	1204, 3463, 1204, 2591, 2592, 2577, 3461, 3422, 1785, 2795,
	2792, 2791, 2570, 1750, 2718, 783, 1782, 2548, 1946, 3060,
	1089, 2715, 2714, 2727, 2696, 1466, 1405, 540, 2292, 541,
	2710, 2711, 712, 1466, 2291, 618, 619, 2290, 2289, 215,
	2712, 1781, 837, 2085, 215, 704, 2088, 215, 782, 2095,
	215, 215, 1089, 2421, 1783, 2249, 215, 1287, 2615, 2096,
	2248, 834, 1464, 2097, 1627, 2725, 2025, 2102, 3210, 1089,
	1285, 1273, 3529, 3324, 1627, 2732, 215, 1627, 3301, 714,
	3429, 2752, 2916, 1889, 2401, 2729, 3714, 783, 1274, 3600,
	3459, 215, 3419, 2327, 3590, 2084, 3254, 3049, 1836, 2156,
	2552, 3716, 3675, 1441, 3544, 3596, 1439, 3400, 1786, 1785,
	215, 215, 215, 2682, 2683, 2684, 215, 3247, 3550, 215,
	3530, 2746, 2722, 2688, 3420, 2769, 215, 215, 1698, 215,
	215, 215, 1421, 1674, 2960, 2369, 2370, 2924, 2741, 2775,
	2777, 2778, 2779, 215, 215, 215, 2756, 1419, 2842, 2691,
	2692, 2693, 215, 2653, 1402, 2745, 2720, 2793, 2704, 3430,
	2797, 2767, 2728, 1067, 2738, 215, 1190, 2721, 215, 2717,
	2794, 3597, 2730, 2799, 2800, 2589, 1089, 1400, 2733, 2734,
	2212, 2212, 2719, 2782, 1398, 1396, 3531, 1089, 2731, 1394,
	1386, 1384, 215, 2418, 2394, 215, 215, 2360, 1283, 215,
	2310, 1657, 1190, 215, 1654, 2764, 2765, 2818, 2766, 1786,
	1442, 2098, 1190, 1356, 1190, 2753, 2754, 2755, 1985, 215,
	2100, 2748, 2689, 2941, 2736, 215, 2737, 2851, 2940, 2086,
	215, 2820, 215, 1460, 2879, 2863, 710, 711, 2770, 215,
	2530, 1777, 2529, 2776, 2507, 2828, 2013, 1995, 1782, 702,
	703, 1173, 1966, 1736, 2155, 1286, 1029, 1440, 1029, 2838,
	1438, 2497, 1784, 1190, 1190, 1582, 1360, 1260, 1284, 2888,
	2497, 215, 215, 2808, 3650, 215, 1663, 713, 2814, 3320,
	3311, 3589, 3277, 3160, 2823, 3151, 1420, 3110, 1784, 3108,
	2212, 2212, 2212, 3091, 2831, 2833, 2826, 2871, 2862, 2855,
	2824, 1418, 2839, 2444, 2825, 2896, 2897, 2898, 1401, 2899,
	2900, 2366, 215, 2979, 1089, 215, 215, 1089, 215, 2843,
	2433, 2431, 1828, 2411, 1025, 2880, 1025, 1923, 1922, 2832,
	1828, 1399, 1920, 1918, 1915, 2841, 1173, 1913, 1397, 1395,
	1911, 1902, 3693, 1393, 1385, 1383, 1849, 584, 1040, 1782,
	1847, 215, 1282, 1829, 1816, 2859, 2810, 2811, 1811, 1798,
	2812, 2885, 2914, 1787, 789, 2875, 1204, 3485, 1469, 1984,
	2894, 2918, 1006, 2887, 2568, 1665, 1050, 3709, 3621, 3374,
	3369, 2939, 837, 579, 143, 143, 2878, 1873, 1089, 3368,
	2834, 2835, 2938, 1026, 2836, 2498, 1007, 1773, 1238, 211,
	2332, 211, 211, 1173, 1195, 1089, 211, 215, 2332, 1026,
	3487, 2903, 2330, 2901, 2902, 2350, 3170, 1548, 211, 1216,
	2349, 1553, 1795, 1964, 2963, 1436, 1437, 1957, 1983, 1173,
	1982, 2759, 3305, 593, 1476, 1477, 2923, 3510, 2935, 3538,
	2972, 2973, 1382, 1240, 3255, 2371, 590, 2929, 2353, 2930,
	2569, 2931, 2943, 1476, 1477, 1473, 1470, 1259, 3710, 3703,
	543, 1479, 211, 211, 2946, 1195, 1744, 1801, 2786, 2391,
	2357, 2389, 2355, 3588, 3558, 211, 2936, 2956, 2957, 3732,
	3555, 2390, 2356, 1300, 1008, 3150, 3140, 1805, 794, 796,
	1478, 3075, 3046, 2451, 2968, 2234, 1739, 211, 211, 211,
	211, 1195, 1670, 647, 2757, 2978, 554, 3755, 595, 1478,
	579, 2994, 211, 211, 2659, 2660, 3557, 215, 215, 1545,
	2998, 2989, 3000, 2985, 2987, 2988, 3001, 701, 1089, 592,
	2999, 1802, 1476, 1477, 3003, 2324, 2325, 2322, 2323, 3065,
	1204, 2151, 1370, 3080, 2324, 2322, 2157, 1173, 1369, 215,
	3013, 1423, 3038, 3011, 1422, 3226, 3079, 2990, 2709, 1543,
	3767, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023,
	3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033,
	3520, 3037, 3453, 3413, 3039, 3411, 211, 3339, 3271, 3194,
	2735, 3187, 3176, 3051, 3155, 3135, 215, 3053, 3054, 3134,
	211, 3133, 3106, 1173, 2895, 2869, 2867, 2749, 2512, 143,
	3117, 1806, 2511, 2461, 2437, 563, 2412, 3056, 3057, 3087,
	2116, 1981, 1980, 1190, 1979, 3067, 1978, 1698, 1905, 1904,
	1903, 586, 1674, 1883, 3129, 1860, 215, 1859, 3047, 3109,
	1855, 3111, 1854, 215, 1853, 1851, 3068, 1850, 1435, 1434,
	591, 1313, 1089, 215, 2212, 2212, 1312, 1190, 3121, 1311,
	1310, 1309, 3083, 1308, 1698, 1307, 1306, 1305, 1303, 1674,
	3095, 215, 1807, 1808, 594, 1298, 1297, 3131, 3172, 1296,
	1295, 1803, 1294, 1255, 1254, 215, 215, 1190, 1190, 1190,
	588, 215, 215, 215, 3164, 1253, 215, 215, 1252, 3167,
	215, 215, 2457, 1190, 1251, 3147, 1250, 1249, 215, 1089,
	1243, 1237, 2366, 1235, 1804, 3163, 3166, 1234, 3122, 3124,
	3148, 1052, 1051, 3149, 981, 2749, 888, 1745, 802, 585,
	786, 1089, 2497, 3432, 1429, 3158, 74, 1245, 2212, 2212,
	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
	2212, 2212, 2212, 2212, 2212, 2212, 2212, 3195, 2212, 3152,
	633, 3153, 3165, 3168, 3224, 68, 589, 3105, 642, 3602,
	3174, 3173, 2801, 1965, 2044, 3004, 215, 587, 3132, 3179,
	3184, 3185, 3178, 1390, 1967, 2740, 3189, 3186, 2275, 3192,
	2044, 3014, 1027, 3190, 1027, 3220, 3193, 3581, 3233, 2625,
	3516, 3394, 1809, 2154, 3211, 1564, 70, 3205, 876, 532,
	963, 3331, 3330, 3278, 3212, 3094, 2487, 3328, 3327, 844,
	1092, 3042, 1755, 882, 1771, 1764, 2304, 2194, 1678, 885,
	211, 1675, 211, 1677, 887, 886, 211, 1676, 1566, 215,
	884, 1673, 2420, 2455, 3183, 1089, 1216, 1089, 1195, 211,
	1290, 211, 1198, 766, 1759, 1087, 211, 1216, 548, 2110,
	3200, 211, 1216, 1029, 2138, 1873, 1810, 579, 2614, 1559,
	215, 215, 215, 857, 878, 2135, 1045, 3246, 2723, 1029,
	2882, 3074, 215, 3360, 2023, 650, 2656, 2141, 1038, 215,
	2217, 215, 2210, 2206, 215, 215, 215, 2445, 1445, 1536,
	2456, 3274, 3275, 1079, 860, 2108, 1089, 215, 215, 3260,
	1550, 1089, 2594, 2033, 2889, 1620, 2743, 1698, 2301, 215,
	3306, 3618, 1674, 215, 2038, 3196, 2976, 3262, 3263, 1864,
	3259, 1025, 215, 3266, 3307, 3257, 3258, 1005, 215, 3276,
	1004, 1089, 3267, 2991, 1190, 2745, 1003, 1025, 3609, 3606,
	3325, 2849, 3297, 3296, 3295, 3256, 1748, 2316, 1528, 2856,
	872, 1203, 2708, 3261, 3308, 3309, 2917, 1257, 3537, 1527,
	1698, 1698, 215, 1834, 798, 1674, 1674, 3526, 1066, 1065,
	1064, 3356, 2786, 2784, 1089, 3762, 1698, 1698, 3319, 3102,
	182, 1674, 1674, 3318, 3322, 2562, 3326, 1467, 1459, 179,
	181, 180, 3355, 3335, 3341, 3119, 3344, 91, 1026, 3364,
	35, 16, 1173, 1089, 118, 117, 3359, 1698, 3346, 3357,
	116, 115, 1674, 1026, 3352, 211, 114, 113, 112, 111,
	110, 109, 108, 107, 106, 105, 104, 103, 102, 101,
	100, 3370, 3373, 99, 1173, 98, 97, 96, 95, 3347,
	1089, 94, 3406, 1026, 93, 92, 575, 572, 215, 3381,
	215, 1173, 1089, 215, 3391, 49, 3077, 3386, 48, 843,
	211, 215, 90, 89, 211, 211, 2114, 15, 33, 13,
	53, 54, 12, 28, 3402, 855, 29, 1888, 80, 79,
	27, 14, 3416, 1548, 215, 26, 211, 24, 211, 855,
	211, 10, 8, 3415, 532, 7, 30, 1642, 11, 3407,
	3408, 148, 147, 215, 73, 146, 72, 145, 1906, 144,
	71, 215, 22, 9, 140, 3414, 3410, 3452, 3472, 3145,
	1873, 215, 67, 3462, 3436, 142, 1190, 3471, 141, 3435,
	64, 3334, 215, 139, 2216, 138, 65, 3399, 3444, 3445,
	137, 3345, 2851, 136, 3476, 66, 3450, 135, 3460, 20,
	5, 579, 52, 215, 215, 701, 6, 3376, 1173, 2925,
	84, 85, 3363, 3482, 211, 3484, 1195, 211, 1698, 1173,
	31, 3506, 3507, 1674, 62, 215, 61, 3470, 60, 3424,
	579, 3475, 19, 3483, 3481, 51, 18, 211, 172, 171,
	215, 3477, 170, 3489, 3479, 169, 211, 211, 164, 211,
	3488, 211, 3486, 211, 3359, 211, 1026, 163, 3454, 168,
	3522, 166, 165, 3532, 3494, 3495, 167, 3505, 162, 1990,
	1334, 3509, 1991, 134, 1992, 3514, 174, 173, 176, 160,
	156, 155, 159, 211, 161, 158, 3521, 157, 215, 154,
	175, 57, 133, 3546, 132, 56, 131, 130, 129, 128,
	127, 215, 1190, 55, 563, 17, 2, 1, 215, 579,
	0, 0, 1190, 1190, 0, 0, 0, 0, 1190, 0,
	0, 3572, 215, 0, 215, 0, 0, 0, 1698, 3552,
	3553, 3556, 0, 1674, 3560, 0, 3539, 3551, 3564, 3563,
	3513, 0, 3490, 0, 0, 3569, 1173, 3585, 215, 1173,
	3498, 3568, 0, 3576, 215, 0, 3598, 215, 0, 1089,
	0, 3475, 0, 0, 2212, 0, 3570, 3571, 215, 215,
	0, 0, 3575, 3608, 3611, 0, 0, 0, 0, 3612,
	0, 0, 3616, 0, 3627, 0, 3622, 3625, 0, 3604,
	0, 828, 3577, 779, 3578, 3634, 3613, 0, 0, 0,
	3620, 3635, 0, 0, 0, 0, 2212, 0, 215, 0,
	0, 0, 0, 0, 3629, 830, 3631, 0, 0, 0,
	1173, 0, 0, 3662, 3599, 3265, 1204, 0, 0, 0,
	3646, 3647, 3648, 3667, 3649, 0, 0, 1173, 0, 1027,
	0, 0, 0, 0, 0, 0, 3680, 0, 3682, 3665,
	0, 215, 0, 0, 829, 1027, 0, 0, 3690, 3684,
	0, 0, 532, 0, 0, 0, 3689, 3681, 3694, 0,
	0, 215, 0, 3686, 0, 3442, 0, 211, 0, 0,
	0, 0, 2457, 0, 0, 0, 532, 0, 3700, 3701,
	780, 3702, 3704, 211, 3706, 532, 0, 0, 215, 3712,
	215, 0, 3608, 3711, 3713, 3611, 3715, 211, 3723, 0,
	3719, 0, 0, 3726, 3721, 3725, 3720, 2212, 1029, 3683,
	0, 3685, 3727, 0, 1026, 1026, 0, 0, 0, 0,
	843, 3620, 0, 1029, 843, 0, 0, 0, 3741, 3739,
	0, 0, 0, 0, 0, 3745, 0, 3749, 0, 0,
	3746, 3750, 0, 0, 0, 0, 0, 0, 3753, 0,
	1173, 0, 1087, 1029, 0, 0, 3759, 3765, 3718, 3766,
	1218, 0, 1222, 0, 1228, 0, 0, 0, 0, 3760,
	3761, 3768, 0, 0, 0, 0, 1025, 0, 0, 0,
	548, 3392, 3772, 3773, 3776, 3775, 3623, 3778, 3771, 3624,
	0, 1025, 0, 0, 3781, 2216, 0, 3687, 3688, 0,
	0, 3691, 0, 0, 3779, 0, 0, 1698, 0, 0,
	0, 0, 1674, 0, 0, 0, 0, 0, 3392, 0,
	0, 1025, 0, 2340, 0, 781, 0, 0, 0, 0,
	2047, 211, 0, 0, 0, 0, 3291, 0, 0, 0,
	0, 1663, 211, 0, 0, 0, 0, 0, 1352, 0,
	0, 0, 0, 0, 0, 211, 1357, 0, 0, 0,
	0, 1698, 0, 0, 0, 3288, 1674, 0, 3281, 0,
	0, 0, 0, 211, 1173, 2216, 2216, 0, 0, 0,
	0, 0, 3279, 0, 0, 0, 211, 2405, 3283, 0,
	0, 1026, 0, 0, 1476, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3289, 1216,
	0, 1409, 211, 0, 1507, 0, 1029, 0, 211, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1173, 827, 1888, 782, 0, 0, 0, 0, 0,
	3282, 2340, 0, 532, 0, 0, 2460, 0, 0, 0,
	1478, 0, 211, 1173, 0, 211, 0, 211, 1698, 211,
	0, 211, 211, 1674, 1195, 0, 2659, 2660, 0, 2677,
	2678, 2679, 0, 783, 2480, 701, 0, 2340, 2340, 0,
	0, 0, 0, 0, 1025, 2216, 2216, 2216, 0, 211,
	0, 0, 1529, 1530, 1531, 1532, 1533, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 1195, 211, 0, 0,
	1216, 0, 1216, 0, 0, 1195, 0, 1195, 0, 1195,
	0, 1547, 0, 0, 0, 0, 0, 1560, 0, 1476,
	1477, 2674, 0, 0, 1484, 0, 0, 0, 0, 0,
	211, 211, 211, 211, 1195, 211, 0, 211, 0, 1507,
	1183, 0, 1026, 0, 1205, 3284, 1479, 1208, 0, 3285,
	1026, 877, 88, 0, 0, 1506, 1508, 1173, 0, 1173,
	0, 0, 0, 1026, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 1478, 211, 2047, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 3287,
	0, 1495, 0, 0, 0, 0, 2665, 1264, 1267, 0,
	0, 0, 3290, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 1173, 0,
	0, 0, 0, 1173, 0, 0, 0, 0, 88, 0,
	0, 2959, 0, 0, 0, 0, 0, 0, 0, 1614,
	1614, 1614, 0, 0, 0, 0, 0, 2680, 1349, 1501,
	1502, 1503, 1504, 1173, 0, 0, 0, 0, 1208, 1484,
	0, 0, 0, 0, 0, 1216, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 1029, 0, 0, 0, 0,
	0, 2675, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1508, 0, 0, 0, 820, 1173, 0, 0, 0,
	1371, 0, 0, 0, 838, 3286, 0, 0, 1500, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	1494, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 1027, 0, 0, 1015, 0, 0,
	0, 0, 1025, 1025, 1499, 0, 0, 0, 0, 1027,
	0, 2659, 2660, 0, 2677, 2678, 2679, 0, 0, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 1173, 0, 0, 0, 0, 1027,
	2676, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 532, 0, 0, 0, 0, 532, 0, 0,
	532, 0, 0, 532, 532, 0, 0, 855, 0, 532,
	0, 0, 0, 0, 0, 0, 2674, 211, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 1216,
	1488, 1480, 1481, 1482, 1483, 1485, 1486, 0, 0, 2216,
	2216, 0, 0, 1500, 1216, 0, 0, 0, 0, 0,
	0, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2340, 2340, 211, 0, 0, 0, 2340,
	0, 0, 2788, 0, 0, 0, 0, 0, 0, 2340,
	2788, 0, 2340, 2788, 2788, 0, 0, 0, 0, 0,
	0, 2665, 0, 2671, 2672, 2673, 211, 211, 211, 0,
	2670, 2668, 2669, 2661, 2662, 2663, 2664, 2666, 2667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 1025,
	0, 1195, 0, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
	2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216, 2216,
	2216, 2216, 1027, 2216, 0, 2845, 0, 0, 2847, 2340,
	0, 0, 211, 0, 0, 0, 211, 0, 0, 0,
	1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 211, 0, 0, 0, 2675, 0, 1195, 0,
	211, 0, 0, 2340, 0, 532, 0, 0, 0, 0,
	0, 0, 2340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 0, 0, 0, 0, 2659, 2660,
	1029, 2677, 2678, 2679, 211, 1888, 0, 0, 1888, 0,
	0, 1173, 0, 1029, 0, 0, 855, 3216, 0, 0,
	0, 0, 2659, 2660, 0, 2677, 2678, 2679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2965, 0, 0, 0, 2934, 0, 0, 1195, 211,
	0, 211, 0, 0, 0, 2676, 0, 0, 0, 0,
	1025, 0, 0, 2674, 0, 0, 0, 0, 1025, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2022, 1025, 2026, 0, 211, 0, 0, 2674, 0, 2040,
	0, 0, 0, 0, 0, 0, 2049, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
	2083, 0, 2089, 692, 2091, 2092, 2093, 2094, 2665, 0,
	2996, 1208, 0, 0, 0, 0, 0, 88, 0, 88,
	0, 88, 0, 0, 2118, 0, 0, 0, 58, 695,
	694, 0, 2665, 0, 0, 0, 0, 1547, 2671, 2672,
	2673, 2133, 59, 0, 0, 2670, 2668, 2669, 2661, 2662,
	2663, 2664, 2666, 2667, 0, 0, 0, 63, 0, 2680,
	1027, 1027, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2171, 2174, 2177, 2180, 0, 2184, 2185, 2186, 2187,
	2188, 2189, 2190, 2680, 0, 0, 0, 2208, 69, 2219,
	2221, 2226, 0, 2675, 0, 838, 88, 88, 211, 211,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 2675, 0, 75,
	532, 532, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 76, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1928,
	0, 0, 1216, 0, 0, 0, 0, 1208, 0, 0,
	1939, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 1948, 1949, 1950, 0, 0, 77, 0,
	0, 0, 1476, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 2676, 0, 0, 0, 0, 0, 0, 579,
	0, 0, 1507, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 2676, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1027, 1478, 211,
	0, 0, 820, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	1539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2340, 211, 0, 1546, 0, 0,
	0, 1552, 0, 0, 0, 0, 0, 0, 2480, 2480,
	78, 0, 0, 0, 701, 701, 2340, 0, 0, 1888,
	1888, 0, 0, 701, 2340, 2671, 2672, 2673, 0, 0,
	0, 211, 2670, 2668, 2669, 2661, 2662, 2663, 2664, 2666,
	2667, 0, 1484, 149, 81, 0, 82, 0, 0, 2671,
	2672, 2673, 2407, 0, 2409, 0, 2670, 2668, 2669, 2661,
	2662, 2663, 2664, 2666, 2667, 183, 0, 0, 0, 0,
	0, 0, 0, 1506, 1508, 0, 0, 696, 0, 2216,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 2659,
	2660, 0, 2677, 2678, 2679, 0, 0, 0, 0, 3234,
	0, 0, 0, 0, 0, 185, 0, 0, 2964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1027, 0,
	0, 2216, 0, 0, 0, 0, 1027, 1499, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1634, 1027,
	1637, 153, 88, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 2674, 0, 211, 0, 0, 177,
	0, 0, 1216, 0, 211, 0, 0, 178, 0, 0,
	0, 0, 1476, 1477, 0, 0, 0, 211, 1519, 1520,
	1521, 0, 0, 0, 0, 0, 0, 0, 693, 2527,
	0, 0, 1507, 2340, 2340, 2340, 0, 0, 0, 1479,
	0, 0, 0, 0, 1525, 1216, 0, 0, 0, 0,
	0, 0, 2340, 0, 2788, 0, 0, 1216, 1216, 211,
	0, 0, 0, 0, 0, 0, 1500, 0, 1478, 2665,
	211, 211, 2216, 0, 0, 1529, 1530, 1498, 0, 0,
	0, 0, 2340, 0, 1495, 0, 3337, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 3349, 0, 0, 0, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 942, 0,
	2680, 0, 0, 0, 0, 0, 0, 0, 664, 0,
	2574, 2575, 0, 0, 0, 1216, 2581, 0, 0, 0,
	2216, 2216, 1501, 1502, 1503, 1504, 0, 0, 0, 0,
	0, 0, 1484, 0, 2675, 2595, 2596, 212, 0, 0,
	0, 2133, 665, 0, 0, 0, 0, 0, 0, 0,
	2603, 666, 0, 0, 0, 0, 1516, 2386, 212, 1526,
	0, 0, 0, 1506, 1508, 0, 2617, 667, 0, 1480,
	1481, 1482, 1483, 1485, 1486, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 687, 0, 0, 0, 0, 0,
	0, 2638, 1493, 1494, 0, 0, 0, 0, 0, 668,
	0, 2340, 0, 2788, 0, 0, 3418, 0, 1514, 0,
	0, 0, 0, 0, 211, 0, 0, 1499, 669, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2676, 0, 0, 0, 579, 670, 0,
	0, 671, 0, 0, 0, 0, 0, 0, 2226, 2226,
	2226, 0, 0, 0, 0, 0, 3418, 0, 0, 0,
	0, 0, 2469, 1614, 2340, 0, 0, 686, 0, 0,
	0, 2713, 0, 0, 211, 0, 0, 0, 1208, 0,
	0, 0, 0, 0, 0, 1216, 838, 0, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 211, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 843, 0,
	0, 0, 1517, 3418, 0, 0, 2671, 2672, 2673, 0,
	0, 0, 843, 2670, 2668, 2669, 2661, 2662, 2663, 2664,
	2666, 2667, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2804, 0,
	0, 0, 0, 690, 0, 674, 0, 0, 0, 0,
	0, 3337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	820, 2788, 689, 820, 820, 0, 0, 0, 0, 675,
	0, 0, 676, 0, 0, 1216, 1515, 1216, 684, 0,
	0, 0, 1518, 1496, 1492, 677, 1489, 1487, 1488, 1480,
	1481, 1482, 1483, 1485, 1486, 0, 0, 0, 0, 0,
	0, 3594, 0, 0, 0, 0, 0, 1216, 0, 0,
	211, 0, 0, 0, 0, 0, 678, 685, 2107, 0,
	0, 211, 2340, 0, 679, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 681, 0, 0,
	0, 0, 680, 1546, 0, 0, 0, 1546, 0, 0,
	0, 0, 0, 0, 688, 0, 0, 0, 0, 0,
	0, 2996, 0, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 2340, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 1015, 0, 0, 0, 1476,
	1477, 0, 0, 0, 3418, 0, 63, 0, 0, 0,
	0, 1637, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 2040, 0, 0, 0, 1479, 0, 2951, 2952,
	0, 1216, 2955, 2340, 0, 0, 2958, 69, 0, 0,
	0, 0, 88, 0, 0, 2962, 0, 0, 0, 0,
	0, 0, 0, 0, 2969, 1478, 0, 2713, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 75, 0,
	0, 1495, 2980, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 76, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3005, 3006, 0, 3007, 3008, 3009, 0, 0, 3010,
	0, 2954, 0, 3012, 212, 1094, 212, 212, 1094, 0,
	1094, 212, 1094, 0, 0, 1094, 0, 77, 0, 1501,
	1502, 1503, 1504, 212, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 3040, 3041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2829, 0, 0, 3050,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	1506, 1508, 0, 0, 3059, 1094, 1094, 212, 212, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 2860, 0, 59, 88, 0, 0, 0, 1493,
	1494, 0, 2865, 0, 2866, 0, 0, 0, 0, 63,
	0, 0, 212, 212, 212, 212, 0, 1094, 1094, 88,
	2298, 88, 1094, 0, 1499, 0, 1094, 212, 212, 0,
	3088, 0, 0, 0, 0, 0, 1094, 0, 0, 78,
	69, 0, 0, 0, 0, 3096, 3099, 0, 0, 0,
	0, 0, 0, 2909, 2910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 88, 0,
	3118, 75, 149, 81, 0, 82, 0, 0, 1094, 0,
	0, 86, 0, 0, 0, 0, 76, 83, 0, 0,
	0, 0, 0, 0, 183, 0, 88, 0, 0, 0,
	0, 212, 0, 0, 0, 1505, 696, 0, 0, 0,
	119, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 126, 0, 0, 0,
	77, 0, 58, 0, 185, 0, 0, 0, 0, 1614,
	0, 0, 0, 0, 0, 0, 59, 121, 3175, 0,
	0, 0, 0, 0, 88, 0, 0, 120, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 0, 0, 0, 0, 39, 123, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	38, 0, 69, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3213,
	3214, 0, 0, 41, 0, 3218, 3219, 152, 42, 0,
	3222, 3223, 0, 75, 0, 0, 124, 3227, 0, 0,
	0, 0, 40, 86, 0, 0, 0, 3230, 76, 83,
	1496, 1492, 78, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 0, 3235, 216, 0, 0, 0, 0, 0,
	2107, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 81, 0, 82, 0,
	0, 1546, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 119, 600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 0, 0, 3099, 0, 0, 0,
	120, 58, 1094, 0, 212, 212, 212, 0, 0, 0,
	0, 212, 0, 153, 0, 59, 212, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 1094, 0,
	63, 177, 0, 0, 78, 0, 0, 0, 0, 178,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 1094,
	1015, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 69, 0, 0, 0, 1015, 47, 149, 81, 0,
	82, 0, 45, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 46, 0, 3099, 0, 0, 0, 0, 183,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 86, 0, 0, 119, 0, 76, 83, 0,
	0, 3387, 3388, 3389, 0, 122, 0, 3180, 3181, 3182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 3397, 3398, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3405, 77, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 88, 88, 0,
	0, 88, 0, 184, 0, 0, 0, 0, 1094, 1094,
	212, 0, 0, 177, 0, 0, 1094, 0, 0, 0,
	3099, 178, 0, 0, 0, 0, 0, 0, 3441, 0,
	0, 88, 88, 0, 0, 88, 0, 3448, 0, 0,
	843, 0, 152, 0, 0, 3, 3455, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 0, 212,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3099, 0, 0, 3099, 0, 0,
	0, 212, 0, 212, 0, 212, 0, 0, 1015, 0,
	0, 838, 0, 78, 0, 0, 623, 3099, 3099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 88, 0, 624,
	0, 0, 0, 0, 0, 0, 149, 81, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 1094, 0, 1094, 183, 3525,
	0, 0, 3528, 625, 644, 1094, 0, 0, 1094, 212,
	696, 0, 212, 0, 119, 0, 0, 0, 0, 3099,
	0, 1094, 1094, 1094, 0, 626, 0, 0, 627, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 185, 0,
	0, 212, 212, 0, 212, 651, 212, 0, 212, 0,
	212, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 153, 0, 0, 0, 212, 629,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 630,
	178, 0, 631, 653, 0, 0, 0, 595, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 843,
	0, 1346, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 0, 0, 3645, 3645,
	3645, 1090, 0, 0, 1191, 0, 1090, 0, 1191, 0,
	0, 1191, 0, 0, 652, 0, 0, 0, 0, 3666,
	0, 0, 634, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3099, 0, 3099, 0, 1015, 1015, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 632, 3645, 0,
	0, 1191, 1191, 0, 0, 0, 0, 635, 0, 0,
	0, 1091, 0, 0, 1192, 0, 1091, 0, 1192, 0,
	0, 1192, 0, 0, 0, 0, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 1028, 0, 0,
	0, 0, 0, 1191, 1191, 0, 0, 0, 1191, 0,
	0, 0, 1191, 594, 0, 0, 0, 0, 0, 1094,
	0, 0, 1191, 637, 0, 0, 0, 0, 0, 0,
	0, 1192, 1192, 0, 0, 206, 638, 0, 0, 1476,
	1477, 0, 212, 0, 0, 1094, 0, 0, 3645, 3754,
	0, 0, 0, 0, 0, 643, 3758, 0, 0, 1507,
	0, 0, 0, 0, 1191, 0, 1479, 639, 0, 0,
	656, 0, 655, 1192, 1192, 640, 0, 0, 1192, 0,
	0, 0, 1192, 0, 0, 0, 0, 0, 641, 0,
	0, 0, 1192, 648, 0, 1478, 0, 0, 657, 0,
	654, 0, 0, 0, 1498, 646, 0, 0, 1476, 1477,
	0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 0, 1512, 1507, 0,
	0, 0, 0, 1094, 1192, 1479, 0, 0, 0, 0,
	1525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 1094, 1478, 0, 0, 0, 0, 1501,
	1502, 1503, 1504, 1498, 0, 0, 212, 0, 0, 1484,
	1495, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	1506, 1508, 0, 0, 0, 0, 0, 0, 212, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 0, 0, 0, 0, 1501, 1502,
	1503, 1504, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 212, 1499, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 0, 1526, 0, 0, 0, 1506,
	1508, 0, 0, 0, 1015, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 0, 0, 212, 0, 1522,
	212, 1523, 212, 0, 212, 0, 212, 212, 1493, 1494,
	1094, 1094, 1094, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 1094, 0, 0, 0,
	0, 0, 0, 1499, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 1090, 0,
	212, 0, 212, 1524, 0, 0, 0, 600, 0, 0,
	0, 0, 600, 1500, 0, 0, 0, 0, 0, 0,
	1513, 0, 88, 0, 1191, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 212, 212, 212, 212, 0,
	212, 0, 212, 0, 0, 1090, 0, 210, 0, 210,
	210, 0, 0, 88, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 607, 0, 1091, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 212, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1192, 0, 0, 0, 1476, 1477,
	0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 1517, 0,
	210, 210, 0, 0, 0, 1091, 0, 1512, 1507, 0,
	0, 0, 0, 210, 0, 1479, 0, 0, 0, 0,
	1525, 0, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 0, 0, 0, 210, 210, 210, 210, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	210, 210, 0, 1498, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 1191, 1191, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518, 1496,
	1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485,
	1486, 0, 0, 0, 0, 3242, 0, 0, 0, 3241,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 1502,
	1503, 1504, 1084, 0, 210, 0, 0, 0, 1484, 1202,
	0, 0, 0, 0, 1192, 1192, 0, 2107, 210, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 0, 1526, 0, 0, 0, 1506,
	1508, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 1523, 0, 0, 0, 0, 0, 0, 1493, 1494,
	0, 0, 0, 0, 0, 0, 0, 0, 1292, 1191,
	1094, 1191, 0, 1191, 1514, 0, 0, 0, 0, 0,
	0, 1191, 0, 1499, 1191, 0, 0, 1094, 0, 0,
	1317, 1317, 1317, 1202, 0, 0, 0, 1191, 1191, 1191,
	0, 0, 0, 1524, 0, 1350, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 1192,
	0, 1192, 0, 1192, 0, 0, 1476, 1477, 0, 0,
	0, 1192, 0, 0, 1192, 0, 0, 0, 0, 0,
	0, 212, 212, 212, 1505, 0, 1507, 1192, 1192, 1192,
	212, 0, 0, 1479, 0, 0, 0, 0, 0, 1428,
	0, 0, 1500, 212, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 88, 0, 0,
	88, 0, 1478, 1090, 0, 1094, 0, 0, 1517, 0,
	0, 1498, 0, 0, 0, 0, 0, 212, 1495, 0,
	1094, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 1094, 0, 0, 0, 0, 212, 1636, 0,
	1028, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1636, 210,
	0, 0, 0, 0, 607, 0, 0, 0, 0, 607,
	0, 0, 0, 1091, 0, 0, 1501, 1502, 1503, 1504,
	0, 1094, 1094, 0, 0, 0, 1484, 0, 1090, 212,
	0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518, 1496,
	1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485,
	1486, 0, 0, 0, 0, 2647, 0, 1506, 1508, 2648,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 212, 1094, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 1494, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 1091, 0, 0, 59, 1652,
	0, 0, 0, 607, 0, 1476, 1477, 0, 0, 0,
	0, 0, 1661, 63, 1202, 0, 0, 0, 0, 0,
	0, 1091, 1505, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 1191,
	1500, 0, 0, 0, 69, 0, 0, 0, 210, 0,
	0, 0, 210, 210, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 1090,
	1498, 0, 0, 0, 210, 75, 210, 1495, 210, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	76, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1192,
	0, 1191, 0, 0, 0, 0, 1094, 2953, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 1501, 1502, 1503, 1504, 1091,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 210, 0, 1496, 1492, 0,
	1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486, 0,
	0, 0, 0, 0, 0, 210, 1506, 1508, 0, 0,
	0, 1192, 0, 0, 607, 210, 0, 210, 0, 210,
	0, 210, 0, 210, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 1494, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 1191, 1191, 1191, 0,
	1191, 210, 0, 0, 212, 0, 0, 0, 0, 0,
	1499, 212, 1191, 1862, 0, 0, 0, 1869, 0, 0,
	1094, 212, 0, 0, 0, 1094, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1292,
	0, 1894, 0, 1894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1094, 1094, 0, 149,
	81, 0, 82, 0, 0, 0, 1192, 1192, 1192, 0,
	1192, 1094, 0, 0, 0, 0, 212, 1094, 0, 0,
	0, 183, 1192, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 696, 0, 0, 0, 119, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 1869, 0, 0,
	1943, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1960, 0, 0, 0, 120, 0, 0, 0, 0, 0,
	1970, 0, 1972, 0, 1974, 0, 1976, 153, 1977, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 1994, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1028, 0, 1094, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 1496, 1492, 0, 1489,
	1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 212, 212, 0, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 1094, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 210, 1091, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	2282, 0, 0, 0, 607, 0, 1091, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 1091, 0, 0, 0, 0, 0, 212,
	210, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 1090, 0, 210, 0, 210, 0, 210, 0, 210,
	210, 0, 0, 0, 0, 0, 1191, 0, 0, 212,
	0, 0, 0, 0, 1094, 0, 1191, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 1476, 1477, 0, 0, 0, 0, 0,
	1192, 212, 212, 210, 0, 210, 0, 0, 0, 0,
	1091, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	1479, 1091, 0, 0, 0, 0, 0, 1191, 1191, 0,
	0, 0, 0, 0, 0, 0, 1192, 0, 210, 210,
	210, 210, 0, 210, 0, 210, 1192, 0, 1192, 1478,
	0, 0, 0, 0, 0, 0, 1202, 0, 1498, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 1090, 0,
	0, 1090, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1869, 0, 1192, 1192, 212,
	1094, 2430, 0, 0, 0, 2580, 0, 0, 0, 0,
	1094, 1094, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1501, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 1484, 0, 2462, 0, 0, 1317, 0,
	1317, 0, 1317, 0, 1202, 1202, 0, 0, 1091, 0,
	0, 1091, 1090, 0, 0, 212, 0, 1094, 0, 0,
	0, 0, 0, 0, 1506, 1508, 212, 0, 0, 1090,
	0, 0, 2506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2514, 0,
	2517, 0, 0, 1493, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 1091, 2538, 1202, 2540, 1202, 0, 2543, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 1479, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 1478, 0, 2571,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	1028, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1028, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 2573, 0, 1636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1508, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 210, 210, 0, 0, 0,
	0, 1493, 1494, 1636, 0, 0, 1090, 0, 0, 0,
	0, 1191, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 1496, 1492, 1499, 1489, 1487, 1488,
	1480, 1481, 1482, 1483, 1485, 1486, 0, 0, 0, 0,
	0, 1191, 1191, 1191, 0, 0, 0, 1192, 0, 0,
	210, 0, 0, 0, 210, 0, 0, 1191, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 1091, 0, 1028, 0,
	0, 1192, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 1192, 1192, 1192, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 1500, 0, 1192, 0, 0,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2780, 0,
	0, 0, 0, 0, 0, 1091, 0, 1476, 1477, 0,
	1509, 1510, 1511, 1519, 1520, 1521, 0, 210, 0, 210,
	0, 0, 0, 0, 0, 0, 1512, 1507, 0, 2817,
	2819, 2430, 0, 0, 1479, 0, 0, 0, 0, 1525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 1090, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 2857, 0, 0, 0, 2861,
	0, 0, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 0, 2870, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 1090, 0, 0, 0, 1091,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1502, 1503,
	1504, 0, 0, 0, 0, 1090, 0, 1484, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 2913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 1526, 0, 0, 0, 1506, 1508,
	1091, 0, 0, 0, 0, 1091, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 1028, 1028, 1522, 0,
	1523, 0, 2937, 0, 1202, 0, 0, 1493, 1494, 0,
	0, 0, 0, 0, 0, 1091, 0, 1090, 1192, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 2949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1524, 0, 1090, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 1500, 0, 0, 0, 0, 1091, 210, 0, 0,
	1191, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 1517, 0, 0,
	1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0,
	0, 0, 0, 1028, 0, 0, 0, 0, 0, 1512,
	1507, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 1525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	1192, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 1490, 1491, 1497, 1518, 1496, 1492,
	0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486,
	0, 0, 0, 0, 2129, 0, 1191, 0, 2130, 0,
	0, 0, 0, 0, 0, 0, 1191, 1191, 0, 0,
	0, 0, 1191, 0, 0, 0, 0, 0, 0, 0,
	1501, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3144, 1090, 1516, 0, 0, 1526, 0, 0,
	0, 1506, 1508, 0, 1028, 0, 1192, 0, 0, 3159,
	0, 0, 1028, 0, 0, 0, 1192, 1192, 0, 0,
	0, 1522, 1192, 1523, 0, 1636, 0, 0, 0, 0,
	1493, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 1091, 3198, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 1524, 0, 0, 210, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 1476, 1477, 0, 1509, 1510, 1511,
	1519, 1520, 1521, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 1507, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 1525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 1500, 0, 0, 0, 0, 1498,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3310, 0, 0, 0, 0, 0, 1516, 0,
	0, 1526, 0, 2430, 1515, 1506, 1508, 1490, 1491, 1497,
	1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482,
	1483, 1485, 1486, 0, 0, 1522, 0, 1523, 2430, 0,
	0, 2967, 0, 0, 1493, 1494, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 210, 0, 0, 0, 1524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 3425, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3478, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3504,
	1202, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 1490, 1491, 1497, 1518, 1496, 1492, 0, 1489, 1487,
	1488, 1480, 1481, 1482, 1483, 1485, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 2650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3601, 220, 221, 222, 223, 224, 1095,
	225, 1096, 1097, 1098, 3617, 1099, 483, 1100, 1101, 1102,
	1103, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 1104, 235, 236, 237, 238, 239,
	240, 1105, 1106, 241, 488, 489, 490, 1107, 242, 491,
	1108, 1093, 1109, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 1110, 253, 0, 254, 255, 256,
	1111, 257, 965, 258, 259, 1112, 1113, 1115, 1114, 1116,
	1117, 1118, 260, 261, 262, 263, 264, 265, 492, 493,
	1119, 266, 1120, 268, 267, 1121, 269, 1122, 1123, 270,
	271, 272, 1124, 273, 1125, 274, 275, 1126, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 1127, 217, 1128, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 1129, 293, 1130, 1131,
	966, 294, 295, 1132, 296, 498, 1133, 499, 297, 1134,
	298, 299, 300, 301, 500, 501, 502, 354, 968, 302,
	303, 1135, 304, 305, 307, 0, 0, 218, 306, 308,
	315, 1136, 967, 309, 503, 311, 310, 312, 313, 314,
	504, 1137, 505, 1138, 316, 969, 506, 970, 317, 318,
	319, 971, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 1139, 328, 327, 1140, 329, 507, 972, 330, 331,
	973, 1141, 332, 333, 1142, 1143, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	974, 347, 348, 351, 350, 975, 349, 1144, 219, 976,
	352, 1145, 508, 353, 509, 355, 356, 1146, 357, 358,
	359, 1147, 1148, 361, 362, 363, 1149, 1150, 364, 365,
	510, 977, 366, 978, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 1151, 375, 376, 512, 377, 513,
	378, 1152, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 1153, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 1154,
	402, 979, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 1155, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 1156, 429,
	409, 410, 430, 431, 980, 432, 433, 516, 434, 435,
	1157, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 1158, 447, 448, 446, 1159, 449, 450,
	451, 452, 453, 281, 454, 1160, 455, 518, 519, 520,
	521, 1161, 462, 1162, 456, 457, 522, 458, 523, 1163,
	459, 460, 461, 0, 463, 464, 1164, 1165, 465, 466,
	467, 468, 469, 471, 1166, 472, 1167, 470, 473, 474,
	475, 524, 525, 526, 1168, 477, 476, 527, 1169, 1170,
	1171, 1172, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 2260, 0,
	0, 0, 0, 0, 0, 0, 2261, 220, 221, 222,
	223, 224, 1095, 225, 1096, 1097, 1098, 0, 1099, 483,
	1100, 1101, 1102, 1103, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 1104, 235, 236,
	237, 238, 239, 240, 1105, 1106, 241, 488, 489, 490,
	1107, 242, 491, 1108, 1093, 1109, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 1110, 253, 0,
	254, 255, 256, 1111, 257, 965, 258, 259, 1112, 1113,
	1115, 1114, 1116, 1117, 1118, 260, 261, 262, 263, 264,
	265, 492, 493, 1119, 266, 1120, 268, 267, 1121, 269,
	1122, 1123, 270, 271, 272, 1124, 273, 1125, 274, 275,
	1126, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 1127, 217, 1128, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 1129,
	293, 1130, 1131, 966, 294, 295, 1132, 296, 498, 1133,
	499, 297, 1134, 298, 299, 300, 301, 500, 501, 502,
	354, 968, 302, 303, 1135, 304, 305, 307, 0, 0,
	218, 306, 308, 315, 1136, 967, 309, 503, 311, 310,
	312, 313, 314, 504, 1137, 505, 1138, 316, 969, 506,
	970, 317, 318, 319, 971, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 1139, 328, 327, 1140, 329, 507,
	972, 330, 331, 973, 1141, 332, 333, 1142, 1143, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 974, 347, 348, 351, 350, 975, 349,
	1144, 219, 976, 352, 1145, 508, 353, 509, 355, 356,
	1146, 357, 358, 359, 1147, 1148, 361, 362, 363, 1149,
	1150, 364, 365, 510, 977, 366, 978, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 1151, 375, 376,
	512, 377, 513, 378, 1152, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 1153, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 1154, 402, 979, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	1155, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 1156, 429, 409, 410, 430, 431, 980, 432, 433,
	516, 434, 435, 1157, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 1158, 447, 448, 446,
	1159, 449, 450, 451, 452, 453, 281, 454, 1160, 455,
	518, 519, 520, 521, 1161, 462, 1162, 456, 457, 522,
	458, 523, 1163, 459, 460, 461, 0, 463, 464, 1164,
	1165, 465, 466, 467, 468, 469, 471, 1166, 472, 1167,
	470, 473, 474, 475, 524, 525, 526, 1168, 477, 476,
	527, 1169, 1170, 1171, 1172, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3264, 220, 221, 222, 223, 224, 1095, 225, 1096,
	1097, 1098, 0, 1099, 483, 1100, 1101, 1102, 1103, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 1104, 235, 236, 237, 238, 239, 240, 1105,
	1106, 241, 488, 489, 490, 1107, 242, 491, 1108, 1093,
	1109, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 1110, 253, 0, 254, 255, 256, 1111, 257,
	965, 258, 259, 1112, 1113, 1115, 1114, 1116, 1117, 1118,
	260, 261, 262, 263, 264, 265, 492, 493, 1119, 266,
	1120, 268, 267, 1121, 269, 1122, 1123, 270, 271, 272,
	1124, 273, 1125, 274, 275, 1126, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 1127,
	217, 1128, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 1129, 293, 1130, 1131, 966, 294,
	295, 1132, 296, 498, 1133, 499, 297, 1134, 298, 299,
	300, 301, 500, 501, 502, 354, 968, 302, 303, 1135,
	304, 305, 307, 0, 0, 218, 306, 308, 315, 1136,
	967, 309, 503, 311, 310, 312, 313, 314, 504, 1137,
	505, 1138, 316, 969, 506, 970, 317, 318, 319, 971,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 1139,
	328, 327, 1140, 329, 507, 972, 330, 331, 973, 1141,
	332, 333, 1142, 1143, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 350, 975, 349, 1144, 219, 976, 352, 1145,
	508, 353, 509, 355, 356, 1146, 357, 358, 359, 1147,
	1148, 361, 362, 363, 1149, 1150, 364, 365, 510, 977,
	366, 978, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 1151, 375, 376, 512, 377, 513, 378, 1152,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 1153, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 1154, 402, 979,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 1155, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 1156, 429, 409, 410,
	430, 431, 980, 432, 433, 516, 434, 435, 1157, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 1158, 447, 448, 446, 1159, 449, 450, 451, 452,
	453, 281, 454, 1160, 455, 518, 519, 520, 521, 1161,
	462, 1162, 456, 457, 522, 458, 523, 1163, 459, 460,
	461, 0, 463, 464, 1164, 1165, 465, 466, 467, 468,
	469, 471, 1166, 472, 1167, 470, 473, 474, 475, 524,
	525, 526, 1168, 477, 476, 527, 1169, 1170, 1171, 1172,
	478, 479, 528, 480, 481, 482, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3393, 0, 220, 221, 222, 223, 224, 1095, 225,
	1096, 1097, 1098, 0, 1099, 483, 1100, 1101, 1102, 1103,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 1104, 235, 236, 237, 238, 239, 240,
	1105, 1106, 241, 488, 489, 490, 1107, 242, 491, 1108,
	1093, 1109, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 1110, 253, 0, 254, 255, 256, 1111,
	257, 965, 258, 259, 1112, 1113, 1115, 1114, 1116, 1117,
	1118, 260, 261, 262, 263, 264, 265, 492, 493, 1119,
	266, 1120, 268, 267, 1121, 269, 1122, 1123, 270, 271,
	272, 1124, 273, 1125, 274, 275, 1126, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	1127, 217, 1128, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 1129, 293, 1130, 1131, 966,
	294, 295, 1132, 296, 498, 1133, 499, 297, 1134, 298,
	299, 300, 301, 500, 501, 502, 354, 968, 302, 303,
	1135, 304, 305, 307, 0, 0, 218, 306, 308, 315,
	1136, 967, 309, 503, 311, 310, 312, 313, 314, 504,
	1137, 505, 1138, 316, 969, 506, 970, 317, 318, 319,
	971, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	1139, 328, 327, 1140, 329, 507, 972, 330, 331, 973,
	1141, 332, 333, 1142, 1143, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 350, 975, 349, 1144, 219, 976, 352,
	1145, 508, 353, 509, 355, 356, 1146, 357, 358, 359,
	1147, 1148, 361, 362, 363, 1149, 1150, 364, 365, 510,
	977, 366, 978, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 1151, 375, 376, 512, 377, 513, 378,
	1152, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 1153, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 1154, 402,
	979, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 1155, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 1156, 429, 409,
	410, 430, 431, 980, 432, 433, 516, 434, 435, 1157,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 1158, 447, 448, 446, 1159, 449, 450, 451,
	452, 453, 281, 454, 1160, 455, 518, 519, 520, 521,
	1161, 462, 1162, 456, 457, 522, 458, 523, 1163, 459,
	460, 461, 0, 463, 464, 1164, 1165, 465, 466, 467,
	468, 469, 471, 1166, 472, 1167, 470, 473, 474, 475,
	524, 525, 526, 1168, 477, 476, 527, 1169, 1170, 1171,
	1172, 478, 479, 528, 480, 481, 482, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3317, 0, 220, 221, 222, 223, 224, 1095,
	225, 1096, 1097, 1098, 0, 1099, 483, 1100, 1101, 1102,
	1103, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 1104, 235, 236, 237, 238, 239,
	240, 1105, 1106, 241, 488, 489, 490, 1107, 242, 491,
	1108, 1093, 1109, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 1110, 253, 0, 254, 255, 256,
	1111, 257, 965, 258, 259, 1112, 1113, 1115, 1114, 1116,
	1117, 1118, 260, 261, 262, 263, 264, 265, 492, 493,
	1119, 266, 1120, 268, 267, 1121, 269, 1122, 1123, 270,
	271, 272, 1124, 273, 1125, 274, 275, 1126, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 1127, 217, 1128, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 1129, 293, 1130, 1131,
	966, 294, 295, 1132, 296, 498, 1133, 499, 297, 1134,
	298, 299, 300, 301, 500, 501, 502, 354, 968, 302,
	303, 1135, 304, 305, 307, 0, 0, 218, 306, 308,
	315, 1136, 967, 309, 503, 311, 310, 312, 313, 314,
	504, 1137, 505, 1138, 316, 969, 506, 970, 317, 318,
	319, 971, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 1139, 328, 327, 1140, 329, 507, 972, 330, 331,
	973, 1141, 332, 333, 1142, 1143, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	974, 347, 348, 351, 350, 975, 349, 1144, 219, 976,
	352, 1145, 508, 353, 509, 355, 356, 1146, 357, 358,
	359, 1147, 1148, 361, 362, 363, 1149, 1150, 364, 365,
	510, 977, 366, 978, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 1151, 375, 376, 512, 377, 513,
	378, 1152, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 1153, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 1154,
	402, 979, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 1155, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 1156, 429,
	409, 410, 430, 431, 980, 432, 433, 516, 434, 435,
	1157, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 1158, 447, 448, 446, 1159, 449, 450,
	451, 452, 453, 281, 454, 1160, 455, 518, 519, 520,
	521, 1161, 462, 1162, 456, 457, 522, 458, 523, 1163,
	459, 460, 461, 0, 463, 464, 1164, 1165, 465, 466,
	467, 468, 469, 471, 1166, 472, 1167, 470, 473, 474,
	475, 524, 525, 526, 1168, 477, 476, 527, 1169, 1170,
	1171, 1172, 478, 479, 528, 480, 481, 482, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3199, 0, 220, 221, 222, 223, 224,
	1095, 225, 1096, 1097, 1098, 0, 1099, 483, 1100, 1101,
	1102, 1103, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 1104, 235, 236, 237, 238,
	239, 240, 1105, 1106, 241, 488, 489, 490, 1107, 242,
	491, 1108, 1093, 1109, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 1110, 253, 0, 254, 255,
	256, 1111, 257, 965, 258, 259, 1112, 1113, 1115, 1114,
	1116, 1117, 1118, 260, 261, 262, 263, 264, 265, 492,
	493, 1119, 266, 1120, 268, 267, 1121, 269, 1122, 1123,
	270, 271, 272, 1124, 273, 1125, 274, 275, 1126, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 1127, 217, 1128, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 1129, 293, 1130,
	1131, 966, 294, 295, 1132, 296, 498, 1133, 499, 297,
	1134, 298, 299, 300, 301, 500, 501, 502, 354, 968,
	302, 303, 1135, 304, 305, 307, 0, 0, 218, 306,
	308, 315, 1136, 967, 309, 503, 311, 310, 312, 313,
	314, 504, 1137, 505, 1138, 316, 969, 506, 970, 317,
	318, 319, 971, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 1139, 328, 327, 1140, 329, 507, 972, 330,
	331, 973, 1141, 332, 333, 1142, 1143, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 974, 347, 348, 351, 350, 975, 349, 1144, 219,
	976, 352, 1145, 508, 353, 509, 355, 356, 1146, 357,
	358, 359, 1147, 1148, 361, 362, 363, 1149, 1150, 364,
	365, 510, 977, 366, 978, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 1151, 375, 376, 512, 377,
	513, 378, 1152, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 1153, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	1154, 402, 979, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 1155, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 1156,
	429, 409, 410, 430, 431, 980, 432, 433, 516, 434,
	435, 1157, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 1158, 447, 448, 446, 1159, 449,
	450, 451, 452, 453, 281, 454, 1160, 455, 518, 519,
	520, 521, 1161, 462, 1162, 456, 457, 522, 458, 523,
	1163, 459, 460, 461, 0, 463, 464, 1164, 1165, 465,
	466, 467, 468, 469, 471, 1166, 472, 1167, 470, 473,
	474, 475, 524, 525, 526, 1168, 477, 476, 527, 1169,
	1170, 1171, 1172, 478, 479, 528, 480, 481, 482, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2992, 0, 220, 221, 222, 223,
	224, 1095, 225, 1096, 1097, 1098, 0, 1099, 483, 1100,
	1101, 1102, 1103, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 1104, 235, 236, 237,
	238, 239, 240, 1105, 1106, 241, 488, 489, 490, 1107,
	242, 491, 1108, 1093, 1109, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 1110, 253, 0, 254,
	255, 256, 1111, 257, 965, 258, 259, 1112, 1113, 1115,
	1114, 1116, 1117, 1118, 260, 261, 262, 263, 264, 265,
	492, 493, 1119, 266, 1120, 268, 267, 1121, 269, 1122,
	1123, 270, 271, 272, 1124, 273, 1125, 274, 275, 1126,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 1127, 217, 1128, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 1129, 293,
	1130, 1131, 966, 294, 295, 1132, 296, 498, 1133, 499,
	297, 1134, 298, 299, 300, 301, 500, 501, 502, 354,
	968, 302, 303, 1135, 304, 305, 307, 0, 0, 218,
	306, 308, 315, 1136, 967, 309, 503, 311, 310, 312,
	313, 314, 504, 1137, 505, 1138, 316, 969, 506, 970,
	317, 318, 319, 971, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 1139, 328, 327, 1140, 329, 507, 972,
	330, 331, 973, 1141, 332, 333, 1142, 1143, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 974, 347, 348, 351, 350, 975, 349, 1144,
	219, 976, 352, 1145, 508, 353, 509, 355, 356, 1146,
	357, 358, 359, 1147, 1148, 361, 362, 363, 1149, 1150,
	364, 365, 510, 977, 366, 978, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 1151, 375, 376, 512,
	377, 513, 378, 1152, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 1153, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 1154, 402, 979, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 1155,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	1156, 429, 409, 410, 430, 431, 980, 432, 433, 516,
	434, 435, 1157, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 1158, 447, 448, 446, 1159,
	449, 450, 451, 452, 453, 281, 454, 1160, 455, 518,
	519, 520, 521, 1161, 462, 1162, 456, 457, 522, 458,
	523, 1163, 459, 460, 461, 0, 463, 464, 1164, 1165,
	465, 466, 467, 468, 469, 471, 1166, 472, 1167, 470,
	473, 474, 475, 524, 525, 526, 1168, 477, 476, 527,
	1169, 1170, 1171, 1172, 478, 479, 528, 480, 481, 482,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2975, 0, 220, 221, 222,
	223, 224, 1095, 225, 1096, 1097, 1098, 0, 1099, 483,
	1100, 1101, 1102, 1103, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 1104, 235, 236,
	237, 238, 239, 240, 1105, 1106, 241, 488, 489, 490,
	1107, 242, 491, 1108, 1093, 1109, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 1110, 253, 0,
	254, 255, 256, 1111, 257, 965, 258, 259, 1112, 1113,
	1115, 1114, 1116, 1117, 1118, 260, 261, 262, 263, 264,
	265, 492, 493, 1119, 266, 1120, 268, 267, 1121, 269,
	1122, 1123, 270, 271, 272, 1124, 273, 1125, 274, 275,
	1126, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 1127, 217, 1128, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 1129,
	293, 1130, 1131, 966, 294, 295, 1132, 296, 498, 1133,
	499, 297, 1134, 298, 299, 300, 301, 500, 501, 502,
	354, 968, 302, 303, 1135, 304, 305, 307, 0, 0,
	218, 306, 308, 315, 1136, 967, 309, 503, 311, 310,
	312, 313, 314, 504, 1137, 505, 1138, 316, 969, 506,
	970, 317, 318, 319, 971, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 1139, 328, 327, 1140, 329, 507,
	972, 330, 331, 973, 1141, 332, 333, 1142, 1143, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 974, 347, 348, 351, 350, 975, 349,
	1144, 219, 976, 352, 1145, 508, 353, 509, 355, 356,
	1146, 357, 358, 359, 1147, 1148, 361, 362, 363, 1149,
	1150, 364, 365, 510, 977, 366, 978, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 1151, 375, 376,
	512, 377, 513, 378, 1152, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 1153, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 1154, 402, 979, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	1155, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 1156, 429, 409, 410, 430, 431, 980, 432, 433,
	516, 434, 435, 1157, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 1158, 447, 448, 446,
	1159, 449, 450, 451, 452, 453, 281, 454, 1160, 455,
	518, 519, 520, 521, 1161, 462, 1162, 456, 457, 522,
	458, 523, 1163, 459, 460, 461, 0, 463, 464, 1164,
	1165, 465, 466, 467, 468, 469, 471, 1166, 472, 1167,
	470, 473, 474, 475, 524, 525, 526, 1168, 477, 476,
	527, 1169, 1170, 1171, 1172, 478, 479, 528, 480, 481,
	482, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2844, 0, 220, 221,
	222, 223, 224, 1095, 225, 1096, 1097, 1098, 0, 1099,
	483, 1100, 1101, 1102, 1103, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 1104, 235,
	236, 237, 238, 239, 240, 1105, 1106, 241, 488, 489,
	490, 1107, 242, 491, 1108, 1093, 1109, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 1110, 253,
	0, 254, 255, 256, 1111, 257, 965, 258, 259, 1112,
	1113, 1115, 1114, 1116, 1117, 1118, 260, 261, 262, 263,
	264, 265, 492, 493, 1119, 266, 1120, 268, 267, 1121,
	269, 1122, 1123, 270, 271, 272, 1124, 273, 1125, 274,
	275, 1126, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 1127, 217, 1128, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	1129, 293, 1130, 1131, 966, 294, 295, 1132, 296, 498,
	1133, 499, 297, 1134, 298, 299, 300, 301, 500, 501,
	502, 354, 968, 302, 303, 1135, 304, 305, 307, 0,
	0, 218, 306, 308, 315, 1136, 967, 309, 503, 311,
	310, 312, 313, 314, 504, 1137, 505, 1138, 316, 969,
	506, 970, 317, 318, 319, 971, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 1139, 328, 327, 1140, 329,
	507, 972, 330, 331, 973, 1141, 332, 333, 1142, 1143,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 974, 347, 348, 351, 350, 975,
	349, 1144, 219, 976, 352, 1145, 508, 353, 509, 355,
	356, 1146, 357, 358, 359, 1147, 1148, 361, 362, 363,
	1149, 1150, 364, 365, 510, 977, 366, 978, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 1151, 375,
	376, 512, 377, 513, 378, 1152, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 1153, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 1154, 402, 979, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 1155, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 1156, 429, 409, 410, 430, 431, 980, 432,
	433, 516, 434, 435, 1157, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 1158, 447, 448,
	446, 1159, 449, 450, 451, 452, 453, 281, 454, 1160,
	455, 518, 519, 520, 521, 1161, 462, 1162, 456, 457,
	522, 458, 523, 1163, 459, 460, 461, 0, 463, 464,
	1164, 1165, 465, 466, 467, 468, 469, 471, 1166, 472,
	1167, 470, 473, 474, 475, 524, 525, 526, 1168, 477,
	476, 527, 1169, 1170, 1171, 1172, 478, 479, 528, 480,
	481, 482, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2153, 0, 220,
	221, 222, 223, 224, 1095, 225, 1096, 1097, 1098, 0,
	1099, 483, 1100, 1101, 1102, 1103, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 1104,
	235, 236, 237, 238, 239, 240, 1105, 1106, 241, 488,
	489, 490, 1107, 242, 491, 1108, 1093, 1109, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 1110,
	253, 0, 254, 255, 256, 1111, 257, 965, 258, 259,
	1112, 1113, 1115, 1114, 1116, 1117, 1118, 260, 261, 262,
	263, 264, 265, 492, 493, 1119, 266, 1120, 268, 267,
	1121, 269, 1122, 1123, 270, 271, 272, 1124, 273, 1125,
	274, 275, 1126, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 1127, 217, 1128, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 1129, 293, 1130, 1131, 966, 294, 295, 1132, 296,
	498, 1133, 499, 297, 1134, 298, 299, 300, 301, 500,
	501, 502, 354, 968, 302, 303, 1135, 304, 305, 307,
	0, 0, 218, 306, 308, 315, 1136, 967, 309, 503,
	311, 310, 312, 313, 314, 504, 1137, 505, 1138, 316,
	969, 506, 970, 317, 318, 319, 971, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 1139, 328, 327, 1140,
	329, 507, 972, 330, 331, 973, 1141, 332, 333, 1142,
	1143, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 974, 347, 348, 351, 350,
	975, 349, 1144, 219, 976, 352, 1145, 508, 353, 509,
	355, 356, 1146, 357, 358, 359, 1147, 1148, 361, 362,
	363, 1149, 1150, 364, 365, 510, 977, 366, 978, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 1151,
	375, 376, 512, 377, 513, 378, 1152, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 1153,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 1154, 402, 979, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 1155, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 1156, 429, 409, 410, 430, 431, 980,
	432, 433, 516, 434, 435, 1157, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 1158, 447,
	448, 446, 1159, 449, 450, 451, 452, 453, 281, 454,
	1160, 455, 518, 519, 520, 521, 1161, 462, 1162, 456,
	457, 522, 458, 523, 1163, 459, 460, 461, 0, 463,
	464, 1164, 1165, 465, 466, 467, 468, 469, 471, 1166,
	472, 1167, 470, 473, 474, 475, 524, 525, 526, 1168,
	477, 476, 527, 1169, 1170, 1171, 1172, 478, 479, 528,
	480, 481, 482, 1196, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1845, 0,
	0, 0, 220, 221, 222, 223, 224, 1095, 225, 1096,
	1097, 1098, 0, 1099, 483, 1100, 1101, 1102, 1103, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 1104, 235, 236, 237, 238, 239, 240, 1105,
	1106, 241, 488, 489, 490, 1107, 242, 491, 1108, 1093,
	1109, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 1110, 253, 0, 254, 255, 256, 1111, 257,
	965, 258, 259, 1112, 1113, 1115, 1114, 1116, 1117, 1118,
	260, 261, 262, 263, 264, 265, 492, 493, 1119, 266,
	1120, 268, 267, 1121, 269, 1122, 1123, 270, 271, 272,
	1124, 273, 1125, 274, 275, 1126, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 1127,
	217, 1128, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 1129, 293, 1130, 1131, 966, 294,
	295, 1132, 296, 498, 1133, 499, 297, 1134, 298, 299,
	300, 301, 500, 501, 502, 354, 968, 302, 303, 1135,
	304, 305, 307, 0, 0, 218, 306, 308, 315, 1136,
	967, 309, 503, 311, 310, 312, 313, 314, 504, 1137,
	505, 1138, 316, 969, 506, 970, 317, 318, 319, 971,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 1139,
	328, 327, 1140, 329, 507, 972, 330, 331, 973, 1141,
	332, 333, 1142, 1143, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 350, 975, 349, 1144, 219, 976, 352, 1145,
	508, 353, 509, 355, 356, 1146, 357, 358, 359, 1147,
	1148, 361, 362, 363, 1149, 1150, 364, 365, 510, 977,
	366, 978, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 1151, 375, 376, 512, 377, 513, 378, 1152,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 1153, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 1154, 402, 979,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 1155, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 1156, 429, 409, 410,
	430, 431, 980, 432, 433, 516, 434, 435, 1157, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 1158, 447, 448, 446, 1159, 449, 450, 451, 452,
	453, 281, 454, 1160, 455, 518, 519, 520, 521, 1161,
	462, 1162, 456, 457, 522, 458, 523, 1163, 459, 460,
	461, 0, 463, 464, 1164, 1165, 465, 466, 467, 468,
	469, 471, 1166, 472, 1167, 470, 473, 474, 475, 524,
	525, 526, 1168, 477, 476, 527, 1169, 1170, 1171, 1172,
	478, 479, 528, 480, 481, 482, 1085, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	1095, 225, 1096, 1097, 1098, 0, 1099, 483, 1100, 1101,
	1102, 1103, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 1104, 235, 236, 237, 238,
	239, 240, 1105, 1106, 241, 488, 489, 490, 1107, 242,
	491, 1108, 1093, 1109, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 1110, 253, 0, 254, 255,
	256, 1111, 257, 965, 258, 259, 1112, 1113, 1115, 1114,
	1116, 1117, 1118, 260, 261, 262, 263, 264, 265, 492,
	493, 1119, 266, 1120, 268, 267, 1121, 269, 1122, 1123,
	270, 271, 272, 1124, 273, 1125, 274, 275, 1126, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 1127, 217, 1128, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 1129, 293, 1130,
	1131, 966, 294, 295, 1132, 296, 498, 1133, 499, 297,
	1134, 298, 299, 300, 301, 500, 501, 502, 354, 968,
	302, 303, 1135, 304, 305, 307, 0, 0, 218, 306,
	308, 315, 1136, 967, 309, 503, 311, 310, 312, 313,
	314, 504, 1137, 505, 1138, 316, 969, 506, 970, 317,
	318, 319, 971, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 1139, 328, 327, 1140, 329, 507, 972, 330,
	331, 973, 1141, 332, 333, 1142, 1143, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 974, 347, 348, 351, 350, 975, 349, 1144, 219,
	976, 352, 1145, 508, 353, 509, 355, 356, 1146, 357,
	358, 359, 1147, 1148, 361, 362, 363, 1149, 1150, 364,
	365, 510, 977, 366, 978, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 1151, 375, 376, 512, 377,
	513, 378, 1152, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 1153, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	1154, 402, 979, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 1155, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 1156,
	429, 409, 410, 430, 431, 980, 432, 433, 516, 434,
	435, 1157, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 1158, 447, 448, 446, 1159, 449,
	450, 451, 452, 453, 281, 454, 1160, 455, 518, 519,
	520, 521, 1161, 462, 1162, 456, 457, 522, 458, 523,
	1163, 459, 460, 461, 0, 463, 464, 1164, 1165, 465,
	466, 467, 468, 469, 471, 1166, 472, 1167, 470, 473,
	474, 475, 524, 525, 526, 1168, 477, 476, 527, 1169,
	1170, 1171, 1172, 478, 479, 528, 480, 481, 482, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 222, 223,
	224, 1095, 225, 1096, 1097, 1098, 0, 1099, 483, 1100,
	1101, 1102, 1103, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 1104, 235, 236, 237,
	238, 239, 240, 1105, 1106, 241, 488, 489, 490, 1107,
	242, 491, 1108, 1093, 1109, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 1110, 253, 0, 254,
	255, 256, 1111, 257, 965, 258, 259, 1112, 1113, 1115,
	1114, 1116, 1117, 1118, 260, 261, 262, 263, 264, 265,
	492, 493, 1119, 266, 1120, 268, 267, 1121, 269, 1122,
	1123, 270, 271, 272, 1124, 273, 1125, 274, 275, 1126,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 1127, 217, 1128, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 1129, 293,
	1130, 1131, 966, 294, 295, 1132, 296, 498, 1133, 499,
	297, 1134, 298, 299, 300, 301, 500, 501, 502, 354,
	968, 302, 303, 1135, 304, 305, 307, 0, 0, 218,
	306, 308, 315, 1136, 967, 309, 503, 311, 310, 312,
	313, 314, 504, 1137, 505, 1138, 316, 969, 506, 970,
	317, 318, 319, 971, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 1139, 328, 327, 1140, 329, 507, 972,
	330, 331, 973, 1141, 332, 333, 1142, 1143, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 974, 347, 348, 351, 350, 975, 349, 1144,
	219, 976, 352, 1145, 508, 353, 509, 355, 356, 1146,
	357, 358, 359, 1147, 1148, 361, 362, 363, 1149, 1150,
	364, 365, 510, 977, 366, 978, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 1151, 375, 376, 512,
	377, 513, 378, 1152, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 1153, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 1154, 402, 979, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 1155,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	1156, 429, 409, 410, 430, 431, 980, 432, 433, 516,
	434, 435, 1157, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 1158, 447, 448, 446, 1159,
	449, 450, 451, 452, 453, 281, 454, 1160, 455, 518,
	519, 520, 521, 1161, 462, 1162, 456, 457, 522, 458,
	523, 1163, 459, 460, 461, 0, 463, 464, 1164, 1165,
	465, 466, 467, 468, 469, 471, 1166, 472, 1167, 470,
	473, 474, 475, 524, 525, 526, 1168, 477, 476, 527,
	1169, 1170, 1171, 1172, 478, 479, 528, 480, 481, 482,
	2128, 0, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 2125, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 2126, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 2124,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 2127, 0,
	0, 0, 0, 0, 0, 875, 2123, 0, 839, 873,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	920, 899, 931, 234, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 955, 241, 992, 993, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 934,
	265, 927, 926, 852, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 925, 272, 0, 273, 0, 274, 275,
	0, 276, 858, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 870, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 924, 922, 923, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	880, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 968, 302, 303, 0, 304, 305, 901, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 913, 904, 915,
	917, 918, 919, 914, 0, 906, 0, 316, 969, 959,
	970, 317, 318, 319, 971, 939, 940, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 973, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 350, 975, 349,
	849, 219, 976, 352, 871, 960, 353, 928, 355, 356,
	0, 902, 358, 903, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 921, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 859,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	183, 424, 425, 894, 895, 897, 898, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 980, 432, 433,
	916, 896, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 964, 441, 442, 443, 987, 0, 447, 448, 446,
	185, 449, 450, 451, 452, 453, 281, 892, 0, 455,
	935, 936, 937, 938, 0, 462, 0, 456, 457, 988,
	458, 989, 869, 459, 460, 461, 0, 463, 464, 0,
	853, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	900, 473, 474, 475, 1342, 932, 982, 0, 477, 476,
	527, 0, 0, 0, 177, 478, 479, 528, 480, 481,
	482, 850, 178, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 905, 863, 864, 865,
	861, 862, 874, 1551, 1549, 0, 0, 873, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 920, 899, 931, 234,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 955, 241, 992, 993, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 934, 265, 927, 926, 852,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 925,
	272, 0, 273, 0, 274, 275, 0, 276, 858, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	870, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	924, 922, 923, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 880, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 901, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 913, 904, 915, 917, 918, 919, 914,
	0, 906, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 939, 940, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 350, 975, 349, 849, 219, 976, 352,
	871, 960, 353, 928, 355, 356, 0, 902, 358, 903,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	921, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 859, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 183, 424, 425, 894,
	895, 897, 898, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 916, 896, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 964, 441, 442,
	443, 987, 0, 447, 448, 446, 185, 449, 450, 451,
	452, 453, 281, 892, 0, 455, 935, 936, 937, 938,
	0, 462, 0, 456, 457, 988, 458, 989, 869, 459,
	460, 461, 0, 463, 464, 0, 853, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 900, 473, 474, 475,
	1342, 932, 982, 0, 477, 476, 527, 0, 0, 0,
	177, 478, 479, 528, 480, 481, 482, 850, 178, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 905, 863, 864, 865, 861, 862, 874, 1551,
	2593, 0, 0, 873, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 183, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 185, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 1342, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 177, 478, 479, 528,
	480, 481, 482, 850, 178, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 1551, 1549, 0, 0, 873,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 2222, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	2227, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 2223, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 2224, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 2181, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 920, 899, 931, 234,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 955, 241, 992, 993, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 934, 265, 927, 926, 852,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 925,
	272, 0, 273, 0, 274, 275, 0, 276, 858, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	870, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	924, 922, 923, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 880, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 901, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 913, 904, 915, 917, 918, 919, 914,
	0, 906, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 939, 940, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 350, 975, 349, 849, 219, 976, 352,
	871, 960, 353, 928, 355, 356, 0, 902, 358, 903,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	921, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 859, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 894,
	895, 897, 898, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 916, 896, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 964, 441, 442,
	443, 987, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 892, 0, 455, 935, 936, 937, 938,
	0, 462, 0, 456, 457, 988, 458, 989, 869, 459,
	460, 461, 0, 463, 464, 0, 853, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 900, 473, 474, 475,
	524, 932, 982, 0, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 0, 0, 875,
	2179, 0, 2178, 873, 905, 863, 864, 865, 861, 862,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 920, 899, 931, 234, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 955,
	241, 992, 993, 490, 0, 242, 962, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 946, 944, 945, 952, 948, 947, 951, 260,
	261, 262, 263, 934, 265, 927, 926, 852, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 925, 272, 0,
	273, 0, 274, 275, 0, 276, 858, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 983, 984, 870, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 924, 922,
	923, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 990, 0, 880, 297, 0, 298, 299, 300,
	301, 957, 958, 961, 354, 968, 302, 303, 0, 304,
	305, 901, 0, 0, 218, 306, 308, 315, 0, 967,
	309, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 316, 969, 959, 970, 317, 318, 319, 971, 939,
	940, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 991, 972, 330, 331, 973, 0, 332,
	333, 950, 949, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 350, 975, 349, 849, 219, 976, 352, 871, 960,
	353, 928, 355, 356, 0, 902, 358, 903, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 985, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 986, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 921, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 859, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 894, 895, 897,
	898, 420, 426, 427, 428, 953, 429, 409, 410, 430,
	431, 980, 432, 433, 916, 896, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 964, 441, 442, 443, 987,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 892, 0, 455, 935, 936, 937, 938, 0, 462,
	0, 456, 457, 988, 458, 989, 869, 459, 460, 461,
	0, 463, 464, 0, 853, 465, 466, 467, 468, 469,
	471, 954, 472, 0, 900, 473, 474, 475, 524, 932,
	982, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	0, 0, 0, 0, 0, 0, 0, 875, 2176, 0,
	2175, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 0, 0,
	0, 0, 0, 0, 0, 875, 2173, 0, 2172, 873,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	920, 899, 931, 234, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 955, 241, 992, 993, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 934,
	265, 927, 926, 852, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 925, 272, 0, 273, 0, 274, 275,
	0, 276, 858, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 870, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 924, 922, 923, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	880, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 968, 302, 303, 0, 304, 305, 901, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 913, 904, 915,
	917, 918, 919, 914, 0, 906, 0, 316, 969, 959,
	970, 317, 318, 319, 971, 939, 940, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 973, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 350, 975, 349,
	849, 219, 976, 352, 871, 960, 353, 928, 355, 356,
	0, 902, 358, 903, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 921, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 859,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 894, 895, 897, 898, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 980, 432, 433,
	916, 896, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 964, 441, 442, 443, 987, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 892, 0, 455,
	935, 936, 937, 938, 0, 462, 0, 456, 457, 988,
	458, 989, 869, 459, 460, 461, 0, 463, 464, 0,
	853, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	900, 473, 474, 475, 524, 932, 982, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 0, 0, 0, 0,
	0, 0, 0, 875, 2170, 0, 1411, 873, 905, 863,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 1410,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 842, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 920, 899, 931, 234,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 955, 241, 992, 993, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 934, 265, 927, 926, 852,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 925,
	272, 0, 273, 0, 274, 275, 0, 276, 858, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	870, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	924, 922, 923, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 880, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 901, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 913, 904, 915, 917, 918, 919, 914,
	0, 906, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 939, 940, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 350, 975, 349, 849, 219, 976, 352,
	871, 960, 353, 928, 355, 356, 0, 902, 358, 903,
	854, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	921, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 859, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 894,
	895, 897, 898, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 916, 896, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 964, 441, 442,
	443, 987, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 892, 0, 455, 935, 936, 937, 938,
	0, 462, 0, 456, 457, 988, 458, 989, 869, 459,
	460, 461, 0, 463, 464, 0, 853, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 900, 473, 474, 475,
	524, 932, 982, 0, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 905, 863, 864, 865, 861, 862, 874, 875,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 3614, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 854, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 3451,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 854, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 905, 863, 864, 865, 861, 862,
	874, 875, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 920, 899, 931, 234, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 955,
	241, 992, 993, 490, 0, 242, 962, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 946, 944, 945, 952, 948, 947, 951, 260,
	261, 262, 263, 934, 265, 927, 926, 852, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 925, 272, 0,
	273, 0, 274, 275, 0, 276, 858, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 983, 984, 870, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 924, 922,
	923, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 990, 0, 880, 297, 0, 298, 299, 300,
	301, 957, 958, 961, 354, 968, 302, 303, 0, 304,
	305, 901, 0, 0, 218, 306, 308, 315, 0, 967,
	309, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 316, 969, 959, 970, 317, 318, 319, 971, 939,
	940, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 991, 972, 330, 331, 973, 0, 332,
	333, 950, 949, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 350, 975, 349, 849, 3169, 976, 352, 871, 960,
	353, 928, 355, 356, 0, 902, 358, 903, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 985, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 986, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 921, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 859, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 894, 895, 897,
	898, 420, 426, 427, 428, 953, 429, 409, 410, 430,
	431, 980, 432, 433, 916, 896, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 964, 441, 442, 443, 987,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 892, 0, 455, 935, 936, 937, 938, 0, 462,
	0, 456, 457, 988, 458, 989, 869, 459, 460, 461,
	0, 463, 464, 0, 853, 465, 466, 467, 468, 469,
	471, 954, 472, 0, 900, 473, 474, 475, 524, 932,
	982, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	1615, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 2971,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 2042, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 2041, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 905, 863, 864, 865, 861, 862,
	874, 875, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 920, 899, 931, 234, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 955,
	241, 992, 993, 490, 0, 242, 962, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 946, 944, 945, 952, 948, 947, 951, 260,
	261, 262, 263, 934, 265, 927, 926, 852, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 925, 272, 0,
	273, 0, 274, 275, 0, 276, 858, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 983, 984, 870, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 924, 922,
	923, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 990, 0, 880, 297, 0, 298, 299, 300,
	301, 957, 958, 961, 354, 968, 302, 303, 0, 304,
	305, 901, 0, 0, 218, 306, 308, 315, 0, 967,
	309, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 316, 969, 959, 970, 317, 318, 319, 971, 939,
	940, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 991, 972, 330, 331, 973, 0, 332,
	333, 950, 949, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 350, 975, 349, 849, 219, 976, 352, 871, 960,
	353, 928, 355, 356, 0, 902, 358, 903, 854, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 985, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 986, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 921, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 859, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 894, 895, 897,
	898, 420, 426, 427, 428, 953, 429, 409, 410, 430,
	431, 980, 432, 433, 916, 896, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 964, 441, 442, 443, 987,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 892, 0, 455, 935, 936, 937, 938, 0, 462,
	0, 456, 457, 988, 458, 989, 869, 459, 460, 461,
	0, 463, 464, 0, 853, 465, 466, 467, 468, 469,
	471, 954, 472, 0, 900, 473, 474, 475, 524, 932,
	982, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	905, 863, 864, 865, 861, 862, 874, 875, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	920, 899, 931, 234, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 955, 241, 992, 993, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 934,
	265, 927, 926, 852, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 925, 272, 0, 273, 0, 274, 275,
	0, 276, 858, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 870, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 924, 922, 923, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	880, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 968, 302, 303, 0, 304, 305, 901, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 913, 904, 915,
	917, 918, 919, 914, 0, 906, 0, 316, 969, 959,
	970, 317, 318, 319, 971, 939, 940, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 973, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 350, 975, 349,
	849, 219, 976, 352, 871, 960, 353, 928, 355, 356,
	0, 902, 358, 903, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 921, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 859,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 894, 895, 897, 898, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 980, 432, 433,
	916, 896, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 964, 441, 442, 443, 987, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 892, 0, 455,
	935, 936, 937, 938, 0, 462, 0, 456, 457, 988,
	458, 989, 869, 459, 460, 461, 0, 463, 464, 0,
	853, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	900, 473, 474, 475, 524, 932, 982, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 1615, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 873, 905, 863,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	2227, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 905, 863, 864, 865, 861, 862,
	874, 875, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 920, 899, 931, 234, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 955,
	241, 992, 993, 490, 0, 242, 962, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 946, 944, 945, 952, 948, 947, 951, 260,
	261, 262, 263, 934, 265, 927, 926, 852, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 925, 272, 0,
	273, 0, 274, 275, 0, 276, 858, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 983, 984, 870, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 924, 922,
	923, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 990, 0, 880, 297, 0, 298, 299, 300,
	301, 957, 958, 961, 354, 968, 302, 303, 0, 304,
	305, 901, 0, 0, 218, 306, 308, 315, 0, 967,
	309, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 316, 969, 959, 970, 317, 318, 319, 971, 939,
	940, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 991, 972, 330, 331, 973, 0, 332,
	333, 950, 949, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 350, 975, 349, 849, 219, 976, 352, 871, 960,
	353, 928, 355, 356, 0, 902, 358, 903, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 985, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 986, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 921, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 859, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 894, 895, 897,
	898, 420, 426, 427, 428, 953, 429, 409, 410, 430,
	431, 980, 432, 433, 916, 896, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 964, 441, 442, 443, 987,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 892, 0, 455, 935, 936, 937, 938, 0, 462,
	0, 456, 457, 988, 458, 989, 869, 459, 460, 461,
	0, 463, 464, 0, 853, 465, 466, 467, 468, 469,
	471, 954, 472, 0, 900, 473, 474, 475, 524, 932,
	982, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	0, 0, 0, 0, 0, 0, 0, 875, 1549, 0,
	2232, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 2230, 873,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	920, 899, 931, 234, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 955, 241, 992, 993, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 934,
	265, 927, 926, 852, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 925, 272, 0, 273, 0, 274, 275,
	0, 276, 858, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 870, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 924, 922, 923, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	880, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 968, 302, 303, 0, 304, 305, 901, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 913, 904, 915,
	917, 918, 919, 914, 0, 906, 0, 316, 969, 959,
	970, 317, 318, 319, 971, 939, 940, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 973, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 350, 975, 349,
	849, 219, 976, 352, 871, 960, 353, 928, 355, 356,
	0, 902, 358, 903, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 921, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 859,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 894, 895, 897, 898, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 980, 432, 433,
	916, 896, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 964, 441, 442, 443, 987, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 892, 0, 455,
	935, 936, 937, 938, 0, 462, 0, 456, 457, 988,
	458, 989, 869, 459, 460, 461, 0, 463, 464, 0,
	853, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	900, 473, 474, 475, 524, 932, 982, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 2218, 873, 905, 863,
	864, 865, 861, 862, 874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 2207, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 920, 899, 931, 234,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 955, 241, 992, 993, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 934, 265, 927, 926, 852,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 925,
	272, 0, 273, 0, 274, 275, 0, 276, 858, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	870, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	924, 922, 923, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 880, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 901, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 913, 904, 915, 917, 918, 919, 914,
	0, 906, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 939, 940, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 350, 975, 349, 849, 219, 976, 352,
	871, 960, 353, 928, 355, 356, 0, 902, 358, 903,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	921, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 859, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 894,
	895, 897, 898, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 916, 896, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 964, 441, 442,
	443, 987, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 892, 0, 455, 935, 936, 937, 938,
	0, 462, 0, 456, 457, 988, 458, 989, 869, 459,
	460, 461, 0, 463, 464, 0, 853, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 900, 473, 474, 475,
	524, 932, 982, 0, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 2205, 873, 2196, 2203, 864, 865, 861, 862,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 920, 899, 931, 234, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 955,
	241, 992, 993, 490, 0, 242, 962, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 946, 944, 945, 952, 948, 947, 951, 260,
	261, 262, 263, 934, 2199, 927, 926, 852, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 925, 272, 0,
	273, 0, 274, 275, 0, 276, 858, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 983, 984, 870, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 924, 922,
	923, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 990, 0, 880, 297, 0, 298, 299, 300,
	2200, 957, 958, 961, 354, 968, 302, 303, 0, 304,
	305, 901, 0, 0, 218, 306, 308, 315, 0, 967,
	309, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 316, 969, 959, 970, 317, 318, 319, 971, 939,
	940, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 991, 972, 330, 331, 973, 0, 332,
	333, 950, 949, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 2201, 2198, 345, 893, 344, 974, 347, 348,
	351, 350, 975, 349, 849, 219, 976, 352, 871, 960,
	353, 928, 355, 356, 0, 902, 358, 903, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 985, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 986, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 921, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 859, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 2202, 0, 424, 425, 894, 895, 897,
	898, 420, 426, 427, 428, 953, 429, 409, 410, 430,
	431, 980, 432, 433, 916, 896, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 964, 441, 442, 443, 987,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 892, 0, 455, 935, 936, 937, 938, 0, 462,
	0, 456, 457, 988, 458, 989, 869, 459, 460, 461,
	0, 463, 464, 0, 853, 465, 466, 467, 468, 469,
	471, 954, 472, 0, 900, 473, 474, 475, 524, 932,
	982, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 2197, 482, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	2193, 873, 2196, 2203, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 2199, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 2200, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	2201, 2198, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 2202, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 2197, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 1557,
	0, 875, 0, 0, 0, 873, 905, 863, 864, 865,
	861, 862, 874, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 2021, 225,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 920, 899, 931, 234,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 955, 241, 992, 993, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 934, 265, 927, 926, 852,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 925,
	272, 0, 273, 0, 274, 275, 0, 276, 858, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	870, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	924, 922, 923, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 880, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 901, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 913, 904, 915, 917, 918, 919, 914,
	0, 906, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 939, 940, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 350, 975, 349, 849, 219, 976, 352,
	871, 960, 353, 928, 355, 356, 0, 902, 358, 903,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	921, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 859, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 894,
	895, 897, 898, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 916, 896, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 964, 441, 442,
	443, 987, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 892, 0, 455, 935, 936, 937, 938,
	0, 462, 0, 456, 457, 988, 458, 989, 869, 459,
	460, 461, 0, 463, 464, 0, 853, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 900, 473, 474, 475,
	524, 932, 982, 0, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 1230, 873, 905, 863, 864, 865, 861, 862,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 920, 899, 931, 234, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 955,
	241, 992, 993, 490, 0, 242, 962, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 946, 944, 945, 952, 948, 947, 951, 260,
	261, 262, 263, 934, 265, 927, 926, 852, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 925, 272, 0,
	273, 0, 274, 275, 0, 276, 858, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 983, 984, 870, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 924, 922,
	923, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 990, 0, 880, 297, 0, 298, 299, 300,
	301, 1229, 958, 961, 354, 968, 302, 303, 0, 304,
	305, 901, 0, 0, 218, 306, 308, 315, 0, 967,
	309, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 316, 969, 959, 970, 317, 318, 319, 971, 939,
	940, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 991, 972, 330, 331, 973, 0, 332,
	333, 950, 949, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 350, 975, 349, 849, 219, 976, 352, 871, 960,
	353, 928, 355, 356, 0, 902, 358, 903, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 985, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 986, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 921, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 859, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 894, 895, 897,
	898, 420, 426, 427, 428, 953, 429, 409, 410, 430,
	431, 980, 432, 433, 916, 896, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 964, 441, 442, 443, 987,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 892, 0, 455, 935, 936, 937, 938, 0, 462,
	0, 456, 457, 988, 458, 989, 869, 459, 460, 461,
	0, 463, 464, 0, 853, 465, 466, 467, 468, 469,
	471, 954, 472, 0, 900, 473, 474, 475, 524, 932,
	982, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	1224, 873, 905, 863, 864, 865, 861, 862, 874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 1223,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 1219, 873,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	920, 899, 931, 234, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 955, 241, 992, 993, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 934,
	265, 927, 926, 852, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 925, 272, 0, 273, 0, 274, 275,
	0, 276, 858, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 870, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 924, 922, 923, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	880, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 968, 302, 303, 0, 304, 305, 901, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 913, 904, 915,
	917, 918, 919, 914, 0, 906, 0, 316, 969, 959,
	970, 317, 318, 319, 971, 939, 940, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 973, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 350, 975, 349,
	849, 219, 976, 352, 871, 960, 353, 928, 355, 356,
	0, 902, 358, 903, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 921, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 859,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 894, 895, 897, 898, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 980, 432, 433,
	916, 896, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 964, 441, 442, 443, 987, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 892, 0, 455,
	935, 936, 937, 938, 0, 462, 0, 456, 457, 988,
	458, 989, 869, 459, 460, 461, 0, 463, 464, 0,
	853, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	900, 473, 474, 475, 524, 932, 982, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 905, 863, 864, 865,
	861, 862, 874, 875, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 920, 899, 931, 234,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 955, 241, 992, 993, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 934, 265, 927, 926, 852,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 925,
	272, 0, 273, 0, 274, 275, 0, 276, 858, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	870, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	924, 922, 923, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 880, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 901, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 913, 904, 915, 917, 918, 919, 914,
	0, 906, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 939, 940, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 350, 975, 349, 849, 219, 976, 352,
	871, 960, 353, 928, 355, 356, 0, 902, 358, 903,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	921, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 859, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 894,
	895, 897, 898, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 916, 896, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 964, 441, 442,
	443, 987, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 892, 0, 455, 935, 936, 937, 938,
	0, 462, 0, 456, 457, 988, 458, 989, 869, 459,
	460, 461, 0, 463, 464, 0, 853, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 900, 473, 474, 475,
	524, 932, 982, 0, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	846, 847, 905, 863, 864, 865, 861, 862, 874, 875,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 3644,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 852, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 849, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 3643,
	464, 0, 853, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 850, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 0, 846, 847, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 3642, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 3644, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 852, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 849, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 859, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 3643, 464, 0, 853, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 850,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 846, 847, 905, 863, 864, 865, 2560, 2561,
	874, 875, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 956, 879, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 920, 899, 931, 234, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 955,
	241, 992, 993, 490, 0, 242, 962, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 946, 944, 945, 952, 948, 947, 951, 260,
	261, 262, 263, 934, 265, 927, 926, 852, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 925, 272, 0,
	273, 0, 274, 275, 0, 276, 858, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 983, 984, 870, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 924, 922,
	923, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 990, 0, 880, 297, 0, 298, 299, 300,
	301, 957, 958, 961, 354, 968, 302, 303, 0, 304,
	305, 901, 0, 0, 218, 306, 308, 315, 0, 967,
	309, 913, 904, 915, 917, 918, 919, 914, 0, 906,
	0, 316, 969, 959, 970, 317, 318, 319, 971, 939,
	940, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 991, 972, 330, 331, 973, 0, 332,
	333, 950, 949, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 893, 344, 974, 347, 348,
	351, 350, 975, 349, 849, 219, 976, 352, 871, 960,
	353, 928, 355, 356, 0, 902, 358, 903, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 985, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 986, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 921, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 859, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 894, 895, 897,
	898, 420, 426, 427, 428, 953, 429, 409, 410, 430,
	431, 980, 432, 433, 916, 896, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 964, 441, 442, 443, 987,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 892, 0, 455, 935, 936, 937, 938, 0, 462,
	0, 456, 457, 988, 458, 989, 869, 459, 460, 461,
	0, 463, 464, 0, 853, 465, 466, 467, 468, 469,
	471, 954, 472, 0, 900, 473, 474, 475, 524, 932,
	982, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 850, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 0, 846, 847,
	905, 863, 864, 865, 2558, 2559, 874, 875, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 956,
	879, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	920, 899, 931, 234, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 955, 241, 992, 993, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 934,
	265, 927, 926, 852, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 925, 272, 0, 273, 0, 274, 275,
	0, 276, 858, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 870, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 924, 922, 923, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	880, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 968, 302, 303, 0, 304, 305, 901, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 913, 904, 915,
	917, 918, 919, 914, 0, 906, 0, 316, 969, 959,
	970, 317, 318, 319, 971, 939, 940, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 973, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 350, 975, 349,
	849, 219, 976, 352, 871, 960, 353, 928, 355, 356,
	0, 902, 358, 903, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 921, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 859,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 894, 895, 897, 898, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 980, 432, 433,
	916, 896, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 964, 441, 442, 443, 987, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 892, 0, 455,
	935, 936, 937, 938, 0, 462, 0, 456, 457, 988,
	458, 989, 869, 459, 460, 461, 0, 463, 464, 0,
	853, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	900, 473, 474, 475, 524, 932, 982, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 850, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 0, 846, 847, 905, 863, 864, 865,
	861, 862, 874, 875, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 956, 879, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 920, 899, 931, 234,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 955, 241, 992, 993, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 934, 265, 927, 926, 852,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 925,
	272, 0, 273, 0, 274, 275, 0, 276, 858, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	870, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	924, 922, 923, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 880, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 901, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 913, 904, 915, 917, 918, 919, 914,
	0, 906, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 939, 940, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 893, 344, 974,
	347, 348, 351, 350, 975, 349, 849, 219, 976, 352,
	871, 960, 353, 928, 355, 356, 0, 902, 358, 903,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	921, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 859, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 894,
	895, 897, 898, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 916, 896, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 964, 441, 442,
	443, 987, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 892, 0, 455, 935, 936, 937, 938,
	0, 462, 0, 456, 457, 988, 458, 989, 869, 459,
	460, 461, 0, 463, 464, 0, 853, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 900, 473, 474, 475,
	524, 932, 982, 0, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 850, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	2029, 2030, 905, 863, 864, 865, 861, 862, 874, 875,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 879, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 920, 899, 931, 234, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 955, 241, 992,
	993, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 934, 265, 927, 926, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 925, 272, 0, 273, 0,
	274, 275, 0, 276, 858, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 870, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 924, 922, 923, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 880, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 901,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 913,
	904, 915, 917, 918, 919, 914, 0, 906, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 939, 940, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 893, 344, 974, 347, 348, 351, 350,
	975, 349, 0, 219, 976, 352, 871, 960, 353, 928,
	355, 356, 0, 902, 358, 903, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 921, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 859, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 894, 895, 897, 898, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 916, 896, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 964, 441, 442, 443, 987, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 892,
	0, 455, 935, 936, 937, 938, 0, 462, 0, 456,
	457, 988, 458, 989, 869, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 900, 473, 474, 475, 524, 932, 982, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 0, 0, 0, 0, 0, 0, 2215,
	0, 0, 0, 0, 0, 0, 2213, 2214, 905, 863,
	864, 865, 861, 862, 874, 875, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 956, 879, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 920, 899,
	931, 234, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 955, 241, 992, 993, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 934, 265, 927,
	926, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 925, 272, 0, 273, 0, 274, 275, 0, 276,
	858, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 870, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 924, 922, 923, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 880, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 901, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 939, 940, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 893,
	344, 974, 347, 348, 351, 350, 975, 349, 0, 219,
	976, 352, 871, 960, 353, 928, 355, 356, 0, 902,
	358, 903, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 921, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 2553, 2554, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 894, 895, 897, 898, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 916, 896,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 964,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 892, 0, 455, 935, 936,
	937, 938, 0, 462, 0, 456, 457, 988, 458, 989,
	869, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 900, 473,
	474, 475, 524, 932, 982, 0, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 905,
	863, 864, 865, 861, 862, 874, 0, 0, 0, 0,
	0, 0, 1769, 1770, 0, 0, 220, 221, 222, 223,
	224, 875, 225, 0, 0, 873, 0, 0, 956, 879,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 920,
	899, 931, 234, 889, 930, 929, 0, 235, 891, 890,
	238, 239, 240, 0, 955, 241, 992, 993, 490, 0,
	242, 962, 0, 943, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 965, 258, 259, 946, 944, 945,
	952, 948, 947, 951, 260, 261, 262, 263, 934, 265,
	927, 926, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 925, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 983, 984, 870, 217, 0, 0, 0, 0, 0,
	287, 288, 289, 924, 922, 923, 0, 292, 0, 293,
	0, 0, 966, 294, 295, 0, 296, 990, 0, 880,
	297, 0, 298, 299, 300, 301, 957, 958, 961, 354,
	968, 302, 303, 0, 304, 305, 901, 0, 0, 218,
	306, 308, 315, 0, 967, 309, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 316, 969, 959, 970,
	317, 318, 319, 971, 939, 940, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 991, 972,
	330, 331, 973, 0, 332, 333, 950, 949, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	893, 344, 974, 347, 348, 351, 350, 975, 349, 0,
	219, 976, 352, 871, 960, 353, 928, 355, 356, 0,
	902, 358, 903, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 977, 366, 978, 985, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 986,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 921, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 979, 403, 404, 405, 406, 859, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 894, 895, 897, 898, 420, 426, 427, 428,
	953, 429, 409, 410, 430, 431, 980, 432, 433, 916,
	896, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	964, 441, 442, 443, 987, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 892, 0, 455, 935,
	936, 937, 938, 0, 462, 0, 456, 457, 988, 458,
	989, 869, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 954, 472, 0, 900,
	473, 474, 475, 524, 932, 982, 0, 477, 476, 527,
	0, 0, 0, 0, 478, 479, 528, 480, 481, 482,
	905, 863, 864, 865, 861, 862, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 875, 225, 0, 0, 873, 0, 0, 956,
	879, 0, 0, 0, 226, 228, 227, 229, 230, 0,
	920, 899, 931, 234, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 955, 241, 992, 993, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 3644, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 934,
	265, 927, 926, 852, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 925, 272, 0, 273, 0, 274, 275,
	0, 276, 858, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 870, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 924, 922, 923, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	880, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 0, 302, 303, 0, 304, 305, 901, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 913, 904, 915,
	917, 918, 919, 914, 0, 906, 0, 316, 0, 959,
	0, 317, 318, 319, 971, 939, 940, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 0, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 893, 344, 974, 347, 348, 351, 350, 975, 349,
	849, 219, 0, 352, 871, 960, 353, 928, 355, 356,
	0, 902, 358, 903, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 921, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 859,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 894, 895, 897, 898, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 0, 432, 433,
	916, 896, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 964, 441, 442, 443, 987, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 892, 0, 455,
	935, 936, 937, 938, 0, 462, 0, 456, 457, 988,
	458, 989, 869, 459, 460, 461, 0, 3643, 464, 0,
	853, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	900, 473, 474, 475, 524, 932, 982, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 1030, 0, 0, 846, 847, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 873, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 955, 241, 488, 489,
	490, 0, 242, 962, 0, 943, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 965, 258, 259, 946,
	944, 945, 952, 948, 947, 951, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 983, 984, 0, 217, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 966, 294, 295, 0, 296, 990,
	0, 499, 297, 0, 298, 299, 300, 301, 957, 958,
	961, 354, 968, 302, 303, 0, 304, 305, 307, 0,
	0, 218, 306, 308, 315, 0, 967, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 969,
	959, 970, 317, 318, 319, 971, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 1016, 328, 327, 0, 329,
	991, 972, 330, 331, 973, 0, 332, 333, 950, 949,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 974, 347, 348, 351, 350, 975,
	349, 0, 219, 976, 352, 0, 960, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 1022, 361, 362, 363,
	0, 0, 364, 365, 510, 977, 366, 978, 985, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 986, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 979, 403, 404, 405, 406,
	515, 1024, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 183, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 953, 429, 409, 410, 430, 431, 980, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 987, 0, 447, 448,
	446, 185, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	988, 458, 989, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 954, 472,
	0, 470, 473, 474, 475, 1342, 525, 526, 0, 477,
	476, 527, 1030, 0, 0, 177, 478, 479, 528, 480,
	481, 482, 0, 178, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 956, 1020, 0, 1639, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 955, 241, 488,
	489, 490, 0, 242, 962, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	946, 944, 945, 952, 948, 947, 951, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 983, 984, 0, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	990, 0, 499, 297, 0, 298, 299, 300, 301, 957,
	958, 961, 354, 968, 302, 303, 0, 304, 305, 307,
	0, 0, 218, 306, 308, 315, 0, 967, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	969, 959, 970, 317, 318, 319, 971, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 1016, 328, 327, 0,
	329, 991, 972, 330, 331, 973, 0, 332, 333, 950,
	949, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 974, 347, 348, 351, 350,
	975, 349, 0, 219, 976, 352, 0, 960, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 1022, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 985,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 986, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 515, 1024, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 183, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 953, 429, 409, 410, 430, 431, 980,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 987, 0, 447,
	448, 446, 185, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 988, 458, 989, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 954,
	472, 0, 470, 473, 474, 475, 1342, 525, 526, 0,
	477, 476, 527, 2706, 0, 1030, 177, 478, 479, 528,
	480, 481, 482, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 0, 225, 0,
	0, 0, 0, 1020, 956, 1639, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	955, 241, 488, 489, 490, 0, 242, 962, 0, 943,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	965, 258, 259, 946, 944, 945, 952, 948, 947, 951,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 983, 984, 0,
	217, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 966, 294,
	295, 0, 296, 990, 0, 499, 297, 0, 298, 299,
	300, 301, 957, 958, 961, 354, 968, 302, 303, 0,
	304, 305, 307, 0, 0, 218, 306, 308, 315, 0,
	967, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 969, 959, 970, 317, 318, 319, 971,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 1016,
	328, 327, 0, 329, 991, 972, 330, 331, 973, 0,
	332, 333, 950, 949, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 350, 975, 349, 0, 219, 976, 352, 0,
	960, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	1022, 361, 362, 363, 0, 0, 364, 365, 510, 977,
	366, 978, 985, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 986, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 979,
	403, 404, 405, 406, 515, 1024, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 953, 429, 409, 410,
	430, 431, 980, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	987, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 988, 458, 989, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 954, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 0, 477, 476, 527, 1012, 0, 1030, 0,
	478, 479, 528, 480, 481, 482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 1020, 956, 1018, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 0, 235, 236, 237, 238,
	239, 240, 0, 955, 241, 488, 489, 490, 0, 242,
	962, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 965, 258, 259, 946, 944, 945, 952,
	948, 947, 951, 260, 261, 262, 263, 264, 265, 492,
	493, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	983, 984, 0, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 0, 293, 0,
	0, 966, 294, 295, 0, 296, 990, 0, 499, 297,
	0, 298, 299, 300, 301, 957, 958, 961, 354, 968,
	302, 303, 0, 304, 305, 307, 0, 0, 218, 306,
	308, 315, 0, 967, 309, 503, 311, 310, 312, 313,
	314, 504, 0, 505, 0, 316, 969, 959, 970, 317,
	318, 319, 971, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 1016, 328, 327, 0, 329, 991, 972, 330,
	331, 973, 0, 332, 333, 950, 949, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 974, 347, 348, 351, 350, 975, 349, 0, 219,
	976, 352, 0, 960, 353, 509, 355, 356, 0, 357,
	358, 359, 0, 1022, 361, 362, 363, 0, 0, 364,
	365, 510, 977, 366, 978, 985, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 986, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 979, 403, 404, 405, 406, 515, 1024, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 953,
	429, 409, 410, 430, 431, 980, 432, 433, 516, 434,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 987, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 454, 0, 455, 518, 519,
	520, 521, 0, 462, 0, 456, 457, 988, 458, 989,
	0, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 954, 472, 0, 470, 473,
	474, 475, 524, 525, 526, 0, 477, 476, 527, 1030,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 956, 1020,
	0, 1018, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 955, 241, 488, 489, 490, 0,
	242, 962, 0, 943, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 965, 258, 259, 946, 944, 945,
	952, 948, 947, 951, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 983, 984, 0, 217, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 966, 294, 295, 0, 296, 990, 0, 499,
	297, 0, 298, 299, 300, 301, 957, 958, 961, 354,
	968, 302, 303, 0, 304, 305, 307, 0, 0, 218,
	306, 308, 315, 0, 967, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 969, 959, 970,
	317, 318, 319, 971, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 1016, 328, 327, 0, 329, 991, 972,
	330, 331, 973, 0, 332, 333, 950, 949, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 974, 347, 348, 351, 350, 975, 349, 0,
	219, 976, 352, 0, 960, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 1022, 361, 362, 363, 0, 0,
	364, 365, 510, 977, 366, 978, 985, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 986,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 979, 403, 404, 405, 406, 515, 1024,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	953, 429, 409, 410, 430, 431, 980, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 987, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 988, 458,
	989, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 954, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 0, 477, 476, 527,
	1030, 0, 0, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 956,
	1020, 0, 1018, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 955, 241, 488, 489, 490,
	0, 242, 962, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 946, 944,
	945, 952, 948, 947, 951, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 983, 984, 0, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 990, 0,
	499, 297, 0, 298, 299, 300, 301, 957, 958, 961,
	354, 968, 302, 303, 0, 304, 305, 307, 0, 0,
	218, 306, 308, 315, 0, 967, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 969, 959,
	970, 317, 318, 319, 971, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 991,
	972, 330, 331, 973, 0, 332, 333, 950, 949, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 974, 347, 348, 351, 350, 975, 349,
	0, 219, 976, 352, 0, 960, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 985, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	986, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 515,
	1024, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 953, 429, 409, 410, 430, 431, 980, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 987, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 988,
	458, 989, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 954, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 839, 0, 1189, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 1540, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 1093, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 965, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 966, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 968, 302, 303, 0, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 967, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 969, 506, 970, 317, 318, 319, 971, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 972, 330, 331, 973, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 974, 347, 348, 351,
	350, 975, 349, 0, 0, 976, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 977, 366, 978,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 979, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 183, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	980, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 185, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 1342, 525, 526,
	0, 477, 476, 527, 1339, 0, 1189, 177, 478, 479,
	528, 480, 481, 482, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 152, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	1093, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 500, 501, 502, 354, 968, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 967, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 969, 506, 970, 317, 318, 319,
	971, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 972, 330, 331, 973,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 350, 975, 349, 0, 0, 976, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 183, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 980, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 185, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	1342, 525, 526, 0, 477, 476, 527, 0, 0, 0,
	177, 478, 479, 528, 480, 481, 482, 0, 178, 0,
	0, 0, 0, 1189, 1188, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 1093, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 965, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 966, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 968, 302, 303, 0, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 967, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 969, 506, 970, 317, 318, 319, 971, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 972, 330, 331, 973, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 974, 347, 348, 351,
	350, 975, 349, 0, 0, 976, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 977, 366, 978,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 979, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	980, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	0, 477, 476, 527, 0, 0, 0, 0, 478, 479,
	528, 480, 481, 482, 1189, 1188, 0, 0, 0, 0,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 2908, 225, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 1093, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 968, 302, 303, 0, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 967,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 969, 506, 970, 317, 318, 319, 971, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 972, 330, 331, 973, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 974, 347, 348,
	351, 350, 975, 349, 0, 0, 976, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 980, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 1189, 1188, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 1209, 225, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 1093,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	965, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	217, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 966, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 500, 501, 502, 354, 968, 302, 303, 0,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	967, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 969, 506, 970, 317, 318, 319, 971,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 972, 330, 331, 973, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 350, 975, 349, 0, 0, 976, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	0, 361, 362, 363, 0, 0, 364, 365, 510, 977,
	366, 978, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 979,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 980, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 0, 477, 476, 527, 1030, 0, 0, 0,
	478, 479, 528, 480, 481, 482, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 956, 0, 0, 1348, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 955, 241, 488, 489, 490, 0, 242, 962, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 946, 944, 945, 952, 948, 947,
	951, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 983, 984,
	0, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 990, 0, 499, 297, 0, 298,
	299, 300, 301, 957, 958, 961, 354, 968, 302, 303,
	0, 304, 305, 307, 0, 0, 218, 306, 308, 315,
	0, 967, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 969, 959, 970, 317, 318, 319,
	971, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 991, 972, 330, 331, 973,
	0, 332, 333, 950, 949, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 350, 975, 349, 0, 219, 976, 352,
	0, 960, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 985, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 986, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 953, 429, 409,
	410, 430, 431, 980, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 987, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 988, 458, 989, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 954, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 0, 477, 476, 527, 839, 0, 214,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 0, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 500, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 0, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	0, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 183,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 185,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 1342, 525, 526, 0, 477, 476, 527,
	214, 0, 0, 177, 478, 479, 528, 480, 481, 482,
	0, 178, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 152, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	218, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 219, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 1289, 0, 214, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 1653, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 218, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 219, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	0, 477, 476, 527, 214, 0, 0, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 483, 1293, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 218, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 219, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 0, 477, 476, 527, 214, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 0, 225, 0,
	0, 0, 0, 0, 483, 2858, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	0, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	217, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 0, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 500, 501, 502, 354, 0, 302, 303, 0,
	304, 305, 307, 0, 0, 218, 306, 308, 315, 0,
	0, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 0, 506, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 0, 330, 331, 0, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 350, 0, 349, 0, 219, 0, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	0, 361, 362, 363, 0, 0, 364, 365, 510, 0,
	366, 0, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 0, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 0, 477, 476, 527, 214, 0, 0, 0,
	478, 479, 528, 480, 481, 482, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 1293, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 0, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 0,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 500, 501, 502, 354, 0, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 0, 506, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 0, 330, 331, 0,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 350, 0, 349, 0, 0, 0, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	0, 366, 0, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 0, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 0, 477, 476, 527, 214, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 2458,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 500, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 0, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 0, 477, 476, 527, 214, 0,
	0, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 483, 0, 0,
	2995, 0, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 488, 489, 490, 0, 242,
	491, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 0, 258, 259, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 264, 265, 492,
	493, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 0, 293, 0,
	0, 0, 294, 295, 0, 296, 498, 0, 499, 297,
	0, 298, 299, 300, 301, 500, 501, 502, 354, 0,
	302, 303, 0, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 0, 309, 503, 311, 310, 312, 313,
	314, 504, 0, 505, 0, 316, 0, 506, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 507, 0, 330,
	331, 0, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 350, 0, 349, 0, 0,
	0, 352, 0, 508, 353, 509, 355, 356, 0, 357,
	358, 359, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 0, 366, 0, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 512, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 0,
	429, 409, 410, 430, 431, 0, 432, 433, 516, 434,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 454, 0, 455, 518, 519,
	520, 521, 0, 462, 0, 456, 457, 522, 458, 523,
	0, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 0, 472, 0, 470, 473,
	474, 475, 524, 525, 526, 0, 477, 476, 527, 709,
	0, 599, 0, 478, 479, 528, 480, 481, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 1934, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 605, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 217, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 707, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 500, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 218, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 350, 0,
	349, 0, 219, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 604, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 0, 477,
	476, 527, 0, 598, 0, 599, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 608, 225, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	0, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 605, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	217, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 0, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 500, 501, 502, 354, 0, 302, 303, 0,
	304, 305, 307, 0, 0, 218, 306, 308, 315, 0,
	0, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 0, 506, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 0, 330, 331, 0, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 350, 0, 349, 0, 219, 0, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	0, 361, 362, 363, 0, 0, 364, 365, 510, 0,
	366, 0, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 0, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 604, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 596,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 0, 477, 476, 527, 0, 0, 0, 0,
	478, 479, 528, 480, 481, 482, 1189, 1188, 0, 0,
	0, 0, 1186, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	1093, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 500, 501, 502, 354, 968, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 967, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 969, 506, 970, 317, 318, 319,
	971, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 972, 330, 331, 973,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 350, 975, 349, 0, 0, 976, 352,
	2830, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 980, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 599, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	605, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 218, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 219, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 1968, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 604, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	0, 477, 476, 527, 599, 0, 0, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 608,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 605, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 218, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 219, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 604, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 0, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 1375, 0, 1189, 1188, 0,
	0, 0, 0, 1186, 0, 0, 0, 0, 0, 0,
	608, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 1093, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 965, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 217, 0, 0, 0, 0, 0, 1374, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	966, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 500, 501, 502, 354, 968, 302,
	303, 0, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 967, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 969, 506, 970, 317, 318,
	319, 971, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 972, 330, 331,
	973, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	974, 347, 348, 351, 350, 975, 349, 0, 0, 976,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 977, 366, 978, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 1373,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 979, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 1372, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 980, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 0, 477, 476, 527, 0, 0,
	0, 0, 478, 479, 528, 480, 481, 482, 1337, 0,
	1189, 1188, 0, 0, 0, 0, 1186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 1093, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 965, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 966, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 1336, 501, 502,
	354, 968, 302, 303, 0, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 967, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 969, 506,
	970, 317, 318, 319, 971, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	972, 330, 331, 973, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 974, 347, 348, 351, 350, 975, 349,
	0, 0, 976, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 977, 366, 978, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 979, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 980, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 1333, 0, 1189, 1188, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 1093, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 965, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 966, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	1332, 501, 502, 354, 968, 302, 303, 0, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 967, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 969, 506, 970, 317, 318, 319, 971, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 972, 330, 331, 973, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 974, 347, 348, 351,
	350, 975, 349, 0, 0, 976, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 977, 366, 978,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 979, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	980, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	0, 477, 476, 527, 0, 0, 0, 0, 478, 479,
	528, 480, 481, 482, 1269, 0, 1189, 1188, 0, 0,
	0, 0, 1186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	1093, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 1268, 501, 502, 354, 968, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 967, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 969, 506, 970, 317, 318, 319,
	971, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 972, 330, 331, 973,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 350, 975, 349, 0, 0, 976, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 980, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 0, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 1266, 0, 1189,
	1188, 0, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 1093, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 965, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 217, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 966, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 1265, 501, 502, 354,
	968, 302, 303, 0, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 967, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 969, 506, 970,
	317, 318, 319, 971, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 972,
	330, 331, 973, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 974, 347, 348, 351, 350, 975, 349, 0,
	0, 976, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 977, 366, 978, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 979, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 980, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 0, 477, 476, 527,
	0, 0, 0, 0, 478, 479, 528, 480, 481, 482,
	1206, 0, 1189, 1188, 0, 0, 0, 0, 1186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 488,
	489, 490, 0, 242, 491, 0, 1093, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 0, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	498, 0, 499, 297, 0, 298, 299, 300, 301, 500,
	501, 502, 354, 968, 302, 303, 0, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 967, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	969, 506, 970, 317, 318, 319, 971, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 507, 972, 330, 331, 973, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 974, 347, 348, 351, 350,
	975, 349, 0, 0, 976, 352, 0, 508, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 512, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 0, 429, 409, 410, 430, 431, 980,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 522, 458, 523, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 0,
	472, 0, 470, 473, 474, 475, 524, 525, 526, 0,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 1182, 0, 1189, 1188, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 0, 225, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 1093,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	965, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	217, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 966, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 1184, 501, 502, 354, 968, 302, 303, 0,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	967, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 969, 506, 970, 317, 318, 319, 971,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 972, 330, 331, 973, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 350, 975, 349, 0, 0, 976, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	0, 361, 362, 363, 0, 0, 364, 365, 510, 977,
	366, 978, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 979,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 980, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 0, 477, 476, 527, 0, 0, 0, 0,
	478, 479, 528, 480, 481, 482, 1189, 1188, 0, 0,
	0, 0, 1186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	1093, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 965, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 966,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 500, 501, 502, 354, 968, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 967, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 969, 506, 970, 317, 318, 319,
	971, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 972, 330, 331, 973,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 974,
	347, 348, 351, 350, 975, 349, 0, 0, 976, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	977, 366, 978, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	979, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 980, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 214, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 218, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 219, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	0, 477, 476, 527, 1189, 1188, 0, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 608,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 1093, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 965,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 1742, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 966, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 968, 302, 303, 0, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 967,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 969, 506, 970, 317, 318, 319, 971, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 972, 330, 331, 973, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 974, 347, 348,
	351, 350, 975, 349, 0, 0, 976, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 977, 366,
	978, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 979, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 980, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 0, 477, 476, 527, 1189, 1188, 0, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 0, 225, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 1093,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	965, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	217, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 966, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 500, 501, 502, 354, 968, 302, 303, 0,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	967, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 969, 506, 970, 317, 318, 319, 971,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 972, 330, 331, 973, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 974, 347,
	348, 351, 350, 975, 349, 0, 0, 976, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	0, 361, 362, 363, 0, 0, 364, 365, 510, 977,
	366, 978, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 979,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 980, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 1189, 477, 476, 527, 0, 0, 0, 0,
	478, 479, 528, 480, 481, 482, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 488,
	489, 490, 0, 242, 491, 0, 1093, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 965, 258, 259,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 0, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 966, 294, 295, 0, 296,
	498, 0, 499, 297, 0, 298, 299, 300, 301, 500,
	501, 502, 354, 968, 302, 303, 0, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 967, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	969, 506, 970, 317, 318, 319, 971, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 507, 972, 330, 331, 973, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 974, 347, 348, 351, 350,
	975, 349, 0, 0, 976, 352, 0, 508, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 977, 366, 978, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 512, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 979, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 0, 429, 409, 410, 430, 431, 980,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 522, 458, 523, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 0,
	472, 0, 470, 473, 474, 475, 524, 525, 526, 214,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 2341,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 2338, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 2494, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	2344, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 500, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 2491,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 2493, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 2490, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	0, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 2343, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 2492,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 214, 477, 476, 527,
	0, 0, 0, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 2341, 242, 491, 0,
	0, 2335, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 2338, 253, 0, 254, 255, 256, 0,
	257, 0, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 2344, 0, 0,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 2334, 501, 502, 354, 0, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 0, 506, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 0, 330, 331, 0,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 350, 0, 349, 0, 0, 0, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	0, 366, 0, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	2343, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 0, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 2342, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 0, 477, 476, 527, 1430, 0, 214,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 217, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 500, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 218,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 0, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	219, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	1433, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 1431,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 0, 1432, 476, 527,
	1177, 0, 214, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 488,
	489, 490, 0, 242, 491, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 0, 258, 259,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 0, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 0, 294, 295, 0, 296,
	498, 0, 499, 297, 0, 298, 299, 300, 301, 1179,
	501, 502, 354, 0, 302, 303, 0, 304, 305, 307,
	0, 0, 218, 306, 308, 315, 0, 0, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	0, 506, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 507, 0, 330, 331, 0, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 350,
	0, 349, 0, 219, 0, 352, 0, 508, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 1022, 361, 362,
	363, 0, 0, 364, 365, 510, 0, 366, 0, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 512, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 0, 429, 409, 410, 430, 431, 0,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 522, 458, 523, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 0,
	472, 0, 470, 473, 474, 475, 524, 525, 526, 0,
	477, 476, 527, 1174, 0, 214, 0, 478, 479, 528,
	480, 481, 482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 0, 225, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	0, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	217, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 0, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 1176, 501, 502, 354, 0, 302, 303, 0,
	304, 305, 307, 0, 0, 218, 306, 308, 315, 0,
	0, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 0, 506, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 0, 330, 331, 0, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 350, 0, 349, 0, 219, 0, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	1022, 361, 362, 363, 0, 0, 364, 365, 510, 0,
	366, 0, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 0, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 0, 477, 476, 527, 1081, 0, 214, 0,
	478, 479, 528, 480, 481, 482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 488, 489, 490, 0, 242,
	491, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 0, 258, 259, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 264, 265, 492,
	493, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 0, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 0, 293, 0,
	0, 0, 294, 295, 0, 296, 498, 0, 499, 297,
	0, 298, 299, 300, 301, 1083, 501, 502, 354, 0,
	302, 303, 0, 304, 305, 307, 0, 0, 218, 306,
	308, 315, 0, 0, 309, 503, 311, 310, 312, 313,
	314, 504, 0, 505, 0, 316, 0, 506, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 507, 0, 330,
	331, 0, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 350, 0, 349, 0, 219,
	0, 352, 0, 508, 353, 509, 355, 356, 0, 357,
	358, 359, 0, 1022, 361, 362, 363, 0, 0, 364,
	365, 510, 0, 366, 0, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 512, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 0,
	429, 409, 410, 430, 431, 0, 432, 433, 516, 434,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 454, 0, 455, 518, 519,
	520, 521, 0, 462, 0, 456, 457, 522, 458, 523,
	0, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 0, 472, 0, 470, 473,
	474, 475, 524, 525, 526, 0, 477, 476, 527, 557,
	0, 214, 0, 478, 479, 528, 480, 481, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	222, 556, 224, 546, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 549, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 550, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 500, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 350, 0,
	349, 0, 0, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 551, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 0, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 0, 477,
	476, 527, 545, 0, 214, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 546, 225, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 549, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 0,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	550, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 0, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 551, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 214, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 217, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 500, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 218, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 350, 2822,
	349, 0, 219, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 0, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 214, 477,
	476, 527, 0, 0, 0, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 488, 489, 490, 0, 242,
	491, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 0, 258, 259, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 264, 265, 492,
	493, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 0, 217, 0, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 0, 293, 0,
	0, 0, 294, 295, 0, 296, 498, 0, 499, 297,
	0, 298, 299, 300, 301, 500, 501, 502, 354, 0,
	302, 303, 0, 304, 305, 307, 0, 0, 218, 306,
	308, 315, 0, 0, 309, 503, 311, 310, 312, 313,
	314, 504, 0, 505, 0, 316, 0, 506, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 507, 0, 330,
	331, 0, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 350, 0, 349, 0, 219,
	0, 352, 0, 508, 353, 509, 355, 356, 0, 357,
	358, 359, 0, 1022, 361, 362, 363, 0, 0, 364,
	365, 510, 0, 366, 0, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 512, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 0,
	429, 409, 410, 430, 431, 0, 432, 433, 516, 434,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 454, 0, 455, 518, 519,
	520, 521, 0, 462, 0, 456, 457, 522, 458, 523,
	0, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 0, 472, 0, 470, 473,
	474, 475, 524, 525, 526, 0, 477, 476, 527, 2429,
	0, 214, 0, 478, 479, 528, 480, 481, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 217, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 2428, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 218, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 350, 0,
	349, 0, 219, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 0, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 0, 477,
	476, 527, 1944, 0, 214, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 218, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 219, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 214, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 217, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 500, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 218, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 350, 0,
	349, 0, 219, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 1868, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 0, 477,
	476, 527, 1872, 0, 214, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 217,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 1871, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 218, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 219, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 0, 477, 476, 527, 1861, 0, 214, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 217, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 1863, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 218, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 219, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 0, 477, 476, 527, 1326, 0,
	214, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 1325, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	218, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 219, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 1323, 0, 214, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	1322, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 218, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 219, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	0, 477, 476, 527, 1320, 0, 214, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 0, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 217, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 0,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 1319, 501, 502, 354, 0, 302, 303,
	0, 304, 305, 307, 0, 0, 218, 306, 308, 315,
	0, 0, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 0, 506, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 0, 330, 331, 0,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 350, 0, 349, 0, 219, 0, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	0, 366, 0, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 0, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 0, 477, 476, 527, 1316, 0, 214,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 217, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 1315, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 218,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 0, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	219, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 0, 477, 476, 527,
	1199, 0, 214, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 488,
	489, 490, 0, 242, 491, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 0, 258, 259,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 0, 217, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 0, 294, 295, 0, 296,
	498, 0, 499, 297, 0, 298, 299, 300, 301, 1201,
	501, 502, 354, 0, 302, 303, 0, 304, 305, 307,
	0, 0, 218, 306, 308, 315, 0, 0, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	0, 506, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 507, 0, 330, 331, 0, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 350,
	0, 349, 0, 219, 0, 352, 0, 508, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 0, 366, 0, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 512, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 0, 429, 409, 410, 430, 431, 0,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 522, 458, 523, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 0,
	472, 0, 470, 473, 474, 475, 524, 525, 526, 214,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 217, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 500, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 218,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 0, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	219, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 214, 477, 476, 527,
	0, 0, 0, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 549,
	257, 0, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 0,
	294, 295, 550, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 500, 501, 502, 354, 0, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 0, 506, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 0, 330, 331, 0,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 350, 0, 349, 0, 0, 0, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	0, 366, 0, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 551, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 0, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 214, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	1975, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 217, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 218, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 219, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	214, 477, 476, 527, 0, 0, 0, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 1973, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 217, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	218, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 219, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 214, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 1971, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 217, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 500, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 218, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 219, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 0, 477, 476, 527, 700, 0,
	214, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 699, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 0, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	698, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 214, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 2494, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 500, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 0, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 3329, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 0, 477, 476, 527, 536, 0,
	214, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 535, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 0, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 534, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 214, 3338, 0, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 500, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 350, 0,
	349, 0, 0, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 0, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 0, 477,
	476, 527, 214, 2481, 0, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 488,
	489, 490, 0, 242, 491, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 0, 258, 259,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 0, 0, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 0, 294, 295, 0, 296,
	498, 0, 499, 297, 0, 298, 299, 300, 301, 500,
	501, 502, 354, 0, 302, 303, 0, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 0, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	0, 506, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 507, 0, 330, 331, 0, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 350,
	0, 349, 0, 0, 0, 352, 0, 508, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 0, 366, 0, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 512, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 0, 429, 409, 410, 430, 431, 0,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 522, 458, 523, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 0,
	472, 0, 470, 473, 474, 475, 524, 525, 526, 214,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 3120, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 0, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 500, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 0, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	0, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 214, 477, 476, 527,
	0, 0, 0, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 2266, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 0, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 0,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 500, 501, 502, 354, 0, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 0, 506, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 0, 330, 331, 0,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 350, 0, 349, 0, 0, 0, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	0, 366, 0, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 0, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 0, 477, 476, 527, 214, 2481, 0,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 500, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 0, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 2478, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 214, 477, 476, 527, 0, 0,
	0, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 220, 221, 222, 223, 224, 1952, 225, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 0,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 0, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 0, 477, 476, 527, 1942, 0, 214, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 500, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 0, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 0, 477, 476, 527, 577, 0,
	214, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 1059, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 1057,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 578, 0, 347, 348, 351, 350, 0, 349,
	0, 0, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 574, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 1060,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	573, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 1886, 0, 214, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 0, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	1885, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 0, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	0, 477, 476, 527, 577, 0, 214, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 567, 491, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 0, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 0,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 500, 501, 502, 354, 0, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 0, 506, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 0, 330, 331, 0,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 578, 0,
	347, 348, 351, 350, 0, 349, 0, 0, 0, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	0, 366, 0, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 574, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 1347, 428, 0, 429, 409,
	410, 430, 431, 0, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 573, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 0, 477, 476, 527, 1330, 0, 214,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 0, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 1329, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 0, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	0, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 0, 477, 476, 527,
	1277, 0, 214, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 488,
	489, 490, 0, 242, 491, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 0, 258, 259,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 0, 0, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 0, 294, 295, 0, 296,
	498, 0, 499, 297, 0, 298, 299, 300, 301, 1276,
	501, 502, 354, 0, 302, 303, 0, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 0, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	0, 506, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 507, 0, 330, 331, 0, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 350,
	0, 349, 0, 0, 0, 352, 0, 508, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 0, 366, 0, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 512, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 0, 429, 409, 410, 430, 431, 0,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 522, 458, 523, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 0,
	472, 0, 470, 473, 474, 475, 524, 525, 526, 0,
	477, 476, 527, 1258, 0, 214, 0, 478, 479, 528,
	480, 481, 482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 221, 222, 223, 224, 0, 225, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	0, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	0, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 0, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 500, 501, 502, 354, 0, 302, 303, 0,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	0, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 0, 506, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 0, 330, 331, 0, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 350, 0, 349, 0, 0, 0, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	0, 361, 362, 363, 0, 0, 364, 365, 510, 0,
	366, 0, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 515, 407, 0, 408, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 0, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 0, 477, 476, 527, 1193, 0, 214, 0,
	478, 479, 528, 480, 481, 482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 488, 489, 490, 0, 242,
	491, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 0, 258, 259, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 264, 265, 492,
	493, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 0, 293, 0,
	0, 0, 294, 295, 0, 296, 498, 0, 499, 297,
	0, 298, 299, 300, 301, 500, 501, 502, 354, 0,
	302, 303, 0, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 0, 309, 503, 311, 310, 312, 313,
	314, 504, 0, 505, 0, 316, 0, 506, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 507, 0, 330,
	331, 0, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 350, 0, 349, 0, 0,
	0, 352, 0, 508, 353, 509, 355, 356, 0, 357,
	358, 359, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 0, 366, 0, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 512, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 0,
	429, 409, 410, 430, 431, 0, 432, 433, 516, 434,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 454, 0, 455, 518, 519,
	520, 521, 0, 462, 0, 456, 457, 522, 458, 523,
	0, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 0, 472, 0, 470, 473,
	474, 475, 524, 525, 526, 0, 477, 476, 527, 577,
	0, 214, 0, 478, 479, 528, 480, 481, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 1059, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	1057, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 500, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 578, 0, 347, 348, 351, 350, 0,
	349, 0, 0, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 574, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	1060, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 0, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 573, 519, 520, 521, 0, 462, 0, 456, 1058,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 214, 477,
	476, 527, 0, 0, 0, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 220, 221, 222, 223, 224,
	1041, 225, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 488, 489, 490, 0, 242,
	491, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 0, 258, 259, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 264, 265, 492,
	493, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 0, 293, 0,
	0, 0, 294, 295, 0, 296, 498, 0, 499, 297,
	0, 298, 299, 300, 301, 500, 501, 502, 354, 0,
	302, 303, 0, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 0, 309, 503, 311, 310, 312, 313,
	314, 504, 0, 505, 0, 316, 0, 506, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 507, 0, 330,
	331, 0, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 350, 0, 349, 0, 0,
	0, 352, 0, 508, 353, 509, 355, 356, 0, 357,
	358, 359, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 0, 366, 0, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 512, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 0,
	429, 409, 410, 430, 431, 0, 432, 433, 516, 434,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 454, 0, 455, 518, 519,
	520, 521, 0, 462, 0, 456, 457, 522, 458, 523,
	0, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 0, 472, 0, 470, 473,
	474, 475, 524, 525, 526, 0, 477, 476, 527, 577,
	0, 214, 0, 478, 479, 528, 480, 481, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 567, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 565,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 500, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 566, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 578, 0, 347, 348, 351, 350, 0,
	349, 0, 0, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	568, 407, 0, 408, 412, 413, 574, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	569, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 0, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 573, 519, 520, 521, 0, 462, 0, 456, 571,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 0, 477,
	476, 527, 561, 0, 214, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 0,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 500, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 0, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 562, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 0, 477, 476, 527, 559, 0, 214, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 500, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 0, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 0, 477, 476, 527, 553, 0,
	214, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 0, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 531, 0, 214, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 0, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 0, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 387, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	214, 477, 476, 527, 0, 0, 0, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 297, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 0, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 370, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 384, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	407, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 214, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 0, 0, 0, 220, 221, 222, 223, 224, 0,
	225, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 226, 228, 227, 229, 230, 484, 485, 231, 486,
	234, 232, 233, 487, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 488, 489, 490, 0, 242, 491,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 257, 0, 258, 259, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 264, 265, 492, 493,
	0, 266, 0, 268, 267, 0, 269, 0, 0, 270,
	271, 272, 0, 273, 0, 274, 275, 0, 276, 494,
	277, 278, 280, 282, 279, 283, 284, 285, 286, 495,
	496, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	289, 497, 290, 291, 0, 292, 0, 293, 0, 0,
	0, 294, 295, 0, 296, 498, 0, 499, 297, 0,
	298, 299, 300, 301, 2798, 501, 502, 354, 0, 302,
	303, 0, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 503, 311, 310, 312, 313, 314,
	504, 0, 505, 0, 316, 0, 506, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	326, 0, 328, 327, 0, 329, 507, 0, 330, 331,
	0, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	337, 338, 340, 342, 339, 341, 343, 345, 346, 344,
	0, 347, 348, 351, 350, 0, 349, 0, 0, 0,
	352, 0, 508, 353, 509, 355, 356, 0, 357, 358,
	359, 0, 0, 361, 362, 363, 0, 0, 364, 365,
	510, 0, 366, 0, 511, 367, 360, 368, 369, 370,
	371, 372, 373, 374, 0, 375, 376, 512, 377, 513,
	378, 0, 379, 0, 380, 381, 382, 383, 384, 385,
	386, 514, 387, 388, 0, 389, 390, 391, 392, 393,
	0, 395, 396, 397, 394, 398, 399, 400, 401, 0,
	402, 0, 403, 404, 405, 406, 515, 407, 0, 408,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 428, 0, 429,
	409, 410, 430, 431, 0, 432, 433, 516, 434, 435,
	0, 436, 437, 438, 439, 411, 440, 444, 445, 441,
	442, 443, 517, 0, 447, 448, 446, 0, 449, 450,
	451, 452, 453, 281, 454, 0, 455, 518, 519, 520,
	521, 0, 462, 0, 456, 457, 522, 458, 523, 0,
	459, 460, 461, 0, 463, 464, 0, 0, 465, 466,
	467, 468, 469, 471, 0, 472, 0, 470, 473, 474,
	475, 524, 525, 526, 214, 477, 476, 527, 0, 0,
	0, 0, 478, 479, 528, 480, 481, 482, 0, 0,
	0, 220, 221, 222, 223, 224, 0, 225, 0, 0,
	0, 0, 0, 483, 0, 0, 0, 0, 226, 228,
	227, 229, 230, 484, 485, 231, 486, 234, 232, 233,
	487, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 488, 489, 490, 0, 242, 491, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 257, 0,
	258, 259, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 264, 265, 492, 493, 0, 266, 0,
	268, 267, 0, 269, 0, 0, 270, 271, 272, 0,
	273, 0, 274, 275, 0, 276, 494, 277, 278, 280,
	282, 279, 283, 284, 285, 286, 495, 496, 0, 0,
	0, 0, 0, 0, 0, 287, 288, 289, 497, 290,
	291, 0, 292, 0, 293, 0, 0, 0, 294, 295,
	0, 296, 498, 0, 499, 297, 0, 298, 299, 300,
	301, 2796, 501, 502, 354, 0, 302, 303, 0, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 503, 311, 310, 312, 313, 314, 504, 0, 505,
	0, 316, 0, 506, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 326, 0, 328,
	327, 0, 329, 507, 0, 330, 331, 0, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 337, 338, 340,
	342, 339, 341, 343, 345, 346, 344, 0, 347, 348,
	351, 350, 0, 349, 0, 0, 0, 352, 0, 508,
	353, 509, 355, 356, 0, 357, 358, 359, 0, 0,
	361, 362, 363, 0, 0, 364, 365, 510, 0, 366,
	0, 511, 367, 360, 368, 369, 370, 371, 372, 373,
	374, 0, 375, 376, 512, 377, 513, 378, 0, 379,
	0, 380, 381, 382, 383, 384, 385, 386, 514, 387,
	388, 0, 389, 390, 391, 392, 393, 0, 395, 396,
	397, 394, 398, 399, 400, 401, 0, 402, 0, 403,
	404, 405, 406, 515, 407, 0, 408, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 428, 0, 429, 409, 410, 430,
	431, 0, 432, 433, 516, 434, 435, 0, 436, 437,
	438, 439, 411, 440, 444, 445, 441, 442, 443, 517,
	0, 447, 448, 446, 0, 449, 450, 451, 452, 453,
	281, 454, 0, 455, 518, 519, 520, 521, 0, 462,
	0, 456, 457, 522, 458, 523, 0, 459, 460, 461,
	0, 463, 464, 0, 0, 465, 466, 467, 468, 469,
	471, 0, 472, 0, 470, 473, 474, 475, 524, 525,
	526, 214, 477, 476, 527, 0, 0, 0, 0, 478,
	479, 528, 480, 481, 482, 0, 0, 0, 220, 221,
	222, 223, 224, 0, 225, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 0, 226, 228, 227, 229, 230,
	484, 485, 231, 486, 234, 232, 233, 487, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 488, 489,
	490, 0, 242, 491, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 257, 0, 258, 259, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	264, 265, 492, 493, 0, 266, 0, 268, 267, 0,
	269, 0, 0, 270, 271, 272, 0, 273, 0, 274,
	275, 0, 276, 494, 277, 278, 280, 282, 279, 283,
	284, 285, 286, 495, 496, 0, 0, 0, 0, 0,
	0, 0, 287, 288, 289, 497, 290, 291, 0, 292,
	0, 293, 0, 0, 0, 294, 295, 0, 296, 498,
	0, 499, 297, 0, 298, 299, 300, 301, 2783, 501,
	502, 354, 0, 302, 303, 0, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 503, 311,
	310, 312, 313, 314, 504, 0, 505, 0, 316, 0,
	506, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 326, 0, 328, 327, 0, 329,
	507, 0, 330, 331, 0, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 337, 338, 340, 342, 339, 341,
	343, 345, 346, 344, 0, 347, 348, 351, 350, 0,
	349, 0, 0, 0, 352, 0, 508, 353, 509, 355,
	356, 0, 357, 358, 359, 0, 0, 361, 362, 363,
	0, 0, 364, 365, 510, 0, 366, 0, 511, 367,
	360, 368, 369, 370, 371, 372, 373, 374, 0, 375,
	376, 512, 377, 513, 378, 0, 379, 0, 380, 381,
	382, 383, 384, 385, 386, 514, 387, 388, 0, 389,
	390, 391, 392, 393, 0, 395, 396, 397, 394, 398,
	399, 400, 401, 0, 402, 0, 403, 404, 405, 406,
	515, 407, 0, 408, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 428, 0, 429, 409, 410, 430, 431, 0, 432,
	433, 516, 434, 435, 0, 436, 437, 438, 439, 411,
	440, 444, 445, 441, 442, 443, 517, 0, 447, 448,
	446, 0, 449, 450, 451, 452, 453, 281, 454, 0,
	455, 518, 519, 520, 521, 0, 462, 0, 456, 457,
	522, 458, 523, 0, 459, 460, 461, 0, 463, 464,
	0, 0, 465, 466, 467, 468, 469, 471, 0, 472,
	0, 470, 473, 474, 475, 524, 525, 526, 214, 477,
	476, 527, 0, 0, 0, 0, 478, 479, 528, 480,
	481, 482, 0, 0, 0, 220, 221, 222, 223, 224,
	0, 225, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 226, 228, 227, 229, 230, 484, 485, 231,
	486, 234, 232, 233, 487, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 488, 489, 490, 0, 242,
	491, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 257, 0, 258, 259, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 264, 265, 492,
	493, 0, 266, 0, 268, 267, 0, 269, 0, 0,
	270, 271, 272, 0, 273, 0, 274, 275, 0, 276,
	494, 277, 278, 280, 282, 279, 283, 284, 285, 286,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 287,
	288, 289, 497, 290, 291, 0, 292, 0, 293, 0,
	0, 0, 294, 295, 0, 296, 498, 0, 499, 297,
	0, 298, 299, 300, 301, 2441, 501, 502, 354, 0,
	302, 303, 0, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 0, 309, 503, 311, 310, 312, 313,
	314, 504, 0, 505, 0, 316, 0, 506, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 326, 0, 328, 327, 0, 329, 507, 0, 330,
	331, 0, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 337, 338, 340, 342, 339, 341, 343, 345, 346,
	344, 0, 347, 348, 351, 350, 0, 349, 0, 0,
	0, 352, 0, 508, 353, 509, 355, 356, 0, 357,
	358, 359, 0, 0, 361, 362, 363, 0, 0, 364,
	365, 510, 0, 366, 0, 511, 367, 360, 368, 369,
	370, 371, 372, 373, 374, 0, 375, 376, 512, 377,
	513, 378, 0, 379, 0, 380, 381, 382, 383, 384,
	385, 386, 514, 387, 388, 0, 389, 390, 391, 392,
	393, 0, 395, 396, 397, 394, 398, 399, 400, 401,
	0, 402, 0, 403, 404, 405, 406, 515, 407, 0,
	408, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 428, 0,
	429, 409, 410, 430, 431, 0, 432, 433, 516, 434,
	435, 0, 436, 437, 438, 439, 411, 440, 444, 445,
	441, 442, 443, 517, 0, 447, 448, 446, 0, 449,
	450, 451, 452, 453, 281, 454, 0, 455, 518, 519,
	520, 521, 0, 462, 0, 456, 457, 522, 458, 523,
	0, 459, 460, 461, 0, 463, 464, 0, 0, 465,
	466, 467, 468, 469, 471, 0, 472, 0, 470, 473,
	474, 475, 524, 525, 526, 214, 477, 476, 527, 0,
	0, 0, 0, 478, 479, 528, 480, 481, 482, 0,
	0, 0, 220, 221, 222, 223, 224, 0, 225, 0,
	0, 0, 0, 0, 483, 0, 0, 0, 0, 226,
	228, 227, 229, 230, 484, 485, 231, 486, 234, 232,
	233, 487, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 488, 489, 490, 0, 242, 491, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 257,
	0, 258, 259, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 264, 265, 492, 493, 0, 266,
	0, 268, 267, 0, 269, 0, 0, 270, 271, 272,
	0, 273, 0, 274, 275, 0, 276, 494, 277, 278,
	280, 282, 279, 283, 284, 285, 286, 495, 496, 0,
	0, 0, 0, 0, 0, 0, 287, 288, 289, 497,
	290, 291, 0, 292, 0, 293, 0, 0, 0, 294,
	295, 0, 296, 498, 0, 499, 297, 0, 298, 299,
	300, 301, 500, 501, 502, 354, 0, 302, 303, 0,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	0, 309, 503, 311, 310, 312, 313, 314, 504, 0,
	505, 0, 316, 0, 506, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 326, 0,
	328, 327, 0, 329, 507, 0, 330, 331, 0, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 337, 338,
	340, 342, 339, 341, 343, 345, 346, 344, 0, 347,
	348, 351, 350, 0, 349, 0, 0, 0, 352, 0,
	508, 353, 509, 355, 356, 0, 357, 358, 359, 0,
	0, 361, 362, 363, 0, 0, 364, 365, 510, 0,
	366, 0, 511, 367, 360, 368, 369, 370, 371, 372,
	373, 374, 0, 375, 376, 512, 377, 513, 378, 0,
	379, 0, 380, 381, 382, 383, 384, 385, 386, 514,
	387, 388, 0, 389, 390, 391, 392, 393, 0, 395,
	396, 397, 394, 398, 399, 400, 401, 0, 402, 0,
	403, 404, 405, 406, 515, 407, 0, 408, 562, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 428, 0, 429, 409, 410,
	430, 431, 0, 432, 433, 516, 434, 435, 0, 436,
	437, 438, 439, 411, 440, 444, 445, 441, 442, 443,
	517, 0, 447, 448, 446, 0, 449, 450, 451, 452,
	453, 281, 454, 0, 455, 518, 519, 520, 521, 0,
	462, 0, 456, 457, 522, 458, 523, 0, 459, 460,
	461, 0, 463, 464, 0, 0, 465, 466, 467, 468,
	469, 471, 0, 472, 0, 470, 473, 474, 475, 524,
	525, 526, 214, 477, 476, 527, 0, 0, 0, 0,
	478, 479, 528, 480, 481, 482, 0, 0, 0, 220,
	221, 222, 223, 224, 0, 225, 0, 0, 0, 0,
	0, 483, 0, 1899, 0, 0, 226, 228, 227, 229,
	230, 484, 485, 231, 486, 234, 232, 233, 487, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 488,
	489, 490, 0, 242, 491, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 257, 0, 258, 259,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 264, 265, 492, 493, 0, 266, 0, 268, 267,
	0, 269, 0, 0, 270, 271, 272, 0, 273, 0,
	274, 275, 0, 276, 494, 277, 278, 280, 282, 279,
	283, 284, 285, 286, 495, 496, 0, 0, 0, 0,
	0, 0, 0, 287, 288, 289, 497, 290, 291, 0,
	292, 0, 293, 0, 0, 0, 294, 295, 0, 296,
	498, 0, 499, 297, 0, 298, 299, 300, 301, 500,
	501, 502, 354, 0, 302, 303, 0, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 0, 309, 503,
	311, 310, 312, 313, 314, 504, 0, 505, 0, 316,
	0, 506, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 326, 0, 328, 327, 0,
	329, 507, 0, 330, 331, 0, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 337, 338, 340, 342, 339,
	341, 343, 345, 346, 344, 0, 347, 348, 351, 350,
	0, 349, 0, 0, 0, 352, 0, 508, 353, 509,
	355, 356, 0, 357, 358, 359, 0, 0, 361, 362,
	363, 0, 0, 364, 365, 510, 0, 366, 0, 511,
	367, 360, 368, 369, 370, 371, 372, 373, 374, 0,
	375, 376, 512, 377, 513, 378, 0, 379, 0, 380,
	381, 382, 383, 384, 385, 386, 514, 387, 388, 0,
	389, 390, 391, 392, 393, 0, 395, 396, 397, 394,
	398, 399, 400, 401, 0, 402, 0, 403, 404, 405,
	406, 515, 407, 0, 408, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 428, 0, 0, 409, 410, 430, 431, 0,
	432, 433, 516, 434, 435, 0, 436, 437, 438, 439,
	411, 440, 444, 445, 441, 442, 443, 517, 0, 447,
	448, 446, 0, 449, 450, 451, 452, 453, 281, 454,
	0, 455, 518, 519, 520, 521, 0, 462, 0, 456,
	457, 522, 458, 523, 0, 459, 460, 461, 0, 463,
	464, 0, 0, 465, 466, 467, 468, 469, 471, 0,
	472, 0, 470, 473, 474, 475, 524, 525, 526, 214,
	477, 476, 527, 0, 0, 0, 0, 478, 479, 528,
	480, 481, 482, 0, 0, 0, 220, 221, 222, 223,
	224, 0, 225, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 226, 228, 227, 229, 230, 484, 485,
	231, 486, 234, 232, 233, 487, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 488, 489, 490, 0,
	242, 491, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 257, 0, 258, 259, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 264, 265,
	492, 493, 0, 266, 0, 268, 267, 0, 269, 0,
	0, 270, 271, 272, 0, 273, 0, 274, 275, 0,
	276, 494, 277, 278, 280, 282, 279, 283, 284, 285,
	286, 495, 496, 0, 0, 0, 0, 0, 0, 0,
	287, 288, 289, 497, 290, 291, 0, 292, 0, 293,
	0, 0, 0, 294, 295, 0, 296, 498, 0, 499,
	297, 0, 298, 299, 300, 301, 1299, 501, 502, 354,
	0, 302, 303, 0, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 503, 311, 310, 312,
	313, 314, 504, 0, 505, 0, 316, 0, 506, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 326, 0, 328, 327, 0, 329, 507, 0,
	330, 331, 0, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 337, 338, 340, 342, 339, 341, 343, 345,
	346, 344, 0, 347, 348, 351, 350, 0, 349, 0,
	0, 0, 352, 0, 508, 353, 509, 355, 356, 0,
	357, 358, 359, 0, 0, 361, 362, 363, 0, 0,
	364, 365, 510, 0, 366, 0, 511, 367, 360, 368,
	369, 370, 371, 372, 373, 374, 0, 375, 376, 512,
	377, 513, 378, 0, 379, 0, 380, 381, 382, 383,
	384, 385, 386, 514, 387, 388, 0, 389, 390, 391,
	392, 393, 0, 395, 396, 397, 394, 398, 399, 400,
	401, 0, 402, 0, 403, 404, 405, 406, 515, 407,
	0, 408, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 428,
	0, 429, 409, 410, 430, 431, 0, 432, 433, 516,
	434, 435, 0, 436, 437, 438, 439, 411, 440, 444,
	445, 441, 442, 443, 517, 0, 447, 448, 446, 0,
	449, 450, 451, 452, 453, 281, 454, 0, 455, 518,
	519, 520, 521, 0, 462, 0, 456, 457, 522, 458,
	523, 0, 459, 460, 461, 0, 463, 464, 0, 0,
	465, 466, 467, 468, 469, 471, 0, 472, 0, 470,
	473, 474, 475, 524, 525, 526, 214, 477, 476, 527,
	0, 0, 0, 0, 478, 479, 528, 480, 481, 482,
	0, 0, 0, 220, 221, 222, 223, 224, 0, 225,
	0, 0, 0, 0, 0, 483, 0, 0, 0, 0,
	226, 228, 227, 229, 230, 484, 485, 231, 486, 234,
	232, 233, 487, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 488, 489, 490, 0, 242, 491, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	257, 0, 258, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 264, 265, 492, 493, 0,
	266, 0, 268, 267, 0, 269, 0, 0, 270, 271,
	272, 0, 273, 0, 274, 275, 0, 276, 494, 277,
	278, 280, 282, 279, 283, 284, 285, 286, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 287, 288, 289,
	497, 290, 291, 0, 292, 0, 293, 0, 0, 0,
	294, 295, 0, 296, 498, 0, 499, 297, 0, 298,
	299, 300, 301, 1239, 501, 502, 354, 0, 302, 303,
	0, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 503, 311, 310, 312, 313, 314, 504,
	0, 505, 0, 316, 0, 506, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 326,
	0, 328, 327, 0, 329, 507, 0, 330, 331, 0,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 337,
	338, 340, 342, 339, 341, 343, 345, 346, 344, 0,
	347, 348, 351, 350, 0, 349, 0, 0, 0, 352,
	0, 508, 353, 509, 355, 356, 0, 357, 358, 359,
	0, 0, 361, 362, 363, 0, 0, 364, 365, 510,
	0, 366, 0, 511, 367, 360, 368, 369, 370, 371,
	372, 373, 374, 0, 375, 376, 512, 377, 513, 378,
	0, 379, 0, 380, 381, 382, 383, 384, 385, 386,
	514, 387, 388, 0, 389, 390, 391, 392, 393, 0,
	395, 396, 397, 394, 398, 399, 400, 401, 0, 402,
	0, 403, 404, 405, 406, 515, 407, 0, 408, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 428, 0, 429, 409,
	410, 430, 431, 0, 432, 433, 516, 434, 435, 0,
	436, 437, 438, 439, 411, 440, 444, 445, 441, 442,
	443, 517, 0, 447, 448, 446, 0, 449, 450, 451,
	452, 453, 281, 454, 0, 455, 518, 519, 520, 521,
	0, 462, 0, 456, 457, 522, 458, 523, 0, 459,
	460, 461, 0, 463, 464, 0, 0, 465, 466, 467,
	468, 469, 471, 0, 472, 0, 470, 473, 474, 475,
	524, 525, 526, 214, 477, 476, 527, 0, 0, 0,
	0, 478, 479, 528, 480, 481, 482, 0, 0, 0,
	220, 221, 222, 223, 224, 0, 225, 0, 0, 0,
	0, 0, 483, 0, 0, 0, 0, 226, 228, 227,
	229, 230, 484, 485, 231, 486, 234, 232, 233, 487,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	488, 489, 490, 0, 242, 491, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 257, 0, 258,
	259, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 264, 265, 492, 493, 0, 266, 0, 268,
	267, 0, 269, 0, 0, 270, 271, 272, 0, 273,
	0, 274, 275, 0, 276, 494, 277, 278, 280, 282,
	279, 283, 284, 285, 286, 495, 496, 0, 0, 0,
	0, 0, 0, 0, 287, 288, 289, 497, 290, 291,
	0, 292, 0, 293, 0, 0, 0, 294, 295, 0,
	296, 498, 0, 499, 297, 0, 298, 299, 300, 301,
	500, 501, 502, 354, 0, 302, 303, 0, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 0, 309,
	503, 311, 310, 312, 313, 314, 504, 0, 505, 0,
	316, 0, 506, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 326, 0, 328, 327,
	0, 329, 507, 0, 330, 331, 0, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 337, 338, 340, 342,
	339, 341, 343, 345, 346, 344, 0, 347, 348, 351,
	350, 0, 349, 0, 0, 0, 352, 0, 508, 353,
	509, 355, 356, 0, 357, 358, 359, 0, 0, 361,
	362, 363, 0, 0, 364, 365, 510, 0, 366, 0,
	511, 367, 360, 368, 369, 370, 371, 372, 373, 374,
	0, 375, 376, 512, 377, 513, 378, 0, 379, 0,
	380, 381, 382, 383, 384, 385, 386, 514, 995, 388,
	0, 389, 390, 391, 392, 393, 0, 395, 396, 397,
	394, 398, 399, 400, 401, 0, 402, 0, 403, 404,
	405, 406, 515, 407, 0, 408, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 428, 0, 429, 409, 410, 430, 431,
	0, 432, 433, 516, 434, 435, 0, 436, 437, 438,
	439, 411, 440, 444, 445, 441, 442, 443, 517, 0,
	447, 448, 446, 0, 449, 450, 451, 452, 453, 281,
	454, 0, 455, 518, 519, 520, 521, 0, 462, 0,
	456, 457, 522, 458, 523, 0, 459, 460, 461, 0,
	463, 464, 0, 0, 465, 466, 467, 468, 469, 471,
	0, 472, 0, 470, 473, 474, 475, 524, 525, 526,
	214, 477, 476, 527, 0, 0, 0, 0, 478, 479,
	528, 480, 481, 482, 0, 0, 0, 220, 221, 222,
	223, 224, 0, 225, 0, 0, 0, 0, 0, 483,
	0, 0, 0, 0, 226, 228, 227, 229, 230, 484,
	485, 231, 486, 234, 232, 233, 487, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 488, 489, 490,
	0, 242, 491, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 257, 0, 258, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 264,
	265, 492, 493, 0, 266, 0, 268, 267, 0, 269,
	0, 0, 270, 271, 272, 0, 273, 0, 274, 275,
	0, 276, 494, 277, 278, 280, 282, 279, 283, 284,
	285, 286, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 287, 288, 289, 497, 290, 291, 0, 292, 0,
	293, 0, 0, 0, 294, 295, 0, 296, 498, 0,
	499, 0, 0, 298, 299, 300, 301, 500, 501, 502,
	354, 0, 302, 303, 0, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 503, 311, 310,
	312, 313, 314, 504, 0, 505, 0, 316, 0, 506,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 326, 0, 328, 327, 0, 329, 507,
	0, 330, 331, 0, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 337, 338, 340, 342, 339, 341, 343,
	345, 346, 344, 0, 347, 348, 351, 350, 0, 349,
	0, 0, 0, 352, 0, 508, 353, 509, 355, 356,
	0, 357, 358, 359, 0, 0, 361, 362, 363, 0,
	0, 364, 365, 510, 0, 366, 0, 511, 367, 360,
	368, 369, 0, 371, 372, 373, 374, 0, 375, 376,
	512, 377, 513, 378, 0, 379, 0, 380, 381, 382,
	383, 0, 385, 386, 514, 387, 388, 0, 389, 390,
	391, 392, 393, 0, 395, 396, 397, 394, 398, 399,
	400, 401, 0, 402, 0, 403, 404, 405, 406, 515,
	0, 0, 408, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	428, 0, 429, 409, 410, 430, 431, 0, 432, 433,
	516, 434, 435, 0, 436, 437, 438, 439, 411, 440,
	444, 445, 441, 442, 443, 517, 0, 447, 448, 446,
	0, 449, 450, 451, 452, 453, 281, 454, 0, 455,
	518, 519, 520, 521, 0, 462, 0, 456, 457, 522,
	458, 523, 0, 459, 460, 461, 0, 463, 464, 0,
	0, 465, 466, 467, 468, 469, 471, 0, 472, 0,
	470, 473, 474, 475, 524, 525, 526, 0, 477, 476,
	527, 0, 0, 0, 0, 478, 479, 528, 480, 481,
	482, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 1507, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 1477, 0, 1509, 1510, 1511,
	1519, 1520, 1521, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 1512, 1507, 0, 1498, 0, 0, 0,
	0, 1479, 0, 1495, 0, 0, 1525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 1498,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 0, 1526, 0,
	0, 0, 1506, 1508, 1501, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 1523, 0, 0, 0, 0, 0,
	0, 1493, 1494, 0, 0, 0, 0, 0, 1516, 0,
	0, 1526, 0, 0, 0, 1506, 1508, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 1522, 0, 1523, 0, 0,
	0, 0, 0, 0, 1493, 1494, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 1513, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 1477, 0, 1509, 1510,
	1511, 1519, 1520, 1521, 0, 0, 0, 0, 0, 0,
	1505, 1517, 0, 0, 1512, 1507, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 1525, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 1517, 0, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 1490, 1491,
	1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 2649, 0, 0, 1501, 1502, 1503, 1504, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 1515, 0,
	0, 1490, 1491, 1497, 1518, 1496, 1492, 0, 1489, 1487,
	1488, 1480, 1481, 1482, 1483, 1485, 1486, 0, 0, 1516,
	0, 0, 1526, 0, 0, 2646, 1506, 1508, 0, 744,
	0, 779, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1522, 0, 1523, 0,
	0, 0, 0, 751, 0, 1493, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 749, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 0, 753, 0, 0,
	1524, 785, 0, 0, 0, 0, 0, 0, 760, 761,
	0, 0, 0, 0, 772, 0, 0, 1513, 0, 1476,
	1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 780, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 1507,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 1525, 0, 0, 0, 0, 778, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 1500,
	0, 0, 0, 0, 1498, 0, 0, 0, 756, 0,
	0, 1495, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 765, 764, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 1503, 1504, 0, 0, 0, 0, 784, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 781, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 0, 1526, 0, 0, 1515,
	1506, 1508, 1490, 1491, 1497, 1518, 1496, 1492, 0, 1489,
	1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486, 0, 0,
	1522, 0, 1523, 0, 754, 0, 2645, 0, 0, 1493,
	1494, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 776, 777, 0, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 0, 0, 0, 1524, 0, 0, 768, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 0, 0, 0,
	746, 1513, 782, 1476, 1477, 0, 1509, 1510, 1511, 1519,
	1520, 1521, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 1512, 1507, 0, 0, 0, 0, 770, 0,
	1479, 0, 767, 0, 0, 1525, 0, 0, 0, 0,
	0, 783, 0, 0, 0, 1505, 0, 0, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 1500, 0, 0, 0, 0, 1498, 773,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	0, 775, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 0,
	1526, 0, 0, 1515, 1506, 1508, 1490, 1491, 1497, 1518,
	1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 0, 0, 1522, 0, 1523, 0, 0, 0,
	2644, 0, 0, 1493, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 1476, 1477, 0,
	1509, 1510, 1511, 1519, 1520, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 1507, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 1525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 1500, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 1526, 0, 0, 1515, 1506, 1508,
	1490, 1491, 1497, 1518, 1496, 1492, 0, 1489, 1487, 1488,
	1480, 1481, 1482, 1483, 1485, 1486, 0, 0, 1522, 0,
	1523, 0, 0, 0, 2130, 0, 0, 1493, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 1477, 0, 1509,
	1510, 1511, 1519, 1520, 1521, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1512, 1507, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 1525, 0,
	0, 1500, 0, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 1517, 1512, 1507,
	0, 1498, 0, 0, 0, 0, 1479, 0, 1495, 0,
	0, 1525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 1502, 1503, 1504,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 1515, 0, 0, 1490, 1491, 1497, 1518, 1496, 1492,
	0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486,
	1516, 0, 0, 1526, 3595, 0, 0, 1506, 1508, 1501,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 1522, 0, 1523,
	0, 0, 0, 0, 0, 0, 1493, 1494, 0, 0,
	0, 0, 0, 1516, 0, 0, 1526, 0, 0, 0,
	1506, 1508, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 1523, 0, 0, 0, 0, 0, 0, 1493,
	1494, 1524, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 1513, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 1476, 1477,
	0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 1517, 1512, 1507, 0,
	0, 0, 0, 0, 0, 1479, 0, 0, 0, 0,
	1525, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 1517,
	0, 0, 0, 1498, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 1490, 1491, 1497, 1518, 1496, 1492, 0,
	1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486, 0,
	0, 0, 0, 3591, 0, 0, 0, 0, 1501, 1502,
	1503, 1504, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518,
	1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 1516, 0, 0, 1526, 3512, 0, 0, 1506,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 1523, 0, 0, 0, 0, 0, 0, 1493, 1494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1524, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 1477, 0,
	1509, 1510, 1511, 1519, 1520, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1512, 1507, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 1525,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 1517, 1512,
	1507, 0, 1498, 0, 0, 0, 0, 1479, 0, 1495,
	0, 0, 1525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 1498, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518, 1496,
	1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485,
	1486, 1516, 0, 0, 1526, 3511, 0, 0, 1506, 1508,
	1501, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	1523, 0, 0, 0, 0, 0, 0, 1493, 1494, 0,
	0, 0, 0, 0, 1516, 0, 0, 1526, 0, 0,
	0, 1506, 1508, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 1522, 0, 1523, 0, 0, 0, 0, 0, 0,
	1493, 1494, 1524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 0, 0, 1513,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 0, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 1517, 1512, 1507,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 1525, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	1517, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 1490, 1491, 1497, 1518, 1496, 1492,
	0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486,
	0, 0, 0, 0, 3396, 0, 0, 0, 0, 1501,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 1515, 0, 0, 1490, 1491, 1497,
	1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482,
	1483, 1485, 1486, 1516, 0, 0, 1526, 3292, 0, 0,
	1506, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 1523, 0, 0, 0, 0, 0, 0, 1493,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1476, 1477,
	0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 1512, 1507, 0,
	0, 0, 0, 0, 0, 1479, 0, 0, 0, 0,
	1525, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 1517,
	1512, 1507, 0, 1498, 0, 0, 0, 0, 1479, 0,
	1495, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 1502,
	1503, 1504, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518,
	1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 1516, 0, 0, 1526, 3245, 0, 0, 1506,
	1508, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 1523, 0, 0, 0, 0, 0, 0, 1493, 1494,
	0, 0, 0, 0, 0, 1516, 0, 0, 1526, 0,
	0, 0, 1506, 1508, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 1523, 0, 0, 0, 0, 0,
	0, 1493, 1494, 1524, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	1513, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 1517, 1512,
	1507, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 1525, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 1517, 0, 0, 0, 1498, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518, 1496,
	1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485,
	1486, 0, 0, 0, 0, 3244, 0, 0, 0, 0,
	1501, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 1515, 0, 0, 1490, 1491,
	1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 1516, 0, 0, 1526, 3243, 0,
	0, 1506, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1522, 0, 1523, 0, 0, 0, 0, 0, 0,
	1493, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 1512, 1507,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 1525, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520,
	1521, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	1517, 1512, 1507, 0, 1498, 0, 0, 0, 0, 1479,
	0, 1495, 0, 0, 1525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 1515, 0, 0, 1490, 1491, 1497,
	1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482,
	1483, 1485, 1486, 1516, 0, 0, 1526, 3002, 0, 0,
	1506, 1508, 1501, 1502, 1503, 1504, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 1523, 0, 0, 0, 0, 0, 0, 1493,
	1494, 0, 0, 0, 0, 0, 1516, 0, 0, 1526,
	0, 0, 0, 1506, 1508, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 0, 1523, 0, 0, 0, 0,
	0, 0, 1493, 1494, 1524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 1513, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1524, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 1517,
	1512, 1507, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 1525, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 1517, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518,
	1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 0, 0, 0, 0, 2642, 0, 0, 0,
	0, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1515, 0, 0, 1490,
	1491, 1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480,
	1481, 1482, 1483, 1485, 1486, 1516, 0, 0, 1526, 2641,
	0, 0, 1506, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 1523, 0, 0, 0, 0, 0,
	0, 1493, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 1512,
	1507, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 1525, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 1509, 1510, 1511, 1519,
	1520, 1521, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 1517, 1512, 1507, 0, 1498, 0, 0, 0, 0,
	1479, 0, 1495, 0, 0, 1525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1502, 1503, 1504, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 1515, 0, 0, 1490, 1491,
	1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 1516, 0, 0, 1526, 2640, 0,
	0, 1506, 1508, 1501, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 1522, 0, 1523, 0, 0, 0, 0, 0, 0,
	1493, 1494, 0, 0, 0, 0, 0, 1516, 0, 0,
	1526, 0, 0, 0, 1506, 1508, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 0, 1523, 0, 0, 0,
	0, 0, 0, 1493, 1494, 1524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 1513, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520,
	1521, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	1517, 1512, 1507, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 1525, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 1517, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 1490, 1491, 1497,
	1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482,
	1483, 1485, 1486, 0, 0, 0, 0, 2639, 0, 0,
	0, 0, 1501, 1502, 1503, 1504, 0, 0, 0, 0,
	0, 0, 1484, 3699, 0, 0, 0, 1515, 0, 0,
	1490, 1491, 1497, 1518, 1496, 1492, 0, 1489, 1487, 1488,
	1480, 1481, 1482, 1483, 1485, 1486, 1516, 0, 2597, 1526,
	0, 0, 0, 1506, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 0, 1523, 0, 0, 0, 0,
	0, 0, 1493, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1524, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3698, 0, 0, 0,
	0, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	1512, 1507, 0, 0, 0, 0, 2568, 0, 1479, 0,
	0, 0, 0, 1525, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1476, 1477, 0, 1509, 1510, 1511,
	1519, 1520, 1521, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 1517, 1512, 1507, 0, 1498, 0, 0, 0,
	0, 1479, 0, 1495, 0, 0, 1525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 2569, 0, 0, 0, 0, 0, 0, 1498,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1515, 0, 0, 1490,
	1491, 1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480,
	1481, 1482, 1483, 1485, 1486, 1516, 0, 0, 1526, 0,
	0, 0, 1506, 1508, 1501, 1502, 1503, 1504, 0, 0,
	0, 0, 0, 0, 1484, 0, 2689, 0, 0, 2688,
	0, 0, 1522, 0, 1523, 0, 0, 0, 0, 0,
	0, 1493, 1494, 0, 0, 0, 0, 0, 1516, 0,
	0, 1526, 0, 0, 0, 1506, 1508, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 1522, 0, 1523, 0, 0,
	0, 0, 0, 0, 1493, 1494, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 1513, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 2240, 0, 0, 0,
	0, 0, 0, 1476, 1477, 0, 1509, 1510, 1511, 1519,
	1520, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 1517, 1512, 1507, 0, 0, 0, 2239, 0, 0,
	1479, 0, 0, 0, 0, 1525, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 1517, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 1490, 1491,
	1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 1515, 0,
	0, 1490, 1491, 1497, 1518, 1496, 1492, 0, 1489, 1487,
	1488, 1480, 1481, 1482, 1483, 1485, 1486, 1516, 0, 0,
	1526, 0, 0, 0, 1506, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 0, 1523, 0, 0, 0,
	0, 0, 0, 1493, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 1476, 1477, 0,
	1509, 1510, 1511, 1519, 1520, 1521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 1507, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 1525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 1500, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 1526, 0, 0, 1515, 1506, 1508,
	1490, 1491, 1497, 1518, 1496, 1492, 0, 1489, 1487, 1488,
	1480, 1481, 1482, 1483, 1485, 1486, 0, 0, 1522, 0,
	1523, 0, 0, 0, 0, 0, 0, 1493, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	836, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 1507, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 1500, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 0, 1526, 0,
	0, 1515, 1506, 1508, 1490, 1491, 1497, 1518, 1496, 1492,
	0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486,
	0, 0, 1522, 0, 1523, 0, 0, 0, 0, 0,
	0, 1493, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 1476, 1477, 0, 1509, 1510,
	1511, 1519, 1520, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1507, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 1525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 1500, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2981, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 1502, 1503, 1504, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	2695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1516,
	0, 0, 1526, 0, 0, 1515, 1506, 1508, 1490, 1491,
	1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 0, 0, 1522, 0, 1523, 0,
	0, 0, 0, 0, 0, 1493, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1476,
	1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 1507,
	0, 0, 0, 2690, 0, 0, 1479, 0, 0, 0,
	0, 1525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 1500,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 0, 1526, 0, 0, 1515,
	1506, 1508, 1490, 1491, 1497, 1518, 1496, 1492, 0, 1489,
	1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486, 0, 0,
	1522, 0, 1523, 0, 0, 0, 0, 0, 0, 1493,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 1476, 1477, 0, 1509, 1510, 1511, 1519,
	1520, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 1507, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 1525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 1500, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 1502, 1503, 1504, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 0,
	1526, 0, 0, 1515, 1506, 1508, 1490, 1491, 1497, 1518,
	1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 0, 0, 1522, 0, 1523, 0, 0, 0,
	0, 0, 0, 1493, 1494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 1476, 1477, 0,
	1509, 1510, 1511, 1519, 1520, 1521, 0, 0, 0, 0,
	0, 0, 0, 2657, 0, 0, 1512, 1507, 0, 0,
	0, 2643, 0, 0, 1479, 0, 0, 0, 0, 1525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 1500, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1502, 1503,
	1504, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 1526, 0, 0, 1515, 1506, 1508,
	1490, 1491, 1497, 1518, 1496, 1492, 0, 1489, 1487, 1488,
	1480, 1481, 1482, 1483, 1485, 1486, 0, 0, 1522, 0,
	1523, 0, 0, 0, 0, 0, 0, 1493, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 1507, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 1500, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 0, 1526, 0,
	0, 1515, 1506, 1508, 1490, 1491, 1497, 1518, 1496, 1492,
	0, 1489, 1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486,
	0, 0, 1522, 0, 1523, 0, 0, 0, 0, 0,
	0, 1493, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 1476, 1477, 0, 1509, 1510,
	1511, 1519, 1520, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1507, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 1525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 1500, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 1502, 1503, 1504, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1516,
	0, 0, 1526, 0, 0, 1515, 1506, 1508, 1490, 1491,
	1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 0, 0, 1522, 0, 1523, 0,
	0, 0, 0, 0, 0, 1493, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	1477, 0, 1509, 1510, 1511, 1519, 1520, 1521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 1525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 1500,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 1503, 1504, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 0, 1526, 0, 0, 1515,
	1506, 1508, 1490, 1491, 1497, 1518, 1496, 1492, 0, 1489,
	1487, 1488, 1480, 1481, 1482, 1483, 1485, 1486, 0, 0,
	1522, 0, 1523, 0, 0, 0, 0, 0, 0, 1493,
	1494, 1476, 1477, 0, 1509, 1510, 1511, 1519, 1520, 1521,
	0, 0, 0, 0, 0, 1514, 0, 0, 0, 0,
	0, 1507, 0, 0, 1499, 0, 0, 0, 1479, 0,
	0, 0, 0, 1525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 1501, 1502, 1503, 1504, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 1517,
	0, 0, 0, 0, 1695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 0, 1526, 0,
	0, 0, 1506, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1712, 1689, 1696, 0, 1679, 1722,
	1721, 1493, 1494, 1681, 1680, 0, 0, 0, 0, 0,
	0, 1732, 1733, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 1490, 1491, 1497, 1518,
	1496, 1492, 0, 1489, 1487, 1488, 1480, 1481, 1482, 1483,
	1485, 1486, 0, 1723, 0, 1719, 1718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1717, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1716, 1714,
	1715, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 1691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1705, 1694, 1707, 1709, 1710, 1711, 1706, 0, 1699,
	0, 1517, 0, 0, 0, 0, 0, 0, 0, 1728,
	1729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1720, 0, 0, 0, 1692, 0, 1693, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 1490, 1491,
	1497, 1518, 1496, 1492, 0, 1489, 1487, 1488, 1480, 1481,
	1482, 1483, 1485, 1486, 0, 0, 0, 0, 1713, 0,
	0, 0, 1702, 1700, 1701, 1704, 1703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1684, 1685, 1687,
	1688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1708, 1686, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1682, 0, 0, 1724, 1725, 1726, 1727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1690, 0, 0, 0, 0, 1697,
	1730,
}
var sqlPact = [...]int{

	5985, -1000, -1000, -1000, -1000, -1000, -1000, 242, 241, 240,
	239, 236, 235, 226, 222, -1000, -1000, -1000, 221, -1000,
	-1000, 211, -1000, 210, 209, 208, 207, -1000, 206, 194,
	185, -1000, -1000, -1000, -1000, 184, 183, 181, 59695, 1714,
	71759, 62696, 1861, 54090, 71326, 53657, 70893, 70460, 176, -1000,
	70027, 175, 173, 171, -1000, -1000, 166, -1000, 2565, 44081,
	161, 159, 158, 1902, 155, 152, -1000, 150, -1000, 6504,
	1314, -1000, 149, 146, -1000, 5193, 4651, 61836, 2263, 142,
	139, 43647, 2250, 2297, -1000, -1000, 1642, -1000, -1000, 134,
	133, 128, 126, 114, 112, 108, 107, 101, -1000, 98,
	90, 89, 87, 84, 83, 82, -1000, 80, 79, 75,
	74, 73, 72, 69, 66, 63, 61, 56, -1000, 77407,
	1559, 1452, 1448, 1446, 1433, 1424, 912, 55, 53, 50,
	49, 45, 34, 30, -1000, -1000, 27, 26, 24, 18,
	-1000, 15, 14, 157, 13, 12, 11, 10, 9, 3569,
	-1000, 1322, 905, 20732, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 76029, 72186, 8,
	-54, 7, -1000, 2590, 898, 36274, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 471, -1000, -1000, -1000,
	316, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1654,
	709, -1000, -1000, -1000, 69594, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1711, 19, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 705, -1000, 1702, 145, 1624, -1000, -1000, -1000,
	-1000, -1000, 72186, -1000, -1000, 2940, 2939, 1663, 703, 69167,
	-1000, 1278, -1000, 837, 23480, -1000, 1066, -1000, 23480, 313,
	-1000, -1000, -1000, -1000, -1000, 53224, 15204, 52791, 52358, 48481,
	68734, 14761, 59268, 48038, -1000, -1000, 38890, 1136, -1000, -1000,
	-1000, -1000, -1000, -14, 49349, 72186, -1000, 306, -1000, -1000,
	-1000, -1000, -1000, -1000, 29996, 435, 29528, 727, 29060, 279,
	-1000, -1000, -1000, -1000, 2935, 2931, 1019, 2929, 2534, 75602,
	1492, 2928, 1408, 1102, 938, 2925, 2924, 2922, 2916, 2913,
	2902, 2901, 1215, 68301, 2334, 1397, 47595, 47152, 59695, 59695,
	2107, 67868, 1200, 1192, -1000, -1000, -1000, -1000, 2416, 2288,
	2275, 41059, -1000, -1000, 2900, 2898, 2897, 2894, 2893, 75175,
	1489, 2886, 1988, 2885, 2884, 2883, 2881, 2879, 2878, 2877,
	2874, 2869, -1000, 58835, 58402, 57969, 57536, 67435, 46709, 46266,
	-1000, -1000, -1000, 38002, 7797, 6214, 67002, 39331, 59695, 59695,
	-1000, -1000, 30452, 102, -1000, -1000, -1000, 38890, 2277, -1000,
	30452, 102, -1000, 72186, -1000, 2333, 1589, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1913, 1393, 2760, 45823,
	1628, 1227, 2597, 2409, 2408, 1305, 1931, 2407, 2403, 2402,
	2395, 2372, 1363, 2039, 237, 20264, 1310, 1302, 2365, 2350,
	2769, 1800, 51925, 2867, 2866, 2568, 2324, 2321, 2274, -1000,
	-1000, -1000, -1000, 1254, -1000, -1000, 54944, -1000, -1000, 1033,
	-1000, -1000, 1033, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1135, 74321, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1322, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1841, -1000, 1636,
	-1000, -1000, 1981, 2562, 2562, 2562, 2623, 460, 459, -1000,
	157, -1000, -1000, 83590, -1000, -1000, 30452, 30452, 30452, 30452,
	30452, 1562, -1000, 700, -1000, -1000, 728, -1000, 699, 598,
	-1000, -1000, -1000, -1000, -1000, -1000, 697, 2774, -1000, -1000,
	-1000, -1000, -1000, 2731, -1000, 17468, -1000, -1000, -1000, 436,
	696, 30452, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 801, -1000, 299, 870,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 641, 1483, 639, 639, 639, -1000,
	-1000, 926, -1000, -1000, -1000, 305, 633, 286, 632, -1000,
	-1000, -1000, -1000, 2332, 695, 694, -1000, 693, 692, 687,
	685, 684, -1000, -1000, -1000, 682, 681, 680, 678, 677,
	676, 675, 673, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 925, -1000, 672, 671, 669, 668, 667, 666, 662,
	661, 659, -1000, -1000, -15, 72186, -1000, 471, -15, -1000,
	-1000, 655, -1000, 23936, 23936, 23936, -1000, -1000, 1700, 30452,
	-1000, 1969, -1000, -6, -6, 805, 37136, -1000, 35408, 805,
	399, 732, 40626, -1000, 2268, -1000, -1000, 654, 296, -1000,
	-1000, 2265, 72186, 15645, 72186, 59695, 59695, 59695, 2482, 30452,
	-1000, -1000, 45380, 72186, 60122, 2687, 84480, 45380, 72186, 2320,
	-1000, -1000, -1000, 72186, -1000, 30452, -1000, 2681, 1263, 49780,
	2647, -30, -1000, -1000, -1000, -1000, -1000, -1000, 1971, 1980,
	1024, 1783, 1402, -1000, 23480, 2526, -1000, -1000, -1000, 294,
	15645, -1000, 2143, 2457, 1105, -1000, 1780, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1430, 2453, -1000, 2652, 2452,
	1420, -1000, -1000, 892, 2448, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1670, -1000, -1000, 2563, -1000, -1000,
	1406, 2447, -5, -1000, -1000, 1246, -1000, 788, -1000, 48922,
	38890, 49349, -17, -1000, -1000, -38, -1000, 14318, 83590, -1000,
	-1000, -1000, 83590, 811, -1000, -1000, 2444, -1000, 83590, 808,
	-1000, -1000, 2440, -1000, -1000, -1000, 2865, -1000, 2863, 1921,
	2862, 2860, 2858, -1000, 1395, 1476, 2855, -1000, 2853, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57103, 1697, -1000, -1000,
	56237, 56670, 937, -1000, 892, 1914, -1000, 1243, 1911, -1000,
	869, -1000, 2851, 66569, 2119, 892, 1899, -1000, -1000, -1000,
	-1000, -1000, 41921, -1000, 41921, -1000, 41921, -1000, 1293, -1000,
	74748, -6, -6, 2731, -1000, -1000, -1000, -1000, -1000, 2435,
	2848, 2847, 2846, -1000, 72186, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 188, 2434, -1000, -1000, 188, 2431,
	-1000, 188, 2428, -1000, 187, 2427, -1000, -1000, 1712, 2426,
	-1000, -47, 2422, -1000, -1000, -47, 2421, -1000, -37, -1000,
	-1000, -1000, 898, -1000, 37569, -1000, 37569, 66136, 48922, 872,
	701, 43214, 83590, -1000, -48, -1000, 38890, 83590, -1000, 48922,
	56237, -1000, 65703, 55810, -1000, -1000, 1211, 2029, -1000, -1000,
	-1000, 872, 48922, 48922, 48922, -1000, 65270, -1000, -1000, 1657,
	1358, 2569, 1649, 59695, -1000, 1507, -1000, -1000, -1000, 2572,
	2319, -1000, 44949, 61403, -1000, 60976, -1000, 60549, -1000, 59695,
	-1000, 59695, -1000, 2844, 2842, 2840, -1000, 2839, 2575, 83590,
	2573, -1000, 2436, 1467, 1463, 72186, -1000, -1000, 72186, -1000,
	72186, -1000, -1000, -1000, 1965, -1000, -1000, -1000, -1000, 59695,
	-1000, -1000, -1000, -1000, -1000, -1000, 2314, -1000, 1413, -1000,
	1502, -1000, 1210, -1000, -1000, 189, -1000, -1000, -30, -1000,
	74321, -1000, -1000, 1981, -1000, 72186, -1000, 1989, 2300, 2313,
	1195, 1727, 2054, -1000, 28592, 2038, 32732, 1778, 157, -1000,
	-1000, 157, 157, 23024, -1000, -1000, 84480, 84480, 15645, 1157,
	30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452,
	30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452,
	30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452,
	30452, 30452, 30452, 30452, 30452, 2088, 30452, 1133, 30452, 30452,
	30452, 30452, 2025, -1000, -1000, 1574, 535, 1608, -1000, 2741,
	2741, 2741, 84118, 84118, 534, 2838, 728, -1000, 30452, -1000,
	102, 30452, 16088, -1000, -1000, -1000, 459, 9146, 1817, -1000,
	458, 16556, -1000, -1000, -1000, 17468, 598, 28124, 30452, 906,
	83590, 1272, 2753, 13877, 2328, 2156, -1000, 2758, -1000, -1000,
	2753, -1000, -1000, -1000, -1000, 2753, 1151, 1150, 2753, -1000,
	2753, 2753, 653, 760, 752, 19796, 19328, 18860, 18392, 656,
	30452, 30452, 30452, 30452, 30452, 30452, 30452, 30452, -1000, 27668,
	27200, 26732, 33188, 26264, 30452, 17924, 25796, 25328, 72186, -15,
	2680, 30452, 130, -1000, 81742, -1000, 130, 130, 651, -40,
	83590, 2041, 2041, 36705, 1956, 1575, 1575, 1575, -1000, 805,
	10333, 805, 64412, 1576, 805, 805, 259, 303, 455, 34977,
	1969, 64412, 717, 650, 6, 5, 4, -1000, -1000, 2,
	1, -1000, -1000, 59695, 648, 16088, 15645, 1233, -42, 255,
	2056, 2055, 2052, -1000, 2046, 1362, -45, 1123, -25, -1000,
	5630, -57, -1000, 891, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 922, 646, 645, 714,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 641, 1483, 639, 639,
	639, -1000, -1000, -1000, 305, 633, 286, 632, -1000, -1000,
	-1000, -1000, -1000, -1000, 2264, -38, 60122, 802, -58, 1025,
	-30, -1000, -1000, -1000, 49780, 1033, -1000, 1337, -1000, -1000,
	-1000, -1000, -1000, -1000, 1218, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 801, -1000, -1000, -1000, -1000, -1000, -1000, 2749,
	2747, -16, -1000, -1000, 15645, -1000, -31, 1386, -1000, 51492,
	1790, 2559, 2554, 1287, -1000, 1236, 2616, 54944, 2654, 2664,
	172, -1000, 2261, -1000, -1000, 835, 1403, 1119, 54944, 2652,
	-1000, 84480, -1000, 2115, 2613, 1217, 1221, 1217, 1217, 1209,
	-1000, 54944, 1114, -1000, 1503, -1000, 48922, -1000, 1110, -1000,
	-34, 2653, 2663, 109, -1000, 2258, 1108, -1000, -1000, 59695,
	15645, -1000, 2068, -1000, 2068, -1000, -1000, 2124, -1000, -63,
	788, -17, 49349, 72186, 254, -1000, 30452, 102, 30452, 102,
	-1000, -1000, 2417, -1000, -1000, -1000, 2834, 1444, 1984, -1000,
	-1000, -1000, 631, 1896, 2257, 72186, 2073, -20, 59695, -1000,
	2652, 1873, -1000, -1000, 55377, -1000, -1000, 2415, -1000, 2068,
	2414, 505, 2832, -1000, 1693, 1871, -1000, -1000, -1000, 73894,
	1091, 2397, 982, 338, 2678, -1000, 338, 42352, -1000, 72186,
	-1000, -1000, 72186, -1000, -1000, -1000, 2831, -1000, 59695, -1000,
	-1000, 59695, -1000, 59695, -1000, 59695, -1000, 59695, 59695, -1000,
	72186, 48922, 48922, 48922, 5833, 50638, -64, -66, 454, -1000,
	64843, 72186, 981, 51065, 72186, 2515, 872, 38890, -48, 872,
	872, 788, -1000, 788, -1000, 59695, 2311, -1000, 872, 872,
	872, -1000, -1000, -1000, -1000, 2830, 2826, -1000, -1000, -1000,
	884, 59695, 72186, 59695, -1000, -1000, 72186, -1000, 72186, -1000,
	884, 72186, 884, 72186, 884, 72186, -1000, -1000, -1000, -1000,
	-1000, -1000, 102, 30452, 1332, -1000, 2309, -1000, 2307, -1000,
	29, -1000, -1000, -1000, -1000, 1455, 59695, 59695, 59695, 59695,
	72186, 59695, -1000, 54944, -1000, 1989, 2300, -1000, -1000, -1000,
	-1000, -1000, -1000, 1223, 1658, -1000, 2024, -1000, 1266, -1000,
	-1000, -1000, 83590, 33644, -1000, -1000, 83590, 1396, -1000, 32276,
	31820, -1000, -1000, 1355, 59695, 2083, -1000, 2083, -18, -1000,
	81410, 2019, 59695, -1000, -1000, -1000, -1000, -1000, 833, 809,
	809, 1120, 1120, 1120, 1120, 2643, 3873, 4821, 1422, 5091,
	5091, 6848, 6848, 6848, 6848, 6848, 5091, 432, 457, 457,
	432, 432, 432, 432, 432, 457, 457, 457, 5091, 5091,
	5091, 84118, 83854, 8790, 30452, 30452, 1107, 1573, 535, 8572,
	30452, 7545, 7545, 7545, 7545, -1000, 1443, -1000, -1000, -1000,
	-1000, 2239, 623, 33188, 33188, -1000, -1000, -1000, -1000, 17012,
	30452, -1000, -1000, -1000, -1000, 24860, -1000, -1000, 80832, -238,
	453, -200, -23, -1000, 30452, 30452, 30452, 446, -1000, 252,
	30452, 72186, -1000, 77752, 716, -69, -1000, -76, 1247, -1000,
	30452, -1000, -1000, 1089, -1000, 1084, 1079, 1078, -1000, 613,
	444, -1000, 251, -1000, 1567, 612, 611, 443, -79, 442,
	832, 823, 440, 438, 437, 30452, -1000, -1000, -1000, -1000,
	-1000, 80789, -1000, -1000, 80500, -1000, -1000, 80211, -1000, -1000,
	80168, -1000, -1000, -1000, 83326, 77488, 77224, 76933, 7257, 76890,
	9763, -81, 431, -1000, 2217, -200, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 429, -1000, 418, -1000, 83062, -200,
	415, 1080, -1000, 33188, 33188, 33188, -1000, 414, -1000, 81453,
	-1000, 82798, 24404, 24404, 24404, 411, 82534, 30452, -200, -82,
	-1000, -84, -1000, -1000, 610, -87, 910, 23936, 35841, 15645,
	-1000, 910, 910, 30452, -1000, 30452, 2034, -1000, -1000, -1000,
	2033, 1966, 2041, 36705, -1000, -1000, -1000, -1000, 64412, -1000,
	2731, 2131, -1000, 64412, -1000, -1000, 72186, 471, -1000, 64412,
	64412, 15645, 805, -1000, 805, 64412, 591, -1000, -1000, -1000,
	-1000, -1000, 406, 39762, -23, 250, 872, -1000, 15645, 2043,
	2043, 2043, 2043, -1000, -1000, 72186, 2700, -1000, 1494, -1000,
	84480, -1000, 725, 965, 609, -1000, 2753, 2753, -1000, 2753,
	72186, 129, 23480, -1000, 1033, -1000, -1000, 1347, -1000, 1458,
	-1000, 1109, -1000, -1000, -1000, -1000, 23480, -1000, 2042, 72186,
	72186, 59695, -1000, -1000, 1868, 73467, 1865, 84480, 72186, -1000,
	-1000, 607, 606, 2018, 2017, 72186, 72186, 2016, 73040, 72613,
	72186, 1491, 30452, 1802, 1810, 102, 102, -1000, -1000, 102,
	603, 1100, 59695, 59695, 59695, 1418, -1000, -1000, -1000, -1000,
	-1000, 54517, -1000, -1000, 2757, 2756, -1000, 1217, -1000, -1000,
	-1000, 1217, 2652, 1416, 59695, 44522, 892, 72186, 1529, 102,
	102, -1000, -1000, 102, 602, 15645, 1453, -1000, -1000, -1000,
	872, 2212, -1000, 2124, -1000, -1000, 13436, 83590, -1000, 83590,
	-1000, 72186, -1000, 936, 72186, 51065, 868, 2393, 41490, -38,
	872, 48922, 59695, -20, -1000, 2652, 2392, 471, 1858, -1000,
	-1000, 48922, -1000, 48922, 2824, 601, 2823, -1000, 59695, 2391,
	1691, 1856, 2465, 754, 72186, 910, 36705, 1451, -1000, 40195,
	961, 72186, 1400, 103, -1000, -1000, -1000, 23, 72186, -1000,
	2822, -1000, -1000, 188, 188, 188, -1000, 187, 1712, -1000,
	-47, -47, -1000, -1000, 5833, 5833, 872, -21, 600, -1000,
	784, 782, 38449, 48922, -89, -1000, -1000, -1000, -1000, -1000,
	59695, 72186, 686, 2118, 72186, -90, -1000, 247, 599, -1000,
	-1000, 872, 2201, -1000, -1000, 900, -1000, 1168, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -7, -38, -38,
	-1000, 884, -1000, 884, -1000, 884, -1000, 83590, -1000, 1330,
	1269, 72186, -1000, 15645, 72186, 59695, 15645, 59695, 2295, 2290,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 999, -1000,
	1396, 1639, -1000, 598, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1955, -1000, -24, 23024, 1787, -1000, -1000,
	59695, -9, 30452, 30452, 7834, 5668, 30452, 33188, 33188, -1000,
	30452, 4008, -1000, -1000, -1000, -1000, -1000, 2198, 597, 30452,
	84480, 5008, 4531, -1000, 401, 9499, 432, -1000, 30452, -1000,
	400, 22568, -1000, 82006, -33, -92, -1000, 12995, -200, -95,
	-1000, -1000, 724, -1000, 2412, -1000, 30452, 82270, 1939, 1582,
	1465, 1352, 2753, 2772, 12554, -1000, 42783, 914, 1583, -1000,
	-1000, 2753, 797, -1000, -1000, -1000, 797, -1000, 79879, -1000,
	-1000, -1000, -1000, 84480, 84480, 30452, 30452, -1000, 30452, 30452,
	30452, -1000, -1000, 30452, -1000, -1000, 2187, 30452, -1000, 84480,
	84480, 33188, 33188, 33188, 33188, 33188, 33188, 33188, 33188, 33188,
	33188, 33188, 33188, 33188, 33188, 33188, 33188, 33188, 33188, 33188,
	1876, 33188, 2723, 2723, 2723, -1000, 2289, 2187, 30452, 30452,
	84480, 396, 391, 388, -1000, 30452, -200, -1000, -1000, 5833,
	-1000, 2154, -1000, 30452, -1000, -72, -1000, 1969, -1000, -1000,
	2154, 2154, -100, 83590, 36705, 36705, -1000, 594, 30452, 2031,
	-1000, -1000, 713, -240, -1000, 780, -1000, -1000, -1000, -1000,
	-1000, 471, -1000, -1000, -1000, 244, 64412, 64412, 712, -1000,
	-101, -1000, -1000, -102, -1000, 2676, 387, 15645, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -38, 1601, 2771, -1000,
	2755, 723, 711, 2753, 380, 376, 375, -38, 72186, -1000,
	-30, -1000, -1000, -1000, 30452, -1000, -1000, 2551, 1077, 1076,
	-1000, 2387, -1000, 1847, -1000, 966, -1000, 1364, -1000, 30452,
	30452, 588, 586, 1555, 2820, 980, 2383, 1712, 2381, 1712,
	-1000, -1000, 842, -1000, 83590, 584, 583, -1000, -31, 1368,
	899, -1000, -1000, 30452, 30452, 63985, -1000, 361, 2563, -12,
	-1000, 1073, -1000, -1000, -1000, -1000, 2652, 1072, -1000, -1000,
	-1000, -1000, -1000, -1000, 897, -1000, -1000, 30452, -1000, -34,
	1065, -1000, 48922, 872, -1000, 2819, 2817, 2813, 374, -103,
	-36, 84480, 2671, 1723, 563, 59695, 816, -1000, 2731, -1000,
	-1000, -1000, 59695, 2670, 2379, 892, 1231, -1000, 2812, -1000,
	976, 15645, 59695, 2377, 1972, 754, 50211, -1000, 892, 1583,
	-157, -1000, 1400, 22100, 2556, -108, -1000, -1000, -1000, 910,
	42352, 36705, 30452, 2810, -109, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 63558, 63558, 48922, 48922, 48922, 872,
	72186, 72186, 51065, 2809, 575, 72186, 72186, 574, -1000, 72186,
	72186, 2807, 48922, -1000, 102, -1000, 1598, 59695, 12113, -1000,
	-1000, -1000, -1000, -1000, 884, -1000, -1000, 1535, 1748, 1535,
	1398, 1389, -1000, 1637, -1000, -1000, -1000, -1000, 2071, 2558,
	15645, 2662, 7545, 30452, 30452, 278, 4507, 550, 7545, 30452,
	30452, 84480, 84320, -110, 30452, 30452, -1000, 30452, 657, 83590,
	2770, 30452, 371, 367, -1000, -1000, -1000, -1000, -1000, -1000,
	83590, 30452, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 363,
	-1000, 110, -1000, -1000, -1000, 76456, -1000, 30452, 362, 360,
	-1000, -1000, -1000, 355, 354, 491, 6917, 79590, 79547, 79258,
	83590, 2289, 83590, -1000, -1000, 745, 745, 1174, 1174, 1174,
	1174, 2723, 866, 506, 626, 336, 336, 336, 839, 516,
	516, 336, 336, 336, 2181, 1916, 573, 3945, -1000, -1000,
	83590, 83590, 349, -1000, -1000, -1000, -200, 348, 2150, 2612,
	83590, -1000, 36705, 2150, 2150, -1000, -1000, 1966, 72186, 83590,
	36705, -1000, 2131, -1000, 10786, -1000, 15645, -1000, -1000, -1000,
	-1000, 2731, -1000, 39762, -1000, 572, -1000, 104, -1000, -1000,
	627, 2806, 715, 346, -1000, -1000, -1000, -38, 83590, 72186,
	72186, 72186, 2376, -1000, 3791, -1000, 78969, -115, -1000, 81410,
	30452, 72186, -1000, 1519, 2044, 1009, -1000, 2582, 72186, -1000,
	72186, -1000, -1000, 72186, 72186, 59695, 2368, -116, 83590, -39,
	-1000, 777, -1000, 1193, -1000, 11672, 59695, 59695, 2367, -117,
	15645, -47, -1000, -1000, -1000, -1000, 2106, -1000, 62263, 1646,
	102, -1000, 63127, 2805, 564, -1000, 1584, -1000, 592, 2652,
	102, 59695, -1000, -1000, 2068, -1000, 557, 72186, 1689, 555,
	15645, 1979, 754, 50211, -1000, 1091, 2054, -1000, -77, -1000,
	536, 102, 1583, -1000, -157, 83590, -1000, 776, -1000, -126,
	-1000, -1000, 339, -1000, 2509, 2500, -1000, -1000, 30452, 553,
	552, 72186, 2499, -1000, -1000, -128, -1000, 1808, -1000, -1000,
	-1000, -1000, -1000, 15645, 1384, -1000, 551, 549, -1000, -1000,
	-1000, -1000, 2558, 7545, 7545, 30452, 30452, 30452, 7545, 84320,
	-129, -1000, 7545, 7545, -200, -1000, -1000, 82006, -1000, -1000,
	83590, -1000, 11231, 1539, -1000, 78926, -1000, -1000, -1000, -1000,
	30452, 30452, -1000, -1000, -1000, -1000, -1000, 33188, 2171, 548,
	84480, -1000, -1000, 902, 30452, 30452, 1969, 902, 902, -1000,
	-131, -1000, -1000, -1000, 2731, 104, -1000, -1000, 2803, 15645,
	518, -1000, 2801, -1000, -1000, -1000, -1000, 72186, -1000, 72186,
	-1000, 15645, 72186, 2173, 1828, -1000, -1000, 2014, 547, 33188,
	59695, 799, 2191, 1516, 30452, 1787, -134, -136, 1813, -1000,
	-1000, 1798, 30452, -1000, 84480, 537, 1712, 1712, -139, -142,
	-1000, 30452, 1063, 72186, 21644, -1000, 2800, 2563, -1000, -1000,
	30452, 1047, -1000, 1529, 2132, -1000, -1000, -1000, -1000, 2013,
	-1000, -1000, 72186, 2008, 875, -144, -1000, 764, 759, -1000,
	51065, 868, 856, -1000, -1000, -1000, 471, -1000, 30452, -1000,
	59695, 30452, 1672, -1000, 754, 50211, -1000, 2465, 1400, -1000,
	2472, 72186, 2549, -1000, 2054, 535, -1000, 872, 528, 527,
	-145, 30452, 30452, -147, 526, 872, -160, -1000, 786, 783,
	-1000, -1000, 59695, 59695, 30452, 30452, -1000, 7545, 7545, 7545,
	-1000, 332, -1000, -1000, 1583, 2605, -1000, 78637, 78348, 4240,
	33188, 84480, -150, -1000, 72186, 83590, -200, -1000, -1000, -1000,
	492, -1000, 2798, -1000, -1000, 1755, -1000, -1000, -1000, 72186,
	1846, -1000, 978, 30452, 3945, 524, 30452, -1000, -1000, 2104,
	2230, 2106, 521, -1000, -1000, -1000, -1000, 969, 1440, -1000,
	-1000, 83590, 2592, 30452, -1000, -1000, 520, 519, 83590, 517,
	753, 2168, -1000, -1000, -1000, 83590, 515, 868, -1000, 1556,
	1646, 513, -1000, -1000, -1000, 2089, -1000, 63127, 34085, 34085,
	322, 2665, 856, -1000, 2727, -1000, 2659, -155, 976, -158,
	59695, 50211, -1000, 1972, -1000, 1158, -161, 72186, 1400, -1000,
	-1000, 48922, 48922, 969, -166, -168, -1000, 48922, -1000, 1808,
	-1000, 72186, -1000, 72186, -1000, -1000, -169, -174, -1000, 1653,
	30452, -1000, -1000, 4240, -175, -1000, -197, -1000, 2658, -1000,
	-1000, -1000, -1000, 2375, 2147, 78305, 1950, 72186, 78016, 2215,
	-1000, -1000, 1529, 72186, -1000, 2142, 59695, 974, 15645, -177,
	1535, 1535, 30452, 21188, 1550, 30452, -1000, 59695, 72186, -1000,
	2498, -1000, -1000, -1000, 2106, 102, -1000, -1000, 102, 969,
	503, 1516, 495, -1000, 1979, 1273, -1000, 910, -1000, -1000,
	-180, -185, 1516, 969, -1000, -188, -1000, -190, -195, -1000,
	-1000, 321, 31364, 31364, 31364, -200, -1000, 72186, 478, 2355,
	882, -1000, 1629, 1479, 287, 990, -1000, -1000, 2191, -198,
	879, 471, -1000, 30452, -1000, 969, -201, -1000, 950, -203,
	-1000, 943, -204, -1000, 2166, -1000, -206, 468, -211, -1000,
	-1000, -1000, 1529, 875, -1000, 1516, 30452, 2106, 30452, -1000,
	42352, -1000, 872, 872, 2106, 1516, 872, -1000, -1000, -1000,
	2437, -1000, 34526, 1615, 1387, 81121, 2437, 2437, -1000, -1000,
	72186, 2632, -1000, 1669, 1662, 1298, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2631, 1950, 83590, 2106, -1000, 1535,
	2128, -1000, 1535, 2165, -1000, 1548, -1000, 72186, -1000, 72186,
	868, -1000, 2106, -212, 1529, -218, -196, -1000, -1000, 1529,
	2106, -1000, -1000, 1472, 2669, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 748, -1000, 2486, -1000, 996, 1564, 1564,
	747, 1629, -1000, -1000, 466, -1000, 464, -1000, -219, -1000,
	-1000, 1529, 969, 908, 1516, -1000, -1000, 1529, 1376, -1000,
	-1000, 1579, 30908, 30452, -1000, 2705, -1000, -1000, 1943, -1000,
	30452, 2191, 30452, 30452, 1701, 908, 1516, -1000, 2778, 2106,
	-1000, -1000, -1000, -1000, 83590, -1000, -1000, -1000, 83590, -1000,
	-220, -225, -1000, -1000, -1000, -1000, 2106, -1000, 1529, 1529,
	1031, 1529, 908, -1000, 462, 908, -1000, 30452, -1000, -230,
	1529, -1000,
}
var sqlPgo = [...]int{

	0, 3487, 3486, 3485, 3483, 3480, 3479, 3478, 3477, 3476,
	3475, 3474, 3472, 3471, 3470, 3469, 3467, 3465, 3464, 3462,
	3461, 3460, 3459, 3458, 3457, 3456, 3453, 3448, 3446, 3442,
	3441, 3439, 3437, 3428, 3425, 3422, 3419, 3418, 3416, 3415,
	3412, 3408, 3406, 3404, 3400, 3391, 3390, 3389, 3387, 33,
	3386, 3382, 3380, 3379, 3377, 3375, 3373, 3370, 3366, 3365,
	3363, 3360, 3358, 3355, 3352, 3349, 3348, 38, 3344, 226,
	3343, 3342, 3340, 3339, 3337, 3336, 3335, 3334, 3332, 3331,
	225, 3328, 158, 3327, 3326, 3325, 3322, 3321, 223, 3317,
	3315, 3311, 3310, 3309, 3308, 3306, 3303, 151, 198, 3302,
	220, 3301, 3300, 3299, 3298, 3297, 3293, 3292, 3288, 3285,
	3277, 200, 3276, 221, 3275, 3274, 3271, 3268, 3267, 3266,
	3265, 3263, 3260, 3259, 3258, 3257, 3256, 3255, 3254, 3253,
	3252, 3251, 3250, 3249, 3248, 3247, 3246, 3241, 3240, 3235,
	3234, 224, 144, 3231, 3230, 218, 212, 3227, 135, 97,
	93, 154, 3225, 89, 49, 3223, 15, 152, 205, 4051,
	191, 3221, 3220, 3219, 196, 150, 3218, 192, 3217, 3215,
	3210, 3209, 74, 58, 134, 138, 126, 125, 61, 3205,
	3203, 73, 55, 34, 29, 113, 127, 3200, 3199, 3198,
	2033, 96, 3197, 3194, 214, 3193, 195, 3189, 1995, 3188,
	161, 83, 90, 31, 95, 3187, 104, 20, 3186, 141,
	43, 3182, 124, 75, 30, 6631, 6816, 3181, 80, 230,
	86, 222, 176, 173, 175, 169, 132, 1459, 3180, 204,
	3179, 63, 157, 3178, 3177, 3176, 66, 156, 79, 3171,
	11, 3, 153, 12, 87, 14, 3169, 13, 3168, 3166,
	3160, 3157, 27, 131, 3149, 111, 56, 3144, 72, 3141,
	70, 170, 168, 3138, 187, 98, 3136, 3134, 210, 163,
	148, 3133, 16, 189, 3132, 3130, 3125, 3124, 3123, 99,
	22, 100, 3120, 3119, 106, 194, 155, 3118, 36, 3117,
	133, 76, 105, 227, 145, 183, 92, 184, 149, 188,
	3113, 3112, 3110, 146, 3108, 3107, 177, 123, 3106, 3105,
	229, 35, 69, 193, 65, 147, 121, 3104, 162, 3103,
	3101, 3100, 228, 143, 167, 7, 2, 67, 94, 28,
	8, 190, 115, 208, 84, 3098, 3135, 119, 296, 40,
	116, 85, 57, 101, 112, 217, 53, 3096, 3095, 1761,
	3094, 3093, 3089, 3088, 139, 3084, 3079, 3074, 108, 128,
	171, 3073, 117, 64, 10, 122, 203, 231, 88, 180,
	172, 209, 3070, 140, 3063, 68, 107, 3062, 159, 202,
	350, 3061, 551, 109, 3060, 181, 3058, 3057, 3055, 3054,
	3053, 3051, 3049, 546, 3048, 110, 3047, 3046, 215, 160,
	3045, 213, 118, 142, 81, 32, 3044, 62, 538, 3043,
	166, 37, 3042, 3450, 54, 0, 6204, 5208, 6134, 3040,
	992, 3039, 165, 102, 3038, 3037, 3036, 77, 3035, 52,
	3033, 3032, 50, 3031, 17, 6, 9, 18, 19, 1527,
	989, 3030, 3028, 91, 103, 129, 3026, 219, 185, 3025,
	3023, 3021, 71, 3020, 24, 3019, 25, 3018, 3017, 26,
	5, 21, 3008, 3005, 197, 3004, 199, 3003, 2993, 2680,
	114, 2992, 211, 120, 2989, 207, 2988, 136, 174, 2987,
	2985, 2980, 2957, 201, 2956, 2954, 23, 4, 2953, 2950,
	2653, 164, 1, 2584, 2948, 2947, 59, 2946, 2944, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 12, 12, 7, 7, 8, 8, 8,
	37, 37, 10, 10, 9, 9, 9, 11, 11, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 15, 15,
	27, 27, 16, 16, 29, 29, 17, 17, 30, 30,
	472, 472, 20, 32, 21, 33, 14, 473, 473, 473,
	473, 25, 22, 34, 23, 23, 23, 23, 23, 152,
	152, 152, 152, 19, 19, 28, 28, 175, 175, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 471, 471, 177, 177, 176, 171, 171, 474, 474,
	178, 178, 178, 180, 180, 38, 38, 38, 96, 96,
	96, 97, 97, 98, 98, 153, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 84, 84, 413, 413, 414,
	414, 148, 148, 149, 149, 149, 149, 150, 150, 151,
	151, 151, 52, 40, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 42, 42, 42, 42, 42, 42,
	43, 43, 43, 43, 43, 43, 50, 50, 50, 50,
	142, 142, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 481, 481, 482, 482, 483, 483, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 64, 64, 254, 254, 230, 230, 65,
	65, 65, 66, 66, 67, 67, 54, 54, 466, 466,
	269, 269, 377, 377, 69, 69, 289, 289, 70, 70,
	70, 70, 70, 70, 71, 71, 71, 71, 71, 71,
	71, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 78, 78, 78, 79, 79, 79, 76, 76, 76,
	74, 74, 74, 73, 73, 73, 77, 77, 77, 75,
	75, 75, 270, 270, 80, 80, 80, 80, 80, 80,
	80, 80, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 379, 379, 81,
	81, 81, 347, 347, 85, 85, 85, 304, 304, 86,
	86, 86, 86, 86, 87, 87, 87, 87, 99, 99,
	99, 99, 469, 469, 261, 261, 194, 194, 194, 194,
	92, 92, 92, 92, 93, 93, 93, 94, 94, 147,
	147, 105, 105, 105, 105, 105, 104, 104, 104, 104,
	104, 104, 44, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 49, 49, 49, 49, 49, 107, 107,
	477, 477, 109, 106, 106, 106, 108, 108, 108, 108,
	110, 111, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 407, 407, 278, 278, 405, 405, 421, 421, 406,
	406, 234, 234, 234, 234, 234, 235, 235, 235, 412,
	412, 412, 412, 412, 412, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 132, 132, 132,
	141, 141, 141, 141, 141, 141, 141, 134, 134, 134,
	122, 122, 114, 114, 114, 114, 114, 118, 118, 118,
	118, 118, 118, 118, 118, 115, 115, 124, 124, 124,
	124, 124, 119, 119, 121, 121, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 116, 116, 116, 116, 126,
	126, 126, 126, 310, 310, 310, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 137, 137, 137, 137,
	137, 137, 361, 361, 133, 133, 133, 133, 136, 136,
	136, 136, 294, 294, 130, 130, 130, 131, 131, 131,
	135, 135, 138, 138, 138, 138, 117, 117, 117, 485,
	485, 485, 139, 139, 129, 129, 140, 140, 140, 140,
	140, 140, 140, 140, 128, 128, 128, 127, 127, 127,
	127, 120, 467, 467, 464, 464, 464, 464, 464, 464,
	464, 465, 465, 468, 468, 90, 90, 90, 59, 59,
	156, 156, 156, 156, 154, 154, 155, 155, 60, 60,
	486, 486, 486, 475, 475, 475, 476, 476, 476, 476,
	476, 476, 236, 236, 237, 237, 328, 328, 328, 328,
	328, 240, 240, 179, 179, 179, 243, 244, 244, 241,
	241, 242, 242, 242, 246, 246, 245, 248, 248, 247,
	327, 428, 428, 430, 430, 430, 430, 430, 430, 430,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 426, 426, 426, 427, 422, 422, 423, 423, 423,
	423, 238, 238, 239, 239, 239, 239, 424, 425, 259,
	259, 364, 429, 429, 431, 431, 433, 487, 487, 487,
	487, 487, 487, 488, 488, 326, 326, 325, 325, 252,
	252, 434, 434, 434, 434, 435, 435, 435, 435, 435,
	438, 437, 436, 436, 436, 436, 436, 63, 63, 63,
	291, 291, 290, 290, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 144,
	144, 61, 61, 61, 185, 185, 186, 186, 58, 58,
	58, 58, 58, 58, 58, 13, 13, 13, 490, 490,
	62, 62, 62, 62, 195, 195, 470, 262, 262, 491,
	491, 68, 68, 68, 68, 68, 68, 57, 57, 57,
	57, 57, 492, 492, 311, 311, 309, 309, 258, 258,
	363, 199, 199, 172, 172, 172, 24, 26, 26, 18,
	18, 35, 35, 36, 36, 31, 31, 478, 478, 479,
	479, 91, 91, 95, 95, 95, 103, 103, 143, 143,
	143, 143, 143, 143, 143, 39, 39, 39, 39, 51,
	51, 51, 51, 101, 494, 494, 494, 102, 102, 493,
	493, 193, 193, 193, 193, 196, 196, 322, 322, 323,
	323, 495, 495, 324, 324, 324, 324, 188, 187, 189,
	189, 56, 56, 56, 181, 181, 182, 182, 183, 183,
	184, 184, 496, 496, 88, 88, 88, 146, 146, 229,
	229, 229, 318, 318, 318, 253, 253, 204, 204, 321,
	321, 319, 319, 319, 319, 288, 288, 288, 145, 145,
	267, 267, 280, 280, 281, 281, 374, 374, 282, 100,
	100, 159, 159, 157, 157, 157, 157, 157, 157, 157,
	157, 164, 164, 165, 165, 166, 166, 167, 168, 168,
	168, 168, 271, 271, 169, 169, 169, 158, 158, 158,
	160, 160, 160, 160, 160, 160, 160, 163, 163, 163,
	163, 170, 170, 170, 162, 162, 445, 445, 445, 447,
	447, 448, 444, 444, 446, 446, 489, 489, 293, 293,
	293, 250, 251, 249, 249, 256, 256, 255, 257, 257,
	362, 362, 362, 173, 173, 173, 285, 285, 285, 285,
	286, 286, 314, 314, 312, 312, 312, 312, 313, 313,
	315, 315, 315, 316, 316, 317, 317, 284, 284, 343,
	343, 161, 161, 161, 264, 264, 264, 265, 265, 334,
	334, 334, 334, 334, 334, 335, 335, 333, 333, 333,
	333, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	366, 367, 367, 266, 266, 368, 320, 320, 462, 462,
	462, 463, 463, 360, 360, 369, 369, 369, 369, 369,
	369, 358, 358, 359, 359, 375, 376, 376, 297, 297,
	297, 297, 295, 295, 298, 298, 298, 298, 296, 296,
	370, 370, 370, 370, 287, 287, 371, 371, 371, 371,
	372, 329, 330, 330, 380, 380, 380, 380, 395, 263,
	263, 263, 263, 263, 497, 497, 381, 381, 381, 381,
	381, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 385, 385, 385, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 394, 394, 394, 394, 394, 386,
	386, 391, 391, 392, 392, 392, 387, 388, 393, 393,
	393, 393, 498, 498, 397, 397, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 383, 383, 383, 390, 390,
	390, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 305, 305, 307, 307, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 338, 338, 338, 338, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 439, 439, 439, 439, 439, 439, 439, 439, 442,
	442, 443, 443, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 441, 441,
	441, 441, 449, 449, 450, 450, 452, 452, 453, 453,
	454, 455, 455, 455, 456, 457, 457, 451, 451, 458,
	458, 458, 458, 459, 459, 460, 460, 460, 460, 460,
	461, 461, 461, 461, 461, 349, 349, 350, 350, 356,
	356, 356, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 233, 233, 233, 197, 197,
	197, 197, 197, 276, 276, 274, 274, 274, 277, 277,
	275, 275, 273, 273, 272, 272, 346, 346, 344, 344,
	348, 348, 299, 299, 396, 396, 396, 396, 396, 396,
	396, 396, 300, 300, 300, 308, 301, 301, 302, 302,
	302, 302, 302, 340, 341, 303, 303, 303, 342, 342,
	351, 355, 355, 354, 353, 353, 352, 352, 331, 331,
	332, 332, 283, 283, 499, 499, 279, 279, 373, 373,
	373, 373, 232, 232, 268, 268, 231, 231, 224, 224,
	225, 225, 225, 225, 260, 260, 357, 357, 398, 398,
	399, 399, 400, 400, 401, 401, 402, 403, 404, 345,
	345, 214, 213, 201, 202, 212, 211, 210, 200, 203,
	207, 208, 209, 205, 206, 220, 219, 218, 216, 217,
	378, 226, 226, 227, 227, 227, 228, 228, 228, 228,
	198, 198, 221, 221, 222, 223, 223, 215, 215, 215,
	190, 190, 190, 191, 191, 192, 192, 411, 411, 409,
	409, 409, 410, 410, 410, 410, 408, 408, 408, 408,
	408, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 417, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 420, 420,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 1, 3,
	4, 6, 1, 3, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 10, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 6, 7, 2, 5, 6,
	2, 1, 3, 1, 3, 1, 6, 4, 9, 7,
	12, 12, 12, 9, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 6, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 6,
	1, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 3, 3, 4, 3, 4, 7, 4, 4, 4,
	3, 5, 7, 4, 3, 3, 4, 3, 3, 3,
	3, 3, 2, 0, 1, 0, 1, 0, 3, 3,
	3, 3, 3, 6, 4, 4, 4, 3, 5, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 1, 1,
	2, 1, 2, 7, 3, 2, 0, 1, 3, 3,
	1, 0, 1, 2, 2, 1, 6, 5, 1, 2,
	1, 3, 2, 0, 9, 3, 2, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 3, 3, 6,
	6, 3, 1, 1, 2, 1, 1, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 3, 5,
	7, 2, 3, 0, 3, 5, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 4, 7, 2, 6, 4,
	7, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 5, 4, 6, 4, 3,
	0, 1, 3, 2, 4, 2, 4, 1, 6, 3,
	1, 1, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 1, 3, 2, 3, 3, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 4, 5, 5, 5, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 5, 3, 5, 5, 5,
	7, 3, 3, 3, 4, 3, 5, 3, 6, 5,
	6, 3, 5, 6, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 5, 4, 3, 5, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 10, 10, 3, 5, 5, 5,
	3, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 10, 13,
	0, 2, 4, 3, 3, 3, 1, 3, 9, 12,
	0, 2, 3, 1, 1, 0, 1, 2, 2, 2,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 8, 4, 2, 5, 5, 5,
	2, 9, 10, 6, 5, 3, 1, 5, 8, 6,
	11, 3, 0, 2, 4, 3, 3, 1, 5, 1,
	3, 1, 2, 0, 1, 2, 2, 0, 1, 3,
	3, 2, 2, 1, 1, 4, 0, 6, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 1, 0, 3, 3, 3, 6,
	4, 5, 7, 8, 3, 4, 5, 3, 1, 1,
	8, 11, 7, 5, 1, 1, 1, 1, 2, 0,
	1, 6, 7, 6, 5, 3, 4, 15, 18, 14,
	17, 4, 0, 2, 2, 0, 1, 0, 1, 3,
	3, 2, 0, 1, 1, 0, 6, 4, 6, 6,
	8, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 1, 2, 4, 4, 2, 3, 5,
	5, 1, 3, 1, 0, 1, 2, 3, 2, 4,
	2, 3, 0, 2, 0, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	3, 4, 5, 2, 2, 0, 2, 2, 1, 1,
	1, 0, 1, 0, 2, 2, 5, 4, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 1, 1, 1, 3, 2, 4, 4,
	0, 4, 4, 3, 4, 1, 5, 3, 4, 5,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 2, 1, 0, 2, 5, 7, 2, 1, 2,
	4, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 2, 1, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 5, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 3, 4, 3, 3,
	4, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 1, 1, 1,
	2, 2, 1, 1, 2, 2, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 470, -82, -52, -50, -85, -86, -70,
	-87, -81, -99, -103, -91, -105, -143, -3, -38, -40,
	-53, -69, -71, -80, -89, -88, -90, -92, -96, -95,
	-84, -44, -100, -104, -113, -144, -145, -146, 85, 71,
	127, 108, 113, 160, 297, 327, 337, 321, -108, -109,
	356, -39, -51, -102, -101, -4, -10, -13, 27, 41,
	-41, -42, -43, 56, -61, -58, -55, -64, -480, 87,
	-446, -72, -75, -77, -484, 118, 133, 177, 289, -93,
	-94, 323, 325, 134, -46, -45, 128, -157, -159, -106,
	-107, -147, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, -140, 360,
	407, 42, 370, 72, 121, 331, 21, -5, -6, -7,
	-8, -9, -11, -12, -26, -54, -56, -57, -59, -60,
	-68, -62, -63, -445, -73, -74, -76, -78, -79, 322,
	-160, -158, 467, 420, -15, -20, -21, -16, -17, -19,
	-22, -18, -27, -32, -33, -29, -30, -28, -31, -34,
	-35, -36, -37, -24, -25, -14, -23, 438, 446, -163,
	-161, -162, -170, 344, 428, 384, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, -216, -221, -222, -223,
	-215, -190, -417, -420, 4, -415, -418, 139, 184, 255,
	21, 22, 23, 24, 25, 27, 38, 40, 39, 41,
	42, 45, 48, 49, 47, 52, 53, 54, 55, 56,
	57, 60, 65, 70, 71, 72, 73, 74, 75, 80,
	77, 78, 79, 82, 84, 85, 86, 88, 90, 91,
	99, 100, 101, 102, 103, 104, 108, 111, 110, 113,
	116, 117, 118, 120, 122, 123, 125, 127, 128, 131,
	129, 390, 130, 132, 133, 134, 135, 145, 146, 147,
	149, 150, 152, 154, 158, 159, 161, 165, 167, 168,
	169, 170, 176, 177, 179, 180, 185, 181, 186, 190,
	193, 192, 194, 195, 196, 187, 201, 205, 206, 207,
	209, 210, 213, 214, 215, 216, 217, 220, 219, 222,
	225, 226, 229, 230, 233, 234, 235, 237, 238, 241,
	239, 242, 240, 243, 246, 244, 245, 248, 249, 253,
	251, 250, 257, 260, 174, 262, 263, 265, 266, 267,
	283, 270, 271, 272, 275, 276, 279, 282, 284, 285,
	286, 287, 288, 289, 290, 292, 293, 295, 297, 299,
	301, 302, 303, 304, 305, 306, 307, 309, 310, 312,
	313, 314, 315, 316, 321, 318, 319, 320, 322, 323,
	324, 325, 327, 329, 330, 331, 332, 334, 336, 357,
	358, 372, 337, 338, 339, 340, 341, 342, 343, 347,
	351, 348, 349, 350, 345, 346, 352, 353, 354, 356,
	359, 360, 362, 363, 365, 366, 368, 369, 370, 371,
	373, 376, 377, 378, 374, 375, 383, 381, 382, 385,
	386, 387, 388, 389, 391, 393, 401, 402, 404, 407,
	408, 409, 399, 411, 412, 415, 416, 417, 418, 419,
	424, 420, 422, 425, 426, 427, 433, 432, 439, 440,
	442, 443, 444, 33, 43, 44, 46, 50, 61, 62,
	63, 66, 105, 106, 126, 136, 137, 148, 162, 164,
	171, 172, 173, 191, 197, 199, 203, 223, 259, 261,
	277, 281, 294, 296, 308, 333, 364, 379, 394, 395,
	396, 397, 403, 405, 428, 429, 430, 434, 441, 268,
	-209, 2, -190, -190, 297, 26, 2, 26, 293, 346,
	386, 388, 2, -469, -261, 2, 26, -194, -190, 87,
	160, 344, -209, 2, -469, -261, 24, 2, -190, 2,
	-196, 2, 337, -190, 470, 82, 230, 65, 333, 353,
	-111, 402, -110, 394, 339, -112, -407, 2, 246, -190,
	470, 470, 470, 470, 2, 384, 286, 432, 345, 421,
	101, 305, 184, -490, 329, 163, 398, -464, 2, 4,
	-418, -415, -225, -224, 384, 101, -223, -215, 460, -222,
	470, 470, 470, 2, 206, 207, 304, 303, 353, 354,
	470, 470, 470, 2, 25, 59, 81, 84, 107, 135,
	155, 158, 273, -481, 238, 283, 302, 339, 352, 383,
	391, 404, -476, 371, 60, -475, 421, -490, 409, 116,
	-309, 101, 230, 159, 416, 388, 386, 414, 111, 190,
	419, 418, 470, 470, 25, 59, 68, 84, 116, 135,
	155, 158, -483, 283, 302, 336, 339, 352, 383, 391,
	409, 404, 2, 432, 345, 384, 184, 101, 421, 329,
	300, -82, 2, 467, 29, 28, 356, -153, 384, 200,
	2, -190, 206, 207, 2, 470, 470, 156, -464, 2,
	206, 207, 2, 200, 2, 60, 341, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 470, 470, 470, 2, -141, 353, 371, 169, 41,
	65, 26, 301, 70, 287, 102, 161, 184, 185, 214,
	81, 82, -310, 40, 207, 206, -361, 385, 340, 346,
	381, 402, 87, 422, 330, 444, 305, 306, 129, 4,
	101, 246, 355, 394, 230, 74, -489, 2, 384, -493,
	2, 402, 402, 2, -493, 2, -493, 2, -193, 2,
	402, 398, -494, 402, 441, 470, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, -158, -160,
	-159, 470, 470, 470, 470, 470, -141, 353, 2, 65,
	26, -255, -256, 413, 198, 124, 274, -157, -159, 2,
	-445, -405, 2, -336, -421, -338, 458, 459, 451, 254,
	445, -349, 107, 414, 268, -420, -339, -351, 126, 333,
	-277, 8, 9, 5, 6, 7, -198, -382, -345, 406,
	138, 258, -228, 471, 10, 467, -442, -159, -350, 34,
	164, 58, -409, -227, -384, -392, -388, -389, -497, 48,
	54, 53, 391, 245, 347, 348, 365, 349, 350, 45,
	424, 181, 265, 267, 192, 4, 199, -226, -215, -439,
	-440, -415, -416, 191, 197, 193, 364, 194, 195, 196,
	44, 308, 149, 150, 148, 117, 106, 105, 261, 50,
	49, 46, 429, -393, 103, 394, 395, 396, 397, 209,
	210, -190, -417, 68, 93, 94, 92, 97, 96, 232,
	231, 98, 95, 355, 421, 59, 33, 171, 172, 203,
	259, 173, 66, -441, 375, 89, 157, 189, 175, 202,
	204, 208, 224, 227, 247, 252, 256, 278, 280, 328,
	361, -498, 430, 136, 137, 281, 294, 379, 403, 405,
	162, 223, 61, 62, -447, 309, -448, -209, -447, 470,
	470, 472, 470, -249, -250, -251, 2, 26, 114, 467,
	2, -365, 2, -366, -370, -159, 218, -369, 467, -367,
	465, -216, 269, -443, 334, -439, -440, -198, -215, -227,
	4, -252, 467, 469, 101, 384, 69, 184, -304, 467,
	-190, 26, 268, 398, 472, -347, 467, 268, 156, 271,
	-190, 2, 2, 357, 2, 467, -111, 63, 402, 39,
	353, -323, 2, -324, -187, -188, -189, -375, 205, 299,
	307, 447, 444, -405, -477, 156, 450, 398, -405, -278,
	469, 2, -370, 171, -216, 2, -213, -408, 4, -415,
	-418, -416, -419, 68, -417, 26, 28, 29, 30, 32,
	34, 35, 36, 37, 51, 58, 59, 64, 67, 69,
	81, 87, 92, 93, 95, 94, 96, 97, 98, 107,
	109, 112, 114, 115, 119, 121, 124, 138, 140, 153,
	155, 156, 160, 163, 166, 178, 188, 198, 200, 218,
	221, 228, 231, 232, 254, 258, 264, 268, 269, 273,
	274, 291, 298, 311, 326, 344, 355, 367, 380, 384,
	392, 398, 400, 406, 413, 414, 421, 423, 431, 435,
	436, 437, 438, -420, 2, -370, 171, 2, -218, 171,
	-370, -221, 2, -413, 171, -411, 10, -410, 5, 4,
	-415, -418, -416, 2, -200, -190, 2, -212, -408, 2,
	-231, 171, -216, -217, -221, -413, 2, -97, -413, 467,
	398, 472, -268, -224, -225, -260, -190, 469, -336, 2,
	-100, 2, -336, 171, 2, -100, 171, 2, -336, 171,
	2, -100, 171, 2, 2, 2, 404, 2, 84, 171,
	-190, 384, 100, 2, 320, -482, 336, 408, 432, 2,
	2, 2, 2, 2, 2, 2, 384, -205, 2, -190,
	153, 345, -491, 309, -413, 171, 2, -413, 171, 2,
	-219, -221, -219, 184, 201, -200, 171, 2, 388, 386,
	388, 386, 156, 2, 200, 2, 200, 2, -371, 2,
	-372, -366, -216, 465, 2, 2, 2, 2, 2, 171,
	-190, 384, 100, 2, 216, 2, 2, 2, 2, 2,
	2, 2, 2, 2, -270, 171, 2, -216, -270, 171,
	2, -270, 171, 2, -232, 171, 2, -231, -200, 171,
	2, -414, 171, 2, -413, -414, 171, 2, -379, 2,
	-378, -410, 428, -82, 467, -82, 467, 353, 467, -413,
	-216, -216, -336, -100, -98, -97, 156, -336, -100, -153,
	153, 2, 101, 384, -141, 2, 153, 423, 2, 8,
	2, -413, 340, 306, 145, 2, 357, 2, 358, 65,
	-310, 444, 65, 156, 2, 156, 2, -294, 2, 438,
	-467, 2, 268, 156, 2, 156, 2, 156, 2, 156,
	2, 156, 2, 303, 354, 207, 2, -100, 435, -336,
	435, 2, 401, 215, 130, 156, -294, 2, 156, 2,
	156, 2, 5, 2, 205, 299, 372, 2, -216, -485,
	2, 384, 432, 345, 2, 2, 77, 78, 156, 2,
	156, 2, 156, 444, 2, -287, -370, -322, -323, -322,
	398, -196, -255, -256, -141, 357, 2, -164, -285, -166,
	153, -312, -313, -167, 228, 140, 264, -168, -293, 26,
	114, -293, -293, 52, 468, 468, 11, 12, 67, 38,
	458, 459, 460, 461, 151, 462, 463, 456, 457, 455,
	448, 449, 453, 211, 212, 83, 452, 450, 76, 236,
	335, 141, 142, 143, 144, 317, 182, 31, 183, 14,
	15, 16, 30, 273, 227, 445, 175, 361, 451, 17,
	18, 19, 202, 204, 256, 43, 178, -197, -233, -336,
	-336, -336, -336, -336, 280, 467, -283, -331, 465, -159,
	467, 467, 467, 5, -404, 8, -159, -336, -349, 468,
	-275, 467, -159, -349, -344, 467, 333, 465, 467, -352,
	-336, 5, 467, 469, -449, 439, -386, 467, 296, -385,
	467, -385, -385, 433, -383, 467, 446, 440, 467, -383,
	467, 467, 153, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 433, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 472, -447,
	-252, 467, -279, -373, -336, 460, -279, -279, 268, -272,
	-336, 89, -297, 208, 247, 157, 224, 328, 189, -333,
	471, -333, -360, 446, -159, -367, -215, -159, -369, 467,
	-365, -360, -83, -404, -69, -80, -88, -100, -113, -145,
	-146, 460, -216, 467, 156, 467, 469, 156, -260, -408,
	-200, -216, -226, -227, -231, 113, -272, -464, -260, -194,
	35, -346, -380, -381, -382, -391, -387, -390, -394, 48,
	54, 53, 391, 245, 347, 348, 365, 349, 350, 45,
	424, 181, 265, 267, 192, 4, 46, 429, -393, 199,
	313, 314, 312, 316, 315, 191, 197, 193, 364, 194,
	195, 196, 44, 308, 149, 150, 148, 117, 106, 105,
	261, 50, 49, 103, 394, 395, 396, 397, 209, 210,
	430, 375, 61, 62, -464, -260, 153, -407, -272, 35,
	-323, 2, 107, -411, 39, -495, 472, 226, -235, 235,
	253, 168, 269, 442, 262, -412, 5, 4, -345, -357,
	107, 230, 199, -398, -400, 8, -399, 9, -401, 458,
	459, -406, -405, 91, 469, -408, -175, 318, -174, 23,
	27, 118, 426, 131, -242, 186, 286, 126, 368, 417,
	-472, -473, 338, 389, 390, 79, 262, 318, 126, -290,
	-292, 35, 99, 249, 282, 55, 179, 240, 241, 370,
	434, 126, 318, -186, -444, 438, 126, -473, 318, -473,
	-177, 368, 417, -472, -473, 338, 318, -176, -242, 126,
	471, -470, 438, -262, -195, 88, 250, -376, -375, -414,
	-97, -268, 472, 472, -408, 460, 126, 126, 126, 126,
	2, 2, 254, 2, 2, 2, 158, -475, -483, 2,
	2, 2, -216, 171, -254, 268, -466, -269, 384, -216,
	-218, 171, 2, -221, 432, -185, -186, 254, -470, 438,
	254, 35, 467, 2, -202, 171, 2, -191, -190, 184,
	-444, 254, -371, -229, -216, -366, -229, 356, -209, 35,
	-333, -333, 126, 2, 2, 2, -190, -178, 472, 57,
	324, 126, -178, 126, -178, 126, -178, 472, 126, -178,
	126, 472, 126, 126, 468, 472, -379, -379, -413, -151,
	438, 156, 87, 467, 467, -153, -376, 472, -98, -413,
	-466, -200, 2, -216, 2, 384, 209, -151, -413, -413,
	-413, -407, 26, 358, 2, 303, 354, 78, 358, 2,
	-216, 384, 101, 184, 71, -468, 153, -465, 329, -464,
	-216, 101, -216, 101, -216, 101, -216, -216, 2, 2,
	2, 2, 75, 75, 153, 2, 401, 2, 401, 2,
	-190, -190, -190, 226, -216, 153, 384, 184, 384, 184,
	101, 384, -178, 472, -196, -164, -285, -407, -286, -285,
	-165, -164, -167, 153, 307, 418, 249, 359, 213, -313,
	-312, 26, -336, -317, 147, 248, -336, -315, -338, 458,
	459, -399, -401, -271, 262, -158, -158, -158, -257, -362,
	-336, 298, 184, -395, -380, -380, -214, -408, 394, -336,
	-336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
	-336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
	-336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
	-336, -336, -336, -336, 227, 175, 361, 43, 178, -336,
	398, -336, -336, -336, -336, 244, 254, 258, 406, 138,
	415, 114, 262, -499, 380, 37, -342, -159, -276, 467,
	-356, 32, 367, 26, -349, 467, 2, -331, -336, -332,
	-273, -272, -272, 468, 431, 26, 114, 460, 2, 468,
	472, 35, 468, -336, -273, -348, -344, -272, -355, -354,
	435, -305, -306, 443, 243, 104, 170, 242, -307, 343,
	-402, 8, -408, 460, -450, 146, 163, 8, -402, -402,
	394, 394, -402, -402, -402, 467, 468, 2, 468, 2,
	468, -336, 2, 468, -336, 2, 468, -336, 2, 468,
	-336, 2, 468, 2, -336, -336, -336, -336, -336, -336,
	-336, -272, -299, 2, -396, -272, 4, 443, 243, 104,
	170, 242, 343, 5, -299, 2, -300, 2, -336, -272,
	-301, -337, -338, 458, 459, 451, -349, -302, 2, -336,
	-273, -336, 51, 221, 400, -303, -336, 156, -272, -272,
	2, -272, 2, -448, 35, -272, -264, 472, 156, 35,
	4, -264, -264, 467, 468, 472, -298, 167, 239, 234,
	-298, -365, -297, 208, -295, 278, -295, -295, -360, -201,
	465, 473, -408, -360, -359, -358, 35, -209, 275, -360,
	-360, 469, 468, -359, 466, -462, 467, 470, 470, 470,
	470, 470, -216, 467, -272, -408, 373, 468, 469, 202,
	202, 202, 202, 334, 468, 398, 438, -82, 270, 468,
	472, -263, 34, 465, -397, 433, 467, 467, -306, 467,
	156, -261, -477, 468, 402, -324, -234, 307, 366, 319,
	351, 382, 8, 9, 8, 9, 472, -408, 472, -478,
	81, 398, 69, -327, 171, 69, -422, -203, 81, -423,
	-190, 64, 414, 298, 155, -478, 81, 298, -478, 81,
	81, 356, 371, 52, -370, 38, 38, 26, -100, 222,
	156, 444, 384, 184, 398, -370, -292, -380, 99, 240,
	241, 52, -403, -398, 458, 459, -403, 52, -403, -403,
	-403, 438, -218, -370, 398, 288, -413, 398, 472, 38,
	38, 26, -100, 222, 156, 398, -231, -201, -470, -262,
	-148, 180, 468, -376, -224, -190, 469, -336, -100, -336,
	-100, 126, 2, -491, 216, 467, -238, 254, 156, -260,
	-377, 200, 472, -269, -291, -290, 254, -220, 171, 2,
	-216, 126, -470, 126, 467, 122, 305, 2, 268, 254,
	-202, 171, -181, 387, 126, -289, 423, -318, -100, 467,
	107, 35, -318, -280, -281, -374, -282, -203, 467, -209,
	-190, 2, -216, -270, -270, -270, -231, -232, -200, -413,
	-414, -414, -82, -378, 468, 468, 468, -150, 272, -149,
	-190, 5, -153, 423, -237, -328, -327, -426, -427, -422,
	227, 184, 414, 201, 139, -253, -204, -203, 100, -151,
	-97, -376, -151, -151, -376, -376, -216, 153, -151, -151,
	-151, 2, 2, -294, -216, -200, -231, -216, -260, -260,
	-294, -200, -294, -200, -294, -200, -100, -336, 353, 153,
	153, 469, -294, 305, 101, 384, 286, 184, -216, -231,
	-216, -231, -200, -216, -370, -286, -165, 269, 213, 359,
	-315, -316, -338, 333, 334, -316, 333, 334, 8, 9,
	8, 9, -169, 363, 257, -270, 472, -172, 36, 112,
	213, -216, 444, 123, -336, -336, 398, -499, 380, -342,
	123, -336, 244, 258, 406, 138, 415, 114, 262, 156,
	467, -337, -337, 468, -274, -336, -336, 466, 475, 468,
	-256, 472, -255, -336, -272, -272, 468, 469, -272, -260,
	466, 466, 472, 468, -353, -354, 119, -336, 398, 398,
	398, 398, 467, 468, 469, -455, 279, 467, 467, 468,
	468, 472, 468, 444, 444, 468, 468, 468, -336, 468,
	468, 468, 468, 35, 472, 472, 472, 468, 472, 472,
	472, 468, 468, 156, 468, 468, -308, 291, 468, 11,
	12, 458, 459, 460, 461, 151, 462, 463, 456, 457,
	455, 448, 449, 450, 76, 236, 335, 14, 15, 16,
	202, 178, -337, -337, -337, 468, -340, -341, 156, 153,
	35, -303, -303, -303, 468, 156, -272, 468, 468, 467,
	468, -330, -329, 436, -373, -265, 2, -365, -211, -408,
	-330, -330, -272, -336, 208, 208, -296, 423, 268, -298,
	-365, -359, -404, -335, -334, 154, 36, 112, 251, 174,
	-359, -209, -252, -359, -359, -408, -360, -360, -358, 468,
	-463, -404, 468, -266, -368, -443, -256, 469, -151, -408,
	-142, 5, 258, -142, -142, -142, -260, 24, 292, -380,
	465, 466, 8, 467, -402, -402, -402, -260, 156, -405,
	-323, 412, 73, 307, 394, -405, -174, 318, -203, -203,
	-216, 254, -327, 171, -180, 254, -380, -210, -190, 467,
	467, 213, 213, -203, -210, 213, 171, -203, 171, -210,
	-210, -471, 307, 263, -336, 229, 305, 255, -175, 318,
	-100, -100, -100, 467, -477, 423, 113, -216, -231, -216,
	-220, 318, 252, -226, -403, -403, -290, 318, -218, -413,
	258, -186, -200, -176, -100, -100, -100, 467, -201, -177,
	318, -151, 156, -148, 460, -190, 432, -190, -236, -239,
	-237, -203, -156, 440, 438, 126, -230, -216, 465, -151,
	-413, -216, 126, -252, 254, -413, -413, 2, 467, 2,
	-216, 126, 268, 254, -182, 120, -496, 450, -200, -330,
	-265, -288, -321, 326, 268, -253, 428, -209, -288, -267,
	472, 156, 450, 469, -253, 2, -178, -178, -178, -178,
	-178, -82, -82, -151, 472, 467, 450, 450, 467, -413,
	-413, 468, 472, -216, -202, 184, 184, -208, -191, 468,
	472, 469, 467, -151, 156, -47, 438, 384, 471, -294,
	-294, -294, 353, 353, -190, -212, -200, -216, -213, -231,
	153, 153, 418, -316, 269, 233, -362, -173, 260, -216,
	471, -336, -336, 123, 123, -336, -337, -337, -336, 123,
	156, 467, -336, -346, 30, 30, 468, 472, -332, -336,
	468, 431, -256, -256, 468, 460, -408, 468, -344, 121,
	-336, 392, 243, 170, 242, -307, 242, -307, -307, -402,
	5, -408, 460, -456, -206, 467, -190, 436, -255, -402,
	-383, -383, 468, -395, -380, -336, -336, -336, -336, -336,
	-336, -340, -336, -395, -380, -337, -337, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -337, 114, 254, 262, -337, -341, -340,
	-336, -336, -380, 468, 468, 468, -272, -82, -284, 163,
	-336, -376, 472, -284, -284, 468, -365, -365, 467, -336,
	208, 466, 472, 474, 450, -252, 469, -358, -359, 466,
	468, 472, 468, 472, -320, 35, 468, -408, 271, 5,
	8, 465, 466, -402, 468, 468, 468, -260, -336, 398,
	398, 126, 254, 425, -428, -423, -336, -258, -363, -336,
	467, 467, -171, 118, 356, -479, 2, 423, 126, -178,
	126, -178, 442, 467, 467, 398, 438, -272, -336, -152,
	107, -407, -473, 471, -473, 471, 398, 398, 438, -272,
	398, -414, -151, 2, 2, 2, 468, 468, 472, -429,
	35, 266, 467, 266, -216, -65, 438, -375, -404, -218,
	35, 126, -185, -470, 438, 2, -311, 423, -201, -216,
	126, -183, 220, -496, -411, -444, -256, -288, -279, 255,
	80, 468, -330, -281, -265, -336, 2, 468, -149, -150,
	-413, -413, -413, -151, -153, -153, -328, 2, 467, -202,
	-191, 467, -153, -204, 2, -414, -100, 272, -216, 460,
	-294, -244, -243, 286, 262, -244, 333, 333, 269, 147,
	217, -172, -201, -336, -336, 123, 30, 30, -336, -336,
	-346, 468, -336, -336, -272, 466, 5, -336, 468, 468,
	-336, 468, 469, -457, -190, -336, 468, 468, 468, 468,
	472, 472, 468, 468, 468, 468, -341, 156, 114, 262,
	467, 468, 468, -343, 166, 52, -365, -343, -343, -296,
	-260, -365, -334, -201, 465, -408, -404, -368, 467, 469,
	466, 2, 465, 468, -203, -203, -327, 126, -430, 81,
	-432, 67, 139, 87, 254, 258, 414, 298, 64, 107,
	311, 35, 468, 468, 472, -172, -258, -260, 254, 377,
	107, 254, 107, 100, 409, 70, -203, -210, -260, -260,
	-216, 132, 468, 472, 450, 2, 460, 460, -220, -218,
	132, 468, -201, -240, 187, -203, -427, -424, -425, 298,
	-431, -433, 139, 298, -100, -155, -154, -190, 5, 2,
	467, -238, 272, 466, -291, -100, -220, -470, 467, -190,
	268, 467, -201, -184, 219, -496, -411, -181, -314, -312,
	-319, 467, 268, -100, -256, 450, 468, 468, 100, 100,
	-258, 467, 467, -260, 100, 468, -48, -49, 184, 81,
	290, -213, 384, 184, 467, 467, -172, -336, -336, -336,
	468, -256, -408, 460, -451, 286, 468, -336, -336, -337,
	156, 467, -346, -452, 437, -336, -272, -452, -452, 468,
	-404, 2, 465, 2, -327, -210, -214, -207, -190, 139,
	171, 258, 213, 467, -337, -216, 467, 2, -487, 109,
	188, -326, -488, 86, 378, -363, -173, 468, 468, 258,
	258, -336, -380, 467, -178, -178, 468, 468, -336, 398,
	-407, 85, -405, 2, -473, -336, 398, -241, -242, 178,
	-429, 213, -207, 213, -486, 438, 468, 472, 450, 450,
	-236, -156, -66, -67, 399, -375, -252, -258, -216, -258,
	268, -496, -411, -182, -288, 115, -260, 81, -314, -342,
	-151, 467, 467, 468, -258, -258, 468, 467, -151, 472,
	26, 467, 26, 467, -216, -231, -272, -272, 468, -256,
	52, 468, 468, -337, -346, 468, -453, -454, -206, 466,
	2, -432, -207, 254, 423, -336, -192, 467, -336, 188,
	110, 176, -240, 467, -325, 423, 311, -199, 67, -258,
	467, 467, 467, 450, 156, 467, -156, 284, 467, 100,
	249, -154, -339, -339, 468, 35, -67, 9, 35, 468,
	-311, 468, -216, -411, -183, 418, 255, 468, -210, -288,
	-414, -414, -325, 468, 468, -414, -49, -260, -260, 468,
	468, -458, 305, 334, 165, -272, 468, 472, 35, 126,
	167, 468, -434, 237, -190, 468, 110, 176, -241, -260,
	167, -216, -474, 423, -214, 468, -246, -245, -243, -248,
	-247, -243, -272, -405, 85, 284, -272, -216, -259, -364,
	-203, 100, -240, -100, -100, -325, 467, -326, 467, -184,
	356, -329, 468, 468, -326, -325, 468, 468, 468, 468,
	-459, -460, 43, 411, 91, -336, -459, -459, -454, -456,
	139, 438, -435, -438, -437, 268, 362, 157, 285, 468,
	377, 434, -487, 468, 438, -252, -336, -325, 468, 472,
	428, 468, 472, 428, 468, 156, 468, 467, 468, 472,
	-241, -486, -326, -258, -240, -258, -280, -151, -151, -240,
	-326, -151, -461, 125, -460, 295, 152, 333, 295, 152,
	-461, -461, -207, 47, -437, 268, -438, 268, 418, 111,
	47, -434, -240, -245, 178, -247, 156, 284, -260, -364,
	-156, -240, 468, -241, 468, -330, -241, -240, 91, 163,
	393, 249, 30, 450, -436, 249, 324, 57, 356, -436,
	450, -435, 467, 467, 468, -241, -325, -492, 436, -326,
	-241, 333, 276, -460, -336, 22, 258, 107, -336, -487,
	-272, -272, -179, 57, 324, -492, -326, 2, -240, 468,
	468, -240, -241, -241, 398, -241, -492, 467, -492, -272,
	468, -241,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 372, 373, 375,
	376, 377, 379, 380, 382, 384, 386, 388, 389, 391,
	393, 395, 396, 397, 398, 399, 401, 403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 461, 463,
	0, 958, 960, 962, 964, 25, 26, 28, 0, 0,
	193, 195, 197, 0, 222, 224, 226, 227, 229, -2,
	0, 324, 325, 327, 329, -2, -2, 0, 0, 450,
	452, 0, 0, 0, 472, 473, 0, 1049, -2, 466,
	468, 470, 535, 537, 539, 541, 543, 545, 547, 548,
	550, 552, 554, 556, 558, 560, 562, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, 585, -2,
	-2, -2, 0, -2, -2, -2, 976, 30, 32, 34,
	36, 38, 40, 42, 62, 278, 279, 281, 283, 285,
	288, 289, 291, 1104, 331, 333, 335, 337, 339, 0,
	-2, 1116, 0, 0, 44, 45, 46, 47, 48, 49,
	50, 51, 69, 70, 71, 72, 73, 74, 75, 76,
	55, 57, 58, 64, 65, 67, 53, 0, 0, 1080,
	1082, 1084, 1086, -2, 0, 0, 7, 9, 11, 13,
	15, 17, 19, 21, 374, 378, 381, 383, 385, 387,
	390, 392, 394, 400, 402, 404, 840, 1738, 1752, 1753,
	1754, 1757, 1758, 1759, 1760, 1761, 1762, 2108, 2188, 2189,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 0,
	428, 426, 1732, 429, 1939, 431, 433, 318, 319, 320,
	321, 322, 323, 0, 443, 437, 442, 444, 446, 447,
	448, 449, 423, 421, 0, 443, 1784, 441, 956, 957,
	951, 952, 1973, 986, 462, -2, -2, -2, 2076, -2,
	494, -2, 501, 2079, 1975, 506, 0, 508, -2, 511,
	959, 961, 963, 27, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 899, 0, 0, 157, -2,
	-2, -2, -2, 0, 0, 1823, 1700, 1754, 1703, 1698,
	194, 196, 198, 199, 0, 0, 0, 0, 0, 0,
	223, 225, 228, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 751, 743, 744, 926, 0, 0,
	0, 0, 326, 328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 0, 0, 0,
	256, 364, 365, 0, 1105, 1105, 0, 0, 0, 0,
	174, 165, 0, 0, 727, 451, 453, 0, 0, 160,
	0, 0, 955, 0, 176, 0, 0, 467, 469, 471,
	536, 538, 540, 542, 544, 546, 549, 551, 553, 555,
	557, 559, 561, 564, 566, 568, 570, 572, 574, 576,
	578, 580, 582, 584, 586, 587, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 0,
	0, 0, 0, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 0, 0, 590,
	592, 593, 594, 0, 645, 662, 0, 880, 1106, 988,
	966, 979, 988, 968, 969, 970, 971, 972, 977, 978,
	981, 0, 973, 974, 975, 31, 33, 35, 37, 39,
	41, 43, 280, 282, 284, 286, 290, 292, -2, 1078,
	1079, 332, 334, 336, 338, 340, 454, 0, 456, 0,
	591, -2, 0, 1110, 1110, 1110, 0, 0, 1079, 1077,
	0, 459, 460, 515, 516, 1348, 0, 0, 0, 0,
	0, 1597, 1432, 0, 517, -2, 1463, 1465, 2055, 2076,
	1596, 1467, 1468, 1469, 1470, 1471, 0, 0, 1474, 1475,
	1476, 1477, 1478, 0, 1480, 0, 1484, 1485, 1486, 0,
	2060, 1677, 1750, -2, 1251, 1252, 1253, 1254, 1255, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 2066, 1746, 0, 1563,
	1500, -2, 1771, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1832, -2, -2, -2, -2,
	-2, -2, -2, 1307, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 2090, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 0, 2044, 2061, 2062, 2067,
	2069, 2063, 2052, 1525, -2, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 1308, -2, 2056, 2057, 2072, 2073, 2078, 2083, 2084,
	2059, 2068, -2, -2, 1096, 1948, 1099, 840, 1097, 1081,
	1083, 0, 1085, 0, 0, 0, 1090, 1113, 1111, 0,
	1152, 1094, 1095, 1170, 1170, 1194, 0, 1175, 0, 1194,
	1105, 1220, 0, 1181, 1968, 1501, 1502, 0, 1754, 1751,
	-2, 0, 0, 0, 0, 0, 0, 0, 424, 0,
	430, 432, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 464, 465, 0, 489, 0, 493, 2051, -2, 1789,
	1988, -2, 497, 989, 993, 994, 995, 996, 0, 0,
	0, 0, 0, 503, 0, 0, 490, 491, 509, 512,
	0, 52, 0, 2061, 1220, 54, 0, 1722, 1776, 1777,
	1778, 1779, 1780, 2090, 2107, 2109, 2110, 2111, 2112, 2113,
	2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123,
	2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133,
	2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
	2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
	2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163,
	2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173,
	2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
	2184, 2185, 2186, 2187, 56, 0, 2061, 59, 0, 2061,
	0, -2, 63, 1103, 2061, 177, 178, 1767, 1768, 1772,
	1773, 1774, 1775, 66, 0, 1728, 68, 0, 1725, 77,
	0, 2061, 0, 1697, -2, 0, 897, 1207, 161, 0,
	0, 0, 719, 1694, 1699, 720, 1704, 0, 200, 201,
	202, 203, 204, 2061, 206, 207, 0, 209, 210, 2061,
	212, 213, 0, 215, 231, 232, 0, 234, 0, 2061,
	0, 0, 0, 240, -2, 257, 0, 254, 0, 244,
	245, 247, 248, 249, 250, 251, 0, 296, 294, 1733,
	0, 0, 0, 910, -2, 2061, 883, 888, 2061, 894,
	915, 1736, 0, -2, 0, 1103, 2061, 1003, 747, 748,
	749, 750, 0, 315, 0, 1016, 0, 1018, 0, 1039,
	1226, 1170, 1170, 0, 258, 259, 260, 261, 262, 2061,
	0, 0, 0, 267, 0, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 152, 2061, 343, 362, 152, 2061,
	346, 152, 2061, 349, 152, 2061, 352, 1692, 152, 2061,
	355, 356, 2061, 358, 179, 359, 2061, 361, 0, -2,
	417, 1740, -2, 367, 0, 368, 0, -2, 0, 191,
	0, 0, 725, 726, 1207, 163, 0, 953, 954, 0,
	0, 474, 0, 0, 588, 589, 0, 0, 599, 600,
	601, 191, 1976, 1946, 1848, 606, 0, 609, 612, -2,
	0, 0, 0, 0, 616, 0, 621, 622, 623, 0,
	724, 625, 0, 0, 627, 0, 631, 0, 634, 0,
	636, 0, 638, -2, -2, -2, 649, -2, 0, 653,
	0, 655, 0, 0, 0, 0, 670, 671, 0, 676,
	0, 679, 680, 681, 0, 683, 684, 685, 686, 0,
	688, 689, -2, -2, 693, 695, 0, 702, 0, 706,
	0, 710, 0, 595, 596, 152, 1224, 965, -2, 967,
	0, 983, -2, 0, 455, 0, 458, 1131, 1064, 1061,
	0, 1128, 1129, 1065, 0, 0, 0, 1072, 0, 1108,
	1109, 0, 0, 0, 1051, 1052, 0, 0, 0, 0,
	1602, 1603, 1604, 1605, 1606, 1607, 1610, 1611, 1608, 1609,
	1612, 1613, 0, 0, 0, 0, 0, 1614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1615,
	1616, 1617, 0, 0, 1619, 0, 1621, 0, 0, 0,
	0, 0, 0, 1411, 1413, 1685, 0, 0, 1618, 1353,
	1354, 1355, 1390, 1391, 0, 0, 1464, 1682, 1681, 1466,
	0, 1633, 0, 1473, 1479, 1718, -2, 0, 1597, 1628,
	0, 0, 1487, 1488, 1489, 0, 0, 1633, 0, 0,
	1676, 1345, 0, 0, 1565, 0, 1287, 0, 1288, 1289,
	0, 1290, 1291, 1304, 1317, 0, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1309, 0,
	0, 0, 1657, -2, 0, 0, 0, 0, 0, 1098,
	0, 0, 1156, 1686, 1690, 1691, 1156, 1156, 0, 0,
	1634, 1217, 1217, 0, 0, 1213, 1213, 1213, 1211, 1194,
	0, 1194, 1204, 0, 1194, 1194, 0, -2, 1175, 0,
	0, 1204, 0, 1188, 405, 407, 409, 411, 412, 413,
	415, 1221, 1222, 0, 0, 0, 0, 0, 0, 1755,
	0, 0, 0, 1742, 0, 0, 0, 0, 435, 445,
	1105, 0, 1636, 1243, 1246, 1247, 1248, 1249, 1250, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, -2, 1305, 1307, 1328,
	1294, 1295, 1296, 1297, 1298, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1300, 0, 1275, 1275,
	1275, 1292, 1293, 1316, 1327, 1319, 1327, 1323, 1244, 1245,
	1310, 1311, 1312, 1313, 0, 439, 0, 0, 0, 0,
	-2, 499, 504, 505, 0, 0, 991, 0, 997, 526,
	527, 528, 999, 1000, 0, 502, 529, 530, 531, 532,
	533, 534, 0, 1706, 1707, 1708, 1709, 1712, 1713, 0,
	0, 500, 519, 507, 0, 513, 78, 948, 117, 0,
	948, 948, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 102, 113, 90, 91, 0, 0, 0, 0, 60,
	862, 0, 865, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 937, 0, 1102, 0, 101, 0, 96,
	80, 0, 0, 0, 103, 115, 0, 143, 145, 0,
	0, 895, 0, 906, 907, 904, 905, 182, 1206, 0,
	1207, 718, 0, 0, 1755, 1702, 0, 0, 0, 0,
	233, 235, 0, 237, 238, 239, 0, 909, 0, 246,
	243, 287, 812, 2061, 0, 0, 313, 308, 0, 310,
	861, 2061, 859, 1737, 0, 881, 884, 0, 890, 0,
	0, 0, 0, 916, 0, 2061, 921, 1724, 1763, 1764,
	1005, 0, 317, 0, 1019, 1021, 0, 0, 1227, 0,
	1229, 1230, 0, 264, 265, 266, 0, 341, 0, 150,
	151, 0, 344, 0, 347, 0, 350, 0, 0, 353,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 0, 191, 0, 1207, 191,
	191, 1207, 476, 1207, 478, 0, 0, 602, 191, 191,
	191, 607, 608, 610, 611, -2, -2, 703, 613, 614,
	673, 0, 0, 0, 672, 624, 0, 712, 1964, 722,
	673, 1823, 673, 1823, 673, 1823, 635, 637, 640, 665,
	648, 652, 0, 0, 0, 657, 0, 659, 0, 661,
	673, 674, 677, 682, 687, 0, 0, 0, 0, 0,
	0, 0, 879, 0, 982, 1131, 1064, 457, 1055, 1130,
	1056, 1063, 1066, 0, 0, 1068, 0, 1070, 0, 1126,
	1127, 1134, 1135, 0, 1145, 1146, 1138, 0, -2, 0,
	0, 1141, 1142, 1074, 0, 1091, 1092, 1093, 1117, 1118,
	935, 0, 2188, 1349, 1238, 1350, 1351, 1721, 0, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, -2,
	-2, -2, -2, -2, -2, -2, -2, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, -2, -2,
	-2, 1388, 1389, -2, 1620, 1622, 0, 1685, 0, -2,
	0, -2, -2, -2, -2, 1408, 0, 1410, 1415, 1417,
	1419, 0, 0, 0, 0, 1684, 1429, 1668, 1669, 0,
	0, 1599, 1600, 1601, 1414, 0, 1433, 1683, 1680, 0,
	0, 1632, 1116, 1491, 0, 0, 0, 0, 1498, 1483,
	1630, 0, 1629, 0, 0, 0, 1640, 0, 1675, 1671,
	0, 1719, 1344, 1331, 1332, 1333, 1334, 1335, 1336, 1346,
	0, 1716, 1743, 1749, 1573, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1526, 1527, 1528, 1529,
	1530, 0, 1532, 1533, 0, 1535, 1536, 0, 1538, 1539,
	0, 1541, 1542, 1543, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1545, 0, 1643, -2, -2, -2, -2,
	-2, -2, -2, -2, 0, 1547, 0, 1549, 1634, 1654,
	0, 0, 1434, 0, 0, 0, 1597, 0, 1552, 1634,
	1662, 0, 0, 0, 0, 0, 1634, 0, 1667, 0,
	1559, 0, 1561, 1100, 0, 0, 1233, 0, 0, 0,
	1689, 1233, 1233, 0, 1151, 0, 0, 1214, 1215, 1216,
	0, 0, 1217, 0, 1208, 1212, 1209, 1210, 1204, 1167,
	0, 0, 1723, 1204, 1173, 1203, 0, 840, 1193, 1204,
	1204, 0, -2, 1177, 1194, 0, 0, 406, 408, 410,
	414, 416, 0, 0, 1116, -2, 191, 839, 0, 0,
	0, 0, 0, 425, 427, 0, 0, 419, 0, 422,
	0, 1234, 1237, 0, 0, -2, 0, 0, 1329, 0,
	0, 0, 0, 492, 0, 990, 998, 0, 523, 0,
	525, 0, 1710, 1714, 1711, 1715, 0, 514, 0, 0,
	0, 0, 947, 121, 2061, 0, 154, 0, 0, 806,
	1729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 92, 0,
	0, 0, 0, 0, 0, 0, 863, 864, 866, 873,
	875, 0, 869, 1717, 0, 0, 870, 0, 872, 874,
	876, 0, 0, 0, 0, 0, 1103, 0, 0, 0,
	0, 89, 93, 0, 0, 0, 0, 1696, 896, 908,
	191, 0, 162, 182, 1695, 1705, 0, 205, 208, 211,
	214, 0, 241, 0, 0, 753, 730, 0, 0, 295,
	191, 0, 0, 309, 857, 860, 0, 840, 2061, 903,
	1735, 0, 891, 0, 0, 0, 0, 914, 0, 0,
	0, 2061, 1007, 1013, 0, 1233, 0, 1037, 1022, 0,
	0, 0, 1037, 1041, 1042, 1044, 1045, 0, 0, 1228,
	0, 268, 363, 152, 152, 152, 1693, 152, 152, 180,
	357, 360, 366, 418, 1105, 1105, 191, 189, 1924, 187,
	184, 186, 0, 0, 0, 754, 756, 757, 758, 759,
	0, 1764, 0, 1877, 1764, 0, 1025, 1027, 0, 158,
	164, 191, 0, 307, 475, 480, 597, 0, 603, 604,
	605, 642, 667, 615, 617, 618, 619, 0, 723, 721,
	626, 673, 629, 673, 632, 673, 651, 654, 656, 0,
	0, 0, 669, 0, 0, 0, 0, 0, 0, 0,
	707, 708, 709, 711, 1225, 1059, 1060, 1062, 0, 1071,
	0, 0, 1140, -2, -2, 1139, 1143, 1144, -2, -2,
	-2, -2, 1067, 0, 1076, 1073, 0, 1125, 933, 934,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1430,
	0, -2, 1409, 1412, 1416, 1418, 1420, 0, 0, 0,
	0, 0, 0, 1623, 0, 1625, 1431, 1678, 1681, 1595,
	0, 0, 1115, 1116, 1116, 0, 1497, 0, 1631, 0,
	1638, 1639, 0, 1490, 0, 1672, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 1299,
	1273, 0, 1327, 1325, 1326, 1320, 1327, 1324, 0, 1531,
	1534, 1537, 1540, 0, 0, 0, 0, 1520, 0, 0,
	0, 1524, 1544, 0, 1546, 1548, 0, 0, 1550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1437, 1438, 1439, 1551, 1660, 1661, 0, 0,
	0, 0, 0, 0, 1557, 0, 1666, 1558, 1560, 1105,
	1153, 1148, 1232, 0, 1687, 1207, 1155, 1157, 1688, 1726,
	1148, 1148, 0, 1635, 0, 0, 1198, 0, 0, 0,
	1200, 1171, 0, 0, 1165, 0, 1161, 1162, 1163, 1164,
	1172, 840, 1202, 1174, 1178, 1743, 0, 1204, 0, 1189,
	0, 1191, 1223, 0, 1183, 1186, 0, 0, 192, 1756,
	216, 220, 221, 217, 218, 219, 434, 0, 0, 1637,
	0, 1239, 0, 0, 0, 0, 0, 438, 0, 488,
	-2, 521, 522, 524, 0, 520, 118, 948, 0, 0,
	939, 0, 123, 2061, 132, 0, 782, 0, 1727, 0,
	0, 0, 0, 950, 0, 0, 2061, 152, 2061, 152,
	135, 138, 0, 142, 140, 0, 0, 773, 79, 948,
	82, 86, 94, 0, 0, 0, 100, 0, 0, 0,
	941, 0, 867, 868, 871, 877, 61, 0, 943, 886,
	887, 938, 936, 144, 84, 88, 95, 0, 945, 81,
	0, 155, 0, 191, 1701, 0, 0, 0, 0, 0,
	752, 823, 0, 0, 0, 0, 301, 297, 0, 306,
	312, 311, 0, 0, 0, -2, 889, 911, 0, 913,
	925, 0, 0, 0, 1009, 1013, 0, 1012, 1103, 1116,
	316, 1014, 1037, 0, 0, 0, 1024, 1020, 1017, 1233,
	0, 0, 0, 0, 0, 263, 342, 345, 348, 351,
	354, 369, 370, 166, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 1764, 1764, 0, 1731, 0,
	0, 0, 0, 159, 0, 477, 0, 0, 0, 628,
	630, 633, 658, 660, 673, 696, 697, 768, 0, 768,
	0, 0, 1069, 0, 1137, 1075, 1119, 1120, 0, 935,
	0, 1352, 1393, 0, 0, -2, 0, 0, 1397, 0,
	0, 0, -2, 0, 0, 0, 1624, 1626, 0, 1680,
	1492, 0, 0, 0, 1496, 1481, 1482, 1598, 1641, 1670,
	1674, 0, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 0,
	1720, 1744, 1748, 1571, 1572, 1576, 1734, 0, 0, 0,
	1318, 1322, 1503, 0, 0, 0, 0, 0, 0, 0,
	1642, 1653, 1655, 1435, 1436, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, -2, -2, -2, 1453, 1454,
	1455, -2, -2, -2, 0, 0, 0, 1656, 1658, 1659,
	1663, 1664, 0, 1554, 1555, 1556, 1665, 0, 1150, 0,
	1231, 1154, 0, 1150, 1150, 1112, 1196, 0, 0, 1219,
	0, 1168, 0, 1169, 0, 1201, 0, 1176, 1179, 1180,
	1190, 0, 1182, 0, 1185, 0, 1492, -2, 436, 420,
	0, 0, 1241, 0, 1302, 1306, 1330, 440, 1205, 0,
	0, 0, 0, 153, 780, 805, 0, 0, 928, 935,
	0, 0, 125, 0, 0, 0, 133, 0, 0, 130,
	0, 137, 141, 0, 0, 0, 0, 0, 97, 98,
	99, 0, 104, 0, 105, 0, 0, 0, 0, 0,
	0, 181, 156, 236, 902, 242, 762, 811, 0, 813,
	0, 731, 0, 0, 812, 293, 0, 300, 0, 861,
	0, 0, 882, 892, 0, 912, 0, 0, 0, 0,
	0, 1011, 1013, 0, 1004, 1005, 1133, 1015, 1035, -2,
	1034, 0, 1116, 1043, 1040, 1046, 1047, 0, 188, 0,
	183, 185, 0, 169, 0, 0, 755, 760, 0, 0,
	0, 0, 0, 1026, 1028, 0, 175, 0, 598, 620,
	668, 698, 767, 0, 0, 700, 0, 0, 1136, 1123,
	1124, 1121, 935, 1395, 1399, 0, 0, 0, 1401, -2,
	0, 1423, -2, -2, 1627, 1679, 1472, 1116, 1493, 1495,
	1673, 1347, 0, 1578, 1575, 0, 1562, 1274, 1515, 1516,
	0, 0, 1519, 1521, 1522, 1523, 1652, 0, 0, 0,
	0, 1553, 1101, 1567, 0, 0, 1158, 1567, 1567, 1197,
	0, 1199, 1166, 1159, 0, 1744, 1192, 1184, 0, 0,
	1235, 1240, 0, 1301, 119, 120, 122, 0, 781, 0,
	784, 0, 0, 0, 0, 791, 792, 0, 0, 0,
	0, 0, 827, 836, 0, 1125, 0, 0, 0, 127,
	147, 0, 0, 949, 0, 0, 152, 152, 0, 0,
	940, 0, 0, 0, 0, 107, 0, 0, 942, 944,
	0, 0, 946, 770, 0, 823, 815, 816, 817, 0,
	822, 824, 0, 0, 740, 0, 736, 0, 0, 733,
	753, 730, 0, 298, 858, 900, 840, 893, 0, 924,
	0, 0, 0, 1001, 1013, 0, 1006, 1007, 1037, 1132,
	0, 0, 0, 1023, 1133, 0, 190, 191, 0, 0,
	0, 0, 0, 0, 0, 191, 479, 481, 0, 0,
	487, 766, 0, 0, 0, 0, 1122, 1403, -2, -2,
	1424, 0, 1745, 1747, 1116, 0, 1564, 0, 0, -2,
	0, 0, 0, 1087, 0, 1149, 1147, 1088, 1089, 1218,
	0, 1187, 0, 1242, 124, 0, 785, 786, 1730, 788,
	0, 790, 793, 0, 796, 1766, 0, 800, 807, 828,
	0, 762, 0, 833, 834, 929, 930, 838, 0, 126,
	128, 146, 932, 0, 129, 136, 0, 0, 83, 0,
	0, 1816, 110, 108, 106, 85, 0, 730, 769, 0,
	814, 0, 825, 826, 738, 0, 732, 0, 0, 0,
	0, 0, 299, 302, 0, 305, 0, 0, 925, 0,
	0, 0, 1008, 1009, 314, 0, 0, 0, 1037, 1048,
	168, 0, 0, 838, 0, 0, 804, 0, 173, 0,
	483, 0, 485, 0, 699, 701, 0, 0, 1494, 1582,
	0, 1517, 1518, -2, 0, 1461, 1566, 1568, 0, 1160,
	1236, 783, 787, 0, 0, 0, 844, 0, 0, 0,
	831, 832, 770, 0, 809, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 741,
	0, 737, 734, 735, 762, 0, 303, 304, 0, 838,
	0, 836, 0, 1010, 1011, 0, 1030, 1031, 1033, 1038,
	0, 0, 836, 838, 803, 0, 482, 0, 0, 704,
	705, 0, 0, 0, 0, 1577, 1462, 0, 0, 0,
	0, 795, 849, 0, 0, 0, 829, 830, 827, 0,
	0, 840, 131, 0, 931, 838, 0, 774, 0, 0,
	777, 0, 0, 111, 1816, 109, 0, 0, 0, 819,
	821, 742, 770, 740, 901, 836, 0, 762, 0, 1002,
	0, 1032, 191, 191, 762, 836, 191, 484, 486, 1574,
	1594, 1583, -2, 2024, 1820, 0, 1594, 1594, 1569, 1570,
	0, 0, 797, 845, 846, 0, 841, 842, 843, 1765,
	798, 799, 808, 835, 0, 844, 148, 762, 771, 0,
	0, 772, 0, 0, 114, 0, 116, 0, 818, 0,
	730, 739, 762, 0, 770, 0, 1233, 170, 171, 770,
	762, 172, 1579, 0, 0, 1585, 1586, 1587, 1588, 1589,
	1580, 1581, 789, 0, 847, 0, 848, 0, 0, 0,
	0, 849, 134, 775, 0, 778, 0, 112, 0, 820,
	729, 770, 838, 922, 836, 1029, 801, 770, 0, 1591,
	1592, 0, 0, 0, 850, 0, 853, 854, 0, 851,
	0, 827, 0, 0, 765, 922, 836, 919, 0, 762,
	802, 1590, 1593, 1584, 794, 852, 855, 856, 837, 810,
	0, 0, 761, 763, 764, 917, 762, 923, 770, 770,
	0, 770, 922, 776, 0, 922, 920, 0, 918, 0,
	770, 779,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 456, 3, 462, 457, 3,
	467, 468, 460, 458, 472, 459, 469, 461, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 475, 3,
	448, 450, 449, 453, 471, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 465, 3, 466, 463, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 473, 455, 474, 451,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 452, 57791, 454, 57792, 464, 57793, 470, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1124
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1133
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1134
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1135
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1136
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1137
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1138
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1144
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1163
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1164
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1218
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1244
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1270
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1289
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1301
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1320
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1352
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1356
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1366
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1370
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1376
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1385
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1396
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1406
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1414
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1428
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1438
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1449
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1456
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1468
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1475
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1492
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1511
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1522
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1532
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1542
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1551
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1562
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1568
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1576
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1580
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1594
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1599
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1614
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1636
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1719
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1723
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1747
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1761
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1768
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1777
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1791
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1809
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1838
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1864
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1871
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1894
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1901
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1905
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1925
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1962
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1967
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1971
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1977
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1982
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1987
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1992
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1997
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2001
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2020
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2024
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2028
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2036
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2050
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2056
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2060
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2068
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2074
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2084
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2092
		{
			sqlVAL.union.val = nil
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2098
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2112
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2114
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2115
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2135
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2157
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2165
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2171
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2193
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2203
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2207
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2214
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2222
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2235
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2241
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2246
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2258
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2259
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2261
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2262
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2263
		{
			return helpWith(sqllex, "CREATE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "create cast")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2276
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2277
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2278
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			return unimplemented(sqllex, "create operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplemented(sqllex, "create publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplemented(sqllex, "create rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "create server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2289
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2290
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2293
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2294
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2297
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2298
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2301
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2305
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2306
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2307
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2308
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2309
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2310
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2311
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2312
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2313
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2314
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2316
		{
			return unimplemented(sqllex, "drop server")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2317
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2324
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2325
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2326
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2327
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2329
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2330
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2331
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2332
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2342
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2350
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2354
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2358
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2364
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2368
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2377
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2396
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2411
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2431
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2439
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2459
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2474
		{

			sqlVAL.union.val = nil
		}
	case 314:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2488
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2498
		{
			return helpWith(sqllex, "DELETE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2501
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2502
		{
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2513
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2514
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2515
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2516
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2517
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2526
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2528
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return helpWith(sqllex, "DROP")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2532
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2533
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2534
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2535
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2536
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2551
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2581
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2597
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2620
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2627
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2635
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2661
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2666
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2698
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2702
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2706
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2710
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2721
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2724
		{
			return helpWith(sqllex, "DELETE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2726
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2727
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2728
		{
			return helpWith(sqllex, "INSERT")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2731
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2732
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2733
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2742
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2743
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "DELETE")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2749
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "INSERT")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2752
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2756
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2761
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2775
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2783
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2795
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2809
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2816
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2824
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2832
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2850
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2857
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2877
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "GRANT")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2916
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2928
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			return helpWith(sqllex, "RESET")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2969
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2972
		{
			return helpWith(sqllex, "RESET")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2983
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2997
		{
			return helpWith(sqllex, "USE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3002
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3003
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3004
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3008
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3010
		{
			return helpWith(sqllex, "USE")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3070
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3074
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3078
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3124
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3150
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3154
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3176
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3207
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3229
		{
			return unimplemented(sqllex, "set from current")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3250
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3254
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3296
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3306
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3310
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3324
		{
			sqlVAL.union.val = tree.Low
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3328
		{
			sqlVAL.union.val = tree.Normal
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = tree.High
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3343
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3347
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3351
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3376
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3380
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3381
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3385
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3386
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3389
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3390
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3391
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3392
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3395
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3396
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3397
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3398
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3400
		{
			return helpWith(sqllex, "SHOW")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3409
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3420
		{
			sqlVAL.str = "client_encoding"
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.str = "timezone"
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3424
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3438
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3442
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3481
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3490
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3499
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3507
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3524
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3535
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3538
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3546
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3549
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3557
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3561
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3565
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3583
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3596
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3612
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3615
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3637
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3645
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3648
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3650
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3653
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3664
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3666
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3669
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = true
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3675
		{
			sqlVAL.union.val = true
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = false
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3691
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3694
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3695
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3697
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3704
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3722
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3731
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3734
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3736
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3739
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3741
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3745
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3748
		{
			sqlVAL.union.val = true
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = false
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3760
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3765
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3773
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3783
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3793
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3796
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3799
		{
			sqlVAL.union.val = true
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3800
		{
			sqlVAL.union.val = false
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3807
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3811
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3814
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3821
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3828
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3835
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3839
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3847
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3852
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3857
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3861
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3873
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3877
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3890
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3893
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3901
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3904
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3908
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3912
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3916
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3924
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3932
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3939
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3946
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3950
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3961
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3969
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3975
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3984
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3989
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3993
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3996
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4000
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4007
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4012
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4132
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4140
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4183
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4201
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4208
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4212
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4224
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4236
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4272
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4286
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = nil
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4306
		{

			sqlVAL.union.val = nil
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4312
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4317
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4327
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4333
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4343
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4355
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4368
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4369
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4370
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4388
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = true
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = false
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = true
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = true
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4397
		{
			sqlVAL.union.val = true
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4398
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4428
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4432
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4448
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4453
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.str = ""
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4491
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4498
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4514
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4548
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4563
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4581
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4615
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4642
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4656
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4660
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 801:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4701
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4713
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
					Sharded: sqlDollar[6].union.shardedIndexDef(),
				},
				PrimaryKey: true,
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4752
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4766
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4776
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4786
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4801
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4835
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4851
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4866
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4867
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4868
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4869
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4870
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4871
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4888
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4892
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4904
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4910
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4942
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4946
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4955
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4959
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4963
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4995
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4999
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5003
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5026
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5035
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5043
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5047
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5050
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5054
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5057
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5059
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5069
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5072
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5074
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5076
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5078
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5079
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5081
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5082
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5084
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5086
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5097
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5105
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5109
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5112
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5117
		{
			sqlVAL.union.val = nil
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5127
		{
			sqlVAL.union.val = tree.DNull
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5141
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), RolePrivileges: sqlDollar[4].union.rolePrivilegeList()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), HasWith: true, RolePrivileges: sqlDollar[5].union.rolePrivilegeList()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5153
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, RolePrivileges: sqlDollar[7].union.rolePrivilegeList()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5157
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, HasWith: true, RolePrivileges: sqlDollar[8].union.rolePrivilegeList()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5160
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = &tree.AlterRolePrivileges{Name: sqlDollar[3].union.expr(), RolePrivileges: sqlDollar[4].union.rolePrivilegeList()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = &tree.AlterRolePrivileges{Name: sqlDollar[3].union.expr(), HasWith: true, RolePrivileges: sqlDollar[5].union.rolePrivilegeList()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5175
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5180
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5181
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5189
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5200
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5210
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5211
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5219
		{
			rolePrivList, err := roleprivilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = rolePrivList
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5229
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5233
		{
			sqlVAL.union.val = append(sqlDollar[2].union.nameList(), tree.Name(sqlDollar[1].str))
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5238
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5239
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5245
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5247
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5249
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5251
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5253
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5255
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5271
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Sharded:     sqlDollar[11].union.shardedIndexDef(),
				Storing:     sqlDollar[12].union.nameList(),
				Interleave:  sqlDollar[13].union.interleave(),
				PartitionBy: sqlDollar[14].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5286
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Sharded:     sqlDollar[14].union.shardedIndexDef(),
				Storing:     sqlDollar[15].union.nameList(),
				Interleave:  sqlDollar[16].union.interleave(),
				PartitionBy: sqlDollar[17].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5302
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5316
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5330
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5333
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5334
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5338
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.union.val = false
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = true
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = false
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5382
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5405
		{
			sqlVAL.str = ""
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = tree.Descending
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 936:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[6].union.expr(), IfExists: true}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5440
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5446
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5454
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5460
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5468
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5474
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5482
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5486
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5491
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5492
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5495
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5496
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5504
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5507
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5517
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5529
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5540
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5544
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5545
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5546
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5565
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5567
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5570
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5583
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5585
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5588
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5597
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5598
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5599
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5607
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5614
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5617
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5618
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.str = ""
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5626
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5630
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5634
		{
			sqlVAL.str = ""
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5640
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5644
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5650
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5660
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5664
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5677
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5679
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5683
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5692
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5696
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5714
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5718
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5728
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5738
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5748
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.str = ""
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5762
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.str = ""
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5772
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.str = ""
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5782
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.str = ""
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5791
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5792
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5804
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5818
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5836
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5840
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5849
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5860
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5878
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5898
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5906
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5915
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5916
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5924
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5929
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5950
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5962
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5974
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5994
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6041
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6066
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6070
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6082
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6099
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6127
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6133
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6137
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6144
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6179
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6180
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6181
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6242
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6246
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6286
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6302
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6331
		{
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6332
		{
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = nil
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6345
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6346
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6350
		{
			sqlVAL.union.val = true
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6354
		{
			sqlVAL.union.val = false
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = false
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = true
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6375
		{
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6376
		{
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6390
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6406
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6427
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6432
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6461
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6481
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6494
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6549
		{
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6550
		{
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6553
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6554
		{
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6575
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6581
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6607
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6609
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6621
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6624
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6646
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6651
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6656
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6662
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6667
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6679
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6698
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6737
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6747
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6782
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6793
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6823
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6856
		{
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6858
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = nil
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6863
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6867
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6877
		{
			sqlVAL.union.val = true
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6881
		{
			sqlVAL.union.val = false
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6951
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.str = tree.AstFull
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.str = tree.AstRight
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.str = tree.AstInner
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6975
		{
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6976
		{
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.str = tree.AstHash
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.str = ""
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7034
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7038
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7043
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7061
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7067
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7073
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7083
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7112
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7125
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7133
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7134
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7144
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7152
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7154
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7162
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = types.String
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = types.Name
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7215
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7224
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7240
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7244
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7248
		{
			sqlVAL.union.val = types.INet
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = types.Oid
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7264
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7303
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = nil
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7326
		{
			sqlVAL.union.val = types.Int2
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7330
		{
			sqlVAL.union.val = types.Int2
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7334
		{
			sqlVAL.union.val = types.Int4
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = types.Int
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = types.Int
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = types.Int
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = types.Float4
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7354
		{
			sqlVAL.union.val = types.Float4
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7358
		{
			sqlVAL.union.val = types.Float
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.union.val = types.Float
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7370
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7378
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7386
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = types.Bool
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = types.Bool
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = types.RegType
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7427
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = types.Float
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7446
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7452
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7474
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = types.String
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = true
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = false
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = types.Date
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7523
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7531
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7543
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7545
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7554
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7562
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7579
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = true
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = false
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7591
		{
			sqlVAL.union.val = false
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7595
		{
			sqlVAL.union.val = types.Interval
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7603
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7687
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = nil
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7732
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7781
		{

			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7794
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7799
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7807
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7815
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7851
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7875
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7951
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7959
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7991
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7995
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8038
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8072
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8080
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8104
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8126
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8226
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8320
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8325
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8351
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8360
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8367
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8399
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8410
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8411
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8413
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8426
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8437
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8453
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8539
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8543
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8547
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8557
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8562
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8564
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8571
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8580
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8589
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8598
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8603
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8605
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8608
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8610
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8613
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8618
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8624
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8627
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8628
		{
			return unimplemented(sqllex, "treat")
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8634
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8638
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8642
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8646
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8649
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8654
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8659
		{
			return unimplemented(sqllex, "within group")
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8660
		{
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8668
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8695
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8703
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8718
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8738
		{
			sqlVAL.str = ""
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8754
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8762
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8770
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8778
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8784
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8797
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8829
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8833
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8837
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8844
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8857
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8861
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8865
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8870
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8887
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8894
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8906
		{
			sqlVAL.union.val = tree.Any
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8910
		{
			sqlVAL.union.val = tree.Some
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8914
		{
			sqlVAL.union.val = tree.All
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8919
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8920
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8921
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8922
		{
			sqlVAL.union.val = tree.Div
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8923
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8924
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8926
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8927
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8928
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8929
		{
			sqlVAL.union.val = tree.LT
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8930
		{
			sqlVAL.union.val = tree.GT
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8931
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8932
		{
			sqlVAL.union.val = tree.LE
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8933
		{
			sqlVAL.union.val = tree.GE
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8934
		{
			sqlVAL.union.val = tree.NE
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8938
		{
			sqlVAL.union.val = tree.Like
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8939
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8940
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8941
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8968
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8974
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8978
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8982
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8993
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8997
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9014
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9030
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9040
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9044
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9050
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9060
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9064
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9087
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9091
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9095
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9112
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9129
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9133
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9137
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9145
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9151
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9157
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9163
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9167
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9171
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9177
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9189
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9196
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9206
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9212
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9216
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9223
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9229
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9233
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9240
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9246
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9255
		{
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9256
		{
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9260
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9270
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9279
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9283
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9287
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9295
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9305
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9328
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9336
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9359
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9368
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9372
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9376
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9380
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9386
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9405
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9409
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9421
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9425
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9434
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9445
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9454
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9462
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9474
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9571
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9578
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9582
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1745:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9586
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9600
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9604
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9608
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9621
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9639
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9652
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9659
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9684
		{
			sqlVAL.str = ""
		}
	case 1765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9690
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9694
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
