// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:601
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9812

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1072,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 902,
	199, 902,
	214, 251,
	297, 251,
	305, 735,
	332, 251,
	341, 735,
	380, 735,
	404, 251,
	428, 735,
	-2, 0,
	-1, 74,
	214, 255,
	-2, 0,
	-1, 75,
	109, 1072,
	188, 1072,
	414, 1072,
	415, 1072,
	-2, 0,
	-1, 87,
	122, 1046,
	138, 1046,
	196, 1046,
	226, 1046,
	261, 1046,
	271, 1046,
	409, 1046,
	-2, 1024,
	-1, 118,
	128, 658,
	213, 658,
	299, 638,
	350, 638,
	397, 658,
	-2, 0,
	-1, 119,
	4, 1074,
	21, 1074,
	22, 1074,
	23, 1074,
	24, 1074,
	25, 1074,
	27, 1074,
	33, 1074,
	38, 1074,
	39, 1074,
	40, 1074,
	41, 1074,
	42, 1074,
	43, 1074,
	44, 1074,
	45, 1074,
	46, 1074,
	47, 1074,
	48, 1074,
	49, 1074,
	51, 1074,
	52, 1074,
	53, 1074,
	54, 1074,
	55, 1074,
	56, 1074,
	59, 1074,
	60, 1074,
	61, 1074,
	62, 1074,
	64, 1074,
	65, 1074,
	69, 1074,
	70, 1074,
	71, 1074,
	72, 1074,
	73, 1074,
	74, 1074,
	76, 1074,
	77, 1074,
	78, 1074,
	79, 1074,
	81, 1074,
	83, 1074,
	84, 1074,
	85, 1074,
	88, 1074,
	89, 1074,
	97, 1074,
	98, 1074,
	99, 1074,
	100, 1074,
	101, 1074,
	102, 1074,
	103, 1074,
	104, 1074,
	106, 1074,
	108, 1074,
	109, 1074,
	111, 1074,
	114, 1074,
	115, 1074,
	116, 1074,
	118, 1074,
	120, 1074,
	121, 1074,
	123, 1074,
	124, 1074,
	125, 1074,
	126, 1074,
	127, 1074,
	128, 1074,
	129, 1074,
	130, 1074,
	131, 1074,
	132, 1074,
	133, 1074,
	134, 1074,
	135, 1074,
	137, 1074,
	143, 1074,
	144, 1074,
	145, 1074,
	146, 1074,
	147, 1074,
	148, 1074,
	150, 1074,
	152, 1074,
	156, 1074,
	157, 1074,
	159, 1074,
	160, 1074,
	162, 1074,
	163, 1074,
	165, 1074,
	166, 1074,
	167, 1074,
	168, 1074,
	169, 1074,
	170, 1074,
	171, 1074,
	172, 1074,
	174, 1074,
	175, 1074,
	177, 1074,
	178, 1074,
	179, 1074,
	182, 1074,
	183, 1074,
	184, 1074,
	185, 1074,
	188, 1074,
	189, 1074,
	190, 1074,
	191, 1074,
	192, 1074,
	193, 1074,
	194, 1074,
	195, 1074,
	197, 1074,
	199, 1074,
	201, 1074,
	203, 1074,
	204, 1074,
	205, 1074,
	207, 1074,
	208, 1074,
	211, 1074,
	212, 1074,
	213, 1074,
	214, 1074,
	215, 1074,
	217, 1074,
	218, 1074,
	220, 1074,
	221, 1074,
	223, 1074,
	224, 1074,
	227, 1074,
	228, 1074,
	231, 1074,
	232, 1074,
	233, 1074,
	235, 1074,
	236, 1074,
	237, 1074,
	238, 1074,
	239, 1074,
	240, 1074,
	241, 1074,
	242, 1074,
	243, 1074,
	244, 1074,
	246, 1074,
	247, 1074,
	248, 1074,
	250, 1074,
	252, 1074,
	254, 1074,
	256, 1074,
	257, 1074,
	258, 1074,
	259, 1074,
	260, 1074,
	262, 1074,
	263, 1074,
	264, 1074,
	266, 1074,
	267, 1074,
	268, 1074,
	269, 1074,
	272, 1074,
	273, 1074,
	274, 1074,
	276, 1074,
	278, 1074,
	279, 1074,
	280, 1074,
	281, 1074,
	282, 1074,
	283, 1074,
	284, 1074,
	285, 1074,
	286, 1074,
	287, 1074,
	289, 1074,
	290, 1074,
	291, 1074,
	292, 1074,
	293, 1074,
	294, 1074,
	296, 1074,
	298, 1074,
	299, 1074,
	300, 1074,
	301, 1074,
	302, 1074,
	303, 1074,
	304, 1074,
	305, 1074,
	306, 1074,
	308, 1074,
	309, 1074,
	310, 1074,
	311, 1074,
	312, 1074,
	314, 1074,
	315, 1074,
	316, 1074,
	317, 1074,
	318, 1074,
	319, 1074,
	320, 1074,
	321, 1074,
	323, 1074,
	325, 1074,
	326, 1074,
	327, 1074,
	328, 1074,
	329, 1074,
	330, 1074,
	332, 1074,
	333, 1074,
	334, 1074,
	335, 1074,
	336, 1074,
	337, 1074,
	338, 1074,
	339, 1074,
	341, 1074,
	342, 1074,
	343, 1074,
	344, 1074,
	345, 1074,
	346, 1074,
	347, 1074,
	348, 1074,
	349, 1074,
	350, 1074,
	352, 1074,
	353, 1074,
	354, 1074,
	355, 1074,
	356, 1074,
	358, 1074,
	359, 1074,
	360, 1074,
	361, 1074,
	362, 1074,
	364, 1074,
	365, 1074,
	366, 1074,
	367, 1074,
	368, 1074,
	369, 1074,
	370, 1074,
	371, 1074,
	372, 1074,
	373, 1074,
	374, 1074,
	375, 1074,
	377, 1074,
	378, 1074,
	379, 1074,
	381, 1074,
	382, 1074,
	383, 1074,
	384, 1074,
	385, 1074,
	386, 1074,
	387, 1074,
	389, 1074,
	390, 1074,
	391, 1074,
	392, 1074,
	393, 1074,
	395, 1074,
	397, 1074,
	398, 1074,
	399, 1074,
	400, 1074,
	401, 1074,
	403, 1074,
	404, 1074,
	405, 1074,
	407, 1074,
	408, 1074,
	411, 1074,
	412, 1074,
	413, 1074,
	414, 1074,
	415, 1074,
	416, 1074,
	418, 1074,
	420, 1074,
	421, 1074,
	422, 1074,
	423, 1074,
	424, 1074,
	425, 1074,
	426, 1074,
	428, 1074,
	429, 1074,
	430, 1074,
	435, 1074,
	436, 1074,
	437, 1074,
	438, 1074,
	439, 1074,
	440, 1074,
	-2, 0,
	-1, 120,
	1, 955,
	203, 955,
	296, 955,
	303, 955,
	443, 955,
	466, 955,
	-2, 0,
	-1, 122,
	1, 955,
	466, 955,
	-2, 0,
	-1, 123,
	1, 955,
	466, 955,
	-2, 0,
	-1, 124,
	1, 959,
	466, 959,
	-2, 0,
	-1, 149,
	122, 1045,
	138, 1045,
	196, 1045,
	226, 1045,
	261, 1045,
	271, 1045,
	409, 1045,
	-2, 1033,
	-1, 182,
	4, 1081,
	5, 1081,
	6, 1081,
	7, 1081,
	8, 1081,
	9, 1081,
	10, 1081,
	21, 1081,
	22, 1081,
	23, 1081,
	24, 1081,
	25, 1081,
	27, 1081,
	33, 1081,
	34, 1081,
	38, 1081,
	39, 1081,
	40, 1081,
	41, 1081,
	42, 1081,
	43, 1081,
	44, 1081,
	45, 1081,
	46, 1081,
	47, 1081,
	48, 1081,
	49, 1081,
	51, 1081,
	52, 1081,
	53, 1081,
	54, 1081,
	55, 1081,
	56, 1081,
	57, 1081,
	58, 1081,
	59, 1081,
	60, 1081,
	61, 1081,
	62, 1081,
	64, 1081,
	65, 1081,
	67, 1081,
	69, 1081,
	70, 1081,
	71, 1081,
	72, 1081,
	73, 1081,
	74, 1081,
	76, 1081,
	77, 1081,
	78, 1081,
	79, 1081,
	81, 1081,
	83, 1081,
	84, 1081,
	85, 1081,
	87, 1081,
	88, 1081,
	89, 1081,
	90, 1081,
	91, 1081,
	92, 1081,
	93, 1081,
	94, 1081,
	95, 1081,
	96, 1081,
	97, 1081,
	98, 1081,
	99, 1081,
	100, 1081,
	101, 1081,
	102, 1081,
	103, 1081,
	104, 1081,
	105, 1081,
	106, 1081,
	108, 1081,
	109, 1081,
	111, 1081,
	114, 1081,
	115, 1081,
	116, 1081,
	118, 1081,
	120, 1081,
	121, 1081,
	123, 1081,
	124, 1081,
	125, 1081,
	126, 1081,
	127, 1081,
	128, 1081,
	129, 1081,
	130, 1081,
	131, 1081,
	132, 1081,
	133, 1081,
	134, 1081,
	135, 1081,
	136, 1081,
	137, 1081,
	143, 1081,
	144, 1081,
	145, 1081,
	146, 1081,
	147, 1081,
	148, 1081,
	150, 1081,
	152, 1081,
	155, 1081,
	156, 1081,
	157, 1081,
	159, 1081,
	160, 1081,
	162, 1081,
	163, 1081,
	165, 1081,
	166, 1081,
	167, 1081,
	168, 1081,
	169, 1081,
	170, 1081,
	171, 1081,
	172, 1081,
	173, 1081,
	174, 1081,
	175, 1081,
	177, 1081,
	178, 1081,
	179, 1081,
	182, 1081,
	183, 1081,
	184, 1081,
	185, 1081,
	187, 1081,
	188, 1081,
	189, 1081,
	190, 1081,
	191, 1081,
	192, 1081,
	193, 1081,
	194, 1081,
	195, 1081,
	197, 1081,
	199, 1081,
	200, 1081,
	201, 1081,
	202, 1081,
	203, 1081,
	204, 1081,
	205, 1081,
	206, 1081,
	207, 1081,
	208, 1081,
	211, 1081,
	212, 1081,
	213, 1081,
	214, 1081,
	215, 1081,
	217, 1081,
	218, 1081,
	220, 1081,
	221, 1081,
	222, 1081,
	223, 1081,
	224, 1081,
	225, 1081,
	227, 1081,
	228, 1081,
	231, 1081,
	232, 1081,
	233, 1081,
	235, 1081,
	236, 1081,
	237, 1081,
	238, 1081,
	239, 1081,
	240, 1081,
	241, 1081,
	242, 1081,
	243, 1081,
	244, 1081,
	245, 1081,
	246, 1081,
	247, 1081,
	248, 1081,
	249, 1081,
	250, 1081,
	251, 1081,
	252, 1081,
	253, 1081,
	254, 1081,
	255, 1081,
	256, 1081,
	257, 1081,
	258, 1081,
	259, 1081,
	260, 1081,
	262, 1081,
	263, 1081,
	264, 1081,
	267, 1081,
	268, 1081,
	269, 1081,
	272, 1081,
	273, 1081,
	274, 1081,
	275, 1081,
	276, 1081,
	277, 1081,
	278, 1081,
	279, 1081,
	280, 1081,
	281, 1081,
	282, 1081,
	283, 1081,
	284, 1081,
	285, 1081,
	286, 1081,
	287, 1081,
	289, 1081,
	290, 1081,
	291, 1081,
	292, 1081,
	293, 1081,
	294, 1081,
	296, 1081,
	298, 1081,
	299, 1081,
	300, 1081,
	301, 1081,
	302, 1081,
	303, 1081,
	304, 1081,
	305, 1081,
	306, 1081,
	308, 1081,
	309, 1081,
	310, 1081,
	311, 1081,
	312, 1081,
	314, 1081,
	315, 1081,
	316, 1081,
	317, 1081,
	318, 1081,
	319, 1081,
	320, 1081,
	321, 1081,
	323, 1081,
	324, 1081,
	325, 1081,
	326, 1081,
	327, 1081,
	328, 1081,
	329, 1081,
	330, 1081,
	332, 1081,
	333, 1081,
	334, 1081,
	335, 1081,
	336, 1081,
	337, 1081,
	338, 1081,
	339, 1081,
	341, 1081,
	342, 1081,
	343, 1081,
	344, 1081,
	345, 1081,
	346, 1081,
	347, 1081,
	348, 1081,
	349, 1081,
	350, 1081,
	351, 1081,
	352, 1081,
	353, 1081,
	354, 1081,
	355, 1081,
	356, 1081,
	357, 1081,
	358, 1081,
	359, 1081,
	360, 1081,
	361, 1081,
	362, 1081,
	364, 1081,
	365, 1081,
	366, 1081,
	367, 1081,
	368, 1081,
	369, 1081,
	370, 1081,
	371, 1081,
	372, 1081,
	373, 1081,
	374, 1081,
	375, 1081,
	377, 1081,
	378, 1081,
	379, 1081,
	381, 1081,
	382, 1081,
	383, 1081,
	384, 1081,
	385, 1081,
	386, 1081,
	387, 1081,
	389, 1081,
	390, 1081,
	391, 1081,
	392, 1081,
	393, 1081,
	395, 1081,
	397, 1081,
	398, 1081,
	399, 1081,
	400, 1081,
	401, 1081,
	402, 1081,
	403, 1081,
	404, 1081,
	405, 1081,
	407, 1081,
	408, 1081,
	410, 1081,
	411, 1081,
	412, 1081,
	413, 1081,
	414, 1081,
	415, 1081,
	416, 1081,
	417, 1081,
	418, 1081,
	420, 1081,
	421, 1081,
	422, 1081,
	423, 1081,
	424, 1081,
	425, 1081,
	426, 1081,
	428, 1081,
	429, 1081,
	430, 1081,
	435, 1081,
	436, 1081,
	437, 1081,
	438, 1081,
	439, 1081,
	440, 1081,
	441, 1081,
	447, 1081,
	454, 1081,
	455, 1081,
	456, 1081,
	463, 1081,
	467, 1081,
	-2, 0,
	-1, 560,
	154, 1758,
	394, 1758,
	446, 1758,
	465, 1758,
	-2, 0,
	-1, 561,
	154, 1837,
	394, 1837,
	446, 1837,
	465, 1837,
	-2, 0,
	-1, 562,
	154, 1747,
	394, 1747,
	446, 1747,
	465, 1747,
	-2, 0,
	-1, 564,
	154, 1929,
	394, 1929,
	446, 1929,
	465, 1929,
	-2, 0,
	-1, 566,
	154, 1959,
	394, 1959,
	446, 1959,
	465, 1959,
	-2, 0,
	-1, 573,
	154, 1848,
	394, 1848,
	446, 1848,
	465, 1848,
	-2, 508,
	-1, 590,
	465, 1705,
	468, 1705,
	-2, 709,
	-1, 591,
	465, 1707,
	468, 1707,
	-2, 710,
	-1, 592,
	465, 1706,
	468, 1706,
	-2, 711,
	-1, 593,
	468, 1652,
	-2, 712,
	-1, 636,
	428, 884,
	-2, 736,
	-1, 742,
	299, 639,
	350, 639,
	-2, 0,
	-1, 743,
	299, 638,
	350, 638,
	-2, 589,
	-1, 746,
	1, 668,
	462, 668,
	464, 668,
	466, 668,
	-2, 0,
	-1, 747,
	1, 708,
	151, 708,
	462, 708,
	464, 708,
	466, 708,
	-2, 0,
	-1, 755,
	1, 642,
	462, 642,
	464, 642,
	466, 642,
	-2, 0,
	-1, 758,
	1, 668,
	462, 668,
	464, 668,
	466, 668,
	-2, 0,
	-1, 759,
	1, 670,
	462, 670,
	464, 670,
	466, 670,
	-2, 0,
	-1, 760,
	1, 673,
	462, 673,
	464, 673,
	466, 673,
	-2, 0,
	-1, 764,
	1, 687,
	462, 687,
	464, 687,
	466, 687,
	-2, 0,
	-1, 765,
	1, 689,
	462, 689,
	464, 689,
	466, 689,
	-2, 0,
	-1, 809,
	138, 1083,
	226, 1083,
	261, 1083,
	-2, 1033,
	-1, 825,
	138, 1082,
	226, 1082,
	261, 1082,
	-2, 1033,
	-1, 849,
	465, 1704,
	-2, 516,
	-1, 878,
	463, 1696,
	-2, 1687,
	-1, 884,
	5, 1220,
	-2, 1738,
	-1, 885,
	5, 1221,
	-2, 1742,
	-1, 886,
	5, 1222,
	-2, 1741,
	-1, 887,
	5, 1223,
	-2, 1956,
	-1, 888,
	5, 1224,
	-2, 1850,
	-1, 889,
	5, 1225,
	-2, 1921,
	-1, 890,
	5, 1226,
	-2, 1923,
	-1, 891,
	5, 1227,
	-2, 1936,
	-1, 892,
	5, 1228,
	-2, 1924,
	-1, 893,
	5, 1229,
	-2, 1925,
	-1, 894,
	5, 1230,
	-2, 1737,
	-1, 895,
	5, 1231,
	-2, 1972,
	-1, 896,
	5, 1232,
	-2, 1811,
	-1, 897,
	5, 1233,
	-2, 1860,
	-1, 898,
	5, 1234,
	-2, 1862,
	-1, 899,
	5, 1235,
	-2, 1815,
	-1, 900,
	5, 1236,
	463, 1714,
	-2, 1705,
	-1, 901,
	5, 1292,
	463, 1292,
	-2, 2007,
	-1, 906,
	463, 1715,
	-2, 1706,
	-1, 908,
	5, 1240,
	-2, 2005,
	-1, 909,
	5, 1241,
	-2, 2006,
	-1, 910,
	5, 1242,
	-2, 1814,
	-1, 911,
	5, 1243,
	-2, 2018,
	-1, 912,
	5, 1244,
	-2, 1816,
	-1, 913,
	5, 1245,
	-2, 1817,
	-1, 914,
	5, 1246,
	-2, 1818,
	-1, 915,
	5, 1247,
	-2, 1987,
	-1, 916,
	5, 1248,
	-2, 2016,
	-1, 917,
	5, 1249,
	-2, 1794,
	-1, 918,
	5, 1250,
	-2, 1795,
	-1, 919,
	5, 1264,
	-2, 1999,
	-1, 921,
	5, 1239,
	-2, 1995,
	-1, 922,
	5, 1239,
	-2, 1994,
	-1, 923,
	5, 1239,
	-2, 2011,
	-1, 924,
	5, 1256,
	-2, 1989,
	-1, 925,
	5, 1257,
	-2, 1739,
	-1, 926,
	5, 1267,
	-2, 1988,
	-1, 927,
	5, 1269,
	-2, 2027,
	-1, 929,
	5, 1280,
	-2, 1768,
	-1, 930,
	5, 1291,
	-2, 2020,
	-1, 931,
	5, 1283,
	-2, 2021,
	-1, 932,
	5, 1291,
	-2, 2022,
	-1, 933,
	5, 1287,
	-2, 2023,
	-1, 934,
	5, 1206,
	-2, 1824,
	-1, 935,
	5, 1207,
	-2, 1825,
	-1, 936,
	465, 1702,
	-2, 1686,
	-1, 937,
	463, 2048,
	-2, 1703,
	-1, 957,
	5, 1275,
	-2, 1947,
	-1, 975,
	5, 1274,
	-2, 2028,
	-1, 985,
	5, 1276,
	429, 1276,
	-2, 1990,
	-1, 986,
	5, 1277,
	429, 1277,
	-2, 1991,
	-1, 1022,
	463, 1714,
	-2, 1705,
	-1, 1050,
	154, 1959,
	394, 1959,
	446, 1959,
	465, 1959,
	-2, 0,
	-1, 1053,
	1, 494,
	466, 494,
	-2, 967,
	-1, 1173,
	314, 1683,
	456, 1683,
	-2, 1682,
	-1, 1196,
	467, 1683,
	-2, 1684,
	-1, 1231,
	305, 735,
	428, 735,
	-2, 250,
	-1, 1251,
	285, 1070,
	-2, 875,
	-1, 1260,
	265, 1709,
	-2, 0,
	-1, 1324,
	1, 369,
	462, 369,
	464, 369,
	466, 369,
	-2, 1044,
	-1, 1327,
	4, 2026,
	11, 2026,
	12, 2026,
	14, 2026,
	15, 2026,
	16, 2026,
	17, 2026,
	18, 2026,
	19, 2026,
	21, 2026,
	22, 2026,
	23, 2026,
	24, 2026,
	25, 2026,
	27, 2026,
	30, 2026,
	31, 2026,
	33, 2026,
	35, 2026,
	38, 2026,
	39, 2026,
	40, 2026,
	41, 2026,
	42, 2026,
	43, 2026,
	44, 2026,
	45, 2026,
	46, 2026,
	47, 2026,
	48, 2026,
	49, 2026,
	51, 2026,
	52, 2026,
	53, 2026,
	54, 2026,
	55, 2026,
	56, 2026,
	59, 2026,
	60, 2026,
	61, 2026,
	62, 2026,
	64, 2026,
	65, 2026,
	66, 2026,
	69, 2026,
	70, 2026,
	71, 2026,
	72, 2026,
	73, 2026,
	74, 2026,
	75, 2026,
	76, 2026,
	77, 2026,
	78, 2026,
	79, 2026,
	81, 2026,
	82, 2026,
	83, 2026,
	84, 2026,
	85, 2026,
	87, 2026,
	88, 2026,
	89, 2026,
	97, 2026,
	98, 2026,
	99, 2026,
	100, 2026,
	101, 2026,
	102, 2026,
	103, 2026,
	104, 2026,
	106, 2026,
	108, 2026,
	109, 2026,
	111, 2026,
	114, 2026,
	115, 2026,
	116, 2026,
	118, 2026,
	120, 2026,
	121, 2026,
	123, 2026,
	124, 2026,
	125, 2026,
	126, 2026,
	127, 2026,
	128, 2026,
	129, 2026,
	130, 2026,
	131, 2026,
	132, 2026,
	133, 2026,
	134, 2026,
	135, 2026,
	139, 2026,
	140, 2026,
	141, 2026,
	142, 2026,
	143, 2026,
	144, 2026,
	145, 2026,
	146, 2026,
	147, 2026,
	148, 2026,
	149, 2026,
	150, 2026,
	152, 2026,
	155, 2026,
	156, 2026,
	157, 2026,
	159, 2026,
	160, 2026,
	162, 2026,
	163, 2026,
	165, 2026,
	166, 2026,
	167, 2026,
	168, 2026,
	169, 2026,
	170, 2026,
	171, 2026,
	172, 2026,
	173, 2026,
	174, 2026,
	175, 2026,
	176, 2026,
	177, 2026,
	178, 2026,
	179, 2026,
	180, 2026,
	181, 2026,
	183, 2026,
	184, 2026,
	185, 2026,
	187, 2026,
	188, 2026,
	189, 2026,
	190, 2026,
	191, 2026,
	192, 2026,
	193, 2026,
	194, 2026,
	195, 2026,
	197, 2026,
	199, 2026,
	200, 2026,
	201, 2026,
	202, 2026,
	203, 2026,
	204, 2026,
	205, 2026,
	206, 2026,
	207, 2026,
	208, 2026,
	209, 2026,
	210, 2026,
	211, 2026,
	212, 2026,
	213, 2026,
	214, 2026,
	215, 2026,
	217, 2026,
	218, 2026,
	220, 2026,
	221, 2026,
	222, 2026,
	223, 2026,
	224, 2026,
	225, 2026,
	227, 2026,
	228, 2026,
	231, 2026,
	232, 2026,
	233, 2026,
	234, 2026,
	235, 2026,
	236, 2026,
	237, 2026,
	238, 2026,
	239, 2026,
	240, 2026,
	241, 2026,
	242, 2026,
	243, 2026,
	244, 2026,
	245, 2026,
	246, 2026,
	247, 2026,
	248, 2026,
	250, 2026,
	253, 2026,
	254, 2026,
	256, 2026,
	257, 2026,
	258, 2026,
	259, 2026,
	260, 2026,
	262, 2026,
	263, 2026,
	264, 2026,
	267, 2026,
	268, 2026,
	269, 2026,
	270, 2026,
	272, 2026,
	273, 2026,
	274, 2026,
	276, 2026,
	278, 2026,
	279, 2026,
	280, 2026,
	281, 2026,
	282, 2026,
	283, 2026,
	284, 2026,
	285, 2026,
	286, 2026,
	287, 2026,
	289, 2026,
	290, 2026,
	291, 2026,
	292, 2026,
	293, 2026,
	294, 2026,
	296, 2026,
	298, 2026,
	299, 2026,
	300, 2026,
	301, 2026,
	302, 2026,
	303, 2026,
	304, 2026,
	305, 2026,
	306, 2026,
	308, 2026,
	309, 2026,
	310, 2026,
	311, 2026,
	312, 2026,
	313, 2026,
	314, 2026,
	315, 2026,
	316, 2026,
	317, 2026,
	318, 2026,
	319, 2026,
	320, 2026,
	321, 2026,
	323, 2026,
	324, 2026,
	325, 2026,
	326, 2026,
	327, 2026,
	328, 2026,
	329, 2026,
	330, 2026,
	331, 2026,
	332, 2026,
	333, 2026,
	334, 2026,
	335, 2026,
	336, 2026,
	337, 2026,
	338, 2026,
	339, 2026,
	341, 2026,
	342, 2026,
	343, 2026,
	344, 2026,
	345, 2026,
	346, 2026,
	347, 2026,
	348, 2026,
	349, 2026,
	350, 2026,
	352, 2026,
	353, 2026,
	354, 2026,
	355, 2026,
	356, 2026,
	357, 2026,
	358, 2026,
	359, 2026,
	360, 2026,
	361, 2026,
	362, 2026,
	364, 2026,
	365, 2026,
	366, 2026,
	367, 2026,
	368, 2026,
	369, 2026,
	370, 2026,
	371, 2026,
	372, 2026,
	373, 2026,
	374, 2026,
	375, 2026,
	377, 2026,
	378, 2026,
	379, 2026,
	381, 2026,
	382, 2026,
	383, 2026,
	384, 2026,
	385, 2026,
	386, 2026,
	387, 2026,
	389, 2026,
	390, 2026,
	391, 2026,
	392, 2026,
	393, 2026,
	395, 2026,
	397, 2026,
	398, 2026,
	399, 2026,
	400, 2026,
	401, 2026,
	403, 2026,
	404, 2026,
	405, 2026,
	407, 2026,
	408, 2026,
	411, 2026,
	412, 2026,
	413, 2026,
	414, 2026,
	415, 2026,
	416, 2026,
	418, 2026,
	420, 2026,
	421, 2026,
	422, 2026,
	423, 2026,
	424, 2026,
	425, 2026,
	426, 2026,
	428, 2026,
	429, 2026,
	430, 2026,
	435, 2026,
	436, 2026,
	437, 2026,
	438, 2026,
	439, 2026,
	440, 2026,
	441, 2026,
	442, 2026,
	444, 2026,
	445, 2026,
	446, 2026,
	447, 2026,
	448, 2026,
	449, 2026,
	451, 2026,
	452, 2026,
	453, 2026,
	454, 2026,
	455, 2026,
	456, 2026,
	457, 2026,
	458, 2026,
	459, 2026,
	461, 2026,
	464, 2026,
	465, 2026,
	467, 2026,
	468, 2026,
	-2, 0,
	-1, 1332,
	154, 1929,
	394, 1929,
	446, 1929,
	465, 1929,
	-2, 0,
	-1, 1361,
	299, 639,
	350, 639,
	-2, 0,
	-1, 1384,
	1, 634,
	462, 634,
	464, 634,
	466, 634,
	-2, 0,
	-1, 1385,
	1, 659,
	462, 659,
	464, 659,
	466, 659,
	-2, 0,
	-1, 1386,
	1, 641,
	462, 641,
	464, 641,
	466, 641,
	-2, 0,
	-1, 1388,
	1, 645,
	462, 645,
	464, 645,
	466, 645,
	-2, 0,
	-1, 1413,
	1, 1979,
	462, 1979,
	464, 1979,
	465, 1979,
	466, 1979,
	-2, 685,
	-1, 1414,
	1, 1926,
	462, 1926,
	464, 1926,
	465, 1926,
	466, 1926,
	-2, 686,
	-1, 1429,
	1, 962,
	466, 962,
	-2, 967,
	-1, 1434,
	138, 1082,
	226, 1082,
	261, 1082,
	-2, 1033,
	-1, 1532,
	122, 1046,
	138, 1046,
	196, 1046,
	226, 1046,
	261, 1046,
	271, 1046,
	409, 1046,
	-2, 1448,
	-1, 1585,
	464, 1586,
	-2, 0,
	-1, 1627,
	122, 1046,
	138, 1046,
	196, 1046,
	226, 1046,
	261, 1046,
	271, 1046,
	409, 1046,
	-2, 1157,
	-1, 1677,
	463, 1279,
	-2, 1267,
	-1, 1721,
	1, 496,
	466, 496,
	-2, 967,
	-1, 1919,
	1, 636,
	462, 636,
	464, 636,
	466, 636,
	-2, 0,
	-1, 1920,
	1, 661,
	462, 661,
	464, 661,
	466, 661,
	-2, 0,
	-1, 2010,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1328,
	-1, 2011,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1329,
	-1, 2012,
	82, 0,
	209, 0,
	210, 0,
	448, 0,
	449, 0,
	-2, 1330,
	-1, 2013,
	82, 0,
	209, 0,
	210, 0,
	448, 0,
	449, 0,
	-2, 1331,
	-1, 2014,
	82, 0,
	209, 0,
	210, 0,
	448, 0,
	449, 0,
	-2, 1332,
	-1, 2015,
	82, 0,
	209, 0,
	210, 0,
	448, 0,
	449, 0,
	-2, 1333,
	-1, 2016,
	82, 0,
	209, 0,
	210, 0,
	448, 0,
	449, 0,
	-2, 1334,
	-1, 2017,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1335,
	-1, 2029,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1347,
	-1, 2030,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1348,
	-1, 2031,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1349,
	-1, 2034,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1354,
	-1, 2040,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1358,
	-1, 2042,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1366,
	-1, 2043,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1367,
	-1, 2044,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1368,
	-1, 2045,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1369,
	-1, 2139,
	5, 1236,
	154, 1597,
	463, 1714,
	-2, 1705,
	-1, 2140,
	154, 1598,
	-2, 1983,
	-1, 2141,
	154, 1599,
	-2, 1847,
	-1, 2142,
	154, 1600,
	-2, 1769,
	-1, 2143,
	154, 1601,
	-2, 1805,
	-1, 2144,
	154, 1602,
	-2, 1845,
	-1, 2145,
	154, 1603,
	-2, 1920,
	-1, 2146,
	154, 1604,
	-2, 1431,
	-1, 2222,
	1, 1158,
	2, 1158,
	87, 1158,
	122, 1158,
	138, 1158,
	151, 1158,
	155, 1158,
	161, 1158,
	164, 1158,
	187, 1158,
	196, 1158,
	206, 1158,
	222, 1158,
	226, 1158,
	245, 1158,
	261, 1158,
	265, 1158,
	271, 1158,
	322, 1158,
	324, 1158,
	409, 1158,
	419, 1158,
	432, 1158,
	433, 1158,
	434, 1158,
	443, 1158,
	462, 1158,
	464, 1158,
	466, 1158,
	468, 1158,
	-2, 1157,
	-1, 2227,
	463, 1688,
	-2, 1700,
	-1, 2249,
	463, 1278,
	-2, 1268,
	-1, 2495,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1356,
	-1, 2496,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1360,
	-1, 2502,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1362,
	-1, 2685,
	203, 967,
	296, 967,
	303, 967,
	443, 967,
	-2, 493,
	-1, 2779,
	285, 1070,
	-2, 875,
	-1, 2868,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1364,
	-1, 2875,
	200, 0,
	202, 0,
	253, 0,
	-2, 1383,
	-1, 2938,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1412,
	-1, 2939,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1413,
	-1, 2940,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1414,
	-1, 2944,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1418,
	-1, 2945,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1419,
	-1, 2946,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1420,
	-1, 2990,
	463, 1689,
	-2, 1701,
	-1, 3079,
	465, 2130,
	-2, 1010,
	-1, 3130,
	200, 0,
	202, 0,
	253, 0,
	-2, 1384,
	-1, 3133,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1387,
	-1, 3134,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1389,
	-1, 3296,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1388,
	-1, 3297,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1390,
	-1, 3307,
	200, 0,
	-2, 1421,
	-1, 3417,
	200, 0,
	-2, 1422,
	-1, 3535,
	43, 0,
	173, 0,
	225, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1986,
}

const sqlPrivate = 57344

const sqlLast = 77148

var sqlAct = [...]int{

	906, 3337, 3534, 3366, 3629, 3544, 2766, 3501, 3619, 3513,
	2618, 3237, 3112, 2171, 3488, 3545, 3340, 3504, 3546, 3582,
	2906, 3010, 2389, 3421, 3373, 2619, 1023, 1895, 3533, 3326,
	3261, 1997, 3285, 2213, 3071, 3378, 3066, 3192, 2214, 214,
	1059, 214, 214, 2702, 214, 214, 214, 214, 214, 2057,
	1316, 214, 835, 3266, 1447, 2795, 1177, 1312, 1652, 592,
	3053, 1202, 826, 2762, 2788, 2790, 2860, 1769, 571, 2488,
	3011, 3311, 1530, 2422, 1078, 2378, 2361, 214, 1622, 2353,
	2424, 592, 2624, 2364, 2646, 1015, 2660, 2633, 1620, 1855,
	690, 2604, 3164, 2432, 2413, 2421, 1852, 2337, 2622, 2415,
	2278, 2390, 3111, 1845, 1844, 1594, 2280, 2961, 2215, 1994,
	2523, 878, 2108, 2603, 1170, 1653, 1540, 2338, 3422, 2088,
	1558, 1778, 2070, 1368, 1990, 2484, 1189, 1803, 1807, 834,
	142, 1756, 2313, 902, 2362, 2431, 1754, 1796, 1066, 2100,
	4, 1595, 1429, 86, 2314, 2665, 3367, 2189, 2217, 2054,
	2764, 2168, 1179, 822, 1309, 863, 1325, 1873, 2383, 1836,
	208, 539, 1249, 2270, 1319, 593, 1055, 1299, 2082, 594,
	2425, 1010, 207, 1604, 2197, 1553, 2179, 214, 214, 32,
	989, 2071, 2135, 1448, 1521, 1446, 149, 555, 150, 525,
	1007, 588, 1835, 547, 928, 565, 1861, 206, 665, 1323,
	1199, 636, 1275, 1768, 862, 142, 542, 550, 1012, 37,
	36, 1428, 34, 987, 1452, 1186, 684, 25, 23, 597,
	737, 21, 753, 1257, 2979, 2519, 2980, 2620, 1896, 3659,
	1875, 600, 3650, 2188, 1875, 1875, 2188, 1063, 3649, 3628,
	3611, 597, 2188, 1812, 3206, 3609, 3568, 3566, 3564, 3206,
	3569, 2188, 2188, 600, 3561, 3558, 3555, 830, 3562, 3559,
	1812, 825, 2437, 2804, 3531, 3530, 3529, 1004, 1812, 1812,
	1887, 3526, 700, 3525, 830, 1887, 3483, 1887, 1460, 1461,
	2242, 1493, 1494, 1495, 1503, 1504, 1505, 3477, 3476, 2805,
	2683, 2188, 2188, 1460, 1461, 831, 1021, 1496, 1491, 3471,
	3470, 2333, 3464, 3206, 3206, 1463, 1812, 3458, 3456, 2188,
	1509, 3206, 3206, 1491, 3419, 3400, 2538, 3397, 2242, 1812,
	1463, 3206, 2539, 1387, 3484, 990, 990, 3403, 1531, 810,
	3356, 809, 3355, 1462, 1812, 3347, 1812, 3346, 1063, 1812,
	3317, 3206, 1482, 3298, 1812, 2181, 3283, 2242, 1462, 1479,
	1887, 3274, 3234, 3224, 3205, 2818, 2188, 2188, 3206, 839,
	3132, 3087, 1887, 2965, 2242, 2834, 2576, 2577, 3081, 817,
	3051, 2985, 2834, 2975, 3052, 2986, 2968, 2976, 2899, 2887,
	2188, 2833, 1812, 2188, 2825, 2834, 2757, 2965, 2826, 1040,
	1887, 991, 2617, 905, 2615, 2614, 2188, 2568, 2188, 2188,
	2551, 2188, 2238, 2180, 2552, 1035, 1485, 1486, 1487, 1488,
	2540, 2411, 3225, 2410, 2188, 1891, 1468, 1891, 2255, 2241,
	2236, 182, 2188, 2242, 2188, 2229, 1812, 2826, 2187, 1812,
	2591, 1468, 2188, 1890, 2328, 1773, 1812, 1891, 182, 2269,
	1500, 1220, 993, 1510, 994, 1727, 2818, 1490, 1492, 2359,
	2487, 75, 1874, 1811, 2188, 2267, 1590, 1198, 1621, 3038,
	2863, 184, 1490, 1492, 1460, 1461, 2843, 1506, 1806, 1507,
	2806, 2522, 1370, 2208, 2207, 2206, 1477, 1478, 184, 1036,
	2205, 2576, 2577, 2204, 2594, 2595, 2596, 182, 995, 2807,
	2085, 1463, 1498, 992, 1876, 816, 815, 814, 1876, 1876,
	3128, 1483, 813, 2464, 2582, 183, 2576, 2577, 812, 2594,
	2595, 2596, 808, 807, 806, 176, 1483, 805, 804, 1462,
	1508, 803, 183, 177, 802, 3127, 801, 184, 2576, 2577,
	214, 800, 176, 799, 798, 1747, 797, 1497, 796, 735,
	177, 734, 733, 732, 151, 2591, 731, 2371, 730, 729,
	861, 728, 727, 726, 725, 724, 2086, 723, 214, 2576,
	2577, 151, 2594, 2595, 2596, 214, 722, 721, 720, 719,
	2591, 183, 718, 717, 716, 715, 714, 713, 1018, 712,
	1489, 214, 1081, 214, 214, 1182, 214, 1081, 214, 2592,
	711, 710, 709, 699, 698, 656, 214, 214, 1484, 655,
	613, 3551, 1468, 2804, 1036, 612, 611, 603, 1219, 602,
	151, 601, 578, 1484, 577, 1079, 576, 575, 559, 2582,
	1190, 214, 1065, 2591, 1501, 204, 1070, 203, 2087, 2084,
	202, 201, 200, 199, 198, 214, 197, 196, 1182, 1182,
	214, 214, 1883, 214, 2582, 1192, 1874, 1965, 195, 194,
	193, 192, 191, 190, 189, 214, 188, 1531, 187, 2180,
	182, 182, 186, 214, 185, 3181, 2582, 3143, 2983, 2835,
	2597, 2663, 2545, 2534, 2343, 2230, 118, 214, 214, 214,
	214, 214, 1182, 1182, 2576, 2577, 2593, 1182, 2221, 2126,
	214, 1182, 214, 214, 2124, 2597, 2122, 2582, 1898, 2120,
	184, 184, 2118, 1036, 2592, 1752, 214, 1637, 1499, 1053,
	904, 1474, 1475, 1481, 1502, 1480, 1476, 1547, 1473, 1471,
	1472, 1464, 1465, 1466, 1467, 1469, 1470, 2089, 2372, 2592,
	1204, 3153, 3532, 1320, 1542, 3152, 1464, 1465, 1466, 1467,
	1469, 1470, 1182, 1072, 183, 183, 1025, 1623, 2597, 1175,
	3452, 2592, 1389, 1561, 176, 176, 597, 3412, 3275, 1560,
	1048, 1201, 177, 177, 214, 1200, 1897, 3406, 600, 1459,
	1561, 1074, 3185, 1167, 1172, 3336, 1560, 3404, 214, 182,
	1564, 1173, 2592, 151, 151, 1196, 1207, 3270, 1212, 3163,
	1218, 3162, 3150, 214, 3149, 3148, 1342, 1559, 1542, 3147,
	3141, 2593, 1251, 1254, 3140, 3139, 2587, 2585, 2586, 2578,
	2579, 2580, 2581, 2583, 2584, 2386, 3050, 142, 142, 184,
	2999, 1529, 2582, 2998, 3036, 2996, 2593, 2083, 1328, 1330,
	831, 2989, 2958, 2957, 2956, 2883, 2879, 1258, 1258, 1326,
	2576, 2577, 2658, 2829, 2611, 1303, 1306, 2602, 2593, 2575,
	2572, 2247, 1817, 2571, 2569, 1334, 2558, 2557, 1262, 2556,
	2553, 2550, 2528, 183, 1259, 2527, 1543, 2520, 1541, 3657,
	2576, 2577, 1435, 176, 2412, 2222, 1338, 1196, 2093, 2593,
	1459, 177, 1397, 1341, 1003, 1458, 3627, 3626, 3567, 1024,
	2370, 1849, 2908, 1815, 3521, 1017, 1313, 3519, 3449, 3446,
	3443, 3442, 151, 3441, 3437, 3431, 1354, 1464, 1465, 1466,
	1467, 1469, 1470, 3401, 2588, 2589, 2590, 3396, 3395, 2060,
	1434, 2587, 2585, 2586, 2578, 2579, 2580, 2581, 2583, 2584,
	3332, 3309, 2066, 3321, 3293, 1388, 3292, 3280, 3279, 2588,
	2589, 2590, 1460, 1461, 3259, 3256, 2587, 2585, 2586, 2578,
	2579, 2580, 2581, 2583, 2584, 3250, 3180, 3161, 2677, 1347,
	3101, 3098, 1491, 1433, 3027, 2300, 1362, 3026, 1427, 1463,
	2586, 2578, 2579, 2580, 2581, 2583, 2584, 3014, 2582, 1445,
	1432, 1748, 2315, 3013, 2971, 3269, 2874, 2836, 2819, 214,
	2483, 2782, 2588, 2589, 2590, 1430, 2751, 1462, 2728, 2587,
	2585, 2586, 2578, 2579, 2580, 2581, 2583, 2584, 2582, 2705,
	2704, 1460, 1461, 2679, 831, 214, 1601, 1592, 2616, 2549,
	2548, 810, 2533, 809, 2511, 214, 1081, 214, 214, 214,
	214, 1491, 2352, 1460, 1461, 592, 214, 214, 1463, 1436,
	592, 214, 1565, 1455, 1456, 1647, 214, 2576, 2577, 1562,
	182, 1554, 1182, 1563, 1551, 2251, 2250, 1208, 2225, 1640,
	1463, 1719, 2202, 2592, 2186, 2116, 1462, 1525, 1636, 1593,
	1589, 1588, 1587, 1081, 1586, 1899, 1585, 1584, 1583, 1611,
	1468, 1582, 1581, 1579, 1578, 182, 1639, 1645, 1462, 1577,
	184, 1631, 1576, 2592, 1630, 1575, 1574, 1649, 1555, 1556,
	1573, 1572, 1716, 1598, 1599, 1571, 1753, 1570, 1724, 1569,
	1568, 1490, 1492, 2639, 1718, 1567, 1544, 1526, 1524, 1750,
	1519, 1021, 1214, 1021, 2705, 184, 1047, 1460, 1461, 2580,
	2581, 2583, 2584, 1038, 183, 1031, 142, 990, 3424, 3253,
	1644, 3182, 3136, 2995, 176, 2978, 2974, 1491, 2537, 1468,
	2203, 2125, 177, 2244, 1463, 831, 2123, 3184, 2121, 2994,
	2593, 2119, 1643, 1543, 2117, 1483, 2576, 2577, 2675, 183,
	1522, 3227, 833, 2385, 1632, 3444, 2791, 1067, 1069, 176,
	1490, 1492, 1462, 1628, 3273, 2582, 1616, 177, 3226, 2981,
	2593, 1574, 2821, 1721, 1658, 597, 2820, 3379, 1182, 214,
	597, 1063, 1591, 2731, 3407, 1081, 1623, 600, 151, 1746,
	1060, 1747, 600, 3059, 3405, 1747, 1619, 1618, 1625, 1617,
	1743, 1762, 1063, 1561, 1615, 1614, 1648, 1196, 1613, 1560,
	1068, 1715, 1574, 1679, 1483, 1425, 3335, 1747, 1813, 2555,
	2554, 1722, 1641, 1650, 214, 1063, 2493, 2302, 214, 214,
	1064, 1733, 1361, 3025, 1793, 794, 1549, 1795, 2317, 1369,
	1800, 214, 1484, 3630, 2768, 1468, 2767, 1896, 1398, 1739,
	214, 3374, 214, 1370, 214, 1846, 2085, 3042, 214, 1528,
	2587, 2585, 2586, 2578, 2579, 2580, 2581, 2583, 2584, 1213,
	214, 3552, 3029, 3312, 795, 2841, 1490, 1492, 1460, 1461,
	2745, 1791, 2620, 1061, 2910, 1777, 2543, 2101, 2249, 1580,
	1062, 2585, 2586, 2578, 2579, 2580, 2581, 2583, 2584, 1850,
	1557, 2760, 1843, 1235, 3563, 1463, 3560, 2800, 3006, 1773,
	1182, 1484, 1182, 214, 1182, 3498, 3067, 214, 1351, 1804,
	1182, 3020, 2086, 1182, 214, 1002, 214, 214, 3553, 2419,
	1483, 2382, 3463, 1462, 3598, 3597, 1182, 1182, 1182, 597,
	214, 2480, 1808, 1839, 1201, 214, 1858, 1867, 1200, 651,
	2687, 600, 3216, 1233, 592, 214, 1223, 214, 790, 214,
	2256, 214, 788, 214, 1472, 1464, 1465, 1466, 1467, 1469,
	1470, 3654, 786, 784, 2689, 182, 1799, 214, 1395, 1810,
	214, 2112, 214, 1018, 781, 1018, 1757, 2576, 2577, 1951,
	1758, 214, 2676, 3365, 2087, 2084, 775, 1069, 3358, 1949,
	1396, 3044, 3040, 1734, 3039, 2273, 1865, 1901, 1915, 3003,
	579, 1827, 214, 1826, 3002, 184, 1468, 2271, 214, 2154,
	2532, 214, 1060, 829, 2531, 1234, 1842, 1484, 652, 3203,
	1063, 1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470,
	182, 1878, 2282, 1081, 1880, 2530, 2529, 1882, 1903, 1068,
	1863, 1885, 1860, 831, 2497, 831, 2335, 3200, 2327, 183,
	845, 1470, 1326, 1394, 1326, 2324, 1069, 1349, 2305, 176,
	2578, 2579, 2580, 2581, 2583, 2584, 1998, 177, 1894, 1759,
	184, 1054, 2237, 1978, 1808, 1444, 1969, 1904, 2041, 1431,
	182, 2730, 1761, 2089, 3462, 1197, 2111, 828, 151, 3201,
	1912, 1913, 1914, 1999, 1268, 778, 1267, 585, 1048, 1892,
	1266, 1893, 1265, 1825, 597, 1061, 1905, 3614, 1068, 2072,
	2073, 1442, 1062, 212, 183, 2582, 600, 2273, 1081, 2379,
	184, 1962, 2285, 2842, 176, 1963, 3291, 2072, 2098, 2271,
	1287, 1906, 177, 1910, 2304, 1931, 1959, 1763, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 1995, 1996, 1243, 1229,
	2245, 2102, 2263, 151, 1964, 1770, 2228, 2293, 1967, 1655,
	1975, 214, 830, 2134, 183, 2138, 2138, 2152, 2056, 2072,
	1976, 1438, 2172, 2174, 176, 3342, 3523, 2178, 1973, 3615,
	587, 2292, 177, 2083, 2584, 1766, 1658, 1658, 860, 1966,
	2101, 1968, 1081, 214, 1360, 3228, 1918, 1344, 1363, 1972,
	2592, 1977, 214, 151, 1961, 214, 1771, 1772, 1081, 810,
	1924, 1986, 810, 810, 1987, 1988, 2848, 1738, 1737, 1443,
	2226, 1747, 1744, 1864, 2056, 1679, 1679, 1748, 2315, 3597,
	2097, 1748, 2315, 2321, 1767, 3196, 1764, 1393, 831, 3197,
	2223, 2227, 2110, 1424, 654, 653, 1046, 2114, 2115, 3016,
	2847, 831, 1063, 1748, 2315, 831, 2052, 2461, 2194, 2089,
	3212, 1370, 707, 2235, 2284, 3617, 849, 2724, 2893, 2209,
	1370, 3634, 1060, 2219, 2220, 2068, 2686, 1632, 1441, 3199,
	2050, 581, 1630, 829, 537, 3587, 1028, 1021, 214, 2210,
	1017, 3202, 1017, 1925, 1345, 2095, 1182, 2593, 770, 586,
	827, 2064, 1250, 3117, 1971, 2485, 2486, 2062, 532, 990,
	1919, 1021, 824, 1466, 1467, 1469, 1470, 1026, 1741, 3116,
	821, 3028, 2193, 1081, 3290, 1350, 2797, 2742, 214, 647,
	1231, 646, 2303, 2798, 1958, 2147, 214, 2163, 1248, 583,
	792, 2176, 1408, 831, 791, 2184, 2185, 214, 782, 2736,
	2195, 142, 1724, 2199, 2200, 1790, 2268, 828, 782, 783,
	214, 1920, 2239, 1182, 1773, 1061, 1775, 2089, 2890, 1773,
	782, 1628, 1062, 1019, 1950, 1760, 214, 1081, 580, 2283,
	1182, 1985, 214, 214, 1948, 1348, 2046, 770, 1764, 819,
	2797, 770, 3438, 771, 3198, 2047, 1250, 2246, 1563, 2048,
	1029, 2274, 1960, 2053, 2688, 214, 3210, 3616, 214, 821,
	1680, 1552, 1286, 821, 214, 584, 683, 2259, 2339, 2754,
	2578, 2579, 2580, 2581, 2583, 2584, 582, 2254, 214, 2261,
	2340, 1228, 830, 2336, 2673, 214, 3041, 214, 3549, 214,
	2891, 1742, 2367, 2272, 3246, 214, 1555, 1556, 214, 2253,
	214, 820, 214, 1779, 214, 214, 2508, 214, 1182, 1182,
	1182, 2262, 1182, 2257, 3343, 2308, 2356, 214, 214, 2307,
	214, 214, 1783, 779, 2322, 3644, 2260, 1875, 2467, 3622,
	2506, 214, 771, 3481, 2325, 3017, 771, 2316, 2318, 2319,
	2320, 1923, 2286, 2289, 214, 214, 214, 3586, 2277, 214,
	2435, 214, 2438, 2439, 214, 1658, 214, 2499, 214, 2406,
	2407, 2402, 1063, 2436, 2155, 1780, 1764, 2339, 2299, 2339,
	3113, 3303, 1437, 1603, 2376, 1518, 2295, 2326, 3211, 214,
	214, 214, 214, 214, 214, 2393, 214, 2306, 772, 2089,
	708, 2718, 597, 1405, 1679, 1359, 2049, 1201, 1917, 2332,
	2323, 2341, 3604, 2449, 600, 2051, 1384, 1173, 2418, 2350,
	2451, 2470, 2452, 2055, 214, 3550, 2345, 2360, 2347, 1018,
	827, 2433, 533, 1196, 1764, 1346, 1757, 3509, 3448, 2720,
	1758, 1655, 1655, 2198, 2717, 2395, 2503, 2472, 2547, 2474,
	142, 1607, 2388, 1018, 2440, 1784, 2441, 1045, 1027, 2504,
	1794, 2408, 3247, 2509, 2722, 1802, 1757, 1385, 3635, 2403,
	1758, 2384, 830, 2384, 1326, 2399, 2446, 2400, 2409, 2401,
	2420, 3479, 2405, 1610, 534, 1801, 2453, 772, 2455, 2218,
	2457, 772, 3252, 3107, 2991, 1041, 1406, 2092, 2063, 3585,
	3118, 3548, 1605, 3547, 3055, 773, 2465, 1607, 1372, 2038,
	3480, 1196, 1196, 2721, 3596, 1797, 1785, 1786, 1608, 2500,
	2525, 2526, 2469, 214, 535, 1781, 536, 1748, 1745, 1759,
	3620, 3594, 2404, 3384, 3258, 2535, 1771, 1772, 2786, 1610,
	2466, 1606, 1761, 849, 774, 2374, 1451, 849, 1450, 1834,
	2273, 1600, 2478, 1196, 2459, 1165, 2482, 1782, 2196, 1759,
	1165, 2635, 2287, 1039, 1798, 3287, 2521, 1034, 1407, 524,
	2448, 3114, 1761, 1774, 1608, 1735, 1440, 2947, 2861, 2454,
	3639, 2456, 2666, 2458, 2536, 3159, 2477, 1196, 3349, 1196,
	3348, 3330, 3428, 1732, 773, 3005, 818, 1763, 773, 3645,
	3215, 1876, 2787, 3621, 2700, 2696, 2505, 3214, 2475, 2375,
	2363, 2354, 1859, 1081, 2613, 2507, 1848, 1847, 2498, 2468,
	1609, 1821, 2889, 2190, 1982, 2627, 2628, 1763, 3489, 3450,
	2629, 2479, 214, 774, 831, 3623, 1449, 774, 604, 2036,
	214, 1955, 2039, 1728, 1787, 1450, 2626, 214, 3072, 3262,
	214, 214, 1081, 2351, 1289, 2309, 3372, 3370, 3120, 3331,
	1730, 1081, 2710, 2707, 2706, 2491, 1974, 3286, 214, 2542,
	1911, 1451, 2234, 2973, 2653, 704, 1609, 1731, 2643, 697,
	2632, 1260, 2631, 214, 2233, 2656, 1386, 2232, 2654, 2655,
	2192, 2035, 2231, 1274, 2664, 2191, 1764, 1272, 1261, 2358,
	706, 214, 214, 214, 828, 2641, 3433, 214, 1788, 2637,
	214, 3238, 2642, 2756, 2644, 2634, 2948, 214, 214, 2662,
	214, 214, 214, 1021, 2949, 1983, 1764, 2692, 3121, 2671,
	3638, 2657, 3160, 1449, 214, 214, 214, 2684, 1021, 1518,
	2638, 2661, 3217, 214, 2682, 2830, 1017, 2608, 2609, 2610,
	2690, 3338, 2621, 3213, 1857, 214, 1182, 1755, 214, 3601,
	1655, 2709, 3368, 3165, 2714, 2715, 1081, 1021, 3492, 2962,
	1017, 1373, 3288, 2636, 1081, 2106, 3434, 2288, 3451, 214,
	2697, 1534, 214, 214, 3603, 1539, 214, 3565, 2674, 1182,
	214, 3445, 2733, 2680, 2681, 2652, 2310, 2311, 1182, 1182,
	1182, 2693, 2694, 1422, 3328, 214, 3308, 2664, 2668, 2669,
	2670, 214, 3158, 3046, 2606, 2773, 214, 2708, 214, 2735,
	2712, 2777, 2793, 2037, 2701, 214, 2605, 1420, 1658, 2685,
	3339, 2691, 2667, 2873, 3493, 1760, 3329, 2839, 1402, 2570,
	605, 606, 3435, 1400, 2155, 2155, 1762, 2510, 2355, 1182,
	1182, 1383, 1381, 2334, 1644, 1379, 2301, 214, 214, 1377,
	2252, 214, 2723, 2752, 1658, 1760, 1638, 1679, 1182, 2743,
	2817, 2729, 1762, 1375, 2802, 1367, 2738, 702, 703, 1365,
	2739, 695, 696, 2765, 2740, 1635, 2747, 2741, 1423, 1273,
	1339, 1270, 1947, 1271, 2837, 214, 705, 1081, 214, 214,
	1081, 214, 2856, 1679, 2753, 1804, 2725, 2726, 2855, 824,
	2727, 2794, 2463, 1804, 2307, 2462, 2433, 2443, 1957, 2648,
	2744, 1928, 214, 1717, 1021, 2433, 1566, 1343, 1247, 2105,
	1190, 3543, 1196, 1079, 3233, 608, 607, 3223, 780, 2748,
	2749, 3486, 3189, 2750, 3070, 3023, 2155, 2155, 2155, 3583,
	2832, 2799, 1842, 2774, 2828, 1421, 3021, 3004, 2854, 831,
	2808, 2785, 2778, 2779, 2780, 1081, 2801, 2776, 2769, 2380,
	142, 142, 2369, 2746, 2853, 2368, 1081, 2901, 214, 1419,
	2348, 2815, 2816, 1889, 1888, 609, 610, 2810, 2811, 2812,
	1401, 2813, 2814, 2649, 1886, 1399, 2838, 2789, 2898, 1165,
	2876, 3389, 1884, 1382, 1380, 1018, 936, 1378, 2844, 2904,
	2845, 1376, 2846, 2823, 2824, 1881, 1879, 2885, 2886, 1877,
	1018, 1603, 1868, 2850, 1818, 1374, 2792, 1366, 1816, 1805,
	1792, 1364, 1808, 1789, 1776, 2647, 1765, 2857, 1453, 999,
	849, 1946, 2859, 1269, 2489, 210, 1165, 527, 528, 1018,
	543, 527, 543, 553, 558, 2651, 2959, 574, 1019, 1646,
	1019, 785, 787, 1000, 3598, 210, 3515, 3282, 3277, 3276,
	2434, 1751, 2881, 214, 1225, 3391, 2291, 3080, 1773, 2273,
	2892, 2894, 2895, 694, 1921, 1926, 2900, 210, 214, 1607,
	2911, 2271, 1945, 2339, 1081, 2912, 2907, 1658, 1196, 3440,
	2916, 1417, 1418, 2273, 2913, 1944, 1995, 2917, 2914, 2982,
	3414, 2977, 3166, 2851, 214, 2290, 2926, 2924, 2490, 2312,
	2294, 1610, 1995, 2927, 1454, 2951, 1457, 2990, 1725, 2331,
	2298, 2650, 2329, 1460, 1461, 538, 1679, 1460, 1461, 2296,
	1605, 2330, 2297, 3485, 2969, 2970, 1658, 1658, 2952, 1001,
	3453, 3063, 3054, 2955, 2988, 2387, 1608, 3618, 2177, 1720,
	1463, 214, 1658, 1658, 1651, 2966, 2967, 2672, 3637, 3455,
	2964, 1353, 3030, 1021, 1021, 3000, 142, 1352, 1165, 1606,
	1531, 549, 2109, 527, 527, 1679, 1679, 2960, 1462, 2576,
	2577, 210, 1462, 1658, 3137, 3043, 2984, 1460, 1461, 214,
	214, 1679, 1679, 2265, 2264, 2993, 1018, 214, 2896, 2265,
	2678, 2266, 2113, 3045, 2107, 2080, 1081, 214, 2992, 2888,
	1529, 1182, 2997, 1655, 1404, 1527, 3646, 1403, 3425, 3034,
	3035, 3037, 1679, 3362, 3322, 214, 3320, 3249, 3183, 3008,
	3104, 3060, 3097, 3086, 3082, 3065, 3049, 3048, 3047, 214,
	214, 1182, 1182, 1182, 3019, 214, 214, 214, 1609, 1655,
	214, 214, 2809, 2783, 214, 214, 2781, 1182, 2445, 2444,
	2397, 2373, 2349, 214, 1081, 3061, 2067, 3074, 1943, 1942,
	1941, 3093, 3077, 1940, 1871, 3073, 3076, 1870, 2155, 2155,
	1869, 1851, 1829, 2307, 1081, 1828, 1824, 1823, 1822, 1820,
	3022, 1819, 3024, 1416, 1415, 1298, 1297, 1296, 1295, 1294,
	1293, 2701, 1292, 3068, 3064, 1291, 1290, 3105, 1288, 1283,
	1282, 3062, 1017, 1281, 3135, 1280, 3075, 1279, 1242, 1241,
	1240, 1239, 1238, 3078, 3084, 2393, 3083, 1017, 1237, 214,
	1236, 1230, 1224, 1222, 3089, 3094, 3095, 1021, 3088, 1221,
	3100, 1658, 3096, 1044, 3102, 1043, 3099, 974, 3103, 883,
	1726, 793, 3122, 3131, 638, 2433, 1017, 777, 2155, 2155,
	2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155, 2155,
	2155, 2155, 2155, 2155, 2155, 2155, 2155, 3115, 2155, 3341,
	1679, 3123, 1410, 73, 1232, 624, 67, 3018, 633, 3497,
	2716, 1927, 214, 3110, 1842, 1371, 1929, 2640, 2201, 3478,
	3144, 2546, 1081, 3420, 1081, 3090, 3091, 3092, 3302, 2104,
	1548, 69, 871, 956, 3245, 3244, 3190, 3007, 2423, 2065,
	3242, 3241, 838, 214, 214, 214, 1165, 1084, 1736, 877,
	1749, 2248, 2137, 1659, 880, 214, 3157, 3178, 1534, 3106,
	1656, 882, 214, 881, 214, 1018, 1018, 214, 214, 214,
	1658, 1657, 1550, 3171, 879, 3208, 1654, 2357, 2391, 1081,
	214, 214, 1182, 1277, 757, 1081, 1740, 1182, 3167, 3174,
	2061, 2099, 2541, 214, 1545, 851, 3172, 873, 3170, 3168,
	3169, 2096, 1655, 3173, 3175, 2159, 1037, 3219, 214, 1679,
	850, 1081, 2661, 3179, 1182, 2645, 3209, 1021, 3188, 3176,
	2796, 2987, 3207, 3268, 1981, 1021, 2481, 641, 3220, 3221,
	2573, 1165, 2081, 1017, 1030, 2160, 2153, 3236, 1021, 2149,
	2381, 1426, 214, 3186, 3187, 1520, 1032, 2392, 1071, 854,
	2059, 1655, 1655, 1536, 1081, 2515, 1439, 2803, 2659, 2243,
	3278, 3512, 3218, 3230, 1989, 1833, 998, 1655, 1655, 997,
	3264, 3267, 996, 3240, 1042, 3503, 3500, 3251, 3263, 3254,
	2763, 574, 3235, 1729, 1081, 3272, 2258, 1079, 1512, 2770,
	867, 3265, 1195, 3239, 2625, 3231, 2831, 210, 1655, 210,
	210, 1244, 1187, 3281, 210, 1165, 3439, 1511, 3260, 789,
	3430, 1058, 210, 1203, 1057, 1056, 2699, 3300, 3643, 3015,
	3314, 1165, 1081, 181, 1970, 823, 178, 180, 3289, 179,
	214, 3032, 214, 3294, 1081, 214, 2755, 1227, 90, 1018,
	35, 3299, 16, 214, 117, 116, 3232, 115, 114, 113,
	112, 1246, 111, 110, 109, 3300, 210, 210, 214, 1187,
	3310, 108, 107, 106, 1019, 3325, 214, 1998, 105, 104,
	103, 210, 102, 101, 3248, 3324, 100, 99, 1842, 1285,
	3315, 3316, 98, 3255, 97, 96, 95, 214, 1019, 94,
	3319, 214, 3318, 210, 210, 210, 210, 1187, 3376, 214,
	93, 3271, 92, 3323, 1182, 91, 574, 570, 210, 210,
	214, 567, 49, 48, 3345, 3352, 3371, 3344, 3381, 3361,
	89, 3383, 694, 88, 15, 33, 13, 53, 54, 12,
	1902, 214, 214, 3380, 3359, 28, 1165, 3363, 29, 79,
	3369, 3398, 3399, 3394, 78, 27, 3410, 3411, 14, 26,
	24, 3402, 10, 214, 3375, 8, 1655, 1658, 7, 214,
	3386, 30, 3388, 3393, 1612, 11, 3392, 3267, 3385, 214,
	3387, 3390, 3351, 147, 146, 72, 145, 71, 144, 143,
	210, 70, 1017, 1017, 22, 9, 139, 3377, 3058, 3409,
	1165, 2765, 3436, 66, 210, 141, 1679, 3423, 3427, 1018,
	140, 63, 3426, 138, 137, 3413, 64, 1018, 3418, 558,
	136, 135, 1658, 3447, 65, 134, 3353, 3354, 20, 5,
	1018, 52, 6, 3284, 2840, 214, 1182, 83, 84, 31,
	61, 60, 214, 59, 19, 51, 1182, 1182, 18, 171,
	170, 169, 1182, 168, 163, 162, 214, 167, 214, 165,
	164, 1679, 166, 3454, 3469, 1196, 161, 133, 3380, 3457,
	173, 172, 3461, 175, 159, 1655, 155, 154, 3482, 158,
	160, 157, 214, 156, 153, 3465, 3473, 174, 214, 214,
	3494, 1081, 3460, 132, 131, 56, 3467, 3468, 3466, 214,
	214, 130, 3472, 129, 3502, 3505, 128, 3506, 127, 126,
	3510, 55, 17, 2, 3516, 1658, 1, 3474, 0, 3475,
	0, 0, 3499, 3518, 1998, 3520, 0, 0, 0, 0,
	0, 3527, 0, 0, 0, 214, 0, 3528, 0, 1196,
	3524, 0, 3522, 0, 2512, 2513, 3554, 3507, 0, 3495,
	0, 0, 0, 0, 1679, 0, 3542, 0, 3541, 3539,
	3540, 0, 0, 0, 0, 0, 1017, 0, 2155, 0,
	3570, 0, 0, 3556, 214, 0, 0, 0, 0, 0,
	3572, 3579, 3574, 0, 0, 2159, 2159, 0, 3584, 0,
	3580, 3573, 3571, 3575, 214, 0, 3576, 0, 0, 0,
	3514, 0, 0, 3577, 3578, 0, 0, 3581, 0, 3590,
	3591, 2155, 3595, 0, 3593, 527, 0, 3600, 214, 0,
	214, 3599, 3502, 3592, 0, 3505, 3608, 3607, 3610, 3606,
	3602, 0, 0, 0, 3613, 0, 210, 3612, 210, 0,
	0, 210, 0, 0, 0, 0, 2599, 2600, 2601, 0,
	0, 1203, 0, 1187, 210, 3625, 210, 3624, 0, 0,
	0, 210, 1203, 543, 0, 3632, 210, 1203, 0, 0,
	0, 3636, 574, 0, 2393, 0, 3631, 3640, 3633, 3605,
	0, 0, 0, 3517, 0, 0, 0, 2159, 2159, 2159,
	3641, 3642, 0, 3647, 0, 3648, 0, 0, 0, 0,
	0, 3651, 3652, 3653, 0, 0, 3655, 3656, 0, 0,
	0, 0, 0, 3660, 0, 0, 1460, 1461, 2155, 0,
	3514, 3658, 0, 0, 0, 1602, 1017, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 1491, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1655, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 1165, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1165, 0, 1655, 0, 0,
	0, 0, 0, 0, 1165, 210, 3126, 0, 0, 0,
	0, 2576, 2577, 0, 2594, 2595, 2596, 0, 0, 0,
	0, 0, 0, 0, 1485, 1486, 1487, 1488, 849, 0,
	1019, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 0, 1019, 685, 0, 0, 0,
	210, 0, 0, 0, 210, 210, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 1490, 1492, 1856, 0, 0,
	0, 57, 688, 687, 1019, 2591, 210, 0, 210, 0,
	210, 0, 0, 0, 527, 58, 0, 0, 0, 0,
	1655, 0, 0, 0, 1477, 1478, 1872, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 0, 0, 1165, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	0, 0, 0, 694, 0, 0, 0, 1460, 1461, 2582,
	210, 0, 1187, 210, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 574, 1491, 2869, 2870,
	85, 210, 0, 0, 1463, 75, 82, 0, 0, 0,
	210, 210, 0, 210, 0, 210, 0, 210, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 1462, 1952, 0, 0, 1953, 0, 1954, 2159,
	2159, 1482, 0, 0, 0, 0, 1484, 210, 1479, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1019, 0, 0, 2592, 0, 0, 0, 558, 0,
	1165, 0, 0, 1165, 574, 0, 0, 210, 2928, 2929,
	2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939,
	2940, 2941, 2942, 2943, 2944, 2945, 2946, 0, 2950, 0,
	0, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 2159,
	2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
	2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 1165, 2159,
	0, 0, 0, 0, 0, 0, 1490, 1492, 0, 1165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 2593, 0, 1480, 1476, 0, 1473, 1471, 1472, 1464,
	1465, 1466, 1467, 1469, 1470, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 80, 0, 81, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 527, 0, 0,
	118, 0, 0, 0, 0, 0, 1460, 1461, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 1491, 0, 0, 527,
	0, 0, 0, 1463, 0, 0, 210, 1165, 527, 0,
	0, 210, 0, 0, 2588, 2589, 2590, 119, 0, 1489,
	0, 2587, 2585, 2586, 2578, 2579, 2580, 2581, 2583, 2584,
	152, 1462, 0, 0, 0, 0, 0, 1484, 183, 0,
	1482, 0, 0, 0, 0, 837, 0, 0, 176, 837,
	1019, 1019, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 1461, 0, 1493,
	1494, 1495, 1503, 1504, 1505, 0, 0, 686, 0, 0,
	0, 1205, 0, 1209, 0, 1215, 1491, 0, 0, 0,
	0, 0, 0, 1463, 543, 0, 0, 0, 1509, 0,
	0, 0, 0, 0, 1485, 1486, 1487, 1488, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 1165,
	1482, 0, 0, 0, 2281, 0, 0, 1479, 0, 0,
	0, 0, 210, 0, 0, 1490, 1492, 0, 0, 0,
	0, 0, 0, 210, 1480, 1476, 0, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 210, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 210, 0, 0, 0, 0, 1165, 210, 2342,
	0, 0, 0, 0, 1485, 1486, 1487, 1488, 0, 1483,
	0, 0, 0, 0, 1468, 0, 0, 1165, 0, 0,
	0, 1203, 0, 0, 210, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 1019, 0, 0, 0, 1500, 0,
	0, 1510, 1390, 0, 1856, 1490, 1492, 0, 0, 0,
	0, 2281, 0, 527, 0, 2396, 0, 0, 0, 0,
	0, 210, 0, 0, 210, 1506, 210, 1507, 210, 0,
	210, 210, 0, 1187, 1477, 1478, 0, 0, 0, 0,
	0, 0, 0, 2416, 694, 0, 2281, 2281, 1489, 0,
	1498, 0, 0, 0, 0, 0, 0, 210, 0, 1483,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	210, 1187, 210, 0, 0, 1203, 0, 1203, 1508, 0,
	1187, 0, 1187, 0, 1187, 0, 1513, 1514, 1515, 1516,
	1517, 0, 0, 0, 0, 1165, 0, 1165, 0, 0,
	0, 0, 0, 0, 0, 210, 210, 210, 210, 1187,
	210, 0, 210, 0, 0, 57, 1533, 0, 0, 0,
	0, 0, 1546, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	210, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 1165, 0, 1019, 0, 1484, 0, 1165, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 3307, 0,
	0, 0, 0, 0, 68, 1019, 0, 0, 0, 0,
	0, 0, 1501, 0, 1165, 0, 1473, 1471, 1472, 1464,
	1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 2159,
	0, 3333, 0, 0, 85, 0, 0, 0, 0, 75,
	82, 0, 0, 0, 0, 0, 0, 1165, 0, 0,
	0, 0, 2576, 2577, 0, 2594, 2595, 2596, 0, 1203,
	0, 0, 1596, 1596, 1596, 0, 0, 0, 0, 0,
	0, 2878, 2159, 0, 0, 0, 0, 1165, 0, 0,
	0, 0, 0, 76, 0, 0, 1499, 0, 0, 1474,
	1475, 1481, 1502, 1480, 1476, 0, 1473, 1471, 1472, 1464,
	1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1165, 2591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1165, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 3417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 0, 210, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 0, 0, 2240, 527, 0, 0, 2159,
	0, 0, 0, 527, 0, 0, 527, 527, 0, 0,
	2582, 0, 210, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1203,
	0, 0, 0, 0, 0, 0, 148, 80, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 2281, 2281, 210,
	0, 2597, 0, 2281, 0, 0, 2703, 0, 182, 0,
	0, 0, 0, 2281, 2703, 0, 2281, 2703, 2703, 0,
	689, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	210, 210, 210, 0, 0, 2592, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 210, 0, 0, 1187, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 119, 0, 0, 0, 2759, 0, 0, 2761, 2281,
	0, 0, 210, 0, 152, 0, 210, 0, 0, 0,
	0, 0, 183, 0, 0, 1462, 0, 0, 0, 0,
	0, 210, 176, 0, 1482, 0, 0, 1187, 0, 210,
	177, 1479, 2281, 0, 527, 0, 0, 0, 0, 0,
	0, 2281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 2593, 0, 1165, 0, 0, 0, 849, 0,
	0, 0, 0, 2576, 2577, 0, 2594, 2595, 2596, 0,
	2872, 0, 0, 210, 1856, 0, 0, 1856, 0, 0,
	0, 0, 2877, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2849, 0, 0, 1187, 210, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2591, 0, 1490,
	1492, 0, 0, 0, 0, 0, 1460, 1461, 210, 1493,
	1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 1491, 0, 1477, 1478,
	0, 0, 0, 1463, 0, 2588, 2589, 2590, 1509, 0,
	0, 0, 2587, 2585, 2586, 2578, 2579, 2580, 2581, 2583,
	2584, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 2909, 1980, 0, 1984, 0, 0,
	1482, 2582, 0, 1991, 0, 0, 0, 1479, 0, 0,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 0, 2040, 0, 2042, 2043,
	2044, 2045, 2597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1485, 1486, 1487, 1488, 2069, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 210, 210,
	1484, 0, 0, 1533, 0, 0, 2592, 2094, 0, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 0,
	0, 1510, 0, 0, 527, 1490, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 3203, 0, 0, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 1506, 0, 1507, 0, 2151,
	1203, 2162, 2164, 2169, 1477, 1478, 0, 0, 0, 0,
	0, 0, 0, 3200, 0, 0, 3193, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	3191, 0, 0, 0, 0, 0, 3195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 1508, 0,
	0, 0, 215, 2593, 0, 3201, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 1480, 1476, 0,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 0,
	0, 0, 0, 0, 0, 3056, 210, 3194, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 1489, 0,
	0, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2281, 210, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 591, 0, 2416, 2416, 0, 0, 0,
	0, 694, 694, 2281, 0, 0, 1856, 1856, 0, 0,
	694, 2281, 1501, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 2588, 2589, 2590, 0,
	0, 0, 0, 2587, 2585, 2586, 2578, 2579, 2580, 2581,
	2583, 2584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3196, 0, 0, 0, 3197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3145, 0, 0, 0, 0,
	0, 2344, 0, 2346, 0, 0, 1499, 0, 0, 1474,
	1475, 1481, 1502, 1480, 1476, 3199, 1473, 1471, 1472, 1464,
	1465, 1466, 1467, 1469, 1470, 0, 0, 3202, 0, 2564,
	0, 0, 0, 2565, 0, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 210, 0, 0, 0, 0, 0, 1203, 0,
	210, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2281,
	2281, 2281, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 1203, 0, 0, 0, 0, 0, 0, 2281, 0,
	2703, 0, 0, 1203, 1203, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 210, 210, 0, 0,
	3198, 2460, 0, 0, 0, 85, 1460, 1461, 0, 2281,
	75, 82, 1503, 1504, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3257, 0, 1491, 0, 937, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 1203, 0,
	0, 1462, 0, 0, 0, 0, 0, 211, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 2495, 2496, 0, 0, 0, 0, 2502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 2516, 2517, 0, 0,
	0, 0, 2094, 0, 0, 0, 0, 0, 0, 0,
	0, 2524, 0, 0, 1485, 1486, 1487, 1488, 0, 0,
	0, 0, 0, 0, 1468, 0, 2281, 0, 2703, 0,
	0, 3327, 0, 0, 0, 0, 0, 2544, 0, 210,
	0, 0, 0, 0, 0, 77, 0, 0, 1500, 0,
	0, 1510, 2559, 0, 210, 1490, 1492, 0, 0, 0,
	0, 0, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 80, 0,
	81, 0, 0, 3327, 1477, 1478, 0, 2281, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 182,
	1498, 2169, 2169, 2169, 0, 0, 1203, 0, 0, 1483,
	0, 689, 0, 0, 0, 118, 1596, 0, 0, 0,
	0, 0, 0, 0, 2630, 0, 0, 210, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2909,
	0, 0, 0, 0, 1082, 527, 0, 1183, 0, 1082,
	0, 0, 119, 0, 0, 3327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 1489, 0,
	837, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 837, 0, 0, 1484, 0, 0, 0,
	1183, 1183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 151, 0, 0, 0, 0, 0, 2703, 2719,
	0, 0, 1501, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 1203, 0, 1203, 0, 0, 0, 0, 0,
	0, 0, 1496, 1491, 1183, 1183, 0, 0, 0, 1183,
	1463, 0, 0, 1183, 0, 1509, 0, 0, 3490, 0,
	0, 0, 0, 0, 1203, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 2281, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1183, 0, 1499, 0, 0, 0,
	0, 2909, 1502, 1480, 1476, 0, 1473, 1471, 1472, 1464,
	1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2281, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	3327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1510, 0,
	0, 0, 1490, 1492, 1203, 0, 2281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2858,
	0, 0, 1506, 1991, 1507, 0, 0, 0, 0, 2864,
	2865, 1477, 1478, 2868, 0, 0, 0, 2871, 0, 0,
	0, 0, 0, 0, 0, 0, 2875, 1498, 0, 0,
	0, 0, 0, 0, 0, 2882, 1483, 0, 2630, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 2902,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	1086, 211, 211, 1086, 0, 1086, 211, 0, 2918, 2919,
	0, 2920, 2921, 2922, 211, 0, 2923, 0, 0, 0,
	2925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 2953, 2954, 0, 0, 0, 1086, 1086, 211, 211,
	0, 0, 0, 1484, 0, 0, 2963, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 2972, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 211, 211, 211, 211, 0,
	1086, 1086, 0, 0, 0, 1086, 0, 0, 1082, 1086,
	211, 211, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1183, 3001, 0, 0, 0, 0,
	0, 0, 0, 2576, 2577, 0, 2594, 2595, 2596, 0,
	3009, 3012, 0, 0, 0, 1082, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 3031, 1474, 1475, 1481, 1502,
	1480, 1476, 211, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2591, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 903, 0, 0, 0, 0, 0, 0,
	0, 58, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1596, 0, 62, 0, 0, 0, 0,
	0, 0, 3085, 0, 0, 0, 0, 0, 0, 0,
	39, 122, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 68, 0, 0, 0,
	1183, 2582, 598, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 42, 0, 0, 598, 0, 74, 0, 2598, 123,
	0, 0, 3124, 3125, 0, 40, 85, 0, 3129, 3130,
	0, 75, 82, 3133, 3134, 0, 0, 0, 0, 0,
	3138, 0, 2597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 3142,
	0, 0, 0, 0, 0, 0, 3146, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 2592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1020, 0,
	1460, 1461, 1183, 0, 1183, 0, 1183, 0, 0, 0,
	0, 0, 1183, 0, 0, 1183, 0, 0, 0, 0,
	1491, 0, 0, 211, 0, 0, 0, 1463, 1183, 1183,
	1183, 0, 0, 0, 1086, 0, 211, 211, 211, 0,
	0, 0, 0, 211, 0, 0, 591, 0, 211, 3012,
	0, 0, 0, 2593, 0, 1462, 0, 0, 0, 0,
	1086, 0, 0, 0, 1482, 0, 77, 0, 0, 0,
	0, 1479, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 1086, 907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 148, 80,
	0, 81, 0, 45, 0, 0, 0, 124, 0, 0,
	2867, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 50, 0, 3012, 1082, 118, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 3295, 3296, 3297, 0, 2588, 2589, 2590, 1490,
	1492, 0, 0, 2587, 2585, 2586, 2578, 2579, 2580, 2581,
	2583, 2584, 1013, 119, 0, 0, 0, 3305, 3306, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 1477, 1478,
	0, 3313, 0, 0, 183, 0, 1086, 211, 0, 0,
	0, 0, 0, 1086, 176, 0, 0, 0, 0, 0,
	1082, 205, 177, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3012, 151, 0, 0, 3, 0, 0, 0,
	3350, 0, 211, 0, 0, 0, 211, 211, 0, 3357,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 3364,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	211, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3012, 0, 1082, 3012, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 3012, 3012, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	1086, 0, 1086, 0, 0, 0, 0, 0, 1086, 0,
	0, 1086, 211, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1086, 1086, 0, 3429, 0,
	0, 3432, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 211, 0, 211, 0, 211, 0, 211,
	0, 211, 0, 0, 209, 0, 209, 209, 1183, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 598,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 1476, 0,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 211,
	0, 0, 0, 209, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1183, 0, 0, 209, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 1082,
	837, 0, 1183, 0, 0, 0, 0, 0, 0, 0,
	209, 209, 209, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 3538, 3538, 3538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3557, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 0, 0, 0, 3012, 1086, 3012, 0, 0,
	1183, 1183, 1183, 1491, 1183, 0, 0, 0, 0, 0,
	1463, 3538, 0, 0, 0, 1509, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 3538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 1184, 0, 1083,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1510, 0,
	0, 0, 1490, 1492, 0, 0, 0, 0, 0, 0,
	1184, 1184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 1086, 0, 1076, 1184, 1184, 1483, 0, 0, 1184,
	1194, 0, 0, 1184, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 1086, 0, 0, 1086, 0,
	211, 0, 0, 1626, 1184, 1020, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 209, 1626, 209, 0, 1489, 211, 0, 598, 0,
	0, 0, 211, 598, 0, 1082, 57, 0, 0, 1302,
	1302, 1302, 1194, 1484, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 1335, 1336, 0, 0, 0, 0,
	0, 0, 0, 211, 62, 0, 211, 0, 211, 1501,
	211, 0, 211, 211, 1082, 0, 1086, 1086, 1086, 0,
	1086, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 1409, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	75, 82, 0, 0, 0, 0, 0, 211, 211, 211,
	211, 0, 211, 1499, 211, 0, 1474, 1475, 1481, 1502,
	1480, 1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 0, 0, 0, 0, 0, 0, 1183, 0,
	0, 0, 211, 0, 76, 0, 0, 0, 1082, 0,
	0, 0, 598, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1183, 0, 0, 0, 0, 0, 0, 0, 0,
	1183, 1183, 1183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 209, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 209, 0, 209, 0, 0,
	0, 1183, 1183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	1183, 0, 0, 0, 0, 77, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 1184, 0, 0, 0, 0, 1082,
	0, 0, 1082, 0, 62, 0, 0, 148, 80, 0,
	81, 0, 0, 0, 0, 1083, 0, 209, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 0, 0, 0, 0, 68, 0, 0, 209, 0,
	0, 689, 0, 0, 0, 118, 0, 598, 209, 0,
	209, 1086, 209, 0, 209, 0, 209, 1633, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 1082, 0, 184,
	1642, 0, 1194, 0, 0, 85, 0, 0, 1082, 0,
	75, 82, 0, 0, 209, 0, 0, 0, 0, 0,
	1086, 0, 119, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 183, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 76, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	1184, 211, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 211, 211, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 1086, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 1086, 211, 0,
	0, 0, 0, 0, 0, 77, 1086, 1086, 1086, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 80, 0,
	81, 0, 1184, 0, 1184, 0, 1184, 0, 0, 1020,
	0, 0, 1184, 0, 0, 1184, 1831, 1086, 1086, 182,
	1838, 0, 0, 0, 0, 211, 0, 0, 1184, 1184,
	1184, 689, 0, 1020, 0, 118, 1086, 0, 209, 0,
	0, 0, 1278, 0, 1862, 0, 1862, 0, 1082, 0,
	0, 0, 0, 1183, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 1086, 0, 211, 1086, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 1183, 1183, 1183, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 152, 0, 1460, 1461, 1183,
	0, 0, 0, 183, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 1838, 1491, 0, 1908,
	0, 177, 0, 0, 1463, 0, 1082, 0, 0, 0,
	0, 0, 0, 1086, 0, 1083, 0, 1922, 0, 0,
	0, 0, 1329, 0, 1086, 0, 0, 1932, 0, 1934,
	0, 1936, 1462, 1938, 0, 1939, 0, 0, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 1479, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 1956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2866, 0, 209,
	0, 0, 0, 1302, 0, 598, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 0,
	872, 87, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 209, 0, 0, 1082, 0, 1082, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 1490, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 209, 0, 209, 0, 209, 0, 209, 209, 0,
	0, 0, 0, 0, 1083, 1477, 1478, 0, 0, 0,
	0, 1082, 0, 0, 1183, 0, 87, 1082, 0, 1183,
	1083, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 209, 0, 209,
	0, 0, 0, 1082, 0, 0, 1183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 209, 209, 209, 0, 209, 211, 209,
	0, 0, 0, 811, 0, 211, 1082, 0, 0, 0,
	0, 0, 832, 0, 1086, 211, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 209, 1184, 1489,
	0, 0, 0, 0, 0, 0, 1082, 2224, 0, 0,
	0, 0, 0, 0, 0, 1008, 0, 1484, 0, 1086,
	1086, 1086, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 211, 1086, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 1086, 0, 0, 1184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 1184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1183, 0, 0, 0,
	0, 0, 0, 0, 1480, 1476, 0, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1184, 1184, 1184, 0, 1184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1194, 0,
	1086, 0, 1086, 0, 0, 1020, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1020, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1838, 0, 0, 0, 0, 0, 2366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 1626,
	0, 0, 0, 0, 0, 0, 0, 1086, 211, 211,
	1086, 0, 0, 1086, 0, 1086, 0, 2398, 1183, 0,
	1302, 0, 1302, 0, 1302, 0, 1194, 1194, 1183, 1183,
	0, 0, 0, 0, 1183, 0, 0, 0, 0, 1086,
	0, 0, 1086, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 2442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2447, 0, 2450, 0,
	0, 0, 0, 1082, 0, 0, 0, 209, 209, 209,
	0, 0, 1086, 0, 0, 0, 1626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 2471, 1194, 2473, 1194, 0, 2476, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 209, 0, 0, 2492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	1086, 0, 0, 0, 0, 0, 1020, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 1491, 0, 0, 0, 0, 0, 87, 1463, 87,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 211, 0, 1460,
	1461, 0, 1086, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 209, 0, 209, 1482, 0, 0, 0, 1491,
	0, 0, 1479, 0, 0, 0, 1463, 0, 0, 211,
	211, 0, 0, 0, 1083, 209, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 832, 87, 87,
	0, 2501, 0, 1482, 0, 0, 0, 87, 0, 0,
	1479, 0, 0, 0, 87, 0, 0, 0, 0, 1485,
	1486, 1487, 1488, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 1492, 0, 211, 1086, 0, 87, 1485, 1486, 1487,
	1488, 0, 0, 0, 1086, 1086, 0, 1468, 1184, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 1083, 1477,
	1478, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1490, 1492,
	0, 1184, 0, 675, 1483, 1020, 1020, 211, 0, 1086,
	1184, 1184, 1184, 0, 0, 2695, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 657, 1477, 1478, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2732, 2734, 2366, 0,
	0, 0, 1483, 1523, 0, 0, 0, 0, 0, 658,
	0, 1184, 1184, 0, 0, 0, 0, 0, 659, 0,
	0, 1532, 0, 0, 0, 1538, 0, 0, 0, 0,
	1184, 0, 0, 1489, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2771, 0,
	680, 1484, 2775, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 1083, 0, 0, 661, 0, 2784, 0, 0,
	1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0,
	0, 1489, 0, 0, 662, 0, 0, 0, 0, 1496,
	1491, 0, 0, 209, 0, 0, 0, 1463, 0, 1484,
	209, 0, 1509, 0, 663, 0, 0, 664, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 2827,
	0, 0, 0, 0, 0, 1462, 0, 1083, 0, 1020,
	0, 0, 0, 679, 1482, 0, 0, 0, 1083, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	1624, 2852, 1627, 1194, 0, 0, 209, 0, 1480, 1476,
	0, 1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470,
	0, 0, 0, 0, 2862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 1480, 1476, 0, 1473,
	1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 0, 0,
	0, 666, 1500, 0, 0, 1510, 0, 0, 0, 1490,
	1492, 0, 0, 0, 0, 0, 0, 0, 683, 667,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1506,
	0, 1507, 0, 0, 0, 0, 0, 0, 1477, 1478,
	0, 0, 0, 0, 0, 0, 682, 0, 0, 0,
	0, 0, 0, 668, 1498, 0, 669, 0, 0, 1020,
	0, 0, 677, 1483, 0, 0, 0, 1020, 0, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1626, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	671, 678, 0, 0, 0, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 209, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 209, 209, 0, 0, 0, 681, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 1083, 676,
	0, 0, 0, 1184, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1184, 1184, 1184, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1184,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 3057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3069,
	832, 0, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 0,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 0,
	0, 0, 0, 2090, 0, 0, 209, 2091, 0, 0,
	0, 0, 0, 0, 0, 3108, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 1083, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 811, 811, 0, 0,
	0, 0, 0, 0, 209, 209, 0, 0, 0, 0,
	0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503, 1504,
	1505, 1083, 0, 0, 1184, 0, 0, 1083, 0, 1184,
	0, 1496, 1491, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 1509, 0, 0, 0, 0, 0,
	0, 2058, 0, 1083, 0, 0, 1184, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 1532, 0,
	0, 0, 1532, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2366, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 1486, 1487, 1488, 0, 0, 1008, 0, 0, 0,
	1468, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 1083, 0, 0, 0, 0, 0,
	1627, 0, 0, 0, 1500, 0, 1083, 1510, 0, 0,
	0, 1490, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 1507, 0, 0, 0, 0, 0, 0,
	1477, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1184, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3334, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1194, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 0, 0, 0,
	87, 3382, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 0, 0, 0, 0, 0, 87, 1501, 87,
	0, 0, 1496, 1491, 0, 0, 0, 0, 1184, 0,
	1463, 0, 0, 3408, 1194, 1509, 0, 0, 1184, 1184,
	0, 0, 0, 0, 1184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 87, 0, 87, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 1474, 1475, 1481, 1502, 1480,
	1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469,
	1470, 0, 0, 0, 0, 0, 0, 3459, 0, 3151,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1510, 0,
	0, 0, 1490, 1492, 0, 0, 0, 0, 0, 0,
	0, 3496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3511, 1506, 0, 1507, 0, 0, 0, 0, 0,
	0, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2058, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 1496, 1491, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 1484, 0, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 1501,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 1499, 0, 0, 1474, 1475, 1481, 1502,
	1480, 1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 0, 0, 0, 1500, 0, 0, 1510, 0,
	2880, 0, 1490, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1507, 0, 0, 0, 0, 0,
	0, 1477, 1478, 0, 0, 0, 0, 87, 87, 0,
	0, 87, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 87, 0, 0, 87, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 1460, 1461, 0, 1493, 1494,
	1495, 1503, 1504, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 1491, 0, 0, 0, 0,
	0, 0, 1463, 1008, 0, 0, 832, 1509, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 87, 87, 1484, 0, 0, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1461, 1501,
	1493, 1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 1491, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 1486, 1487, 1488, 0, 0, 0,
	0, 0, 1462, 1468, 0, 0, 0, 0, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	1510, 0, 0, 1499, 1490, 1492, 1474, 1475, 1481, 1502,
	1480, 1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 0, 0, 1506, 0, 1507, 0, 0, 0,
	2567, 0, 0, 1477, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 1498,
	0, 0, 0, 0, 0, 1468, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 1500,
	0, 0, 1510, 0, 0, 0, 1490, 1492, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 1507, 0,
	0, 0, 1008, 1008, 0, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1498, 0, 0, 0, 0, 0, 1489, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 1460,
	1461, 1501, 1493, 1494, 1495, 1503, 1504, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 1491,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 1509, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 1484, 0, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 1499, 0, 0, 1474, 1475,
	1481, 1502, 1480, 1476, 0, 1473, 1471, 1472, 1464, 1465,
	1466, 1467, 1469, 1470, 0, 0, 1008, 0, 0, 1676,
	0, 0, 2566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1485, 1486, 1487,
	1488, 0, 0, 0, 0, 0, 0, 1468, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 1693,
	1670, 1677, 1660, 1703, 1702, 0, 0, 1662, 1661, 0,
	0, 1500, 0, 0, 1510, 1713, 1714, 1499, 1490, 1492,
	1474, 1475, 1481, 1502, 1480, 1476, 0, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 0, 0, 1506, 0,
	1507, 0, 0, 0, 2563, 0, 0, 1477, 1478, 0,
	0, 0, 0, 0, 0, 0, 1704, 0, 1700, 1699,
	0, 0, 0, 1498, 0, 0, 0, 0, 0, 0,
	1698, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1697, 1695, 1696, 0, 0, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1686, 1675, 1688, 1690, 1691, 1692,
	1687, 1489, 1680, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1709, 1710, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 1664, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 1701, 87, 0, 0, 1673, 0, 1674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1694,
	0, 0, 0, 1683, 1681, 1682, 1685, 1684, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 0, 1473,
	1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 1665, 1666,
	1668, 1669, 0, 0, 0, 0, 2562, 0, 0, 0,
	0, 0, 0, 0, 0, 1689, 1667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1663, 0, 0, 1705, 1706, 1707, 1708, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1671, 0, 0, 0, 0,
	1678, 1711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2058, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 1087,
	224, 1088, 1089, 1090, 0, 1091, 478, 1092, 1093, 1094,
	1095, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1096, 233, 234, 235, 236, 237, 238,
	1097, 1098, 239, 483, 484, 485, 1099, 240, 486, 1100,
	1085, 1101, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1102, 251, 0, 252, 253, 254, 1103,
	958, 255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110,
	257, 258, 259, 260, 261, 262, 487, 488, 1111, 263,
	1112, 265, 264, 1113, 266, 1114, 1115, 267, 268, 269,
	1116, 270, 1117, 271, 272, 1118, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1119,
	216, 1120, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1121, 290, 1122, 1123, 959, 291,
	292, 1124, 293, 493, 1125, 494, 294, 1126, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1127,
	301, 302, 304, 0, 87, 217, 303, 305, 312, 1128,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1129,
	500, 1130, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1131,
	325, 324, 1132, 326, 502, 965, 327, 328, 966, 1133,
	329, 330, 1134, 1135, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 968, 346, 1136, 218, 969, 348, 1137, 503,
	349, 504, 351, 352, 1138, 353, 354, 355, 1139, 1140,
	357, 358, 359, 1141, 1142, 360, 361, 505, 970, 362,
	971, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1143, 371, 372, 507, 373, 508, 374, 1144, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	1145, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 1146, 397, 972, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 1147, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 1148, 424, 404, 405, 425, 426,
	973, 427, 428, 511, 429, 430, 1149, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 1150,
	442, 443, 441, 1151, 444, 445, 446, 447, 448, 278,
	449, 1152, 450, 513, 514, 515, 516, 1153, 457, 1154,
	451, 452, 517, 453, 518, 1155, 454, 455, 456, 0,
	458, 459, 1156, 1157, 460, 461, 462, 463, 464, 466,
	1158, 467, 1159, 465, 468, 469, 470, 519, 520, 521,
	1160, 472, 471, 522, 1161, 1162, 1163, 1164, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 2211, 0, 0, 0, 0, 0,
	0, 0, 2212, 219, 220, 221, 222, 223, 1087, 224,
	1088, 1089, 1090, 0, 1091, 478, 1092, 1093, 1094, 1095,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1096, 233, 234, 235, 236, 237, 238, 1097,
	1098, 239, 483, 484, 485, 1099, 240, 486, 1100, 1085,
	1101, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1102, 251, 0, 252, 253, 254, 1103, 958,
	255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 257,
	258, 259, 260, 261, 262, 487, 488, 1111, 263, 1112,
	265, 264, 1113, 266, 1114, 1115, 267, 268, 269, 1116,
	270, 1117, 271, 272, 1118, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1119, 216,
	1120, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1121, 290, 1122, 1123, 959, 291, 292,
	1124, 293, 493, 1125, 494, 294, 1126, 295, 296, 297,
	298, 495, 496, 497, 350, 961, 299, 300, 1127, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1128, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 1129, 500,
	1130, 313, 962, 501, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1131, 325,
	324, 1132, 326, 502, 965, 327, 328, 966, 1133, 329,
	330, 1134, 1135, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 968, 346, 1136, 218, 969, 348, 1137, 503, 349,
	504, 351, 352, 1138, 353, 354, 355, 1139, 1140, 357,
	358, 359, 1141, 1142, 360, 361, 505, 970, 362, 971,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1143, 371, 372, 507, 373, 508, 374, 1144, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1145,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1146, 397, 972, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1147, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1148, 424, 404, 405, 425, 426, 973,
	427, 428, 511, 429, 430, 1149, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1150, 442,
	443, 441, 1151, 444, 445, 446, 447, 448, 278, 449,
	1152, 450, 513, 514, 515, 516, 1153, 457, 1154, 451,
	452, 517, 453, 518, 1155, 454, 455, 456, 0, 458,
	459, 1156, 1157, 460, 461, 462, 463, 464, 466, 1158,
	467, 1159, 465, 468, 469, 470, 519, 520, 521, 1160,
	472, 471, 522, 1161, 1162, 1163, 1164, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3177, 219, 220, 221, 222, 223, 1087,
	224, 1088, 1089, 1090, 0, 1091, 478, 1092, 1093, 1094,
	1095, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 1096, 233, 234, 235, 236, 237, 238,
	1097, 1098, 239, 483, 484, 485, 1099, 240, 486, 1100,
	1085, 1101, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1102, 251, 0, 252, 253, 254, 1103,
	958, 255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110,
	257, 258, 259, 260, 261, 262, 487, 488, 1111, 263,
	1112, 265, 264, 1113, 266, 1114, 1115, 267, 268, 269,
	1116, 270, 1117, 271, 272, 1118, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 1119,
	216, 1120, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 1121, 290, 1122, 1123, 959, 291,
	292, 1124, 293, 493, 1125, 494, 294, 1126, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 1127,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1128,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 1129,
	500, 1130, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1131,
	325, 324, 1132, 326, 502, 965, 327, 328, 966, 1133,
	329, 330, 1134, 1135, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 968, 346, 1136, 218, 969, 348, 1137, 503,
	349, 504, 351, 352, 1138, 353, 354, 355, 1139, 1140,
	357, 358, 359, 1141, 1142, 360, 361, 505, 970, 362,
	971, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1143, 371, 372, 507, 373, 508, 374, 1144, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	1145, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 1146, 397, 972, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 1147, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 1148, 424, 404, 405, 425, 426,
	973, 427, 428, 511, 429, 430, 1149, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 1150,
	442, 443, 441, 1151, 444, 445, 446, 447, 448, 278,
	449, 1152, 450, 513, 514, 515, 516, 1153, 457, 1154,
	451, 452, 517, 453, 518, 1155, 454, 455, 456, 0,
	458, 459, 1156, 1157, 460, 461, 462, 463, 464, 466,
	1158, 467, 1159, 465, 468, 469, 470, 519, 520, 521,
	1160, 472, 471, 522, 1161, 1162, 1163, 1164, 473, 474,
	523, 475, 476, 477, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3301,
	0, 219, 220, 221, 222, 223, 1087, 224, 1088, 1089,
	1090, 0, 1091, 478, 1092, 1093, 1094, 1095, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1096, 233, 234, 235, 236, 237, 238, 1097, 1098, 239,
	483, 484, 485, 1099, 240, 486, 1100, 1085, 1101, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1102, 251, 0, 252, 253, 254, 1103, 958, 255, 256,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 257, 258, 259,
	260, 261, 262, 487, 488, 1111, 263, 1112, 265, 264,
	1113, 266, 1114, 1115, 267, 268, 269, 1116, 270, 1117,
	271, 272, 1118, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1119, 216, 1120, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1121, 290, 1122, 1123, 959, 291, 292, 1124, 293,
	493, 1125, 494, 294, 1126, 295, 296, 297, 298, 495,
	496, 497, 350, 961, 299, 300, 1127, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1128, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 1129, 500, 1130, 313,
	962, 501, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1131, 325, 324, 1132,
	326, 502, 965, 327, 328, 966, 1133, 329, 330, 1134,
	1135, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 968,
	346, 1136, 218, 969, 348, 1137, 503, 349, 504, 351,
	352, 1138, 353, 354, 355, 1139, 1140, 357, 358, 359,
	1141, 1142, 360, 361, 505, 970, 362, 971, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1143, 371,
	372, 507, 373, 508, 374, 1144, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 1145, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 1146, 397, 972, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	1147, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 1148, 424, 404, 405, 425, 426, 973, 427, 428,
	511, 429, 430, 1149, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 1150, 442, 443, 441,
	1151, 444, 445, 446, 447, 448, 278, 449, 1152, 450,
	513, 514, 515, 516, 1153, 457, 1154, 451, 452, 517,
	453, 518, 1155, 454, 455, 456, 0, 458, 459, 1156,
	1157, 460, 461, 462, 463, 464, 466, 1158, 467, 1159,
	465, 468, 469, 470, 519, 520, 521, 1160, 472, 471,
	522, 1161, 1162, 1163, 1164, 473, 474, 523, 475, 476,
	477, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3229, 0, 219, 220,
	221, 222, 223, 1087, 224, 1088, 1089, 1090, 0, 1091,
	478, 1092, 1093, 1094, 1095, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1096, 233, 234,
	235, 236, 237, 238, 1097, 1098, 239, 483, 484, 485,
	1099, 240, 486, 1100, 1085, 1101, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1102, 251, 0,
	252, 253, 254, 1103, 958, 255, 256, 1104, 1105, 1107,
	1106, 1108, 1109, 1110, 257, 258, 259, 260, 261, 262,
	487, 488, 1111, 263, 1112, 265, 264, 1113, 266, 1114,
	1115, 267, 268, 269, 1116, 270, 1117, 271, 272, 1118,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1119, 216, 1120, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1121, 290,
	1122, 1123, 959, 291, 292, 1124, 293, 493, 1125, 494,
	294, 1126, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1127, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1128, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1129, 500, 1130, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1131, 325, 324, 1132, 326, 502, 965,
	327, 328, 966, 1133, 329, 330, 1134, 1135, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 968, 346, 1136, 218,
	969, 348, 1137, 503, 349, 504, 351, 352, 1138, 353,
	354, 355, 1139, 1140, 357, 358, 359, 1141, 1142, 360,
	361, 505, 970, 362, 971, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1143, 371, 372, 507, 373,
	508, 374, 1144, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 1145, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 1146,
	397, 972, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 1147, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 1148, 424,
	404, 405, 425, 426, 973, 427, 428, 511, 429, 430,
	1149, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 1150, 442, 443, 441, 1151, 444, 445,
	446, 447, 448, 278, 449, 1152, 450, 513, 514, 515,
	516, 1153, 457, 1154, 451, 452, 517, 453, 518, 1155,
	454, 455, 456, 0, 458, 459, 1156, 1157, 460, 461,
	462, 463, 464, 466, 1158, 467, 1159, 465, 468, 469,
	470, 519, 520, 521, 1160, 472, 471, 522, 1161, 1162,
	1163, 1164, 473, 474, 523, 475, 476, 477, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3109, 0, 219, 220, 221, 222, 223,
	1087, 224, 1088, 1089, 1090, 0, 1091, 478, 1092, 1093,
	1094, 1095, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 1096, 233, 234, 235, 236, 237,
	238, 1097, 1098, 239, 483, 484, 485, 1099, 240, 486,
	1100, 1085, 1101, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1102, 251, 0, 252, 253, 254,
	1103, 958, 255, 256, 1104, 1105, 1107, 1106, 1108, 1109,
	1110, 257, 258, 259, 260, 261, 262, 487, 488, 1111,
	263, 1112, 265, 264, 1113, 266, 1114, 1115, 267, 268,
	269, 1116, 270, 1117, 271, 272, 1118, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	1119, 216, 1120, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 1121, 290, 1122, 1123, 959,
	291, 292, 1124, 293, 493, 1125, 494, 294, 1126, 295,
	296, 297, 298, 495, 496, 497, 350, 961, 299, 300,
	1127, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1128, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	1129, 500, 1130, 313, 962, 501, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1131, 325, 324, 1132, 326, 502, 965, 327, 328, 966,
	1133, 329, 330, 1134, 1135, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 968, 346, 1136, 218, 969, 348, 1137,
	503, 349, 504, 351, 352, 1138, 353, 354, 355, 1139,
	1140, 357, 358, 359, 1141, 1142, 360, 361, 505, 970,
	362, 971, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1143, 371, 372, 507, 373, 508, 374, 1144,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 1145, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 1146, 397, 972, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 1147, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 1148, 424, 404, 405, 425,
	426, 973, 427, 428, 511, 429, 430, 1149, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	1150, 442, 443, 441, 1151, 444, 445, 446, 447, 448,
	278, 449, 1152, 450, 513, 514, 515, 516, 1153, 457,
	1154, 451, 452, 517, 453, 518, 1155, 454, 455, 456,
	0, 458, 459, 1156, 1157, 460, 461, 462, 463, 464,
	466, 1158, 467, 1159, 465, 468, 469, 470, 519, 520,
	521, 1160, 472, 471, 522, 1161, 1162, 1163, 1164, 473,
	474, 523, 475, 476, 477, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2905, 0, 219, 220, 221, 222, 223, 1087, 224, 1088,
	1089, 1090, 0, 1091, 478, 1092, 1093, 1094, 1095, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 1096, 233, 234, 235, 236, 237, 238, 1097, 1098,
	239, 483, 484, 485, 1099, 240, 486, 1100, 1085, 1101,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1102, 251, 0, 252, 253, 254, 1103, 958, 255,
	256, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 257, 258,
	259, 260, 261, 262, 487, 488, 1111, 263, 1112, 265,
	264, 1113, 266, 1114, 1115, 267, 268, 269, 1116, 270,
	1117, 271, 272, 1118, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 1119, 216, 1120,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 1121, 290, 1122, 1123, 959, 291, 292, 1124,
	293, 493, 1125, 494, 294, 1126, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 1127, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1128, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 1129, 500, 1130,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1131, 325, 324,
	1132, 326, 502, 965, 327, 328, 966, 1133, 329, 330,
	1134, 1135, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	968, 346, 1136, 218, 969, 348, 1137, 503, 349, 504,
	351, 352, 1138, 353, 354, 355, 1139, 1140, 357, 358,
	359, 1141, 1142, 360, 361, 505, 970, 362, 971, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1143,
	371, 372, 507, 373, 508, 374, 1144, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1145, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1146, 397, 972, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1147, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1148, 424, 404, 405, 425, 426, 973, 427,
	428, 511, 429, 430, 1149, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1150, 442, 443,
	441, 1151, 444, 445, 446, 447, 448, 278, 449, 1152,
	450, 513, 514, 515, 516, 1153, 457, 1154, 451, 452,
	517, 453, 518, 1155, 454, 455, 456, 0, 458, 459,
	1156, 1157, 460, 461, 462, 463, 464, 466, 1158, 467,
	1159, 465, 468, 469, 470, 519, 520, 521, 1160, 472,
	471, 522, 1161, 1162, 1163, 1164, 473, 474, 523, 475,
	476, 477, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2897, 0, 219,
	220, 221, 222, 223, 1087, 224, 1088, 1089, 1090, 0,
	1091, 478, 1092, 1093, 1094, 1095, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 1096, 233,
	234, 235, 236, 237, 238, 1097, 1098, 239, 483, 484,
	485, 1099, 240, 486, 1100, 1085, 1101, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1102, 251,
	0, 252, 253, 254, 1103, 958, 255, 256, 1104, 1105,
	1107, 1106, 1108, 1109, 1110, 257, 258, 259, 260, 261,
	262, 487, 488, 1111, 263, 1112, 265, 264, 1113, 266,
	1114, 1115, 267, 268, 269, 1116, 270, 1117, 271, 272,
	1118, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 1119, 216, 1120, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 1121,
	290, 1122, 1123, 959, 291, 292, 1124, 293, 493, 1125,
	494, 294, 1126, 295, 296, 297, 298, 495, 496, 497,
	350, 961, 299, 300, 1127, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1128, 960, 306, 498, 308, 307,
	309, 310, 311, 499, 1129, 500, 1130, 313, 962, 501,
	963, 314, 315, 316, 964, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1131, 325, 324, 1132, 326, 502,
	965, 327, 328, 966, 1133, 329, 330, 1134, 1135, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 967, 344, 345, 347, 968, 346, 1136,
	218, 969, 348, 1137, 503, 349, 504, 351, 352, 1138,
	353, 354, 355, 1139, 1140, 357, 358, 359, 1141, 1142,
	360, 361, 505, 970, 362, 971, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1143, 371, 372, 507,
	373, 508, 374, 1144, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 1145, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	1146, 397, 972, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 1147, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 1148,
	424, 404, 405, 425, 426, 973, 427, 428, 511, 429,
	430, 1149, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 1150, 442, 443, 441, 1151, 444,
	445, 446, 447, 448, 278, 449, 1152, 450, 513, 514,
	515, 516, 1153, 457, 1154, 451, 452, 517, 453, 518,
	1155, 454, 455, 456, 0, 458, 459, 1156, 1157, 460,
	461, 462, 463, 464, 466, 1158, 467, 1159, 465, 468,
	469, 470, 519, 520, 521, 1160, 472, 471, 522, 1161,
	1162, 1163, 1164, 473, 474, 523, 475, 476, 477, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2758, 0, 219, 220, 221, 222,
	223, 1087, 224, 1088, 1089, 1090, 0, 1091, 478, 1092,
	1093, 1094, 1095, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 1096, 233, 234, 235, 236,
	237, 238, 1097, 1098, 239, 483, 484, 485, 1099, 240,
	486, 1100, 1085, 1101, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1102, 251, 0, 252, 253,
	254, 1103, 958, 255, 256, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 257, 258, 259, 260, 261, 262, 487, 488,
	1111, 263, 1112, 265, 264, 1113, 266, 1114, 1115, 267,
	268, 269, 1116, 270, 1117, 271, 272, 1118, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 1119, 216, 1120, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 1121, 290, 1122, 1123,
	959, 291, 292, 1124, 293, 493, 1125, 494, 294, 1126,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 1127, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1128, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 1129, 500, 1130, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1131, 325, 324, 1132, 326, 502, 965, 327, 328,
	966, 1133, 329, 330, 1134, 1135, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 968, 346, 1136, 218, 969, 348,
	1137, 503, 349, 504, 351, 352, 1138, 353, 354, 355,
	1139, 1140, 357, 358, 359, 1141, 1142, 360, 361, 505,
	970, 362, 971, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1143, 371, 372, 507, 373, 508, 374,
	1144, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 1145, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 1146, 397, 972,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 1147, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 1148, 424, 404, 405,
	425, 426, 973, 427, 428, 511, 429, 430, 1149, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 1150, 442, 443, 441, 1151, 444, 445, 446, 447,
	448, 278, 449, 1152, 450, 513, 514, 515, 516, 1153,
	457, 1154, 451, 452, 517, 453, 518, 1155, 454, 455,
	456, 0, 458, 459, 1156, 1157, 460, 461, 462, 463,
	464, 466, 1158, 467, 1159, 465, 468, 469, 470, 519,
	520, 521, 1160, 472, 471, 522, 1161, 1162, 1163, 1164,
	473, 474, 523, 475, 476, 477, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2103, 0, 219, 220, 221, 222, 223, 1087, 224,
	1088, 1089, 1090, 0, 1091, 478, 1092, 1093, 1094, 1095,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 1096, 233, 234, 235, 236, 237, 238, 1097,
	1098, 239, 483, 484, 485, 1099, 240, 486, 1100, 1085,
	1101, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1102, 251, 0, 252, 253, 254, 1103, 958,
	255, 256, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 257,
	258, 259, 260, 261, 262, 487, 488, 1111, 263, 1112,
	265, 264, 1113, 266, 1114, 1115, 267, 268, 269, 1116,
	270, 1117, 271, 272, 1118, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 1119, 216,
	1120, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 1121, 290, 1122, 1123, 959, 291, 292,
	1124, 293, 493, 1125, 494, 294, 1126, 295, 296, 297,
	298, 495, 496, 497, 350, 961, 299, 300, 1127, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1128, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 1129, 500,
	1130, 313, 962, 501, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1131, 325,
	324, 1132, 326, 502, 965, 327, 328, 966, 1133, 329,
	330, 1134, 1135, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 968, 346, 1136, 218, 969, 348, 1137, 503, 349,
	504, 351, 352, 1138, 353, 354, 355, 1139, 1140, 357,
	358, 359, 1141, 1142, 360, 361, 505, 970, 362, 971,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1143, 371, 372, 507, 373, 508, 374, 1144, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 1145,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 1146, 397, 972, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 1147, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 1148, 424, 404, 405, 425, 426, 973,
	427, 428, 511, 429, 430, 1149, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 1150, 442,
	443, 441, 1151, 444, 445, 446, 447, 448, 278, 449,
	1152, 450, 513, 514, 515, 516, 1153, 457, 1154, 451,
	452, 517, 453, 518, 1155, 454, 455, 456, 0, 458,
	459, 1156, 1157, 460, 461, 462, 463, 464, 466, 1158,
	467, 1159, 465, 468, 469, 470, 519, 520, 521, 1160,
	472, 471, 522, 1161, 1162, 1163, 1164, 473, 474, 523,
	475, 476, 477, 1188, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1814, 0,
	0, 0, 219, 220, 221, 222, 223, 1087, 224, 1088,
	1089, 1090, 0, 1091, 478, 1092, 1093, 1094, 1095, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 1096, 233, 234, 235, 236, 237, 238, 1097, 1098,
	239, 483, 484, 485, 1099, 240, 486, 1100, 1085, 1101,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1102, 251, 0, 252, 253, 254, 1103, 958, 255,
	256, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 257, 258,
	259, 260, 261, 262, 487, 488, 1111, 263, 1112, 265,
	264, 1113, 266, 1114, 1115, 267, 268, 269, 1116, 270,
	1117, 271, 272, 1118, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 1119, 216, 1120,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 1121, 290, 1122, 1123, 959, 291, 292, 1124,
	293, 493, 1125, 494, 294, 1126, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 1127, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1128, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 1129, 500, 1130,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1131, 325, 324,
	1132, 326, 502, 965, 327, 328, 966, 1133, 329, 330,
	1134, 1135, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	968, 346, 1136, 218, 969, 348, 1137, 503, 349, 504,
	351, 352, 1138, 353, 354, 355, 1139, 1140, 357, 358,
	359, 1141, 1142, 360, 361, 505, 970, 362, 971, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1143,
	371, 372, 507, 373, 508, 374, 1144, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 1145, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 1146, 397, 972, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 1147, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 1148, 424, 404, 405, 425, 426, 973, 427,
	428, 511, 429, 430, 1149, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 1150, 442, 443,
	441, 1151, 444, 445, 446, 447, 448, 278, 449, 1152,
	450, 513, 514, 515, 516, 1153, 457, 1154, 451, 452,
	517, 453, 518, 1155, 454, 455, 456, 0, 458, 459,
	1156, 1157, 460, 461, 462, 463, 464, 466, 1158, 467,
	1159, 465, 468, 469, 470, 519, 520, 521, 1160, 472,
	471, 522, 1161, 1162, 1163, 1164, 473, 474, 523, 475,
	476, 477, 1077, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 1087, 224, 1088, 1089,
	1090, 0, 1091, 478, 1092, 1093, 1094, 1095, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	1096, 233, 234, 235, 236, 237, 238, 1097, 1098, 239,
	483, 484, 485, 1099, 240, 486, 1100, 1085, 1101, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1102, 251, 0, 252, 253, 254, 1103, 958, 255, 256,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 257, 258, 259,
	260, 261, 262, 487, 488, 1111, 263, 1112, 265, 264,
	1113, 266, 1114, 1115, 267, 268, 269, 1116, 270, 1117,
	271, 272, 1118, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 1119, 216, 1120, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 1121, 290, 1122, 1123, 959, 291, 292, 1124, 293,
	493, 1125, 494, 294, 1126, 295, 296, 297, 298, 495,
	496, 497, 350, 961, 299, 300, 1127, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1128, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 1129, 500, 1130, 313,
	962, 501, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1131, 325, 324, 1132,
	326, 502, 965, 327, 328, 966, 1133, 329, 330, 1134,
	1135, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 968,
	346, 1136, 218, 969, 348, 1137, 503, 349, 504, 351,
	352, 1138, 353, 354, 355, 1139, 1140, 357, 358, 359,
	1141, 1142, 360, 361, 505, 970, 362, 971, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1143, 371,
	372, 507, 373, 508, 374, 1144, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 1145, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 1146, 397, 972, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	1147, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 1148, 424, 404, 405, 425, 426, 973, 427, 428,
	511, 429, 430, 1149, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 1150, 442, 443, 441,
	1151, 444, 445, 446, 447, 448, 278, 449, 1152, 450,
	513, 514, 515, 516, 1153, 457, 1154, 451, 452, 517,
	453, 518, 1155, 454, 455, 456, 0, 458, 459, 1156,
	1157, 460, 461, 462, 463, 464, 466, 1158, 467, 1159,
	465, 468, 469, 470, 519, 520, 521, 1160, 472, 471,
	522, 1161, 1162, 1163, 1164, 473, 474, 523, 475, 476,
	477, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1087, 224, 1088, 1089, 1090, 0, 1091,
	478, 1092, 1093, 1094, 1095, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 1096, 233, 234,
	235, 236, 237, 238, 1097, 1098, 239, 483, 484, 485,
	1099, 240, 486, 1100, 1085, 1101, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1102, 251, 0,
	252, 253, 254, 1103, 958, 255, 256, 1104, 1105, 1107,
	1106, 1108, 1109, 1110, 257, 258, 259, 260, 261, 262,
	487, 488, 1111, 263, 1112, 265, 264, 1113, 266, 1114,
	1115, 267, 268, 269, 1116, 270, 1117, 271, 272, 1118,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 1119, 216, 1120, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 1121, 290,
	1122, 1123, 959, 291, 292, 1124, 293, 493, 1125, 494,
	294, 1126, 295, 296, 297, 298, 495, 496, 497, 350,
	961, 299, 300, 1127, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1128, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 1129, 500, 1130, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1131, 325, 324, 1132, 326, 502, 965,
	327, 328, 966, 1133, 329, 330, 1134, 1135, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 968, 346, 1136, 218,
	969, 348, 1137, 503, 349, 504, 351, 352, 1138, 353,
	354, 355, 1139, 1140, 357, 358, 359, 1141, 1142, 360,
	361, 505, 970, 362, 971, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1143, 371, 372, 507, 373,
	508, 374, 1144, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 1145, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 1146,
	397, 972, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 1147, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 1148, 424,
	404, 405, 425, 426, 973, 427, 428, 511, 429, 430,
	1149, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 1150, 442, 443, 441, 1151, 444, 445,
	446, 447, 448, 278, 449, 1152, 450, 513, 514, 515,
	516, 1153, 457, 1154, 451, 452, 517, 453, 518, 1155,
	454, 455, 456, 0, 458, 459, 1156, 1157, 460, 461,
	462, 463, 464, 466, 1158, 467, 1159, 465, 468, 469,
	470, 519, 520, 521, 1160, 472, 471, 522, 1161, 1162,
	1163, 1164, 473, 474, 523, 475, 476, 477, 2079, 0,
	900, 857, 858, 859, 855, 856, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 2076, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 2077, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 843, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 2075, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 2078, 0, 0, 0, 0, 0, 0, 870,
	2074, 0, 833, 868, 900, 857, 858, 859, 855, 856,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 218, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	182, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	184, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 1327, 927, 975, 0, 472, 471,
	522, 0, 0, 0, 176, 473, 474, 523, 475, 476,
	477, 844, 177, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 900, 857, 858, 859,
	855, 856, 869, 1537, 1535, 0, 0, 868, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 985, 986, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 976, 977, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 983, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 984, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 968, 346, 843, 218, 969, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	978, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 979, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 182, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 973,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 980, 0, 442,
	443, 441, 184, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 981, 453, 982, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 1327, 927, 975, 0,
	472, 471, 522, 0, 0, 0, 176, 473, 474, 523,
	475, 476, 477, 844, 177, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 900, 857,
	858, 859, 855, 856, 869, 1537, 2514, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 985, 986, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 983, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 968, 346, 843, 218, 969, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 182, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 980,
	0, 442, 443, 441, 184, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 981, 453, 982, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 1327, 927,
	975, 0, 472, 471, 522, 0, 0, 0, 176, 473,
	474, 523, 475, 476, 477, 844, 177, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	900, 857, 858, 859, 855, 856, 869, 1537, 1535, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 2165, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	2170, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 2166, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 843, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 2167, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 1392, 868, 900, 857, 858, 859, 855, 856,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 218, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 975, 0, 472, 471,
	522, 1391, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 836, 868, 900, 857,
	858, 859, 855, 856, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 985, 986, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 983, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 968, 346, 843, 218, 969, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 848,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 980,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 981, 453, 982, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	975, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	900, 857, 858, 859, 855, 856, 869, 870, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	3508, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 843, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 848, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 900, 857, 858, 859, 855, 856, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 985, 986,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 3360, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 976, 977, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 983, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 984,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 968, 346, 843,
	218, 969, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 848, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 970, 362, 971, 978, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 979,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 972, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 973, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 980, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 981, 453, 982,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 975, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 900, 857, 858, 859, 855, 856,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 3079, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 975, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 1597, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 868, 900, 857,
	858, 859, 855, 856, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 985, 986, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 983, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 968, 346, 843, 218, 969, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 980,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 981, 453, 982, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	975, 2884, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	900, 857, 858, 859, 855, 856, 869, 870, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 1993, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 843, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 1992, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 900, 857, 858, 859, 855, 856, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 985, 986,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 976, 977, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 983, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 984,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 968, 346, 843,
	218, 969, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 848, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 970, 362, 971, 978, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 979,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 972, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 973, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 980, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 981, 453, 982,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 975, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 900, 857, 858, 859, 855, 856,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 218, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 975, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 1597, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 868, 900, 857,
	858, 859, 855, 856, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 985, 986, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 2170, 959,
	291, 292, 0, 293, 983, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 968, 346, 843, 218, 969, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 980,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 981, 453, 982, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	975, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	900, 857, 858, 859, 855, 856, 869, 870, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 843, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 870,
	1535, 0, 2175, 868, 900, 857, 858, 859, 855, 856,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 218, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 975, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 2173, 868, 900, 857,
	858, 859, 855, 856, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 985, 986, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 983, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 968, 346, 843, 218, 969, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 980,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 981, 453, 982, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	975, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	2161, 868, 900, 857, 858, 859, 855, 856, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 985, 986,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 976, 977, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 983, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 984,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 968, 346, 843,
	218, 969, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 970, 362, 971, 978, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 979,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 972, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 973, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 980, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 981, 453, 982,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 975, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 2150, 868, 900, 857, 858, 859,
	855, 856, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 985, 986, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 976, 977, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 983, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 984, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 968, 346, 843, 218, 969, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	978, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 979, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 973,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 980, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 981, 453, 982, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 975, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 2148, 868,
	2139, 2146, 858, 859, 855, 856, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 2142, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 2143, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 2144, 2141, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 843, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 2145, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 2140, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 2136, 868, 2139, 2146, 858, 859, 855, 856,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 2142, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 2143, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	2144, 2141, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 218, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 2145,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 975, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 2140,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 900, 857, 858, 859,
	855, 856, 869, 870, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 985, 986, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 976, 977, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 983, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 984, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 968, 346, 843, 218, 969, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	978, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 979, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 973,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 980, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 981, 453, 982, 864, 454, 455, 456, 0, 458,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 975, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 0, 0,
	0, 0, 0, 1543, 0, 870, 0, 0, 0, 868,
	900, 857, 858, 859, 855, 856, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 1979, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 846, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 843, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 847, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 844, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 1217, 868, 900, 857, 858, 859, 855, 856,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 298, 1216,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 218, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 975, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 1211, 868, 900, 857,
	858, 859, 855, 856, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 985, 986, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 983, 0, 875, 294, 0, 295,
	296, 297, 298, 1210, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 968, 346, 843, 218, 969, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 980,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 981, 453, 982, 864, 454, 455, 456,
	0, 458, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	975, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	1206, 868, 900, 857, 858, 859, 855, 856, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 985, 986,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 976, 977, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 983, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 961, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 962, 952,
	963, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 984,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 968, 346, 843,
	218, 969, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 970, 362, 971, 978, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 979,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 972, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 973, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 980, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 981, 453, 982,
	864, 454, 455, 456, 0, 458, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 975, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 844,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 840, 841, 900, 857, 858, 859, 855, 856,
	869, 870, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 949, 874, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 915, 894, 926, 884, 925, 924,
	0, 233, 886, 885, 236, 237, 238, 876, 948, 239,
	985, 986, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 929, 262, 922, 921, 846, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 920, 269, 0, 270, 0,
	271, 272, 0, 273, 852, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 865, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 919, 917, 918, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 875, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 896,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 908,
	899, 910, 912, 913, 914, 909, 0, 901, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 934, 935, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 888, 341, 967, 344, 345, 347, 968,
	346, 843, 218, 969, 348, 866, 953, 349, 923, 351,
	352, 0, 897, 354, 898, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 916, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 853,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 889, 890, 892, 893, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	911, 891, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 957, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 887, 0, 450,
	930, 931, 932, 933, 0, 457, 0, 451, 452, 981,
	453, 982, 864, 454, 455, 456, 0, 458, 459, 0,
	847, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	895, 468, 469, 470, 519, 927, 975, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 844, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 840, 841, 900, 857, 858, 859,
	855, 856, 869, 870, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 874, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 915, 894, 926, 884,
	925, 924, 0, 233, 886, 885, 236, 237, 238, 876,
	948, 239, 985, 986, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 3537, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 929, 262, 922, 921, 846, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 920, 269, 0,
	270, 0, 271, 272, 0, 273, 852, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 976, 977, 865, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 919, 917,
	918, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 983, 0, 875, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 896, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 908, 899, 910, 912, 913, 914, 909, 0, 901,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 934,
	935, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 984, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 888, 341, 967, 344, 345,
	347, 968, 346, 843, 218, 969, 348, 866, 953, 349,
	923, 351, 352, 0, 897, 354, 898, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	978, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 979, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 916, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 853, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 889, 890, 892, 893, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 973,
	427, 428, 911, 891, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 957, 436, 437, 438, 980, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 887,
	0, 450, 930, 931, 932, 933, 0, 457, 0, 451,
	452, 981, 453, 982, 864, 454, 455, 456, 0, 3536,
	459, 0, 847, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 895, 468, 469, 470, 519, 927, 975, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 844, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 840, 841, 900, 857,
	858, 859, 855, 856, 869, 870, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 874, 0,
	0, 0, 225, 227, 226, 228, 229, 3535, 915, 894,
	926, 884, 925, 924, 0, 233, 886, 885, 236, 237,
	238, 876, 948, 239, 985, 986, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 3537, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 929, 262, 922, 921, 846,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 920,
	269, 0, 270, 0, 271, 272, 0, 273, 852, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	865, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	919, 917, 918, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 983, 0, 875, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 896, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 908, 899, 910, 912, 913, 914, 909,
	0, 901, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 934, 935, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 888, 341, 967,
	344, 345, 347, 968, 346, 843, 218, 969, 348, 866,
	953, 349, 923, 351, 352, 0, 897, 354, 898, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 916, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 853, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 889, 890, 892,
	893, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 911, 891, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 957, 436, 437, 438, 980,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 887, 0, 450, 930, 931, 932, 933, 0, 457,
	0, 451, 452, 981, 453, 982, 864, 454, 455, 456,
	0, 3536, 459, 0, 847, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 895, 468, 469, 470, 519, 927,
	975, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 844, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 840, 841,
	900, 857, 858, 859, 855, 856, 869, 870, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	874, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	915, 894, 926, 884, 925, 924, 0, 233, 886, 885,
	236, 237, 238, 876, 948, 239, 985, 986, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 929, 262, 922,
	921, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 920, 269, 0, 270, 0, 271, 272, 0, 273,
	852, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 865, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 919, 917, 918, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 875, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 896, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 908, 899, 910, 912, 913,
	914, 909, 0, 901, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 934, 935, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 888,
	341, 967, 344, 345, 347, 968, 346, 0, 218, 969,
	348, 866, 953, 349, 923, 351, 352, 0, 897, 354,
	898, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	916, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 853, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 889,
	890, 892, 893, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 911, 891, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 957, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 887, 0, 450, 930, 931, 932, 933,
	0, 457, 0, 451, 452, 981, 453, 982, 864, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 895, 468, 469, 470,
	519, 927, 975, 0, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 2158, 0, 0, 0, 0, 0, 0,
	2156, 2157, 900, 857, 858, 859, 855, 856, 869, 870,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 949, 874, 0, 0, 0, 225, 227, 226, 228,
	229, 0, 915, 894, 926, 884, 925, 924, 0, 233,
	886, 885, 236, 237, 238, 876, 948, 239, 985, 986,
	485, 0, 240, 955, 0, 938, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 3537, 941, 939,
	940, 945, 943, 942, 944, 257, 258, 259, 260, 929,
	262, 922, 921, 846, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 920, 269, 0, 270, 0, 271, 272,
	0, 273, 852, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 976, 977, 865, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 919, 917, 918, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 983, 0,
	875, 294, 0, 295, 296, 297, 298, 950, 951, 954,
	350, 0, 299, 300, 0, 301, 302, 896, 0, 0,
	217, 303, 305, 312, 0, 960, 306, 908, 899, 910,
	912, 913, 914, 909, 0, 901, 0, 313, 0, 952,
	0, 314, 315, 316, 964, 934, 935, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 984,
	965, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 888, 341, 967, 344, 345, 347, 968, 346, 843,
	218, 0, 348, 866, 953, 349, 923, 351, 352, 0,
	897, 354, 898, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 970, 362, 971, 978, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 979,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 916, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 972, 398, 399, 400, 401, 853, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 889, 890, 892, 893, 415, 421, 422, 423, 946,
	424, 404, 405, 425, 426, 0, 427, 428, 911, 891,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 957,
	436, 437, 438, 980, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 887, 0, 450, 930, 931,
	932, 933, 0, 457, 0, 451, 452, 981, 453, 982,
	864, 454, 455, 456, 0, 3536, 459, 0, 847, 460,
	461, 462, 463, 464, 466, 947, 467, 0, 895, 468,
	469, 470, 519, 927, 975, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 1022,
	0, 0, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 868, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 948, 239, 483, 484, 485, 0, 240,
	955, 0, 938, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 941, 939, 940, 945, 943,
	942, 944, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 976,
	977, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 983, 0, 494, 294, 0,
	295, 296, 297, 298, 950, 951, 954, 350, 961, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 962, 952, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1009, 325, 324, 0, 326, 984, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 968, 346, 0, 218, 969, 348,
	0, 953, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 1014, 357, 358, 359, 0, 0, 360, 361, 505,
	970, 362, 971, 978, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 979, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 972,
	398, 399, 400, 401, 510, 1016, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 182, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 946, 424, 404, 405,
	425, 426, 973, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	980, 0, 442, 443, 441, 184, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 981, 453, 982, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 947, 467, 0, 465, 468, 469, 470, 1327,
	520, 521, 0, 472, 471, 522, 1022, 0, 0, 176,
	473, 474, 523, 475, 476, 477, 0, 177, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 949, 1006, 0, 1629, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	948, 239, 483, 484, 485, 0, 240, 955, 0, 938,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 941, 939, 940, 945, 943, 942, 944, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 976, 977, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 983, 0, 494, 294, 0, 295, 296, 297,
	298, 950, 951, 954, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 952, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1009, 325,
	324, 0, 326, 984, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 968, 346, 0, 218, 969, 348, 0, 953, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 1014, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	978, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 979, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 510, 1016, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 182, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 946, 424, 404, 405, 425, 426, 973,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 980, 0, 442,
	443, 441, 184, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 981, 453, 982, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 947,
	467, 0, 465, 468, 469, 470, 1327, 520, 521, 0,
	472, 471, 522, 2623, 0, 1022, 176, 473, 474, 523,
	475, 476, 477, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 1006, 949, 1629, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 948,
	239, 483, 484, 485, 0, 240, 955, 0, 938, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 941, 939, 940, 945, 943, 942, 944, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 976, 977, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 983, 0, 494, 294, 0, 295, 296, 297, 298,
	950, 951, 954, 350, 961, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 962, 952, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1009, 325, 324,
	0, 326, 984, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	968, 346, 0, 218, 969, 348, 0, 953, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 1014, 357, 358,
	359, 0, 0, 360, 361, 505, 970, 362, 971, 978,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 979, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 972, 398, 399, 400, 401,
	510, 1016, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 946, 424, 404, 405, 425, 426, 973, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 980, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	981, 453, 982, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 947, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1005, 0, 1022, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 1006, 949, 1011, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 948, 239,
	483, 484, 485, 0, 240, 955, 0, 938, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	941, 939, 940, 945, 943, 942, 944, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 976, 977, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	983, 0, 494, 294, 0, 295, 296, 297, 298, 950,
	951, 954, 350, 961, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	962, 952, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1009, 325, 324, 0,
	326, 984, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 968,
	346, 0, 218, 969, 348, 0, 953, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 1014, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 978, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 979, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 510,
	1016, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 946, 424, 404, 405, 425, 426, 973, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 980, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 981,
	453, 982, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 947, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1022, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	949, 1006, 0, 1011, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 948, 239, 483, 484, 485,
	0, 240, 955, 0, 938, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 941, 939, 940,
	945, 943, 942, 944, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 976, 977, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 983, 0, 494,
	294, 0, 295, 296, 297, 298, 950, 951, 954, 350,
	961, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 962, 952, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1009, 325, 324, 0, 326, 984, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 968, 346, 0, 218,
	969, 348, 0, 953, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 1014, 357, 358, 359, 0, 0, 360,
	361, 505, 970, 362, 971, 978, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 979, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 972, 398, 399, 400, 401, 510, 1016, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 946, 424,
	404, 405, 425, 426, 973, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 980, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 981, 453, 982, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 947, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1022, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 949, 1006, 0,
	1011, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 948, 239, 483, 484, 485, 0, 240, 955,
	0, 938, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 941, 939, 940, 945, 943, 942,
	944, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 976, 977,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 983, 0, 494, 294, 0, 295,
	296, 297, 298, 950, 951, 954, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 952, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 984, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 968, 346, 0, 218, 969, 348, 0,
	953, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 978, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 979, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 510, 1016, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 946, 424, 404, 405, 425,
	426, 973, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 980,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 981, 453, 982, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 947, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 833, 0, 1181, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 1524, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	1085, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	958, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 959, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 961, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	960, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 962, 501, 963, 314, 315, 316, 964,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 965, 327, 328, 966, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 967, 344,
	345, 347, 968, 346, 0, 0, 969, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 970, 362,
	971, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 972, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 182, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	973, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 184, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 1327, 520, 521,
	0, 472, 471, 522, 1324, 0, 1181, 176, 473, 474,
	523, 475, 476, 477, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 151, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1085,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 501, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 968, 346, 0, 0, 969, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 182, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 973,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 184, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 1327, 520, 521, 0,
	472, 471, 522, 0, 0, 0, 176, 473, 474, 523,
	475, 476, 477, 0, 177, 0, 0, 0, 0, 1181,
	1180, 0, 0, 0, 0, 1178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 1085, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 958, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	959, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 961, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 960, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 962, 501, 963, 314, 315,
	316, 964, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 965, 327, 328,
	966, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	967, 344, 345, 347, 968, 346, 0, 0, 969, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	970, 362, 971, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 972,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 973, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 1181, 1180, 0, 0,
	0, 0, 1178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 1809, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1085,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 501, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 968, 346, 0, 0, 969, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 973,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 1181, 1180, 0, 0, 0, 0, 1178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 2822, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1085, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 961, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 968, 346,
	0, 0, 969, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 970, 362, 971, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 972, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 973, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1022, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 949,
	0, 0, 1333, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 948, 239, 483, 484, 485, 0,
	240, 955, 0, 938, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 958, 255, 256, 941, 939, 940, 945,
	943, 942, 944, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	976, 977, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 959, 291, 292, 0, 293, 983, 0, 494, 294,
	0, 295, 296, 297, 298, 950, 951, 954, 350, 961,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 960, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 962, 952, 963, 314,
	315, 316, 964, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 984, 965, 327,
	328, 966, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 967, 344, 345, 347, 968, 346, 0, 218, 969,
	348, 0, 953, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 970, 362, 971, 978, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 979, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	972, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 946, 424, 404,
	405, 425, 426, 973, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 980, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 981, 453, 982, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 947, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 833, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 182, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 184, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 1327,
	520, 521, 0, 472, 471, 522, 213, 0, 0, 176,
	473, 474, 523, 475, 476, 477, 0, 177, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 151, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 213, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 1634, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	213, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	2772, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 213, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 2394,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 213, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 2908, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 701, 0, 590, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 1900, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 596, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 595,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	0, 589, 0, 590, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 599, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 596, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 595,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	590, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 599, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 596, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 1930, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 595, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 590, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 599, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 596, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 595, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 1358, 0, 1181, 1180, 0, 0,
	0, 0, 1178, 0, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 1085,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 958,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 1357, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 959, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 961, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 960,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 962, 501, 963, 314, 315, 316, 964, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 965, 327, 328, 966, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 967, 344, 345,
	347, 968, 346, 0, 0, 969, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 970, 362, 971,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 1356, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 972, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 1355, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 973,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 1322, 0, 1181, 1180, 0, 0, 0,
	0, 1178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	1321, 496, 497, 350, 961, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	968, 346, 0, 0, 969, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 970, 362, 971, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 972, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 973, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 1318, 0, 1181, 1180, 0, 0, 0, 0,
	1178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 1085, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 958, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 959, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1317,
	496, 497, 350, 961, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 960, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	962, 501, 963, 314, 315, 316, 964, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 965, 327, 328, 966, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 967, 344, 345, 347, 968,
	346, 0, 0, 969, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 970, 362, 971, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 972, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 973, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 1256, 0, 1181, 1180, 0, 0, 0, 0, 1178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 1085, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 958, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 959, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1255, 496,
	497, 350, 961, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 960, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 962,
	501, 963, 314, 315, 316, 964, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 965, 327, 328, 966, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 967, 344, 345, 347, 968, 346,
	0, 0, 969, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 970, 362, 971, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 972, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 973, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	1253, 0, 1181, 1180, 0, 0, 0, 0, 1178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 1085, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 958, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 959, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1252, 496, 497,
	350, 961, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 960, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 962, 501,
	963, 314, 315, 316, 964, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	965, 327, 328, 966, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 967, 344, 345, 347, 968, 346, 0,
	0, 969, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 970, 362, 971, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 972, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 973, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 1174,
	0, 1181, 1180, 0, 0, 0, 0, 1178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 1085, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 958, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 959, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1176, 496, 497, 350,
	961, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 960, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 962, 501, 963,
	314, 315, 316, 964, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 965,
	327, 328, 966, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 967, 344, 345, 347, 968, 346, 0, 0,
	969, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 970, 362, 971, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 972, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 973, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 1181, 1180,
	0, 0, 0, 0, 1178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1085, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 501, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 968, 346, 0, 0, 969, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 973, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1181, 1180,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 599, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1085, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 1723,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 501, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 968, 346, 0, 0, 969, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 973, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1181, 1180, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 1085, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 958, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 959, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 961, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 960, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 962, 501, 963, 314, 315, 316, 964, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 965, 327, 328, 966, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 967, 344, 345, 347,
	968, 346, 0, 0, 969, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 970, 362, 971, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 972, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 973, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 1181, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 1085, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 958, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 959,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 961, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 960, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 962, 501, 963, 314, 315, 316,
	964, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 965, 327, 328, 966,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 967,
	344, 345, 347, 968, 346, 0, 0, 969, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 970,
	362, 971, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 972, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 973, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	2282, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 2279, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 2430, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	2285, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 2427,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 2429, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 2426, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 2284, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 2428, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 2282, 240, 486, 0, 0, 2276, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	2279, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 2285, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 2275,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 2284, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	2283, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1411, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	1414, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 1412,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 1413, 471, 522,
	1169, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1171, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 1014, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1166,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1168, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 1014, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1073, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1075, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 1014, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 552, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 551,
	223, 541, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 544, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 545, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 546, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 540, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	541, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	544, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 545, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 546, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 2737, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 1014, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 2365, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1909, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 1837, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 1841, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 1840,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1830, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1832, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 218, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	1311, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1310, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1308,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1307, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 218,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1305, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1304, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1301, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1300, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1276, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 1191, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 1193, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 544, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 545, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 546,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 1937, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 1935, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 1933, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 693,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 495, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 692, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 691, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 2430, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 3243, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 531, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 530, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 529, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 2216, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 213, 2417, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 3033, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 213, 2417, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 2414, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 1916, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 1907, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 0, 472,
	471, 522, 572, 0, 213, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 1051,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 1049, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 495,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 573, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 569, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 1052,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	568, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 0, 472, 471,
	522, 1854, 0, 213, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 1853, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 0, 472, 471, 522,
	572, 0, 213, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 562, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 495, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 573, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 569, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 1332, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 568, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 0, 472, 471, 522, 1315,
	0, 213, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 1314, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 0, 472, 471, 522, 1264, 0,
	213, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 1263, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 1245, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 1185, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 572, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 1051, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 1049, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 573, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 569, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 1052, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 568, 514, 515, 516, 0, 457, 0,
	451, 1050, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 1033, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 495, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 0, 472, 471, 522, 572, 0, 213,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 562,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 560, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 495, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 561, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 573,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 563, 402, 0, 403, 407, 408,
	569, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 564, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 568, 514, 515, 516, 0,
	457, 0, 451, 566, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 0, 472, 471, 522, 556, 0, 213, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 557, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 554, 0, 213, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 495, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	0, 472, 471, 522, 548, 0, 213, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 424, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 0,
	472, 471, 522, 526, 0, 213, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 382, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 294, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 402, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 213, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	479, 480, 230, 481, 231, 232, 482, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 483, 484, 485,
	0, 240, 486, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	487, 488, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 489, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 490, 491, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 492, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 493, 0, 494,
	294, 0, 295, 296, 297, 298, 2713, 496, 497, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 498, 308, 307, 309,
	310, 311, 499, 0, 500, 0, 313, 0, 501, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 502, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 503, 349, 504, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 505, 0, 362, 0, 506, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 507, 373,
	508, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 509, 382, 383, 0, 384, 385, 386, 387, 388,
	0, 390, 391, 392, 389, 393, 394, 395, 396, 0,
	397, 0, 398, 399, 400, 401, 510, 402, 0, 403,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 423, 0, 424,
	404, 405, 425, 426, 0, 427, 428, 511, 429, 430,
	0, 431, 432, 433, 434, 406, 435, 439, 440, 436,
	437, 438, 512, 0, 442, 443, 441, 0, 444, 445,
	446, 447, 448, 278, 449, 0, 450, 513, 514, 515,
	516, 0, 457, 0, 451, 452, 517, 453, 518, 0,
	454, 455, 456, 0, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 519, 520, 521, 213, 472, 471, 522, 0, 0,
	0, 0, 473, 474, 523, 475, 476, 477, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 479, 480, 230, 481, 231, 232, 482,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	483, 484, 485, 0, 240, 486, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 487, 488, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 489, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 490, 491, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 492, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	493, 0, 494, 294, 0, 295, 296, 297, 298, 2711,
	496, 497, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 498,
	308, 307, 309, 310, 311, 499, 0, 500, 0, 313,
	0, 501, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 502, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 503, 349, 504, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 505, 0, 362, 0, 506, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 507, 373, 508, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 509, 382, 383, 0, 384, 385,
	386, 387, 388, 0, 390, 391, 392, 389, 393, 394,
	395, 396, 0, 397, 0, 398, 399, 400, 401, 510,
	402, 0, 403, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	423, 0, 424, 404, 405, 425, 426, 0, 427, 428,
	511, 429, 430, 0, 431, 432, 433, 434, 406, 435,
	439, 440, 436, 437, 438, 512, 0, 442, 443, 441,
	0, 444, 445, 446, 447, 448, 278, 449, 0, 450,
	513, 514, 515, 516, 0, 457, 0, 451, 452, 517,
	453, 518, 0, 454, 455, 456, 0, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 519, 520, 521, 213, 472, 471,
	522, 0, 0, 0, 0, 473, 474, 523, 475, 476,
	477, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 478, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 479, 480, 230, 481,
	231, 232, 482, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 483, 484, 485, 0, 240, 486, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 487, 488, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 489, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 490, 491, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 286, 492,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 493, 0, 494, 294, 0, 295, 296,
	297, 298, 2698, 496, 497, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	0, 306, 498, 308, 307, 309, 310, 311, 499, 0,
	500, 0, 313, 0, 501, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 502, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 0, 0, 348, 0, 503,
	349, 504, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 505, 0, 362,
	0, 506, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 507, 373, 508, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 509, 382, 383,
	0, 384, 385, 386, 387, 388, 0, 390, 391, 392,
	389, 393, 394, 395, 396, 0, 397, 0, 398, 399,
	400, 401, 510, 402, 0, 403, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 423, 0, 424, 404, 405, 425, 426,
	0, 427, 428, 511, 429, 430, 0, 431, 432, 433,
	434, 406, 435, 439, 440, 436, 437, 438, 512, 0,
	442, 443, 441, 0, 444, 445, 446, 447, 448, 278,
	449, 0, 450, 513, 514, 515, 516, 0, 457, 0,
	451, 452, 517, 453, 518, 0, 454, 455, 456, 0,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 519, 520, 521,
	213, 472, 471, 522, 0, 0, 0, 0, 473, 474,
	523, 475, 476, 477, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 478,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 479,
	480, 230, 481, 231, 232, 482, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 483, 484, 485, 0,
	240, 486, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 487,
	488, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	489, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	490, 491, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 492, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 493, 0, 494, 294,
	0, 295, 296, 297, 298, 2377, 496, 497, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 498, 308, 307, 309, 310,
	311, 499, 0, 500, 0, 313, 0, 501, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 502, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 503, 349, 504, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	505, 0, 362, 0, 506, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 507, 373, 508,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	509, 382, 383, 0, 384, 385, 386, 387, 388, 0,
	390, 391, 392, 389, 393, 394, 395, 396, 0, 397,
	0, 398, 399, 400, 401, 510, 402, 0, 403, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 423, 0, 424, 404,
	405, 425, 426, 0, 427, 428, 511, 429, 430, 0,
	431, 432, 433, 434, 406, 435, 439, 440, 436, 437,
	438, 512, 0, 442, 443, 441, 0, 444, 445, 446,
	447, 448, 278, 449, 0, 450, 513, 514, 515, 516,
	0, 457, 0, 451, 452, 517, 453, 518, 0, 454,
	455, 456, 0, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	519, 520, 521, 213, 472, 471, 522, 0, 0, 0,
	0, 473, 474, 523, 475, 476, 477, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 478, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 479, 480, 230, 481, 231, 232, 482, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 483,
	484, 485, 0, 240, 486, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 487, 488, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 489, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 490, 491, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 492, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 493,
	0, 494, 294, 0, 295, 296, 297, 298, 495, 496,
	497, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 498, 308,
	307, 309, 310, 311, 499, 0, 500, 0, 313, 0,
	501, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	502, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 503, 349, 504, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 505, 0, 362, 0, 506, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	507, 373, 508, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 509, 382, 383, 0, 384, 385, 386,
	387, 388, 0, 390, 391, 392, 389, 393, 394, 395,
	396, 0, 397, 0, 398, 399, 400, 401, 510, 402,
	0, 403, 557, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 423,
	0, 424, 404, 405, 425, 426, 0, 427, 428, 511,
	429, 430, 0, 431, 432, 433, 434, 406, 435, 439,
	440, 436, 437, 438, 512, 0, 442, 443, 441, 0,
	444, 445, 446, 447, 448, 278, 449, 0, 450, 513,
	514, 515, 516, 0, 457, 0, 451, 452, 517, 453,
	518, 0, 454, 455, 456, 0, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 519, 520, 521, 213, 472, 471, 522,
	0, 0, 0, 0, 473, 474, 523, 475, 476, 477,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 478, 0, 1866, 0, 0,
	225, 227, 226, 228, 229, 479, 480, 230, 481, 231,
	232, 482, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 483, 484, 485, 0, 240, 486, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 487, 488, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 489, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 490, 491, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 492, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 493, 0, 494, 294, 0, 295, 296, 297,
	298, 495, 496, 497, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 498, 308, 307, 309, 310, 311, 499, 0, 500,
	0, 313, 0, 501, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 502, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 503, 349,
	504, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 505, 0, 362, 0,
	506, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 507, 373, 508, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 509, 382, 383, 0,
	384, 385, 386, 387, 388, 0, 390, 391, 392, 389,
	393, 394, 395, 396, 0, 397, 0, 398, 399, 400,
	401, 510, 402, 0, 403, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 423, 0, 0, 404, 405, 425, 426, 0,
	427, 428, 511, 429, 430, 0, 431, 432, 433, 434,
	406, 435, 439, 440, 436, 437, 438, 512, 0, 442,
	443, 441, 0, 444, 445, 446, 447, 448, 278, 449,
	0, 450, 513, 514, 515, 516, 0, 457, 0, 451,
	452, 517, 453, 518, 0, 454, 455, 456, 0, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 519, 520, 521, 213,
	472, 471, 522, 0, 0, 0, 0, 473, 474, 523,
	475, 476, 477, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 479, 480,
	230, 481, 231, 232, 482, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 483, 484, 485, 0, 240,
	486, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 487, 488,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 489,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 490,
	491, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 492, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 493, 0, 494, 294, 0,
	295, 296, 297, 298, 1284, 496, 497, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 498, 308, 307, 309, 310, 311,
	499, 0, 500, 0, 313, 0, 501, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 502, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 503, 349, 504, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 505,
	0, 362, 0, 506, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 507, 373, 508, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 509,
	382, 383, 0, 384, 385, 386, 387, 388, 0, 390,
	391, 392, 389, 393, 394, 395, 396, 0, 397, 0,
	398, 399, 400, 401, 510, 402, 0, 403, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 423, 0, 424, 404, 405,
	425, 426, 0, 427, 428, 511, 429, 430, 0, 431,
	432, 433, 434, 406, 435, 439, 440, 436, 437, 438,
	512, 0, 442, 443, 441, 0, 444, 445, 446, 447,
	448, 278, 449, 0, 450, 513, 514, 515, 516, 0,
	457, 0, 451, 452, 517, 453, 518, 0, 454, 455,
	456, 0, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 519,
	520, 521, 213, 472, 471, 522, 0, 0, 0, 0,
	473, 474, 523, 475, 476, 477, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 478, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 479, 480, 230, 481, 231, 232, 482, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 483, 484,
	485, 0, 240, 486, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 487, 488, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 489, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 490, 491, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 492, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 493, 0,
	494, 294, 0, 295, 296, 297, 298, 1226, 496, 497,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 498, 308, 307,
	309, 310, 311, 499, 0, 500, 0, 313, 0, 501,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 502,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 503, 349, 504, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 505, 0, 362, 0, 506, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 507,
	373, 508, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 509, 382, 383, 0, 384, 385, 386, 387,
	388, 0, 390, 391, 392, 389, 393, 394, 395, 396,
	0, 397, 0, 398, 399, 400, 401, 510, 402, 0,
	403, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 423, 0,
	424, 404, 405, 425, 426, 0, 427, 428, 511, 429,
	430, 0, 431, 432, 433, 434, 406, 435, 439, 440,
	436, 437, 438, 512, 0, 442, 443, 441, 0, 444,
	445, 446, 447, 448, 278, 449, 0, 450, 513, 514,
	515, 516, 0, 457, 0, 451, 452, 517, 453, 518,
	0, 454, 455, 456, 0, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 519, 520, 521, 213, 472, 471, 522, 0,
	0, 0, 0, 473, 474, 523, 475, 476, 477, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 478, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 479, 480, 230, 481, 231, 232,
	482, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 483, 484, 485, 0, 240, 486, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 487, 488, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 489, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 490, 491, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 286, 492, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 493, 0, 494, 294, 0, 295, 296, 297, 298,
	495, 496, 497, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 0, 306,
	498, 308, 307, 309, 310, 311, 499, 0, 500, 0,
	313, 0, 501, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 502, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 0, 0, 348, 0, 503, 349, 504,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 505, 0, 362, 0, 506,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 507, 373, 508, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 509, 988, 383, 0, 384,
	385, 386, 387, 388, 0, 390, 391, 392, 389, 393,
	394, 395, 396, 0, 397, 0, 398, 399, 400, 401,
	510, 402, 0, 403, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 423, 0, 424, 404, 405, 425, 426, 0, 427,
	428, 511, 429, 430, 0, 431, 432, 433, 434, 406,
	435, 439, 440, 436, 437, 438, 512, 0, 442, 443,
	441, 0, 444, 445, 446, 447, 448, 278, 449, 0,
	450, 513, 514, 515, 516, 0, 457, 0, 451, 452,
	517, 453, 518, 0, 454, 455, 456, 0, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 519, 520, 521, 213, 472,
	471, 522, 0, 0, 0, 0, 473, 474, 523, 475,
	476, 477, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 478, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 479, 480, 230,
	481, 231, 232, 482, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 483, 484, 485, 0, 240, 486,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 487, 488, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 489, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 490, 491,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	492, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 493, 0, 494, 0, 0, 295,
	296, 297, 298, 495, 496, 497, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 498, 308, 307, 309, 310, 311, 499,
	0, 500, 0, 313, 0, 501, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 502, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	503, 349, 504, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 505, 0,
	362, 0, 506, 363, 356, 364, 365, 0, 367, 368,
	369, 370, 0, 371, 372, 507, 373, 508, 374, 0,
	375, 0, 376, 377, 378, 0, 380, 381, 509, 382,
	383, 0, 384, 385, 386, 387, 388, 0, 390, 391,
	392, 389, 393, 394, 395, 396, 0, 397, 0, 398,
	399, 400, 401, 510, 0, 0, 403, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 423, 0, 424, 404, 405, 425,
	426, 0, 427, 428, 511, 429, 430, 0, 431, 432,
	433, 434, 406, 435, 439, 440, 436, 437, 438, 512,
	0, 442, 443, 441, 0, 444, 445, 446, 447, 448,
	278, 449, 0, 450, 513, 514, 515, 516, 0, 457,
	0, 451, 452, 517, 453, 518, 0, 454, 455, 456,
	0, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 519, 520,
	521, 0, 472, 471, 522, 0, 0, 0, 0, 473,
	474, 523, 475, 476, 477, 1460, 1461, 0, 1493, 1494,
	1495, 1503, 1504, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 1491, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	1496, 1491, 0, 0, 0, 0, 1479, 0, 1463, 0,
	0, 0, 0, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 1486, 1487, 1488, 0, 0, 0,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	1510, 0, 0, 0, 1490, 1492, 0, 0, 0, 1485,
	1486, 1487, 1488, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 1506, 0, 1507, 0, 0, 0,
	0, 0, 0, 1477, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 1510, 0, 0, 1498,
	1490, 1492, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 1507, 0, 0, 0, 0, 1508, 0, 1477,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1497, 1498, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0,
	0, 1501, 0, 1489, 0, 0, 0, 0, 0, 1496,
	1491, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 1484, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 1501, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 1474, 1475,
	1481, 1502, 1480, 1476, 0, 1473, 1471, 1472, 1464, 1465,
	1466, 1467, 1469, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 2561, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 1499, 0, 0, 1474, 1475, 1481, 1502, 1480, 1476,
	0, 1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470,
	0, 0, 1500, 0, 0, 1510, 0, 0, 2091, 1490,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1507, 0, 0, 0, 0, 0, 0, 1477, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	1493, 1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 1496, 1491, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 1509,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 1462, 0, 0, 0, 1501, 0, 0, 0,
	0, 1482, 1496, 1491, 0, 0, 0, 0, 1479, 0,
	1463, 0, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	1499, 0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 0,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 1500,
	0, 0, 1510, 3491, 0, 0, 1490, 1492, 0, 0,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 1506, 0, 1507, 0,
	0, 0, 0, 0, 0, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1510, 0,
	0, 1498, 1490, 1492, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1507, 0, 0, 0, 0, 1508,
	0, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0,
	0, 0, 0, 1501, 0, 1489, 0, 0, 0, 1496,
	1491, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 1509, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 1501,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	1474, 1475, 1481, 1502, 1480, 1476, 0, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0,
	3487, 0, 0, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 1499, 0, 0, 1474, 1475, 1481, 1502,
	1480, 1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 1500, 0, 0, 1510, 3416, 0, 0, 1490,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1507, 0, 0, 0, 0, 0, 0, 1477, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	1493, 1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 1496, 1491, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 1509,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 1462, 0, 0, 0, 1501, 0, 0, 0,
	0, 1482, 1496, 1491, 0, 0, 0, 0, 1479, 0,
	1463, 0, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	1499, 0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 0,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 1500,
	0, 0, 1510, 3415, 0, 0, 1490, 1492, 0, 0,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 1506, 0, 1507, 0,
	0, 0, 0, 0, 0, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1510, 0,
	0, 1498, 1490, 1492, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1507, 0, 0, 0, 0, 1508,
	0, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0,
	0, 0, 0, 1501, 0, 1489, 0, 0, 0, 1496,
	1491, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 1509, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 1501,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	1474, 1475, 1481, 1502, 1480, 1476, 0, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0,
	3304, 0, 0, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 1499, 0, 0, 1474, 1475, 1481, 1502,
	1480, 1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 1500, 0, 0, 1510, 3204, 0, 0, 1490,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1507, 0, 0, 0, 0, 0, 0, 1477, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	1493, 1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 1496, 1491, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 1509,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 1462, 0, 0, 0, 1501, 0, 0, 0,
	0, 1482, 1496, 1491, 0, 0, 0, 0, 1479, 0,
	1463, 0, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	1499, 0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 0,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 1500,
	0, 0, 1510, 3156, 0, 0, 1490, 1492, 0, 0,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 1506, 0, 1507, 0,
	0, 0, 0, 0, 0, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1510, 0,
	0, 1498, 1490, 1492, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1507, 0, 0, 0, 0, 1508,
	0, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0,
	0, 0, 0, 1501, 0, 1489, 0, 0, 0, 1496,
	1491, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 1509, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 1501,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	1474, 1475, 1481, 1502, 1480, 1476, 0, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0,
	3155, 0, 0, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 1499, 0, 0, 1474, 1475, 1481, 1502,
	1480, 1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 1500, 0, 0, 1510, 3154, 0, 0, 1490,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1507, 0, 0, 0, 0, 0, 0, 1477, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	1493, 1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 1496, 1491, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 1509,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 1462, 0, 0, 0, 1501, 0, 0, 0,
	0, 1482, 1496, 1491, 0, 0, 0, 0, 1479, 0,
	1463, 0, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	1499, 0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 0,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 1500,
	0, 0, 1510, 3119, 0, 0, 1490, 1492, 0, 0,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 1506, 0, 1507, 0,
	0, 0, 0, 0, 0, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1510, 0,
	0, 1498, 1490, 1492, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1507, 0, 0, 0, 0, 1508,
	0, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0,
	0, 0, 0, 1501, 0, 1489, 0, 0, 0, 1496,
	1491, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 1509, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 1501,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	1474, 1475, 1481, 1502, 1480, 1476, 0, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 0, 0, 0, 0,
	2915, 0, 0, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1468, 3589,
	0, 0, 0, 1499, 0, 0, 1474, 1475, 1481, 1502,
	1480, 1476, 0, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 1500, 0, 2518, 1510, 0, 0, 0, 1490,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1507, 0, 0, 0, 0, 0, 0, 1477, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3588, 0, 0, 0, 0, 0, 1460, 1461, 0,
	1493, 1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 1496, 1491, 0, 0,
	0, 0, 2489, 0, 1463, 0, 0, 0, 0, 1509,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 1501, 0, 0, 0,
	0, 1482, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 1461,
	0, 1493, 1494, 1495, 1503, 1504, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2490, 1496, 1491, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1485, 1486, 1487, 1488, 0,
	0, 0, 0, 1462, 0, 1468, 0, 0, 0, 0,
	1499, 0, 1482, 1474, 1475, 1481, 1502, 1480, 1476, 1479,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 1500,
	0, 0, 1510, 0, 0, 0, 1490, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 1507, 0,
	0, 0, 0, 0, 0, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1485, 1486, 1487, 1488,
	0, 1498, 0, 0, 0, 0, 1468, 0, 2606, 0,
	1483, 2605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1508,
	1500, 0, 0, 1510, 0, 0, 0, 1490, 1492, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 1507,
	0, 0, 0, 0, 0, 0, 1477, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 0, 0, 1489,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2183, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 1493, 1494,
	1495, 1503, 1504, 1505, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 1496, 1491, 0, 0, 0, 2182,
	0, 0, 1463, 0, 0, 0, 0, 1509, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 1501, 0, 0, 1499, 0, 1482,
	1474, 1475, 1481, 1502, 1480, 1476, 1479, 1473, 1471, 1472,
	1464, 1465, 1466, 1467, 1469, 1470, 1460, 1461, 0, 1493,
	1494, 1495, 1503, 1504, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 1491, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 1486, 1487, 1488, 0, 0, 0,
	0, 1462, 0, 1468, 0, 0, 0, 0, 1499, 0,
	1482, 1474, 1475, 1481, 1502, 1480, 1476, 1479, 1473, 1471,
	1472, 1464, 1465, 1466, 1467, 1469, 1470, 1500, 0, 0,
	1510, 0, 0, 0, 1490, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 1507, 0, 0, 0,
	0, 0, 0, 1477, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1485, 1486, 1487, 1488, 0, 1498,
	0, 0, 0, 0, 1468, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 1500, 0,
	0, 1510, 0, 0, 0, 1490, 1492, 0, 0, 0,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 1507, 0, 0,
	0, 0, 0, 0, 1477, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 1489, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 830, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 1493, 1494, 1495, 1503,
	1504, 1505, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 1496, 1491, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 1509, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 1501, 0, 0, 1499, 0, 1482, 1474, 1475,
	1481, 1502, 1480, 1476, 1479, 1473, 1471, 1472, 1464, 1465,
	1466, 1467, 1469, 1470, 1460, 1461, 0, 1493, 1494, 1495,
	1503, 1504, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 1491, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1485, 1486, 1487, 1488, 0, 0, 0, 0, 1462,
	0, 1468, 0, 0, 0, 0, 1499, 0, 1482, 1474,
	1475, 1481, 1502, 1480, 1476, 1479, 1473, 1471, 1472, 1464,
	1465, 1466, 1467, 1469, 1470, 1500, 0, 0, 1510, 0,
	0, 0, 1490, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1507, 0, 0, 0, 0, 0,
	0, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1485, 1486, 1487, 1488, 0, 1498, 0, 0,
	0, 0, 1468, 0, 0, 0, 1483, 2612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 1500, 0, 0, 1510,
	0, 0, 0, 1490, 1492, 0, 0, 0, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 1507, 0, 0, 0, 0,
	0, 0, 1477, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 0, 0, 0, 0, 1489, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505,
	2903, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	1496, 1491, 0, 0, 0, 2607, 0, 0, 1463, 0,
	0, 0, 0, 1509, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	1501, 0, 0, 1499, 0, 1482, 1474, 1475, 1481, 1502,
	1480, 1476, 1479, 1473, 1471, 1472, 1464, 1465, 1466, 1467,
	1469, 1470, 1460, 1461, 0, 1493, 1494, 1495, 1503, 1504,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 1491, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1485,
	1486, 1487, 1488, 0, 0, 0, 0, 1462, 0, 1468,
	0, 0, 0, 0, 1499, 0, 1482, 1474, 1475, 1481,
	1502, 1480, 1476, 1479, 1473, 1471, 1472, 1464, 1465, 1466,
	1467, 1469, 1470, 1500, 0, 0, 1510, 0, 0, 0,
	1490, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 1507, 0, 0, 0, 0, 0, 0, 1477,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 1486, 1487, 1488, 0, 1498, 0, 0, 0, 0,
	1468, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 1500, 0, 0, 1510, 0, 0,
	0, 1490, 1492, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 1507, 0, 0, 0, 0, 0, 0,
	1477, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 0, 0,
	0, 0, 0, 1489, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 1496, 1491,
	0, 0, 0, 2560, 0, 0, 1463, 0, 0, 0,
	0, 1509, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 1501, 0,
	0, 1499, 0, 1482, 1474, 1475, 1481, 1502, 1480, 1476,
	1479, 1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470,
	1460, 1461, 0, 1493, 1494, 1495, 1503, 1504, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	1491, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1485, 1486, 1487,
	1488, 0, 0, 0, 0, 1462, 0, 1468, 0, 0,
	0, 0, 1499, 0, 1482, 1474, 1475, 1481, 1502, 1480,
	1476, 1479, 1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469,
	1470, 1500, 0, 0, 1510, 0, 0, 0, 1490, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	1507, 0, 0, 0, 0, 0, 0, 1477, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 1486,
	1487, 1488, 0, 1498, 0, 0, 0, 0, 1468, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 1500, 0, 0, 1510, 0, 0, 0, 1490,
	1492, 0, 0, 0, 0, 0, 0, 0, 1497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1507, 0, 0, 0, 0, 0, 0, 1477, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 736, 1498, 770, 0, 0, 0, 0,
	0, 1489, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 1484,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 741, 0, 0, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	744, 0, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 751, 752, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	771, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 769, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 1499,
	0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 0, 1473,
	1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 0, 0,
	747, 0, 614, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 748, 749, 615, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 756, 755, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 616, 635,
	1499, 0, 0, 1474, 1475, 1481, 1502, 1480, 1476, 775,
	1473, 1471, 1472, 1464, 1465, 1466, 1467, 1469, 1470, 0,
	617, 0, 0, 618, 0, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 642,
	0, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 767, 768, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 622, 644, 0, 0,
	0, 649, 0, 0, 0, 0, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 759, 0, 0,
	0, 0, 0, 760, 0, 0, 0, 0, 0, 0,
	738, 0, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 758, 0, 0, 0, 0, 0, 643, 0,
	0, 774, 0, 0, 0, 0, 625, 0, 0, 762,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 766, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 630,
	0, 0, 647, 0, 646, 0, 0, 631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 639, 0, 0, 0, 0,
	650, 0, 645, 0, 0, 0, 0, 637,
}
var sqlPact = [...]int{

	6420, -1000, -1000, -1000, -1000, -1000, -1000, 198, 196, 192,
	190, 188, 187, 186, 185, -1000, -1000, -1000, 184, -1000,
	-1000, 183, -1000, 182, 171, 170, 168, -1000, 167, 166,
	165, -1000, -1000, -1000, -1000, 164, 161, 159, 55086, 1874,
	66611, 58059, 1712, 49104, 66182, 48675, 65753, 65324, 152, -1000,
	64895, 151, 150, 148, -1000, -1000, 146, 1428, 40059, 145,
	143, 141, 2206, 140, 139, -1000, 134, -1000, 76730, 1260,
	-1000, 133, 129, -1000, 9081, 3814, 57207, 2247, 128, 127,
	39629, 2243, 2268, -1000, -1000, 1633, -1000, -1000, 126, 125,
	124, 113, 111, 110, 109, 108, 107, -1000, 106, 103,
	102, 101, 100, 91, 89, -1000, 88, 87, 86, 85,
	83, 82, 80, 77, 76, 75, 73, -1000, 76571, 1523,
	1402, 1391, 1390, 1380, 1376, 857, 72, 70, 68, 67,
	65, 60, 58, -1000, -1000, 55, 52, 51, 48, -1000,
	47, 46, 147, 42, 36, 31, 30, 29, 1817, 2328,
	1321, 1170, 20004, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 70841, 67034, 27, -24,
	22, -1000, 2607, 882, 33180, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 426, -1000, -1000, -1000, 281,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1648, 672, -1000, -1000, -1000, 64466,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1872, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 670, -1000, 1868,
	235, 1797, -1000, -1000, -1000, -1000, -1000, 67034, -1000, -1000,
	2923, 2921, 1674, 663, 64043, -1000, 1499, -1000, 810, 22728,
	-1000, 1023, -1000, 22728, 278, -1000, -1000, -1000, -1000, -1000,
	48246, 16380, 47817, 47388, 43547, 63614, 15941, 54663, 1121, -1000,
	-1000, -1000, -1000, -1000, -11, 44407, 67034, -1000, 265, -1000,
	-1000, -1000, -1000, -1000, -1000, 29188, 1055, 28724, 1120, 28260,
	439, -1000, -1000, -1000, -1000, 2917, 2911, 976, 2910, 2561,
	70418, 1481, 2909, 1444, 1041, 895, 2908, 2906, 2900, 2899,
	2898, 2897, 2896, 1198, 63185, 2347, 1427, 43108, 42669, 55086,
	55086, 2069, 62756, 1148, 1142, -1000, -1000, -1000, -1000, -1000,
	-1000, 2459, 2265, 2261, 54234, -1000, -1000, 2895, 2893, 2891,
	2888, 2887, 69995, 1462, 2886, 2010, 2884, 2883, 2880, 2878,
	2877, 2876, 2875, 2874, 2873, -1000, 53805, 53376, 52947, 52518,
	62327, 42230, 41791, -1000, -1000, -1000, 34892, 7729, 7469, 61898,
	36209, 55086, 55086, -1000, -1000, 29640, 98, -1000, -1000, -1000,
	2306, -1000, 29640, 98, -1000, 67034, -1000, 2346, 1625, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1813, 1336,
	2739, 41352, 1622, 1188, 2447, 2443, 1257, 2076, 2441, 2427,
	2423, 2420, 2419, 1687, 2051, 321, 19540, 1270, 1266, 2411,
	2406, 2792, 1770, 46959, 2872, 2871, 2595, 2395, 2371, 2304,
	-1000, -1000, -1000, -1000, 1233, -1000, -1000, 49950, -1000, -1000,
	1007, -1000, -1000, 1007, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1115, 69149, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1591,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1724, -1000,
	1599, -1000, -1000, 1887, 1294, 2328, 1980, 2582, 2582, 2582,
	2645, 421, 416, -1000, 147, -1000, -1000, 76349, -1000, -1000,
	29640, 29640, 29640, 29640, 29640, 1678, -1000, 657, -1000, -1000,
	709, -1000, 655, 604, -1000, -1000, -1000, -1000, -1000, -1000,
	654, 2790, -1000, 816, -1000, -1000, -1000, -1000, 2742, -1000,
	18624, -1000, -1000, -1000, 405, 653, 29640, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 252, 821, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 591,
	1548, 588, 588, 588, -1000, -1000, 891, -1000, -1000, -1000,
	334, 586, 317, 579, -1000, -1000, -1000, -1000, 2345, 652,
	647, -1000, 646, 644, 642, -1000, -1000, -1000, 638, 637,
	633, 632, 629, 626, 621, 620, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 880, -1000, 619, 618, 615, 614,
	613, 611, 609, 608, 607, -1000, -1000, -12, 67034, -1000,
	426, -12, -1000, -1000, 606, -1000, 23180, 23180, 23180, -1000,
	-1000, 1856, 29640, -1000, 2504, -1000, 320, -9, 764, 34034,
	-1000, 32322, 764, 718, 37492, -1000, 2301, -1000, -1000, 605,
	242, -1000, -1000, 2282, 67034, 16817, 67034, 55086, 55086, 55086,
	2518, 29640, -1000, -1000, 40913, 67034, 55509, 2699, 11085, 40913,
	67034, 2342, -1000, -1000, -1000, 67034, -1000, 29640, -1000, 2694,
	1239, 44834, 2659, -23, -1000, -1000, -1000, -1000, -1000, -1000,
	1989, 1997, 985, 1886, 1643, -1000, 22728, 2552, -1000, -1000,
	-1000, 240, 16817, -1000, 2013, 2482, 1251, -1000, 1884, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1482, 2480, -1000,
	1848, 2479, 1471, -1000, -1000, 867, 2476, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1716, -1000, -1000, 2570,
	-1000, -1000, 1721, 2475, 1, -1000, -1000, 35335, 44407, -15,
	-1000, -1000, -42, -1000, 15502, 76349, -1000, -1000, -1000, 76349,
	769, -1000, -1000, 2474, -1000, 76349, 728, -1000, -1000, 2470,
	-1000, -1000, -1000, 2869, -1000, 2867, 1940, 2866, 2865, 2864,
	-1000, 1377, 1549, 2863, -1000, 2860, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 52089, 1854, -1000, -1000, 51231, 51660, 894,
	-1000, 841, 1936, -1000, -1000, 1935, -1000, 856, -1000, 2859,
	61469, 2142, 841, 1931, -1000, -1000, -1000, -1000, -1000, 55086,
	-1000, 55086, -1000, 55086, -1000, 1301, -1000, 69572, -9, -1000,
	-1000, -1000, -1000, -1000, 2468, 2858, 2855, 2852, -1000, 67034,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 178,
	2465, -1000, -1000, 178, 2462, -1000, 178, 2461, -1000, 174,
	2448, -1000, -1000, 1851, 2440, -1000, -106, 2430, -1000, -1000,
	-106, 2429, -1000, -31, -1000, -1000, -1000, 882, -1000, 34463,
	-1000, 34463, 61040, 43984, 833, 612, 39200, 76349, -1000, 35335,
	76349, -1000, 43984, 51231, -1000, 60611, 50808, -1000, -1000, 1183,
	2033, -1000, -1000, -1000, -1000, 43984, 43984, 43984, -1000, 60182,
	-1000, 1624, 1441, 2577, 55086, -1000, 1541, -1000, -1000, -1000,
	2585, 2340, -1000, 40486, 56778, -1000, 56355, -1000, 55932, -1000,
	55086, -1000, 55086, -1000, 2851, 2848, 2847, -1000, 2846, 2601,
	76349, 2588, -1000, 2460, 1417, 1407, 67034, -1000, -1000, 67034,
	-1000, 67034, -1000, -1000, -1000, 1987, -1000, -1000, -1000, -1000,
	55086, -1000, -1000, -1000, -1000, -1000, -1000, 2337, -1000, 1384,
	-1000, 1452, -1000, 1175, -1000, -1000, 179, -1000, -1000, -23,
	-1000, 69149, -1000, -1000, 2328, 1980, -1000, 67034, -1000, 1375,
	55086, -1000, 2025, -1000, 1235, -1000, 2328, 1855, 2077, 27796,
	2049, 29640, 147, -1000, -1000, 147, 147, 22276, -1000, -1000,
	11085, 11085, 16817, 1133, 29640, 29640, 29640, 29640, 29640, 29640,
	29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640,
	29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640,
	29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640, 2036,
	29640, 1114, 29640, 29640, 29640, 29640, 1574, -1000, -1000, 1617,
	456, 1705, -1000, 2756, 2756, 2756, 4255, 4255, 469, 2844,
	709, -1000, 29640, -1000, 98, 29640, 17256, -1000, 2777, 1174,
	-1000, -1000, 416, 9189, 2032, -1000, 414, 17720, -1000, -1000,
	-1000, 18624, 604, 27332, 29640, 876, 76349, 15065, 2355, 2184,
	-1000, 2776, -1000, -1000, 2744, -1000, -1000, -1000, -1000, 2744,
	1126, 1011, 2774, -1000, 2744, 2744, 602, 700, 697, 694,
	692, 687, 29640, 29640, 29640, 29640, 29640, 29640, 29640, 29640,
	-1000, 26880, 26416, 25952, 30996, 25488, 29640, 19076, 25024, 24560,
	67034, -12, 2693, 29640, 191, -1000, 75164, -1000, 191, 191,
	601, -36, 76349, 2028, 2028, 33607, 1922, 1738, 1738, 1738,
	-1000, 599, 688, 17, 14, 9, -1000, -1000, 8, 7,
	764, 11553, 58482, 1787, 764, 764, 223, 305, 411, 31895,
	2504, 58482, -1000, -1000, 55086, 595, 17256, 16817, 1217, -39,
	210, 2062, 2057, 2054, -1000, 2042, 1363, -44, 1108, -32,
	-1000, 4518, -45, -1000, 1119, -1000, -1000, -1000, 388, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 879, 593, 592,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 591, 1548, 588,
	588, 588, -1000, -1000, -1000, 334, 586, 317, 579, -1000,
	-1000, -1000, -1000, -1000, -1000, 2276, -42, 55509, 784, -46,
	982, -23, -1000, -1000, -1000, 44834, 1007, -1000, 1544, -1000,
	-1000, -1000, -1000, -1000, -1000, 1204, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2785, -1000, 2765, -1000, -1000, 2773, -13,
	-1000, -1000, 16817, -1000, -29, 1479, -1000, 46530, 2052, 2605,
	2566, 1259, -1000, 1220, 2639, 49950, 2671, 2674, 745, -1000,
	2272, -1000, -1000, 807, 1382, 1094, 49950, 1848, -1000, 11085,
	-1000, 2128, 2638, 1203, 1207, 1203, 1203, 1229, -1000, 49950,
	1091, 1629, 43984, -1000, 1084, -1000, -34, 2664, 2673, 81,
	-1000, 2269, 1082, -1000, -1000, 55086, 16817, 758, -1000, 43984,
	-15, 44407, 67034, 209, -1000, 29640, 98, 29640, 98, -1000,
	-1000, 2426, -1000, -1000, -1000, 2840, 1521, 2009, -1000, -1000,
	-1000, 569, 1930, 2264, 67034, 2071, -19, 55086, -1000, 1848,
	1929, -1000, -1000, 50379, -1000, 1587, -1000, 2421, 2418, 427,
	2839, -1000, 1850, 1928, -1000, -1000, -1000, 68726, 1166, 2415,
	932, 710, 2690, 710, 38346, -1000, 67034, -1000, 67034, -1000,
	-1000, -1000, 2838, -1000, 55086, -1000, -1000, 55086, -1000, 55086,
	-1000, 55086, -1000, 55086, 55086, -1000, 67034, 43984, 43984, 43984,
	5499, 45684, -51, -53, 410, -1000, 59759, 67034, 930, 46107,
	67034, 2542, -206, -1000, 833, 833, 758, -1000, 758, -1000,
	55086, 2336, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2837,
	2836, -1000, 839, 55086, 67034, 55086, -1000, -1000, 67034, -1000,
	67034, -1000, 839, 67034, 839, 67034, 839, 67034, -1000, -1000,
	-1000, -1000, -1000, -1000, 98, 29640, 1338, -1000, 2334, -1000,
	2331, -1000, 38, -1000, -1000, -1000, -1000, 1809, 55086, 55086,
	55086, 55086, 67034, 55086, -1000, 49950, -1000, -1000, 2328, -1000,
	-1000, 1970, -1000, -16, 947, -1000, -1000, -1000, -1000, -1000,
	76349, 527, -1000, -1000, 76349, 1406, 2078, -1000, 2078, -18,
	-1000, 74796, 2024, 55086, -1000, -1000, -1000, -1000, -1000, 806,
	1287, 1287, 1022, 1022, 1022, 1022, 2692, 931, 282, 1116,
	5615, 5615, 4165, 4165, 4165, 4165, 4165, 5615, 1000, 453,
	453, 1000, 1000, 1000, 1000, 1000, 453, 453, 453, 5615,
	5615, 5615, 4255, 5962, 8898, 29640, 29640, 1080, 1561, 456,
	8850, 29640, 3906, 3906, 3906, 3906, -1000, 1774, -1000, -1000,
	-1000, -1000, 2263, 561, 30996, 30996, -1000, -1000, -1000, -1000,
	18172, 29640, -1000, -1000, -1000, -1000, 24096, -1000, -1000, 74222,
	-246, 403, -159, 3, -1000, 29640, 29640, 29640, 401, -1000,
	398, -1000, -1000, 1072, -1000, 1071, 1050, 1046, -1000, 559,
	208, 29640, 67034, -1000, 71740, 686, -146, -1000, -54, 1189,
	-1000, 29640, 207, -1000, 1742, 557, 556, 397, -64, -1000,
	396, 800, 799, 395, 393, 392, 29640, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 76268, 71694, 10968,
	10706, 5055, 10624, 10362, -67, 390, -1000, 2255, -159, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 389, -1000, 386,
	-1000, 75981, -159, 385, 6362, -1000, 30996, 30996, 30996, -1000,
	383, -1000, 74877, -1000, 75900, 23644, 23644, 23644, 380, 75613,
	29640, -159, -69, -1000, -70, -1000, -1000, 555, -72, 870,
	23180, 32751, 16817, -1000, 870, 870, 29640, -1000, 29640, 2046,
	-1000, -1000, -1000, 2044, 1866, 2028, 33607, -1000, -1000, -1000,
	-1000, 58482, 649, 764, -1000, -1000, -1000, -1000, -1000, 58482,
	-1000, 2742, 2453, -1000, -1000, -1000, 67034, 426, -1000, 58482,
	58482, 16817, 764, -1000, 378, 36636, 3, 206, -1000, -1000,
	16817, 2147, 2147, 2147, 2147, -1000, -1000, 67034, 2713, -1000,
	1575, -1000, 11085, -1000, 707, 950, -1000, 2772, 550, -1000,
	2744, 2744, 67034, 136, 22728, -1000, 1007, -1000, -1000, 1298,
	-1000, 1531, -1000, 1004, -1000, -1000, -1000, 22728, -1000, 1983,
	67034, 67034, 55086, -1000, -1000, 1924, 68303, 1923, 11085, 67034,
	-1000, -1000, 547, 546, 2023, 2022, 67034, 67034, 2021, 67880,
	67457, 67034, 1711, 29640, 1782, 1383, 98, 98, -1000, -1000,
	98, 535, 1092, 55086, 55086, 55086, 1465, -1000, -1000, -1000,
	-1000, -1000, 49527, -1000, -1000, 2771, -1000, 1203, -1000, -1000,
	-1000, 1203, 1848, 1443, 55086, 43984, 866, 67034, 1663, 98,
	98, -1000, -1000, 98, 533, 16817, 1535, -1000, 2105, -1000,
	-78, -1000, -1000, 14628, 76349, -1000, 76349, -1000, 67034, -1000,
	893, 67034, 46107, 830, 2414, 37919, -42, 833, 43984, 55086,
	-19, -1000, 1848, 2413, 426, -1000, -1000, 43984, 43984, 43984,
	2834, 528, 2831, -1000, 55086, 2407, 1843, 1921, 2449, 730,
	67034, 870, 33607, 1498, -1000, 37065, 903, 67034, 1434, 135,
	-1000, -1000, -1000, 24, 67034, -1000, 2830, -1000, -1000, 178,
	178, 178, -1000, 174, 1851, -1000, -106, -106, -1000, -1000,
	5499, 5499, 833, -22, 525, -1000, 750, 746, 35772, 43984,
	-80, -1000, -1000, -1000, -1000, -1000, 55086, 67034, 661, 2133,
	67034, -83, -1000, 204, 524, -1000, 833, 35335, 2253, -1000,
	-1000, 861, -1000, 1173, -1000, -1000, -1000, -1000, -1000, -1000,
	-1, -42, -42, -1000, 839, -1000, 839, -1000, 839, -1000,
	76349, -1000, 1331, 1297, 67034, -1000, 16817, 67034, 55086, 16817,
	55086, 2327, 2321, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1406, -1000, 29640, -1000, -1000, -1000, 22276, 1891, -1000,
	-1000, 55086, -7, 29640, 29640, 8136, 6629, 29640, 30996, 30996,
	-1000, 29640, 4879, -1000, -1000, -1000, -1000, -1000, 2249, 523,
	29640, 11085, 4982, 4651, -1000, 372, 10072, 1000, -1000, 29640,
	-1000, 371, 21824, -1000, 75245, -14, -85, -1000, 2784, 1951,
	1630, 1458, 1350, 2770, 14191, -159, -86, -1000, -1000, 702,
	-1000, 2428, -1000, 29640, 75532, 13754, -1000, 38773, 872, 1771,
	-1000, -1000, 2744, 787, -1000, -1000, -1000, 787, -1000, 74176,
	11085, 11085, 29640, 29640, -1000, 29640, 29640, 29640, -1000, -1000,
	29640, -1000, -1000, 2242, 29640, -1000, 11085, 11085, 30996, 30996,
	30996, 30996, 30996, 30996, 30996, 30996, 30996, 30996, 30996, 30996,
	30996, 30996, 30996, 30996, 30996, 30996, 30996, 2035, 30996, 2748,
	2748, 2748, -1000, 2233, 2242, 29640, 29640, 11085, 370, 369,
	368, -1000, 29640, -159, -1000, -1000, 5499, -1000, 2178, -1000,
	29640, -1000, -105, -1000, 2504, -1000, -1000, 2178, 2178, -88,
	76349, 33607, 33607, -1000, 521, 29640, 2037, -1000, 684, -1000,
	-91, -1000, 58482, -1000, 683, -244, -1000, 743, -1000, -1000,
	-1000, -1000, 426, -1000, -1000, -1000, 203, 58482, -1000, -93,
	-1000, 2689, 367, 16817, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -42, 1796, 2783, -1000, 2767, 698, 681, 361, 2744,
	359, 356, -42, 67034, -1000, -23, -1000, -1000, -1000, 29640,
	-1000, -1000, 2581, 1040, 1035, -1000, 2403, -1000, 1914, -1000,
	907, -1000, 1399, -1000, 29640, 29640, 520, 514, 1563, 2822,
	922, 2402, 1851, 2391, 1851, -1000, -1000, 815, -1000, 76349,
	504, 501, -1000, -29, 1357, 858, -1000, -1000, 29640, 29640,
	59332, -1000, 357, 2570, -8, -1000, 1030, -1000, -1000, -1000,
	-1000, 1848, 1028, -1000, -1000, 1581, -1000, -1000, 843, -1000,
	-1000, 29640, -1000, -34, 1027, 833, 2229, -1000, -1000, 2816,
	2815, 2814, 352, -94, -41, 11085, 2687, 1811, 67034, 55086,
	779, -1000, 2742, -1000, -1000, -1000, 55086, 2686, -1000, 841,
	-1000, -1000, 2813, -1000, 917, 16817, 55086, 2390, 2000, 730,
	45261, -1000, 841, 1771, -81, -1000, 1434, 21360, 2568, -96,
	-1000, -1000, -1000, 870, 38346, 33607, 29640, 2811, -103, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 58909, 58909,
	43984, 43984, 43984, 833, 67034, 67034, 46107, 2810, 498, 67034,
	67034, 497, -1000, 67034, 67034, 2808, 43984, -1000, -1000, 98,
	-1000, 1794, 55086, 13317, -1000, -1000, -1000, -1000, -1000, 839,
	-1000, -1000, 1667, 1882, 1667, 1420, 1404, 1804, 73889, -1000,
	-1000, 2083, 2578, 16817, 2696, 3906, 29640, 29640, 3655, 495,
	470, 3906, 29640, 29640, 11085, 7172, -104, 29640, 29640, -1000,
	29640, 680, 76349, 2759, 29640, 341, 340, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 336, -1000, -1000, -1000,
	-1000, -1000, 76349, 29640, 202, -1000, -1000, -1000, 71264, -1000,
	29640, 335, 331, -1000, -1000, -1000, 330, 328, 9741, 267,
	73602, 73556, 73269, 76349, 2233, 76349, -1000, -1000, 673, 673,
	1155, 1155, 1155, 1155, 2748, 517, 1396, 859, 355, 355,
	355, 829, 1036, 1036, 355, 355, 355, 2228, 2043, 494,
	548, -1000, -1000, 76349, 76349, 327, -1000, -1000, -1000, -159,
	325, 2169, 2631, 76349, -1000, 33607, 2169, 2169, -1000, -1000,
	1866, 67034, 76349, 33607, -9, -1000, 2742, -1000, -1000, 2453,
	-1000, 12002, -1000, 16817, -1000, -1000, 36636, -1000, 493, -1000,
	200, -1000, -1000, 679, 2806, 696, -1000, 308, -1000, -1000,
	-42, 76349, 67034, 67034, 67034, 2388, -1000, 5210, -1000, 72982,
	-110, -1000, 74796, 29640, 67034, -1000, 1585, 2072, 967, -1000,
	2130, 67034, -1000, 67034, -1000, -1000, 67034, 67034, 55086, 2377,
	-111, 76349, -56, -1000, 742, -1000, 1169, -1000, 12880, 55086,
	55086, 43984, 2374, -112, 16817, -1000, 43984, -1000, -1000, -1000,
	2096, -1000, 57630, 1737, 98, -1000, 2805, 492, -1000, 1793,
	-1000, 677, 1848, 98, -1000, -1000, 482, 67034, 1839, 481,
	16817, 2002, 730, 45261, -1000, 1166, 2077, -1000, -65, -1000,
	522, 98, 1771, -1000, -81, 76349, -1000, 738, -1000, -113,
	-1000, -1000, 294, -1000, 2541, 2540, -1000, -1000, 29640, 475,
	474, 67034, 2539, -1000, -1000, -118, -1000, 2055, -1000, -1000,
	-1000, -1000, -1000, 16817, 1374, -1000, 473, 471, -1000, -1000,
	-1000, -1000, -1000, 2578, 3906, 3906, 29640, 29640, 29640, 3906,
	7172, -121, -1000, 3906, 3906, -159, -1000, -1000, 75245, -1000,
	-1000, -1000, 76349, 12443, 1668, -1000, 72936, -1000, -1000, -1000,
	-1000, 29640, 29640, -1000, -1000, -1000, -1000, -1000, 30996, 2222,
	468, 11085, -1000, -1000, 860, 29640, 29640, 2504, 860, 860,
	-1000, -124, -1000, 764, -1000, -1000, -1000, 2742, 200, -1000,
	2804, 16817, 472, -1000, 2802, -1000, -1000, -1000, -1000, 67034,
	-1000, 67034, -1000, 16817, 67034, 2237, 1906, -1000, -1000, 2018,
	467, 30996, 55086, 773, 2214, 1520, 29640, 1891, -127, -129,
	1905, -1000, -1000, 1903, 29640, -1000, 11085, 55086, 1851, 1851,
	-132, -134, -1000, 29640, 1024, 67034, 20908, -1000, 2801, 2570,
	-1000, -1000, -1000, 29640, 1019, -1000, -106, 1663, 2156, -1000,
	-1000, -1000, -1000, 2016, -1000, -1000, 67034, 2015, 837, -1000,
	46107, 830, 802, -1000, -1000, -1000, 29640, -1000, 55086, 29640,
	1838, -1000, 730, 45261, -1000, 2449, 1434, -1000, 2458, 67034,
	2565, -1000, 2077, 456, -1000, 833, 455, 454, -147, 29640,
	29640, -149, 450, 833, -141, -1000, 751, 741, -1000, -1000,
	55086, 55086, 29640, 29640, -1000, 3906, 3906, 3906, -1000, 293,
	-1000, -1000, 1771, 2629, -1000, 72649, 72362, 3770, 30996, 11085,
	-150, -1000, 67034, 76349, -159, -1000, -1000, -1000, 58482, 676,
	-1000, 2796, -1000, -1000, 1414, -1000, -1000, -1000, 67034, 1911,
	-1000, -1000, 29640, 548, 442, 29640, -1000, -1000, 2090, 2238,
	2096, 441, -1000, -1000, -1000, -1000, -1000, 1515, -1000, -1000,
	76349, 2603, -1000, -1000, -1000, 440, 438, 76349, 437, 729,
	2207, -1000, -1000, -1000, 76349, 436, 830, -1000, 1727, 1737,
	435, -1000, -1000, -1000, 2101, 286, 2685, 802, -1000, 2730,
	-1000, -156, 917, -157, 55086, 45261, -1000, 2000, -1000, 1100,
	-162, 67034, 1434, -1000, -1000, 43984, 43984, 1520, -164, -165,
	-1000, 43984, -1000, 2055, -1000, 67034, -1000, 67034, -1000, -1000,
	-176, -177, -1000, 1750, 29640, -1000, -1000, 3770, -188, -1000,
	-144, -1000, 2678, -1000, -1000, -1000, -1000, -1000, 2387, 72316,
	1963, 67034, 72029, 2230, -1000, -1000, 1663, 67034, 55086, 916,
	16817, 1667, 1667, 29640, 20456, 1726, 29640, -1000, 55086, 67034,
	-1000, 2538, 2096, 98, -1000, -1000, 1520, 434, 1520, 431,
	-1000, 2002, 1254, -1000, 870, -1000, -1000, -191, -193, 2096,
	1520, -1000, -198, -1000, -199, -200, -1000, -1000, 268, 30544,
	30544, 30544, -159, -1000, 67034, 429, 2364, -1000, 1808, 1713,
	137, 918, -1000, -1000, 2214, -208, 426, -1000, 29640, -1000,
	-209, -1000, 902, -210, -1000, 900, -216, -1000, 2203, -1000,
	-217, 425, -218, -1000, -1000, -1000, 1663, 837, 2096, 29640,
	2096, 29640, -1000, 38346, -1000, 833, 833, 1663, 2096, 833,
	-1000, -1000, -1000, 2396, -1000, 31448, 1777, 1386, 74509, 2396,
	2396, -1000, -1000, 67034, -1000, 1836, 1819, 1245, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1963, 76349, -1000, 1667,
	2153, -1000, 1667, 2200, -1000, 1701, -1000, 67034, -1000, 67034,
	830, -1000, 1663, -219, 1663, -224, -205, -1000, -1000, -1000,
	1663, -1000, -1000, 1448, 2697, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2525, -1000, 941, 1853, 1853, 1808,
	-1000, 424, -1000, 423, -1000, -225, -1000, -1000, 831, 1520,
	831, 1520, -1000, -1000, 1372, -1000, -1000, 1765, 30092, -1000,
	2716, -1000, -1000, 2045, -1000, 2214, 29640, 29640, 1849, -1000,
	2794, 2096, -1000, 2096, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -226, -232, -1000, -1000, -1000, -1000, 1663, 1663, 1663,
	997, 831, 831, -1000, 406, -1000, -1000, 29640, -235, 1663,
	-1000,
}
var sqlPgo = [...]int{

	0, 3466, 3463, 3462, 3461, 3459, 3458, 3456, 3453, 3451,
	3445, 3444, 3443, 3437, 3434, 3433, 3431, 3430, 3429, 3427,
	3426, 3424, 3423, 3421, 3420, 3417, 3416, 3412, 3410, 3409,
	3407, 3405, 3404, 3403, 3401, 3400, 3399, 3398, 3395, 3394,
	3393, 3391, 3390, 3389, 3388, 3387, 3384, 3383, 32, 3382,
	3381, 3379, 3378, 3375, 3374, 3371, 3370, 3366, 3364, 3363,
	3361, 3360, 3355, 3353, 3348, 3347, 35, 3346, 221, 3345,
	3344, 3341, 3339, 3338, 3337, 3336, 3335, 3334, 3333, 218,
	3325, 140, 3324, 3321, 3318, 3315, 3312, 217, 3310, 3309,
	3308, 3305, 3304, 3299, 3298, 3295, 128, 3290, 3289, 179,
	3288, 3287, 3286, 3285, 3284, 3283, 3280, 3273, 3272, 3271,
	195, 3267, 212, 3265, 3262, 3260, 3249, 3246, 3245, 3244,
	3242, 3237, 3236, 3233, 3232, 3230, 3229, 3228, 3223, 3222,
	3221, 3214, 3213, 3212, 3210, 3209, 3208, 3207, 3205, 3204,
	220, 145, 3202, 3200, 210, 209, 3198, 3196, 99, 94,
	27, 3191, 90, 143, 188, 8280, 186, 3189, 3187, 3186,
	153, 3185, 3184, 3183, 3179, 69, 66, 131, 136, 127,
	137, 157, 3178, 3176, 75, 64, 34, 30, 104, 3175,
	3174, 3171, 2576, 89, 3170, 3169, 206, 187, 3167, 1618,
	3166, 215, 97, 96, 100, 93, 3161, 118, 29, 3156,
	148, 43, 3154, 126, 74, 31, 6453, 6822, 3152, 114,
	223, 83, 197, 172, 160, 169, 165, 133, 111, 3150,
	196, 3149, 57, 154, 3148, 3146, 3143, 63, 150, 79,
	3140, 11, 3, 146, 12, 102, 7, 3136, 17, 3135,
	3132, 3129, 3126, 26, 135, 3125, 110, 62, 3124, 21,
	3121, 61, 161, 3119, 176, 98, 3118, 3117, 200, 159,
	167, 3116, 13, 181, 3115, 3113, 3110, 3109, 3108, 105,
	22, 101, 3107, 3105, 107, 185, 3101, 55, 3100, 134,
	76, 121, 214, 123, 174, 87, 173, 147, 182, 3099,
	3096, 3095, 151, 3094, 3092, 119, 168, 3090, 3087, 222,
	36, 54, 183, 53, 3086, 125, 3084, 158, 3083, 3081,
	3080, 211, 142, 166, 16, 73, 95, 25, 10, 184,
	122, 88, 84, 3075, 3675, 1439, 359, 3070, 113, 91,
	49, 92, 116, 204, 58, 3066, 3061, 1480, 3057, 3055,
	3054, 3052, 139, 3051, 3050, 3046, 108, 38, 78, 3044,
	124, 70, 9, 82, 208, 86, 171, 190, 202, 3043,
	141, 3038, 40, 117, 3037, 156, 199, 115, 3036, 550,
	120, 3034, 175, 3032, 3031, 3023, 3021, 155, 3020, 3014,
	194, 3013, 109, 3012, 3011, 144, 112, 132, 72, 52,
	3010, 68, 33, 3009, 152, 56, 3008, 164, 50, 0,
	6722, 5648, 5312, 3007, 1543, 3002, 170, 106, 3001, 3000,
	2998, 80, 2997, 60, 2996, 2995, 37, 2994, 14, 5,
	8, 18, 15, 710, 393, 2993, 2992, 85, 103, 129,
	2991, 213, 180, 2990, 2989, 2988, 71, 2983, 23, 2981,
	20, 2980, 2979, 28, 2, 19, 2978, 2977, 191, 2976,
	192, 2975, 2971, 2705, 2970, 203, 67, 2969, 201, 2968,
	138, 163, 2967, 2966, 2965, 2964, 198, 2963, 2962, 6,
	24, 1, 2959, 2937, 2934, 162, 4, 2508, 2931, 2930,
	65, 2929, 2927, 149,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 455,
	455, 19, 31, 20, 32, 13, 456, 456, 456, 456,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	454, 454, 170, 170, 169, 164, 164, 457, 457, 171,
	171, 171, 173, 173, 37, 37, 95, 95, 95, 96,
	96, 97, 97, 152, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 397, 397, 398, 398, 147,
	147, 148, 148, 148, 148, 149, 149, 150, 150, 150,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 49, 141, 141,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	464, 464, 465, 465, 466, 466, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 63, 63, 245, 245, 221, 221, 64, 64, 64,
	65, 65, 66, 66, 53, 53, 450, 450, 259, 259,
	364, 364, 68, 68, 278, 278, 69, 69, 69, 69,
	69, 69, 70, 70, 70, 70, 70, 70, 70, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 77, 78, 78, 78, 75, 75, 75, 73, 73,
	73, 72, 72, 72, 76, 76, 76, 74, 74, 74,
	260, 260, 79, 79, 79, 79, 79, 79, 79, 79,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 366, 366, 80, 80, 80,
	335, 335, 84, 84, 84, 293, 293, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 98, 98, 98, 98,
	453, 453, 252, 252, 186, 186, 186, 186, 91, 91,
	91, 91, 92, 92, 92, 93, 93, 146, 146, 104,
	104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
	43, 43, 43, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 48, 48, 106, 106, 460, 460,
	108, 105, 105, 105, 107, 107, 107, 107, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 391,
	391, 268, 268, 389, 389, 405, 405, 390, 390, 225,
	225, 225, 225, 225, 226, 226, 226, 396, 396, 396,
	396, 396, 396, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 131, 131, 131, 140, 140,
	140, 140, 140, 140, 140, 133, 133, 133, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	114, 114, 123, 123, 123, 123, 123, 118, 118, 120,
	120, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	115, 115, 115, 115, 125, 125, 125, 125, 299, 299,
	299, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 136, 136, 136, 136, 136, 136, 349, 349, 132,
	132, 132, 132, 135, 135, 135, 135, 283, 283, 129,
	129, 129, 130, 130, 130, 134, 134, 137, 137, 137,
	137, 116, 116, 116, 468, 468, 468, 138, 138, 128,
	128, 139, 139, 139, 139, 139, 139, 139, 139, 127,
	127, 127, 126, 126, 126, 126, 119, 451, 451, 448,
	448, 448, 448, 448, 448, 448, 449, 449, 452, 452,
	89, 89, 89, 58, 58, 469, 469, 469, 59, 59,
	470, 470, 470, 458, 458, 458, 459, 459, 459, 459,
	459, 459, 227, 227, 228, 228, 316, 316, 316, 316,
	316, 231, 231, 172, 172, 172, 234, 235, 235, 232,
	232, 233, 233, 233, 237, 237, 236, 239, 239, 238,
	315, 412, 412, 414, 414, 414, 414, 414, 414, 414,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	410, 410, 410, 411, 406, 406, 407, 407, 407, 407,
	229, 229, 230, 230, 230, 230, 408, 409, 250, 250,
	352, 413, 413, 415, 415, 417, 471, 471, 471, 471,
	471, 471, 472, 472, 314, 314, 243, 243, 418, 418,
	418, 418, 419, 419, 419, 419, 419, 422, 421, 420,
	420, 420, 420, 420, 345, 345, 345, 62, 62, 62,
	280, 280, 279, 279, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 143,
	143, 60, 60, 60, 178, 178, 57, 57, 57, 474,
	474, 61, 61, 61, 475, 475, 67, 67, 67, 67,
	67, 67, 56, 56, 56, 56, 56, 476, 476, 300,
	300, 298, 298, 249, 249, 351, 190, 190, 165, 165,
	165, 23, 25, 25, 17, 17, 34, 34, 35, 35,
	30, 30, 461, 461, 462, 462, 90, 90, 94, 94,
	94, 102, 102, 142, 142, 142, 142, 142, 142, 142,
	38, 38, 38, 38, 50, 50, 50, 50, 100, 478,
	478, 478, 101, 101, 477, 477, 185, 185, 185, 185,
	187, 187, 311, 311, 312, 312, 479, 479, 313, 313,
	313, 313, 180, 179, 181, 181, 55, 55, 55, 174,
	174, 175, 175, 176, 176, 177, 177, 480, 480, 87,
	87, 87, 145, 145, 220, 220, 307, 307, 307, 244,
	244, 195, 195, 310, 310, 308, 308, 308, 308, 277,
	277, 277, 144, 144, 257, 257, 270, 270, 271, 271,
	361, 361, 272, 99, 99, 155, 155, 153, 153, 153,
	153, 153, 153, 160, 160, 261, 261, 161, 161, 161,
	161, 162, 162, 162, 154, 154, 154, 156, 156, 156,
	156, 156, 156, 156, 159, 159, 159, 159, 163, 163,
	163, 158, 158, 429, 429, 429, 431, 431, 432, 428,
	428, 430, 430, 473, 473, 282, 282, 282, 241, 242,
	240, 240, 247, 247, 246, 248, 248, 350, 350, 350,
	166, 166, 166, 275, 275, 275, 275, 303, 303, 301,
	301, 301, 302, 302, 304, 304, 304, 305, 305, 306,
	306, 274, 274, 331, 331, 157, 157, 157, 254, 254,
	254, 255, 255, 322, 322, 322, 322, 322, 322, 323,
	323, 321, 321, 321, 321, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 354, 354, 256, 256, 355, 309,
	309, 446, 446, 446, 447, 447, 348, 348, 356, 356,
	356, 356, 356, 356, 346, 346, 347, 347, 362, 363,
	363, 286, 286, 286, 286, 284, 284, 287, 287, 287,
	287, 285, 285, 357, 357, 357, 357, 276, 276, 358,
	358, 358, 359, 317, 318, 318, 367, 367, 367, 367,
	382, 253, 253, 253, 253, 253, 481, 481, 368, 368,
	368, 368, 368, 368, 368, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 372, 372, 372,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 381, 381,
	381, 381, 381, 373, 373, 378, 378, 379, 379, 379,
	374, 375, 380, 380, 380, 380, 482, 482, 384, 384,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 370,
	370, 370, 377, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 294, 294, 295, 295,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 326, 326, 326, 326, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 423, 423, 423, 423, 423, 423,
	423, 423, 426, 426, 427, 427, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 433, 433, 434, 434, 436,
	436, 437, 437, 438, 439, 439, 439, 440, 441, 441,
	435, 435, 442, 442, 442, 442, 443, 443, 444, 444,
	444, 444, 444, 445, 445, 445, 445, 445, 337, 337,
	338, 338, 344, 344, 344, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 188, 188, 188, 188, 188, 266, 266, 264, 264,
	264, 267, 267, 265, 265, 263, 263, 262, 262, 334,
	334, 332, 332, 336, 336, 288, 288, 383, 383, 383,
	383, 383, 383, 383, 383, 289, 289, 289, 297, 290,
	290, 291, 291, 291, 291, 291, 328, 329, 292, 292,
	292, 330, 330, 339, 343, 343, 342, 341, 341, 340,
	340, 319, 319, 320, 320, 273, 273, 483, 483, 269,
	269, 360, 360, 360, 360, 223, 223, 258, 258, 222,
	222, 215, 215, 216, 216, 216, 216, 251, 251, 385,
	385, 385, 386, 387, 388, 333, 205, 204, 192, 193,
	203, 202, 201, 191, 194, 198, 199, 200, 196, 197,
	211, 210, 209, 207, 208, 365, 217, 217, 218, 218,
	218, 219, 219, 219, 219, 189, 189, 212, 212, 213,
	214, 214, 206, 206, 206, 182, 182, 182, 183, 183,
	184, 184, 395, 395, 393, 393, 393, 394, 394, 394,
	394, 392, 392, 392, 392, 392, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 401,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 404,
	404,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 6, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 3, 3, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	5, 3, 5, 5, 5, 7, 3, 3, 3, 4,
	3, 5, 3, 6, 5, 6, 3, 5, 6, 3,
	4, 3, 4, 3, 3, 4, 4, 5, 0, 1,
	1, 3, 2, 4, 3, 3, 5, 4, 3, 5,
	3, 5, 4, 6, 4, 6, 4, 1, 0, 3,
	4, 4, 5, 7, 5, 3, 3, 2, 0, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 7, 9, 3, 4, 10,
	10, 3, 5, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 0, 1, 2, 2, 2,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 5, 8, 5, 11,
	3, 0, 2, 4, 3, 3, 1, 5, 1, 3,
	1, 2, 0, 1, 2, 2, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 3, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 1,
	3, 1, 3, 8, 5, 3, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 2, 3, 4,
	3, 4, 5, 0, 3, 0, 2, 2, 4, 2,
	3, 0, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 3, 1, 3, 3, 4, 5,
	2, 2, 0, 2, 2, 1, 1, 1, 0, 2,
	2, 5, 2, 3, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 3, 4, 1,
	5, 3, 4, 5, 1, 5, 1, 3, 2, 0,
	3, 0, 2, 3, 1, 3, 2, 0, 3, 5,
	6, 4, 6, 4, 3, 2, 1, 0, 5, 1,
	0, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 1, 0, 2, 5, 7, 2,
	1, 2, 4, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 5, 4, 1, 2, 1,
	4, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 2, 5, 1, 4, 2, 5, 1, 4, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 5,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 3, 3, 3, 0, 1, 4, 2, 2,
	2, 2, 2, 3, 2, 2, 3, 0, 4, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 1, 2,
	3, 2, 3, 2, 3, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 1, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 466, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 294, 323, 333, 317, -107, -108,
	352, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -463, 86, -430,
	-71, -74, -76, -467, 116, 131, 175, 286, -92, -93,
	319, 321, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 356, 403,
	42, 366, 71, 119, 327, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -429, -72, -73, -75, -77, -78, 318, -156,
	-154, 463, 416, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 434, 442, -159, -157,
	-158, -163, 340, 424, 380, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, -207, -212, -213, -214, -206,
	-182, -401, -404, 4, -399, -402, 137, 182, 252, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 386, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 250, 248, 254, 257,
	172, 259, 260, 262, 263, 264, 280, 267, 268, 269,
	272, 273, 276, 279, 281, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 294, 296, 298, 299, 300, 301,
	302, 303, 305, 306, 308, 309, 310, 311, 312, 317,
	314, 315, 316, 318, 319, 320, 321, 323, 325, 326,
	327, 328, 330, 332, 353, 354, 368, 333, 334, 335,
	336, 337, 338, 339, 343, 347, 344, 345, 346, 341,
	342, 348, 349, 350, 352, 355, 356, 358, 359, 361,
	362, 364, 365, 366, 367, 369, 372, 373, 374, 370,
	371, 379, 377, 378, 381, 382, 383, 384, 385, 387,
	389, 397, 398, 400, 403, 404, 405, 395, 407, 408,
	411, 412, 413, 414, 415, 420, 416, 418, 421, 422,
	423, 429, 428, 435, 436, 438, 439, 440, 33, 43,
	44, 46, 49, 60, 61, 62, 65, 103, 104, 124,
	134, 135, 146, 160, 162, 169, 170, 171, 189, 195,
	197, 201, 221, 256, 258, 274, 278, 291, 293, 304,
	329, 360, 375, 390, 391, 392, 393, 399, 401, 424,
	425, 426, 430, 437, 265, -200, 2, -182, -182, 294,
	26, 2, 26, 290, 342, 382, 384, 2, -453, -252,
	2, 26, -186, -182, 86, 158, 340, -200, 2, -453,
	-252, 24, 2, -182, 2, -187, 2, 333, -182, 466,
	81, 228, 64, 329, 349, -110, 398, -109, 390, 335,
	-111, -391, 2, 244, -182, 466, 466, 466, 466, 2,
	380, 283, 428, 341, 417, 99, 301, 182, -448, 2,
	4, -402, -399, -216, -215, 380, 99, -214, -206, 456,
	-213, 466, 466, 466, 2, 204, 205, 300, 299, 349,
	350, 466, 466, 466, 2, 25, 58, 80, 83, 105,
	133, 153, 156, 270, -464, 236, 280, 298, 335, 348,
	379, 387, 400, -459, 367, 59, -458, 417, -474, 405,
	114, -298, 99, 228, 157, 412, 384, 382, 325, 161,
	410, 109, 188, 415, 414, 466, 466, 25, 58, 67,
	83, 114, 133, 153, 156, -466, 280, 298, 332, 335,
	348, 379, 387, 405, 400, 2, 428, 341, 380, 182,
	99, 417, 325, 297, -81, 2, 463, 29, 28, 352,
	-152, 380, 198, 2, -182, 204, 205, 2, 466, 466,
	-448, 2, 204, 205, 2, 198, 2, 59, 337, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 2, -140, 349, 367,
	167, 41, 64, 26, 69, 284, 100, 159, 182, 183,
	212, 80, 81, -299, 40, 205, 204, -349, 381, 336,
	342, 377, 398, 86, 418, 326, 440, 301, 302, 127,
	4, 99, 244, 351, 390, 228, 73, -473, 2, 380,
	-477, 2, 398, 398, 2, -477, 2, -477, 2, -185,
	2, 398, 394, -478, 398, 437, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, -154,
	-156, -155, 466, 466, 466, 466, 466, -140, 349, 2,
	64, 26, -160, -161, 151, -246, -247, 409, 196, 122,
	271, -153, -155, 2, -429, -389, 2, -324, -405, -326,
	454, 455, 447, 251, 441, -337, 105, 410, 265, -404,
	-327, -339, 124, 329, -267, 8, 9, 5, 6, 7,
	-189, -369, -333, -377, 402, 136, 255, -219, 467, 10,
	463, -426, -155, -338, 34, 162, 57, -393, -218, -371,
	-379, -375, -376, -481, 47, 53, 52, 387, 243, 343,
	344, 361, 345, 346, 45, 420, 179, 262, 264, 190,
	4, 197, -217, -206, -423, -424, -399, -400, 189, 195,
	191, 360, 192, 193, 194, 44, 304, 147, 148, 146,
	115, 104, 103, 258, 49, 48, 46, 425, -380, 101,
	390, 391, 392, 393, 207, 208, -182, -401, 67, 91,
	92, 90, 95, 94, 96, 93, 351, 417, 58, 33,
	169, 170, 201, 256, 171, 65, -425, 371, 87, 155,
	187, 173, 200, 202, 206, 222, 225, 245, 249, 253,
	275, 277, 324, 357, -482, 426, 134, 135, 278, 291,
	375, 399, 401, 160, 221, 60, 61, -431, 305, -432,
	-200, -431, 466, 466, 468, 466, -240, -241, -242, 2,
	26, 112, 463, 2, -353, 2, 461, -357, -155, 216,
	-356, 463, -354, -207, 266, -427, 330, -423, -424, -189,
	-206, -218, 4, -243, 463, 465, 99, 380, 68, 182,
	-293, 463, -182, 26, 265, 394, 468, -335, 463, 265,
	154, 268, -182, 2, 2, 353, 2, 463, -110, 62,
	398, 39, 349, -312, 2, -313, -179, -180, -181, -362,
	203, 296, 303, 443, 440, -389, -460, 154, 446, 394,
	-389, -268, 465, 2, -357, 169, -207, 2, -204, -392,
	4, -399, -402, -400, -403, 67, -401, 26, 28, 29,
	30, 32, 34, 35, 36, 37, 50, 57, 58, 63,
	66, 68, 80, 86, 90, 91, 93, 92, 94, 95,
	96, 105, 107, 110, 112, 113, 117, 119, 122, 136,
	138, 151, 153, 154, 158, 161, 164, 176, 186, 196,
	198, 216, 219, 226, 229, 230, 251, 255, 261, 265,
	266, 270, 271, 288, 295, 307, 322, 340, 351, 363,
	376, 380, 388, 394, 396, 402, 409, 410, 417, 419,
	427, 431, 432, 433, 434, -404, 2, -357, 169, 2,
	-209, 169, -357, -212, 2, -397, 169, -395, 10, -394,
	5, 4, -399, -402, -400, 2, -191, -182, 2, -203,
	-392, 2, -222, 169, -207, -208, -212, 394, 468, -258,
	-215, -216, -251, -182, 465, -324, 2, -99, 2, -324,
	169, 2, -99, 169, 2, -324, 169, 2, -99, 169,
	2, 2, 2, 400, 2, 83, 169, -182, 380, 98,
	2, 316, -465, 332, 404, 428, 2, 2, 2, 2,
	2, 2, 2, 380, -196, 2, -182, 151, 341, -475,
	305, -397, 169, 2, -397, 169, 2, -210, -212, -210,
	182, 199, -191, 169, 2, 384, 382, 384, 382, 154,
	2, 198, 2, 198, 2, -358, 2, -359, -207, 2,
	2, 2, 2, 2, 169, -182, 380, 98, 2, 214,
	2, 2, 2, 2, 2, 2, 2, 2, 2, -260,
	169, 2, -207, -260, 169, 2, -260, 169, 2, -223,
	169, 2, -222, -191, 169, 2, -398, 169, 2, -397,
	-398, 169, 2, -366, 2, -365, -394, 424, -81, 463,
	-81, 463, 349, 463, -397, -207, -207, -324, -99, 154,
	-324, -99, -152, 151, 2, 99, 380, -140, 2, 151,
	419, 2, 8, 2, -397, 336, 302, 143, 2, 353,
	2, 64, -299, 440, 154, 2, 154, 2, -283, 2,
	434, -451, 2, 265, 154, 2, 154, 2, 154, 2,
	154, 2, 154, 2, 299, 350, 205, 2, -99, 431,
	-324, 431, 2, 397, 213, 128, 154, -283, 2, 154,
	2, 154, 2, 5, 2, 203, 296, 368, 2, -207,
	-468, 2, 380, 428, 341, 2, 2, 76, 77, 154,
	2, 154, 2, 154, 440, 2, -276, -357, -311, -312,
	-311, 394, -187, -160, -246, -247, -140, 353, 2, -261,
	259, 414, 247, 355, 211, -160, -275, -301, -302, 226,
	138, 261, -282, 26, 112, -282, -282, 51, 464, 464,
	11, 12, 66, 38, 454, 455, 456, 457, 149, 458,
	459, 452, 453, 451, 444, 445, 449, 209, 210, 82,
	448, 446, 75, 234, 331, 139, 140, 141, 142, 313,
	180, 31, 181, 14, 15, 16, 30, 270, 225, 441,
	173, 357, 447, 17, 18, 19, 200, 202, 253, 43,
	176, -188, -224, -324, -324, -324, -324, -324, 277, 463,
	-273, -319, 461, -155, 463, 463, 463, 5, 463, 5,
	-388, 8, -155, -324, -337, 464, -265, 463, -155, -337,
	-332, 463, 329, 461, 463, -340, -324, 465, -433, 435,
	-373, 463, 293, -372, 463, -372, -372, 429, -370, 463,
	442, 436, 463, -370, 463, 463, 151, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	429, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	468, -431, -243, 463, -269, -360, -324, 456, -269, -269,
	265, -262, -324, 87, -286, 206, 245, 155, 222, 324,
	187, -388, -82, -68, -79, -87, -99, -112, -144, -145,
	-321, 467, -348, 442, -155, -354, -206, -155, -356, 463,
	-353, -348, 456, -207, 463, 154, 463, 465, 154, -251,
	-392, -191, -207, -217, -218, -222, 111, -262, -448, -251,
	-186, 35, -334, -367, -368, -369, -378, -374, -377, -381,
	47, 53, 52, 387, 243, 343, 344, 361, 345, 346,
	45, 420, 179, 262, 264, 190, 4, 46, 425, -380,
	197, 309, 310, 308, 312, 311, 189, 195, 191, 360,
	192, 193, 194, 44, 304, 147, 148, 146, 115, 104,
	103, 258, 49, 48, 101, 390, 391, 392, 393, 207,
	208, 426, 371, 60, 61, -448, -251, 151, -391, -262,
	35, -312, 2, 105, -395, 39, -479, 468, 224, -226,
	233, 250, 166, 266, 438, 259, -396, 5, 4, -333,
	-345, 105, 228, -377, 9, 455, -385, 8, 454, -390,
	-389, 89, 465, -392, -168, 314, -167, 23, 27, 116,
	422, 129, -233, 184, 283, 124, 364, 413, -455, -456,
	334, 385, 386, 78, 259, 314, 124, -279, -281, 35,
	97, 247, 279, 54, 177, 238, 239, 366, 430, 124,
	314, 434, 124, -456, 314, -456, -170, 364, 413, -455,
	-456, 334, 314, -169, -233, 124, 467, -96, -397, 463,
	-258, 468, 468, -392, 456, 124, 124, 124, 124, 2,
	2, 251, 2, 2, 2, 156, -458, -466, 2, 2,
	2, -207, 169, -245, 265, -450, -259, 380, -207, -209,
	169, 2, -212, 428, -178, -428, 434, 251, 251, 35,
	463, 2, -193, 169, 2, -183, -182, 182, -428, 251,
	-358, -220, -207, -220, 352, -200, 35, -321, 124, 2,
	2, 2, -182, -171, 468, 56, 320, 124, -171, 124,
	-171, 124, -171, 468, 124, -171, 124, 468, 124, 124,
	464, 468, -366, -366, -397, -150, 434, 154, 86, 463,
	463, -152, -97, -96, -397, -450, -191, 2, -207, 2,
	380, 207, -397, -397, -397, -391, 26, 354, 2, 299,
	350, 77, -207, 380, 99, 182, 70, -452, 151, -449,
	325, -448, -207, 99, -207, 99, -207, 99, -207, -207,
	2, 2, 2, 2, 74, 74, 151, 2, 397, 2,
	397, 2, -182, -182, -182, 224, -207, 151, 380, 182,
	380, 182, 99, 380, -171, 468, -187, -160, -275, -391,
	-162, 359, 254, -260, 211, 355, -160, -302, -301, 26,
	-324, -306, 145, 246, -324, -326, -154, -154, -154, -248,
	-350, -324, 295, 182, -382, -367, -367, -205, -392, 390,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, 225, 173, 357, 43, 176,
	-324, 394, -324, -324, -324, -324, 242, 251, 255, 402,
	136, 411, 112, 259, -483, 376, 37, -330, -155, -266,
	463, -344, 32, 363, 26, -337, 463, 2, -319, -324,
	-320, -263, -262, -262, 464, 427, 26, 112, 456, 2,
	8, -294, -296, 439, 241, 102, 168, 240, -295, 339,
	464, 468, 35, 464, -324, -263, -336, -332, -262, -343,
	-342, 431, -392, 456, -434, 144, 161, 8, -386, 8,
	-386, 390, 390, 8, -386, -386, 463, 464, 2, 464,
	2, 464, 2, 464, 2, 464, 2, -324, -324, -324,
	-324, -324, -324, -324, -262, -288, 2, -383, -262, 4,
	439, 241, 102, 168, 240, 339, 5, -288, 2, -289,
	2, -324, -262, -290, -325, -326, 454, 455, 447, -337,
	-291, 2, -324, -263, -324, 50, 219, 396, -292, -324,
	154, -262, -262, 2, -262, 2, -432, 35, -262, -254,
	468, 154, 35, 4, -254, -254, 463, 464, 468, -287,
	165, 237, 232, -287, -353, -286, 206, -284, 275, -284,
	-284, -446, 463, 462, 466, 466, 466, 466, 466, -348,
	-192, 461, 469, -392, -347, -346, 35, -200, 272, -348,
	-348, 465, 464, -347, -207, 463, -262, -392, 369, 464,
	465, 200, 200, 200, 200, 330, 464, 394, 434, -81,
	267, 464, 468, -253, 34, 461, -296, 463, -384, 429,
	463, 463, 154, -252, -460, 464, 398, -313, -225, 303,
	362, 315, 347, 378, 9, 8, 8, 468, -392, 468,
	-461, 80, 394, 68, -315, 169, 68, -406, -194, 80,
	-407, -182, 63, 410, 295, 153, -461, 80, 295, -461,
	80, 80, 352, 367, 51, -357, 38, 38, 26, -99,
	220, 154, 440, 380, 182, 394, -357, -281, -367, 97,
	238, 239, 51, -387, -385, 455, -387, 51, -387, -387,
	-387, 434, -209, -357, 394, 285, -397, 394, 468, 38,
	38, 26, -99, 220, 154, 394, -222, -192, -363, -362,
	-398, -215, -182, 465, -324, -99, -324, -99, 124, 2,
	-475, 214, 463, -229, 251, 154, -251, -364, 198, 468,
	-259, -280, -279, 251, -211, 2, -207, 285, 124, 124,
	463, 120, 301, 2, 265, 251, -193, 169, -174, 383,
	124, -278, 419, -307, -99, 463, 105, 35, -307, -270,
	-271, -361, -272, -194, 463, -200, -182, 2, -207, -260,
	-260, -260, -222, -223, -191, -397, -398, -398, -81, -365,
	464, 464, 464, -149, 269, -148, -182, 5, -152, 419,
	-228, -316, -315, -410, -411, -406, 225, 182, 410, 199,
	137, -244, -195, -194, 98, -150, -362, 468, -150, -150,
	-363, -363, -207, 151, 2, 2, -283, -207, -191, -222,
	-207, -251, -251, -283, -191, -283, -191, -283, -191, -99,
	-324, 349, 151, 151, 465, -283, 301, 99, 380, 283,
	182, -207, -222, -207, -222, -191, -207, -357, -160, 231,
	414, -304, -385, 463, -305, 329, 330, 468, -165, 36,
	110, 211, -207, 440, 121, -324, -324, 394, -483, 376,
	-330, 121, -324, 242, 255, 402, 136, 411, 112, 259,
	154, 463, -325, -325, 464, -264, -324, -324, 462, 471,
	464, -247, 468, -246, -324, -262, -262, 464, 464, 394,
	394, 394, 394, 463, 465, -262, -251, 462, 462, 468,
	464, -341, -342, 117, -324, 465, -439, 276, 463, 463,
	464, 464, 468, 464, 440, 440, 464, 464, 464, -324,
	35, 468, 468, 468, 464, 468, 468, 468, 464, 464,
	154, 464, 464, -297, 288, 464, 11, 12, 454, 455,
	456, 457, 149, 458, 459, 452, 453, 451, 444, 445,
	446, 75, 234, 331, 14, 15, 16, 200, 176, -325,
	-325, -325, 464, -328, -329, 154, 151, 35, -292, -292,
	-292, 464, 154, -262, 464, 464, 463, 464, -318, -317,
	432, -360, -255, 2, -353, -202, -392, -318, -318, -262,
	-324, 206, 206, -285, 419, 265, -287, -353, -346, 464,
	-447, -388, -348, -347, -388, -323, -322, 152, 36, 110,
	248, 172, -200, -243, -347, -347, -392, -348, 464, -256,
	-355, -427, -247, 465, -392, -141, 5, 255, -141, -141,
	-141, -251, 24, 289, -367, 461, 462, 8, 8, 463,
	-386, -386, -251, 154, -389, -312, 408, 72, 303, 390,
	-389, -167, 314, -194, -194, -207, 251, -315, 169, -173,
	251, -367, -201, -182, 463, 463, 211, 211, -194, -201,
	211, 169, -194, 169, -201, -201, -454, 303, 260, -324,
	227, 301, 252, -168, 314, -99, -99, -99, 463, -460,
	419, 111, -207, -222, -207, -211, 314, 249, -217, -387,
	-387, -279, 314, -209, -397, 434, -191, -169, -99, -99,
	-99, 463, -192, -170, 314, -147, 178, 464, 456, -182,
	428, -182, -227, -230, -228, -194, -469, 436, 434, 124,
	-221, -207, 461, -150, -397, -207, 124, -243, -397, -397,
	-397, 2, 463, 2, -207, 124, 265, 251, -175, 118,
	-480, 446, -191, -318, -255, -277, -310, 322, 265, -244,
	424, -200, -277, -257, 468, 154, 446, 465, -244, 2,
	-171, -171, -171, -171, -171, -81, -81, -150, 468, 463,
	446, 446, 463, -397, -397, 464, 468, -207, -193, 182,
	182, -199, -183, 464, 468, 465, 463, -150, -96, 154,
	-46, 434, 380, 467, -283, -283, -283, 349, 349, -182,
	-203, -191, -207, -204, -222, 151, 151, -305, -324, -350,
	-166, 257, -207, 467, -324, -324, 121, 121, -324, -325,
	-325, -324, 121, 154, 463, -324, -334, 30, 30, 464,
	468, -320, -324, 464, 427, -247, -247, 464, 5, 241,
	168, 240, -295, 240, -295, -295, 8, 456, -392, 464,
	-332, 119, -324, 388, -392, 456, -440, -197, 463, -182,
	432, -246, -386, -370, -370, 464, -382, -367, -324, -324,
	-324, -324, -324, -324, -328, -324, -382, -367, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, 112, 251, 259,
	-325, -329, -328, -324, -324, -367, 464, 464, 464, -262,
	-81, -274, 161, -324, -363, 468, -274, -274, 464, -353,
	-353, 463, -324, 206, 462, 464, 468, -347, 462, 468,
	470, 446, -243, 465, -346, 464, 468, -309, 35, 464,
	-392, 268, 5, 8, 461, 462, 464, -386, 464, 464,
	-251, -324, 394, 394, 124, 251, 421, -412, -407, -324,
	-249, -351, -324, 463, 463, -164, 116, 352, -462, 2,
	419, 124, -171, 124, -171, 438, 463, 463, 394, 434,
	-262, -324, -151, 105, -391, -456, 467, -456, 467, 394,
	394, 285, 434, -262, 394, -150, 154, 2, 2, 2,
	464, 464, 468, -413, 35, 263, -182, -207, -64, 434,
	-362, -388, -209, 35, -178, 2, -300, 419, -192, -207,
	124, -176, 218, -480, -395, -428, -247, -277, -269, 252,
	79, 464, -318, -271, -255, -324, 2, 464, -148, -149,
	-397, -397, -397, -150, -152, -152, -316, 2, 463, -193,
	-183, 463, -152, -195, 2, -398, -99, 269, -207, 456,
	-283, -235, -234, 283, 259, -235, 329, 329, 266, 464,
	145, 215, -165, -192, -324, -324, 121, 30, 30, -324,
	-324, -334, 464, -324, -324, -262, 462, 5, -324, 464,
	464, 464, -324, 465, -441, -182, -324, 464, 464, 464,
	464, 468, 468, 464, 464, 464, 464, -329, 154, 112,
	259, 463, 464, 464, -331, 164, 51, -353, -331, -331,
	-285, -251, -353, -321, -388, -322, -192, 461, -392, -355,
	463, 465, 462, 2, 461, 464, -194, -194, -315, 124,
	-414, 80, -416, 66, 137, 86, 251, 255, 410, 295,
	63, 105, 307, 35, 464, 464, 468, -165, -249, -251,
	251, 373, 105, 251, 105, 98, 405, 182, -194, -201,
	-251, -251, -207, 130, 464, 468, 446, 2, 456, 456,
	-211, -209, -397, 130, 464, -192, -398, -231, 185, -194,
	-411, -408, -409, 295, -415, -417, 137, 295, -99, 2,
	463, -229, 269, 462, -280, -99, 463, -182, 265, 463,
	-192, -177, 217, -480, -395, -174, -303, -301, -308, 463,
	265, -99, -247, 446, 464, 464, 98, 98, -249, 463,
	463, -251, 98, 464, -47, -48, 182, 80, 287, -204,
	380, 182, 463, 463, -165, -324, -324, -324, 464, -247,
	-392, 456, -435, 283, 464, -324, -324, -325, 154, 463,
	-334, -436, 433, -324, -262, -436, -436, 464, -348, -388,
	2, 461, 2, -315, -201, -205, -198, -182, 137, 169,
	255, 211, 463, -325, -207, 463, 2, -471, 107, 186,
	-314, -472, 85, 374, -351, -166, 464, 464, 255, 255,
	-324, -367, -222, -171, -171, 464, 464, -324, 394, -391,
	84, -389, 2, -456, -324, 394, -232, -233, 176, -413,
	211, -198, 211, -470, 434, -227, -469, -65, -66, 395,
	-362, -249, -207, -249, 265, -480, -395, -175, -277, 113,
	-251, 80, -303, -330, -150, 463, 463, 464, -249, -249,
	464, 463, -150, 468, 26, 463, 26, 463, -207, -222,
	-262, -262, 464, -247, 51, 464, 464, -325, -334, 464,
	-437, -438, -197, -347, 462, 2, -416, -198, 251, -324,
	-184, 463, -324, 186, 108, 174, -231, 463, 307, -190,
	66, 463, 463, 463, 446, 154, 463, -469, 281, 463,
	98, 247, 464, 35, -66, 9, 464, -300, 464, -207,
	-395, -176, 414, 252, 464, -201, -277, -398, -398, -314,
	464, 464, -398, -48, -251, -251, 464, 464, -442, 301,
	330, 163, -262, 464, 468, 35, 124, 464, -418, 235,
	-182, 464, 108, 174, -232, -251, -207, -457, 419, -205,
	-237, -236, -234, -239, -238, -234, -262, -389, 84, 281,
	-262, -207, -250, -352, -194, 98, -231, -99, -314, 463,
	-314, 463, -177, 352, -317, 464, 464, -231, -314, 464,
	464, 464, 464, -443, -444, 43, 407, 89, -324, -443,
	-443, -438, -440, 137, -419, -422, -421, 265, 358, 155,
	282, 464, 373, 430, -471, 464, -243, -324, 464, 468,
	424, 464, 468, 424, 464, 154, 464, 463, 464, 468,
	-232, -470, -231, -249, -231, -249, -270, -150, -150, -232,
	-231, -150, -445, 123, -444, 292, 150, 329, 292, 150,
	-445, -445, -198, -421, 265, -422, 265, 414, 109, -418,
	-236, 176, -238, 154, 281, -251, -352, -469, -232, 464,
	-232, 464, -318, -232, 89, 161, 389, 247, 30, -420,
	247, 320, 56, 352, -420, -419, 463, 463, 464, -476,
	432, -314, -476, -314, 329, 273, -444, 22, 255, 105,
	-471, -262, -262, -172, 56, 320, 2, -231, -231, 464,
	464, -232, -232, -232, 394, -476, -476, 463, -262, 464,
	-232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 370, 371, 373,
	374, 375, 377, 378, 380, 382, 384, 386, 387, 389,
	391, 393, 394, 395, 396, 397, 399, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 461,
	0, 933, 935, 937, 939, 25, 26, 0, 0, 191,
	193, 195, 0, 220, 222, 224, 225, 227, -2, 0,
	322, 323, 325, 327, -2, -2, 0, 0, 448, 450,
	0, 0, 0, 470, 471, 0, 1023, -2, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 545, 546, 548,
	550, 552, 554, 556, 558, 560, 561, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, -2, -2,
	-2, 0, -2, -2, -2, 951, 29, 31, 33, 35,
	37, 39, 41, 61, 276, 277, 279, 281, 283, 286,
	287, 289, 1071, 329, 331, 333, 335, 337, 0, -2,
	1083, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1047, 1049,
	1051, 1053, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 372, 376, 379, 381, 383, 385, 388,
	390, 392, 398, 400, 402, 827, 1683, 1697, 1698, 1699,
	1702, 1703, 1704, 1705, 1706, 1707, 2049, 2129, 2130, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 0, 426, 424, 1677, 427, 1881,
	429, 431, 316, 317, 318, 319, 320, 321, 0, 441,
	435, 440, 442, 444, 445, 446, 447, 421, 419, 0,
	441, 1729, 439, 931, 932, 926, 927, 1914, 961, 460,
	-2, -2, -2, 2017, -2, 492, -2, 499, 2020, 1916,
	504, 0, 506, -2, 509, 934, 936, 938, 27, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	-2, -2, -2, -2, 0, 0, 1766, 1653, 1699, 1656,
	1651, 192, 194, 196, 197, 0, 0, 0, 0, 0,
	0, 221, 223, 226, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 733, 734, 879, 880,
	901, 0, 0, 0, 0, 324, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 254, 362, 363, 0, 1072, 1072, 0,
	0, 0, 0, 172, 163, 0, 0, 722, 449, 451,
	0, 158, 0, 0, 930, 0, 174, 0, 0, 465,
	467, 469, 534, 536, 538, 540, 542, 544, 547, 549,
	551, 553, 555, 557, 559, 562, 564, 566, 568, 570,
	572, 574, 576, 578, 580, 582, 584, 585, 0, 0,
	0, 0, -2, -2, 0, 0, -2, -2, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 0,
	588, 590, 591, 592, 0, 640, 657, 0, 870, 1073,
	963, 941, 954, 963, 943, 944, 945, 946, 947, 952,
	953, 956, 0, 948, 949, 950, 30, 32, 34, 36,
	38, 40, 42, 278, 280, 282, 284, 288, 290, -2,
	1045, 1046, 330, 332, 334, 336, 338, 452, 0, 454,
	0, 589, 1027, 1035, 0, -2, 0, 1077, 1077, 1077,
	0, 0, 1046, 1044, 0, 457, 458, 513, 514, 1310,
	0, 0, 0, 0, 0, 1550, 1394, 0, 515, -2,
	1425, 1427, 1996, 2017, 1549, 1429, 1430, 1431, 1432, 1433,
	0, 0, 1436, 0, 1438, 1439, 1440, 1441, 0, 1443,
	0, 1447, 1448, 1449, 0, 2001, 1630, 1695, -2, 1215,
	1216, 1217, 1218, 1219, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1691, 0, 1516, 1463, -2, 1716, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1775, -2, -2, -2, -2, -2, -2, -2, 1271, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2031, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 0, 1985,
	2002, 2003, 2008, 2010, 2004, 1993, 1486, -2, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 1272, -2, 1997, 1998, 2013, 2014,
	2019, 2024, 2025, 2000, 2009, -2, -2, 1063, 1889, 1066,
	827, 1064, 1048, 1050, 0, 1052, 0, 0, 0, 1057,
	1080, 1078, 0, 1116, 1061, 1062, 1072, 1134, 1157, 0,
	1139, 0, 1157, 1183, 0, 1144, 1909, 1464, 1465, 0,
	1699, 1696, -2, 0, 0, 0, 0, 0, 0, 0,
	422, 0, 428, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 960, 462, 463, 0, 487, 0, 491, 1992,
	-2, 1734, 1929, -2, 495, 964, 968, 969, 970, 971,
	0, 0, 0, 0, 0, 501, 0, 0, 488, 489,
	507, 510, 0, 51, 0, 2002, 1183, 53, 0, 1667,
	1721, 1722, 1723, 1724, 1725, 2031, 2048, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
	2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102,
	2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2124, 2125, 2126, 2127, 2128, 55, 0, 2002, 58,
	0, 2002, 0, -2, 62, 0, 2002, 175, 176, 1712,
	1713, 1717, 1718, 1719, 1720, 65, 0, 1673, 67, 0,
	1670, 76, 0, 2002, 0, 1650, -2, 0, 0, 714,
	1647, 1652, 715, 1657, 0, 198, 199, 200, 201, 202,
	2002, 204, 205, 0, 207, 208, 2002, 210, 211, 0,
	213, 229, 230, 0, 232, 0, 2002, 0, 0, 0,
	238, -2, 255, 0, 252, 0, 242, 243, 245, 246,
	247, 248, 249, 0, 294, 292, 1678, 0, 0, 0,
	885, -2, 2002, 873, 876, 2002, 878, 890, 1681, 0,
	-2, 0, 1070, 2002, 978, 737, 738, 739, 740, 0,
	313, 0, 991, 0, 993, 0, 1013, 1189, 1134, 256,
	257, 258, 259, 260, 2002, 0, 0, 0, 265, 0,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 151,
	2002, 341, 360, 151, 2002, 344, 151, 2002, 347, 151,
	2002, 350, 1645, 151, 2002, 353, 354, 2002, 356, 177,
	357, 2002, 359, 0, -2, 415, 1685, -2, 365, 0,
	366, 0, -2, 0, 189, 0, 0, 720, 721, 0,
	928, 929, 0, 0, 472, 0, 0, 586, 587, 0,
	0, 597, 598, 599, 600, 1917, 1887, 1791, 604, 0,
	607, -2, 0, 0, 0, 611, 0, 616, 617, 618,
	0, 719, 620, 0, 0, 622, 0, 626, 0, 629,
	0, 631, 0, 633, -2, -2, -2, 644, -2, 0,
	648, 0, 650, 0, 0, 0, 0, 665, 666, 0,
	671, 0, 674, 675, 676, 0, 678, 679, 680, 681,
	0, 683, 684, -2, -2, 688, 690, 0, 697, 0,
	701, 0, 705, 0, 593, 594, 151, 1187, 940, -2,
	942, 0, 958, 1030, -2, 0, 453, 0, 456, 1041,
	0, 1037, 0, 1039, 0, 1028, 1033, 1095, 1096, 0,
	0, 0, 0, 1075, 1076, 0, 0, 0, 1025, 1026,
	0, 0, 0, 0, 1555, 1556, 1557, 1558, 1559, 1560,
	1563, 1564, 1561, 1562, 1565, 1566, 0, 0, 0, 0,
	0, 1567, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1568, 1569, 1570, 0, 0, 1572, 0,
	1574, 0, 0, 0, 0, 0, 0, 1373, 1375, 1638,
	0, 0, 1571, 1315, 1316, 1317, 1352, 1353, 0, 0,
	1426, 1635, 1634, 1428, 0, 1586, 0, 1435, 0, 1307,
	1442, 1664, -2, 0, 1550, 1581, 0, 0, 1450, 1451,
	1452, 0, 0, 1586, 0, 0, 1629, 0, 1518, 0,
	1251, 0, 1252, 1253, 0, 1254, 1255, 1268, 1281, 0,
	0, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 0, 0, 0, 1610, -2, 0, 0, 0, 0,
	0, 1065, 0, 0, 1120, 1639, 1643, 1644, 1120, 1120,
	0, 0, 1587, 1180, 1180, 0, 0, 1176, 1176, 1176,
	1174, 1151, 0, 403, 405, 407, 409, 410, 411, 413,
	1157, 0, 1167, 0, 1157, 1157, 0, -2, 1139, 0,
	0, 1167, 1184, 1185, 0, 0, 0, 0, 0, 0,
	1700, 0, 0, 0, 1687, 0, 0, 0, 0, 433,
	443, 1072, 0, 1589, 1205, 1208, 1209, 1210, 1211, 1214,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, -2, 1269, 1271,
	1292, 1258, 1259, 1260, 1261, 1262, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1264, 0, 1239,
	1239, 1239, 1256, 1257, 1280, 1291, 1283, 1291, 1287, 1206,
	1207, 1274, 1275, 1276, 1277, 0, 437, 0, 0, 0,
	0, -2, 497, 502, 503, 0, 0, 966, 0, 972,
	524, 525, 526, 974, 975, 0, 500, 527, 528, 529,
	530, 531, 532, 0, 844, 0, 846, 1659, 0, 498,
	517, 505, 0, 511, 77, 923, 116, 0, 923, 923,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 101,
	112, 89, 90, 0, 0, 0, 0, 59, 852, 0,
	855, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 100, 0, 95, 79, 0, 0, 0,
	102, 114, 0, 142, 144, 0, 0, 1170, 159, 0,
	713, 0, 0, 1700, 1655, 0, 0, 0, 0, 231,
	233, 0, 235, 236, 237, 0, 884, 0, 244, 241,
	285, 801, 2002, 0, 0, 311, 306, 0, 308, 851,
	2002, 849, 1682, 0, 871, 0, 1069, 0, 0, 0,
	0, 891, 0, 2002, 896, 1669, 1708, 1709, 980, 0,
	315, 0, 994, 0, 0, 1190, 0, 1192, 0, 262,
	263, 264, 0, 339, 0, 149, 150, 0, 342, 0,
	345, 0, 348, 0, 0, 351, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 0, 189, 161, 189, 189, 1170, 474, 1170, 476,
	0, 0, 601, 602, 603, 605, 606, 608, 609, -2,
	-2, 698, 668, 0, 0, 0, 667, 619, 0, 707,
	1905, 717, 668, 1766, 668, 1766, 668, 1766, 630, 632,
	635, 660, 643, 647, 0, 0, 0, 652, 0, 654,
	0, 656, 668, 669, 672, 677, 682, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 957, 1031, 1033, 455,
	1034, 0, 1043, 1036, 0, 1040, 1029, 1093, 1094, 1099,
	1100, 1106, 1109, 1110, 1102, 1310, 1058, 1059, 1060, 1084,
	1085, 910, 0, 2129, 1311, 1200, 1312, 1313, 1666, 0,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	-2, -2, -2, -2, -2, -2, -2, -2, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, -2,
	-2, -2, 1350, 1351, -2, 1573, 1575, 0, 1638, 0,
	-2, 0, -2, -2, -2, -2, 1370, 0, 1372, 1377,
	1379, 1381, 0, 0, 0, 0, 1637, 1391, 1621, 1622,
	0, 0, 1552, 1553, 1554, 1376, 0, 1395, 1636, 1633,
	0, 0, 1585, 1083, 1454, 0, 0, 0, 0, 1461,
	0, 1665, 1306, 1293, 1294, 1295, 1296, 1297, 1298, 1308,
	1446, 1583, 0, 1582, 0, 0, 0, 1593, 0, 1628,
	1624, 0, 1688, 1694, 1526, 0, 0, 0, 0, 1662,
	0, 0, 0, 0, 0, 0, 0, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1498, 0, 1596, -2,
	-2, -2, -2, -2, -2, -2, -2, 0, 1500, 0,
	1502, 1587, 1607, 0, 0, 1396, 0, 0, 0, 1550,
	0, 1505, 1587, 1615, 0, 0, 0, 0, 0, 1587,
	0, 1620, 0, 1512, 0, 1514, 1067, 0, 0, 1195,
	0, 0, 0, 1642, 1195, 1195, 0, 1115, 0, 0,
	1177, 1178, 1179, 0, 0, 1180, 0, 1171, 1175, 1172,
	1173, 0, 0, 1157, 404, 406, 408, 412, 414, 1167,
	1131, 0, 0, 1668, 1137, 1166, 0, 827, 1156, 1167,
	1167, 0, -2, 1141, 0, 0, 1083, -2, 190, 826,
	0, 0, 0, 0, 0, 423, 425, 0, 0, 417,
	0, 420, 0, 1196, 1199, 0, 1212, 0, 0, -2,
	0, 0, 0, 0, 0, 490, 0, 965, 973, 0,
	521, 0, 523, 0, 845, 1661, 1660, 0, 512, 0,
	0, 0, 0, 922, 120, 2002, 0, 153, 0, 0,
	795, 1674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 91,
	0, 0, 0, 0, 0, 0, 0, 853, 854, 856,
	863, 865, 0, 859, 1663, 0, 860, 0, 862, 864,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 92, 0, 0, 0, 0, 1649, 180, 1169,
	0, 1648, 1658, 0, 203, 206, 209, 212, 0, 239,
	0, 0, 743, 725, 0, 0, 293, 189, 0, 0,
	307, 847, 850, 0, 827, 883, 1680, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 2002, 982, 988,
	0, 1195, 0, 1011, 996, 0, 0, 0, 1011, 1015,
	1016, 1018, 1019, 0, 0, 1191, 0, 266, 361, 151,
	151, 151, 1646, 151, 151, 178, 355, 358, 364, 416,
	1072, 1072, 189, 187, 1866, 185, 182, 184, 0, 0,
	0, 744, 746, 747, 748, 749, 0, 1709, 0, 1820,
	1709, 0, 999, 1001, 0, 156, 189, 0, 0, 305,
	473, 478, 595, 0, 637, 662, 610, 612, 613, 614,
	0, 718, 716, 621, 668, 624, 668, 627, 668, 646,
	649, 651, 0, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 702, 703, 704, 706, 1188, 1032, 1042,
	1038, 0, 1104, 0, 1103, 1107, 1108, 0, 1092, 908,
	909, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1392, 0, -2, 1371, 1374, 1378, 1380, 1382, 0, 0,
	0, 0, 0, 0, 1576, 0, 1578, 1393, 1631, 1634,
	1548, 0, 0, 1082, 1083, 1083, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 1584, 0, 1591, 1592, 0,
	1453, 0, 1625, 0, 0, 0, 1462, 0, 0, 0,
	1263, 1237, 0, 1291, 1289, 1290, 1284, 1291, 1288, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 1485, 1497,
	0, 1499, 1501, 0, 0, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1399,
	1400, 1401, 1504, 1613, 1614, 0, 0, 0, 0, 0,
	0, 1510, 0, 1619, 1511, 1513, 1072, 1117, 1112, 1194,
	0, 1640, 1170, 1119, 1121, 1641, 1671, 1112, 1112, 0,
	1588, 0, 0, 1161, 0, 0, 0, 1163, 0, 1152,
	0, 1154, 1167, 1136, 0, 0, 1129, 0, 1125, 1126,
	1127, 1128, 827, 1165, 1138, 1142, 1688, 0, 1186, 0,
	1146, 1149, 0, 0, 1701, 214, 218, 219, 215, 216,
	217, 432, 0, 0, 1590, 0, 1201, 0, 0, 0,
	0, 0, 436, 0, 486, -2, 519, 520, 522, 0,
	518, 117, 923, 0, 0, 914, 0, 122, 2002, 131,
	0, 772, 0, 1672, 0, 0, 0, 0, 925, 0,
	0, 2002, 151, 2002, 151, 134, 137, 0, 141, 139,
	0, 0, 763, 78, 923, 81, 85, 93, 0, 0,
	0, 99, 0, 0, 0, 916, 0, 857, 858, 861,
	867, 60, 0, 918, 912, 0, 911, 143, 83, 87,
	94, 0, 920, 80, 0, 189, 0, 160, 1654, 0,
	0, 0, 0, 0, 742, 812, 0, 0, 0, 0,
	299, 295, 0, 304, 310, 309, 0, 0, 874, -2,
	877, 886, 0, 888, 900, 0, 0, 0, 984, 988,
	0, 987, 1070, 1083, 314, 989, 1011, 0, 0, 0,
	998, 995, 992, 1195, 0, 0, 0, 0, 0, 261,
	340, 343, 346, 349, 352, 367, 368, 164, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 1709,
	1709, 0, 1676, 0, 0, 0, 0, 157, 162, 0,
	475, 0, 0, 0, 623, 625, 628, 653, 655, 668,
	691, 692, 758, 0, 758, 0, 0, 0, 0, 1086,
	1087, 0, 910, 0, 1314, 1355, 0, 0, -2, 0,
	0, 1359, 0, 0, 0, -2, 0, 0, 0, 1577,
	1579, 0, 1633, 1455, 0, 0, 0, 1459, 1437, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 0, 1444, 1445, 1551,
	1594, 1623, 1627, 0, 1689, 1693, 1524, 1525, 1529, 1679,
	0, 0, 0, 1282, 1286, 1466, 0, 0, 0, 0,
	0, 0, 0, 1595, 1606, 1608, 1397, 1398, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, -2, -2,
	-2, 1415, 1416, 1417, -2, -2, -2, 0, 0, 0,
	1609, 1611, 1612, 1616, 1617, 0, 1507, 1508, 1509, 1618,
	0, 1114, 0, 1193, 1118, 0, 1114, 1114, 1079, 1159,
	0, 0, 1182, 0, 1134, 1153, 0, 1143, 1132, 0,
	1133, 0, 1164, 0, 1140, 1145, 0, 1148, 0, 1455,
	-2, 434, 418, 0, 0, 1203, 1213, 0, 1266, 1270,
	438, 1168, 0, 0, 0, 0, 152, 770, 794, 0,
	0, 903, 910, 0, 0, 124, 0, 0, 0, 132,
	0, 0, 129, 0, 136, 140, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 103, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 234, 882, 240,
	752, 800, 0, 802, 0, 726, 0, 801, 291, 0,
	298, 0, 851, 0, 872, 887, 0, 0, 0, 0,
	0, 986, 988, 0, 979, 980, 1098, 990, 1009, -2,
	1008, 0, 1083, 1017, 1014, 1020, 1021, 0, 186, 0,
	181, 183, 0, 167, 0, 0, 745, 750, 0, 0,
	0, 0, 0, 1000, 1002, 0, 173, 0, 596, 615,
	663, 693, 757, 0, 0, 695, 0, 0, 1101, 1105,
	1090, 1091, 1088, 910, 1357, 1361, 0, 0, 0, 1363,
	-2, 0, 1385, -2, -2, 1580, 1632, 1434, 1083, 1456,
	1458, 1309, 1626, 0, 1531, 1528, 0, 1515, 1238, 1476,
	1477, 0, 0, 1480, 1482, 1483, 1484, 1605, 0, 0,
	0, 0, 1506, 1068, 1520, 0, 0, 1122, 1520, 1520,
	1160, 0, 1162, 1157, 1155, 1130, 1123, 0, 1689, 1147,
	0, 0, 1197, 1202, 0, 1265, 118, 119, 121, 0,
	771, 0, 774, 0, 0, 0, 0, 781, 782, 0,
	0, 0, 0, 0, 816, 825, 0, 1092, 0, 0,
	0, 126, 146, 0, 0, 924, 0, 0, 151, 151,
	0, 0, 915, 0, 0, 0, 0, 106, 0, 0,
	917, 919, 913, 0, 0, 921, 179, 760, 0, 812,
	804, 805, 806, 0, 811, 813, 0, 0, 730, 727,
	743, 725, 0, 296, 848, 881, 0, 899, 0, 0,
	0, 976, 988, 0, 981, 982, 1011, 1097, 0, 0,
	0, 997, 1098, 0, 188, 189, 0, 0, 0, 0,
	0, 0, 0, 189, 477, 479, 0, 0, 485, 756,
	0, 0, 0, 0, 1089, 1365, -2, -2, 1386, 0,
	1690, 1692, 1083, 0, 1517, 0, 0, -2, 0, 0,
	0, 1054, 0, 1113, 1111, 1055, 1056, 1181, 1167, 0,
	1150, 0, 1204, 123, 0, 775, 776, 1675, 778, 0,
	780, 783, 0, 785, 1711, 0, 789, 796, 817, 0,
	752, 0, 822, 823, 904, 905, 798, 0, 125, 127,
	145, 907, 133, 128, 135, 0, 0, 82, 0, 0,
	1760, 109, 107, 105, 84, 0, 725, 759, 0, 803,
	0, 814, 815, 728, 0, 0, 0, 297, 300, 0,
	303, 0, 900, 0, 0, 0, 983, 984, 312, 0,
	0, 0, 1011, 1022, 166, 0, 0, 825, 0, 0,
	793, 0, 171, 0, 481, 0, 483, 0, 694, 696,
	0, 0, 1457, 1535, 0, 1478, 1479, -2, 0, 1423,
	1519, 1521, 0, 1135, 1124, 1198, 773, 777, 0, 0,
	831, 0, 0, 0, 820, 821, 760, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	731, 0, 752, 0, 301, 302, 825, 0, 825, 0,
	985, 986, 0, 1004, 1005, 1007, 1012, 0, 0, 752,
	825, 792, 0, 480, 0, 0, 699, 700, 0, 0,
	0, 0, 1530, 1424, 0, 0, 0, 784, 836, 0,
	0, 0, 818, 819, 816, 0, 827, 130, 0, 906,
	0, 764, 0, 0, 767, 0, 0, 110, 1760, 108,
	0, 0, 0, 808, 810, 732, 760, 730, 752, 0,
	752, 0, 977, 0, 1006, 189, 189, 760, 752, 189,
	482, 484, 1527, 1547, 1536, -2, 1965, 1763, 0, 1547,
	1547, 1522, 1523, 0, 786, 832, 833, 0, 828, 829,
	830, 1710, 787, 788, 797, 824, 831, 147, 761, 0,
	0, 762, 0, 0, 113, 0, 115, 0, 807, 0,
	725, 729, 760, 0, 760, 0, 1195, 168, 169, 790,
	760, 170, 1532, 0, 0, 1538, 1539, 1540, 1541, 1542,
	1533, 1534, 779, 834, 0, 835, 0, 0, 0, 836,
	765, 0, 768, 0, 111, 0, 809, 724, 897, 825,
	897, 825, 1003, 791, 0, 1544, 1545, 0, 0, 837,
	0, 840, 841, 0, 838, 816, 0, 0, 755, 892,
	0, 752, 894, 752, 1543, 1546, 1537, 839, 842, 843,
	799, 0, 0, 751, 753, 754, 898, 760, 760, 760,
	0, 897, 897, 766, 0, 893, 895, 0, 0, 760,
	769,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 452, 3, 458, 453, 3,
	463, 464, 456, 454, 468, 455, 465, 457, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 471, 3,
	444, 446, 445, 449, 467, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 461, 3, 462, 459, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 469, 451, 470, 447,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 448, 57787, 450, 57788, 460, 57789, 466,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1092
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1112
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1211
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1237
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1287
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1319
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1333
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1343
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1352
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1373
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1381
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1416
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1423
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1435
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1450
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1459
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1499
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1509
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1518
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1529
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1535
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1686
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				TableIndex: sqlDollar[6].union.tableIndexName(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1733
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1832
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1923
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1932
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1948
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1953
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1958
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1989
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2035
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2049
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2053
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2059
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2072
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2170
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2174
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2182
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2201
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2206
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2218
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2219
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2221
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2222
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2223
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplemented(sqllex, "create server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2250
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2253
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2254
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2257
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2258
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2276
		{
			return unimplemented(sqllex, "drop server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2277
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2278
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2284
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2290
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2291
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2310
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2314
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2318
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2324
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2337
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2350
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2360
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2383
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2399
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2419
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2430
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2434
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2458
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2462
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2488
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "DROP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2492
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2519
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2523
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2526
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2541
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2564
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2587
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2599
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2617
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2621
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2626
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2658
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2677
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "DELETE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2708
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2709
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "INSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2743
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2751
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2776
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2784
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2788
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2792
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2802
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2806
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2814
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2817
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2837
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2841
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2845
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2848
		{
			return helpWith(sqllex, "GRANT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2868
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2872
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2879
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2884
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2888
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2898
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2916
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2917
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2925
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "RESET")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2943
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "USE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2962
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2964
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2968
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "USE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3034
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3054
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3070
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3136
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3174
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3179
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3184
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3189
		{
			return unimplemented(sqllex, "set from current")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3190
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3231
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3266
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3270
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3284
		{
			sqlVAL.union.val = tree.Low
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3288
		{
			sqlVAL.union.val = tree.Normal
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = tree.High
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3307
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3320
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3402
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3440
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3448
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3477
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3482
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3485
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3493
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3519
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3527
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3530
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3543
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3551
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3562
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3564
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3572
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3575
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3584
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3595
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3597
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3600
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3608
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3611
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3616
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3620
		{
			sqlVAL.union.val = true
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = true
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3624
		{
			sqlVAL.union.val = false
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3641
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3642
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3648
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3651
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3669
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3678
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3681
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3683
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3686
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3688
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3692
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3695
		{
			sqlVAL.union.val = true
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3696
		{
			sqlVAL.union.val = false
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3704
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3707
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3712
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3720
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3730
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3740
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3746
		{
			sqlVAL.union.val = true
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = false
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3754
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3758
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3761
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3768
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3772
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3775
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3782
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3786
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3794
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3799
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3804
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3808
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3820
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3824
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3837
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3840
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3848
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3851
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3859
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3863
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3871
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3886
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3893
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3897
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3908
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3916
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3931
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3936
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3940
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3943
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3947
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3954
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3959
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4079
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4087
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4126
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4130
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4139
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4155
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4171
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4183
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4219
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4232
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4246
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4247
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4248
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4252
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4263
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4275
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4276
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4277
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4295
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4296
		{
			sqlVAL.union.val = true
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4301
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = true
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4305
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4332
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4335
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4339
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4355
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4360
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4371
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4398
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4411
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4431
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4455
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4470
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4480
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4488
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4518
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4522
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4526
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4538
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4542
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4556
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4560
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 790:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4616
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4622
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4628
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4649
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4663
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4673
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4683
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4698
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4705
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4711
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4742
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4758
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4763
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4764
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4765
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4766
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4767
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4768
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4819
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4823
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4827
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4831
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4844
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4852
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4876
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4880
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4884
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4888
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4892
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4902
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4927
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4936
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4944
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4948
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4951
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4955
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4958
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4959
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4960
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4970
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4973
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4975
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4977
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4979
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4980
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4982
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4985
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4995
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4998
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5013
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5017
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.union.val = nil
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5031
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5038
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5043
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5044
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5052
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5061
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5062
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5065
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5066
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5072
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5074
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5076
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5078
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5080
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5082
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5098
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5112
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5127
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5141
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5155
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5158
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5159
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5163
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5178
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = true
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = false
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5207
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5229
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5230
		{
			sqlVAL.str = ""
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5234
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.union.val = tree.Descending
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5242
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5265
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5271
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5279
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5285
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5293
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5299
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5307
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5311
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5316
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5317
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5320
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5321
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5329
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5332
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5354
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5365
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5369
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5370
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5371
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5390
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5395
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5408
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5410
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5413
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5422
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5423
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5424
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5432
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5439
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5442
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5443
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5447
		{
			sqlVAL.str = ""
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5451
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5455
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5459
		{
			sqlVAL.str = ""
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5465
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5475
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5479
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5485
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5489
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5502
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5504
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5508
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5513
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5517
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5521
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5533
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5539
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5543
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 976:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5553
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5573
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5577
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5581
		{
			sqlVAL.str = ""
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5587
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.str = ""
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5597
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.str = ""
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5607
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5611
		{
			sqlVAL.str = ""
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5616
		{
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5617
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5636
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5643
		{
			return helpWith(sqllex, "INSERT")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5661
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5665
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5674
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5685
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5719
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5723
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5727
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5733
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5736
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5737
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5739
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5745
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5754
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5771
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5783
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5795
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5812
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5815
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5819
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5862
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5891
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5895
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5919
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5926
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5929
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5931
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5932
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5937
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5972
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5973
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5974
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6035
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6057
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6072
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6079
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6095
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6116
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6124
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6125
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6133
		{
			sqlVAL.union.val = nil
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6138
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6139
		{
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6143
		{
			sqlVAL.union.val = true
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = false
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6151
		{
			sqlVAL.union.val = false
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.union.val = true
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6163
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6168
		{
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6169
		{
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6183
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6199
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6220
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6225
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6254
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6263
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6275
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6283
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6328
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6329
		{
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6332
		{
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6333
		{
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6350
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6354
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6386
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6388
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6403
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6405
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6411
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6425
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6430
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6435
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6446
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6458
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6477
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6516
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6530
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6565
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6576
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6606
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6628
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6630
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6633
		{
			sqlVAL.union.val = nil
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = true
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = false
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6699
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6703
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6716
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6723
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.str = tree.AstFull
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6737
		{
			sqlVAL.str = tree.AstRight
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.str = tree.AstInner
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6747
		{
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6748
		{
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6769
		{
			sqlVAL.str = tree.AstHash
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6773
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6777
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6781
		{
			sqlVAL.str = ""
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6805
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6806
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6810
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6815
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6829
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6833
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6839
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6847
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6876
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6889
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6897
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6898
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6915
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6916
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6918
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6926
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6938
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6940
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.String
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.Name
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6992
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = types.INet
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = types.Oid
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7041
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7072
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7080
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = nil
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = types.Int2
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = types.Int2
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = types.Int4
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = types.Int
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = types.Int
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = types.Int
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = types.Float4
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = types.Float4
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = types.Float
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.Float
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7147
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7155
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7163
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = types.Bool
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = types.Bool
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = types.RegType
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7204
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = types.Float
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7223
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7229
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7251
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = types.String
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = true
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = false
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = types.Date
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7300
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7305
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7313
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7315
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7323
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7340
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = true
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = false
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = false
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = types.Interval
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = tree.Year
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.union.val = tree.Month
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = tree.Day
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = tree.Month
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = nil
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = tree.Second
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7428
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7475
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7719
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7785
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7807
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7851
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7875
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8001
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8006
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8015
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8033
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8042
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8081
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8092
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8093
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8105
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8108
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8119
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8163
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8181
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8231
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8236
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8243
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8246
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8251
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8256
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8266
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8275
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8276
		{
			return unimplemented(sqllex, "treat")
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8297
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8302
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8307
		{
			return unimplemented(sqllex, "within group")
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8308
		{
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8343
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.str = ""
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8432
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8445
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8513
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8542
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = tree.Any
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = tree.Some
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8562
		{
			sqlVAL.union.val = tree.All
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = tree.Div
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8574
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = tree.LT
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8578
		{
			sqlVAL.union.val = tree.GT
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = tree.LE
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8581
		{
			sqlVAL.union.val = tree.GE
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8582
		{
			sqlVAL.union.val = tree.NE
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.union.val = tree.Like
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8589
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8622
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8626
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8668
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8712
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8735
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8739
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8743
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8749
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8789
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8793
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8799
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8805
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8811
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8815
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8819
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8837
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8844
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8860
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8864
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8871
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8877
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8881
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8903
		{
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8904
		{
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8908
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8918
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8927
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8931
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8935
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8943
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8953
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8976
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8984
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9016
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9024
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9028
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9034
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9046
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9050
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9059
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9070
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9079
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9087
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9184
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9191
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9195
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9199
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9213
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9217
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9221
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9234
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9252
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9265
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9272
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9297
		{
			sqlVAL.str = ""
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9303
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9307
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
